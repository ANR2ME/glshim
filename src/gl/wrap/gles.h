#ifndef USE_ES2
#include "../types.h"

#ifndef GLESWRAP_H
#define GLESWRAP_H

enum FORMAT {
    FORMAT_int_Display___GENPT___int,
    FORMAT_void_uint32_t_uint32_t,
    FORMAT_void_uint32_t,
    FORMAT_XVisualInfo___GENPT___Display___GENPT___int_int___GENPT__,
    FORMAT_void,
    FORMAT_void_Display___GENPT___GLXContext_GLXContext_unsigned_long,
    FORMAT_GLXContext_Display___GENPT___XVisualInfo___GENPT___GLXContext_Bool,
    FORMAT_GLXContext_Display___GENPT___void___GENPT___GLXContext_Bool_const_int___GENPT__,
    FORMAT_void_uint32_t_uint32_t_uint32_t_uint32_t,
    FORMAT_GLXPixmap_Display___GENPT___XVisualInfo___GENPT___Pixmap,
    FORMAT_void_uint32_t_uint32_t_uint32_t,
    FORMAT_void_Display___GENPT___uint32_t_uint32_t_uint32_t_uint32_t_uint32_t,
    FORMAT_void_Display___GENPT___GLXContext,
    FORMAT_void_Display___GENPT___GLXPixmap,
    FORMAT_void_Display___GENPT___uint32_t,
    FORMAT_const_char___GENPT___Display___GENPT___int,
    FORMAT_int_Display___GENPT___XVisualInfo___GENPT___int_int___GENPT__,
    FORMAT_GLXContext,
    FORMAT_GLXDrawable,
    FORMAT_int_Display___GENPT___int_int_int_const_void___GENPT__,
    FORMAT_int_Display___GENPT___int_int_GLXHyperpipeConfigSGIX_int___GENPT__,
    FORMAT_Bool_Display___GENPT___GLXContext,
    FORMAT_Bool_Display___GENPT___GLXDrawable_GLXContext,
    FORMAT_Bool_Display___GENPT___int___GENPT___int___GENPT__,
    FORMAT_int_Display___GENPT___int_int_int_const_void___GENPT___void___GENPT__,
    FORMAT_GLXHyperpipeConfigSGIX___GENPT___Display___GENPT___int_int___GENPT__,
    FORMAT_GLXHyperpipeNetworkSGIX___GENPT___Display___GENPT___int___GENPT__,
    FORMAT_const_char___GENPT___Display___GENPT___int_int,
    FORMAT_Bool_Display___GENPT___GLXDrawable,
    FORMAT_void_Display___GENPT___GLXDrawable,
    FORMAT_int_unsigned_int,
    FORMAT_void_unsigned_int,
    FORMAT_void_Font_int_int_int,
    FORMAT_Bool_Display___GENPT___GLXPbufferSGIX_DMparams___GENPT___DMbuffer,
    FORMAT_int_Display___GENPT___int_int_Window,
    FORMAT_Bool_Display___GENPT___GLuint_GLuint,
    FORMAT_void_Display___GENPT___GLXDrawable_int,
    FORMAT_void_Display___GENPT___GLXDrawable_int_const_int___GENPT__,
    FORMAT_int_Display___GENPT___unsigned_int_GLXVideoCaptureDeviceNV,
    FORMAT_int_Display___GENPT___unsigned_int_unsigned_int_const_int___GENPT__,
    FORMAT_int_Display___GENPT___GLXVideoDeviceNV_GLXPbuffer_int,
    FORMAT_int_Display___GENPT___int_int_int_int_int_int,
    FORMAT_int_Display___GENPT___int_int_GLenum,
    FORMAT_GLXFBConfig___GENPT___Display___GENPT___int_const_int___GENPT___int___GENPT__,
    FORMAT_GLXFBConfigSGIX___GENPT___Display___GENPT___int_int___GENPT___int___GENPT__,
    FORMAT_void_Display___GENPT___GLXContext_GLuint_GLenum_GLint_GLint_GLint_GLint_GLXContext_GLuint_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei,
    FORMAT_void_Display___GENPT___GLXDrawable_int_int_int_int,
    FORMAT_GLXContext_Display___GENPT___GLXFBConfig_GLXContext_Bool_const_int___GENPT__,
    FORMAT_GLXContext_Display___GENPT___GLXFBConfigSGIX_int_GLXContext_Bool,
    FORMAT_GLXPbufferSGIX_Display___GENPT___GLXFBConfigSGIX_unsigned_int_unsigned_int_int___GENPT__,
    FORMAT_GLXPixmap_Display___GENPT___XVisualInfo___GENPT___Pixmap_Colormap,
    FORMAT_GLXPixmap_Display___GENPT___GLXFBConfigSGIX_Pixmap,
    FORMAT_GLXVideoSourceSGIX_Display___GENPT___int_VLServer_VLPath_int_VLNode,
    FORMAT_GLXContext_Display___GENPT___GLXFBConfig_int_GLXContext_Bool,
    FORMAT_GLXPbuffer_Display___GENPT___GLXFBConfig_const_int___GENPT__,
    FORMAT_GLXPixmap_Display___GENPT___GLXFBConfig_Pixmap_const_int___GENPT__,
    FORMAT_GLXWindow_Display___GENPT___GLXFBConfig_Window_const_int___GENPT__,
    FORMAT_void_Display___GENPT___Window_float,
    FORMAT_void_Display___GENPT___GLXPbufferSGIX,
    FORMAT_void_Display___GENPT___GLXVideoSourceSGIX,
    FORMAT_void_Display___GENPT___GLXPbuffer,
    FORMAT_void_Display___GENPT___GLXWindow,
    FORMAT_GLXVideoCaptureDeviceNV___GENPT___Display___GENPT___int_int___GENPT__,
    FORMAT_unsigned_int___GENPT___Display___GENPT___int_int___GENPT__,
    FORMAT_unsigned_int_const_void___GENPT__,
    FORMAT_GLXContextID_const_GLXContext,
    FORMAT_Display___GENPT__,
    FORMAT_int_Display___GENPT___GLXFBConfig_int_int___GENPT__,
    FORMAT_int_Display___GENPT___GLXFBConfigSGIX_int_int___GENPT__,
    FORMAT_GLXFBConfigSGIX_Display___GENPT___XVisualInfo___GENPT__,
    FORMAT_GLXFBConfig___GENPT___Display___GENPT___int_int___GENPT__,
    FORMAT_Bool_Display___GENPT___GLXDrawable_int32_t___GENPT___int32_t___GENPT__,
    FORMAT___GLXextFuncPtr_const_GLubyte___GENPT__,
    FORMAT_void_Display___GENPT___GLXDrawable_unsigned_long___GENPT__,
    FORMAT_Bool_Display___GENPT___GLXDrawable_int64_t___GENPT___int64_t___GENPT___int64_t___GENPT__,
    FORMAT_Status_Display___GENPT___Window_Window_long___GENPT__,
    FORMAT_int_Display___GENPT___int_int_GLXVideoDeviceNV___GENPT__,
    FORMAT_int_Display___GENPT___int_GLXVideoDeviceNV_unsigned_long___GENPT___unsigned_long___GENPT__,
    FORMAT_int_unsigned_int___GENPT__,
    FORMAT_XVisualInfo___GENPT___Display___GENPT___GLXFBConfig,
    FORMAT_XVisualInfo___GENPT___Display___GENPT___GLXFBConfigSGIX,
    FORMAT_int_Display___GENPT___int_int_int_void___GENPT__,
    FORMAT_int_Display___GENPT___int_int_GLXHyperpipeConfigSGIX___GENPT___int___GENPT__,
    FORMAT_GLXContext_Display___GENPT___GLXContextID,
    FORMAT_Bool_Display___GENPT___GLXDrawable_GLuint,
    FORMAT_void_Display___GENPT___GLXDrawable_GLXDrawable,
    FORMAT_void_Display___GENPT___GLXVideoCaptureDeviceNV,
    FORMAT_Bool_Display___GENPT___GLXDrawable_GLXDrawable_GLXContext,
    FORMAT_int_Display___GENPT___int_int_int___GENPT___int___GENPT___int___GENPT___int___GENPT__,
    FORMAT_int_Display___GENPT___GLXContext_int_int___GENPT__,
    FORMAT_void_Display___GENPT___GLXDrawable_int_unsigned_int___GENPT__,
    FORMAT_Bool_Display___GENPT___int_GLuint___GENPT__,
    FORMAT_int_Display___GENPT___GLXPbufferSGIX_int_unsigned_int___GENPT__,
    FORMAT_int_Display___GENPT___int_int_int_void___GENPT___void___GENPT__,
    FORMAT_Bool_Display___GENPT___int_int___GENPT__,
    FORMAT_Bool_Display___GENPT___int_GLuint___GENPT___GLuint___GENPT__,
    FORMAT_Bool_Display___GENPT___GLXDrawable_GLuint___GENPT___GLuint___GENPT__,
    FORMAT_int_Display___GENPT___GLXVideoCaptureDeviceNV_int_int___GENPT__,
    FORMAT_int_Display___GENPT___int_GLXVideoDeviceNV,
    FORMAT_int_Display___GENPT___GLXPbuffer,
    FORMAT_Bool_Display___GENPT___int,
    FORMAT_void_Display___GENPT___GLXDrawable_unsigned_long,
    FORMAT_int_Display___GENPT___GLXPbuffer_int_unsigned_long___GENPT___GLboolean,
    FORMAT_Bool_int,
    FORMAT_int64_t_Display___GENPT___GLXDrawable_int64_t_int64_t_int64_t,
    FORMAT_int_int,
    FORMAT_Bool_Display___GENPT___GLXDrawable_int64_t_int64_t_int64_t_int64_t___GENPT___int64_t___GENPT___int64_t___GENPT__,
    FORMAT_Bool_Display___GENPT___GLXDrawable_int64_t_int64_t___GENPT___int64_t___GENPT___int64_t___GENPT__,
    FORMAT_int_int_int_unsigned_int___GENPT__,
    FORMAT_void_GLenum_GLfloat,
    FORMAT_void_GLenum_GLfixed,
    FORMAT_void_GLuint,
    FORMAT_void_GLuint_GLuint,
    FORMAT_void_GLenum,
    FORMAT_void_GLuint_const_GLchar___GENPT__,
    FORMAT_void_GLenum_GLuint_GLuint_GLuint_GLuint_GLuint,
    FORMAT_void_GLenum_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint,
    FORMAT_void_GLenum_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint,
    FORMAT_GLboolean_GLsizei_const_GLuint___GENPT___GLboolean___GENPT__,
    FORMAT_void_GLint,
    FORMAT_void_GLenum_GLint_GLenum_GLsizei_GLuint_GLuint,
    FORMAT_void_GLhandleARB_GLhandleARB,
    FORMAT_void_GLuint_GLenum,
    FORMAT_void_GLenum_GLuint,
    FORMAT_void_GLenum_GLuint_GLuint,
    FORMAT_void_GLuint_GLuint_const_GLchar___GENPT__,
    FORMAT_void_GLhandleARB_GLuint_const_GLcharARB___GENPT__,
    FORMAT_void_GLenum_GLuint_GLuint_GLintptr,
    FORMAT_void_GLenum_GLuint_GLuint_GLintptr_GLsizeiptr,
    FORMAT_void_GLuint_GLuint_GLuint_const_GLchar___GENPT__,
    FORMAT_void_GLuint_GLuint_GLint_GLboolean_GLint_GLenum_GLenum,
    FORMAT_void_GLuint_GLuint_GLint_GLboolean_GLint_GLenum_GLint,
    FORMAT_GLuint_GLenum_GLenum,
    FORMAT_void_GLenum_GLenum_GLuint,
    FORMAT_GLuint_GLenum,
    FORMAT_GLuint_GLenum_GLenum_GLenum,
    FORMAT_void_GLuint_GLuint_GLintptr_GLsizei,
    FORMAT_void_GLuint_GLuint_GLenum_GLintptrARB,
    FORMAT_void_GLuint_GLuint_GLenum_GLenum_GLuint,
    FORMAT_void_GLbyte_GLbyte_GLbyte,
    FORMAT_void_const_GLbyte___GENPT__,
    FORMAT_void_GLdouble_GLdouble_GLdouble,
    FORMAT_void_const_GLdouble___GENPT__,
    FORMAT_void_GLfloat_GLfloat_GLfloat,
    FORMAT_void_const_GLfloat___GENPT__,
    FORMAT_void_GLint_GLint_GLint,
    FORMAT_void_const_GLint___GENPT__,
    FORMAT_void_GLshort_GLshort_GLshort,
    FORMAT_void_const_GLshort___GENPT__,
    FORMAT_void_GLenum_GLsizei_const_GLvoid___GENPT__,
    FORMAT_void_GLsizei_GLsizei_GLfloat_GLfloat_GLfloat_GLfloat_const_GLubyte___GENPT__,
    FORMAT_void_GLsizei_GLsizei_GLfixed_GLfixed_GLfixed_GLfixed_const_GLubyte___GENPT__,
    FORMAT_void_GLfloat_GLfloat_GLfloat_GLfloat,
    FORMAT_void_GLfixed_GLfixed_GLfixed_GLfixed,
    FORMAT_void_GLenum_GLenum,
    FORMAT_void_GLuint_GLenum_GLenum,
    FORMAT_void_GLenum_GLenum_GLenum_GLenum,
    FORMAT_void_GLuint_GLenum_GLenum_GLenum_GLenum,
    FORMAT_void_GLint_GLint_GLint_GLint_GLint_GLint_GLint_GLint_GLbitfield_GLenum,
    FORMAT_void_GLenum_GLuint_GLuint64EXT_GLsizeiptr,
    FORMAT_void_GLenum_GLsizeiptr_const_GLvoid___GENPT___GLenum,
    FORMAT_void_GLenum_GLsizeiptrARB_const_GLvoid___GENPT___GLenum,
    FORMAT_void_GLenum_GLenum_GLint,
    FORMAT_void_GLenum_GLintptr_GLsizeiptr_const_GLvoid___GENPT__,
    FORMAT_void_GLenum_GLintptrARB_GLsizeiptrARB_const_GLvoid___GENPT__,
    FORMAT_void_GLsizei_GLenum_const_GLvoid___GENPT__,
    FORMAT_GLenum_GLenum,
    FORMAT_GLenum_GLuint_GLenum,
    FORMAT_void_GLbitfield,
    FORMAT_void_GLenum_GLenum_GLenum_GLenum_const_void___GENPT__,
    FORMAT_void_GLenum_GLenum_GLintptr_GLsizeiptr_GLenum_GLenum_const_void___GENPT__,
    FORMAT_void_GLenum_GLint_GLfloat_GLint,
    FORMAT_void_GLenum_GLint_const_GLfloat___GENPT__,
    FORMAT_void_GLenum_GLint_const_GLint___GENPT__,
    FORMAT_void_GLenum_GLint_const_GLuint___GENPT__,
    FORMAT_void_GLint_GLint_GLint_GLint,
    FORMAT_void_GLuint_GLuint_GLuint_GLuint,
    FORMAT_void_GLdouble,
    FORMAT_void_GLfloat,
    FORMAT_void_GLclampf,
    FORMAT_void_GLfixed,
    FORMAT_void_GLuint_GLenum_GLenum_GLenum_const_void___GENPT__,
    FORMAT_void_GLuint_GLenum_GLenum_GLenum_GLsizeiptr_GLsizeiptr_const_void___GENPT__,
    FORMAT_GLenum_GLsync_GLbitfield_GLuint64,
    FORMAT_void_GLenum_const_GLdouble___GENPT__,
    FORMAT_void_GLenum_const_GLfloat___GENPT__,
    FORMAT_void_GLenum_const_GLfixed___GENPT__,
    FORMAT_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat,
    FORMAT_void_const_GLfloat___GENPT___const_GLfloat___GENPT__,
    FORMAT_void_GLhalfNV_GLhalfNV_GLhalfNV,
    FORMAT_void_const_GLhalfNV___GENPT__,
    FORMAT_void_GLubyte_GLubyte_GLubyte,
    FORMAT_void_const_GLubyte___GENPT__,
    FORMAT_void_GLuint_GLuint_GLuint,
    FORMAT_void_const_GLuint___GENPT__,
    FORMAT_void_GLushort_GLushort_GLushort,
    FORMAT_void_const_GLushort___GENPT__,
    FORMAT_void_GLfixed_GLfixed_GLfixed,
    FORMAT_void_const_GLfixed___GENPT__,
    FORMAT_void_GLbyte_GLbyte_GLbyte_GLbyte,
    FORMAT_void_GLdouble_GLdouble_GLdouble_GLdouble,
    FORMAT_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat,
    FORMAT_void_const_GLfloat___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT__,
    FORMAT_void_GLhalfNV_GLhalfNV_GLhalfNV_GLhalfNV,
    FORMAT_void_GLshort_GLshort_GLshort_GLshort,
    FORMAT_void_GLubyte_GLubyte_GLubyte_GLubyte,
    FORMAT_void_GLubyte_GLubyte_GLubyte_GLubyte_GLfloat_GLfloat,
    FORMAT_void_const_GLubyte___GENPT___const_GLfloat___GENPT__,
    FORMAT_void_GLubyte_GLubyte_GLubyte_GLubyte_GLfloat_GLfloat_GLfloat,
    FORMAT_void_GLushort_GLushort_GLushort_GLushort,
    FORMAT_void_GLint_GLenum_GLsizei,
    FORMAT_void_GLenum_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint,
    FORMAT_void_GLenum_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint,
    FORMAT_void_GLenum_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint,
    FORMAT_void_GLboolean_GLboolean_GLboolean_GLboolean,
    FORMAT_void_GLuint_GLboolean_GLboolean_GLboolean_GLboolean,
    FORMAT_void_GLenum_const_GLuint___GENPT__,
    FORMAT_void_GLint_GLenum_GLsizei_const_GLvoid___GENPT__,
    FORMAT_void_GLint_GLenum_GLsizei_GLsizei_const_GLvoid___GENPT__,
    FORMAT_void_GLint_GLenum_GLint_const_GLvoid___GENPT___GLint,
    FORMAT_void_GLint_GLenum_const_GLvoid___GENPT__,
    FORMAT_void_GLenum_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__,
    FORMAT_void_GLenum_GLenum_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__,
    FORMAT_void_GLenum_GLenum_const_GLfloat___GENPT__,
    FORMAT_void_GLenum_GLenum_const_GLint___GENPT__,
    FORMAT_void_GLenum_GLenum_GLenum_GLenum_GLenum_GLenum,
    FORMAT_void_GLenum_GLenum_GLenum_GLenum_GLenum_GLenum_GLenum_GLboolean_GLboolean_GLboolean,
    FORMAT_void_GLenum_GLint,
    FORMAT_void_GLenum_const_GLint___GENPT__,
    FORMAT_void_GLhandleARB,
    FORMAT_void_GLuint_GLsizei_const_GLchar___GENPT___const_GLint___GENPT__,
    FORMAT_void_GLenum_GLenum_GLint_GLenum_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__,
    FORMAT_void_GLenum_GLenum_GLint_GLenum_GLsizei_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__,
    FORMAT_void_GLenum_GLenum_GLint_GLenum_GLsizei_GLsizei_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__,
    FORMAT_void_GLenum_GLenum_GLint_GLint_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__,
    FORMAT_void_GLenum_GLenum_GLint_GLint_GLint_GLsizei_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__,
    FORMAT_void_GLenum_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__,
    FORMAT_void_GLenum_GLint_GLenum_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__,
    FORMAT_void_GLenum_GLint_GLenum_GLsizei_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__,
    FORMAT_void_GLenum_GLint_GLenum_GLsizei_GLsizei_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__,
    FORMAT_void_GLenum_GLint_GLint_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__,
    FORMAT_void_GLenum_GLint_GLint_GLint_GLsizei_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__,
    FORMAT_void_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__,
    FORMAT_void_GLuint_GLenum_GLint_GLenum_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__,
    FORMAT_void_GLuint_GLenum_GLint_GLenum_GLsizei_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__,
    FORMAT_void_GLuint_GLenum_GLint_GLenum_GLsizei_GLsizei_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__,
    FORMAT_void_GLuint_GLenum_GLint_GLint_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__,
    FORMAT_void_GLuint_GLenum_GLint_GLint_GLint_GLsizei_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__,
    FORMAT_void_GLuint_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__,
    FORMAT_void_GLenum_GLenum_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__,
    FORMAT_void_GLenum_GLenum_GLfloat,
    FORMAT_void_GLenum_GLenum_GLfixed,
    FORMAT_void_GLenum_GLenum_const_GLfixed___GENPT__,
    FORMAT_void_GLenum_GLenum_GLintptr_GLintptr_GLsizeiptr,
    FORMAT_void_GLenum_GLsizei_GLint_GLint_GLsizei,
    FORMAT_void_GLenum_GLenum_GLint_GLint_GLsizei,
    FORMAT_void_GLenum_GLenum_GLint_GLint_GLsizei_GLsizei,
    FORMAT_void_GLuint_GLenum_GLint_GLint_GLint_GLint_GLuint_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei,
    FORMAT_void_GLenum_GLenum_GLint_GLenum_GLint_GLint_GLsizei_GLint,
    FORMAT_void_GLenum_GLenum_GLint_GLenum_GLint_GLint_GLsizei_GLsizei_GLint,
    FORMAT_void_GLenum_GLenum_GLint_GLint_GLint_GLint_GLsizei,
    FORMAT_void_GLenum_GLenum_GLint_GLint_GLint_GLint_GLint_GLsizei_GLsizei,
    FORMAT_void_GLenum_GLenum_GLint_GLint_GLint_GLint_GLint_GLint_GLsizei_GLsizei,
    FORMAT_void_GLint_GLint_GLsizei_GLsizei_GLenum,
    FORMAT_void_GLenum_GLint_GLenum_GLint_GLint_GLsizei_GLint,
    FORMAT_void_GLenum_GLint_GLenum_GLint_GLint_GLsizei_GLsizei_GLint,
    FORMAT_void_GLenum_GLint_GLint_GLint_GLint_GLsizei,
    FORMAT_void_GLenum_GLint_GLint_GLint_GLint_GLint_GLsizei_GLsizei,
    FORMAT_void_GLenum_GLint_GLint_GLint_GLint_GLint_GLint_GLsizei_GLsizei,
    FORMAT_void_GLuint_GLenum_GLint_GLenum_GLint_GLint_GLsizei_GLint,
    FORMAT_void_GLuint_GLenum_GLint_GLenum_GLint_GLint_GLsizei_GLsizei_GLint,
    FORMAT_void_GLuint_GLenum_GLint_GLint_GLint_GLint_GLsizei,
    FORMAT_void_GLuint_GLenum_GLint_GLint_GLint_GLint_GLint_GLsizei_GLsizei,
    FORMAT_void_GLuint_GLenum_GLint_GLint_GLint_GLint_GLint_GLint_GLsizei_GLsizei,
    FORMAT_void_GLsizei_GLenum_const_GLvoid___GENPT___GLuint_GLenum_GLenum_const_GLfloat___GENPT__,
    FORMAT_GLuint,
    FORMAT_GLhandleARB,
    FORMAT_GLhandleARB_GLenum,
    FORMAT_GLuint_GLenum_const_GLchar___GENPT__,
    FORMAT_GLuint_GLenum_GLsizei_GLchar__GENPT__const___GENPT__,
    FORMAT_GLsync_struct__cl_context___GENPT___struct__cl_event___GENPT___GLbitfield,
    FORMAT_void_GLenum_GLdouble___GENPT__,
    FORMAT_void_GLenum_GLfloat___GENPT__,
    FORMAT_void_GLDEBUGPROC_const_void___GENPT__,
    FORMAT_void_GLDEBUGPROCAMD_GLvoid___GENPT__,
    FORMAT_void_GLDEBUGPROCARB_const_GLvoid___GENPT__,
    FORMAT_void_GLenum_GLenum_GLenum_GLsizei_const_GLuint___GENPT___GLboolean,
    FORMAT_void_GLenum_GLenum_GLsizei_const_GLuint___GENPT___GLboolean,
    FORMAT_void_GLenum_GLenum_GLuint_GLenum_GLsizei_const_GLchar___GENPT__,
    FORMAT_void_GLenum_GLenum_GLuint_GLsizei_const_GLchar___GENPT__,
    FORMAT_void_GLenum_GLdouble_GLdouble_GLint_GLint_GLdouble_GLdouble_GLint_GLint_GLdouble_GLdouble_GLint_GLint_const_GLdouble___GENPT__,
    FORMAT_void_GLenum_GLfloat_GLfloat_GLint_GLint_GLfloat_GLfloat_GLint_GLint_GLfloat_GLfloat_GLint_GLint_const_GLfloat___GENPT__,
    FORMAT_void_GLuint_GLsizei,
    FORMAT_void_GLsizei_const_GLuint___GENPT__,
    FORMAT_void_GLint_const_GLchar___GENPT__,
    FORMAT_void_GLenum_GLuint_const_GLuint___GENPT__,
    FORMAT_void_GLsizei_GLuint___GENPT__,
    FORMAT_void_GLsync,
    FORMAT_void_GLclampd_GLclampd,
    FORMAT_void_GLdouble_GLdouble,
    FORMAT_void_GLboolean,
    FORMAT_void_GLuint_GLsizei_const_GLdouble___GENPT__,
    FORMAT_void_GLuint_GLdouble_GLdouble,
    FORMAT_void_GLfloat_GLfloat,
    FORMAT_void_GLclampf_GLclampf,
    FORMAT_void_GLfixed_GLfixed,
    FORMAT_void_GLenum_GLsizei_const_GLfloat___GENPT__,
    FORMAT_void_GLintptr,
    FORMAT_void_GLenum_GLint_GLsizei,
    FORMAT_void_GLenum_const_GLvoid___GENPT__,
    FORMAT_void_GLenum_GLint_GLsizei_GLsizei,
    FORMAT_void_GLenum_GLint_GLsizei_GLsizei_GLuint,
    FORMAT_void_GLsizei_const_GLenum___GENPT__,
    FORMAT_void_GLenum_GLsizei,
    FORMAT_void_GLenum_GLsizei_GLenum_const_GLvoid___GENPT__,
    FORMAT_void_GLenum_GLsizei_GLenum_const_GLvoid___GENPT___GLint,
    FORMAT_void_GLenum_GLenum_const_GLvoid___GENPT__,
    FORMAT_void_GLenum_GLsizei_GLenum_const_GLvoid___GENPT___GLsizei,
    FORMAT_void_GLenum_GLsizei_GLenum_const_void___GENPT___GLsizei_GLuint,
    FORMAT_void_GLenum_GLsizei_GLenum_const_GLvoid___GENPT___GLsizei_GLint,
    FORMAT_void_GLenum_GLsizei_GLenum_const_void___GENPT___GLsizei_GLint_GLuint,
    FORMAT_void_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__,
    FORMAT_void_GLenum_GLuint_GLuint_GLint_GLsizei,
    FORMAT_void_GLenum_GLuint_GLuint_GLsizei,
    FORMAT_void_GLenum_GLuint_GLuint_GLsizei_GLenum_const_GLvoid___GENPT__,
    FORMAT_void_GLenum_GLuint_GLuint_GLsizei_GLenum_const_GLvoid___GENPT___GLint,
    FORMAT_void_GLuint_GLuint_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat,
    FORMAT_void_GLenum_GLuint_GLsizei,
    FORMAT_void_GLsizei,
    FORMAT_void_GLsizei_const_GLvoid___GENPT__,
    FORMAT_void_GLsizei_GLsizei_const_GLboolean___GENPT__,
    FORMAT_void_GLint_const_GLboolean___GENPT___GLint,
    FORMAT_void_const_GLboolean___GENPT__,
    FORMAT_void_GLenum_GLint_GLint,
    FORMAT_void_GLenum_GLint_GLint_GLint_GLint,
    FORMAT_void_GLint_GLint,
    FORMAT_void_GLenum_GLuint_const_GLfloat___GENPT__,
    FORMAT_void_GLsizei_GLenum_GLfloat___GENPT__,
    FORMAT_void_GLsizei_GLenum_const_GLfixed___GENPT__,
    FORMAT_GLsync_GLenum_GLbitfield,
    FORMAT_GLint_GLuint___GENPT__,
    FORMAT_void_GLenum_GLintptr_GLsizeiptr,
    FORMAT_void_GLuint_GLintptr_GLsizeiptr,
    FORMAT_void_GLsizei_GLvoid___GENPT__,
    FORMAT_void_GLenum_GLint_const_GLvoid___GENPT___GLint,
    FORMAT_void_GLhalfNV,
    FORMAT_void_GLsizei_const_GLfloat___GENPT__,
    FORMAT_void_GLuint_GLsizei_const_GLenum___GENPT__,
    FORMAT_void_GLenum_GLenum_GLenum_GLuint,
    FORMAT_void_GLenum_GLenum_GLuint_GLint,
    FORMAT_void_GLenum_GLenum_GLenum_GLuint_GLint,
    FORMAT_void_GLenum_GLenum_GLenum_GLuint_GLint_GLint,
    FORMAT_void_GLenum_GLenum_GLuint_GLint_GLenum,
    FORMAT_void_GLenum_GLenum_GLuint_GLint_GLint,
    FORMAT_void_GLdouble_GLdouble_GLdouble_GLdouble_GLdouble_GLdouble,
    FORMAT_void_GLfixed_GLfixed_GLfixed_GLfixed_GLfixed_GLfixed,
    FORMAT_GLuint_GLsizei,
    FORMAT_GLuint_GLuint,
    FORMAT_void_GLenum_GLuint_GLuint___GENPT__,
    FORMAT_GLuint_GLenum_GLenum_GLenum_GLuint,
    FORMAT_void_GLuint_GLuint_GLenum_GLint___GENPT__,
    FORMAT_void_GLuint_GLuint_GLsizei_GLsizei___GENPT___GLint___GENPT___GLenum___GENPT___GLchar___GENPT__,
    FORMAT_void_GLhandleARB_GLuint_GLsizei_GLsizei___GENPT___GLint___GENPT___GLenum___GENPT___GLcharARB___GENPT__,
    FORMAT_void_GLuint_GLenum_GLuint_GLsizei_GLsizei___GENPT___GLchar___GENPT__,
    FORMAT_void_GLuint_GLenum_GLuint_GLenum_GLint___GENPT__,
    FORMAT_void_GLuint_GLuint_GLsizei_GLsizei___GENPT___GLchar___GENPT__,
    FORMAT_void_GLuint_GLsizei_const_GLuint___GENPT___GLenum_GLint___GENPT__,
    FORMAT_void_GLuint_GLuint_GLsizei_GLsizei___GENPT___GLsizei___GENPT___GLenum___GENPT___GLchar___GENPT__,
    FORMAT_void_GLenum_GLenum_GLfloat___GENPT__,
    FORMAT_void_GLenum_GLenum_GLint___GENPT__,
    FORMAT_void_GLhandleARB_GLsizei_GLsizei___GENPT___GLhandleARB___GENPT__,
    FORMAT_void_GLuint_GLsizei_GLsizei___GENPT___GLuint___GENPT__,
    FORMAT_GLint_GLuint_const_GLchar___GENPT__,
    FORMAT_GLint_GLhandleARB_const_GLcharARB___GENPT__,
    FORMAT_void_GLenum_GLuint_GLboolean___GENPT__,
    FORMAT_void_GLenum_GLboolean___GENPT__,
    FORMAT_void_GLenum_GLenum_GLint64___GENPT__,
    FORMAT_void_GLenum_GLenum_GLuint64EXT___GENPT__,
    FORMAT_void_GLenum_GLenum_GLvoid___GENPT__,
    FORMAT_void_GLenum_GLintptr_GLsizeiptr_GLvoid___GENPT__,
    FORMAT_void_GLenum_GLintptrARB_GLsizeiptrARB_GLvoid___GENPT__,
    FORMAT_void_GLenum_GLfixed___GENPT__,
    FORMAT_void_GLenum_GLenum_GLenum_GLvoid___GENPT__,
    FORMAT_void_GLenum_GLenum_GLenum_GLenum_GLfloat___GENPT__,
    FORMAT_void_GLenum_GLenum_GLenum_GLenum_GLint___GENPT__,
    FORMAT_void_GLenum_GLenum_GLenum_GLfloat___GENPT__,
    FORMAT_void_GLenum_GLenum_GLenum_GLint___GENPT__,
    FORMAT_void_GLenum_GLenum_GLint_GLvoid___GENPT__,
    FORMAT_void_GLenum_GLint_GLvoid___GENPT__,
    FORMAT_void_GLuint_GLenum_GLint_GLvoid___GENPT__,
    FORMAT_void_GLenum_GLenum_GLfixed___GENPT__,
    FORMAT_GLuint_GLuint_GLsizei_GLenum___GENPT___GLenum___GENPT___GLuint___GENPT___GLenum___GENPT___GLsizei___GENPT___GLchar___GENPT__,
    FORMAT_GLuint_GLuint_GLsizei_GLenum___GENPT___GLuint___GENPT___GLuint___GENPT___GLsizei___GENPT___GLchar___GENPT__,
    FORMAT_void_GLenum_GLuint_GLdouble___GENPT__,
    FORMAT_GLenum,
    FORMAT_void_GLuint_GLenum_GLint___GENPT__,
    FORMAT_void_GLenum_GLuint_GLfloat___GENPT__,
    FORMAT_void_GLfloat___GENPT__,
    FORMAT_void_GLenum_GLboolean_GLenum_GLenum_GLvoid___GENPT__,
    FORMAT_GLuint64_GLuint_GLint_GLboolean_GLint_GLenum,
    FORMAT_void_GLhandleARB_GLsizei_GLsizei___GENPT___GLcharARB___GENPT__,
    FORMAT_GLint,
    FORMAT_void_GLenum_GLuint_GLint64___GENPT__,
    FORMAT_void_GLenum_GLint64___GENPT__,
    FORMAT_void_GLenum_GLuint_GLint___GENPT__,
    FORMAT_void_GLenum_GLuint_GLuint64EXT___GENPT__,
    FORMAT_void_GLenum_GLuint64EXT___GENPT__,
    FORMAT_void_GLenum_GLint___GENPT__,
    FORMAT_void_GLenum_GLenum_GLenum_GLsizei_GLint64___GENPT__,
    FORMAT_void_GLenum_GLenum_GLenum_GLsizei_GLint___GENPT__,
    FORMAT_void_GLuint_GLenum_GLboolean___GENPT__,
    FORMAT_void_GLuint_GLenum_GLfloat___GENPT__,
    FORMAT_void_GLenum_GLuint_GLenum_GLfloat___GENPT__,
    FORMAT_void_GLenum_GLuint_GLenum_GLint___GENPT__,
    FORMAT_void_GLenum_GLuint_GLenum_GLsizei_GLsizei_GLboolean_GLvoid___GENPT__,
    FORMAT_void_GLenum_GLenum_GLdouble___GENPT__,
    FORMAT_void_GLenum_GLenum_GLenum_GLdouble___GENPT__,
    FORMAT_void_GLenum_GLenum_GLint_GLenum_GLenum_GLvoid___GENPT__,
    FORMAT_void_GLenum_GLenum_GLint_GLenum_GLfloat___GENPT__,
    FORMAT_void_GLenum_GLenum_GLint_GLenum_GLint___GENPT__,
    FORMAT_void_GLenum_GLenum_GLenum_GLuint___GENPT__,
    FORMAT_void_GLuint_GLenum_GLuint64EXT___GENPT__,
    FORMAT_void_GLuint_GLenum_GLvoid___GENPT__,
    FORMAT_void_GLuint_GLintptr_GLsizeiptr_GLvoid___GENPT__,
    FORMAT_void_GLuint_GLenum_GLenum_GLint___GENPT__,
    FORMAT_void_GLuint_GLenum_GLuint_GLint___GENPT__,
    FORMAT_void_GLuint_GLenum_GLuint_GLuint___GENPT__,
    FORMAT_void_GLuint_GLenum_GLuint_GLdouble___GENPT__,
    FORMAT_void_GLuint_GLenum_GLuint_GLfloat___GENPT__,
    FORMAT_void_GLuint_GLenum_GLenum_GLvoid___GENPT__,
    FORMAT_void_GLint_const_GLchar___GENPT___GLsizei_GLint___GENPT___GLchar___GENPT__,
    FORMAT_void_GLint_const_GLchar___GENPT___GLenum_GLint___GENPT__,
    FORMAT_void_GLenum_GLuint_GLsizei_GLsizei___GENPT___GLchar___GENPT__,
    FORMAT_void_GLhandleARB_GLenum_GLfloat___GENPT__,
    FORMAT_void_GLhandleARB_GLenum_GLint___GENPT__,
    FORMAT_void_const_void___GENPT___GLsizei_GLsizei___GENPT___GLchar___GENPT__,
    FORMAT_void_GLuint_GLenum_GLuint___GENPT__,
    FORMAT_void_GLuint_GLubyte___GENPT__,
    FORMAT_void_GLuint_GLfloat___GENPT__,
    FORMAT_GLfloat_GLuint_GLsizei_GLsizei,
    FORMAT_void_GLbitfield_GLuint_GLsizei_GLsizei_GLfloat___GENPT__,
    FORMAT_void_GLbitfield_GLsizei_GLenum_const_GLvoid___GENPT___GLuint_GLsizei_GLfloat___GENPT__,
    FORMAT_void_GLenum_GLsizei_GLenum_const_GLvoid___GENPT___GLuint_GLfloat_GLfloat_GLenum_GLfloat___GENPT__,
    FORMAT_void_GLuint_GLenum_GLsizei_GLuint___GENPT___GLint___GENPT__,
    FORMAT_void_GLuint_GLuint_GLenum_GLvoid___GENPT__,
    FORMAT_void_GLuint_GLint___GENPT___GLint___GENPT___GLsizei_GLuint___GENPT__,
    FORMAT_void_GLuint_GLsizei_GLsizei___GENPT___GLchar___GENPT__,
    FORMAT_void_GLint___GENPT___GLsizei_GLuint___GENPT__,
    FORMAT_void_GLenum_GLuint___GENPT__,
    FORMAT_void_GLenum_GLushort___GENPT__,
    FORMAT_void_GLenum_GLint_GLfixed___GENPT__,
    FORMAT_void_GLenum_GLuint_GLvoid___GENPT__,
    FORMAT_void_GLenum_GLvoid___GENPT____GENPT__,
    FORMAT_void_GLenum_GLvoid___GENPT__,
    FORMAT_void_GLubyte___GENPT__,
    FORMAT_void_GLuint_GLsizei_GLsizei___GENPT___GLenum___GENPT___GLvoid___GENPT__,
    FORMAT_void_GLuint_GLsizei_const_GLubyte___GENPT___GLdouble___GENPT__,
    FORMAT_void_GLuint_GLsizei_const_GLubyte___GENPT___GLfloat___GENPT__,
    FORMAT_void_GLenum_GLuint_GLenum_GLdouble___GENPT__,
    FORMAT_GLuint_GLuint_GLenum_const_GLchar___GENPT__,
    FORMAT_GLint_GLuint_GLenum_const_GLchar___GENPT__,
    FORMAT_void_GLuint_GLenum_GLuint_GLsizei_const_GLenum___GENPT___GLsizei_GLsizei___GENPT___GLint___GENPT__,
    FORMAT_void_GLuint_GLenum_GLubyte___GENPT__,
    FORMAT_void_GLuint_GLenum_GLint64___GENPT__,
    FORMAT_void_GLuint_GLenum_GLint64EXT___GENPT__,
    FORMAT_void_GLuint_GLenum_GLuint64___GENPT__,
    FORMAT_void_GLenum_GLenum_GLenum_GLvoid___GENPT___GLvoid___GENPT___GLvoid___GENPT__,
    FORMAT_void_GLenum_GLenum_GLint___GENPT___GLint___GENPT__,
    FORMAT_const_GLubyte___GENPT___GLenum,
    FORMAT_const_GLubyte___GENPT___GLenum_GLuint,
    FORMAT_void_GLsync_GLenum_GLsizei_GLsizei___GENPT___GLint___GENPT__,
    FORMAT_void_GLenum_GLint_GLenum_GLenum_GLvoid___GENPT__,
    FORMAT_void_GLenum_GLint_GLenum_GLfloat___GENPT__,
    FORMAT_void_GLenum_GLint_GLenum_GLint___GENPT__,
    FORMAT_void_GLenum_GLint_GLenum_GLfixed___GENPT__,
    FORMAT_void_GLenum_GLenum_GLuint___GENPT__,
    FORMAT_GLuint64_GLuint,
    FORMAT_void_GLuint_GLenum_GLint_GLenum_GLenum_GLvoid___GENPT__,
    FORMAT_void_GLuint_GLenum_GLint_GLenum_GLfloat___GENPT__,
    FORMAT_void_GLuint_GLenum_GLint_GLenum_GLint___GENPT__,
    FORMAT_void_GLuint_GLenum_GLenum_GLuint___GENPT__,
    FORMAT_void_GLuint_GLenum_GLenum_GLfloat___GENPT__,
    FORMAT_GLuint64_GLuint_GLuint,
    FORMAT_void_GLuint_GLuint_GLint___GENPT__,
    FORMAT_GLuint_GLuint_const_GLchar___GENPT__,
    FORMAT_GLint_GLuint_GLint,
    FORMAT_void_GLuint_GLsizei_GLchar__GENPT__const___GENPT___GLuint___GENPT__,
    FORMAT_GLintptr_GLuint_GLint,
    FORMAT_void_GLenum_GLint_GLuint___GENPT__,
    FORMAT_void_GLuint_GLint_GLdouble___GENPT__,
    FORMAT_void_GLuint_GLint_GLfloat___GENPT__,
    FORMAT_void_GLhandleARB_GLint_GLfloat___GENPT__,
    FORMAT_void_GLuint_GLint_GLint64EXT___GENPT__,
    FORMAT_void_GLuint_GLint_GLint___GENPT__,
    FORMAT_void_GLhandleARB_GLint_GLint___GENPT__,
    FORMAT_void_GLuint_GLint_GLuint64EXT___GENPT__,
    FORMAT_void_GLuint_GLint_GLuint___GENPT__,
    FORMAT_void_GLuint_GLenum_GLdouble___GENPT__,
    FORMAT_void_GLuint_GLuint_GLenum_GLdouble___GENPT__,
    FORMAT_void_GLuint_GLuint_GLenum_GLfloat___GENPT__,
    FORMAT_void_GLenum_GLenum_GLenum_GLsizei_GLvoid___GENPT__,
    FORMAT_void_GLenum_GLint_GLsizei_GLvoid___GENPT__,
    FORMAT_void_GLenum_GLboolean_GLenum_GLenum_GLsizei_GLvoid___GENPT__,
    FORMAT_void_GLenum_GLenum_GLsizei_GLdouble___GENPT__,
    FORMAT_void_GLenum_GLenum_GLsizei_GLfloat___GENPT__,
    FORMAT_void_GLenum_GLenum_GLsizei_GLint___GENPT__,
    FORMAT_void_GLenum_GLsizei_GLfloat___GENPT__,
    FORMAT_void_GLenum_GLsizei_GLuint___GENPT__,
    FORMAT_void_GLenum_GLsizei_GLushort___GENPT__,
    FORMAT_void_GLsizei_GLubyte___GENPT__,
    FORMAT_void_GLenum_GLenum_GLenum_GLsizei_GLvoid___GENPT___GLsizei_GLvoid___GENPT___GLvoid___GENPT__,
    FORMAT_void_GLenum_GLint_GLenum_GLenum_GLsizei_GLvoid___GENPT__,
    FORMAT_void_GLuint_GLint_GLsizei_GLdouble___GENPT__,
    FORMAT_void_GLuint_GLint_GLsizei_GLfloat___GENPT__,
    FORMAT_void_GLuint_GLint_GLsizei_GLint___GENPT__,
    FORMAT_void_GLuint_GLint_GLsizei_GLuint___GENPT__,
    FORMAT_void_GLbyte,
    FORMAT_void_GLshort,
    FORMAT_void_GLubyte,
    FORMAT_void_GLushort,
    FORMAT_void_GLenum_GLsizei_GLenum_GLboolean,
    FORMAT_GLsync_GLenum_GLintptr_GLbitfield,
    FORMAT_void_GLenum_GLclampf,
    FORMAT_void_GLenum_GLsizei_GLsizei_const_GLvoid___GENPT__,
    FORMAT_void_GLsizei_GLint___GENPT__,
    FORMAT_void_GLuint_GLuint_GLuint_GLfloat,
    FORMAT_void_GLenum_GLsizei_const_GLenum___GENPT__,
    FORMAT_void_GLenum_GLsizei_const_GLenum___GENPT___GLint_GLint_GLsizei_GLsizei,
    FORMAT_void_GLuint_GLint,
    FORMAT_void_GLuint_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei,
    FORMAT_GLboolean_GLuint,
    FORMAT_GLboolean_GLenum,
    FORMAT_GLboolean_GLenum_GLuint,
    FORMAT_GLboolean_GLuint64,
    FORMAT_GLboolean_GLint_const_GLchar___GENPT__,
    FORMAT_GLboolean_GLuint_GLuint_GLfloat_GLfloat,
    FORMAT_GLboolean_GLuint_GLfloat_GLfloat,
    FORMAT_GLboolean_GLsync,
    FORMAT_GLboolean_GLuint_GLenum,
    FORMAT_void_GLint_GLushort,
    FORMAT_void_GLuint_GLenum_GLfloat,
    FORMAT_void_GLuint_GLenum_const_GLfloat___GENPT__,
    FORMAT_void_GLuint_GLenum_GLint,
    FORMAT_void_GLuint_GLenum_const_GLint___GENPT__,
    FORMAT_void_GLenum_GLuint_GLsizei_const_GLubyte___GENPT__,
    FORMAT_void_GLint_GLsizei,
    FORMAT_void_GLuint64,
    FORMAT_void_GLuint64_GLenum,
    FORMAT_void_GLenum_GLdouble_GLdouble_GLint_GLint_const_GLdouble___GENPT__,
    FORMAT_void_GLenum_GLfloat_GLfloat_GLint_GLint_const_GLfloat___GENPT__,
    FORMAT_void_GLenum_GLfixed_GLfixed_GLint_GLint_GLfixed,
    FORMAT_void_GLenum_GLdouble_GLdouble_GLint_GLint_GLdouble_GLdouble_GLint_GLint_const_GLdouble___GENPT__,
    FORMAT_void_GLenum_GLfloat_GLfloat_GLint_GLint_GLfloat_GLfloat_GLint_GLint_const_GLfloat___GENPT__,
    FORMAT_void_GLenum_GLfixed_GLfixed_GLint_GLint_GLfixed_GLfixed_GLint_GLint_GLfixed,
    FORMAT_GLvoid___GENPT___GLenum_GLenum,
    FORMAT_GLvoid___GENPT___GLenum_GLintptr_GLsizeiptr_GLbitfield,
    FORMAT_void_GLenum_GLuint_GLenum_GLsizei_GLsizei_GLint_GLint_GLboolean_const_GLvoid___GENPT__,
    FORMAT_void_GLint_GLdouble_GLdouble,
    FORMAT_void_GLint_GLfloat_GLfloat,
    FORMAT_void_GLint_GLfixed_GLfixed,
    FORMAT_void_GLint_GLdouble_GLdouble_GLint_GLdouble_GLdouble,
    FORMAT_void_GLint_GLfloat_GLfloat_GLint_GLfloat_GLfloat,
    FORMAT_void_GLint_GLfixed_GLfixed_GLfixed_GLfixed,
    FORMAT_GLvoid___GENPT___GLuint_GLenum,
    FORMAT_GLvoid___GENPT___GLuint_GLintptr_GLsizeiptr_GLbitfield,
    FORMAT_GLvoid___GENPT___GLuint,
    FORMAT_GLvoid___GENPT___GLuint_GLint_GLbitfield_const_GLint___GENPT___const_GLenum___GENPT__,
    FORMAT_void_GLuint_GLuint_GLdouble_GLdouble_GLint_GLint_const_GLdouble___GENPT__,
    FORMAT_void_GLuint_GLuint_GLfloat_GLfloat_GLint_GLint_const_GLfloat___GENPT__,
    FORMAT_void_GLuint_GLuint_GLdouble_GLdouble_GLint_GLint_GLdouble_GLdouble_GLint_GLint_const_GLdouble___GENPT__,
    FORMAT_void_GLuint_GLuint_GLfloat_GLfloat_GLint_GLint_GLfloat_GLfloat_GLint_GLint_const_GLfloat___GENPT__,
    FORMAT_void_GLenum_GLdouble_GLdouble_GLdouble_GLdouble_GLdouble_GLdouble,
    FORMAT_void_GLint_const_GLubyte___GENPT__,
    FORMAT_void_GLint_const_GLuint___GENPT__,
    FORMAT_void_GLint_const_GLushort___GENPT__,
    FORMAT_void_GLenum_GLdouble_GLdouble_GLdouble_GLdouble,
    FORMAT_void_GLenum_GLfloat_GLfloat_GLfloat_GLfloat,
    FORMAT_void_GLenum_GLdouble_GLdouble_GLdouble,
    FORMAT_void_GLenum_GLfloat_GLfloat_GLfloat,
    FORMAT_void_GLenum_GLenum_GLboolean,
    FORMAT_void_GLenum_const_GLint___GENPT___const_GLsizei___GENPT___GLsizei,
    FORMAT_void_GLenum_const_void___GENPT___GLsizei_GLsizei,
    FORMAT_void_GLenum_const_GLvoid___GENPT___GLsizei_GLsizei,
    FORMAT_void_GLenum_const_GLsizei___GENPT___GLenum_GLvoid__GENPT__const___GENPT___GLsizei,
    FORMAT_void_GLenum_const_GLsizei___GENPT___GLenum_GLvoid__GENPT__const___GENPT___GLsizei_const_GLint___GENPT__,
    FORMAT_void_GLenum_const_GLsizei___GENPT___GLenum_const_GLvoid___GENPT___GLsizei,
    FORMAT_void_GLenum_GLenum_const_void___GENPT___GLsizei_GLsizei,
    FORMAT_void_GLenum_GLenum_const_GLvoid___GENPT___GLsizei_GLsizei,
    FORMAT_void_GLenum_GLuint_GLuint_const_GLint___GENPT___const_GLsizei___GENPT___GLsizei,
    FORMAT_void_const_GLenum___GENPT___const_GLint___GENPT___const_GLsizei___GENPT___GLsizei_GLint,
    FORMAT_void_const_GLenum___GENPT___const_GLsizei___GENPT___GLenum_GLvoid__GENPT__const___GENPT___GLsizei_GLint,
    FORMAT_void_GLenum_GLbyte,
    FORMAT_void_GLenum_const_GLbyte___GENPT__,
    FORMAT_void_GLenum_GLdouble,
    FORMAT_void_GLenum_GLhalfNV,
    FORMAT_void_GLenum_const_GLhalfNV___GENPT__,
    FORMAT_void_GLenum_GLshort,
    FORMAT_void_GLenum_const_GLshort___GENPT__,
    FORMAT_void_GLenum_GLbyte_GLbyte,
    FORMAT_void_GLenum_GLdouble_GLdouble,
    FORMAT_void_GLenum_GLfloat_GLfloat,
    FORMAT_void_GLenum_GLhalfNV_GLhalfNV,
    FORMAT_void_GLenum_GLshort_GLshort,
    FORMAT_void_GLenum_GLfixed_GLfixed,
    FORMAT_void_GLenum_GLbyte_GLbyte_GLbyte,
    FORMAT_void_GLenum_GLhalfNV_GLhalfNV_GLhalfNV,
    FORMAT_void_GLenum_GLint_GLint_GLint,
    FORMAT_void_GLenum_GLshort_GLshort_GLshort,
    FORMAT_void_GLenum_GLfixed_GLfixed_GLfixed,
    FORMAT_void_GLenum_GLbyte_GLbyte_GLbyte_GLbyte,
    FORMAT_void_GLenum_GLhalfNV_GLhalfNV_GLhalfNV_GLhalfNV,
    FORMAT_void_GLenum_GLshort_GLshort_GLshort_GLshort,
    FORMAT_void_GLenum_GLfixed_GLfixed_GLfixed_GLfixed,
    FORMAT_void_GLenum_GLenum_const_GLuint___GENPT__,
    FORMAT_void_GLenum_GLint_GLenum_GLsizei_const_GLvoid___GENPT__,
    FORMAT_void_GLenum_GLenum_GLenum_GLfloat,
    FORMAT_void_GLenum_GLenum_GLenum_const_GLfloat___GENPT__,
    FORMAT_void_GLenum_GLenum_GLenum_GLint,
    FORMAT_void_GLenum_GLenum_GLenum_const_GLint___GENPT__,
    FORMAT_void_GLenum_GLenum_GLenum_GLdouble,
    FORMAT_void_GLenum_GLenum_GLenum_const_GLdouble___GENPT__,
    FORMAT_void_GLenum_GLenum_GLint_GLenum_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__,
    FORMAT_void_GLenum_GLenum_GLint_GLenum_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__,
    FORMAT_void_GLenum_GLenum_GLint_GLenum_GLsizei_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__,
    FORMAT_void_GLenum_GLenum_GLenum_const_GLuint___GENPT__,
    FORMAT_void_GLenum_GLenum_GLint_GLint_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__,
    FORMAT_void_GLenum_GLenum_GLint_GLint_GLint_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__,
    FORMAT_void_GLenum_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__,
    FORMAT_void_GLuint_GLsizeiptr_const_GLvoid___GENPT___GLenum,
    FORMAT_void_GLuint_GLintptr_GLsizeiptr_const_GLvoid___GENPT__,
    FORMAT_void_GLuint_GLuint_GLintptr_GLintptr_GLsizeiptr,
    FORMAT_void_GLuint_GLenum_GLenum_GLuint,
    FORMAT_void_GLuint_GLenum_GLenum_GLuint_GLint,
    FORMAT_void_GLuint_GLenum_GLenum_GLuint_GLint_GLint,
    FORMAT_void_GLuint_GLenum_GLuint_GLint,
    FORMAT_void_GLuint_GLenum_GLuint_GLint_GLenum,
    FORMAT_void_GLuint_GLenum_GLuint_GLint_GLint,
    FORMAT_void_GLuint_GLenum_GLuint_GLdouble_GLdouble_GLdouble_GLdouble,
    FORMAT_void_GLuint_GLenum_GLuint_const_GLdouble___GENPT__,
    FORMAT_void_GLuint_GLenum_GLuint_GLfloat_GLfloat_GLfloat_GLfloat,
    FORMAT_void_GLuint_GLenum_GLuint_const_GLfloat___GENPT__,
    FORMAT_void_GLuint_GLenum_GLuint_GLint_GLint_GLint_GLint,
    FORMAT_void_GLuint_GLenum_GLuint_const_GLint___GENPT__,
    FORMAT_void_GLuint_GLenum_GLuint_GLuint_GLuint_GLuint_GLuint,
    FORMAT_void_GLuint_GLenum_GLuint_const_GLuint___GENPT__,
    FORMAT_void_GLuint_GLenum_GLuint_GLsizei_const_GLfloat___GENPT__,
    FORMAT_void_GLuint_GLenum_GLuint_GLsizei_const_GLint___GENPT__,
    FORMAT_void_GLuint_GLenum_GLuint_GLsizei_const_GLuint___GENPT__,
    FORMAT_void_GLuint_GLenum_GLenum_GLsizei_const_GLvoid___GENPT__,
    FORMAT_void_GLuint_GLenum_GLsizei_GLsizei,
    FORMAT_void_GLuint_GLsizei_GLsizei_GLenum_GLsizei_GLsizei,
    FORMAT_void_GLuint_GLsizei_GLenum_GLsizei_GLsizei,
    FORMAT_void_GLenum_GLint_const_GLchar___GENPT___GLint_const_GLchar___GENPT__,
    FORMAT_GLuint_GLsizei_const_GLvoid___GENPT___GLenum,
    FORMAT_void_GLenum_GLuint_GLsizei_const_GLchar___GENPT__,
    FORMAT_void_const_void___GENPT___GLsizei_const_GLchar___GENPT__,
    FORMAT_GLenum_GLenum_GLuint_GLenum,
    FORMAT_void_GLuint_GLuint_GLenum,
    FORMAT_void_GLuint_GLsizei_const_GLubyte___GENPT___GLsizei_GLenum_const_GLvoid___GENPT__,
    FORMAT_void_GLuint_GLsizei_GLenum_const_GLvoid___GENPT__,
    FORMAT_void_GLuint_GLsizei_const_GLfloat___GENPT__,
    FORMAT_void_GLuint_GLenum_const_GLvoid___GENPT___GLbitfield_GLuint_GLsizei_GLenum_GLuint_GLfloat,
    FORMAT_void_GLuint_GLenum_const_GLvoid___GENPT___GLbitfield_GLsizei_GLenum_const_GLvoid___GENPT___GLenum_GLuint_GLfloat,
    FORMAT_void_GLenum_GLint_GLuint,
    FORMAT_void_GLuint_GLenum_GLsizei_const_GLvoid___GENPT__,
    FORMAT_void_GLuint_GLsizei_GLsizei_GLsizei_const_GLubyte___GENPT___GLsizei_GLenum_const_GLvoid___GENPT__,
    FORMAT_void_GLuint_GLsizei_GLsizei_GLenum_const_GLvoid___GENPT__,
    FORMAT_void_GLenum_GLenum_GLint_const_GLfloat___GENPT__,
    FORMAT_void_GLenum_GLsizei_const_GLuint___GENPT__,
    FORMAT_void_GLenum_GLsizei_const_GLushort___GENPT__,
    FORMAT_void_GLenum_GLint_const_GLfixed___GENPT__,
    FORMAT_GLboolean_GLuint_GLsizei_GLsizei_GLfloat_GLfloat___GENPT___GLfloat___GENPT___GLfloat___GENPT___GLfloat___GENPT__,
    FORMAT_GLint_GLint___GENPT__,
    FORMAT_void_GLuint_GLuint64EXT_GLuint_GLuint_GLenum_GLenum_GLuint_GLenum_GLuint_GLenum_GLuint_GLenum_GLuint,
    FORMAT_void_GLuint_GLuint64EXT_GLuint_GLuint_GLenum_GLenum_GLuint_GLuint_GLenum_GLuint_GLuint,
    FORMAT_void_GLsizei_const_GLuint___GENPT___const_GLfloat___GENPT__,
    FORMAT_void_GLsizei_const_GLuint___GENPT___const_GLclampf___GENPT__,
    FORMAT_void_GLsizei_const_GLuint___GENPT___const_GLfixed___GENPT__,
    FORMAT_void_GLuint_GLenum_const_GLvoid___GENPT___GLsizei,
    FORMAT_void_GLenum_GLuint_GLuint_GLsizei_const_GLint___GENPT__,
    FORMAT_void_GLenum_GLuint_GLuint_GLsizei_const_GLuint___GENPT__,
    FORMAT_void_GLenum_GLuint_GLuint_GLsizei_const_GLfloat___GENPT__,
    FORMAT_void_GLenum_GLuint_GLdouble_GLdouble_GLdouble_GLdouble,
    FORMAT_void_GLenum_GLuint_const_GLdouble___GENPT__,
    FORMAT_void_GLenum_GLuint_GLfloat_GLfloat_GLfloat_GLfloat,
    FORMAT_void_GLenum_GLuint_GLint_GLint_GLint_GLint,
    FORMAT_void_GLenum_GLuint_const_GLint___GENPT__,
    FORMAT_void_GLenum_GLuint_GLsizei_const_GLfloat___GENPT__,
    FORMAT_void_GLenum_GLuint_GLsizei_const_GLint___GENPT__,
    FORMAT_void_GLenum_GLuint_GLsizei_const_GLuint___GENPT__,
    FORMAT_void_GLuint_GLsizei_const_GLubyte___GENPT___GLdouble_GLdouble_GLdouble_GLdouble,
    FORMAT_void_GLuint_GLsizei_const_GLubyte___GENPT___const_GLdouble___GENPT__,
    FORMAT_void_GLuint_GLsizei_const_GLubyte___GENPT___GLfloat_GLfloat_GLfloat_GLfloat,
    FORMAT_void_GLuint_GLsizei_const_GLubyte___GENPT___const_GLfloat___GENPT__,
    FORMAT_void_GLenum_GLuint_GLsizei_const_GLdouble___GENPT__,
    FORMAT_void_GLenum_GLenum_GLsizei_const_GLvoid___GENPT__,
    FORMAT_void_GLuint_GLint_GLdouble,
    FORMAT_void_GLuint_GLint_GLsizei_const_GLdouble___GENPT__,
    FORMAT_void_GLuint_GLint_GLfloat,
    FORMAT_void_GLuint_GLint_GLsizei_const_GLfloat___GENPT__,
    FORMAT_void_GLuint_GLint_GLint,
    FORMAT_void_GLuint_GLint_GLint64EXT,
    FORMAT_void_GLuint_GLint_GLsizei_const_GLint64EXT___GENPT__,
    FORMAT_void_GLuint_GLint_GLsizei_const_GLint___GENPT__,
    FORMAT_void_GLuint_GLint_GLuint,
    FORMAT_void_GLuint_GLint_GLuint64EXT,
    FORMAT_void_GLuint_GLint_GLsizei_const_GLuint64EXT___GENPT__,
    FORMAT_void_GLuint_GLint_GLsizei_const_GLuint___GENPT__,
    FORMAT_void_GLuint_GLint_GLdouble_GLdouble,
    FORMAT_void_GLuint_GLint_GLfloat_GLfloat,
    FORMAT_void_GLuint_GLint_GLint_GLint,
    FORMAT_void_GLuint_GLint_GLint64EXT_GLint64EXT,
    FORMAT_void_GLuint_GLint_GLuint_GLuint,
    FORMAT_void_GLuint_GLint_GLuint64EXT_GLuint64EXT,
    FORMAT_void_GLuint_GLint_GLdouble_GLdouble_GLdouble,
    FORMAT_void_GLuint_GLint_GLfloat_GLfloat_GLfloat,
    FORMAT_void_GLuint_GLint_GLint_GLint_GLint,
    FORMAT_void_GLuint_GLint_GLint64EXT_GLint64EXT_GLint64EXT,
    FORMAT_void_GLuint_GLint_GLuint_GLuint_GLuint,
    FORMAT_void_GLuint_GLint_GLuint64EXT_GLuint64EXT_GLuint64EXT,
    FORMAT_void_GLuint_GLint_GLdouble_GLdouble_GLdouble_GLdouble,
    FORMAT_void_GLuint_GLint_GLfloat_GLfloat_GLfloat_GLfloat,
    FORMAT_void_GLuint_GLint_GLint_GLint_GLint_GLint,
    FORMAT_void_GLuint_GLint_GLint64EXT_GLint64EXT_GLint64EXT_GLint64EXT,
    FORMAT_void_GLuint_GLint_GLuint_GLuint_GLuint_GLuint,
    FORMAT_void_GLuint_GLint_GLuint64EXT_GLuint64EXT_GLuint64EXT_GLuint64EXT,
    FORMAT_void_GLuint_GLint_GLuint64,
    FORMAT_void_GLuint_GLint_GLsizei_const_GLuint64___GENPT__,
    FORMAT_void_GLuint_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__,
    FORMAT_void_GLuint_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__,
    FORMAT_GLbitfield_GLfixed___GENPT___GLint___GENPT__,
    FORMAT_void_GLshort_GLshort,
    FORMAT_void_GLint_GLint_GLsizei_GLsizei_GLenum_GLenum_GLvoid___GENPT__,
    FORMAT_void_GLint_GLint_GLsizei_GLsizei_GLenum_GLenum_GLsizei_GLvoid___GENPT__,
    FORMAT_void_const_GLdouble___GENPT___const_GLdouble___GENPT__,
    FORMAT_void_const_GLint___GENPT___const_GLint___GENPT__,
    FORMAT_void_const_GLshort___GENPT___const_GLshort___GENPT__,
    FORMAT_void_const_GLfixed___GENPT___const_GLfixed___GENPT__,
    FORMAT_GLint_GLenum,
    FORMAT_void_GLenum_GLenum_GLsizei_GLsizei,
    FORMAT_void_GLenum_GLsizei_GLenum_GLsizei_GLsizei,
    FORMAT_void_GLenum_GLsizei_GLsizei_GLenum_GLsizei_GLsizei,
    FORMAT_void_GLuint_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat,
    FORMAT_void_const_GLuint___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT__,
    FORMAT_void_GLuint_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat,
    FORMAT_void_const_GLuint___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT__,
    FORMAT_void_GLuint_GLubyte_GLubyte_GLubyte_GLubyte_GLfloat_GLfloat_GLfloat,
    FORMAT_void_const_GLuint___GENPT___const_GLubyte___GENPT___const_GLfloat___GENPT__,
    FORMAT_void_GLuint_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat,
    FORMAT_void_const_GLuint___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT__,
    FORMAT_void_GLuint_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat,
    FORMAT_void_GLuint_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat,
    FORMAT_void_GLuint_GLfloat_GLfloat_GLfloat,
    FORMAT_void_const_GLuint___GENPT___const_GLfloat___GENPT__,
    FORMAT_void_GLfloat_GLboolean,
    FORMAT_void_GLfixed_GLboolean,
    FORMAT_void_GLclampf_GLboolean,
    FORMAT_void_GLuint_GLbitfield,
    FORMAT_void_GLuint_GLenum_const_GLuint___GENPT__,
    FORMAT_void_GLint_GLint_GLsizei_GLsizei,
    FORMAT_void_GLuint_GLsizei_const_GLint___GENPT__,
    FORMAT_void_GLuint_GLint_GLint_GLsizei_GLsizei,
    FORMAT_void_GLuint_const_GLint___GENPT__,
    FORMAT_void_GLuint_GLboolean_GLuint_GLint_GLuint___GENPT__,
    FORMAT_void_GLenum_GLenum_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT___const_GLvoid___GENPT__,
    FORMAT_void_GLuint_const_GLfloat___GENPT__,
    FORMAT_void_GLuint_GLenum_const_GLvoid___GENPT__,
    FORMAT_void_GLsizei_const_GLuint___GENPT___GLenum_const_GLvoid___GENPT___GLsizei,
    FORMAT_void_GLenum_GLuint_GLuint_GLuint,
    FORMAT_void_GLenum_GLuint_GLuint_GLuint_GLuint,
    FORMAT_void_GLuint_GLsizei_GLchar__GENPT__const___GENPT___const_GLint___GENPT__,
    FORMAT_void_GLhandleARB_GLsizei_const_GLcharARB___GENPT___const_GLint___GENPT__,
    FORMAT_void_GLsizei_GLuint,
    FORMAT_void_GLsizei_GLenum_const_GLvoid___GENPT___GLuint_GLenum_GLuint_GLenum_const_GLfloat___GENPT__,
    FORMAT_void_GLuint_GLenum_GLuint,
    FORMAT_void_GLenum_GLenum_GLint_GLuint,
    FORMAT_void_GLenum_GLenum_GLenum,
    FORMAT_void_GLsizei_GLenum_const_GLvoid___GENPT___GLuint_GLint_GLuint_GLenum_const_GLfloat___GENPT__,
    FORMAT_void_GLuint_GLuint_GLenum_GLenum_GLenum_GLenum,
    FORMAT_void_GLenum_GLenum_GLuint_GLintptr_GLsizeiptr,
    FORMAT_void_GLbyte_GLbyte,
    FORMAT_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat,
    FORMAT_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat,
    FORMAT_void_const_GLfloat___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT__,
    FORMAT_void_GLfloat_GLfloat_GLubyte_GLubyte_GLubyte_GLubyte_GLfloat_GLfloat_GLfloat,
    FORMAT_void_const_GLfloat___GENPT___const_GLubyte___GENPT___const_GLfloat___GENPT__,
    FORMAT_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat,
    FORMAT_void_GLhalfNV_GLhalfNV,
    FORMAT_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat,
    FORMAT_void_GLenum_GLenum_GLsizei_const_GLfloat___GENPT__,
    FORMAT_void_GLenum_GLenum_GLdouble,
    FORMAT_void_GLenum_GLenum_const_GLdouble___GENPT__,
    FORMAT_void_GLenum_GLint_GLint_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__,
    FORMAT_void_GLenum_GLint_GLint_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__,
    FORMAT_void_GLenum_GLsizei_GLint_GLsizei_GLsizei_GLboolean,
    FORMAT_void_GLenum_GLsizei_GLsizei_GLint_GLsizei_GLsizei_GLboolean,
    FORMAT_void_GLenum_GLint_GLint_GLsizei_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__,
    FORMAT_void_GLenum_GLint_GLenum_GLsizei_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__,
    FORMAT_void_GLenum_GLsizei_GLint_GLsizei_GLsizei_GLsizei_GLboolean,
    FORMAT_void_GLenum_GLsizei_GLsizei_GLint_GLsizei_GLsizei_GLsizei_GLboolean,
    FORMAT_void_GLenum_GLint_GLenum_GLsizei_GLsizei_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__,
    FORMAT_void_GLenum_GLsizei_GLenum_GLsizei,
    FORMAT_void_GLenum_GLsizei_GLenum_GLsizei_GLsizei_GLboolean,
    FORMAT_void_GLenum_GLsizei_GLenum_GLsizei_GLsizei_GLsizei,
    FORMAT_void_GLenum_GLsizei_GLenum_GLsizei_GLsizei_GLsizei_GLboolean,
    FORMAT_void_GLenum_GLenum_GLsizei_GLsizei_GLsizei_GLsizei_GLbitfield,
    FORMAT_void_GLenum_GLint_GLint_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__,
    FORMAT_void_GLenum_GLint_GLint_GLint_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__,
    FORMAT_void_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__,
    FORMAT_void_GLenum_GLint_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__,
    FORMAT_void_GLuint_GLenum_GLenum_GLuint_GLintptr_GLsizeiptr,
    FORMAT_void_GLuint_GLenum_GLint_GLenum_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__,
    FORMAT_void_GLuint_GLenum_GLint_GLenum_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__,
    FORMAT_void_GLuint_GLenum_GLsizei_GLsizei_GLint_GLsizei_GLsizei_GLboolean,
    FORMAT_void_GLuint_GLenum_GLsizei_GLint_GLsizei_GLsizei_GLboolean,
    FORMAT_void_GLuint_GLenum_GLint_GLenum_GLsizei_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__,
    FORMAT_void_GLuint_GLenum_GLsizei_GLsizei_GLint_GLsizei_GLsizei_GLsizei_GLboolean,
    FORMAT_void_GLuint_GLenum_GLsizei_GLint_GLsizei_GLsizei_GLsizei_GLboolean,
    FORMAT_void_GLuint_GLenum_GLenum_const_GLint___GENPT__,
    FORMAT_void_GLuint_GLenum_GLenum_const_GLuint___GENPT__,
    FORMAT_void_GLuint_GLenum_GLenum_GLfloat,
    FORMAT_void_GLuint_GLenum_GLenum_const_GLfloat___GENPT__,
    FORMAT_void_GLuint_GLenum_GLenum_GLint,
    FORMAT_void_GLuint_GLenum_GLsizei_GLenum_GLsizei,
    FORMAT_void_GLuint_GLenum_GLsizei_GLenum_GLsizei_GLsizei,
    FORMAT_void_GLuint_GLenum_GLsizei_GLenum_GLsizei_GLsizei_GLboolean,
    FORMAT_void_GLuint_GLenum_GLsizei_GLenum_GLsizei_GLsizei_GLsizei,
    FORMAT_void_GLuint_GLenum_GLsizei_GLenum_GLsizei_GLsizei_GLsizei_GLboolean,
    FORMAT_void_GLuint_GLenum_GLenum_GLsizei_GLsizei_GLsizei_GLsizei_GLbitfield,
    FORMAT_void_GLuint_GLenum_GLint_GLint_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__,
    FORMAT_void_GLuint_GLenum_GLint_GLint_GLint_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__,
    FORMAT_void_GLuint_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__,
    FORMAT_void_GLuint_GLenum_GLuint_GLenum_GLuint_GLuint_GLuint_GLuint,
    FORMAT_void_GLenum_GLuint_GLenum_GLenum,
    FORMAT_void_GLsizei_const_GLint___GENPT___GLenum,
    FORMAT_void_GLsizei_const_GLint___GENPT___GLsizei_const_GLint___GENPT___GLenum,
    FORMAT_void_GLuint_GLsizei_GLchar__GENPT__const___GENPT___GLenum,
    FORMAT_void_GLuint_GLsizei_const_GLchar___GENPT___GLenum,
    FORMAT_void_GLuint_GLsizei_const_GLint___GENPT___GLenum,
    FORMAT_void_GLuint_GLuint_GLenum_const_GLfloat___GENPT__,
    FORMAT_void_GLint_GLdouble,
    FORMAT_void_GLint_GLsizei_const_GLdouble___GENPT__,
    FORMAT_void_GLint_GLfloat,
    FORMAT_void_GLint_GLsizei_const_GLfloat___GENPT__,
    FORMAT_void_GLint_GLint64EXT,
    FORMAT_void_GLint_GLsizei_const_GLint64EXT___GENPT__,
    FORMAT_void_GLint_GLsizei_const_GLint___GENPT__,
    FORMAT_void_GLint_GLuint,
    FORMAT_void_GLint_GLuint64EXT,
    FORMAT_void_GLint_GLsizei_const_GLuint64EXT___GENPT__,
    FORMAT_void_GLint_GLsizei_const_GLuint___GENPT__,
    FORMAT_void_GLint_GLint64EXT_GLint64EXT,
    FORMAT_void_GLint_GLuint_GLuint,
    FORMAT_void_GLint_GLuint64EXT_GLuint64EXT,
    FORMAT_void_GLint_GLdouble_GLdouble_GLdouble,
    FORMAT_void_GLint_GLfloat_GLfloat_GLfloat,
    FORMAT_void_GLint_GLint64EXT_GLint64EXT_GLint64EXT,
    FORMAT_void_GLint_GLuint_GLuint_GLuint,
    FORMAT_void_GLint_GLuint64EXT_GLuint64EXT_GLuint64EXT,
    FORMAT_void_GLint_GLdouble_GLdouble_GLdouble_GLdouble,
    FORMAT_void_GLint_GLfloat_GLfloat_GLfloat_GLfloat,
    FORMAT_void_GLint_GLint_GLint_GLint_GLint,
    FORMAT_void_GLint_GLint64EXT_GLint64EXT_GLint64EXT_GLint64EXT,
    FORMAT_void_GLint_GLuint_GLuint_GLuint_GLuint,
    FORMAT_void_GLint_GLuint64EXT_GLuint64EXT_GLuint64EXT_GLuint64EXT,
    FORMAT_void_GLint_GLuint64,
    FORMAT_void_GLint_GLsizei_const_GLuint64___GENPT__,
    FORMAT_void_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__,
    FORMAT_void_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__,
    FORMAT_void_GLuint_GLuint_GLsizei_const_GLvoid___GENPT___GLenum,
    FORMAT_void_GLuint_GLbitfield_GLuint,
    FORMAT_void_GLvdpauSurfaceNV_GLenum_GLsizei_GLsizei___GENPT___GLint___GENPT__,
    FORMAT_void_const_GLvoid___GENPT___const_GLvoid___GENPT__,
    FORMAT_void_GLvdpauSurfaceNV,
    FORMAT_void_GLsizei_const_GLvdpauSurfaceNV___GENPT__,
    FORMAT_GLvdpauSurfaceNV_GLvoid___GENPT___GLenum_GLsizei_const_GLuint___GENPT__,
    FORMAT_GLvdpauSurfaceNV_const_GLvoid___GENPT___GLenum_GLsizei_const_GLuint___GENPT__,
    FORMAT_void_GLvdpauSurfaceNV_GLenum,
    FORMAT_void_GLuint_GLenum_GLsizei_GLuint_GLuint,
    FORMAT_void_GLuint_GLenum_GLuint_const_GLvoid___GENPT__,
    FORMAT_void_GLuint_const_GLbyte___GENPT__,
    FORMAT_void_GLuint_const_GLdouble___GENPT__,
    FORMAT_void_GLuint_const_GLshort___GENPT__,
    FORMAT_void_GLuint_const_GLubyte___GENPT__,
    FORMAT_void_GLuint_const_GLuint___GENPT__,
    FORMAT_void_GLuint_const_GLushort___GENPT__,
    FORMAT_void_GLuint_GLuint_GLuint_GLintptr_GLsizei,
    FORMAT_void_GLuint_GLuint_GLint_GLenum_GLsizei_GLintptr,
    FORMAT_void_GLuint_GLuint_GLsizei_GLintptr,
    FORMAT_void_GLuint_GLuint_GLenum_GLsizei_GLintptr,
    FORMAT_void_GLuint_GLuint_GLenum_GLint_GLenum_GLsizei_GLintptr,
    FORMAT_void_GLuint_GLuint_GLint_GLenum_GLboolean_GLuint,
    FORMAT_void_GLuint_GLuint_GLint_GLenum_GLuint,
    FORMAT_void_GLuint_GLuint_GLuint_GLint_GLenum_GLsizei_GLintptr,
    FORMAT_void_GLuint_GLuint_GLuint_GLint_GLenum_GLboolean_GLsizei_GLintptr,
    FORMAT_void_GLuint_GLdouble,
    FORMAT_void_GLuint_GLfloat,
    FORMAT_void_GLuint_GLhalfNV,
    FORMAT_void_GLuint_const_GLhalfNV___GENPT__,
    FORMAT_void_GLuint_GLshort,
    FORMAT_void_GLuint_GLfloat_GLfloat,
    FORMAT_void_GLuint_GLhalfNV_GLhalfNV,
    FORMAT_void_GLuint_GLshort_GLshort,
    FORMAT_void_GLuint_GLdouble_GLdouble_GLdouble,
    FORMAT_void_GLuint_GLhalfNV_GLhalfNV_GLhalfNV,
    FORMAT_void_GLuint_GLshort_GLshort_GLshort,
    FORMAT_void_GLuint_GLubyte_GLubyte_GLubyte_GLubyte,
    FORMAT_void_GLuint_GLdouble_GLdouble_GLdouble_GLdouble,
    FORMAT_void_GLuint_GLfloat_GLfloat_GLfloat_GLfloat,
    FORMAT_void_GLuint_GLhalfNV_GLhalfNV_GLhalfNV_GLhalfNV,
    FORMAT_void_GLuint_GLshort_GLshort_GLshort_GLshort,
    FORMAT_void_GLuint_GLint_GLenum_GLboolean_GLsizei_GLuint_GLuint,
    FORMAT_void_GLuint_GLint_GLenum_GLboolean_GLuint,
    FORMAT_void_GLuint_GLint_GLenum_GLboolean_GLsizei,
    FORMAT_void_GLuint_GLuint_GLuint_GLuint_GLuint,
    FORMAT_void_GLuint_GLint_GLenum_GLuint,
    FORMAT_void_GLuint_GLint_GLenum_GLsizei,
    FORMAT_void_GLuint_GLint_GLenum_GLsizei_const_GLvoid___GENPT__,
    FORMAT_void_GLuint_GLint64EXT,
    FORMAT_void_GLuint_const_GLint64EXT___GENPT__,
    FORMAT_void_GLuint_GLuint64EXT,
    FORMAT_void_GLuint_const_GLuint64EXT___GENPT__,
    FORMAT_void_GLuint_GLint64EXT_GLint64EXT,
    FORMAT_void_GLuint_GLuint64EXT_GLuint64EXT,
    FORMAT_void_GLuint_GLint64EXT_GLint64EXT_GLint64EXT,
    FORMAT_void_GLuint_GLuint64EXT_GLuint64EXT_GLuint64EXT,
    FORMAT_void_GLuint_GLint64EXT_GLint64EXT_GLint64EXT_GLint64EXT,
    FORMAT_void_GLuint_GLuint64EXT_GLuint64EXT_GLuint64EXT_GLuint64EXT,
    FORMAT_void_GLuint_GLenum_GLboolean_GLuint,
    FORMAT_void_GLuint_GLenum_GLboolean_const_GLuint___GENPT__,
    FORMAT_void_GLuint_GLint_GLenum_GLboolean_GLsizei_const_GLvoid___GENPT__,
    FORMAT_void_GLuint_GLsizei_const_GLhalfNV___GENPT__,
    FORMAT_void_GLuint_GLsizei_const_GLshort___GENPT__,
    FORMAT_void_GLuint_GLsizei_const_GLubyte___GENPT__,
    FORMAT_GLenum_GLuint_GLuint___GENPT___GLuint64EXT___GENPT__,
    FORMAT_void_GLuint_GLuint_GLenum_const_GLdouble___GENPT__,
    FORMAT_void_GLuint_GLuint_GLenum_const_GLint___GENPT__,
    FORMAT_void_GLsync_GLbitfield_GLuint64,
    FORMAT_void_GLuint_GLsizei_const_GLuint___GENPT___const_GLfloat___GENPT__,
    FORMAT_void_GLint_const_GLbyte___GENPT__,
    FORMAT_void_GLint_const_GLdouble___GENPT__,
    FORMAT_void_GLint_const_GLfloat___GENPT__,
    FORMAT_void_GLint_const_GLint___GENPT__,
    FORMAT_void_GLint_const_GLshort___GENPT__,
    FORMAT_void_GLenum_GLclampx,
    FORMAT_void_GLclampf_GLclampf_GLclampf_GLclampf,
    FORMAT_void_GLclampx_GLclampx_GLclampx_GLclampx,
    FORMAT_void_GLclampx,
    FORMAT_void_GLclampx_GLclampx,
    FORMAT_void_GLclampx_GLboolean,
    FORMAT_EGLBoolean_EGLenum,
    FORMAT_EGLBoolean_EGLDisplay_EGLSurface_EGLint,
    FORMAT_EGLBoolean_EGLDisplay_const_EGLint___GENPT___EGLConfig___GENPT___EGLint_EGLint___GENPT__,
    FORMAT_EGLint_EGLDisplay_EGLSyncKHR_EGLint_EGLTimeKHR,
    FORMAT_EGLint_EGLSyncNV_EGLint_EGLTimeNV,
    FORMAT_EGLBoolean_EGLDisplay_EGLSurface_EGLNativePixmapType,
    FORMAT_EGLContext_EGLDisplay_EGLConfig_EGLContext_const_EGLint___GENPT__,
    FORMAT_EGLImageKHR_EGLDisplay_const_EGLint___GENPT__,
    FORMAT_EGLSyncNV_EGLDisplay_EGLenum_const_EGLint___GENPT__,
    FORMAT_EGLImageKHR_EGLDisplay_EGLContext_EGLenum_EGLClientBuffer_const_EGLint___GENPT__,
    FORMAT_EGLSurface_EGLDisplay_EGLenum_EGLClientBuffer_EGLConfig_const_EGLint___GENPT__,
    FORMAT_EGLSurface_EGLDisplay_EGLConfig_const_EGLint___GENPT__,
    FORMAT_EGLSurface_EGLDisplay_EGLConfig_EGLNativePixmapType_const_EGLint___GENPT__,
    FORMAT_EGLSurface_EGLDisplay_EGLConfig_struct_EGLClientPixmapHI___GENPT__,
    FORMAT_EGLStreamKHR_EGLDisplay_EGLNativeFileDescriptorKHR,
    FORMAT_EGLStreamKHR_EGLDisplay_const_EGLint___GENPT__,
    FORMAT_EGLSurface_EGLDisplay_EGLConfig_EGLStreamKHR_const_EGLint___GENPT__,
    FORMAT_EGLSyncKHR_EGLDisplay_EGLenum_const_EGLint___GENPT__,
    FORMAT_EGLSurface_EGLDisplay_EGLConfig_EGLNativeWindowType_const_EGLint___GENPT__,
    FORMAT_EGLBoolean_EGLDisplay_EGLContext,
    FORMAT_EGLBoolean_EGLDisplay_EGLImageKHR,
    FORMAT_EGLBoolean_EGLDisplay_EGLStreamKHR,
    FORMAT_EGLBoolean_EGLDisplay_EGLSurface,
    FORMAT_EGLBoolean_EGLDisplay_EGLSyncKHR,
    FORMAT_EGLBoolean_EGLSyncNV,
    FORMAT_EGLint_EGLDisplay_EGLSyncKHR,
    FORMAT_EGLBoolean_EGLDisplay_EGLImageKHR_EGLint___GENPT___EGLint___GENPT___EGLint___GENPT__,
    FORMAT_EGLBoolean_EGLDisplay_EGLConfig_EGLint_EGLint___GENPT__,
    FORMAT_EGLBoolean_EGLDisplay_EGLConfig___GENPT___EGLint_EGLint___GENPT__,
    FORMAT_EGLContext,
    FORMAT_EGLDisplay,
    FORMAT_EGLSurface_EGLint,
    FORMAT_EGLDisplay_EGLNativeDisplayType,
    FORMAT_EGLint,
    FORMAT___eglMustCastToProperFunctionPointerType_const_char___GENPT__,
    FORMAT_EGLNativeFileDescriptorKHR_EGLDisplay_EGLStreamKHR,
    FORMAT_EGLBoolean_EGLDisplay_EGLSyncKHR_EGLint_EGLint___GENPT__,
    FORMAT_EGLBoolean_EGLSyncNV_EGLint_EGLint___GENPT__,
    FORMAT_EGLuint64NV,
    FORMAT_EGLBoolean_EGLDisplay_EGLint___GENPT___EGLint___GENPT__,
    FORMAT_EGLBoolean_EGLDisplay_EGLSurface_const_EGLint___GENPT__,
    FORMAT_EGLBoolean_EGLDisplay_EGLSurface_EGLSurface_EGLContext,
    FORMAT_EGLBoolean_EGLDisplay_EGLSurface_EGLint_EGLint_EGLint_EGLint,
    FORMAT_EGLenum,
    FORMAT_EGLBoolean_EGLDisplay_EGLContext_EGLint_EGLint___GENPT__,
    FORMAT_EGLBoolean_EGLDisplay_EGLNativeDisplayType___GENPT__,
    FORMAT_EGLBoolean_EGLDisplay_EGLSurface_EGLNativePixmapType___GENPT__,
    FORMAT_EGLBoolean_EGLDisplay_EGLSurface_EGLNativeWindowType___GENPT__,
    FORMAT_EGLBoolean_EGLDisplay_EGLStreamKHR_EGLenum_EGLint___GENPT__,
    FORMAT_EGLBoolean_EGLDisplay_EGLStreamKHR_EGLenum_EGLTimeKHR___GENPT__,
    FORMAT_EGLBoolean_EGLDisplay_EGLStreamKHR_EGLenum_EGLuint64KHR___GENPT__,
    FORMAT_const_char___GENPT___EGLDisplay_EGLint,
    FORMAT_EGLBoolean_EGLDisplay_EGLSurface_EGLint_EGLint___GENPT__,
    FORMAT_EGLBoolean_EGLDisplay_EGLSurface_EGLint_void___GENPT____GENPT__,
    FORMAT_EGLBoolean,
    FORMAT_EGLBoolean_EGLDisplay_EGLSyncKHR_EGLenum,
    FORMAT_EGLBoolean_EGLSyncNV_EGLenum,
    FORMAT_EGLBoolean_EGLDisplay_EGLStreamKHR_EGLenum_EGLint,
    FORMAT_EGLBoolean_EGLDisplay_EGLSurface_EGLint_EGLint,
    FORMAT_EGLBoolean_EGLDisplay_EGLSurface_EGLint___GENPT___EGLint,
    FORMAT_EGLBoolean_EGLDisplay_EGLint,
    FORMAT_EGLBoolean_EGLDisplay,
    FORMAT_EGLBoolean_EGLint,
    FORMAT_EGLint_EGLDisplay_EGLSyncKHR_EGLint,
};

typedef int (*FUNC_int_Display___GENPT___int)(Display * dpy, int hpId);
typedef struct {
    Display * a1;
    int a2;
} ARGS_int_Display___GENPT___int;
typedef struct {
    int index;
    ARGS_int_Display___GENPT___int args;
} PACKED_int_Display___GENPT___int;
typedef void (*FUNC_void_uint32_t_uint32_t)(uint32_t window, uint32_t barrier);
typedef struct {
    uint32_t a1;
    uint32_t a2;
} ARGS_void_uint32_t_uint32_t;
typedef struct {
    int index;
    ARGS_void_uint32_t_uint32_t args;
} PACKED_void_uint32_t_uint32_t;
typedef void (*FUNC_void_uint32_t)(uint32_t drawable);
typedef struct {
    uint32_t a1;
} ARGS_void_uint32_t;
typedef struct {
    int index;
    ARGS_void_uint32_t args;
} PACKED_void_uint32_t;
typedef XVisualInfo * (*FUNC_XVisualInfo___GENPT___Display___GENPT___int_int___GENPT__)(Display * dpy, int screen, int * attribList);
typedef struct {
    Display * a1;
    int a2;
    int * a3;
} ARGS_XVisualInfo___GENPT___Display___GENPT___int_int___GENPT__;
typedef struct {
    int index;
    ARGS_XVisualInfo___GENPT___Display___GENPT___int_int___GENPT__ args;
} PACKED_XVisualInfo___GENPT___Display___GENPT___int_int___GENPT__;
typedef void (*FUNC_void)();
typedef struct {
    int index;
} PACKED_void;
typedef void (*FUNC_void_Display___GENPT___GLXContext_GLXContext_unsigned_long)(Display * dpy, GLXContext src, GLXContext dst, unsigned long mask);
typedef struct {
    Display * a1;
    GLXContext a2;
    GLXContext a3;
    unsigned long a4;
} ARGS_void_Display___GENPT___GLXContext_GLXContext_unsigned_long;
typedef struct {
    int index;
    ARGS_void_Display___GENPT___GLXContext_GLXContext_unsigned_long args;
} PACKED_void_Display___GENPT___GLXContext_GLXContext_unsigned_long;
typedef GLXContext (*FUNC_GLXContext_Display___GENPT___XVisualInfo___GENPT___GLXContext_Bool)(Display * dpy, XVisualInfo * vis, GLXContext shareList, Bool direct);
typedef struct {
    Display * a1;
    XVisualInfo * a2;
    GLXContext a3;
    Bool a4;
} ARGS_GLXContext_Display___GENPT___XVisualInfo___GENPT___GLXContext_Bool;
typedef struct {
    int index;
    ARGS_GLXContext_Display___GENPT___XVisualInfo___GENPT___GLXContext_Bool args;
} PACKED_GLXContext_Display___GENPT___XVisualInfo___GENPT___GLXContext_Bool;
typedef GLXContext (*FUNC_GLXContext_Display___GENPT___void___GENPT___GLXContext_Bool_const_int___GENPT__)(Display * display, void * config, GLXContext share_context, Bool direct, const int * attrib_list);
typedef struct {
    Display * a1;
    void * a2;
    GLXContext a3;
    Bool a4;
    int * a5;
} ARGS_GLXContext_Display___GENPT___void___GENPT___GLXContext_Bool_const_int___GENPT__;
typedef struct {
    int index;
    ARGS_GLXContext_Display___GENPT___void___GENPT___GLXContext_Bool_const_int___GENPT__ args;
} PACKED_GLXContext_Display___GENPT___void___GENPT___GLXContext_Bool_const_int___GENPT__;
typedef void (*FUNC_void_uint32_t_uint32_t_uint32_t_uint32_t)(uint32_t gc_id, uint32_t screen, uint32_t config, uint32_t share_list);
typedef struct {
    uint32_t a1;
    uint32_t a2;
    uint32_t a3;
    uint32_t a4;
} ARGS_void_uint32_t_uint32_t_uint32_t_uint32_t;
typedef struct {
    int index;
    ARGS_void_uint32_t_uint32_t_uint32_t_uint32_t args;
} PACKED_void_uint32_t_uint32_t_uint32_t_uint32_t;
typedef GLXPixmap (*FUNC_GLXPixmap_Display___GENPT___XVisualInfo___GENPT___Pixmap)(Display * dpy, XVisualInfo * visual, Pixmap pixmap);
typedef struct {
    Display * a1;
    XVisualInfo * a2;
    Pixmap a3;
} ARGS_GLXPixmap_Display___GENPT___XVisualInfo___GENPT___Pixmap;
typedef struct {
    int index;
    ARGS_GLXPixmap_Display___GENPT___XVisualInfo___GENPT___Pixmap args;
} PACKED_GLXPixmap_Display___GENPT___XVisualInfo___GENPT___Pixmap;
typedef void (*FUNC_void_uint32_t_uint32_t_uint32_t)(uint32_t config, uint32_t pixmap, uint32_t glxpixmap);
typedef struct {
    uint32_t a1;
    uint32_t a2;
    uint32_t a3;
} ARGS_void_uint32_t_uint32_t_uint32_t;
typedef struct {
    int index;
    ARGS_void_uint32_t_uint32_t_uint32_t args;
} PACKED_void_uint32_t_uint32_t_uint32_t;
typedef void (*FUNC_void_Display___GENPT___uint32_t_uint32_t_uint32_t_uint32_t_uint32_t)(Display * dpy, uint32_t screen, uint32_t server, uint32_t path, uint32_t cls, uint32_t node);
typedef struct {
    Display * a1;
    uint32_t a2;
    uint32_t a3;
    uint32_t a4;
    uint32_t a5;
    uint32_t a6;
} ARGS_void_Display___GENPT___uint32_t_uint32_t_uint32_t_uint32_t_uint32_t;
typedef struct {
    int index;
    ARGS_void_Display___GENPT___uint32_t_uint32_t_uint32_t_uint32_t_uint32_t args;
} PACKED_void_Display___GENPT___uint32_t_uint32_t_uint32_t_uint32_t_uint32_t;
typedef void (*FUNC_void_Display___GENPT___GLXContext)(Display * dpy, GLXContext ctx);
typedef struct {
    Display * a1;
    GLXContext a2;
} ARGS_void_Display___GENPT___GLXContext;
typedef struct {
    int index;
    ARGS_void_Display___GENPT___GLXContext args;
} PACKED_void_Display___GENPT___GLXContext;
typedef void (*FUNC_void_Display___GENPT___GLXPixmap)(Display * dpy, GLXPixmap pixmap);
typedef struct {
    Display * a1;
    GLXPixmap a2;
} ARGS_void_Display___GENPT___GLXPixmap;
typedef struct {
    int index;
    ARGS_void_Display___GENPT___GLXPixmap args;
} PACKED_void_Display___GENPT___GLXPixmap;
typedef void (*FUNC_void_Display___GENPT___uint32_t)(Display * dpy, uint32_t glxvideosource);
typedef struct {
    Display * a1;
    uint32_t a2;
} ARGS_void_Display___GENPT___uint32_t;
typedef struct {
    int index;
    ARGS_void_Display___GENPT___uint32_t args;
} PACKED_void_Display___GENPT___uint32_t;
typedef const char * (*FUNC_const_char___GENPT___Display___GENPT___int)(Display * display, int name);
typedef struct {
    Display * a1;
    int a2;
} ARGS_const_char___GENPT___Display___GENPT___int;
typedef struct {
    int index;
    ARGS_const_char___GENPT___Display___GENPT___int args;
} PACKED_const_char___GENPT___Display___GENPT___int;
typedef int (*FUNC_int_Display___GENPT___XVisualInfo___GENPT___int_int___GENPT__)(Display * display, XVisualInfo * visual, int attribute, int * value);
typedef struct {
    Display * a1;
    XVisualInfo * a2;
    int a3;
    int * a4;
} ARGS_int_Display___GENPT___XVisualInfo___GENPT___int_int___GENPT__;
typedef struct {
    int index;
    ARGS_int_Display___GENPT___XVisualInfo___GENPT___int_int___GENPT__ args;
} PACKED_int_Display___GENPT___XVisualInfo___GENPT___int_int___GENPT__;
typedef GLXContext (*FUNC_GLXContext)();
typedef struct {
    int index;
} PACKED_GLXContext;
typedef GLXDrawable (*FUNC_GLXDrawable)();
typedef struct {
    int index;
} PACKED_GLXDrawable;
typedef int (*FUNC_int_Display___GENPT___int_int_int_const_void___GENPT__)(Display * dpy, int timeSlice, int attrib, int size, const void * attribList);
typedef struct {
    Display * a1;
    int a2;
    int a3;
    int a4;
    void * a5;
} ARGS_int_Display___GENPT___int_int_int_const_void___GENPT__;
typedef struct {
    int index;
    ARGS_int_Display___GENPT___int_int_int_const_void___GENPT__ args;
} PACKED_int_Display___GENPT___int_int_int_const_void___GENPT__;
typedef int (*FUNC_int_Display___GENPT___int_int_GLXHyperpipeConfigSGIX_int___GENPT__)(Display * dpy, int networkId, int npipes, GLXHyperpipeConfigSGIX cfg, int * hpId);
typedef struct {
    Display * a1;
    int a2;
    int a3;
    GLXHyperpipeConfigSGIX a4;
    int * a5;
} ARGS_int_Display___GENPT___int_int_GLXHyperpipeConfigSGIX_int___GENPT__;
typedef struct {
    int index;
    ARGS_int_Display___GENPT___int_int_GLXHyperpipeConfigSGIX_int___GENPT__ args;
} PACKED_int_Display___GENPT___int_int_GLXHyperpipeConfigSGIX_int___GENPT__;
typedef Bool (*FUNC_Bool_Display___GENPT___GLXContext)(Display * dpy, GLXContext ctx);
typedef struct {
    Display * a1;
    GLXContext a2;
} ARGS_Bool_Display___GENPT___GLXContext;
typedef struct {
    int index;
    ARGS_Bool_Display___GENPT___GLXContext args;
} PACKED_Bool_Display___GENPT___GLXContext;
typedef Bool (*FUNC_Bool_Display___GENPT___GLXDrawable_GLXContext)(Display * dpy, GLXDrawable drawable, GLXContext ctx);
typedef struct {
    Display * a1;
    GLXDrawable a2;
    GLXContext a3;
} ARGS_Bool_Display___GENPT___GLXDrawable_GLXContext;
typedef struct {
    int index;
    ARGS_Bool_Display___GENPT___GLXDrawable_GLXContext args;
} PACKED_Bool_Display___GENPT___GLXDrawable_GLXContext;
typedef Bool (*FUNC_Bool_Display___GENPT___int___GENPT___int___GENPT__)(Display * display, int * errorBase, int * eventBase);
typedef struct {
    Display * a1;
    int * a2;
    int * a3;
} ARGS_Bool_Display___GENPT___int___GENPT___int___GENPT__;
typedef struct {
    int index;
    ARGS_Bool_Display___GENPT___int___GENPT___int___GENPT__ args;
} PACKED_Bool_Display___GENPT___int___GENPT___int___GENPT__;
typedef int (*FUNC_int_Display___GENPT___int_int_int_const_void___GENPT___void___GENPT__)(Display * dpy, int timeSlice, int attrib, int size, const void * attribList, void * returnAttribList);
typedef struct {
    Display * a1;
    int a2;
    int a3;
    int a4;
    void * a5;
    void * a6;
} ARGS_int_Display___GENPT___int_int_int_const_void___GENPT___void___GENPT__;
typedef struct {
    int index;
    ARGS_int_Display___GENPT___int_int_int_const_void___GENPT___void___GENPT__ args;
} PACKED_int_Display___GENPT___int_int_int_const_void___GENPT___void___GENPT__;
typedef GLXHyperpipeConfigSGIX * (*FUNC_GLXHyperpipeConfigSGIX___GENPT___Display___GENPT___int_int___GENPT__)(Display * dpy, int hpId, int * npipes);
typedef struct {
    Display * a1;
    int a2;
    int * a3;
} ARGS_GLXHyperpipeConfigSGIX___GENPT___Display___GENPT___int_int___GENPT__;
typedef struct {
    int index;
    ARGS_GLXHyperpipeConfigSGIX___GENPT___Display___GENPT___int_int___GENPT__ args;
} PACKED_GLXHyperpipeConfigSGIX___GENPT___Display___GENPT___int_int___GENPT__;
typedef GLXHyperpipeNetworkSGIX * (*FUNC_GLXHyperpipeNetworkSGIX___GENPT___Display___GENPT___int___GENPT__)(Display * dpy, int * npipes);
typedef struct {
    Display * a1;
    int * a2;
} ARGS_GLXHyperpipeNetworkSGIX___GENPT___Display___GENPT___int___GENPT__;
typedef struct {
    int index;
    ARGS_GLXHyperpipeNetworkSGIX___GENPT___Display___GENPT___int___GENPT__ args;
} PACKED_GLXHyperpipeNetworkSGIX___GENPT___Display___GENPT___int___GENPT__;
typedef const char * (*FUNC_const_char___GENPT___Display___GENPT___int_int)(Display * dpy, int screen, int name);
typedef struct {
    Display * a1;
    int a2;
    int a3;
} ARGS_const_char___GENPT___Display___GENPT___int_int;
typedef struct {
    int index;
    ARGS_const_char___GENPT___Display___GENPT___int_int args;
} PACKED_const_char___GENPT___Display___GENPT___int_int;
typedef Bool (*FUNC_Bool_Display___GENPT___GLXDrawable)(Display * dpy, GLXDrawable drawable);
typedef struct {
    Display * a1;
    GLXDrawable a2;
} ARGS_Bool_Display___GENPT___GLXDrawable;
typedef struct {
    int index;
    ARGS_Bool_Display___GENPT___GLXDrawable args;
} PACKED_Bool_Display___GENPT___GLXDrawable;
typedef void (*FUNC_void_Display___GENPT___GLXDrawable)(Display * dpy, GLXDrawable drawable);
typedef struct {
    Display * a1;
    GLXDrawable a2;
} ARGS_void_Display___GENPT___GLXDrawable;
typedef struct {
    int index;
    ARGS_void_Display___GENPT___GLXDrawable args;
} PACKED_void_Display___GENPT___GLXDrawable;
typedef int (*FUNC_int_unsigned_int)(unsigned int interval);
typedef struct {
    unsigned int a1;
} ARGS_int_unsigned_int;
typedef struct {
    int index;
    ARGS_int_unsigned_int args;
} PACKED_int_unsigned_int;
typedef void (*FUNC_void_unsigned_int)(unsigned int interval);
typedef struct {
    unsigned int a1;
} ARGS_void_unsigned_int;
typedef struct {
    int index;
    ARGS_void_unsigned_int args;
} PACKED_void_unsigned_int;
typedef void (*FUNC_void_Font_int_int_int)(Font font, int first, int count, int listBase);
typedef struct {
    Font a1;
    int a2;
    int a3;
    int a4;
} ARGS_void_Font_int_int_int;
typedef struct {
    int index;
    ARGS_void_Font_int_int_int args;
} PACKED_void_Font_int_int_int;
typedef Bool (*FUNC_Bool_Display___GENPT___GLXPbufferSGIX_DMparams___GENPT___DMbuffer)(Display * dpy, GLXPbufferSGIX pbuffer, DMparams * params, DMbuffer dmbuffer);
typedef struct {
    Display * a1;
    GLXPbufferSGIX a2;
    DMparams * a3;
    DMbuffer a4;
} ARGS_Bool_Display___GENPT___GLXPbufferSGIX_DMparams___GENPT___DMbuffer;
typedef struct {
    int index;
    ARGS_Bool_Display___GENPT___GLXPbufferSGIX_DMparams___GENPT___DMbuffer args;
} PACKED_Bool_Display___GENPT___GLXPbufferSGIX_DMparams___GENPT___DMbuffer;
typedef int (*FUNC_int_Display___GENPT___int_int_Window)(Display * display, int screen, int channel, Window window);
typedef struct {
    Display * a1;
    int a2;
    int a3;
    Window a4;
} ARGS_int_Display___GENPT___int_int_Window;
typedef struct {
    int index;
    ARGS_int_Display___GENPT___int_int_Window args;
} PACKED_int_Display___GENPT___int_int_Window;
typedef Bool (*FUNC_Bool_Display___GENPT___GLuint_GLuint)(Display * dpy, GLuint group, GLuint barrier);
typedef struct {
    Display * a1;
    GLuint a2;
    GLuint a3;
} ARGS_Bool_Display___GENPT___GLuint_GLuint;
typedef struct {
    int index;
    ARGS_Bool_Display___GENPT___GLuint_GLuint args;
} PACKED_Bool_Display___GENPT___GLuint_GLuint;
typedef void (*FUNC_void_Display___GENPT___GLXDrawable_int)(Display * dpy, GLXDrawable drawable, int barrier);
typedef struct {
    Display * a1;
    GLXDrawable a2;
    int a3;
} ARGS_void_Display___GENPT___GLXDrawable_int;
typedef struct {
    int index;
    ARGS_void_Display___GENPT___GLXDrawable_int args;
} PACKED_void_Display___GENPT___GLXDrawable_int;
typedef void (*FUNC_void_Display___GENPT___GLXDrawable_int_const_int___GENPT__)(Display * dpy, GLXDrawable drawable, int buffer, const int * attrib_list);
typedef struct {
    Display * a1;
    GLXDrawable a2;
    int a3;
    int * a4;
} ARGS_void_Display___GENPT___GLXDrawable_int_const_int___GENPT__;
typedef struct {
    int index;
    ARGS_void_Display___GENPT___GLXDrawable_int_const_int___GENPT__ args;
} PACKED_void_Display___GENPT___GLXDrawable_int_const_int___GENPT__;
typedef int (*FUNC_int_Display___GENPT___unsigned_int_GLXVideoCaptureDeviceNV)(Display * dpy, unsigned int video_capture_slot, GLXVideoCaptureDeviceNV device);
typedef struct {
    Display * a1;
    unsigned int a2;
    GLXVideoCaptureDeviceNV a3;
} ARGS_int_Display___GENPT___unsigned_int_GLXVideoCaptureDeviceNV;
typedef struct {
    int index;
    ARGS_int_Display___GENPT___unsigned_int_GLXVideoCaptureDeviceNV args;
} PACKED_int_Display___GENPT___unsigned_int_GLXVideoCaptureDeviceNV;
typedef int (*FUNC_int_Display___GENPT___unsigned_int_unsigned_int_const_int___GENPT__)(Display * dpy, unsigned int video_slot, unsigned int video_device, const int * attrib_list);
typedef struct {
    Display * a1;
    unsigned int a2;
    unsigned int a3;
    int * a4;
} ARGS_int_Display___GENPT___unsigned_int_unsigned_int_const_int___GENPT__;
typedef struct {
    int index;
    ARGS_int_Display___GENPT___unsigned_int_unsigned_int_const_int___GENPT__ args;
} PACKED_int_Display___GENPT___unsigned_int_unsigned_int_const_int___GENPT__;
typedef int (*FUNC_int_Display___GENPT___GLXVideoDeviceNV_GLXPbuffer_int)(Display * dpy, GLXVideoDeviceNV VideoDevice, GLXPbuffer pbuf, int iVideoBuffer);
typedef struct {
    Display * a1;
    GLXVideoDeviceNV a2;
    GLXPbuffer a3;
    int a4;
} ARGS_int_Display___GENPT___GLXVideoDeviceNV_GLXPbuffer_int;
typedef struct {
    int index;
    ARGS_int_Display___GENPT___GLXVideoDeviceNV_GLXPbuffer_int args;
} PACKED_int_Display___GENPT___GLXVideoDeviceNV_GLXPbuffer_int;
typedef int (*FUNC_int_Display___GENPT___int_int_int_int_int_int)(Display * display, int screen, int channel, int x, int y, int w, int h);
typedef struct {
    Display * a1;
    int a2;
    int a3;
    int a4;
    int a5;
    int a6;
    int a7;
} ARGS_int_Display___GENPT___int_int_int_int_int_int;
typedef struct {
    int index;
    ARGS_int_Display___GENPT___int_int_int_int_int_int args;
} PACKED_int_Display___GENPT___int_int_int_int_int_int;
typedef int (*FUNC_int_Display___GENPT___int_int_GLenum)(Display * display, int screen, int channel, GLenum synctype);
typedef struct {
    Display * a1;
    int a2;
    int a3;
    GLenum a4;
} ARGS_int_Display___GENPT___int_int_GLenum;
typedef struct {
    int index;
    ARGS_int_Display___GENPT___int_int_GLenum args;
} PACKED_int_Display___GENPT___int_int_GLenum;
typedef GLXFBConfig * (*FUNC_GLXFBConfig___GENPT___Display___GENPT___int_const_int___GENPT___int___GENPT__)(Display * dpy, int screen, const int * attrib_list, int * nelements);
typedef struct {
    Display * a1;
    int a2;
    int * a3;
    int * a4;
} ARGS_GLXFBConfig___GENPT___Display___GENPT___int_const_int___GENPT___int___GENPT__;
typedef struct {
    int index;
    ARGS_GLXFBConfig___GENPT___Display___GENPT___int_const_int___GENPT___int___GENPT__ args;
} PACKED_GLXFBConfig___GENPT___Display___GENPT___int_const_int___GENPT___int___GENPT__;
typedef GLXFBConfigSGIX * (*FUNC_GLXFBConfigSGIX___GENPT___Display___GENPT___int_int___GENPT___int___GENPT__)(Display * dpy, int screen, int * attrib_list, int * nelements);
typedef struct {
    Display * a1;
    int a2;
    int * a3;
    int * a4;
} ARGS_GLXFBConfigSGIX___GENPT___Display___GENPT___int_int___GENPT___int___GENPT__;
typedef struct {
    int index;
    ARGS_GLXFBConfigSGIX___GENPT___Display___GENPT___int_int___GENPT___int___GENPT__ args;
} PACKED_GLXFBConfigSGIX___GENPT___Display___GENPT___int_int___GENPT___int___GENPT__;
typedef void (*FUNC_void_Display___GENPT___GLXContext_GLuint_GLenum_GLint_GLint_GLint_GLint_GLXContext_GLuint_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei)(Display * dpy, GLXContext srcCtx, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLXContext dstCtx, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
typedef struct {
    Display * a1;
    GLXContext a2;
    GLuint a3;
    GLenum a4;
    GLint a5;
    GLint a6;
    GLint a7;
    GLint a8;
    GLXContext a9;
    GLuint a10;
    GLenum a11;
    GLint a12;
    GLint a13;
    GLint a14;
    GLint a15;
    GLsizei a16;
    GLsizei a17;
    GLsizei a18;
} ARGS_void_Display___GENPT___GLXContext_GLuint_GLenum_GLint_GLint_GLint_GLint_GLXContext_GLuint_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei;
typedef struct {
    int index;
    ARGS_void_Display___GENPT___GLXContext_GLuint_GLenum_GLint_GLint_GLint_GLint_GLXContext_GLuint_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei args;
} PACKED_void_Display___GENPT___GLXContext_GLuint_GLenum_GLint_GLint_GLint_GLint_GLXContext_GLuint_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei;
typedef void (*FUNC_void_Display___GENPT___GLXDrawable_int_int_int_int)(Display * dpy, GLXDrawable drawable, int x, int y, int width, int height);
typedef struct {
    Display * a1;
    GLXDrawable a2;
    int a3;
    int a4;
    int a5;
    int a6;
} ARGS_void_Display___GENPT___GLXDrawable_int_int_int_int;
typedef struct {
    int index;
    ARGS_void_Display___GENPT___GLXDrawable_int_int_int_int args;
} PACKED_void_Display___GENPT___GLXDrawable_int_int_int_int;
typedef GLXContext (*FUNC_GLXContext_Display___GENPT___GLXFBConfig_GLXContext_Bool_const_int___GENPT__)(Display * dpy, GLXFBConfig config, GLXContext share_context, Bool direct, const int * attrib_list);
typedef struct {
    Display * a1;
    GLXFBConfig a2;
    GLXContext a3;
    Bool a4;
    int * a5;
} ARGS_GLXContext_Display___GENPT___GLXFBConfig_GLXContext_Bool_const_int___GENPT__;
typedef struct {
    int index;
    ARGS_GLXContext_Display___GENPT___GLXFBConfig_GLXContext_Bool_const_int___GENPT__ args;
} PACKED_GLXContext_Display___GENPT___GLXFBConfig_GLXContext_Bool_const_int___GENPT__;
typedef GLXContext (*FUNC_GLXContext_Display___GENPT___GLXFBConfigSGIX_int_GLXContext_Bool)(Display * dpy, GLXFBConfigSGIX config, int render_type, GLXContext share_list, Bool direct);
typedef struct {
    Display * a1;
    GLXFBConfigSGIX a2;
    int a3;
    GLXContext a4;
    Bool a5;
} ARGS_GLXContext_Display___GENPT___GLXFBConfigSGIX_int_GLXContext_Bool;
typedef struct {
    int index;
    ARGS_GLXContext_Display___GENPT___GLXFBConfigSGIX_int_GLXContext_Bool args;
} PACKED_GLXContext_Display___GENPT___GLXFBConfigSGIX_int_GLXContext_Bool;
typedef GLXPbufferSGIX (*FUNC_GLXPbufferSGIX_Display___GENPT___GLXFBConfigSGIX_unsigned_int_unsigned_int_int___GENPT__)(Display * dpy, GLXFBConfigSGIX config, unsigned int width, unsigned int height, int * attrib_list);
typedef struct {
    Display * a1;
    GLXFBConfigSGIX a2;
    unsigned int a3;
    unsigned int a4;
    int * a5;
} ARGS_GLXPbufferSGIX_Display___GENPT___GLXFBConfigSGIX_unsigned_int_unsigned_int_int___GENPT__;
typedef struct {
    int index;
    ARGS_GLXPbufferSGIX_Display___GENPT___GLXFBConfigSGIX_unsigned_int_unsigned_int_int___GENPT__ args;
} PACKED_GLXPbufferSGIX_Display___GENPT___GLXFBConfigSGIX_unsigned_int_unsigned_int_int___GENPT__;
typedef GLXPixmap (*FUNC_GLXPixmap_Display___GENPT___XVisualInfo___GENPT___Pixmap_Colormap)(Display * dpy, XVisualInfo * visual, Pixmap pixmap, Colormap cmap);
typedef struct {
    Display * a1;
    XVisualInfo * a2;
    Pixmap a3;
    Colormap a4;
} ARGS_GLXPixmap_Display___GENPT___XVisualInfo___GENPT___Pixmap_Colormap;
typedef struct {
    int index;
    ARGS_GLXPixmap_Display___GENPT___XVisualInfo___GENPT___Pixmap_Colormap args;
} PACKED_GLXPixmap_Display___GENPT___XVisualInfo___GENPT___Pixmap_Colormap;
typedef GLXPixmap (*FUNC_GLXPixmap_Display___GENPT___GLXFBConfigSGIX_Pixmap)(Display * dpy, GLXFBConfigSGIX config, Pixmap pixmap);
typedef struct {
    Display * a1;
    GLXFBConfigSGIX a2;
    Pixmap a3;
} ARGS_GLXPixmap_Display___GENPT___GLXFBConfigSGIX_Pixmap;
typedef struct {
    int index;
    ARGS_GLXPixmap_Display___GENPT___GLXFBConfigSGIX_Pixmap args;
} PACKED_GLXPixmap_Display___GENPT___GLXFBConfigSGIX_Pixmap;
typedef GLXVideoSourceSGIX (*FUNC_GLXVideoSourceSGIX_Display___GENPT___int_VLServer_VLPath_int_VLNode)(Display * display, int screen, VLServer server, VLPath path, int nodeClass, VLNode drainNode);
typedef struct {
    Display * a1;
    int a2;
    VLServer a3;
    VLPath a4;
    int a5;
    VLNode a6;
} ARGS_GLXVideoSourceSGIX_Display___GENPT___int_VLServer_VLPath_int_VLNode;
typedef struct {
    int index;
    ARGS_GLXVideoSourceSGIX_Display___GENPT___int_VLServer_VLPath_int_VLNode args;
} PACKED_GLXVideoSourceSGIX_Display___GENPT___int_VLServer_VLPath_int_VLNode;
typedef GLXContext (*FUNC_GLXContext_Display___GENPT___GLXFBConfig_int_GLXContext_Bool)(Display * dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct);
typedef struct {
    Display * a1;
    GLXFBConfig a2;
    int a3;
    GLXContext a4;
    Bool a5;
} ARGS_GLXContext_Display___GENPT___GLXFBConfig_int_GLXContext_Bool;
typedef struct {
    int index;
    ARGS_GLXContext_Display___GENPT___GLXFBConfig_int_GLXContext_Bool args;
} PACKED_GLXContext_Display___GENPT___GLXFBConfig_int_GLXContext_Bool;
typedef GLXPbuffer (*FUNC_GLXPbuffer_Display___GENPT___GLXFBConfig_const_int___GENPT__)(Display * dpy, GLXFBConfig config, const int * attrib_list);
typedef struct {
    Display * a1;
    GLXFBConfig a2;
    int * a3;
} ARGS_GLXPbuffer_Display___GENPT___GLXFBConfig_const_int___GENPT__;
typedef struct {
    int index;
    ARGS_GLXPbuffer_Display___GENPT___GLXFBConfig_const_int___GENPT__ args;
} PACKED_GLXPbuffer_Display___GENPT___GLXFBConfig_const_int___GENPT__;
typedef GLXPixmap (*FUNC_GLXPixmap_Display___GENPT___GLXFBConfig_Pixmap_const_int___GENPT__)(Display * dpy, GLXFBConfig config, Pixmap pixmap, const int * attrib_list);
typedef struct {
    Display * a1;
    GLXFBConfig a2;
    Pixmap a3;
    int * a4;
} ARGS_GLXPixmap_Display___GENPT___GLXFBConfig_Pixmap_const_int___GENPT__;
typedef struct {
    int index;
    ARGS_GLXPixmap_Display___GENPT___GLXFBConfig_Pixmap_const_int___GENPT__ args;
} PACKED_GLXPixmap_Display___GENPT___GLXFBConfig_Pixmap_const_int___GENPT__;
typedef GLXWindow (*FUNC_GLXWindow_Display___GENPT___GLXFBConfig_Window_const_int___GENPT__)(Display * dpy, GLXFBConfig config, Window win, const int * attrib_list);
typedef struct {
    Display * a1;
    GLXFBConfig a2;
    Window a3;
    int * a4;
} ARGS_GLXWindow_Display___GENPT___GLXFBConfig_Window_const_int___GENPT__;
typedef struct {
    int index;
    ARGS_GLXWindow_Display___GENPT___GLXFBConfig_Window_const_int___GENPT__ args;
} PACKED_GLXWindow_Display___GENPT___GLXFBConfig_Window_const_int___GENPT__;
typedef void (*FUNC_void_Display___GENPT___Window_float)(Display * dpy, Window window, float cushion);
typedef struct {
    Display * a1;
    Window a2;
    float a3;
} ARGS_void_Display___GENPT___Window_float;
typedef struct {
    int index;
    ARGS_void_Display___GENPT___Window_float args;
} PACKED_void_Display___GENPT___Window_float;
typedef void (*FUNC_void_Display___GENPT___GLXPbufferSGIX)(Display * dpy, GLXPbufferSGIX pbuf);
typedef struct {
    Display * a1;
    GLXPbufferSGIX a2;
} ARGS_void_Display___GENPT___GLXPbufferSGIX;
typedef struct {
    int index;
    ARGS_void_Display___GENPT___GLXPbufferSGIX args;
} PACKED_void_Display___GENPT___GLXPbufferSGIX;
typedef void (*FUNC_void_Display___GENPT___GLXVideoSourceSGIX)(Display * dpy, GLXVideoSourceSGIX glxvideosource);
typedef struct {
    Display * a1;
    GLXVideoSourceSGIX a2;
} ARGS_void_Display___GENPT___GLXVideoSourceSGIX;
typedef struct {
    int index;
    ARGS_void_Display___GENPT___GLXVideoSourceSGIX args;
} PACKED_void_Display___GENPT___GLXVideoSourceSGIX;
typedef void (*FUNC_void_Display___GENPT___GLXPbuffer)(Display * dpy, GLXPbuffer pbuf);
typedef struct {
    Display * a1;
    GLXPbuffer a2;
} ARGS_void_Display___GENPT___GLXPbuffer;
typedef struct {
    int index;
    ARGS_void_Display___GENPT___GLXPbuffer args;
} PACKED_void_Display___GENPT___GLXPbuffer;
typedef void (*FUNC_void_Display___GENPT___GLXWindow)(Display * dpy, GLXWindow win);
typedef struct {
    Display * a1;
    GLXWindow a2;
} ARGS_void_Display___GENPT___GLXWindow;
typedef struct {
    int index;
    ARGS_void_Display___GENPT___GLXWindow args;
} PACKED_void_Display___GENPT___GLXWindow;
typedef GLXVideoCaptureDeviceNV * (*FUNC_GLXVideoCaptureDeviceNV___GENPT___Display___GENPT___int_int___GENPT__)(Display * dpy, int screen, int * nelements);
typedef struct {
    Display * a1;
    int a2;
    int * a3;
} ARGS_GLXVideoCaptureDeviceNV___GENPT___Display___GENPT___int_int___GENPT__;
typedef struct {
    int index;
    ARGS_GLXVideoCaptureDeviceNV___GENPT___Display___GENPT___int_int___GENPT__ args;
} PACKED_GLXVideoCaptureDeviceNV___GENPT___Display___GENPT___int_int___GENPT__;
typedef unsigned int * (*FUNC_unsigned_int___GENPT___Display___GENPT___int_int___GENPT__)(Display * dpy, int screen, int * nelements);
typedef struct {
    Display * a1;
    int a2;
    int * a3;
} ARGS_unsigned_int___GENPT___Display___GENPT___int_int___GENPT__;
typedef struct {
    int index;
    ARGS_unsigned_int___GENPT___Display___GENPT___int_int___GENPT__ args;
} PACKED_unsigned_int___GENPT___Display___GENPT___int_int___GENPT__;
typedef unsigned int (*FUNC_unsigned_int_const_void___GENPT__)(const void * pointer);
typedef struct {
    void * a1;
} ARGS_unsigned_int_const_void___GENPT__;
typedef struct {
    int index;
    ARGS_unsigned_int_const_void___GENPT__ args;
} PACKED_unsigned_int_const_void___GENPT__;
typedef GLXContextID (*FUNC_GLXContextID_const_GLXContext)(const GLXContext context);
typedef struct {
    GLXContext a1;
} ARGS_GLXContextID_const_GLXContext;
typedef struct {
    int index;
    ARGS_GLXContextID_const_GLXContext args;
} PACKED_GLXContextID_const_GLXContext;
typedef Display * (*FUNC_Display___GENPT__)();
typedef struct {
    int index;
} PACKED_Display___GENPT__;
typedef int (*FUNC_int_Display___GENPT___GLXFBConfig_int_int___GENPT__)(Display * dpy, GLXFBConfig config, int attribute, int * value);
typedef struct {
    Display * a1;
    GLXFBConfig a2;
    int a3;
    int * a4;
} ARGS_int_Display___GENPT___GLXFBConfig_int_int___GENPT__;
typedef struct {
    int index;
    ARGS_int_Display___GENPT___GLXFBConfig_int_int___GENPT__ args;
} PACKED_int_Display___GENPT___GLXFBConfig_int_int___GENPT__;
typedef int (*FUNC_int_Display___GENPT___GLXFBConfigSGIX_int_int___GENPT__)(Display * dpy, GLXFBConfigSGIX config, int attribute, int * value);
typedef struct {
    Display * a1;
    GLXFBConfigSGIX a2;
    int a3;
    int * a4;
} ARGS_int_Display___GENPT___GLXFBConfigSGIX_int_int___GENPT__;
typedef struct {
    int index;
    ARGS_int_Display___GENPT___GLXFBConfigSGIX_int_int___GENPT__ args;
} PACKED_int_Display___GENPT___GLXFBConfigSGIX_int_int___GENPT__;
typedef GLXFBConfigSGIX (*FUNC_GLXFBConfigSGIX_Display___GENPT___XVisualInfo___GENPT__)(Display * dpy, XVisualInfo * vis);
typedef struct {
    Display * a1;
    XVisualInfo * a2;
} ARGS_GLXFBConfigSGIX_Display___GENPT___XVisualInfo___GENPT__;
typedef struct {
    int index;
    ARGS_GLXFBConfigSGIX_Display___GENPT___XVisualInfo___GENPT__ args;
} PACKED_GLXFBConfigSGIX_Display___GENPT___XVisualInfo___GENPT__;
typedef GLXFBConfig * (*FUNC_GLXFBConfig___GENPT___Display___GENPT___int_int___GENPT__)(Display * dpy, int screen, int * nelements);
typedef struct {
    Display * a1;
    int a2;
    int * a3;
} ARGS_GLXFBConfig___GENPT___Display___GENPT___int_int___GENPT__;
typedef struct {
    int index;
    ARGS_GLXFBConfig___GENPT___Display___GENPT___int_int___GENPT__ args;
} PACKED_GLXFBConfig___GENPT___Display___GENPT___int_int___GENPT__;
typedef Bool (*FUNC_Bool_Display___GENPT___GLXDrawable_int32_t___GENPT___int32_t___GENPT__)(Display * dpy, GLXDrawable drawable, int32_t * numerator, int32_t * denominator);
typedef struct {
    Display * a1;
    GLXDrawable a2;
    int32_t * a3;
    int32_t * a4;
} ARGS_Bool_Display___GENPT___GLXDrawable_int32_t___GENPT___int32_t___GENPT__;
typedef struct {
    int index;
    ARGS_Bool_Display___GENPT___GLXDrawable_int32_t___GENPT___int32_t___GENPT__ args;
} PACKED_Bool_Display___GENPT___GLXDrawable_int32_t___GENPT___int32_t___GENPT__;
typedef __GLXextFuncPtr (*FUNC___GLXextFuncPtr_const_GLubyte___GENPT__)(const GLubyte * procName);
typedef struct {
    GLubyte * a1;
} ARGS___GLXextFuncPtr_const_GLubyte___GENPT__;
typedef struct {
    int index;
    ARGS___GLXextFuncPtr_const_GLubyte___GENPT__ args;
} PACKED___GLXextFuncPtr_const_GLubyte___GENPT__;
typedef void (*FUNC_void_Display___GENPT___GLXDrawable_unsigned_long___GENPT__)(Display * dpy, GLXDrawable draw, unsigned long * event_mask);
typedef struct {
    Display * a1;
    GLXDrawable a2;
    unsigned long * a3;
} ARGS_void_Display___GENPT___GLXDrawable_unsigned_long___GENPT__;
typedef struct {
    int index;
    ARGS_void_Display___GENPT___GLXDrawable_unsigned_long___GENPT__ args;
} PACKED_void_Display___GENPT___GLXDrawable_unsigned_long___GENPT__;
typedef Bool (*FUNC_Bool_Display___GENPT___GLXDrawable_int64_t___GENPT___int64_t___GENPT___int64_t___GENPT__)(Display * dpy, GLXDrawable drawable, int64_t * ust, int64_t * msc, int64_t * sbc);
typedef struct {
    Display * a1;
    GLXDrawable a2;
    int64_t * a3;
    int64_t * a4;
    int64_t * a5;
} ARGS_Bool_Display___GENPT___GLXDrawable_int64_t___GENPT___int64_t___GENPT___int64_t___GENPT__;
typedef struct {
    int index;
    ARGS_Bool_Display___GENPT___GLXDrawable_int64_t___GENPT___int64_t___GENPT___int64_t___GENPT__ args;
} PACKED_Bool_Display___GENPT___GLXDrawable_int64_t___GENPT___int64_t___GENPT___int64_t___GENPT__;
typedef Status (*FUNC_Status_Display___GENPT___Window_Window_long___GENPT__)(Display * dpy, Window overlay, Window underlay, long * pTransparentIndex);
typedef struct {
    Display * a1;
    Window a2;
    Window a3;
    long * a4;
} ARGS_Status_Display___GENPT___Window_Window_long___GENPT__;
typedef struct {
    int index;
    ARGS_Status_Display___GENPT___Window_Window_long___GENPT__ args;
} PACKED_Status_Display___GENPT___Window_Window_long___GENPT__;
typedef int (*FUNC_int_Display___GENPT___int_int_GLXVideoDeviceNV___GENPT__)(Display * dpy, int screen, int numVideoDevices, GLXVideoDeviceNV * pVideoDevice);
typedef struct {
    Display * a1;
    int a2;
    int a3;
    GLXVideoDeviceNV * a4;
} ARGS_int_Display___GENPT___int_int_GLXVideoDeviceNV___GENPT__;
typedef struct {
    int index;
    ARGS_int_Display___GENPT___int_int_GLXVideoDeviceNV___GENPT__ args;
} PACKED_int_Display___GENPT___int_int_GLXVideoDeviceNV___GENPT__;
typedef int (*FUNC_int_Display___GENPT___int_GLXVideoDeviceNV_unsigned_long___GENPT___unsigned_long___GENPT__)(Display * dpy, int screen, GLXVideoDeviceNV VideoDevice, unsigned long * pulCounterOutputPbuffer, unsigned long * pulCounterOutputVideo);
typedef struct {
    Display * a1;
    int a2;
    GLXVideoDeviceNV a3;
    unsigned long * a4;
    unsigned long * a5;
} ARGS_int_Display___GENPT___int_GLXVideoDeviceNV_unsigned_long___GENPT___unsigned_long___GENPT__;
typedef struct {
    int index;
    ARGS_int_Display___GENPT___int_GLXVideoDeviceNV_unsigned_long___GENPT___unsigned_long___GENPT__ args;
} PACKED_int_Display___GENPT___int_GLXVideoDeviceNV_unsigned_long___GENPT___unsigned_long___GENPT__;
typedef int (*FUNC_int_unsigned_int___GENPT__)(unsigned int * count);
typedef struct {
    unsigned int * a1;
} ARGS_int_unsigned_int___GENPT__;
typedef struct {
    int index;
    ARGS_int_unsigned_int___GENPT__ args;
} PACKED_int_unsigned_int___GENPT__;
typedef XVisualInfo * (*FUNC_XVisualInfo___GENPT___Display___GENPT___GLXFBConfig)(Display * dpy, GLXFBConfig config);
typedef struct {
    Display * a1;
    GLXFBConfig a2;
} ARGS_XVisualInfo___GENPT___Display___GENPT___GLXFBConfig;
typedef struct {
    int index;
    ARGS_XVisualInfo___GENPT___Display___GENPT___GLXFBConfig args;
} PACKED_XVisualInfo___GENPT___Display___GENPT___GLXFBConfig;
typedef XVisualInfo * (*FUNC_XVisualInfo___GENPT___Display___GENPT___GLXFBConfigSGIX)(Display * dpy, GLXFBConfigSGIX config);
typedef struct {
    Display * a1;
    GLXFBConfigSGIX a2;
} ARGS_XVisualInfo___GENPT___Display___GENPT___GLXFBConfigSGIX;
typedef struct {
    int index;
    ARGS_XVisualInfo___GENPT___Display___GENPT___GLXFBConfigSGIX args;
} PACKED_XVisualInfo___GENPT___Display___GENPT___GLXFBConfigSGIX;
typedef int (*FUNC_int_Display___GENPT___int_int_int_void___GENPT__)(Display * dpy, int timeSlice, int attrib, int size, void * attribList);
typedef struct {
    Display * a1;
    int a2;
    int a3;
    int a4;
    void * a5;
} ARGS_int_Display___GENPT___int_int_int_void___GENPT__;
typedef struct {
    int index;
    ARGS_int_Display___GENPT___int_int_int_void___GENPT__ args;
} PACKED_int_Display___GENPT___int_int_int_void___GENPT__;
typedef int (*FUNC_int_Display___GENPT___int_int_GLXHyperpipeConfigSGIX___GENPT___int___GENPT__)(Display * dpy, int networkId, int npipes, GLXHyperpipeConfigSGIX * cfg, int * hpId);
typedef struct {
    Display * a1;
    int a2;
    int a3;
    GLXHyperpipeConfigSGIX * a4;
    int * a5;
} ARGS_int_Display___GENPT___int_int_GLXHyperpipeConfigSGIX___GENPT___int___GENPT__;
typedef struct {
    int index;
    ARGS_int_Display___GENPT___int_int_GLXHyperpipeConfigSGIX___GENPT___int___GENPT__ args;
} PACKED_int_Display___GENPT___int_int_GLXHyperpipeConfigSGIX___GENPT___int___GENPT__;
typedef GLXContext (*FUNC_GLXContext_Display___GENPT___GLXContextID)(Display * dpy, GLXContextID contextID);
typedef struct {
    Display * a1;
    GLXContextID a2;
} ARGS_GLXContext_Display___GENPT___GLXContextID;
typedef struct {
    int index;
    ARGS_GLXContext_Display___GENPT___GLXContextID args;
} PACKED_GLXContext_Display___GENPT___GLXContextID;
typedef Bool (*FUNC_Bool_Display___GENPT___GLXDrawable_GLuint)(Display * dpy, GLXDrawable drawable, GLuint group);
typedef struct {
    Display * a1;
    GLXDrawable a2;
    GLuint a3;
} ARGS_Bool_Display___GENPT___GLXDrawable_GLuint;
typedef struct {
    int index;
    ARGS_Bool_Display___GENPT___GLXDrawable_GLuint args;
} PACKED_Bool_Display___GENPT___GLXDrawable_GLuint;
typedef void (*FUNC_void_Display___GENPT___GLXDrawable_GLXDrawable)(Display * dpy, GLXDrawable drawable, GLXDrawable member);
typedef struct {
    Display * a1;
    GLXDrawable a2;
    GLXDrawable a3;
} ARGS_void_Display___GENPT___GLXDrawable_GLXDrawable;
typedef struct {
    int index;
    ARGS_void_Display___GENPT___GLXDrawable_GLXDrawable args;
} PACKED_void_Display___GENPT___GLXDrawable_GLXDrawable;
typedef void (*FUNC_void_Display___GENPT___GLXVideoCaptureDeviceNV)(Display * dpy, GLXVideoCaptureDeviceNV device);
typedef struct {
    Display * a1;
    GLXVideoCaptureDeviceNV a2;
} ARGS_void_Display___GENPT___GLXVideoCaptureDeviceNV;
typedef struct {
    int index;
    ARGS_void_Display___GENPT___GLXVideoCaptureDeviceNV args;
} PACKED_void_Display___GENPT___GLXVideoCaptureDeviceNV;
typedef Bool (*FUNC_Bool_Display___GENPT___GLXDrawable_GLXDrawable_GLXContext)(Display * dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx);
typedef struct {
    Display * a1;
    GLXDrawable a2;
    GLXDrawable a3;
    GLXContext a4;
} ARGS_Bool_Display___GENPT___GLXDrawable_GLXDrawable_GLXContext;
typedef struct {
    int index;
    ARGS_Bool_Display___GENPT___GLXDrawable_GLXDrawable_GLXContext args;
} PACKED_Bool_Display___GENPT___GLXDrawable_GLXDrawable_GLXContext;
typedef int (*FUNC_int_Display___GENPT___int_int_int___GENPT___int___GENPT___int___GENPT___int___GENPT__)(Display * display, int screen, int channel, int * x, int * y, int * w, int * h);
typedef struct {
    Display * a1;
    int a2;
    int a3;
    int * a4;
    int * a5;
    int * a6;
    int * a7;
} ARGS_int_Display___GENPT___int_int_int___GENPT___int___GENPT___int___GENPT___int___GENPT__;
typedef struct {
    int index;
    ARGS_int_Display___GENPT___int_int_int___GENPT___int___GENPT___int___GENPT___int___GENPT__ args;
} PACKED_int_Display___GENPT___int_int_int___GENPT___int___GENPT___int___GENPT___int___GENPT__;
typedef int (*FUNC_int_Display___GENPT___GLXContext_int_int___GENPT__)(Display * dpy, GLXContext ctx, int attribute, int * value);
typedef struct {
    Display * a1;
    GLXContext a2;
    int a3;
    int * a4;
} ARGS_int_Display___GENPT___GLXContext_int_int___GENPT__;
typedef struct {
    int index;
    ARGS_int_Display___GENPT___GLXContext_int_int___GENPT__ args;
} PACKED_int_Display___GENPT___GLXContext_int_int___GENPT__;
typedef void (*FUNC_void_Display___GENPT___GLXDrawable_int_unsigned_int___GENPT__)(Display * dpy, GLXDrawable draw, int attribute, unsigned int * value);
typedef struct {
    Display * a1;
    GLXDrawable a2;
    int a3;
    unsigned int * a4;
} ARGS_void_Display___GENPT___GLXDrawable_int_unsigned_int___GENPT__;
typedef struct {
    int index;
    ARGS_void_Display___GENPT___GLXDrawable_int_unsigned_int___GENPT__ args;
} PACKED_void_Display___GENPT___GLXDrawable_int_unsigned_int___GENPT__;
typedef Bool (*FUNC_Bool_Display___GENPT___int_GLuint___GENPT__)(Display * dpy, int screen, GLuint * count);
typedef struct {
    Display * a1;
    int a2;
    GLuint * a3;
} ARGS_Bool_Display___GENPT___int_GLuint___GENPT__;
typedef struct {
    int index;
    ARGS_Bool_Display___GENPT___int_GLuint___GENPT__ args;
} PACKED_Bool_Display___GENPT___int_GLuint___GENPT__;
typedef int (*FUNC_int_Display___GENPT___GLXPbufferSGIX_int_unsigned_int___GENPT__)(Display * dpy, GLXPbufferSGIX pbuf, int attribute, unsigned int * value);
typedef struct {
    Display * a1;
    GLXPbufferSGIX a2;
    int a3;
    unsigned int * a4;
} ARGS_int_Display___GENPT___GLXPbufferSGIX_int_unsigned_int___GENPT__;
typedef struct {
    int index;
    ARGS_int_Display___GENPT___GLXPbufferSGIX_int_unsigned_int___GENPT__ args;
} PACKED_int_Display___GENPT___GLXPbufferSGIX_int_unsigned_int___GENPT__;
typedef int (*FUNC_int_Display___GENPT___int_int_int_void___GENPT___void___GENPT__)(Display * dpy, int timeSlice, int attrib, int size, void * attribList, void * returnAttribList);
typedef struct {
    Display * a1;
    int a2;
    int a3;
    int a4;
    void * a5;
    void * a6;
} ARGS_int_Display___GENPT___int_int_int_void___GENPT___void___GENPT__;
typedef struct {
    int index;
    ARGS_int_Display___GENPT___int_int_int_void___GENPT___void___GENPT__ args;
} PACKED_int_Display___GENPT___int_int_int_void___GENPT___void___GENPT__;
typedef Bool (*FUNC_Bool_Display___GENPT___int_int___GENPT__)(Display * dpy, int screen, int * max);
typedef struct {
    Display * a1;
    int a2;
    int * a3;
} ARGS_Bool_Display___GENPT___int_int___GENPT__;
typedef struct {
    int index;
    ARGS_Bool_Display___GENPT___int_int___GENPT__ args;
} PACKED_Bool_Display___GENPT___int_int___GENPT__;
typedef Bool (*FUNC_Bool_Display___GENPT___int_GLuint___GENPT___GLuint___GENPT__)(Display * dpy, int screen, GLuint * maxGroups, GLuint * maxBarriers);
typedef struct {
    Display * a1;
    int a2;
    GLuint * a3;
    GLuint * a4;
} ARGS_Bool_Display___GENPT___int_GLuint___GENPT___GLuint___GENPT__;
typedef struct {
    int index;
    ARGS_Bool_Display___GENPT___int_GLuint___GENPT___GLuint___GENPT__ args;
} PACKED_Bool_Display___GENPT___int_GLuint___GENPT___GLuint___GENPT__;
typedef Bool (*FUNC_Bool_Display___GENPT___GLXDrawable_GLuint___GENPT___GLuint___GENPT__)(Display * dpy, GLXDrawable drawable, GLuint * group, GLuint * barrier);
typedef struct {
    Display * a1;
    GLXDrawable a2;
    GLuint * a3;
    GLuint * a4;
} ARGS_Bool_Display___GENPT___GLXDrawable_GLuint___GENPT___GLuint___GENPT__;
typedef struct {
    int index;
    ARGS_Bool_Display___GENPT___GLXDrawable_GLuint___GENPT___GLuint___GENPT__ args;
} PACKED_Bool_Display___GENPT___GLXDrawable_GLuint___GENPT___GLuint___GENPT__;
typedef int (*FUNC_int_Display___GENPT___GLXVideoCaptureDeviceNV_int_int___GENPT__)(Display * dpy, GLXVideoCaptureDeviceNV device, int attribute, int * value);
typedef struct {
    Display * a1;
    GLXVideoCaptureDeviceNV a2;
    int a3;
    int * a4;
} ARGS_int_Display___GENPT___GLXVideoCaptureDeviceNV_int_int___GENPT__;
typedef struct {
    int index;
    ARGS_int_Display___GENPT___GLXVideoCaptureDeviceNV_int_int___GENPT__ args;
} PACKED_int_Display___GENPT___GLXVideoCaptureDeviceNV_int_int___GENPT__;
typedef int (*FUNC_int_Display___GENPT___int_GLXVideoDeviceNV)(Display * dpy, int screen, GLXVideoDeviceNV VideoDevice);
typedef struct {
    Display * a1;
    int a2;
    GLXVideoDeviceNV a3;
} ARGS_int_Display___GENPT___int_GLXVideoDeviceNV;
typedef struct {
    int index;
    ARGS_int_Display___GENPT___int_GLXVideoDeviceNV args;
} PACKED_int_Display___GENPT___int_GLXVideoDeviceNV;
typedef int (*FUNC_int_Display___GENPT___GLXPbuffer)(Display * dpy, GLXPbuffer pbuf);
typedef struct {
    Display * a1;
    GLXPbuffer a2;
} ARGS_int_Display___GENPT___GLXPbuffer;
typedef struct {
    int index;
    ARGS_int_Display___GENPT___GLXPbuffer args;
} PACKED_int_Display___GENPT___GLXPbuffer;
typedef Bool (*FUNC_Bool_Display___GENPT___int)(Display * dpy, int screen);
typedef struct {
    Display * a1;
    int a2;
} ARGS_Bool_Display___GENPT___int;
typedef struct {
    int index;
    ARGS_Bool_Display___GENPT___int args;
} PACKED_Bool_Display___GENPT___int;
typedef void (*FUNC_void_Display___GENPT___GLXDrawable_unsigned_long)(Display * dpy, GLXDrawable draw, unsigned long event_mask);
typedef struct {
    Display * a1;
    GLXDrawable a2;
    unsigned long a3;
} ARGS_void_Display___GENPT___GLXDrawable_unsigned_long;
typedef struct {
    int index;
    ARGS_void_Display___GENPT___GLXDrawable_unsigned_long args;
} PACKED_void_Display___GENPT___GLXDrawable_unsigned_long;
typedef int (*FUNC_int_Display___GENPT___GLXPbuffer_int_unsigned_long___GENPT___GLboolean)(Display * dpy, GLXPbuffer pbuf, int iBufferType, unsigned long * pulCounterPbuffer, GLboolean bBlock);
typedef struct {
    Display * a1;
    GLXPbuffer a2;
    int a3;
    unsigned long * a4;
    GLboolean a5;
} ARGS_int_Display___GENPT___GLXPbuffer_int_unsigned_long___GENPT___GLboolean;
typedef struct {
    int index;
    ARGS_int_Display___GENPT___GLXPbuffer_int_unsigned_long___GENPT___GLboolean args;
} PACKED_int_Display___GENPT___GLXPbuffer_int_unsigned_long___GENPT___GLboolean;
typedef Bool (*FUNC_Bool_int)(int mode);
typedef struct {
    int a1;
} ARGS_Bool_int;
typedef struct {
    int index;
    ARGS_Bool_int args;
} PACKED_Bool_int;
typedef int64_t (*FUNC_int64_t_Display___GENPT___GLXDrawable_int64_t_int64_t_int64_t)(Display * dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder);
typedef struct {
    Display * a1;
    GLXDrawable a2;
    int64_t a3;
    int64_t a4;
    int64_t a5;
} ARGS_int64_t_Display___GENPT___GLXDrawable_int64_t_int64_t_int64_t;
typedef struct {
    int index;
    ARGS_int64_t_Display___GENPT___GLXDrawable_int64_t_int64_t_int64_t args;
} PACKED_int64_t_Display___GENPT___GLXDrawable_int64_t_int64_t_int64_t;
typedef int (*FUNC_int_int)(int interval);
typedef struct {
    int a1;
} ARGS_int_int;
typedef struct {
    int index;
    ARGS_int_int args;
} PACKED_int_int;
typedef Bool (*FUNC_Bool_Display___GENPT___GLXDrawable_int64_t_int64_t_int64_t_int64_t___GENPT___int64_t___GENPT___int64_t___GENPT__)(Display * dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder, int64_t * ust, int64_t * msc, int64_t * sbc);
typedef struct {
    Display * a1;
    GLXDrawable a2;
    int64_t a3;
    int64_t a4;
    int64_t a5;
    int64_t * a6;
    int64_t * a7;
    int64_t * a8;
} ARGS_Bool_Display___GENPT___GLXDrawable_int64_t_int64_t_int64_t_int64_t___GENPT___int64_t___GENPT___int64_t___GENPT__;
typedef struct {
    int index;
    ARGS_Bool_Display___GENPT___GLXDrawable_int64_t_int64_t_int64_t_int64_t___GENPT___int64_t___GENPT___int64_t___GENPT__ args;
} PACKED_Bool_Display___GENPT___GLXDrawable_int64_t_int64_t_int64_t_int64_t___GENPT___int64_t___GENPT___int64_t___GENPT__;
typedef Bool (*FUNC_Bool_Display___GENPT___GLXDrawable_int64_t_int64_t___GENPT___int64_t___GENPT___int64_t___GENPT__)(Display * dpy, GLXDrawable drawable, int64_t target_sbc, int64_t * ust, int64_t * msc, int64_t * sbc);
typedef struct {
    Display * a1;
    GLXDrawable a2;
    int64_t a3;
    int64_t * a4;
    int64_t * a5;
    int64_t * a6;
} ARGS_Bool_Display___GENPT___GLXDrawable_int64_t_int64_t___GENPT___int64_t___GENPT___int64_t___GENPT__;
typedef struct {
    int index;
    ARGS_Bool_Display___GENPT___GLXDrawable_int64_t_int64_t___GENPT___int64_t___GENPT___int64_t___GENPT__ args;
} PACKED_Bool_Display___GENPT___GLXDrawable_int64_t_int64_t___GENPT___int64_t___GENPT___int64_t___GENPT__;
typedef int (*FUNC_int_int_int_unsigned_int___GENPT__)(int divisor, int remainder, unsigned int * count);
typedef struct {
    int a1;
    int a2;
    unsigned int * a3;
} ARGS_int_int_int_unsigned_int___GENPT__;
typedef struct {
    int index;
    ARGS_int_int_int_unsigned_int___GENPT__ args;
} PACKED_int_int_int_unsigned_int___GENPT__;
typedef void (*FUNC_void_GLenum_GLfloat)(GLenum op, GLfloat value);
typedef struct {
    GLenum a1;
    GLfloat a2;
} ARGS_void_GLenum_GLfloat;
typedef struct {
    int index;
    ARGS_void_GLenum_GLfloat args;
} PACKED_void_GLenum_GLfloat;
typedef void (*FUNC_void_GLenum_GLfixed)(GLenum op, GLfixed value);
typedef struct {
    GLenum a1;
    GLfixed a2;
} ARGS_void_GLenum_GLfixed;
typedef struct {
    int index;
    ARGS_void_GLenum_GLfixed args;
} PACKED_void_GLenum_GLfixed;
typedef void (*FUNC_void_GLuint)(GLuint program);
typedef struct {
    GLuint a1;
} ARGS_void_GLuint;
typedef struct {
    int index;
    ARGS_void_GLuint args;
} PACKED_void_GLuint;
typedef void (*FUNC_void_GLuint_GLuint)(GLuint pipeline, GLuint program);
typedef struct {
    GLuint a1;
    GLuint a2;
} ARGS_void_GLuint_GLuint;
typedef struct {
    int index;
    ARGS_void_GLuint_GLuint args;
} PACKED_void_GLuint_GLuint;
typedef void (*FUNC_void_GLenum)(GLenum face);
typedef struct {
    GLenum a1;
} ARGS_void_GLenum;
typedef struct {
    int index;
    ARGS_void_GLenum args;
} PACKED_void_GLenum;
typedef void (*FUNC_void_GLuint_const_GLchar___GENPT__)(GLuint program, const GLchar * name);
typedef struct {
    GLuint a1;
    GLchar * a2;
} ARGS_void_GLuint_const_GLchar___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_const_GLchar___GENPT__ args;
} PACKED_void_GLuint_const_GLchar___GENPT__;
typedef void (*FUNC_void_GLenum_GLuint_GLuint_GLuint_GLuint_GLuint)(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
typedef struct {
    GLenum a1;
    GLuint a2;
    GLuint a3;
    GLuint a4;
    GLuint a5;
    GLuint a6;
} ARGS_void_GLenum_GLuint_GLuint_GLuint_GLuint_GLuint;
typedef struct {
    int index;
    ARGS_void_GLenum_GLuint_GLuint_GLuint_GLuint_GLuint args;
} PACKED_void_GLenum_GLuint_GLuint_GLuint_GLuint_GLuint;
typedef void (*FUNC_void_GLenum_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint)(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
typedef struct {
    GLenum a1;
    GLuint a2;
    GLuint a3;
    GLuint a4;
    GLuint a5;
    GLuint a6;
    GLuint a7;
    GLuint a8;
    GLuint a9;
} ARGS_void_GLenum_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint;
typedef struct {
    int index;
    ARGS_void_GLenum_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint args;
} PACKED_void_GLenum_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint;
typedef void (*FUNC_void_GLenum_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint)(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
typedef struct {
    GLenum a1;
    GLuint a2;
    GLuint a3;
    GLuint a4;
    GLuint a5;
    GLuint a6;
    GLuint a7;
    GLuint a8;
    GLuint a9;
    GLuint a10;
    GLuint a11;
    GLuint a12;
} ARGS_void_GLenum_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint;
typedef struct {
    int index;
    ARGS_void_GLenum_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint args;
} PACKED_void_GLenum_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint;
typedef GLboolean (*FUNC_GLboolean_GLsizei_const_GLuint___GENPT___GLboolean___GENPT__)(GLsizei n, const GLuint * programs, GLboolean * residences);
typedef struct {
    GLsizei a1;
    GLuint * a2;
    GLboolean * a3;
} ARGS_GLboolean_GLsizei_const_GLuint___GENPT___GLboolean___GENPT__;
typedef struct {
    int index;
    ARGS_GLboolean_GLsizei_const_GLuint___GENPT___GLboolean___GENPT__ args;
} PACKED_GLboolean_GLsizei_const_GLuint___GENPT___GLboolean___GENPT__;
typedef void (*FUNC_void_GLint)(GLint i);
typedef struct {
    GLint a1;
} ARGS_void_GLint;
typedef struct {
    int index;
    ARGS_void_GLint args;
} PACKED_void_GLint;
typedef void (*FUNC_void_GLenum_GLint_GLenum_GLsizei_GLuint_GLuint)(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
typedef struct {
    GLenum a1;
    GLint a2;
    GLenum a3;
    GLsizei a4;
    GLuint a5;
    GLuint a6;
} ARGS_void_GLenum_GLint_GLenum_GLsizei_GLuint_GLuint;
typedef struct {
    int index;
    ARGS_void_GLenum_GLint_GLenum_GLsizei_GLuint_GLuint args;
} PACKED_void_GLenum_GLint_GLenum_GLsizei_GLuint_GLuint;
typedef void (*FUNC_void_GLhandleARB_GLhandleARB)(GLhandleARB containerObj, GLhandleARB obj);
typedef struct {
    GLhandleARB a1;
    GLhandleARB a2;
} ARGS_void_GLhandleARB_GLhandleARB;
typedef struct {
    int index;
    ARGS_void_GLhandleARB_GLhandleARB args;
} PACKED_void_GLhandleARB_GLhandleARB;
typedef void (*FUNC_void_GLuint_GLenum)(GLuint id, GLenum mode);
typedef struct {
    GLuint a1;
    GLenum a2;
} ARGS_void_GLuint_GLenum;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum args;
} PACKED_void_GLuint_GLenum;
typedef void (*FUNC_void_GLenum_GLuint)(GLenum target, GLuint id);
typedef struct {
    GLenum a1;
    GLuint a2;
} ARGS_void_GLenum_GLuint;
typedef struct {
    int index;
    ARGS_void_GLenum_GLuint args;
} PACKED_void_GLenum_GLuint;
typedef void (*FUNC_void_GLenum_GLuint_GLuint)(GLenum target, GLuint index, GLuint id);
typedef struct {
    GLenum a1;
    GLuint a2;
    GLuint a3;
} ARGS_void_GLenum_GLuint_GLuint;
typedef struct {
    int index;
    ARGS_void_GLenum_GLuint_GLuint args;
} PACKED_void_GLenum_GLuint_GLuint;
typedef void (*FUNC_void_GLuint_GLuint_const_GLchar___GENPT__)(GLuint program, GLuint index, const GLchar * name);
typedef struct {
    GLuint a1;
    GLuint a2;
    GLchar * a3;
} ARGS_void_GLuint_GLuint_const_GLchar___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLuint_const_GLchar___GENPT__ args;
} PACKED_void_GLuint_GLuint_const_GLchar___GENPT__;
typedef void (*FUNC_void_GLhandleARB_GLuint_const_GLcharARB___GENPT__)(GLhandleARB programObj, GLuint index, const GLcharARB * name);
typedef struct {
    GLhandleARB a1;
    GLuint a2;
    GLcharARB * a3;
} ARGS_void_GLhandleARB_GLuint_const_GLcharARB___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLhandleARB_GLuint_const_GLcharARB___GENPT__ args;
} PACKED_void_GLhandleARB_GLuint_const_GLcharARB___GENPT__;
typedef void (*FUNC_void_GLenum_GLuint_GLuint_GLintptr)(GLenum target, GLuint index, GLuint buffer, GLintptr offset);
typedef struct {
    GLenum a1;
    GLuint a2;
    GLuint a3;
    GLintptr a4;
} ARGS_void_GLenum_GLuint_GLuint_GLintptr;
typedef struct {
    int index;
    ARGS_void_GLenum_GLuint_GLuint_GLintptr args;
} PACKED_void_GLenum_GLuint_GLuint_GLintptr;
typedef void (*FUNC_void_GLenum_GLuint_GLuint_GLintptr_GLsizeiptr)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef struct {
    GLenum a1;
    GLuint a2;
    GLuint a3;
    GLintptr a4;
    GLsizeiptr a5;
} ARGS_void_GLenum_GLuint_GLuint_GLintptr_GLsizeiptr;
typedef struct {
    int index;
    ARGS_void_GLenum_GLuint_GLuint_GLintptr_GLsizeiptr args;
} PACKED_void_GLenum_GLuint_GLuint_GLintptr_GLsizeiptr;
typedef void (*FUNC_void_GLuint_GLuint_GLuint_const_GLchar___GENPT__)(GLuint program, GLuint colorNumber, GLuint index, const GLchar * name);
typedef struct {
    GLuint a1;
    GLuint a2;
    GLuint a3;
    GLchar * a4;
} ARGS_void_GLuint_GLuint_GLuint_const_GLchar___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLuint_GLuint_const_GLchar___GENPT__ args;
} PACKED_void_GLuint_GLuint_GLuint_const_GLchar___GENPT__;
typedef void (*FUNC_void_GLuint_GLuint_GLint_GLboolean_GLint_GLenum_GLenum)(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
typedef struct {
    GLuint a1;
    GLuint a2;
    GLint a3;
    GLboolean a4;
    GLint a5;
    GLenum a6;
    GLenum a7;
} ARGS_void_GLuint_GLuint_GLint_GLboolean_GLint_GLenum_GLenum;
typedef struct {
    int index;
    ARGS_void_GLuint_GLuint_GLint_GLboolean_GLint_GLenum_GLenum args;
} PACKED_void_GLuint_GLuint_GLint_GLboolean_GLint_GLenum_GLenum;
typedef void (*FUNC_void_GLuint_GLuint_GLint_GLboolean_GLint_GLenum_GLint)(GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format);
typedef struct {
    GLuint a1;
    GLuint a2;
    GLint a3;
    GLboolean a4;
    GLint a5;
    GLenum a6;
    GLint a7;
} ARGS_void_GLuint_GLuint_GLint_GLboolean_GLint_GLenum_GLint;
typedef struct {
    int index;
    ARGS_void_GLuint_GLuint_GLint_GLboolean_GLint_GLenum_GLint args;
} PACKED_void_GLuint_GLuint_GLint_GLboolean_GLint_GLenum_GLint;
typedef GLuint (*FUNC_GLuint_GLenum_GLenum)(GLenum light, GLenum value);
typedef struct {
    GLenum a1;
    GLenum a2;
} ARGS_GLuint_GLenum_GLenum;
typedef struct {
    int index;
    ARGS_GLuint_GLenum_GLenum args;
} PACKED_GLuint_GLenum_GLenum;
typedef void (*FUNC_void_GLenum_GLenum_GLuint)(GLenum texunit, GLenum target, GLuint texture);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLuint a3;
} ARGS_void_GLenum_GLenum_GLuint;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLuint args;
} PACKED_void_GLenum_GLenum_GLuint;
typedef GLuint (*FUNC_GLuint_GLenum)(GLenum value);
typedef struct {
    GLenum a1;
} ARGS_GLuint_GLenum;
typedef struct {
    int index;
    ARGS_GLuint_GLenum args;
} PACKED_GLuint_GLenum;
typedef GLuint (*FUNC_GLuint_GLenum_GLenum_GLenum)(GLenum unit, GLenum coord, GLenum value);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLenum a3;
} ARGS_GLuint_GLenum_GLenum_GLenum;
typedef struct {
    int index;
    ARGS_GLuint_GLenum_GLenum_GLenum args;
} PACKED_GLuint_GLenum_GLenum_GLenum;
typedef void (*FUNC_void_GLuint_GLuint_GLintptr_GLsizei)(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
typedef struct {
    GLuint a1;
    GLuint a2;
    GLintptr a3;
    GLsizei a4;
} ARGS_void_GLuint_GLuint_GLintptr_GLsizei;
typedef struct {
    int index;
    ARGS_void_GLuint_GLuint_GLintptr_GLsizei args;
} PACKED_void_GLuint_GLuint_GLintptr_GLsizei;
typedef void (*FUNC_void_GLuint_GLuint_GLenum_GLintptrARB)(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset);
typedef struct {
    GLuint a1;
    GLuint a2;
    GLenum a3;
    GLintptrARB a4;
} ARGS_void_GLuint_GLuint_GLenum_GLintptrARB;
typedef struct {
    int index;
    ARGS_void_GLuint_GLuint_GLenum_GLintptrARB args;
} PACKED_void_GLuint_GLuint_GLenum_GLintptrARB;
typedef void (*FUNC_void_GLuint_GLuint_GLenum_GLenum_GLuint)(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture);
typedef struct {
    GLuint a1;
    GLuint a2;
    GLenum a3;
    GLenum a4;
    GLuint a5;
} ARGS_void_GLuint_GLuint_GLenum_GLenum_GLuint;
typedef struct {
    int index;
    ARGS_void_GLuint_GLuint_GLenum_GLenum_GLuint args;
} PACKED_void_GLuint_GLuint_GLenum_GLenum_GLuint;
typedef void (*FUNC_void_GLbyte_GLbyte_GLbyte)(GLbyte bx, GLbyte by, GLbyte bz);
typedef struct {
    GLbyte a1;
    GLbyte a2;
    GLbyte a3;
} ARGS_void_GLbyte_GLbyte_GLbyte;
typedef struct {
    int index;
    ARGS_void_GLbyte_GLbyte_GLbyte args;
} PACKED_void_GLbyte_GLbyte_GLbyte;
typedef void (*FUNC_void_const_GLbyte___GENPT__)(const GLbyte * v);
typedef struct {
    GLbyte * a1;
} ARGS_void_const_GLbyte___GENPT__;
typedef struct {
    int index;
    ARGS_void_const_GLbyte___GENPT__ args;
} PACKED_void_const_GLbyte___GENPT__;
typedef void (*FUNC_void_GLdouble_GLdouble_GLdouble)(GLdouble bx, GLdouble by, GLdouble bz);
typedef struct {
    GLdouble a1 __attribute__ ((aligned(8)));
    GLdouble a2 __attribute__ ((aligned(8)));
    GLdouble a3 __attribute__ ((aligned(8)));
} ARGS_void_GLdouble_GLdouble_GLdouble;
typedef struct {
    int index;
    ARGS_void_GLdouble_GLdouble_GLdouble args;
} PACKED_void_GLdouble_GLdouble_GLdouble;
typedef void (*FUNC_void_const_GLdouble___GENPT__)(const GLdouble * v);
typedef struct {
    GLdouble * a1;
} ARGS_void_const_GLdouble___GENPT__;
typedef struct {
    int index;
    ARGS_void_const_GLdouble___GENPT__ args;
} PACKED_void_const_GLdouble___GENPT__;
typedef void (*FUNC_void_GLfloat_GLfloat_GLfloat)(GLfloat bx, GLfloat by, GLfloat bz);
typedef struct {
    GLfloat a1;
    GLfloat a2;
    GLfloat a3;
} ARGS_void_GLfloat_GLfloat_GLfloat;
typedef struct {
    int index;
    ARGS_void_GLfloat_GLfloat_GLfloat args;
} PACKED_void_GLfloat_GLfloat_GLfloat;
typedef void (*FUNC_void_const_GLfloat___GENPT__)(const GLfloat * v);
typedef struct {
    GLfloat * a1;
} ARGS_void_const_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_const_GLfloat___GENPT__ args;
} PACKED_void_const_GLfloat___GENPT__;
typedef void (*FUNC_void_GLint_GLint_GLint)(GLint bx, GLint by, GLint bz);
typedef struct {
    GLint a1;
    GLint a2;
    GLint a3;
} ARGS_void_GLint_GLint_GLint;
typedef struct {
    int index;
    ARGS_void_GLint_GLint_GLint args;
} PACKED_void_GLint_GLint_GLint;
typedef void (*FUNC_void_const_GLint___GENPT__)(const GLint * v);
typedef struct {
    GLint * a1;
} ARGS_void_const_GLint___GENPT__;
typedef struct {
    int index;
    ARGS_void_const_GLint___GENPT__ args;
} PACKED_void_const_GLint___GENPT__;
typedef void (*FUNC_void_GLshort_GLshort_GLshort)(GLshort bx, GLshort by, GLshort bz);
typedef struct {
    GLshort a1;
    GLshort a2;
    GLshort a3;
} ARGS_void_GLshort_GLshort_GLshort;
typedef struct {
    int index;
    ARGS_void_GLshort_GLshort_GLshort args;
} PACKED_void_GLshort_GLshort_GLshort;
typedef void (*FUNC_void_const_GLshort___GENPT__)(const GLshort * v);
typedef struct {
    GLshort * a1;
} ARGS_void_const_GLshort___GENPT__;
typedef struct {
    int index;
    ARGS_void_const_GLshort___GENPT__ args;
} PACKED_void_const_GLshort___GENPT__;
typedef void (*FUNC_void_GLenum_GLsizei_const_GLvoid___GENPT__)(GLenum type, GLsizei stride, const GLvoid * pointer);
typedef struct {
    GLenum a1;
    GLsizei a2;
    GLvoid * a3;
} ARGS_void_GLenum_GLsizei_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLsizei_const_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLsizei_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLsizei_GLsizei_GLfloat_GLfloat_GLfloat_GLfloat_const_GLubyte___GENPT__)(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte * bitmap);
typedef struct {
    GLsizei a1;
    GLsizei a2;
    GLfloat a3;
    GLfloat a4;
    GLfloat a5;
    GLfloat a6;
    GLubyte * a7;
} ARGS_void_GLsizei_GLsizei_GLfloat_GLfloat_GLfloat_GLfloat_const_GLubyte___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLsizei_GLsizei_GLfloat_GLfloat_GLfloat_GLfloat_const_GLubyte___GENPT__ args;
} PACKED_void_GLsizei_GLsizei_GLfloat_GLfloat_GLfloat_GLfloat_const_GLubyte___GENPT__;
typedef void (*FUNC_void_GLsizei_GLsizei_GLfixed_GLfixed_GLfixed_GLfixed_const_GLubyte___GENPT__)(GLsizei width, GLsizei height, GLfixed xorig, GLfixed yorig, GLfixed xmove, GLfixed ymove, const GLubyte * bitmap);
typedef struct {
    GLsizei a1;
    GLsizei a2;
    GLfixed a3;
    GLfixed a4;
    GLfixed a5;
    GLfixed a6;
    GLubyte * a7;
} ARGS_void_GLsizei_GLsizei_GLfixed_GLfixed_GLfixed_GLfixed_const_GLubyte___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLsizei_GLsizei_GLfixed_GLfixed_GLfixed_GLfixed_const_GLubyte___GENPT__ args;
} PACKED_void_GLsizei_GLsizei_GLfixed_GLfixed_GLfixed_GLfixed_const_GLubyte___GENPT__;
typedef void (*FUNC_void_GLfloat_GLfloat_GLfloat_GLfloat)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef struct {
    GLfloat a1;
    GLfloat a2;
    GLfloat a3;
    GLfloat a4;
} ARGS_void_GLfloat_GLfloat_GLfloat_GLfloat;
typedef struct {
    int index;
    ARGS_void_GLfloat_GLfloat_GLfloat_GLfloat args;
} PACKED_void_GLfloat_GLfloat_GLfloat_GLfloat;
typedef void (*FUNC_void_GLfixed_GLfixed_GLfixed_GLfixed)(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
typedef struct {
    GLfixed a1;
    GLfixed a2;
    GLfixed a3;
    GLfixed a4;
} ARGS_void_GLfixed_GLfixed_GLfixed_GLfixed;
typedef struct {
    int index;
    ARGS_void_GLfixed_GLfixed_GLfixed_GLfixed args;
} PACKED_void_GLfixed_GLfixed_GLfixed_GLfixed;
typedef void (*FUNC_void_GLenum_GLenum)(GLenum modeRGB, GLenum modeAlpha);
typedef struct {
    GLenum a1;
    GLenum a2;
} ARGS_void_GLenum_GLenum;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum args;
} PACKED_void_GLenum_GLenum;
typedef void (*FUNC_void_GLuint_GLenum_GLenum)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLenum a3;
} ARGS_void_GLuint_GLenum_GLenum;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLenum args;
} PACKED_void_GLuint_GLenum_GLenum;
typedef void (*FUNC_void_GLenum_GLenum_GLenum_GLenum)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLenum a3;
    GLenum a4;
} ARGS_void_GLenum_GLenum_GLenum_GLenum;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLenum_GLenum args;
} PACKED_void_GLenum_GLenum_GLenum_GLenum;
typedef void (*FUNC_void_GLuint_GLenum_GLenum_GLenum_GLenum)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLenum a3;
    GLenum a4;
    GLenum a5;
} ARGS_void_GLuint_GLenum_GLenum_GLenum_GLenum;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLenum_GLenum_GLenum args;
} PACKED_void_GLuint_GLenum_GLenum_GLenum_GLenum;
typedef void (*FUNC_void_GLint_GLint_GLint_GLint_GLint_GLint_GLint_GLint_GLbitfield_GLenum)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef struct {
    GLint a1;
    GLint a2;
    GLint a3;
    GLint a4;
    GLint a5;
    GLint a6;
    GLint a7;
    GLint a8;
    GLbitfield a9;
    GLenum a10;
} ARGS_void_GLint_GLint_GLint_GLint_GLint_GLint_GLint_GLint_GLbitfield_GLenum;
typedef struct {
    int index;
    ARGS_void_GLint_GLint_GLint_GLint_GLint_GLint_GLint_GLint_GLbitfield_GLenum args;
} PACKED_void_GLint_GLint_GLint_GLint_GLint_GLint_GLint_GLint_GLbitfield_GLenum;
typedef void (*FUNC_void_GLenum_GLuint_GLuint64EXT_GLsizeiptr)(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length);
typedef struct {
    GLenum a1;
    GLuint a2;
    GLuint64EXT a3;
    GLsizeiptr a4;
} ARGS_void_GLenum_GLuint_GLuint64EXT_GLsizeiptr;
typedef struct {
    int index;
    ARGS_void_GLenum_GLuint_GLuint64EXT_GLsizeiptr args;
} PACKED_void_GLenum_GLuint_GLuint64EXT_GLsizeiptr;
typedef void (*FUNC_void_GLenum_GLsizeiptr_const_GLvoid___GENPT___GLenum)(GLenum target, GLsizeiptr size, const GLvoid * data, GLenum usage);
typedef struct {
    GLenum a1;
    GLsizeiptr a2;
    GLvoid * a3;
    GLenum a4;
} ARGS_void_GLenum_GLsizeiptr_const_GLvoid___GENPT___GLenum;
typedef struct {
    int index;
    ARGS_void_GLenum_GLsizeiptr_const_GLvoid___GENPT___GLenum args;
} PACKED_void_GLenum_GLsizeiptr_const_GLvoid___GENPT___GLenum;
typedef void (*FUNC_void_GLenum_GLsizeiptrARB_const_GLvoid___GENPT___GLenum)(GLenum target, GLsizeiptrARB size, const GLvoid * data, GLenum usage);
typedef struct {
    GLenum a1;
    GLsizeiptrARB a2;
    GLvoid * a3;
    GLenum a4;
} ARGS_void_GLenum_GLsizeiptrARB_const_GLvoid___GENPT___GLenum;
typedef struct {
    int index;
    ARGS_void_GLenum_GLsizeiptrARB_const_GLvoid___GENPT___GLenum args;
} PACKED_void_GLenum_GLsizeiptrARB_const_GLvoid___GENPT___GLenum;
typedef void (*FUNC_void_GLenum_GLenum_GLint)(GLenum target, GLenum pname, GLint param);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLint a3;
} ARGS_void_GLenum_GLenum_GLint;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLint args;
} PACKED_void_GLenum_GLenum_GLint;
typedef void (*FUNC_void_GLenum_GLintptr_GLsizeiptr_const_GLvoid___GENPT__)(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid * data);
typedef struct {
    GLenum a1;
    GLintptr a2;
    GLsizeiptr a3;
    GLvoid * a4;
} ARGS_void_GLenum_GLintptr_GLsizeiptr_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLintptr_GLsizeiptr_const_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLintptr_GLsizeiptr_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLenum_GLintptrARB_GLsizeiptrARB_const_GLvoid___GENPT__)(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid * data);
typedef struct {
    GLenum a1;
    GLintptrARB a2;
    GLsizeiptrARB a3;
    GLvoid * a4;
} ARGS_void_GLenum_GLintptrARB_GLsizeiptrARB_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLintptrARB_GLsizeiptrARB_const_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLintptrARB_GLsizeiptrARB_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLsizei_GLenum_const_GLvoid___GENPT__)(GLsizei n, GLenum type, const GLvoid * lists);
typedef struct {
    GLsizei a1;
    GLenum a2;
    GLvoid * a3;
} ARGS_void_GLsizei_GLenum_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLsizei_GLenum_const_GLvoid___GENPT__ args;
} PACKED_void_GLsizei_GLenum_const_GLvoid___GENPT__;
typedef GLenum (*FUNC_GLenum_GLenum)(GLenum target);
typedef struct {
    GLenum a1;
} ARGS_GLenum_GLenum;
typedef struct {
    int index;
    ARGS_GLenum_GLenum args;
} PACKED_GLenum_GLenum;
typedef GLenum (*FUNC_GLenum_GLuint_GLenum)(GLuint framebuffer, GLenum target);
typedef struct {
    GLuint a1;
    GLenum a2;
} ARGS_GLenum_GLuint_GLenum;
typedef struct {
    int index;
    ARGS_GLenum_GLuint_GLenum args;
} PACKED_GLenum_GLuint_GLenum;
typedef void (*FUNC_void_GLbitfield)(GLbitfield mask);
typedef struct {
    GLbitfield a1;
} ARGS_void_GLbitfield;
typedef struct {
    int index;
    ARGS_void_GLbitfield args;
} PACKED_void_GLbitfield;
typedef void (*FUNC_void_GLenum_GLenum_GLenum_GLenum_const_void___GENPT__)(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void * data);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLenum a3;
    GLenum a4;
    void * a5;
} ARGS_void_GLenum_GLenum_GLenum_GLenum_const_void___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLenum_GLenum_const_void___GENPT__ args;
} PACKED_void_GLenum_GLenum_GLenum_GLenum_const_void___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLintptr_GLsizeiptr_GLenum_GLenum_const_void___GENPT__)(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLintptr a3;
    GLsizeiptr a4;
    GLenum a5;
    GLenum a6;
    void * a7;
} ARGS_void_GLenum_GLenum_GLintptr_GLsizeiptr_GLenum_GLenum_const_void___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLintptr_GLsizeiptr_GLenum_GLenum_const_void___GENPT__ args;
} PACKED_void_GLenum_GLenum_GLintptr_GLsizeiptr_GLenum_GLenum_const_void___GENPT__;
typedef void (*FUNC_void_GLenum_GLint_GLfloat_GLint)(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
typedef struct {
    GLenum a1;
    GLint a2;
    GLfloat a3;
    GLint a4;
} ARGS_void_GLenum_GLint_GLfloat_GLint;
typedef struct {
    int index;
    ARGS_void_GLenum_GLint_GLfloat_GLint args;
} PACKED_void_GLenum_GLint_GLfloat_GLint;
typedef void (*FUNC_void_GLenum_GLint_const_GLfloat___GENPT__)(GLenum buffer, GLint drawbuffer, const GLfloat * value);
typedef struct {
    GLenum a1;
    GLint a2;
    GLfloat * a3;
} ARGS_void_GLenum_GLint_const_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLint_const_GLfloat___GENPT__ args;
} PACKED_void_GLenum_GLint_const_GLfloat___GENPT__;
typedef void (*FUNC_void_GLenum_GLint_const_GLint___GENPT__)(GLenum buffer, GLint drawbuffer, const GLint * value);
typedef struct {
    GLenum a1;
    GLint a2;
    GLint * a3;
} ARGS_void_GLenum_GLint_const_GLint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLint_const_GLint___GENPT__ args;
} PACKED_void_GLenum_GLint_const_GLint___GENPT__;
typedef void (*FUNC_void_GLenum_GLint_const_GLuint___GENPT__)(GLenum buffer, GLint drawbuffer, const GLuint * value);
typedef struct {
    GLenum a1;
    GLint a2;
    GLuint * a3;
} ARGS_void_GLenum_GLint_const_GLuint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLint_const_GLuint___GENPT__ args;
} PACKED_void_GLenum_GLint_const_GLuint___GENPT__;
typedef void (*FUNC_void_GLint_GLint_GLint_GLint)(GLint red, GLint green, GLint blue, GLint alpha);
typedef struct {
    GLint a1;
    GLint a2;
    GLint a3;
    GLint a4;
} ARGS_void_GLint_GLint_GLint_GLint;
typedef struct {
    int index;
    ARGS_void_GLint_GLint_GLint_GLint args;
} PACKED_void_GLint_GLint_GLint_GLint;
typedef void (*FUNC_void_GLuint_GLuint_GLuint_GLuint)(GLuint red, GLuint green, GLuint blue, GLuint alpha);
typedef struct {
    GLuint a1;
    GLuint a2;
    GLuint a3;
    GLuint a4;
} ARGS_void_GLuint_GLuint_GLuint_GLuint;
typedef struct {
    int index;
    ARGS_void_GLuint_GLuint_GLuint_GLuint args;
} PACKED_void_GLuint_GLuint_GLuint_GLuint;
typedef void (*FUNC_void_GLdouble)(GLdouble depth);
typedef struct {
    GLdouble a1 __attribute__ ((aligned(8)));
} ARGS_void_GLdouble;
typedef struct {
    int index;
    ARGS_void_GLdouble args;
} PACKED_void_GLdouble;
typedef void (*FUNC_void_GLfloat)(GLfloat d);
typedef struct {
    GLfloat a1;
} ARGS_void_GLfloat;
typedef struct {
    int index;
    ARGS_void_GLfloat args;
} PACKED_void_GLfloat;
typedef void (*FUNC_void_GLclampf)(GLclampf depth);
typedef struct {
    GLclampf a1;
} ARGS_void_GLclampf;
typedef struct {
    int index;
    ARGS_void_GLclampf args;
} PACKED_void_GLclampf;
typedef void (*FUNC_void_GLfixed)(GLfixed depth);
typedef struct {
    GLfixed a1;
} ARGS_void_GLfixed;
typedef struct {
    int index;
    ARGS_void_GLfixed args;
} PACKED_void_GLfixed;
typedef void (*FUNC_void_GLuint_GLenum_GLenum_GLenum_const_void___GENPT__)(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void * data);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLenum a3;
    GLenum a4;
    void * a5;
} ARGS_void_GLuint_GLenum_GLenum_GLenum_const_void___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLenum_GLenum_const_void___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLenum_GLenum_const_void___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_GLenum_GLenum_GLsizeiptr_GLsizeiptr_const_void___GENPT__)(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, GLsizeiptr offset, GLsizeiptr size, const void * data);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLenum a3;
    GLenum a4;
    GLsizeiptr a5;
    GLsizeiptr a6;
    void * a7;
} ARGS_void_GLuint_GLenum_GLenum_GLenum_GLsizeiptr_GLsizeiptr_const_void___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLenum_GLenum_GLsizeiptr_GLsizeiptr_const_void___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLenum_GLenum_GLsizeiptr_GLsizeiptr_const_void___GENPT__;
typedef GLenum (*FUNC_GLenum_GLsync_GLbitfield_GLuint64)(GLsync sync, GLbitfield flags, GLuint64 timeout);
typedef struct {
    GLsync a1;
    GLbitfield a2;
    GLuint64 a3;
} ARGS_GLenum_GLsync_GLbitfield_GLuint64;
typedef struct {
    int index;
    ARGS_GLenum_GLsync_GLbitfield_GLuint64 args;
} PACKED_GLenum_GLsync_GLbitfield_GLuint64;
typedef void (*FUNC_void_GLenum_const_GLdouble___GENPT__)(GLenum plane, const GLdouble * equation);
typedef struct {
    GLenum a1;
    GLdouble * a2;
} ARGS_void_GLenum_const_GLdouble___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_const_GLdouble___GENPT__ args;
} PACKED_void_GLenum_const_GLdouble___GENPT__;
typedef void (*FUNC_void_GLenum_const_GLfloat___GENPT__)(GLenum plane, const GLfloat * equation);
typedef struct {
    GLenum a1;
    GLfloat * a2;
} ARGS_void_GLenum_const_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_const_GLfloat___GENPT__ args;
} PACKED_void_GLenum_const_GLfloat___GENPT__;
typedef void (*FUNC_void_GLenum_const_GLfixed___GENPT__)(GLenum plane, const GLfixed * equation);
typedef struct {
    GLenum a1;
    GLfixed * a2;
} ARGS_void_GLenum_const_GLfixed___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_const_GLfixed___GENPT__ args;
} PACKED_void_GLenum_const_GLfixed___GENPT__;
typedef void (*FUNC_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat)(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
typedef struct {
    GLfloat a1;
    GLfloat a2;
    GLfloat a3;
    GLfloat a4;
    GLfloat a5;
    GLfloat a6;
} ARGS_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat;
typedef struct {
    int index;
    ARGS_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat args;
} PACKED_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat;
typedef void (*FUNC_void_const_GLfloat___GENPT___const_GLfloat___GENPT__)(const GLfloat * c, const GLfloat * v);
typedef struct {
    GLfloat * a1;
    GLfloat * a2;
} ARGS_void_const_GLfloat___GENPT___const_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_const_GLfloat___GENPT___const_GLfloat___GENPT__ args;
} PACKED_void_const_GLfloat___GENPT___const_GLfloat___GENPT__;
typedef void (*FUNC_void_GLhalfNV_GLhalfNV_GLhalfNV)(GLhalfNV red, GLhalfNV green, GLhalfNV blue);
typedef struct {
    GLhalfNV a1;
    GLhalfNV a2;
    GLhalfNV a3;
} ARGS_void_GLhalfNV_GLhalfNV_GLhalfNV;
typedef struct {
    int index;
    ARGS_void_GLhalfNV_GLhalfNV_GLhalfNV args;
} PACKED_void_GLhalfNV_GLhalfNV_GLhalfNV;
typedef void (*FUNC_void_const_GLhalfNV___GENPT__)(const GLhalfNV * v);
typedef struct {
    GLhalfNV * a1;
} ARGS_void_const_GLhalfNV___GENPT__;
typedef struct {
    int index;
    ARGS_void_const_GLhalfNV___GENPT__ args;
} PACKED_void_const_GLhalfNV___GENPT__;
typedef void (*FUNC_void_GLubyte_GLubyte_GLubyte)(GLubyte red, GLubyte green, GLubyte blue);
typedef struct {
    GLubyte a1;
    GLubyte a2;
    GLubyte a3;
} ARGS_void_GLubyte_GLubyte_GLubyte;
typedef struct {
    int index;
    ARGS_void_GLubyte_GLubyte_GLubyte args;
} PACKED_void_GLubyte_GLubyte_GLubyte;
typedef void (*FUNC_void_const_GLubyte___GENPT__)(const GLubyte * v);
typedef struct {
    GLubyte * a1;
} ARGS_void_const_GLubyte___GENPT__;
typedef struct {
    int index;
    ARGS_void_const_GLubyte___GENPT__ args;
} PACKED_void_const_GLubyte___GENPT__;
typedef void (*FUNC_void_GLuint_GLuint_GLuint)(GLuint red, GLuint green, GLuint blue);
typedef struct {
    GLuint a1;
    GLuint a2;
    GLuint a3;
} ARGS_void_GLuint_GLuint_GLuint;
typedef struct {
    int index;
    ARGS_void_GLuint_GLuint_GLuint args;
} PACKED_void_GLuint_GLuint_GLuint;
typedef void (*FUNC_void_const_GLuint___GENPT__)(const GLuint * v);
typedef struct {
    GLuint * a1;
} ARGS_void_const_GLuint___GENPT__;
typedef struct {
    int index;
    ARGS_void_const_GLuint___GENPT__ args;
} PACKED_void_const_GLuint___GENPT__;
typedef void (*FUNC_void_GLushort_GLushort_GLushort)(GLushort red, GLushort green, GLushort blue);
typedef struct {
    GLushort a1;
    GLushort a2;
    GLushort a3;
} ARGS_void_GLushort_GLushort_GLushort;
typedef struct {
    int index;
    ARGS_void_GLushort_GLushort_GLushort args;
} PACKED_void_GLushort_GLushort_GLushort;
typedef void (*FUNC_void_const_GLushort___GENPT__)(const GLushort * v);
typedef struct {
    GLushort * a1;
} ARGS_void_const_GLushort___GENPT__;
typedef struct {
    int index;
    ARGS_void_const_GLushort___GENPT__ args;
} PACKED_void_const_GLushort___GENPT__;
typedef void (*FUNC_void_GLfixed_GLfixed_GLfixed)(GLfixed red, GLfixed green, GLfixed blue);
typedef struct {
    GLfixed a1;
    GLfixed a2;
    GLfixed a3;
} ARGS_void_GLfixed_GLfixed_GLfixed;
typedef struct {
    int index;
    ARGS_void_GLfixed_GLfixed_GLfixed args;
} PACKED_void_GLfixed_GLfixed_GLfixed;
typedef void (*FUNC_void_const_GLfixed___GENPT__)(const GLfixed * components);
typedef struct {
    GLfixed * a1;
} ARGS_void_const_GLfixed___GENPT__;
typedef struct {
    int index;
    ARGS_void_const_GLfixed___GENPT__ args;
} PACKED_void_const_GLfixed___GENPT__;
typedef void (*FUNC_void_GLbyte_GLbyte_GLbyte_GLbyte)(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
typedef struct {
    GLbyte a1;
    GLbyte a2;
    GLbyte a3;
    GLbyte a4;
} ARGS_void_GLbyte_GLbyte_GLbyte_GLbyte;
typedef struct {
    int index;
    ARGS_void_GLbyte_GLbyte_GLbyte_GLbyte args;
} PACKED_void_GLbyte_GLbyte_GLbyte_GLbyte;
typedef void (*FUNC_void_GLdouble_GLdouble_GLdouble_GLdouble)(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
typedef struct {
    GLdouble a1 __attribute__ ((aligned(8)));
    GLdouble a2 __attribute__ ((aligned(8)));
    GLdouble a3 __attribute__ ((aligned(8)));
    GLdouble a4 __attribute__ ((aligned(8)));
} ARGS_void_GLdouble_GLdouble_GLdouble_GLdouble;
typedef struct {
    int index;
    ARGS_void_GLdouble_GLdouble_GLdouble_GLdouble args;
} PACKED_void_GLdouble_GLdouble_GLdouble_GLdouble;
typedef void (*FUNC_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat)(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef struct {
    GLfloat a1;
    GLfloat a2;
    GLfloat a3;
    GLfloat a4;
    GLfloat a5;
    GLfloat a6;
    GLfloat a7;
    GLfloat a8;
    GLfloat a9;
    GLfloat a10;
} ARGS_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat;
typedef struct {
    int index;
    ARGS_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat args;
} PACKED_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat;
typedef void (*FUNC_void_const_GLfloat___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT__)(const GLfloat * c, const GLfloat * n, const GLfloat * v);
typedef struct {
    GLfloat * a1;
    GLfloat * a2;
    GLfloat * a3;
} ARGS_void_const_GLfloat___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_const_GLfloat___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT__ args;
} PACKED_void_const_GLfloat___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT__;
typedef void (*FUNC_void_GLhalfNV_GLhalfNV_GLhalfNV_GLhalfNV)(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha);
typedef struct {
    GLhalfNV a1;
    GLhalfNV a2;
    GLhalfNV a3;
    GLhalfNV a4;
} ARGS_void_GLhalfNV_GLhalfNV_GLhalfNV_GLhalfNV;
typedef struct {
    int index;
    ARGS_void_GLhalfNV_GLhalfNV_GLhalfNV_GLhalfNV args;
} PACKED_void_GLhalfNV_GLhalfNV_GLhalfNV_GLhalfNV;
typedef void (*FUNC_void_GLshort_GLshort_GLshort_GLshort)(GLshort red, GLshort green, GLshort blue, GLshort alpha);
typedef struct {
    GLshort a1;
    GLshort a2;
    GLshort a3;
    GLshort a4;
} ARGS_void_GLshort_GLshort_GLshort_GLshort;
typedef struct {
    int index;
    ARGS_void_GLshort_GLshort_GLshort_GLshort args;
} PACKED_void_GLshort_GLshort_GLshort_GLshort;
typedef void (*FUNC_void_GLubyte_GLubyte_GLubyte_GLubyte)(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
typedef struct {
    GLubyte a1;
    GLubyte a2;
    GLubyte a3;
    GLubyte a4;
} ARGS_void_GLubyte_GLubyte_GLubyte_GLubyte;
typedef struct {
    int index;
    ARGS_void_GLubyte_GLubyte_GLubyte_GLubyte args;
} PACKED_void_GLubyte_GLubyte_GLubyte_GLubyte;
typedef void (*FUNC_void_GLubyte_GLubyte_GLubyte_GLubyte_GLfloat_GLfloat)(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y);
typedef struct {
    GLubyte a1;
    GLubyte a2;
    GLubyte a3;
    GLubyte a4;
    GLfloat a5;
    GLfloat a6;
} ARGS_void_GLubyte_GLubyte_GLubyte_GLubyte_GLfloat_GLfloat;
typedef struct {
    int index;
    ARGS_void_GLubyte_GLubyte_GLubyte_GLubyte_GLfloat_GLfloat args;
} PACKED_void_GLubyte_GLubyte_GLubyte_GLubyte_GLfloat_GLfloat;
typedef void (*FUNC_void_const_GLubyte___GENPT___const_GLfloat___GENPT__)(const GLubyte * c, const GLfloat * v);
typedef struct {
    GLubyte * a1;
    GLfloat * a2;
} ARGS_void_const_GLubyte___GENPT___const_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_const_GLubyte___GENPT___const_GLfloat___GENPT__ args;
} PACKED_void_const_GLubyte___GENPT___const_GLfloat___GENPT__;
typedef void (*FUNC_void_GLubyte_GLubyte_GLubyte_GLubyte_GLfloat_GLfloat_GLfloat)(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
typedef struct {
    GLubyte a1;
    GLubyte a2;
    GLubyte a3;
    GLubyte a4;
    GLfloat a5;
    GLfloat a6;
    GLfloat a7;
} ARGS_void_GLubyte_GLubyte_GLubyte_GLubyte_GLfloat_GLfloat_GLfloat;
typedef struct {
    int index;
    ARGS_void_GLubyte_GLubyte_GLubyte_GLubyte_GLfloat_GLfloat_GLfloat args;
} PACKED_void_GLubyte_GLubyte_GLubyte_GLubyte_GLfloat_GLfloat_GLfloat;
typedef void (*FUNC_void_GLushort_GLushort_GLushort_GLushort)(GLushort red, GLushort green, GLushort blue, GLushort alpha);
typedef struct {
    GLushort a1;
    GLushort a2;
    GLushort a3;
    GLushort a4;
} ARGS_void_GLushort_GLushort_GLushort_GLushort;
typedef struct {
    int index;
    ARGS_void_GLushort_GLushort_GLushort_GLushort args;
} PACKED_void_GLushort_GLushort_GLushort_GLushort;
typedef void (*FUNC_void_GLint_GLenum_GLsizei)(GLint size, GLenum type, GLsizei stride);
typedef struct {
    GLint a1;
    GLenum a2;
    GLsizei a3;
} ARGS_void_GLint_GLenum_GLsizei;
typedef struct {
    int index;
    ARGS_void_GLint_GLenum_GLsizei args;
} PACKED_void_GLint_GLenum_GLsizei;
typedef void (*FUNC_void_GLenum_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint)(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
typedef struct {
    GLenum a1;
    GLuint a2;
    GLuint a3;
    GLuint a4;
    GLuint a5;
    GLuint a6;
    GLuint a7;
} ARGS_void_GLenum_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint;
typedef struct {
    int index;
    ARGS_void_GLenum_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint args;
} PACKED_void_GLenum_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint;
typedef void (*FUNC_void_GLenum_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint)(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
typedef struct {
    GLenum a1;
    GLuint a2;
    GLuint a3;
    GLuint a4;
    GLuint a5;
    GLuint a6;
    GLuint a7;
    GLuint a8;
    GLuint a9;
    GLuint a10;
} ARGS_void_GLenum_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint;
typedef struct {
    int index;
    ARGS_void_GLenum_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint args;
} PACKED_void_GLenum_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint;
typedef void (*FUNC_void_GLenum_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint)(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
typedef struct {
    GLenum a1;
    GLuint a2;
    GLuint a3;
    GLuint a4;
    GLuint a5;
    GLuint a6;
    GLuint a7;
    GLuint a8;
    GLuint a9;
    GLuint a10;
    GLuint a11;
    GLuint a12;
    GLuint a13;
} ARGS_void_GLenum_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint;
typedef struct {
    int index;
    ARGS_void_GLenum_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint args;
} PACKED_void_GLenum_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint;
typedef void (*FUNC_void_GLboolean_GLboolean_GLboolean_GLboolean)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
typedef struct {
    GLboolean a1;
    GLboolean a2;
    GLboolean a3;
    GLboolean a4;
} ARGS_void_GLboolean_GLboolean_GLboolean_GLboolean;
typedef struct {
    int index;
    ARGS_void_GLboolean_GLboolean_GLboolean_GLboolean args;
} PACKED_void_GLboolean_GLboolean_GLboolean_GLboolean;
typedef void (*FUNC_void_GLuint_GLboolean_GLboolean_GLboolean_GLboolean)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
typedef struct {
    GLuint a1;
    GLboolean a2;
    GLboolean a3;
    GLboolean a4;
    GLboolean a5;
} ARGS_void_GLuint_GLboolean_GLboolean_GLboolean_GLboolean;
typedef struct {
    int index;
    ARGS_void_GLuint_GLboolean_GLboolean_GLboolean_GLboolean args;
} PACKED_void_GLuint_GLboolean_GLboolean_GLboolean_GLboolean;
typedef void (*FUNC_void_GLenum_const_GLuint___GENPT__)(GLenum type, const GLuint * color);
typedef struct {
    GLenum a1;
    GLuint * a2;
} ARGS_void_GLenum_const_GLuint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_const_GLuint___GENPT__ args;
} PACKED_void_GLenum_const_GLuint___GENPT__;
typedef void (*FUNC_void_GLint_GLenum_GLsizei_const_GLvoid___GENPT__)(GLint size, GLenum type, GLsizei stride, const GLvoid * pointer);
typedef struct {
    GLint a1;
    GLenum a2;
    GLsizei a3;
    GLvoid * a4;
} ARGS_void_GLint_GLenum_GLsizei_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLint_GLenum_GLsizei_const_GLvoid___GENPT__ args;
} PACKED_void_GLint_GLenum_GLsizei_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLint_GLenum_GLsizei_GLsizei_const_GLvoid___GENPT__)(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid * pointer);
typedef struct {
    GLint a1;
    GLenum a2;
    GLsizei a3;
    GLsizei a4;
    GLvoid * a5;
} ARGS_void_GLint_GLenum_GLsizei_GLsizei_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLint_GLenum_GLsizei_GLsizei_const_GLvoid___GENPT__ args;
} PACKED_void_GLint_GLenum_GLsizei_GLsizei_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLint_GLenum_GLint_const_GLvoid___GENPT___GLint)(GLint size, GLenum type, GLint stride, const GLvoid * pointer, GLint ptrstride);
typedef struct {
    GLint a1;
    GLenum a2;
    GLint a3;
    GLvoid * a4;
    GLint a5;
} ARGS_void_GLint_GLenum_GLint_const_GLvoid___GENPT___GLint;
typedef struct {
    int index;
    ARGS_void_GLint_GLenum_GLint_const_GLvoid___GENPT___GLint args;
} PACKED_void_GLint_GLenum_GLint_const_GLvoid___GENPT___GLint;
typedef void (*FUNC_void_GLint_GLenum_const_GLvoid___GENPT__)(GLint size, GLenum type, const GLvoid * pointer);
typedef struct {
    GLint a1;
    GLenum a2;
    GLvoid * a3;
} ARGS_void_GLint_GLenum_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLint_GLenum_const_GLvoid___GENPT__ args;
} PACKED_void_GLint_GLenum_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLenum_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__)(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid * data);
typedef struct {
    GLenum a1;
    GLsizei a2;
    GLsizei a3;
    GLenum a4;
    GLenum a5;
    GLvoid * a6;
} ARGS_void_GLenum_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid * table);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLsizei a3;
    GLenum a4;
    GLenum a5;
    GLvoid * a6;
} ARGS_void_GLenum_GLenum_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLenum_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_const_GLfloat___GENPT__)(GLenum target, GLenum pname, const GLfloat * params);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLfloat * a3;
} ARGS_void_GLenum_GLenum_const_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_const_GLfloat___GENPT__ args;
} PACKED_void_GLenum_GLenum_const_GLfloat___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_const_GLint___GENPT__)(GLenum target, GLenum pname, const GLint * params);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLint * a3;
} ARGS_void_GLenum_GLenum_const_GLint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_const_GLint___GENPT__ args;
} PACKED_void_GLenum_GLenum_const_GLint___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLenum_GLenum_GLenum_GLenum)(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLenum a3;
    GLenum a4;
    GLenum a5;
    GLenum a6;
} ARGS_void_GLenum_GLenum_GLenum_GLenum_GLenum_GLenum;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLenum_GLenum_GLenum_GLenum args;
} PACKED_void_GLenum_GLenum_GLenum_GLenum_GLenum_GLenum;
typedef void (*FUNC_void_GLenum_GLenum_GLenum_GLenum_GLenum_GLenum_GLenum_GLboolean_GLboolean_GLboolean)(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLenum a3;
    GLenum a4;
    GLenum a5;
    GLenum a6;
    GLenum a7;
    GLboolean a8;
    GLboolean a9;
    GLboolean a10;
} ARGS_void_GLenum_GLenum_GLenum_GLenum_GLenum_GLenum_GLenum_GLboolean_GLboolean_GLboolean;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLenum_GLenum_GLenum_GLenum_GLenum_GLboolean_GLboolean_GLboolean args;
} PACKED_void_GLenum_GLenum_GLenum_GLenum_GLenum_GLenum_GLenum_GLboolean_GLboolean_GLboolean;
typedef void (*FUNC_void_GLenum_GLint)(GLenum pname, GLint param);
typedef struct {
    GLenum a1;
    GLint a2;
} ARGS_void_GLenum_GLint;
typedef struct {
    int index;
    ARGS_void_GLenum_GLint args;
} PACKED_void_GLenum_GLint;
typedef void (*FUNC_void_GLenum_const_GLint___GENPT__)(GLenum pname, const GLint * params);
typedef struct {
    GLenum a1;
    GLint * a2;
} ARGS_void_GLenum_const_GLint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_const_GLint___GENPT__ args;
} PACKED_void_GLenum_const_GLint___GENPT__;
typedef void (*FUNC_void_GLhandleARB)(GLhandleARB shaderObj);
typedef struct {
    GLhandleARB a1;
} ARGS_void_GLhandleARB;
typedef struct {
    int index;
    ARGS_void_GLhandleARB args;
} PACKED_void_GLhandleARB;
typedef void (*FUNC_void_GLuint_GLsizei_const_GLchar___GENPT___const_GLint___GENPT__)(GLuint shader, GLsizei count, const GLchar * path, const GLint * length);
typedef struct {
    GLuint a1;
    GLsizei a2;
    GLchar * a3;
    GLint * a4;
} ARGS_void_GLuint_GLsizei_const_GLchar___GENPT___const_GLint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLsizei_const_GLchar___GENPT___const_GLint___GENPT__ args;
} PACKED_void_GLuint_GLsizei_const_GLchar___GENPT___const_GLint___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLint_GLenum_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid * bits);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLint a3;
    GLenum a4;
    GLsizei a5;
    GLint a6;
    GLsizei a7;
    GLvoid * a8;
} ARGS_void_GLenum_GLenum_GLint_GLenum_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLint_GLenum_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLenum_GLint_GLenum_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLint_GLenum_GLsizei_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid * bits);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLint a3;
    GLenum a4;
    GLsizei a5;
    GLsizei a6;
    GLint a7;
    GLsizei a8;
    GLvoid * a9;
} ARGS_void_GLenum_GLenum_GLint_GLenum_GLsizei_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLint_GLenum_GLsizei_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLenum_GLint_GLenum_GLsizei_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLint_GLenum_GLsizei_GLsizei_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid * bits);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLint a3;
    GLenum a4;
    GLsizei a5;
    GLsizei a6;
    GLsizei a7;
    GLint a8;
    GLsizei a9;
    GLvoid * a10;
} ARGS_void_GLenum_GLenum_GLint_GLenum_GLsizei_GLsizei_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLint_GLenum_GLsizei_GLsizei_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLenum_GLint_GLenum_GLsizei_GLsizei_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLint_GLint_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid * bits);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLint a3;
    GLint a4;
    GLsizei a5;
    GLenum a6;
    GLsizei a7;
    GLvoid * a8;
} ARGS_void_GLenum_GLenum_GLint_GLint_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLint_GLint_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLenum_GLint_GLint_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLint_GLint_GLint_GLsizei_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid * bits);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLint a3;
    GLint a4;
    GLint a5;
    GLsizei a6;
    GLsizei a7;
    GLenum a8;
    GLsizei a9;
    GLvoid * a10;
} ARGS_void_GLenum_GLenum_GLint_GLint_GLint_GLsizei_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLint_GLint_GLint_GLsizei_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLenum_GLint_GLint_GLint_GLsizei_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid * bits);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLint a3;
    GLint a4;
    GLint a5;
    GLint a6;
    GLsizei a7;
    GLsizei a8;
    GLsizei a9;
    GLenum a10;
    GLsizei a11;
    GLvoid * a12;
} ARGS_void_GLenum_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLenum_GLint_GLenum_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid * data);
typedef struct {
    GLenum a1;
    GLint a2;
    GLenum a3;
    GLsizei a4;
    GLint a5;
    GLsizei a6;
    GLvoid * a7;
} ARGS_void_GLenum_GLint_GLenum_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLint_GLenum_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLint_GLenum_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLenum_GLint_GLenum_GLsizei_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid * data);
typedef struct {
    GLenum a1;
    GLint a2;
    GLenum a3;
    GLsizei a4;
    GLsizei a5;
    GLint a6;
    GLsizei a7;
    GLvoid * a8;
} ARGS_void_GLenum_GLint_GLenum_GLsizei_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLint_GLenum_GLsizei_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLint_GLenum_GLsizei_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLenum_GLint_GLenum_GLsizei_GLsizei_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid * data);
typedef struct {
    GLenum a1;
    GLint a2;
    GLenum a3;
    GLsizei a4;
    GLsizei a5;
    GLsizei a6;
    GLint a7;
    GLsizei a8;
    GLvoid * a9;
} ARGS_void_GLenum_GLint_GLenum_GLsizei_GLsizei_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLint_GLenum_GLsizei_GLsizei_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLint_GLenum_GLsizei_GLsizei_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLenum_GLint_GLint_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid * data);
typedef struct {
    GLenum a1;
    GLint a2;
    GLint a3;
    GLsizei a4;
    GLenum a5;
    GLsizei a6;
    GLvoid * a7;
} ARGS_void_GLenum_GLint_GLint_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLint_GLint_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLint_GLint_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLenum_GLint_GLint_GLint_GLsizei_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid * data);
typedef struct {
    GLenum a1;
    GLint a2;
    GLint a3;
    GLint a4;
    GLsizei a5;
    GLsizei a6;
    GLenum a7;
    GLsizei a8;
    GLvoid * a9;
} ARGS_void_GLenum_GLint_GLint_GLint_GLsizei_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLint_GLint_GLint_GLsizei_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLint_GLint_GLint_GLsizei_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid * data);
typedef struct {
    GLenum a1;
    GLint a2;
    GLint a3;
    GLint a4;
    GLint a5;
    GLsizei a6;
    GLsizei a7;
    GLsizei a8;
    GLenum a9;
    GLsizei a10;
    GLvoid * a11;
} ARGS_void_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_GLint_GLenum_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid * bits);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLint a3;
    GLenum a4;
    GLsizei a5;
    GLint a6;
    GLsizei a7;
    GLvoid * a8;
} ARGS_void_GLuint_GLenum_GLint_GLenum_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLint_GLenum_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLint_GLenum_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_GLint_GLenum_GLsizei_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid * bits);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLint a3;
    GLenum a4;
    GLsizei a5;
    GLsizei a6;
    GLint a7;
    GLsizei a8;
    GLvoid * a9;
} ARGS_void_GLuint_GLenum_GLint_GLenum_GLsizei_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLint_GLenum_GLsizei_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLint_GLenum_GLsizei_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_GLint_GLenum_GLsizei_GLsizei_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid * bits);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLint a3;
    GLenum a4;
    GLsizei a5;
    GLsizei a6;
    GLsizei a7;
    GLint a8;
    GLsizei a9;
    GLvoid * a10;
} ARGS_void_GLuint_GLenum_GLint_GLenum_GLsizei_GLsizei_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLint_GLenum_GLsizei_GLsizei_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLint_GLenum_GLsizei_GLsizei_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_GLint_GLint_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid * bits);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLint a3;
    GLint a4;
    GLsizei a5;
    GLenum a6;
    GLsizei a7;
    GLvoid * a8;
} ARGS_void_GLuint_GLenum_GLint_GLint_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLint_GLint_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLint_GLint_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_GLint_GLint_GLint_GLsizei_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid * bits);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLint a3;
    GLint a4;
    GLint a5;
    GLsizei a6;
    GLsizei a7;
    GLenum a8;
    GLsizei a9;
    GLvoid * a10;
} ARGS_void_GLuint_GLenum_GLint_GLint_GLint_GLsizei_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLint_GLint_GLint_GLsizei_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLint_GLint_GLint_GLsizei_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid * bits);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLint a3;
    GLint a4;
    GLint a5;
    GLint a6;
    GLsizei a7;
    GLsizei a8;
    GLsizei a9;
    GLenum a10;
    GLsizei a11;
    GLvoid * a12;
} ARGS_void_GLuint_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * image);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLsizei a3;
    GLsizei a4;
    GLenum a5;
    GLenum a6;
    GLvoid * a7;
} ARGS_void_GLenum_GLenum_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLenum_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLfloat)(GLenum target, GLenum pname, GLfloat params);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLfloat a3;
} ARGS_void_GLenum_GLenum_GLfloat;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLfloat args;
} PACKED_void_GLenum_GLenum_GLfloat;
typedef void (*FUNC_void_GLenum_GLenum_GLfixed)(GLenum target, GLenum pname, GLfixed param);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLfixed a3;
} ARGS_void_GLenum_GLenum_GLfixed;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLfixed args;
} PACKED_void_GLenum_GLenum_GLfixed;
typedef void (*FUNC_void_GLenum_GLenum_const_GLfixed___GENPT__)(GLenum target, GLenum pname, const GLfixed * params);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLfixed * a3;
} ARGS_void_GLenum_GLenum_const_GLfixed___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_const_GLfixed___GENPT__ args;
} PACKED_void_GLenum_GLenum_const_GLfixed___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLintptr_GLintptr_GLsizeiptr)(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLintptr a3;
    GLintptr a4;
    GLsizeiptr a5;
} ARGS_void_GLenum_GLenum_GLintptr_GLintptr_GLsizeiptr;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLintptr_GLintptr_GLsizeiptr args;
} PACKED_void_GLenum_GLenum_GLintptr_GLintptr_GLsizeiptr;
typedef void (*FUNC_void_GLenum_GLsizei_GLint_GLint_GLsizei)(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
typedef struct {
    GLenum a1;
    GLsizei a2;
    GLint a3;
    GLint a4;
    GLsizei a5;
} ARGS_void_GLenum_GLsizei_GLint_GLint_GLsizei;
typedef struct {
    int index;
    ARGS_void_GLenum_GLsizei_GLint_GLint_GLsizei args;
} PACKED_void_GLenum_GLsizei_GLint_GLint_GLsizei;
typedef void (*FUNC_void_GLenum_GLenum_GLint_GLint_GLsizei)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLint a3;
    GLint a4;
    GLsizei a5;
} ARGS_void_GLenum_GLenum_GLint_GLint_GLsizei;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLint_GLint_GLsizei args;
} PACKED_void_GLenum_GLenum_GLint_GLint_GLsizei;
typedef void (*FUNC_void_GLenum_GLenum_GLint_GLint_GLsizei_GLsizei)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLint a3;
    GLint a4;
    GLsizei a5;
    GLsizei a6;
} ARGS_void_GLenum_GLenum_GLint_GLint_GLsizei_GLsizei;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLint_GLint_GLsizei_GLsizei args;
} PACKED_void_GLenum_GLenum_GLint_GLint_GLsizei_GLsizei;
typedef void (*FUNC_void_GLuint_GLenum_GLint_GLint_GLint_GLint_GLuint_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei)(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLint a3;
    GLint a4;
    GLint a5;
    GLint a6;
    GLuint a7;
    GLenum a8;
    GLint a9;
    GLint a10;
    GLint a11;
    GLint a12;
    GLsizei a13;
    GLsizei a14;
    GLsizei a15;
} ARGS_void_GLuint_GLenum_GLint_GLint_GLint_GLint_GLuint_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLint_GLint_GLint_GLint_GLuint_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei args;
} PACKED_void_GLuint_GLenum_GLint_GLint_GLint_GLint_GLuint_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei;
typedef void (*FUNC_void_GLenum_GLenum_GLint_GLenum_GLint_GLint_GLsizei_GLint)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLint a3;
    GLenum a4;
    GLint a5;
    GLint a6;
    GLsizei a7;
    GLint a8;
} ARGS_void_GLenum_GLenum_GLint_GLenum_GLint_GLint_GLsizei_GLint;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLint_GLenum_GLint_GLint_GLsizei_GLint args;
} PACKED_void_GLenum_GLenum_GLint_GLenum_GLint_GLint_GLsizei_GLint;
typedef void (*FUNC_void_GLenum_GLenum_GLint_GLenum_GLint_GLint_GLsizei_GLsizei_GLint)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLint a3;
    GLenum a4;
    GLint a5;
    GLint a6;
    GLsizei a7;
    GLsizei a8;
    GLint a9;
} ARGS_void_GLenum_GLenum_GLint_GLenum_GLint_GLint_GLsizei_GLsizei_GLint;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLint_GLenum_GLint_GLint_GLsizei_GLsizei_GLint args;
} PACKED_void_GLenum_GLenum_GLint_GLenum_GLint_GLint_GLsizei_GLsizei_GLint;
typedef void (*FUNC_void_GLenum_GLenum_GLint_GLint_GLint_GLint_GLsizei)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLint a3;
    GLint a4;
    GLint a5;
    GLint a6;
    GLsizei a7;
} ARGS_void_GLenum_GLenum_GLint_GLint_GLint_GLint_GLsizei;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLint_GLint_GLint_GLint_GLsizei args;
} PACKED_void_GLenum_GLenum_GLint_GLint_GLint_GLint_GLsizei;
typedef void (*FUNC_void_GLenum_GLenum_GLint_GLint_GLint_GLint_GLint_GLsizei_GLsizei)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLint a3;
    GLint a4;
    GLint a5;
    GLint a6;
    GLint a7;
    GLsizei a8;
    GLsizei a9;
} ARGS_void_GLenum_GLenum_GLint_GLint_GLint_GLint_GLint_GLsizei_GLsizei;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLint_GLint_GLint_GLint_GLint_GLsizei_GLsizei args;
} PACKED_void_GLenum_GLenum_GLint_GLint_GLint_GLint_GLint_GLsizei_GLsizei;
typedef void (*FUNC_void_GLenum_GLenum_GLint_GLint_GLint_GLint_GLint_GLint_GLsizei_GLsizei)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLint a3;
    GLint a4;
    GLint a5;
    GLint a6;
    GLint a7;
    GLint a8;
    GLsizei a9;
    GLsizei a10;
} ARGS_void_GLenum_GLenum_GLint_GLint_GLint_GLint_GLint_GLint_GLsizei_GLsizei;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLint_GLint_GLint_GLint_GLint_GLint_GLsizei_GLsizei args;
} PACKED_void_GLenum_GLenum_GLint_GLint_GLint_GLint_GLint_GLint_GLsizei_GLsizei;
typedef void (*FUNC_void_GLint_GLint_GLsizei_GLsizei_GLenum)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
typedef struct {
    GLint a1;
    GLint a2;
    GLsizei a3;
    GLsizei a4;
    GLenum a5;
} ARGS_void_GLint_GLint_GLsizei_GLsizei_GLenum;
typedef struct {
    int index;
    ARGS_void_GLint_GLint_GLsizei_GLsizei_GLenum args;
} PACKED_void_GLint_GLint_GLsizei_GLsizei_GLenum;
typedef void (*FUNC_void_GLenum_GLint_GLenum_GLint_GLint_GLsizei_GLint)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef struct {
    GLenum a1;
    GLint a2;
    GLenum a3;
    GLint a4;
    GLint a5;
    GLsizei a6;
    GLint a7;
} ARGS_void_GLenum_GLint_GLenum_GLint_GLint_GLsizei_GLint;
typedef struct {
    int index;
    ARGS_void_GLenum_GLint_GLenum_GLint_GLint_GLsizei_GLint args;
} PACKED_void_GLenum_GLint_GLenum_GLint_GLint_GLsizei_GLint;
typedef void (*FUNC_void_GLenum_GLint_GLenum_GLint_GLint_GLsizei_GLsizei_GLint)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef struct {
    GLenum a1;
    GLint a2;
    GLenum a3;
    GLint a4;
    GLint a5;
    GLsizei a6;
    GLsizei a7;
    GLint a8;
} ARGS_void_GLenum_GLint_GLenum_GLint_GLint_GLsizei_GLsizei_GLint;
typedef struct {
    int index;
    ARGS_void_GLenum_GLint_GLenum_GLint_GLint_GLsizei_GLsizei_GLint args;
} PACKED_void_GLenum_GLint_GLenum_GLint_GLint_GLsizei_GLsizei_GLint;
typedef void (*FUNC_void_GLenum_GLint_GLint_GLint_GLint_GLsizei)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef struct {
    GLenum a1;
    GLint a2;
    GLint a3;
    GLint a4;
    GLint a5;
    GLsizei a6;
} ARGS_void_GLenum_GLint_GLint_GLint_GLint_GLsizei;
typedef struct {
    int index;
    ARGS_void_GLenum_GLint_GLint_GLint_GLint_GLsizei args;
} PACKED_void_GLenum_GLint_GLint_GLint_GLint_GLsizei;
typedef void (*FUNC_void_GLenum_GLint_GLint_GLint_GLint_GLint_GLsizei_GLsizei)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef struct {
    GLenum a1;
    GLint a2;
    GLint a3;
    GLint a4;
    GLint a5;
    GLint a6;
    GLsizei a7;
    GLsizei a8;
} ARGS_void_GLenum_GLint_GLint_GLint_GLint_GLint_GLsizei_GLsizei;
typedef struct {
    int index;
    ARGS_void_GLenum_GLint_GLint_GLint_GLint_GLint_GLsizei_GLsizei args;
} PACKED_void_GLenum_GLint_GLint_GLint_GLint_GLint_GLsizei_GLsizei;
typedef void (*FUNC_void_GLenum_GLint_GLint_GLint_GLint_GLint_GLint_GLsizei_GLsizei)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef struct {
    GLenum a1;
    GLint a2;
    GLint a3;
    GLint a4;
    GLint a5;
    GLint a6;
    GLint a7;
    GLsizei a8;
    GLsizei a9;
} ARGS_void_GLenum_GLint_GLint_GLint_GLint_GLint_GLint_GLsizei_GLsizei;
typedef struct {
    int index;
    ARGS_void_GLenum_GLint_GLint_GLint_GLint_GLint_GLint_GLsizei_GLsizei args;
} PACKED_void_GLenum_GLint_GLint_GLint_GLint_GLint_GLint_GLsizei_GLsizei;
typedef void (*FUNC_void_GLuint_GLenum_GLint_GLenum_GLint_GLint_GLsizei_GLint)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLint a3;
    GLenum a4;
    GLint a5;
    GLint a6;
    GLsizei a7;
    GLint a8;
} ARGS_void_GLuint_GLenum_GLint_GLenum_GLint_GLint_GLsizei_GLint;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLint_GLenum_GLint_GLint_GLsizei_GLint args;
} PACKED_void_GLuint_GLenum_GLint_GLenum_GLint_GLint_GLsizei_GLint;
typedef void (*FUNC_void_GLuint_GLenum_GLint_GLenum_GLint_GLint_GLsizei_GLsizei_GLint)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLint a3;
    GLenum a4;
    GLint a5;
    GLint a6;
    GLsizei a7;
    GLsizei a8;
    GLint a9;
} ARGS_void_GLuint_GLenum_GLint_GLenum_GLint_GLint_GLsizei_GLsizei_GLint;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLint_GLenum_GLint_GLint_GLsizei_GLsizei_GLint args;
} PACKED_void_GLuint_GLenum_GLint_GLenum_GLint_GLint_GLsizei_GLsizei_GLint;
typedef void (*FUNC_void_GLuint_GLenum_GLint_GLint_GLint_GLint_GLsizei)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLint a3;
    GLint a4;
    GLint a5;
    GLint a6;
    GLsizei a7;
} ARGS_void_GLuint_GLenum_GLint_GLint_GLint_GLint_GLsizei;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLint_GLint_GLint_GLint_GLsizei args;
} PACKED_void_GLuint_GLenum_GLint_GLint_GLint_GLint_GLsizei;
typedef void (*FUNC_void_GLuint_GLenum_GLint_GLint_GLint_GLint_GLint_GLsizei_GLsizei)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLint a3;
    GLint a4;
    GLint a5;
    GLint a6;
    GLint a7;
    GLsizei a8;
    GLsizei a9;
} ARGS_void_GLuint_GLenum_GLint_GLint_GLint_GLint_GLint_GLsizei_GLsizei;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLint_GLint_GLint_GLint_GLint_GLsizei_GLsizei args;
} PACKED_void_GLuint_GLenum_GLint_GLint_GLint_GLint_GLint_GLsizei_GLsizei;
typedef void (*FUNC_void_GLuint_GLenum_GLint_GLint_GLint_GLint_GLint_GLint_GLsizei_GLsizei)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLint a3;
    GLint a4;
    GLint a5;
    GLint a6;
    GLint a7;
    GLint a8;
    GLsizei a9;
    GLsizei a10;
} ARGS_void_GLuint_GLenum_GLint_GLint_GLint_GLint_GLint_GLint_GLsizei_GLsizei;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLint_GLint_GLint_GLint_GLint_GLint_GLsizei_GLsizei args;
} PACKED_void_GLuint_GLenum_GLint_GLint_GLint_GLint_GLint_GLint_GLsizei_GLsizei;
typedef void (*FUNC_void_GLsizei_GLenum_const_GLvoid___GENPT___GLuint_GLenum_GLenum_const_GLfloat___GENPT__)(GLsizei numPaths, GLenum pathNameType, const GLvoid * paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat * transformValues);
typedef struct {
    GLsizei a1;
    GLenum a2;
    GLvoid * a3;
    GLuint a4;
    GLenum a5;
    GLenum a6;
    GLfloat * a7;
} ARGS_void_GLsizei_GLenum_const_GLvoid___GENPT___GLuint_GLenum_GLenum_const_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLsizei_GLenum_const_GLvoid___GENPT___GLuint_GLenum_GLenum_const_GLfloat___GENPT__ args;
} PACKED_void_GLsizei_GLenum_const_GLvoid___GENPT___GLuint_GLenum_GLenum_const_GLfloat___GENPT__;
typedef GLuint (*FUNC_GLuint)();
typedef struct {
    int index;
} PACKED_GLuint;
typedef GLhandleARB (*FUNC_GLhandleARB)();
typedef struct {
    int index;
} PACKED_GLhandleARB;
typedef GLhandleARB (*FUNC_GLhandleARB_GLenum)(GLenum shaderType);
typedef struct {
    GLenum a1;
} ARGS_GLhandleARB_GLenum;
typedef struct {
    int index;
    ARGS_GLhandleARB_GLenum args;
} PACKED_GLhandleARB_GLenum;
typedef GLuint (*FUNC_GLuint_GLenum_const_GLchar___GENPT__)(GLenum type, const GLchar * string);
typedef struct {
    GLenum a1;
    GLchar * a2;
} ARGS_GLuint_GLenum_const_GLchar___GENPT__;
typedef struct {
    int index;
    ARGS_GLuint_GLenum_const_GLchar___GENPT__ args;
} PACKED_GLuint_GLenum_const_GLchar___GENPT__;
typedef GLuint (*FUNC_GLuint_GLenum_GLsizei_GLchar__GENPT__const___GENPT__)(GLenum type, GLsizei count, GLchar*const * strings);
typedef struct {
    GLenum a1;
    GLsizei a2;
    GLchar*const * a3;
} ARGS_GLuint_GLenum_GLsizei_GLchar__GENPT__const___GENPT__;
typedef struct {
    int index;
    ARGS_GLuint_GLenum_GLsizei_GLchar__GENPT__const___GENPT__ args;
} PACKED_GLuint_GLenum_GLsizei_GLchar__GENPT__const___GENPT__;
typedef GLsync (*FUNC_GLsync_struct__cl_context___GENPT___struct__cl_event___GENPT___GLbitfield)(struct _cl_context * context, struct _cl_event * event, GLbitfield flags);
typedef struct {
    struct _cl_context * a1;
    struct _cl_event * a2;
    GLbitfield a3;
} ARGS_GLsync_struct__cl_context___GENPT___struct__cl_event___GENPT___GLbitfield;
typedef struct {
    int index;
    ARGS_GLsync_struct__cl_context___GENPT___struct__cl_event___GENPT___GLbitfield args;
} PACKED_GLsync_struct__cl_context___GENPT___struct__cl_event___GENPT___GLbitfield;
typedef void (*FUNC_void_GLenum_GLdouble___GENPT__)(GLenum pname, GLdouble * params);
typedef struct {
    GLenum a1;
    GLdouble * a2;
} ARGS_void_GLenum_GLdouble___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLdouble___GENPT__ args;
} PACKED_void_GLenum_GLdouble___GENPT__;
typedef void (*FUNC_void_GLenum_GLfloat___GENPT__)(GLenum pname, GLfloat * params);
typedef struct {
    GLenum a1;
    GLfloat * a2;
} ARGS_void_GLenum_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLfloat___GENPT__ args;
} PACKED_void_GLenum_GLfloat___GENPT__;
typedef void (*FUNC_void_GLDEBUGPROC_const_void___GENPT__)(GLDEBUGPROC callback, const void * userParam);
typedef struct {
    GLDEBUGPROC a1;
    void * a2;
} ARGS_void_GLDEBUGPROC_const_void___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLDEBUGPROC_const_void___GENPT__ args;
} PACKED_void_GLDEBUGPROC_const_void___GENPT__;
typedef void (*FUNC_void_GLDEBUGPROCAMD_GLvoid___GENPT__)(GLDEBUGPROCAMD callback, GLvoid * userParam);
typedef struct {
    GLDEBUGPROCAMD a1;
    GLvoid * a2;
} ARGS_void_GLDEBUGPROCAMD_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLDEBUGPROCAMD_GLvoid___GENPT__ args;
} PACKED_void_GLDEBUGPROCAMD_GLvoid___GENPT__;
typedef void (*FUNC_void_GLDEBUGPROCARB_const_GLvoid___GENPT__)(GLDEBUGPROCARB callback, const GLvoid * userParam);
typedef struct {
    GLDEBUGPROCARB a1;
    GLvoid * a2;
} ARGS_void_GLDEBUGPROCARB_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLDEBUGPROCARB_const_GLvoid___GENPT__ args;
} PACKED_void_GLDEBUGPROCARB_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLenum_GLsizei_const_GLuint___GENPT___GLboolean)(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLenum a3;
    GLsizei a4;
    GLuint * a5;
    GLboolean a6;
} ARGS_void_GLenum_GLenum_GLenum_GLsizei_const_GLuint___GENPT___GLboolean;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLenum_GLsizei_const_GLuint___GENPT___GLboolean args;
} PACKED_void_GLenum_GLenum_GLenum_GLsizei_const_GLuint___GENPT___GLboolean;
typedef void (*FUNC_void_GLenum_GLenum_GLsizei_const_GLuint___GENPT___GLboolean)(GLenum category, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLsizei a3;
    GLuint * a4;
    GLboolean a5;
} ARGS_void_GLenum_GLenum_GLsizei_const_GLuint___GENPT___GLboolean;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLsizei_const_GLuint___GENPT___GLboolean args;
} PACKED_void_GLenum_GLenum_GLsizei_const_GLuint___GENPT___GLboolean;
typedef void (*FUNC_void_GLenum_GLenum_GLuint_GLenum_GLsizei_const_GLchar___GENPT__)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLuint a3;
    GLenum a4;
    GLsizei a5;
    GLchar * a6;
} ARGS_void_GLenum_GLenum_GLuint_GLenum_GLsizei_const_GLchar___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLuint_GLenum_GLsizei_const_GLchar___GENPT__ args;
} PACKED_void_GLenum_GLenum_GLuint_GLenum_GLsizei_const_GLchar___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLuint_GLsizei_const_GLchar___GENPT__)(GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar * buf);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLuint a3;
    GLsizei a4;
    GLchar * a5;
} ARGS_void_GLenum_GLenum_GLuint_GLsizei_const_GLchar___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLuint_GLsizei_const_GLchar___GENPT__ args;
} PACKED_void_GLenum_GLenum_GLuint_GLsizei_const_GLchar___GENPT__;
typedef void (*FUNC_void_GLenum_GLdouble_GLdouble_GLint_GLint_GLdouble_GLdouble_GLint_GLint_GLdouble_GLdouble_GLint_GLint_const_GLdouble___GENPT__)(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble * points);
typedef struct {
    GLenum a1;
    GLdouble a2 __attribute__ ((aligned(8)));
    GLdouble a3 __attribute__ ((aligned(8)));
    GLint a4;
    GLint a5;
    GLdouble a6 __attribute__ ((aligned(8)));
    GLdouble a7 __attribute__ ((aligned(8)));
    GLint a8;
    GLint a9;
    GLdouble a10 __attribute__ ((aligned(8)));
    GLdouble a11 __attribute__ ((aligned(8)));
    GLint a12;
    GLint a13;
    GLdouble * a14;
} ARGS_void_GLenum_GLdouble_GLdouble_GLint_GLint_GLdouble_GLdouble_GLint_GLint_GLdouble_GLdouble_GLint_GLint_const_GLdouble___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLdouble_GLdouble_GLint_GLint_GLdouble_GLdouble_GLint_GLint_GLdouble_GLdouble_GLint_GLint_const_GLdouble___GENPT__ args;
} PACKED_void_GLenum_GLdouble_GLdouble_GLint_GLint_GLdouble_GLdouble_GLint_GLint_GLdouble_GLdouble_GLint_GLint_const_GLdouble___GENPT__;
typedef void (*FUNC_void_GLenum_GLfloat_GLfloat_GLint_GLint_GLfloat_GLfloat_GLint_GLint_GLfloat_GLfloat_GLint_GLint_const_GLfloat___GENPT__)(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat * points);
typedef struct {
    GLenum a1;
    GLfloat a2;
    GLfloat a3;
    GLint a4;
    GLint a5;
    GLfloat a6;
    GLfloat a7;
    GLint a8;
    GLint a9;
    GLfloat a10;
    GLfloat a11;
    GLint a12;
    GLint a13;
    GLfloat * a14;
} ARGS_void_GLenum_GLfloat_GLfloat_GLint_GLint_GLfloat_GLfloat_GLint_GLint_GLfloat_GLfloat_GLint_GLint_const_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLfloat_GLfloat_GLint_GLint_GLfloat_GLfloat_GLint_GLint_GLfloat_GLfloat_GLint_GLint_const_GLfloat___GENPT__ args;
} PACKED_void_GLenum_GLfloat_GLfloat_GLint_GLint_GLfloat_GLfloat_GLint_GLint_GLfloat_GLfloat_GLint_GLint_const_GLfloat___GENPT__;
typedef void (*FUNC_void_GLuint_GLsizei)(GLuint marker, GLsizei range);
typedef struct {
    GLuint a1;
    GLsizei a2;
} ARGS_void_GLuint_GLsizei;
typedef struct {
    int index;
    ARGS_void_GLuint_GLsizei args;
} PACKED_void_GLuint_GLsizei;
typedef void (*FUNC_void_GLsizei_const_GLuint___GENPT__)(GLsizei n, const GLuint * buffers);
typedef struct {
    GLsizei a1;
    GLuint * a2;
} ARGS_void_GLsizei_const_GLuint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLsizei_const_GLuint___GENPT__ args;
} PACKED_void_GLsizei_const_GLuint___GENPT__;
typedef void (*FUNC_void_GLint_const_GLchar___GENPT__)(GLint namelen, const GLchar * name);
typedef struct {
    GLint a1;
    GLchar * a2;
} ARGS_void_GLint_const_GLchar___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLint_const_GLchar___GENPT__ args;
} PACKED_void_GLint_const_GLchar___GENPT__;
typedef void (*FUNC_void_GLenum_GLuint_const_GLuint___GENPT__)(GLenum identifier, GLuint num, const GLuint * names);
typedef struct {
    GLenum a1;
    GLuint a2;
    GLuint * a3;
} ARGS_void_GLenum_GLuint_const_GLuint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLuint_const_GLuint___GENPT__ args;
} PACKED_void_GLenum_GLuint_const_GLuint___GENPT__;
typedef void (*FUNC_void_GLsizei_GLuint___GENPT__)(GLsizei n, GLuint * monitors);
typedef struct {
    GLsizei a1;
    GLuint * a2;
} ARGS_void_GLsizei_GLuint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLsizei_GLuint___GENPT__ args;
} PACKED_void_GLsizei_GLuint___GENPT__;
typedef void (*FUNC_void_GLsync)(GLsync sync);
typedef struct {
    GLsync a1;
} ARGS_void_GLsync;
typedef struct {
    int index;
    ARGS_void_GLsync args;
} PACKED_void_GLsync;
typedef void (*FUNC_void_GLclampd_GLclampd)(GLclampd zmin, GLclampd zmax);
typedef struct {
    GLclampd a1;
    GLclampd a2;
} ARGS_void_GLclampd_GLclampd;
typedef struct {
    int index;
    ARGS_void_GLclampd_GLclampd args;
} PACKED_void_GLclampd_GLclampd;
typedef void (*FUNC_void_GLdouble_GLdouble)(GLdouble zmin, GLdouble zmax);
typedef struct {
    GLdouble a1 __attribute__ ((aligned(8)));
    GLdouble a2 __attribute__ ((aligned(8)));
} ARGS_void_GLdouble_GLdouble;
typedef struct {
    int index;
    ARGS_void_GLdouble_GLdouble args;
} PACKED_void_GLdouble_GLdouble;
typedef void (*FUNC_void_GLboolean)(GLboolean flag);
typedef struct {
    GLboolean a1;
} ARGS_void_GLboolean;
typedef struct {
    int index;
    ARGS_void_GLboolean args;
} PACKED_void_GLboolean;
typedef void (*FUNC_void_GLuint_GLsizei_const_GLdouble___GENPT__)(GLuint first, GLsizei count, const GLdouble * v);
typedef struct {
    GLuint a1;
    GLsizei a2;
    GLdouble * a3;
} ARGS_void_GLuint_GLsizei_const_GLdouble___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLsizei_const_GLdouble___GENPT__ args;
} PACKED_void_GLuint_GLsizei_const_GLdouble___GENPT__;
typedef void (*FUNC_void_GLuint_GLdouble_GLdouble)(GLuint index, GLdouble n, GLdouble f);
typedef struct {
    GLuint a1;
    GLdouble a2 __attribute__ ((aligned(8)));
    GLdouble a3 __attribute__ ((aligned(8)));
} ARGS_void_GLuint_GLdouble_GLdouble;
typedef struct {
    int index;
    ARGS_void_GLuint_GLdouble_GLdouble args;
} PACKED_void_GLuint_GLdouble_GLdouble;
typedef void (*FUNC_void_GLfloat_GLfloat)(GLfloat n, GLfloat f);
typedef struct {
    GLfloat a1;
    GLfloat a2;
} ARGS_void_GLfloat_GLfloat;
typedef struct {
    int index;
    ARGS_void_GLfloat_GLfloat args;
} PACKED_void_GLfloat_GLfloat;
typedef void (*FUNC_void_GLclampf_GLclampf)(GLclampf n, GLclampf f);
typedef struct {
    GLclampf a1;
    GLclampf a2;
} ARGS_void_GLclampf_GLclampf;
typedef struct {
    int index;
    ARGS_void_GLclampf_GLclampf args;
} PACKED_void_GLclampf_GLclampf;
typedef void (*FUNC_void_GLfixed_GLfixed)(GLfixed n, GLfixed f);
typedef struct {
    GLfixed a1;
    GLfixed a2;
} ARGS_void_GLfixed_GLfixed;
typedef struct {
    int index;
    ARGS_void_GLfixed_GLfixed args;
} PACKED_void_GLfixed_GLfixed;
typedef void (*FUNC_void_GLenum_GLsizei_const_GLfloat___GENPT__)(GLenum target, GLsizei n, const GLfloat * points);
typedef struct {
    GLenum a1;
    GLsizei a2;
    GLfloat * a3;
} ARGS_void_GLenum_GLsizei_const_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLsizei_const_GLfloat___GENPT__ args;
} PACKED_void_GLenum_GLsizei_const_GLfloat___GENPT__;
typedef void (*FUNC_void_GLintptr)(GLintptr indirect);
typedef struct {
    GLintptr a1;
} ARGS_void_GLintptr;
typedef struct {
    int index;
    ARGS_void_GLintptr args;
} PACKED_void_GLintptr;
typedef void (*FUNC_void_GLenum_GLint_GLsizei)(GLenum mode, GLint first, GLsizei count);
typedef struct {
    GLenum a1;
    GLint a2;
    GLsizei a3;
} ARGS_void_GLenum_GLint_GLsizei;
typedef struct {
    int index;
    ARGS_void_GLenum_GLint_GLsizei args;
} PACKED_void_GLenum_GLint_GLsizei;
typedef void (*FUNC_void_GLenum_const_GLvoid___GENPT__)(GLenum mode, const GLvoid * indirect);
typedef struct {
    GLenum a1;
    GLvoid * a2;
} ARGS_void_GLenum_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_const_GLvoid___GENPT__ args;
} PACKED_void_GLenum_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLenum_GLint_GLsizei_GLsizei)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
typedef struct {
    GLenum a1;
    GLint a2;
    GLsizei a3;
    GLsizei a4;
} ARGS_void_GLenum_GLint_GLsizei_GLsizei;
typedef struct {
    int index;
    ARGS_void_GLenum_GLint_GLsizei_GLsizei args;
} PACKED_void_GLenum_GLint_GLsizei_GLsizei;
typedef void (*FUNC_void_GLenum_GLint_GLsizei_GLsizei_GLuint)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
typedef struct {
    GLenum a1;
    GLint a2;
    GLsizei a3;
    GLsizei a4;
    GLuint a5;
} ARGS_void_GLenum_GLint_GLsizei_GLsizei_GLuint;
typedef struct {
    int index;
    ARGS_void_GLenum_GLint_GLsizei_GLsizei_GLuint args;
} PACKED_void_GLenum_GLint_GLsizei_GLsizei_GLuint;
typedef void (*FUNC_void_GLsizei_const_GLenum___GENPT__)(GLsizei n, const GLenum * bufs);
typedef struct {
    GLsizei a1;
    GLenum * a2;
} ARGS_void_GLsizei_const_GLenum___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLsizei_const_GLenum___GENPT__ args;
} PACKED_void_GLsizei_const_GLenum___GENPT__;
typedef void (*FUNC_void_GLenum_GLsizei)(GLenum mode, GLsizei count);
typedef struct {
    GLenum a1;
    GLsizei a2;
} ARGS_void_GLenum_GLsizei;
typedef struct {
    int index;
    ARGS_void_GLenum_GLsizei args;
} PACKED_void_GLenum_GLsizei;
typedef void (*FUNC_void_GLenum_GLsizei_GLenum_const_GLvoid___GENPT__)(GLenum mode, GLsizei count, GLenum type, const GLvoid * indices);
typedef struct {
    GLenum a1;
    GLsizei a2;
    GLenum a3;
    GLvoid * a4;
} ARGS_void_GLenum_GLsizei_GLenum_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLsizei_GLenum_const_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLsizei_GLenum_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLenum_GLsizei_GLenum_const_GLvoid___GENPT___GLint)(GLenum mode, GLsizei count, GLenum type, const GLvoid * indices, GLint basevertex);
typedef struct {
    GLenum a1;
    GLsizei a2;
    GLenum a3;
    GLvoid * a4;
    GLint a5;
} ARGS_void_GLenum_GLsizei_GLenum_const_GLvoid___GENPT___GLint;
typedef struct {
    int index;
    ARGS_void_GLenum_GLsizei_GLenum_const_GLvoid___GENPT___GLint args;
} PACKED_void_GLenum_GLsizei_GLenum_const_GLvoid___GENPT___GLint;
typedef void (*FUNC_void_GLenum_GLenum_const_GLvoid___GENPT__)(GLenum mode, GLenum type, const GLvoid * indirect);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLvoid * a3;
} ARGS_void_GLenum_GLenum_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_const_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLenum_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLenum_GLsizei_GLenum_const_GLvoid___GENPT___GLsizei)(GLenum mode, GLsizei count, GLenum type, const GLvoid * indices, GLsizei instancecount);
typedef struct {
    GLenum a1;
    GLsizei a2;
    GLenum a3;
    GLvoid * a4;
    GLsizei a5;
} ARGS_void_GLenum_GLsizei_GLenum_const_GLvoid___GENPT___GLsizei;
typedef struct {
    int index;
    ARGS_void_GLenum_GLsizei_GLenum_const_GLvoid___GENPT___GLsizei args;
} PACKED_void_GLenum_GLsizei_GLenum_const_GLvoid___GENPT___GLsizei;
typedef void (*FUNC_void_GLenum_GLsizei_GLenum_const_void___GENPT___GLsizei_GLuint)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLuint baseinstance);
typedef struct {
    GLenum a1;
    GLsizei a2;
    GLenum a3;
    void * a4;
    GLsizei a5;
    GLuint a6;
} ARGS_void_GLenum_GLsizei_GLenum_const_void___GENPT___GLsizei_GLuint;
typedef struct {
    int index;
    ARGS_void_GLenum_GLsizei_GLenum_const_void___GENPT___GLsizei_GLuint args;
} PACKED_void_GLenum_GLsizei_GLenum_const_void___GENPT___GLsizei_GLuint;
typedef void (*FUNC_void_GLenum_GLsizei_GLenum_const_GLvoid___GENPT___GLsizei_GLint)(GLenum mode, GLsizei count, GLenum type, const GLvoid * indices, GLsizei instancecount, GLint basevertex);
typedef struct {
    GLenum a1;
    GLsizei a2;
    GLenum a3;
    GLvoid * a4;
    GLsizei a5;
    GLint a6;
} ARGS_void_GLenum_GLsizei_GLenum_const_GLvoid___GENPT___GLsizei_GLint;
typedef struct {
    int index;
    ARGS_void_GLenum_GLsizei_GLenum_const_GLvoid___GENPT___GLsizei_GLint args;
} PACKED_void_GLenum_GLsizei_GLenum_const_GLvoid___GENPT___GLsizei_GLint;
typedef void (*FUNC_void_GLenum_GLsizei_GLenum_const_void___GENPT___GLsizei_GLint_GLuint)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
typedef struct {
    GLenum a1;
    GLsizei a2;
    GLenum a3;
    void * a4;
    GLsizei a5;
    GLint a6;
    GLuint a7;
} ARGS_void_GLenum_GLsizei_GLenum_const_void___GENPT___GLsizei_GLint_GLuint;
typedef struct {
    int index;
    ARGS_void_GLenum_GLsizei_GLenum_const_void___GENPT___GLsizei_GLint_GLuint args;
} PACKED_void_GLenum_GLsizei_GLenum_const_void___GENPT___GLsizei_GLint_GLuint;
typedef void (*FUNC_void_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__)(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * pixels);
typedef struct {
    GLsizei a1;
    GLsizei a2;
    GLenum a3;
    GLenum a4;
    GLvoid * a5;
} ARGS_void_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__ args;
} PACKED_void_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLenum_GLuint_GLuint_GLint_GLsizei)(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count);
typedef struct {
    GLenum a1;
    GLuint a2;
    GLuint a3;
    GLint a4;
    GLsizei a5;
} ARGS_void_GLenum_GLuint_GLuint_GLint_GLsizei;
typedef struct {
    int index;
    ARGS_void_GLenum_GLuint_GLuint_GLint_GLsizei args;
} PACKED_void_GLenum_GLuint_GLuint_GLint_GLsizei;
typedef void (*FUNC_void_GLenum_GLuint_GLuint_GLsizei)(GLenum mode, GLuint start, GLuint end, GLsizei count);
typedef struct {
    GLenum a1;
    GLuint a2;
    GLuint a3;
    GLsizei a4;
} ARGS_void_GLenum_GLuint_GLuint_GLsizei;
typedef struct {
    int index;
    ARGS_void_GLenum_GLuint_GLuint_GLsizei args;
} PACKED_void_GLenum_GLuint_GLuint_GLsizei;
typedef void (*FUNC_void_GLenum_GLuint_GLuint_GLsizei_GLenum_const_GLvoid___GENPT__)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid * indices);
typedef struct {
    GLenum a1;
    GLuint a2;
    GLuint a3;
    GLsizei a4;
    GLenum a5;
    GLvoid * a6;
} ARGS_void_GLenum_GLuint_GLuint_GLsizei_GLenum_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLuint_GLuint_GLsizei_GLenum_const_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLuint_GLuint_GLsizei_GLenum_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLenum_GLuint_GLuint_GLsizei_GLenum_const_GLvoid___GENPT___GLint)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid * indices, GLint basevertex);
typedef struct {
    GLenum a1;
    GLuint a2;
    GLuint a3;
    GLsizei a4;
    GLenum a5;
    GLvoid * a6;
    GLint a7;
} ARGS_void_GLenum_GLuint_GLuint_GLsizei_GLenum_const_GLvoid___GENPT___GLint;
typedef struct {
    int index;
    ARGS_void_GLenum_GLuint_GLuint_GLsizei_GLenum_const_GLvoid___GENPT___GLint args;
} PACKED_void_GLenum_GLuint_GLuint_GLsizei_GLenum_const_GLvoid___GENPT___GLint;
typedef void (*FUNC_void_GLuint_GLuint_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat)(GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1);
typedef struct {
    GLuint a1;
    GLuint a2;
    GLfloat a3;
    GLfloat a4;
    GLfloat a5;
    GLfloat a6;
    GLfloat a7;
    GLfloat a8;
    GLfloat a9;
    GLfloat a10;
    GLfloat a11;
} ARGS_void_GLuint_GLuint_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat;
typedef struct {
    int index;
    ARGS_void_GLuint_GLuint_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat args;
} PACKED_void_GLuint_GLuint_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat;
typedef void (*FUNC_void_GLenum_GLuint_GLsizei)(GLenum mode, GLuint id, GLsizei instancecount);
typedef struct {
    GLenum a1;
    GLuint a2;
    GLsizei a3;
} ARGS_void_GLenum_GLuint_GLsizei;
typedef struct {
    int index;
    ARGS_void_GLenum_GLuint_GLsizei args;
} PACKED_void_GLenum_GLuint_GLsizei;
typedef void (*FUNC_void_GLsizei)(GLsizei stride);
typedef struct {
    GLsizei a1;
} ARGS_void_GLsizei;
typedef struct {
    int index;
    ARGS_void_GLsizei args;
} PACKED_void_GLsizei;
typedef void (*FUNC_void_GLsizei_const_GLvoid___GENPT__)(GLsizei stride, const GLvoid * pointer);
typedef struct {
    GLsizei a1;
    GLvoid * a2;
} ARGS_void_GLsizei_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLsizei_const_GLvoid___GENPT__ args;
} PACKED_void_GLsizei_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLsizei_GLsizei_const_GLboolean___GENPT__)(GLsizei stride, GLsizei count, const GLboolean * pointer);
typedef struct {
    GLsizei a1;
    GLsizei a2;
    GLboolean * a3;
} ARGS_void_GLsizei_GLsizei_const_GLboolean___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLsizei_GLsizei_const_GLboolean___GENPT__ args;
} PACKED_void_GLsizei_GLsizei_const_GLboolean___GENPT__;
typedef void (*FUNC_void_GLint_const_GLboolean___GENPT___GLint)(GLint stride, const GLboolean * pointer, GLint ptrstride);
typedef struct {
    GLint a1;
    GLboolean * a2;
    GLint a3;
} ARGS_void_GLint_const_GLboolean___GENPT___GLint;
typedef struct {
    int index;
    ARGS_void_GLint_const_GLboolean___GENPT___GLint args;
} PACKED_void_GLint_const_GLboolean___GENPT___GLint;
typedef void (*FUNC_void_const_GLboolean___GENPT__)(const GLboolean * flag);
typedef struct {
    GLboolean * a1;
} ARGS_void_const_GLboolean___GENPT__;
typedef struct {
    int index;
    ARGS_void_const_GLboolean___GENPT__ args;
} PACKED_void_const_GLboolean___GENPT__;
typedef void (*FUNC_void_GLenum_GLint_GLint)(GLenum mode, GLint i1, GLint i2);
typedef struct {
    GLenum a1;
    GLint a2;
    GLint a3;
} ARGS_void_GLenum_GLint_GLint;
typedef struct {
    int index;
    ARGS_void_GLenum_GLint_GLint args;
} PACKED_void_GLenum_GLint_GLint;
typedef void (*FUNC_void_GLenum_GLint_GLint_GLint_GLint)(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
typedef struct {
    GLenum a1;
    GLint a2;
    GLint a3;
    GLint a4;
    GLint a5;
} ARGS_void_GLenum_GLint_GLint_GLint_GLint;
typedef struct {
    int index;
    ARGS_void_GLenum_GLint_GLint_GLint_GLint args;
} PACKED_void_GLenum_GLint_GLint_GLint_GLint;
typedef void (*FUNC_void_GLint_GLint)(GLint i, GLint j);
typedef struct {
    GLint a1;
    GLint a2;
} ARGS_void_GLint_GLint;
typedef struct {
    int index;
    ARGS_void_GLint_GLint args;
} PACKED_void_GLint_GLint;
typedef void (*FUNC_void_GLenum_GLuint_const_GLfloat___GENPT__)(GLenum target, GLuint id, const GLfloat * params);
typedef struct {
    GLenum a1;
    GLuint a2;
    GLfloat * a3;
} ARGS_void_GLenum_GLuint_const_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLuint_const_GLfloat___GENPT__ args;
} PACKED_void_GLenum_GLuint_const_GLfloat___GENPT__;
typedef void (*FUNC_void_GLsizei_GLenum_GLfloat___GENPT__)(GLsizei size, GLenum type, GLfloat * buffer);
typedef struct {
    GLsizei a1;
    GLenum a2;
    GLfloat * a3;
} ARGS_void_GLsizei_GLenum_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLsizei_GLenum_GLfloat___GENPT__ args;
} PACKED_void_GLsizei_GLenum_GLfloat___GENPT__;
typedef void (*FUNC_void_GLsizei_GLenum_const_GLfixed___GENPT__)(GLsizei n, GLenum type, const GLfixed * buffer);
typedef struct {
    GLsizei a1;
    GLenum a2;
    GLfixed * a3;
} ARGS_void_GLsizei_GLenum_const_GLfixed___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLsizei_GLenum_const_GLfixed___GENPT__ args;
} PACKED_void_GLsizei_GLenum_const_GLfixed___GENPT__;
typedef GLsync (*FUNC_GLsync_GLenum_GLbitfield)(GLenum condition, GLbitfield flags);
typedef struct {
    GLenum a1;
    GLbitfield a2;
} ARGS_GLsync_GLenum_GLbitfield;
typedef struct {
    int index;
    ARGS_GLsync_GLenum_GLbitfield args;
} PACKED_GLsync_GLenum_GLbitfield;
typedef GLint (*FUNC_GLint_GLuint___GENPT__)(GLuint * markerp);
typedef struct {
    GLuint * a1;
} ARGS_GLint_GLuint___GENPT__;
typedef struct {
    int index;
    ARGS_GLint_GLuint___GENPT__ args;
} PACKED_GLint_GLuint___GENPT__;
typedef void (*FUNC_void_GLenum_GLintptr_GLsizeiptr)(GLenum target, GLintptr offset, GLsizeiptr length);
typedef struct {
    GLenum a1;
    GLintptr a2;
    GLsizeiptr a3;
} ARGS_void_GLenum_GLintptr_GLsizeiptr;
typedef struct {
    int index;
    ARGS_void_GLenum_GLintptr_GLsizeiptr args;
} PACKED_void_GLenum_GLintptr_GLsizeiptr;
typedef void (*FUNC_void_GLuint_GLintptr_GLsizeiptr)(GLuint buffer, GLintptr offset, GLsizeiptr length);
typedef struct {
    GLuint a1;
    GLintptr a2;
    GLsizeiptr a3;
} ARGS_void_GLuint_GLintptr_GLsizeiptr;
typedef struct {
    int index;
    ARGS_void_GLuint_GLintptr_GLsizeiptr args;
} PACKED_void_GLuint_GLintptr_GLsizeiptr;
typedef void (*FUNC_void_GLsizei_GLvoid___GENPT__)(GLsizei length, GLvoid * pointer);
typedef struct {
    GLsizei a1;
    GLvoid * a2;
} ARGS_void_GLsizei_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLsizei_GLvoid___GENPT__ args;
} PACKED_void_GLsizei_GLvoid___GENPT__;
typedef void (*FUNC_void_GLenum_GLint_const_GLvoid___GENPT___GLint)(GLenum type, GLint stride, const GLvoid * pointer, GLint ptrstride);
typedef struct {
    GLenum a1;
    GLint a2;
    GLvoid * a3;
    GLint a4;
} ARGS_void_GLenum_GLint_const_GLvoid___GENPT___GLint;
typedef struct {
    int index;
    ARGS_void_GLenum_GLint_const_GLvoid___GENPT___GLint args;
} PACKED_void_GLenum_GLint_const_GLvoid___GENPT___GLint;
typedef void (*FUNC_void_GLhalfNV)(GLhalfNV fog);
typedef struct {
    GLhalfNV a1;
} ARGS_void_GLhalfNV;
typedef struct {
    int index;
    ARGS_void_GLhalfNV args;
} PACKED_void_GLhalfNV;
typedef void (*FUNC_void_GLsizei_const_GLfloat___GENPT__)(GLsizei n, const GLfloat * points);
typedef struct {
    GLsizei a1;
    GLfloat * a2;
} ARGS_void_GLsizei_const_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLsizei_const_GLfloat___GENPT__ args;
} PACKED_void_GLsizei_const_GLfloat___GENPT__;
typedef void (*FUNC_void_GLuint_GLsizei_const_GLenum___GENPT__)(GLuint framebuffer, GLsizei n, const GLenum * bufs);
typedef struct {
    GLuint a1;
    GLsizei a2;
    GLenum * a3;
} ARGS_void_GLuint_GLsizei_const_GLenum___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLsizei_const_GLenum___GENPT__ args;
} PACKED_void_GLuint_GLsizei_const_GLenum___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLenum_GLuint)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLenum a3;
    GLuint a4;
} ARGS_void_GLenum_GLenum_GLenum_GLuint;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLenum_GLuint args;
} PACKED_void_GLenum_GLenum_GLenum_GLuint;
typedef void (*FUNC_void_GLenum_GLenum_GLuint_GLint)(GLenum target, GLenum attachment, GLuint texture, GLint level);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLuint a3;
    GLint a4;
} ARGS_void_GLenum_GLenum_GLuint_GLint;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLuint_GLint args;
} PACKED_void_GLenum_GLenum_GLuint_GLint;
typedef void (*FUNC_void_GLenum_GLenum_GLenum_GLuint_GLint)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLenum a3;
    GLuint a4;
    GLint a5;
} ARGS_void_GLenum_GLenum_GLenum_GLuint_GLint;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLenum_GLuint_GLint args;
} PACKED_void_GLenum_GLenum_GLenum_GLuint_GLint;
typedef void (*FUNC_void_GLenum_GLenum_GLenum_GLuint_GLint_GLint)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLenum a3;
    GLuint a4;
    GLint a5;
    GLint a6;
} ARGS_void_GLenum_GLenum_GLenum_GLuint_GLint_GLint;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLenum_GLuint_GLint_GLint args;
} PACKED_void_GLenum_GLenum_GLenum_GLuint_GLint_GLint;
typedef void (*FUNC_void_GLenum_GLenum_GLuint_GLint_GLenum)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLuint a3;
    GLint a4;
    GLenum a5;
} ARGS_void_GLenum_GLenum_GLuint_GLint_GLenum;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLuint_GLint_GLenum args;
} PACKED_void_GLenum_GLenum_GLuint_GLint_GLenum;
typedef void (*FUNC_void_GLenum_GLenum_GLuint_GLint_GLint)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLuint a3;
    GLint a4;
    GLint a5;
} ARGS_void_GLenum_GLenum_GLuint_GLint_GLint;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLuint_GLint_GLint args;
} PACKED_void_GLenum_GLenum_GLuint_GLint_GLint;
typedef void (*FUNC_void_GLdouble_GLdouble_GLdouble_GLdouble_GLdouble_GLdouble)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
typedef struct {
    GLdouble a1 __attribute__ ((aligned(8)));
    GLdouble a2 __attribute__ ((aligned(8)));
    GLdouble a3 __attribute__ ((aligned(8)));
    GLdouble a4 __attribute__ ((aligned(8)));
    GLdouble a5 __attribute__ ((aligned(8)));
    GLdouble a6 __attribute__ ((aligned(8)));
} ARGS_void_GLdouble_GLdouble_GLdouble_GLdouble_GLdouble_GLdouble;
typedef struct {
    int index;
    ARGS_void_GLdouble_GLdouble_GLdouble_GLdouble_GLdouble_GLdouble args;
} PACKED_void_GLdouble_GLdouble_GLdouble_GLdouble_GLdouble_GLdouble;
typedef void (*FUNC_void_GLfixed_GLfixed_GLfixed_GLfixed_GLfixed_GLfixed)(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f);
typedef struct {
    GLfixed a1;
    GLfixed a2;
    GLfixed a3;
    GLfixed a4;
    GLfixed a5;
    GLfixed a6;
} ARGS_void_GLfixed_GLfixed_GLfixed_GLfixed_GLfixed_GLfixed;
typedef struct {
    int index;
    ARGS_void_GLfixed_GLfixed_GLfixed_GLfixed_GLfixed_GLfixed args;
} PACKED_void_GLfixed_GLfixed_GLfixed_GLfixed_GLfixed_GLfixed;
typedef GLuint (*FUNC_GLuint_GLsizei)(GLsizei range);
typedef struct {
    GLsizei a1;
} ARGS_GLuint_GLsizei;
typedef struct {
    int index;
    ARGS_GLuint_GLsizei args;
} PACKED_GLuint_GLsizei;
typedef GLuint (*FUNC_GLuint_GLuint)(GLuint range);
typedef struct {
    GLuint a1;
} ARGS_GLuint_GLuint;
typedef struct {
    int index;
    ARGS_GLuint_GLuint args;
} PACKED_GLuint_GLuint;
typedef void (*FUNC_void_GLenum_GLuint_GLuint___GENPT__)(GLenum identifier, GLuint num, GLuint * names);
typedef struct {
    GLenum a1;
    GLuint a2;
    GLuint * a3;
} ARGS_void_GLenum_GLuint_GLuint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLuint_GLuint___GENPT__ args;
} PACKED_void_GLenum_GLuint_GLuint___GENPT__;
typedef GLuint (*FUNC_GLuint_GLenum_GLenum_GLenum_GLuint)(GLenum datatype, GLenum storagetype, GLenum range, GLuint components);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLenum a3;
    GLuint a4;
} ARGS_GLuint_GLenum_GLenum_GLenum_GLuint;
typedef struct {
    int index;
    ARGS_GLuint_GLenum_GLenum_GLenum_GLuint args;
} PACKED_GLuint_GLenum_GLenum_GLenum_GLuint;
typedef void (*FUNC_void_GLuint_GLuint_GLenum_GLint___GENPT__)(GLuint program, GLuint bufferIndex, GLenum pname, GLint * params);
typedef struct {
    GLuint a1;
    GLuint a2;
    GLenum a3;
    GLint * a4;
} ARGS_void_GLuint_GLuint_GLenum_GLint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLuint_GLenum_GLint___GENPT__ args;
} PACKED_void_GLuint_GLuint_GLenum_GLint___GENPT__;
typedef void (*FUNC_void_GLuint_GLuint_GLsizei_GLsizei___GENPT___GLint___GENPT___GLenum___GENPT___GLchar___GENPT__)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);
typedef struct {
    GLuint a1;
    GLuint a2;
    GLsizei a3;
    GLsizei * a4;
    GLint * a5;
    GLenum * a6;
    GLchar * a7;
} ARGS_void_GLuint_GLuint_GLsizei_GLsizei___GENPT___GLint___GENPT___GLenum___GENPT___GLchar___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLuint_GLsizei_GLsizei___GENPT___GLint___GENPT___GLenum___GENPT___GLchar___GENPT__ args;
} PACKED_void_GLuint_GLuint_GLsizei_GLsizei___GENPT___GLint___GENPT___GLenum___GENPT___GLchar___GENPT__;
typedef void (*FUNC_void_GLhandleARB_GLuint_GLsizei_GLsizei___GENPT___GLint___GENPT___GLenum___GENPT___GLcharARB___GENPT__)(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name);
typedef struct {
    GLhandleARB a1;
    GLuint a2;
    GLsizei a3;
    GLsizei * a4;
    GLint * a5;
    GLenum * a6;
    GLcharARB * a7;
} ARGS_void_GLhandleARB_GLuint_GLsizei_GLsizei___GENPT___GLint___GENPT___GLenum___GENPT___GLcharARB___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLhandleARB_GLuint_GLsizei_GLsizei___GENPT___GLint___GENPT___GLenum___GENPT___GLcharARB___GENPT__ args;
} PACKED_void_GLhandleARB_GLuint_GLsizei_GLsizei___GENPT___GLint___GENPT___GLenum___GENPT___GLcharARB___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_GLuint_GLsizei_GLsizei___GENPT___GLchar___GENPT__)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei * length, GLchar * name);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLuint a3;
    GLsizei a4;
    GLsizei * a5;
    GLchar * a6;
} ARGS_void_GLuint_GLenum_GLuint_GLsizei_GLsizei___GENPT___GLchar___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLuint_GLsizei_GLsizei___GENPT___GLchar___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLuint_GLsizei_GLsizei___GENPT___GLchar___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_GLuint_GLenum_GLint___GENPT__)(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint * values);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLuint a3;
    GLenum a4;
    GLint * a5;
} ARGS_void_GLuint_GLenum_GLuint_GLenum_GLint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLuint_GLenum_GLint___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLuint_GLenum_GLint___GENPT__;
typedef void (*FUNC_void_GLuint_GLuint_GLsizei_GLsizei___GENPT___GLchar___GENPT__)(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformBlockName);
typedef struct {
    GLuint a1;
    GLuint a2;
    GLsizei a3;
    GLsizei * a4;
    GLchar * a5;
} ARGS_void_GLuint_GLuint_GLsizei_GLsizei___GENPT___GLchar___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLuint_GLsizei_GLsizei___GENPT___GLchar___GENPT__ args;
} PACKED_void_GLuint_GLuint_GLsizei_GLsizei___GENPT___GLchar___GENPT__;
typedef void (*FUNC_void_GLuint_GLsizei_const_GLuint___GENPT___GLenum_GLint___GENPT__)(GLuint program, GLsizei uniformCount, const GLuint * uniformIndices, GLenum pname, GLint * params);
typedef struct {
    GLuint a1;
    GLsizei a2;
    GLuint * a3;
    GLenum a4;
    GLint * a5;
} ARGS_void_GLuint_GLsizei_const_GLuint___GENPT___GLenum_GLint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLsizei_const_GLuint___GENPT___GLenum_GLint___GENPT__ args;
} PACKED_void_GLuint_GLsizei_const_GLuint___GENPT___GLenum_GLint___GENPT__;
typedef void (*FUNC_void_GLuint_GLuint_GLsizei_GLsizei___GENPT___GLsizei___GENPT___GLenum___GENPT___GLchar___GENPT__)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name);
typedef struct {
    GLuint a1;
    GLuint a2;
    GLsizei a3;
    GLsizei * a4;
    GLsizei * a5;
    GLenum * a6;
    GLchar * a7;
} ARGS_void_GLuint_GLuint_GLsizei_GLsizei___GENPT___GLsizei___GENPT___GLenum___GENPT___GLchar___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLuint_GLsizei_GLsizei___GENPT___GLsizei___GENPT___GLenum___GENPT___GLchar___GENPT__ args;
} PACKED_void_GLuint_GLuint_GLsizei_GLsizei___GENPT___GLsizei___GENPT___GLenum___GENPT___GLchar___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLfloat___GENPT__)(GLenum array, GLenum pname, GLfloat * params);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLfloat * a3;
} ARGS_void_GLenum_GLenum_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLfloat___GENPT__ args;
} PACKED_void_GLenum_GLenum_GLfloat___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLint___GENPT__)(GLenum array, GLenum pname, GLint * params);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLint * a3;
} ARGS_void_GLenum_GLenum_GLint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLint___GENPT__ args;
} PACKED_void_GLenum_GLenum_GLint___GENPT__;
typedef void (*FUNC_void_GLhandleARB_GLsizei_GLsizei___GENPT___GLhandleARB___GENPT__)(GLhandleARB containerObj, GLsizei maxCount, GLsizei * count, GLhandleARB * obj);
typedef struct {
    GLhandleARB a1;
    GLsizei a2;
    GLsizei * a3;
    GLhandleARB * a4;
} ARGS_void_GLhandleARB_GLsizei_GLsizei___GENPT___GLhandleARB___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLhandleARB_GLsizei_GLsizei___GENPT___GLhandleARB___GENPT__ args;
} PACKED_void_GLhandleARB_GLsizei_GLsizei___GENPT___GLhandleARB___GENPT__;
typedef void (*FUNC_void_GLuint_GLsizei_GLsizei___GENPT___GLuint___GENPT__)(GLuint program, GLsizei maxCount, GLsizei * count, GLuint * obj);
typedef struct {
    GLuint a1;
    GLsizei a2;
    GLsizei * a3;
    GLuint * a4;
} ARGS_void_GLuint_GLsizei_GLsizei___GENPT___GLuint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLsizei_GLsizei___GENPT___GLuint___GENPT__ args;
} PACKED_void_GLuint_GLsizei_GLsizei___GENPT___GLuint___GENPT__;
typedef GLint (*FUNC_GLint_GLuint_const_GLchar___GENPT__)(GLuint program, const GLchar * name);
typedef struct {
    GLuint a1;
    GLchar * a2;
} ARGS_GLint_GLuint_const_GLchar___GENPT__;
typedef struct {
    int index;
    ARGS_GLint_GLuint_const_GLchar___GENPT__ args;
} PACKED_GLint_GLuint_const_GLchar___GENPT__;
typedef GLint (*FUNC_GLint_GLhandleARB_const_GLcharARB___GENPT__)(GLhandleARB programObj, const GLcharARB * name);
typedef struct {
    GLhandleARB a1;
    GLcharARB * a2;
} ARGS_GLint_GLhandleARB_const_GLcharARB___GENPT__;
typedef struct {
    int index;
    ARGS_GLint_GLhandleARB_const_GLcharARB___GENPT__ args;
} PACKED_GLint_GLhandleARB_const_GLcharARB___GENPT__;
typedef void (*FUNC_void_GLenum_GLuint_GLboolean___GENPT__)(GLenum target, GLuint index, GLboolean * data);
typedef struct {
    GLenum a1;
    GLuint a2;
    GLboolean * a3;
} ARGS_void_GLenum_GLuint_GLboolean___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLuint_GLboolean___GENPT__ args;
} PACKED_void_GLenum_GLuint_GLboolean___GENPT__;
typedef void (*FUNC_void_GLenum_GLboolean___GENPT__)(GLenum pname, GLboolean * params);
typedef struct {
    GLenum a1;
    GLboolean * a2;
} ARGS_void_GLenum_GLboolean___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLboolean___GENPT__ args;
} PACKED_void_GLenum_GLboolean___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLint64___GENPT__)(GLenum target, GLenum pname, GLint64 * params);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLint64 * a3;
} ARGS_void_GLenum_GLenum_GLint64___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLint64___GENPT__ args;
} PACKED_void_GLenum_GLenum_GLint64___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLuint64EXT___GENPT__)(GLenum target, GLenum pname, GLuint64EXT * params);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLuint64EXT * a3;
} ARGS_void_GLenum_GLenum_GLuint64EXT___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLuint64EXT___GENPT__ args;
} PACKED_void_GLenum_GLenum_GLuint64EXT___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLvoid___GENPT__)(GLenum target, GLenum pname, GLvoid * params);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLvoid * a3;
} ARGS_void_GLenum_GLenum_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLenum_GLvoid___GENPT__;
typedef void (*FUNC_void_GLenum_GLintptr_GLsizeiptr_GLvoid___GENPT__)(GLenum target, GLintptr offset, GLsizeiptr size, GLvoid * data);
typedef struct {
    GLenum a1;
    GLintptr a2;
    GLsizeiptr a3;
    GLvoid * a4;
} ARGS_void_GLenum_GLintptr_GLsizeiptr_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLintptr_GLsizeiptr_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLintptr_GLsizeiptr_GLvoid___GENPT__;
typedef void (*FUNC_void_GLenum_GLintptrARB_GLsizeiptrARB_GLvoid___GENPT__)(GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid * data);
typedef struct {
    GLenum a1;
    GLintptrARB a2;
    GLsizeiptrARB a3;
    GLvoid * a4;
} ARGS_void_GLenum_GLintptrARB_GLsizeiptrARB_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLintptrARB_GLsizeiptrARB_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLintptrARB_GLsizeiptrARB_GLvoid___GENPT__;
typedef void (*FUNC_void_GLenum_GLfixed___GENPT__)(GLenum plane, GLfixed * equation);
typedef struct {
    GLenum a1;
    GLfixed * a2;
} ARGS_void_GLenum_GLfixed___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLfixed___GENPT__ args;
} PACKED_void_GLenum_GLfixed___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLenum_GLvoid___GENPT__)(GLenum target, GLenum format, GLenum type, GLvoid * table);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLenum a3;
    GLvoid * a4;
} ARGS_void_GLenum_GLenum_GLenum_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLenum_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLenum_GLenum_GLvoid___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLenum_GLenum_GLfloat___GENPT__)(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat * params);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLenum a3;
    GLenum a4;
    GLfloat * a5;
} ARGS_void_GLenum_GLenum_GLenum_GLenum_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLenum_GLenum_GLfloat___GENPT__ args;
} PACKED_void_GLenum_GLenum_GLenum_GLenum_GLfloat___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLenum_GLenum_GLint___GENPT__)(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint * params);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLenum a3;
    GLenum a4;
    GLint * a5;
} ARGS_void_GLenum_GLenum_GLenum_GLenum_GLint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLenum_GLenum_GLint___GENPT__ args;
} PACKED_void_GLenum_GLenum_GLenum_GLenum_GLint___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLenum_GLfloat___GENPT__)(GLenum stage, GLenum portion, GLenum pname, GLfloat * params);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLenum a3;
    GLfloat * a4;
} ARGS_void_GLenum_GLenum_GLenum_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLenum_GLfloat___GENPT__ args;
} PACKED_void_GLenum_GLenum_GLenum_GLfloat___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLenum_GLint___GENPT__)(GLenum stage, GLenum portion, GLenum pname, GLint * params);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLenum a3;
    GLint * a4;
} ARGS_void_GLenum_GLenum_GLenum_GLint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLenum_GLint___GENPT__ args;
} PACKED_void_GLenum_GLenum_GLenum_GLint___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLint_GLvoid___GENPT__)(GLenum texunit, GLenum target, GLint lod, GLvoid * img);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLint a3;
    GLvoid * a4;
} ARGS_void_GLenum_GLenum_GLint_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLint_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLenum_GLint_GLvoid___GENPT__;
typedef void (*FUNC_void_GLenum_GLint_GLvoid___GENPT__)(GLenum target, GLint level, GLvoid * img);
typedef struct {
    GLenum a1;
    GLint a2;
    GLvoid * a3;
} ARGS_void_GLenum_GLint_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLint_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLint_GLvoid___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_GLint_GLvoid___GENPT__)(GLuint texture, GLenum target, GLint lod, GLvoid * img);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLint a3;
    GLvoid * a4;
} ARGS_void_GLuint_GLenum_GLint_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLint_GLvoid___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLint_GLvoid___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLfixed___GENPT__)(GLenum target, GLenum pname, GLfixed * params);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLfixed * a3;
} ARGS_void_GLenum_GLenum_GLfixed___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLfixed___GENPT__ args;
} PACKED_void_GLenum_GLenum_GLfixed___GENPT__;
typedef GLuint (*FUNC_GLuint_GLuint_GLsizei_GLenum___GENPT___GLenum___GENPT___GLuint___GENPT___GLenum___GENPT___GLsizei___GENPT___GLchar___GENPT__)(GLuint count, GLsizei bufsize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog);
typedef struct {
    GLuint a1;
    GLsizei a2;
    GLenum * a3;
    GLenum * a4;
    GLuint * a5;
    GLenum * a6;
    GLsizei * a7;
    GLchar * a8;
} ARGS_GLuint_GLuint_GLsizei_GLenum___GENPT___GLenum___GENPT___GLuint___GENPT___GLenum___GENPT___GLsizei___GENPT___GLchar___GENPT__;
typedef struct {
    int index;
    ARGS_GLuint_GLuint_GLsizei_GLenum___GENPT___GLenum___GENPT___GLuint___GENPT___GLenum___GENPT___GLsizei___GENPT___GLchar___GENPT__ args;
} PACKED_GLuint_GLuint_GLsizei_GLenum___GENPT___GLenum___GENPT___GLuint___GENPT___GLenum___GENPT___GLsizei___GENPT___GLchar___GENPT__;
typedef GLuint (*FUNC_GLuint_GLuint_GLsizei_GLenum___GENPT___GLuint___GENPT___GLuint___GENPT___GLsizei___GENPT___GLchar___GENPT__)(GLuint count, GLsizei bufsize, GLenum * categories, GLuint * severities, GLuint * ids, GLsizei * lengths, GLchar * message);
typedef struct {
    GLuint a1;
    GLsizei a2;
    GLenum * a3;
    GLuint * a4;
    GLuint * a5;
    GLsizei * a6;
    GLchar * a7;
} ARGS_GLuint_GLuint_GLsizei_GLenum___GENPT___GLuint___GENPT___GLuint___GENPT___GLsizei___GENPT___GLchar___GENPT__;
typedef struct {
    int index;
    ARGS_GLuint_GLuint_GLsizei_GLenum___GENPT___GLuint___GENPT___GLuint___GENPT___GLsizei___GENPT___GLchar___GENPT__ args;
} PACKED_GLuint_GLuint_GLsizei_GLenum___GENPT___GLuint___GENPT___GLuint___GENPT___GLsizei___GENPT___GLchar___GENPT__;
typedef void (*FUNC_void_GLenum_GLuint_GLdouble___GENPT__)(GLenum target, GLuint index, GLdouble * data);
typedef struct {
    GLenum a1;
    GLuint a2;
    GLdouble * a3;
} ARGS_void_GLenum_GLuint_GLdouble___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLuint_GLdouble___GENPT__ args;
} PACKED_void_GLenum_GLuint_GLdouble___GENPT__;
typedef GLenum (*FUNC_GLenum)();
typedef struct {
    int index;
} PACKED_GLenum;
typedef void (*FUNC_void_GLuint_GLenum_GLint___GENPT__)(GLuint fence, GLenum pname, GLint * params);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLint * a3;
} ARGS_void_GLuint_GLenum_GLint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLint___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLint___GENPT__;
typedef void (*FUNC_void_GLenum_GLuint_GLfloat___GENPT__)(GLenum target, GLuint index, GLfloat * data);
typedef struct {
    GLenum a1;
    GLuint a2;
    GLfloat * a3;
} ARGS_void_GLenum_GLuint_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLuint_GLfloat___GENPT__ args;
} PACKED_void_GLenum_GLuint_GLfloat___GENPT__;
typedef void (*FUNC_void_GLfloat___GENPT__)(GLfloat * points);
typedef struct {
    GLfloat * a1;
} ARGS_void_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLfloat___GENPT__ args;
} PACKED_void_GLfloat___GENPT__;
typedef void (*FUNC_void_GLenum_GLboolean_GLenum_GLenum_GLvoid___GENPT__)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid * values);
typedef struct {
    GLenum a1;
    GLboolean a2;
    GLenum a3;
    GLenum a4;
    GLvoid * a5;
} ARGS_void_GLenum_GLboolean_GLenum_GLenum_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLboolean_GLenum_GLenum_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLboolean_GLenum_GLenum_GLvoid___GENPT__;
typedef GLuint64 (*FUNC_GLuint64_GLuint_GLint_GLboolean_GLint_GLenum)(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format);
typedef struct {
    GLuint a1;
    GLint a2;
    GLboolean a3;
    GLint a4;
    GLenum a5;
} ARGS_GLuint64_GLuint_GLint_GLboolean_GLint_GLenum;
typedef struct {
    int index;
    ARGS_GLuint64_GLuint_GLint_GLboolean_GLint_GLenum args;
} PACKED_GLuint64_GLuint_GLint_GLboolean_GLint_GLenum;
typedef void (*FUNC_void_GLhandleARB_GLsizei_GLsizei___GENPT___GLcharARB___GENPT__)(GLhandleARB obj, GLsizei maxLength, GLsizei * length, GLcharARB * infoLog);
typedef struct {
    GLhandleARB a1;
    GLsizei a2;
    GLsizei * a3;
    GLcharARB * a4;
} ARGS_void_GLhandleARB_GLsizei_GLsizei___GENPT___GLcharARB___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLhandleARB_GLsizei_GLsizei___GENPT___GLcharARB___GENPT__ args;
} PACKED_void_GLhandleARB_GLsizei_GLsizei___GENPT___GLcharARB___GENPT__;
typedef GLint (*FUNC_GLint)();
typedef struct {
    int index;
} PACKED_GLint;
typedef void (*FUNC_void_GLenum_GLuint_GLint64___GENPT__)(GLenum target, GLuint index, GLint64 * data);
typedef struct {
    GLenum a1;
    GLuint a2;
    GLint64 * a3;
} ARGS_void_GLenum_GLuint_GLint64___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLuint_GLint64___GENPT__ args;
} PACKED_void_GLenum_GLuint_GLint64___GENPT__;
typedef void (*FUNC_void_GLenum_GLint64___GENPT__)(GLenum pname, GLint64 * params);
typedef struct {
    GLenum a1;
    GLint64 * a2;
} ARGS_void_GLenum_GLint64___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLint64___GENPT__ args;
} PACKED_void_GLenum_GLint64___GENPT__;
typedef void (*FUNC_void_GLenum_GLuint_GLint___GENPT__)(GLenum target, GLuint index, GLint * data);
typedef struct {
    GLenum a1;
    GLuint a2;
    GLint * a3;
} ARGS_void_GLenum_GLuint_GLint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLuint_GLint___GENPT__ args;
} PACKED_void_GLenum_GLuint_GLint___GENPT__;
typedef void (*FUNC_void_GLenum_GLuint_GLuint64EXT___GENPT__)(GLenum value, GLuint index, GLuint64EXT * result);
typedef struct {
    GLenum a1;
    GLuint a2;
    GLuint64EXT * a3;
} ARGS_void_GLenum_GLuint_GLuint64EXT___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLuint_GLuint64EXT___GENPT__ args;
} PACKED_void_GLenum_GLuint_GLuint64EXT___GENPT__;
typedef void (*FUNC_void_GLenum_GLuint64EXT___GENPT__)(GLenum value, GLuint64EXT * result);
typedef struct {
    GLenum a1;
    GLuint64EXT * a2;
} ARGS_void_GLenum_GLuint64EXT___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLuint64EXT___GENPT__ args;
} PACKED_void_GLenum_GLuint64EXT___GENPT__;
typedef void (*FUNC_void_GLenum_GLint___GENPT__)(GLenum pname, GLint * params);
typedef struct {
    GLenum a1;
    GLint * a2;
} ARGS_void_GLenum_GLint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLint___GENPT__ args;
} PACKED_void_GLenum_GLint___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLenum_GLsizei_GLint64___GENPT__)(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 * params);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLenum a3;
    GLsizei a4;
    GLint64 * a5;
} ARGS_void_GLenum_GLenum_GLenum_GLsizei_GLint64___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLenum_GLsizei_GLint64___GENPT__ args;
} PACKED_void_GLenum_GLenum_GLenum_GLsizei_GLint64___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLenum_GLsizei_GLint___GENPT__)(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint * params);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLenum a3;
    GLsizei a4;
    GLint * a5;
} ARGS_void_GLenum_GLenum_GLenum_GLsizei_GLint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLenum_GLsizei_GLint___GENPT__ args;
} PACKED_void_GLenum_GLenum_GLenum_GLsizei_GLint___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_GLboolean___GENPT__)(GLuint id, GLenum value, GLboolean * data);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLboolean * a3;
} ARGS_void_GLuint_GLenum_GLboolean___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLboolean___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLboolean___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_GLfloat___GENPT__)(GLuint id, GLenum value, GLfloat * data);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLfloat * a3;
} ARGS_void_GLuint_GLenum_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLfloat___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLfloat___GENPT__;
typedef void (*FUNC_void_GLenum_GLuint_GLenum_GLfloat___GENPT__)(GLenum target, GLuint index, GLenum pname, GLfloat * params);
typedef struct {
    GLenum a1;
    GLuint a2;
    GLenum a3;
    GLfloat * a4;
} ARGS_void_GLenum_GLuint_GLenum_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLuint_GLenum_GLfloat___GENPT__ args;
} PACKED_void_GLenum_GLuint_GLenum_GLfloat___GENPT__;
typedef void (*FUNC_void_GLenum_GLuint_GLenum_GLint___GENPT__)(GLenum target, GLuint index, GLenum pname, GLint * params);
typedef struct {
    GLenum a1;
    GLuint a2;
    GLenum a3;
    GLint * a4;
} ARGS_void_GLenum_GLuint_GLenum_GLint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLuint_GLenum_GLint___GENPT__ args;
} PACKED_void_GLenum_GLuint_GLenum_GLint___GENPT__;
typedef void (*FUNC_void_GLenum_GLuint_GLenum_GLsizei_GLsizei_GLboolean_GLvoid___GENPT__)(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, GLvoid * points);
typedef struct {
    GLenum a1;
    GLuint a2;
    GLenum a3;
    GLsizei a4;
    GLsizei a5;
    GLboolean a6;
    GLvoid * a7;
} ARGS_void_GLenum_GLuint_GLenum_GLsizei_GLsizei_GLboolean_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLuint_GLenum_GLsizei_GLsizei_GLboolean_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLuint_GLenum_GLsizei_GLsizei_GLboolean_GLvoid___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLdouble___GENPT__)(GLenum target, GLenum query, GLdouble * v);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLdouble * a3;
} ARGS_void_GLenum_GLenum_GLdouble___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLdouble___GENPT__ args;
} PACKED_void_GLenum_GLenum_GLdouble___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLenum_GLdouble___GENPT__)(GLenum texunit, GLenum coord, GLenum pname, GLdouble * params);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLenum a3;
    GLdouble * a4;
} ARGS_void_GLenum_GLenum_GLenum_GLdouble___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLenum_GLdouble___GENPT__ args;
} PACKED_void_GLenum_GLenum_GLenum_GLdouble___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLint_GLenum_GLenum_GLvoid___GENPT__)(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, GLvoid * pixels);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLint a3;
    GLenum a4;
    GLenum a5;
    GLvoid * a6;
} ARGS_void_GLenum_GLenum_GLint_GLenum_GLenum_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLint_GLenum_GLenum_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLenum_GLint_GLenum_GLenum_GLvoid___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLint_GLenum_GLfloat___GENPT__)(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat * params);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLint a3;
    GLenum a4;
    GLfloat * a5;
} ARGS_void_GLenum_GLenum_GLint_GLenum_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLint_GLenum_GLfloat___GENPT__ args;
} PACKED_void_GLenum_GLenum_GLint_GLenum_GLfloat___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLint_GLenum_GLint___GENPT__)(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint * params);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLint a3;
    GLenum a4;
    GLint * a5;
} ARGS_void_GLenum_GLenum_GLint_GLenum_GLint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLint_GLenum_GLint___GENPT__ args;
} PACKED_void_GLenum_GLenum_GLint_GLenum_GLint___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLenum_GLuint___GENPT__)(GLenum texunit, GLenum target, GLenum pname, GLuint * params);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLenum a3;
    GLuint * a4;
} ARGS_void_GLenum_GLenum_GLenum_GLuint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLenum_GLuint___GENPT__ args;
} PACKED_void_GLenum_GLenum_GLenum_GLuint___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_GLuint64EXT___GENPT__)(GLuint buffer, GLenum pname, GLuint64EXT * params);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLuint64EXT * a3;
} ARGS_void_GLuint_GLenum_GLuint64EXT___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLuint64EXT___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLuint64EXT___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_GLvoid___GENPT__)(GLuint buffer, GLenum pname, GLvoid * params);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLvoid * a3;
} ARGS_void_GLuint_GLenum_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLvoid___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLvoid___GENPT__;
typedef void (*FUNC_void_GLuint_GLintptr_GLsizeiptr_GLvoid___GENPT__)(GLuint buffer, GLintptr offset, GLsizeiptr size, GLvoid * data);
typedef struct {
    GLuint a1;
    GLintptr a2;
    GLsizeiptr a3;
    GLvoid * a4;
} ARGS_void_GLuint_GLintptr_GLsizeiptr_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLintptr_GLsizeiptr_GLvoid___GENPT__ args;
} PACKED_void_GLuint_GLintptr_GLsizeiptr_GLvoid___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_GLenum_GLint___GENPT__)(GLuint framebuffer, GLenum attachment, GLenum pname, GLint * params);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLenum a3;
    GLint * a4;
} ARGS_void_GLuint_GLenum_GLenum_GLint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLenum_GLint___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLenum_GLint___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_GLuint_GLint___GENPT__)(GLuint program, GLenum target, GLuint index, GLint * params);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLuint a3;
    GLint * a4;
} ARGS_void_GLuint_GLenum_GLuint_GLint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLuint_GLint___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLuint_GLint___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_GLuint_GLuint___GENPT__)(GLuint program, GLenum target, GLuint index, GLuint * params);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLuint a3;
    GLuint * a4;
} ARGS_void_GLuint_GLenum_GLuint_GLuint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLuint_GLuint___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLuint_GLuint___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_GLuint_GLdouble___GENPT__)(GLuint program, GLenum target, GLuint index, GLdouble * params);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLuint a3;
    GLdouble * a4;
} ARGS_void_GLuint_GLenum_GLuint_GLdouble___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLuint_GLdouble___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLuint_GLdouble___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_GLuint_GLfloat___GENPT__)(GLuint program, GLenum target, GLuint index, GLfloat * params);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLuint a3;
    GLfloat * a4;
} ARGS_void_GLuint_GLenum_GLuint_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLuint_GLfloat___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLuint_GLfloat___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_GLenum_GLvoid___GENPT__)(GLuint program, GLenum target, GLenum pname, GLvoid * string);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLenum a3;
    GLvoid * a4;
} ARGS_void_GLuint_GLenum_GLenum_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLenum_GLvoid___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLenum_GLvoid___GENPT__;
typedef void (*FUNC_void_GLint_const_GLchar___GENPT___GLsizei_GLint___GENPT___GLchar___GENPT__)(GLint namelen, const GLchar * name, GLsizei bufSize, GLint * stringlen, GLchar * string);
typedef struct {
    GLint a1;
    GLchar * a2;
    GLsizei a3;
    GLint * a4;
    GLchar * a5;
} ARGS_void_GLint_const_GLchar___GENPT___GLsizei_GLint___GENPT___GLchar___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLint_const_GLchar___GENPT___GLsizei_GLint___GENPT___GLchar___GENPT__ args;
} PACKED_void_GLint_const_GLchar___GENPT___GLsizei_GLint___GENPT___GLchar___GENPT__;
typedef void (*FUNC_void_GLint_const_GLchar___GENPT___GLenum_GLint___GENPT__)(GLint namelen, const GLchar * name, GLenum pname, GLint * params);
typedef struct {
    GLint a1;
    GLchar * a2;
    GLenum a3;
    GLint * a4;
} ARGS_void_GLint_const_GLchar___GENPT___GLenum_GLint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLint_const_GLchar___GENPT___GLenum_GLint___GENPT__ args;
} PACKED_void_GLint_const_GLchar___GENPT___GLenum_GLint___GENPT__;
typedef void (*FUNC_void_GLenum_GLuint_GLsizei_GLsizei___GENPT___GLchar___GENPT__)(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei * length, GLchar * label);
typedef struct {
    GLenum a1;
    GLuint a2;
    GLsizei a3;
    GLsizei * a4;
    GLchar * a5;
} ARGS_void_GLenum_GLuint_GLsizei_GLsizei___GENPT___GLchar___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLuint_GLsizei_GLsizei___GENPT___GLchar___GENPT__ args;
} PACKED_void_GLenum_GLuint_GLsizei_GLsizei___GENPT___GLchar___GENPT__;
typedef void (*FUNC_void_GLhandleARB_GLenum_GLfloat___GENPT__)(GLhandleARB obj, GLenum pname, GLfloat * params);
typedef struct {
    GLhandleARB a1;
    GLenum a2;
    GLfloat * a3;
} ARGS_void_GLhandleARB_GLenum_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLhandleARB_GLenum_GLfloat___GENPT__ args;
} PACKED_void_GLhandleARB_GLenum_GLfloat___GENPT__;
typedef void (*FUNC_void_GLhandleARB_GLenum_GLint___GENPT__)(GLhandleARB obj, GLenum pname, GLint * params);
typedef struct {
    GLhandleARB a1;
    GLenum a2;
    GLint * a3;
} ARGS_void_GLhandleARB_GLenum_GLint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLhandleARB_GLenum_GLint___GENPT__ args;
} PACKED_void_GLhandleARB_GLenum_GLint___GENPT__;
typedef void (*FUNC_void_const_void___GENPT___GLsizei_GLsizei___GENPT___GLchar___GENPT__)(const void * ptr, GLsizei bufSize, GLsizei * length, GLchar * label);
typedef struct {
    void * a1;
    GLsizei a2;
    GLsizei * a3;
    GLchar * a4;
} ARGS_void_const_void___GENPT___GLsizei_GLsizei___GENPT___GLchar___GENPT__;
typedef struct {
    int index;
    ARGS_void_const_void___GENPT___GLsizei_GLsizei___GENPT___GLchar___GENPT__ args;
} PACKED_void_const_void___GENPT___GLsizei_GLsizei___GENPT___GLchar___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_GLuint___GENPT__)(GLuint id, GLenum pname, GLuint * params);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLuint * a3;
} ARGS_void_GLuint_GLenum_GLuint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLuint___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLuint___GENPT__;
typedef void (*FUNC_void_GLuint_GLubyte___GENPT__)(GLuint path, GLubyte * commands);
typedef struct {
    GLuint a1;
    GLubyte * a2;
} ARGS_void_GLuint_GLubyte___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLubyte___GENPT__ args;
} PACKED_void_GLuint_GLubyte___GENPT__;
typedef void (*FUNC_void_GLuint_GLfloat___GENPT__)(GLuint path, GLfloat * coords);
typedef struct {
    GLuint a1;
    GLfloat * a2;
} ARGS_void_GLuint_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLfloat___GENPT__ args;
} PACKED_void_GLuint_GLfloat___GENPT__;
typedef GLfloat (*FUNC_GLfloat_GLuint_GLsizei_GLsizei)(GLuint path, GLsizei startSegment, GLsizei numSegments);
typedef struct {
    GLuint a1;
    GLsizei a2;
    GLsizei a3;
} ARGS_GLfloat_GLuint_GLsizei_GLsizei;
typedef struct {
    int index;
    ARGS_GLfloat_GLuint_GLsizei_GLsizei args;
} PACKED_GLfloat_GLuint_GLsizei_GLsizei;
typedef void (*FUNC_void_GLbitfield_GLuint_GLsizei_GLsizei_GLfloat___GENPT__)(GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat * metrics);
typedef struct {
    GLbitfield a1;
    GLuint a2;
    GLsizei a3;
    GLsizei a4;
    GLfloat * a5;
} ARGS_void_GLbitfield_GLuint_GLsizei_GLsizei_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLbitfield_GLuint_GLsizei_GLsizei_GLfloat___GENPT__ args;
} PACKED_void_GLbitfield_GLuint_GLsizei_GLsizei_GLfloat___GENPT__;
typedef void (*FUNC_void_GLbitfield_GLsizei_GLenum_const_GLvoid___GENPT___GLuint_GLsizei_GLfloat___GENPT__)(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const GLvoid * paths, GLuint pathBase, GLsizei stride, GLfloat * metrics);
typedef struct {
    GLbitfield a1;
    GLsizei a2;
    GLenum a3;
    GLvoid * a4;
    GLuint a5;
    GLsizei a6;
    GLfloat * a7;
} ARGS_void_GLbitfield_GLsizei_GLenum_const_GLvoid___GENPT___GLuint_GLsizei_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLbitfield_GLsizei_GLenum_const_GLvoid___GENPT___GLuint_GLsizei_GLfloat___GENPT__ args;
} PACKED_void_GLbitfield_GLsizei_GLenum_const_GLvoid___GENPT___GLuint_GLsizei_GLfloat___GENPT__;
typedef void (*FUNC_void_GLenum_GLsizei_GLenum_const_GLvoid___GENPT___GLuint_GLfloat_GLfloat_GLenum_GLfloat___GENPT__)(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const GLvoid * paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat * returnedSpacing);
typedef struct {
    GLenum a1;
    GLsizei a2;
    GLenum a3;
    GLvoid * a4;
    GLuint a5;
    GLfloat a6;
    GLfloat a7;
    GLenum a8;
    GLfloat * a9;
} ARGS_void_GLenum_GLsizei_GLenum_const_GLvoid___GENPT___GLuint_GLfloat_GLfloat_GLenum_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLsizei_GLenum_const_GLvoid___GENPT___GLuint_GLfloat_GLfloat_GLenum_GLfloat___GENPT__ args;
} PACKED_void_GLenum_GLsizei_GLenum_const_GLvoid___GENPT___GLuint_GLfloat_GLfloat_GLenum_GLfloat___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_GLsizei_GLuint___GENPT___GLint___GENPT__)(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint * data, GLint * bytesWritten);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLsizei a3;
    GLuint * a4;
    GLint * a5;
} ARGS_void_GLuint_GLenum_GLsizei_GLuint___GENPT___GLint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLsizei_GLuint___GENPT___GLint___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLsizei_GLuint___GENPT___GLint___GENPT__;
typedef void (*FUNC_void_GLuint_GLuint_GLenum_GLvoid___GENPT__)(GLuint group, GLuint counter, GLenum pname, GLvoid * data);
typedef struct {
    GLuint a1;
    GLuint a2;
    GLenum a3;
    GLvoid * a4;
} ARGS_void_GLuint_GLuint_GLenum_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLuint_GLenum_GLvoid___GENPT__ args;
} PACKED_void_GLuint_GLuint_GLenum_GLvoid___GENPT__;
typedef void (*FUNC_void_GLuint_GLint___GENPT___GLint___GENPT___GLsizei_GLuint___GENPT__)(GLuint group, GLint * numCounters, GLint * maxActiveCounters, GLsizei counterSize, GLuint * counters);
typedef struct {
    GLuint a1;
    GLint * a2;
    GLint * a3;
    GLsizei a4;
    GLuint * a5;
} ARGS_void_GLuint_GLint___GENPT___GLint___GENPT___GLsizei_GLuint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint___GENPT___GLint___GENPT___GLsizei_GLuint___GENPT__ args;
} PACKED_void_GLuint_GLint___GENPT___GLint___GENPT___GLsizei_GLuint___GENPT__;
typedef void (*FUNC_void_GLuint_GLsizei_GLsizei___GENPT___GLchar___GENPT__)(GLuint group, GLsizei bufSize, GLsizei * length, GLchar * groupString);
typedef struct {
    GLuint a1;
    GLsizei a2;
    GLsizei * a3;
    GLchar * a4;
} ARGS_void_GLuint_GLsizei_GLsizei___GENPT___GLchar___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLsizei_GLsizei___GENPT___GLchar___GENPT__ args;
} PACKED_void_GLuint_GLsizei_GLsizei___GENPT___GLchar___GENPT__;
typedef void (*FUNC_void_GLint___GENPT___GLsizei_GLuint___GENPT__)(GLint * numGroups, GLsizei groupsSize, GLuint * groups);
typedef struct {
    GLint * a1;
    GLsizei a2;
    GLuint * a3;
} ARGS_void_GLint___GENPT___GLsizei_GLuint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLint___GENPT___GLsizei_GLuint___GENPT__ args;
} PACKED_void_GLint___GENPT___GLsizei_GLuint___GENPT__;
typedef void (*FUNC_void_GLenum_GLuint___GENPT__)(GLenum map, GLuint * values);
typedef struct {
    GLenum a1;
    GLuint * a2;
} ARGS_void_GLenum_GLuint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLuint___GENPT__ args;
} PACKED_void_GLenum_GLuint___GENPT__;
typedef void (*FUNC_void_GLenum_GLushort___GENPT__)(GLenum map, GLushort * values);
typedef struct {
    GLenum a1;
    GLushort * a2;
} ARGS_void_GLenum_GLushort___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLushort___GENPT__ args;
} PACKED_void_GLenum_GLushort___GENPT__;
typedef void (*FUNC_void_GLenum_GLint_GLfixed___GENPT__)(GLenum map, GLint size, GLfixed * values);
typedef struct {
    GLenum a1;
    GLint a2;
    GLfixed * a3;
} ARGS_void_GLenum_GLint_GLfixed___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLint_GLfixed___GENPT__ args;
} PACKED_void_GLenum_GLint_GLfixed___GENPT__;
typedef void (*FUNC_void_GLenum_GLuint_GLvoid___GENPT__)(GLenum target, GLuint index, GLvoid * data);
typedef struct {
    GLenum a1;
    GLuint a2;
    GLvoid * a3;
} ARGS_void_GLenum_GLuint_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLuint_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLuint_GLvoid___GENPT__;
typedef void (*FUNC_void_GLenum_GLvoid___GENPT____GENPT__)(GLenum pname, GLvoid ** params);
typedef struct {
    GLenum a1;
    GLvoid ** a2;
} ARGS_void_GLenum_GLvoid___GENPT____GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLvoid___GENPT____GENPT__ args;
} PACKED_void_GLenum_GLvoid___GENPT____GENPT__;
typedef void (*FUNC_void_GLenum_GLvoid___GENPT__)(GLenum pname, GLvoid * params);
typedef struct {
    GLenum a1;
    GLvoid * a2;
} ARGS_void_GLenum_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLvoid___GENPT__;
typedef void (*FUNC_void_GLubyte___GENPT__)(GLubyte * mask);
typedef struct {
    GLubyte * a1;
} ARGS_void_GLubyte___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLubyte___GENPT__ args;
} PACKED_void_GLubyte___GENPT__;
typedef void (*FUNC_void_GLuint_GLsizei_GLsizei___GENPT___GLenum___GENPT___GLvoid___GENPT__)(GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, GLvoid * binary);
typedef struct {
    GLuint a1;
    GLsizei a2;
    GLsizei * a3;
    GLenum * a4;
    GLvoid * a5;
} ARGS_void_GLuint_GLsizei_GLsizei___GENPT___GLenum___GENPT___GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLsizei_GLsizei___GENPT___GLenum___GENPT___GLvoid___GENPT__ args;
} PACKED_void_GLuint_GLsizei_GLsizei___GENPT___GLenum___GENPT___GLvoid___GENPT__;
typedef void (*FUNC_void_GLuint_GLsizei_const_GLubyte___GENPT___GLdouble___GENPT__)(GLuint id, GLsizei len, const GLubyte * name, GLdouble * params);
typedef struct {
    GLuint a1;
    GLsizei a2;
    GLubyte * a3;
    GLdouble * a4;
} ARGS_void_GLuint_GLsizei_const_GLubyte___GENPT___GLdouble___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLsizei_const_GLubyte___GENPT___GLdouble___GENPT__ args;
} PACKED_void_GLuint_GLsizei_const_GLubyte___GENPT___GLdouble___GENPT__;
typedef void (*FUNC_void_GLuint_GLsizei_const_GLubyte___GENPT___GLfloat___GENPT__)(GLuint id, GLsizei len, const GLubyte * name, GLfloat * params);
typedef struct {
    GLuint a1;
    GLsizei a2;
    GLubyte * a3;
    GLfloat * a4;
} ARGS_void_GLuint_GLsizei_const_GLubyte___GENPT___GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLsizei_const_GLubyte___GENPT___GLfloat___GENPT__ args;
} PACKED_void_GLuint_GLsizei_const_GLubyte___GENPT___GLfloat___GENPT__;
typedef void (*FUNC_void_GLenum_GLuint_GLenum_GLdouble___GENPT__)(GLenum target, GLuint index, GLenum pname, GLdouble * params);
typedef struct {
    GLenum a1;
    GLuint a2;
    GLenum a3;
    GLdouble * a4;
} ARGS_void_GLenum_GLuint_GLenum_GLdouble___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLuint_GLenum_GLdouble___GENPT__ args;
} PACKED_void_GLenum_GLuint_GLenum_GLdouble___GENPT__;
typedef GLuint (*FUNC_GLuint_GLuint_GLenum_const_GLchar___GENPT__)(GLuint program, GLenum programInterface, const GLchar * name);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLchar * a3;
} ARGS_GLuint_GLuint_GLenum_const_GLchar___GENPT__;
typedef struct {
    int index;
    ARGS_GLuint_GLuint_GLenum_const_GLchar___GENPT__ args;
} PACKED_GLuint_GLuint_GLenum_const_GLchar___GENPT__;
typedef GLint (*FUNC_GLint_GLuint_GLenum_const_GLchar___GENPT__)(GLuint program, GLenum programInterface, const GLchar * name);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLchar * a3;
} ARGS_GLint_GLuint_GLenum_const_GLchar___GENPT__;
typedef struct {
    int index;
    ARGS_GLint_GLuint_GLenum_const_GLchar___GENPT__ args;
} PACKED_GLint_GLuint_GLenum_const_GLchar___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_GLuint_GLsizei_const_GLenum___GENPT___GLsizei_GLsizei___GENPT___GLint___GENPT__)(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei bufSize, GLsizei * length, GLint * params);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLuint a3;
    GLsizei a4;
    GLenum * a5;
    GLsizei a6;
    GLsizei * a7;
    GLint * a8;
} ARGS_void_GLuint_GLenum_GLuint_GLsizei_const_GLenum___GENPT___GLsizei_GLsizei___GENPT___GLint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLuint_GLsizei_const_GLenum___GENPT___GLsizei_GLsizei___GENPT___GLint___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLuint_GLsizei_const_GLenum___GENPT___GLsizei_GLsizei___GENPT___GLint___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_GLubyte___GENPT__)(GLuint id, GLenum pname, GLubyte * program);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLubyte * a3;
} ARGS_void_GLuint_GLenum_GLubyte___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLubyte___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLubyte___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_GLint64___GENPT__)(GLuint id, GLenum pname, GLint64 * params);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLint64 * a3;
} ARGS_void_GLuint_GLenum_GLint64___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLint64___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLint64___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_GLint64EXT___GENPT__)(GLuint id, GLenum pname, GLint64EXT * params);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLint64EXT * a3;
} ARGS_void_GLuint_GLenum_GLint64EXT___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLint64EXT___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLint64EXT___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_GLuint64___GENPT__)(GLuint id, GLenum pname, GLuint64 * params);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLuint64 * a3;
} ARGS_void_GLuint_GLenum_GLuint64___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLuint64___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLuint64___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLenum_GLvoid___GENPT___GLvoid___GENPT___GLvoid___GENPT__)(GLenum target, GLenum format, GLenum type, GLvoid * row, GLvoid * column, GLvoid * span);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLenum a3;
    GLvoid * a4;
    GLvoid * a5;
    GLvoid * a6;
} ARGS_void_GLenum_GLenum_GLenum_GLvoid___GENPT___GLvoid___GENPT___GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLenum_GLvoid___GENPT___GLvoid___GENPT___GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLenum_GLenum_GLvoid___GENPT___GLvoid___GENPT___GLvoid___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLint___GENPT___GLint___GENPT__)(GLenum shadertype, GLenum precisiontype, GLint * range, GLint * precision);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLint * a3;
    GLint * a4;
} ARGS_void_GLenum_GLenum_GLint___GENPT___GLint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLint___GENPT___GLint___GENPT__ args;
} PACKED_void_GLenum_GLenum_GLint___GENPT___GLint___GENPT__;
typedef const GLubyte * (*FUNC_const_GLubyte___GENPT___GLenum)(GLenum name);
typedef struct {
    GLenum a1;
} ARGS_const_GLubyte___GENPT___GLenum;
typedef struct {
    int index;
    ARGS_const_GLubyte___GENPT___GLenum args;
} PACKED_const_GLubyte___GENPT___GLenum;
typedef const GLubyte * (*FUNC_const_GLubyte___GENPT___GLenum_GLuint)(GLenum name, GLuint index);
typedef struct {
    GLenum a1;
    GLuint a2;
} ARGS_const_GLubyte___GENPT___GLenum_GLuint;
typedef struct {
    int index;
    ARGS_const_GLubyte___GENPT___GLenum_GLuint args;
} PACKED_const_GLubyte___GENPT___GLenum_GLuint;
typedef void (*FUNC_void_GLsync_GLenum_GLsizei_GLsizei___GENPT___GLint___GENPT__)(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei * length, GLint * values);
typedef struct {
    GLsync a1;
    GLenum a2;
    GLsizei a3;
    GLsizei * a4;
    GLint * a5;
} ARGS_void_GLsync_GLenum_GLsizei_GLsizei___GENPT___GLint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLsync_GLenum_GLsizei_GLsizei___GENPT___GLint___GENPT__ args;
} PACKED_void_GLsync_GLenum_GLsizei_GLsizei___GENPT___GLint___GENPT__;
typedef void (*FUNC_void_GLenum_GLint_GLenum_GLenum_GLvoid___GENPT__)(GLenum target, GLint level, GLenum format, GLenum type, GLvoid * pixels);
typedef struct {
    GLenum a1;
    GLint a2;
    GLenum a3;
    GLenum a4;
    GLvoid * a5;
} ARGS_void_GLenum_GLint_GLenum_GLenum_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLint_GLenum_GLenum_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLint_GLenum_GLenum_GLvoid___GENPT__;
typedef void (*FUNC_void_GLenum_GLint_GLenum_GLfloat___GENPT__)(GLenum target, GLint level, GLenum pname, GLfloat * params);
typedef struct {
    GLenum a1;
    GLint a2;
    GLenum a3;
    GLfloat * a4;
} ARGS_void_GLenum_GLint_GLenum_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLint_GLenum_GLfloat___GENPT__ args;
} PACKED_void_GLenum_GLint_GLenum_GLfloat___GENPT__;
typedef void (*FUNC_void_GLenum_GLint_GLenum_GLint___GENPT__)(GLenum target, GLint level, GLenum pname, GLint * params);
typedef struct {
    GLenum a1;
    GLint a2;
    GLenum a3;
    GLint * a4;
} ARGS_void_GLenum_GLint_GLenum_GLint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLint_GLenum_GLint___GENPT__ args;
} PACKED_void_GLenum_GLint_GLenum_GLint___GENPT__;
typedef void (*FUNC_void_GLenum_GLint_GLenum_GLfixed___GENPT__)(GLenum target, GLint level, GLenum pname, GLfixed * params);
typedef struct {
    GLenum a1;
    GLint a2;
    GLenum a3;
    GLfixed * a4;
} ARGS_void_GLenum_GLint_GLenum_GLfixed___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLint_GLenum_GLfixed___GENPT__ args;
} PACKED_void_GLenum_GLint_GLenum_GLfixed___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLuint___GENPT__)(GLenum target, GLenum pname, GLuint * params);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLuint * a3;
} ARGS_void_GLenum_GLenum_GLuint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLuint___GENPT__ args;
} PACKED_void_GLenum_GLenum_GLuint___GENPT__;
typedef GLuint64 (*FUNC_GLuint64_GLuint)(GLuint texture);
typedef struct {
    GLuint a1;
} ARGS_GLuint64_GLuint;
typedef struct {
    int index;
    ARGS_GLuint64_GLuint args;
} PACKED_GLuint64_GLuint;
typedef void (*FUNC_void_GLuint_GLenum_GLint_GLenum_GLenum_GLvoid___GENPT__)(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, GLvoid * pixels);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLint a3;
    GLenum a4;
    GLenum a5;
    GLvoid * a6;
} ARGS_void_GLuint_GLenum_GLint_GLenum_GLenum_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLint_GLenum_GLenum_GLvoid___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLint_GLenum_GLenum_GLvoid___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_GLint_GLenum_GLfloat___GENPT__)(GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat * params);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLint a3;
    GLenum a4;
    GLfloat * a5;
} ARGS_void_GLuint_GLenum_GLint_GLenum_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLint_GLenum_GLfloat___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLint_GLenum_GLfloat___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_GLint_GLenum_GLint___GENPT__)(GLuint texture, GLenum target, GLint level, GLenum pname, GLint * params);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLint a3;
    GLenum a4;
    GLint * a5;
} ARGS_void_GLuint_GLenum_GLint_GLenum_GLint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLint_GLenum_GLint___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLint_GLenum_GLint___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_GLenum_GLuint___GENPT__)(GLuint texture, GLenum target, GLenum pname, GLuint * params);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLenum a3;
    GLuint * a4;
} ARGS_void_GLuint_GLenum_GLenum_GLuint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLenum_GLuint___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLenum_GLuint___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_GLenum_GLfloat___GENPT__)(GLuint texture, GLenum target, GLenum pname, GLfloat * params);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLenum a3;
    GLfloat * a4;
} ARGS_void_GLuint_GLenum_GLenum_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLenum_GLfloat___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLenum_GLfloat___GENPT__;
typedef GLuint64 (*FUNC_GLuint64_GLuint_GLuint)(GLuint texture, GLuint sampler);
typedef struct {
    GLuint a1;
    GLuint a2;
} ARGS_GLuint64_GLuint_GLuint;
typedef struct {
    int index;
    ARGS_GLuint64_GLuint_GLuint args;
} PACKED_GLuint64_GLuint_GLuint;
typedef void (*FUNC_void_GLuint_GLuint_GLint___GENPT__)(GLuint program, GLuint index, GLint * location);
typedef struct {
    GLuint a1;
    GLuint a2;
    GLint * a3;
} ARGS_void_GLuint_GLuint_GLint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLuint_GLint___GENPT__ args;
} PACKED_void_GLuint_GLuint_GLint___GENPT__;
typedef GLuint (*FUNC_GLuint_GLuint_const_GLchar___GENPT__)(GLuint program, const GLchar * uniformBlockName);
typedef struct {
    GLuint a1;
    GLchar * a2;
} ARGS_GLuint_GLuint_const_GLchar___GENPT__;
typedef struct {
    int index;
    ARGS_GLuint_GLuint_const_GLchar___GENPT__ args;
} PACKED_GLuint_GLuint_const_GLchar___GENPT__;
typedef GLint (*FUNC_GLint_GLuint_GLint)(GLuint program, GLint location);
typedef struct {
    GLuint a1;
    GLint a2;
} ARGS_GLint_GLuint_GLint;
typedef struct {
    int index;
    ARGS_GLint_GLuint_GLint args;
} PACKED_GLint_GLuint_GLint;
typedef void (*FUNC_void_GLuint_GLsizei_GLchar__GENPT__const___GENPT___GLuint___GENPT__)(GLuint program, GLsizei uniformCount, GLchar*const * uniformNames, GLuint * uniformIndices);
typedef struct {
    GLuint a1;
    GLsizei a2;
    GLchar*const * a3;
    GLuint * a4;
} ARGS_void_GLuint_GLsizei_GLchar__GENPT__const___GENPT___GLuint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLsizei_GLchar__GENPT__const___GENPT___GLuint___GENPT__ args;
} PACKED_void_GLuint_GLsizei_GLchar__GENPT__const___GENPT___GLuint___GENPT__;
typedef GLintptr (*FUNC_GLintptr_GLuint_GLint)(GLuint program, GLint location);
typedef struct {
    GLuint a1;
    GLint a2;
} ARGS_GLintptr_GLuint_GLint;
typedef struct {
    int index;
    ARGS_GLintptr_GLuint_GLint args;
} PACKED_GLintptr_GLuint_GLint;
typedef void (*FUNC_void_GLenum_GLint_GLuint___GENPT__)(GLenum shadertype, GLint location, GLuint * params);
typedef struct {
    GLenum a1;
    GLint a2;
    GLuint * a3;
} ARGS_void_GLenum_GLint_GLuint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLint_GLuint___GENPT__ args;
} PACKED_void_GLenum_GLint_GLuint___GENPT__;
typedef void (*FUNC_void_GLuint_GLint_GLdouble___GENPT__)(GLuint program, GLint location, GLdouble * params);
typedef struct {
    GLuint a1;
    GLint a2;
    GLdouble * a3;
} ARGS_void_GLuint_GLint_GLdouble___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint_GLdouble___GENPT__ args;
} PACKED_void_GLuint_GLint_GLdouble___GENPT__;
typedef void (*FUNC_void_GLuint_GLint_GLfloat___GENPT__)(GLuint program, GLint location, GLfloat * params);
typedef struct {
    GLuint a1;
    GLint a2;
    GLfloat * a3;
} ARGS_void_GLuint_GLint_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint_GLfloat___GENPT__ args;
} PACKED_void_GLuint_GLint_GLfloat___GENPT__;
typedef void (*FUNC_void_GLhandleARB_GLint_GLfloat___GENPT__)(GLhandleARB programObj, GLint location, GLfloat * params);
typedef struct {
    GLhandleARB a1;
    GLint a2;
    GLfloat * a3;
} ARGS_void_GLhandleARB_GLint_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLhandleARB_GLint_GLfloat___GENPT__ args;
} PACKED_void_GLhandleARB_GLint_GLfloat___GENPT__;
typedef void (*FUNC_void_GLuint_GLint_GLint64EXT___GENPT__)(GLuint program, GLint location, GLint64EXT * params);
typedef struct {
    GLuint a1;
    GLint a2;
    GLint64EXT * a3;
} ARGS_void_GLuint_GLint_GLint64EXT___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint_GLint64EXT___GENPT__ args;
} PACKED_void_GLuint_GLint_GLint64EXT___GENPT__;
typedef void (*FUNC_void_GLuint_GLint_GLint___GENPT__)(GLuint program, GLint location, GLint * params);
typedef struct {
    GLuint a1;
    GLint a2;
    GLint * a3;
} ARGS_void_GLuint_GLint_GLint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint_GLint___GENPT__ args;
} PACKED_void_GLuint_GLint_GLint___GENPT__;
typedef void (*FUNC_void_GLhandleARB_GLint_GLint___GENPT__)(GLhandleARB programObj, GLint location, GLint * params);
typedef struct {
    GLhandleARB a1;
    GLint a2;
    GLint * a3;
} ARGS_void_GLhandleARB_GLint_GLint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLhandleARB_GLint_GLint___GENPT__ args;
} PACKED_void_GLhandleARB_GLint_GLint___GENPT__;
typedef void (*FUNC_void_GLuint_GLint_GLuint64EXT___GENPT__)(GLuint program, GLint location, GLuint64EXT * params);
typedef struct {
    GLuint a1;
    GLint a2;
    GLuint64EXT * a3;
} ARGS_void_GLuint_GLint_GLuint64EXT___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint_GLuint64EXT___GENPT__ args;
} PACKED_void_GLuint_GLint_GLuint64EXT___GENPT__;
typedef void (*FUNC_void_GLuint_GLint_GLuint___GENPT__)(GLuint program, GLint location, GLuint * params);
typedef struct {
    GLuint a1;
    GLint a2;
    GLuint * a3;
} ARGS_void_GLuint_GLint_GLuint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint_GLuint___GENPT__ args;
} PACKED_void_GLuint_GLint_GLuint___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_GLdouble___GENPT__)(GLuint index, GLenum pname, GLdouble * params);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLdouble * a3;
} ARGS_void_GLuint_GLenum_GLdouble___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLdouble___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLdouble___GENPT__;
typedef void (*FUNC_void_GLuint_GLuint_GLenum_GLdouble___GENPT__)(GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble * params);
typedef struct {
    GLuint a1;
    GLuint a2;
    GLenum a3;
    GLdouble * a4;
} ARGS_void_GLuint_GLuint_GLenum_GLdouble___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLuint_GLenum_GLdouble___GENPT__ args;
} PACKED_void_GLuint_GLuint_GLenum_GLdouble___GENPT__;
typedef void (*FUNC_void_GLuint_GLuint_GLenum_GLfloat___GENPT__)(GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat * params);
typedef struct {
    GLuint a1;
    GLuint a2;
    GLenum a3;
    GLfloat * a4;
} ARGS_void_GLuint_GLuint_GLenum_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLuint_GLenum_GLfloat___GENPT__ args;
} PACKED_void_GLuint_GLuint_GLenum_GLfloat___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLenum_GLsizei_GLvoid___GENPT__)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid * table);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLenum a3;
    GLsizei a4;
    GLvoid * a5;
} ARGS_void_GLenum_GLenum_GLenum_GLsizei_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLenum_GLsizei_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLenum_GLenum_GLsizei_GLvoid___GENPT__;
typedef void (*FUNC_void_GLenum_GLint_GLsizei_GLvoid___GENPT__)(GLenum target, GLint lod, GLsizei bufSize, GLvoid * img);
typedef struct {
    GLenum a1;
    GLint a2;
    GLsizei a3;
    GLvoid * a4;
} ARGS_void_GLenum_GLint_GLsizei_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLint_GLsizei_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLint_GLsizei_GLvoid___GENPT__;
typedef void (*FUNC_void_GLenum_GLboolean_GLenum_GLenum_GLsizei_GLvoid___GENPT__)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid * values);
typedef struct {
    GLenum a1;
    GLboolean a2;
    GLenum a3;
    GLenum a4;
    GLsizei a5;
    GLvoid * a6;
} ARGS_void_GLenum_GLboolean_GLenum_GLenum_GLsizei_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLboolean_GLenum_GLenum_GLsizei_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLboolean_GLenum_GLenum_GLsizei_GLvoid___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLsizei_GLdouble___GENPT__)(GLenum target, GLenum query, GLsizei bufSize, GLdouble * v);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLsizei a3;
    GLdouble * a4;
} ARGS_void_GLenum_GLenum_GLsizei_GLdouble___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLsizei_GLdouble___GENPT__ args;
} PACKED_void_GLenum_GLenum_GLsizei_GLdouble___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLsizei_GLfloat___GENPT__)(GLenum target, GLenum query, GLsizei bufSize, GLfloat * v);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLsizei a3;
    GLfloat * a4;
} ARGS_void_GLenum_GLenum_GLsizei_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLsizei_GLfloat___GENPT__ args;
} PACKED_void_GLenum_GLenum_GLsizei_GLfloat___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLsizei_GLint___GENPT__)(GLenum target, GLenum query, GLsizei bufSize, GLint * v);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLsizei a3;
    GLint * a4;
} ARGS_void_GLenum_GLenum_GLsizei_GLint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLsizei_GLint___GENPT__ args;
} PACKED_void_GLenum_GLenum_GLsizei_GLint___GENPT__;
typedef void (*FUNC_void_GLenum_GLsizei_GLfloat___GENPT__)(GLenum map, GLsizei bufSize, GLfloat * values);
typedef struct {
    GLenum a1;
    GLsizei a2;
    GLfloat * a3;
} ARGS_void_GLenum_GLsizei_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLsizei_GLfloat___GENPT__ args;
} PACKED_void_GLenum_GLsizei_GLfloat___GENPT__;
typedef void (*FUNC_void_GLenum_GLsizei_GLuint___GENPT__)(GLenum map, GLsizei bufSize, GLuint * values);
typedef struct {
    GLenum a1;
    GLsizei a2;
    GLuint * a3;
} ARGS_void_GLenum_GLsizei_GLuint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLsizei_GLuint___GENPT__ args;
} PACKED_void_GLenum_GLsizei_GLuint___GENPT__;
typedef void (*FUNC_void_GLenum_GLsizei_GLushort___GENPT__)(GLenum map, GLsizei bufSize, GLushort * values);
typedef struct {
    GLenum a1;
    GLsizei a2;
    GLushort * a3;
} ARGS_void_GLenum_GLsizei_GLushort___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLsizei_GLushort___GENPT__ args;
} PACKED_void_GLenum_GLsizei_GLushort___GENPT__;
typedef void (*FUNC_void_GLsizei_GLubyte___GENPT__)(GLsizei bufSize, GLubyte * pattern);
typedef struct {
    GLsizei a1;
    GLubyte * a2;
} ARGS_void_GLsizei_GLubyte___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLsizei_GLubyte___GENPT__ args;
} PACKED_void_GLsizei_GLubyte___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLenum_GLsizei_GLvoid___GENPT___GLsizei_GLvoid___GENPT___GLvoid___GENPT__)(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, GLvoid * row, GLsizei columnBufSize, GLvoid * column, GLvoid * span);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLenum a3;
    GLsizei a4;
    GLvoid * a5;
    GLsizei a6;
    GLvoid * a7;
    GLvoid * a8;
} ARGS_void_GLenum_GLenum_GLenum_GLsizei_GLvoid___GENPT___GLsizei_GLvoid___GENPT___GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLenum_GLsizei_GLvoid___GENPT___GLsizei_GLvoid___GENPT___GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLenum_GLenum_GLsizei_GLvoid___GENPT___GLsizei_GLvoid___GENPT___GLvoid___GENPT__;
typedef void (*FUNC_void_GLenum_GLint_GLenum_GLenum_GLsizei_GLvoid___GENPT__)(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLvoid * img);
typedef struct {
    GLenum a1;
    GLint a2;
    GLenum a3;
    GLenum a4;
    GLsizei a5;
    GLvoid * a6;
} ARGS_void_GLenum_GLint_GLenum_GLenum_GLsizei_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLint_GLenum_GLenum_GLsizei_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLint_GLenum_GLenum_GLsizei_GLvoid___GENPT__;
typedef void (*FUNC_void_GLuint_GLint_GLsizei_GLdouble___GENPT__)(GLuint program, GLint location, GLsizei bufSize, GLdouble * params);
typedef struct {
    GLuint a1;
    GLint a2;
    GLsizei a3;
    GLdouble * a4;
} ARGS_void_GLuint_GLint_GLsizei_GLdouble___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint_GLsizei_GLdouble___GENPT__ args;
} PACKED_void_GLuint_GLint_GLsizei_GLdouble___GENPT__;
typedef void (*FUNC_void_GLuint_GLint_GLsizei_GLfloat___GENPT__)(GLuint program, GLint location, GLsizei bufSize, GLfloat * params);
typedef struct {
    GLuint a1;
    GLint a2;
    GLsizei a3;
    GLfloat * a4;
} ARGS_void_GLuint_GLint_GLsizei_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint_GLsizei_GLfloat___GENPT__ args;
} PACKED_void_GLuint_GLint_GLsizei_GLfloat___GENPT__;
typedef void (*FUNC_void_GLuint_GLint_GLsizei_GLint___GENPT__)(GLuint program, GLint location, GLsizei bufSize, GLint * params);
typedef struct {
    GLuint a1;
    GLint a2;
    GLsizei a3;
    GLint * a4;
} ARGS_void_GLuint_GLint_GLsizei_GLint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint_GLsizei_GLint___GENPT__ args;
} PACKED_void_GLuint_GLint_GLsizei_GLint___GENPT__;
typedef void (*FUNC_void_GLuint_GLint_GLsizei_GLuint___GENPT__)(GLuint program, GLint location, GLsizei bufSize, GLuint * params);
typedef struct {
    GLuint a1;
    GLint a2;
    GLsizei a3;
    GLuint * a4;
} ARGS_void_GLuint_GLint_GLsizei_GLuint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint_GLsizei_GLuint___GENPT__ args;
} PACKED_void_GLuint_GLint_GLsizei_GLuint___GENPT__;
typedef void (*FUNC_void_GLbyte)(GLbyte factor);
typedef struct {
    GLbyte a1;
} ARGS_void_GLbyte;
typedef struct {
    int index;
    ARGS_void_GLbyte args;
} PACKED_void_GLbyte;
typedef void (*FUNC_void_GLshort)(GLshort factor);
typedef struct {
    GLshort a1;
} ARGS_void_GLshort;
typedef struct {
    int index;
    ARGS_void_GLshort args;
} PACKED_void_GLshort;
typedef void (*FUNC_void_GLubyte)(GLubyte factor);
typedef struct {
    GLubyte a1;
} ARGS_void_GLubyte;
typedef struct {
    int index;
    ARGS_void_GLubyte args;
} PACKED_void_GLubyte;
typedef void (*FUNC_void_GLushort)(GLushort factor);
typedef struct {
    GLushort a1;
} ARGS_void_GLushort;
typedef struct {
    int index;
    ARGS_void_GLushort args;
} PACKED_void_GLushort;
typedef void (*FUNC_void_GLenum_GLsizei_GLenum_GLboolean)(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
typedef struct {
    GLenum a1;
    GLsizei a2;
    GLenum a3;
    GLboolean a4;
} ARGS_void_GLenum_GLsizei_GLenum_GLboolean;
typedef struct {
    int index;
    ARGS_void_GLenum_GLsizei_GLenum_GLboolean args;
} PACKED_void_GLenum_GLsizei_GLenum_GLboolean;
typedef GLsync (*FUNC_GLsync_GLenum_GLintptr_GLbitfield)(GLenum external_sync_type, GLintptr external_sync, GLbitfield flags);
typedef struct {
    GLenum a1;
    GLintptr a2;
    GLbitfield a3;
} ARGS_GLsync_GLenum_GLintptr_GLbitfield;
typedef struct {
    int index;
    ARGS_GLsync_GLenum_GLintptr_GLbitfield args;
} PACKED_GLsync_GLenum_GLintptr_GLbitfield;
typedef void (*FUNC_void_GLenum_GLclampf)(GLenum func, GLclampf ref);
typedef struct {
    GLenum a1;
    GLclampf a2;
} ARGS_void_GLenum_GLclampf;
typedef struct {
    int index;
    ARGS_void_GLenum_GLclampf args;
} PACKED_void_GLenum_GLclampf;
typedef void (*FUNC_void_GLenum_GLsizei_GLsizei_const_GLvoid___GENPT__)(GLenum type, GLsizei stride, GLsizei count, const GLvoid * pointer);
typedef struct {
    GLenum a1;
    GLsizei a2;
    GLsizei a3;
    GLvoid * a4;
} ARGS_void_GLenum_GLsizei_GLsizei_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLsizei_GLsizei_const_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLsizei_GLsizei_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLsizei_GLint___GENPT__)(GLsizei size, GLint * buffer);
typedef struct {
    GLsizei a1;
    GLint * a2;
} ARGS_void_GLsizei_GLint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLsizei_GLint___GENPT__ args;
} PACKED_void_GLsizei_GLint___GENPT__;
typedef void (*FUNC_void_GLuint_GLuint_GLuint_GLfloat)(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight);
typedef struct {
    GLuint a1;
    GLuint a2;
    GLuint a3;
    GLfloat a4;
} ARGS_void_GLuint_GLuint_GLuint_GLfloat;
typedef struct {
    int index;
    ARGS_void_GLuint_GLuint_GLuint_GLfloat args;
} PACKED_void_GLuint_GLuint_GLuint_GLfloat;
typedef void (*FUNC_void_GLenum_GLsizei_const_GLenum___GENPT__)(GLenum target, GLsizei numAttachments, const GLenum * attachments);
typedef struct {
    GLenum a1;
    GLsizei a2;
    GLenum * a3;
} ARGS_void_GLenum_GLsizei_const_GLenum___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLsizei_const_GLenum___GENPT__ args;
} PACKED_void_GLenum_GLsizei_const_GLenum___GENPT__;
typedef void (*FUNC_void_GLenum_GLsizei_const_GLenum___GENPT___GLint_GLint_GLsizei_GLsizei)(GLenum target, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height);
typedef struct {
    GLenum a1;
    GLsizei a2;
    GLenum * a3;
    GLint a4;
    GLint a5;
    GLsizei a6;
    GLsizei a7;
} ARGS_void_GLenum_GLsizei_const_GLenum___GENPT___GLint_GLint_GLsizei_GLsizei;
typedef struct {
    int index;
    ARGS_void_GLenum_GLsizei_const_GLenum___GENPT___GLint_GLint_GLsizei_GLsizei args;
} PACKED_void_GLenum_GLsizei_const_GLenum___GENPT___GLint_GLint_GLsizei_GLsizei;
typedef void (*FUNC_void_GLuint_GLint)(GLuint texture, GLint level);
typedef struct {
    GLuint a1;
    GLint a2;
} ARGS_void_GLuint_GLint;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint args;
} PACKED_void_GLuint_GLint;
typedef void (*FUNC_void_GLuint_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
typedef struct {
    GLuint a1;
    GLint a2;
    GLint a3;
    GLint a4;
    GLint a5;
    GLsizei a6;
    GLsizei a7;
    GLsizei a8;
} ARGS_void_GLuint_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei args;
} PACKED_void_GLuint_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei;
typedef GLboolean (*FUNC_GLboolean_GLuint)(GLuint marker);
typedef struct {
    GLuint a1;
} ARGS_GLboolean_GLuint;
typedef struct {
    int index;
    ARGS_GLboolean_GLuint args;
} PACKED_GLboolean_GLuint;
typedef GLboolean (*FUNC_GLboolean_GLenum)(GLenum target);
typedef struct {
    GLenum a1;
} ARGS_GLboolean_GLenum;
typedef struct {
    int index;
    ARGS_GLboolean_GLenum args;
} PACKED_GLboolean_GLenum;
typedef GLboolean (*FUNC_GLboolean_GLenum_GLuint)(GLenum target, GLuint index);
typedef struct {
    GLenum a1;
    GLuint a2;
} ARGS_GLboolean_GLenum_GLuint;
typedef struct {
    int index;
    ARGS_GLboolean_GLenum_GLuint args;
} PACKED_GLboolean_GLenum_GLuint;
typedef GLboolean (*FUNC_GLboolean_GLuint64)(GLuint64 handle);
typedef struct {
    GLuint64 a1;
} ARGS_GLboolean_GLuint64;
typedef struct {
    int index;
    ARGS_GLboolean_GLuint64 args;
} PACKED_GLboolean_GLuint64;
typedef GLboolean (*FUNC_GLboolean_GLint_const_GLchar___GENPT__)(GLint namelen, const GLchar * name);
typedef struct {
    GLint a1;
    GLchar * a2;
} ARGS_GLboolean_GLint_const_GLchar___GENPT__;
typedef struct {
    int index;
    ARGS_GLboolean_GLint_const_GLchar___GENPT__ args;
} PACKED_GLboolean_GLint_const_GLchar___GENPT__;
typedef GLboolean (*FUNC_GLboolean_GLuint_GLuint_GLfloat_GLfloat)(GLuint path, GLuint mask, GLfloat x, GLfloat y);
typedef struct {
    GLuint a1;
    GLuint a2;
    GLfloat a3;
    GLfloat a4;
} ARGS_GLboolean_GLuint_GLuint_GLfloat_GLfloat;
typedef struct {
    int index;
    ARGS_GLboolean_GLuint_GLuint_GLfloat_GLfloat args;
} PACKED_GLboolean_GLuint_GLuint_GLfloat_GLfloat;
typedef GLboolean (*FUNC_GLboolean_GLuint_GLfloat_GLfloat)(GLuint path, GLfloat x, GLfloat y);
typedef struct {
    GLuint a1;
    GLfloat a2;
    GLfloat a3;
} ARGS_GLboolean_GLuint_GLfloat_GLfloat;
typedef struct {
    int index;
    ARGS_GLboolean_GLuint_GLfloat_GLfloat args;
} PACKED_GLboolean_GLuint_GLfloat_GLfloat;
typedef GLboolean (*FUNC_GLboolean_GLsync)(GLsync sync);
typedef struct {
    GLsync a1;
} ARGS_GLboolean_GLsync;
typedef struct {
    int index;
    ARGS_GLboolean_GLsync args;
} PACKED_GLboolean_GLsync;
typedef GLboolean (*FUNC_GLboolean_GLuint_GLenum)(GLuint id, GLenum cap);
typedef struct {
    GLuint a1;
    GLenum a2;
} ARGS_GLboolean_GLuint_GLenum;
typedef struct {
    int index;
    ARGS_GLboolean_GLuint_GLenum args;
} PACKED_GLboolean_GLuint_GLenum;
typedef void (*FUNC_void_GLint_GLushort)(GLint factor, GLushort pattern);
typedef struct {
    GLint a1;
    GLushort a2;
} ARGS_void_GLint_GLushort;
typedef struct {
    int index;
    ARGS_void_GLint_GLushort args;
} PACKED_void_GLint_GLushort;
typedef void (*FUNC_void_GLuint_GLenum_GLfloat)(GLuint list, GLenum pname, GLfloat param);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLfloat a3;
} ARGS_void_GLuint_GLenum_GLfloat;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLfloat args;
} PACKED_void_GLuint_GLenum_GLfloat;
typedef void (*FUNC_void_GLuint_GLenum_const_GLfloat___GENPT__)(GLuint list, GLenum pname, const GLfloat * params);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLfloat * a3;
} ARGS_void_GLuint_GLenum_const_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_const_GLfloat___GENPT__ args;
} PACKED_void_GLuint_GLenum_const_GLfloat___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_GLint)(GLuint list, GLenum pname, GLint param);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLint a3;
} ARGS_void_GLuint_GLenum_GLint;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLint args;
} PACKED_void_GLuint_GLenum_GLint;
typedef void (*FUNC_void_GLuint_GLenum_const_GLint___GENPT__)(GLuint list, GLenum pname, const GLint * params);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLint * a3;
} ARGS_void_GLuint_GLenum_const_GLint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_const_GLint___GENPT__ args;
} PACKED_void_GLuint_GLenum_const_GLint___GENPT__;
typedef void (*FUNC_void_GLenum_GLuint_GLsizei_const_GLubyte___GENPT__)(GLenum target, GLuint id, GLsizei len, const GLubyte * program);
typedef struct {
    GLenum a1;
    GLuint a2;
    GLsizei a3;
    GLubyte * a4;
} ARGS_void_GLenum_GLuint_GLsizei_const_GLubyte___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLuint_GLsizei_const_GLubyte___GENPT__ args;
} PACKED_void_GLenum_GLuint_GLsizei_const_GLubyte___GENPT__;
typedef void (*FUNC_void_GLint_GLsizei)(GLint first, GLsizei count);
typedef struct {
    GLint a1;
    GLsizei a2;
} ARGS_void_GLint_GLsizei;
typedef struct {
    int index;
    ARGS_void_GLint_GLsizei args;
} PACKED_void_GLint_GLsizei;
typedef void (*FUNC_void_GLuint64)(GLuint64 handle);
typedef struct {
    GLuint64 a1;
} ARGS_void_GLuint64;
typedef struct {
    int index;
    ARGS_void_GLuint64 args;
} PACKED_void_GLuint64;
typedef void (*FUNC_void_GLuint64_GLenum)(GLuint64 handle, GLenum access);
typedef struct {
    GLuint64 a1;
    GLenum a2;
} ARGS_void_GLuint64_GLenum;
typedef struct {
    int index;
    ARGS_void_GLuint64_GLenum args;
} PACKED_void_GLuint64_GLenum;
typedef void (*FUNC_void_GLenum_GLdouble_GLdouble_GLint_GLint_const_GLdouble___GENPT__)(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points);
typedef struct {
    GLenum a1;
    GLdouble a2 __attribute__ ((aligned(8)));
    GLdouble a3 __attribute__ ((aligned(8)));
    GLint a4;
    GLint a5;
    GLdouble * a6;
} ARGS_void_GLenum_GLdouble_GLdouble_GLint_GLint_const_GLdouble___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLdouble_GLdouble_GLint_GLint_const_GLdouble___GENPT__ args;
} PACKED_void_GLenum_GLdouble_GLdouble_GLint_GLint_const_GLdouble___GENPT__;
typedef void (*FUNC_void_GLenum_GLfloat_GLfloat_GLint_GLint_const_GLfloat___GENPT__)(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points);
typedef struct {
    GLenum a1;
    GLfloat a2;
    GLfloat a3;
    GLint a4;
    GLint a5;
    GLfloat * a6;
} ARGS_void_GLenum_GLfloat_GLfloat_GLint_GLint_const_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLfloat_GLfloat_GLint_GLint_const_GLfloat___GENPT__ args;
} PACKED_void_GLenum_GLfloat_GLfloat_GLint_GLint_const_GLfloat___GENPT__;
typedef void (*FUNC_void_GLenum_GLfixed_GLfixed_GLint_GLint_GLfixed)(GLenum target, GLfixed u1, GLfixed u2, GLint stride, GLint order, GLfixed points);
typedef struct {
    GLenum a1;
    GLfixed a2;
    GLfixed a3;
    GLint a4;
    GLint a5;
    GLfixed a6;
} ARGS_void_GLenum_GLfixed_GLfixed_GLint_GLint_GLfixed;
typedef struct {
    int index;
    ARGS_void_GLenum_GLfixed_GLfixed_GLint_GLint_GLfixed args;
} PACKED_void_GLenum_GLfixed_GLfixed_GLint_GLint_GLfixed;
typedef void (*FUNC_void_GLenum_GLdouble_GLdouble_GLint_GLint_GLdouble_GLdouble_GLint_GLint_const_GLdouble___GENPT__)(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points);
typedef struct {
    GLenum a1;
    GLdouble a2 __attribute__ ((aligned(8)));
    GLdouble a3 __attribute__ ((aligned(8)));
    GLint a4;
    GLint a5;
    GLdouble a6 __attribute__ ((aligned(8)));
    GLdouble a7 __attribute__ ((aligned(8)));
    GLint a8;
    GLint a9;
    GLdouble * a10;
} ARGS_void_GLenum_GLdouble_GLdouble_GLint_GLint_GLdouble_GLdouble_GLint_GLint_const_GLdouble___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLdouble_GLdouble_GLint_GLint_GLdouble_GLdouble_GLint_GLint_const_GLdouble___GENPT__ args;
} PACKED_void_GLenum_GLdouble_GLdouble_GLint_GLint_GLdouble_GLdouble_GLint_GLint_const_GLdouble___GENPT__;
typedef void (*FUNC_void_GLenum_GLfloat_GLfloat_GLint_GLint_GLfloat_GLfloat_GLint_GLint_const_GLfloat___GENPT__)(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points);
typedef struct {
    GLenum a1;
    GLfloat a2;
    GLfloat a3;
    GLint a4;
    GLint a5;
    GLfloat a6;
    GLfloat a7;
    GLint a8;
    GLint a9;
    GLfloat * a10;
} ARGS_void_GLenum_GLfloat_GLfloat_GLint_GLint_GLfloat_GLfloat_GLint_GLint_const_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLfloat_GLfloat_GLint_GLint_GLfloat_GLfloat_GLint_GLint_const_GLfloat___GENPT__ args;
} PACKED_void_GLenum_GLfloat_GLfloat_GLint_GLint_GLfloat_GLfloat_GLint_GLint_const_GLfloat___GENPT__;
typedef void (*FUNC_void_GLenum_GLfixed_GLfixed_GLint_GLint_GLfixed_GLfixed_GLint_GLint_GLfixed)(GLenum target, GLfixed u1, GLfixed u2, GLint ustride, GLint uorder, GLfixed v1, GLfixed v2, GLint vstride, GLint vorder, GLfixed points);
typedef struct {
    GLenum a1;
    GLfixed a2;
    GLfixed a3;
    GLint a4;
    GLint a5;
    GLfixed a6;
    GLfixed a7;
    GLint a8;
    GLint a9;
    GLfixed a10;
} ARGS_void_GLenum_GLfixed_GLfixed_GLint_GLint_GLfixed_GLfixed_GLint_GLint_GLfixed;
typedef struct {
    int index;
    ARGS_void_GLenum_GLfixed_GLfixed_GLint_GLint_GLfixed_GLfixed_GLint_GLint_GLfixed args;
} PACKED_void_GLenum_GLfixed_GLfixed_GLint_GLint_GLfixed_GLfixed_GLint_GLint_GLfixed;
typedef GLvoid * (*FUNC_GLvoid___GENPT___GLenum_GLenum)(GLenum target, GLenum access);
typedef struct {
    GLenum a1;
    GLenum a2;
} ARGS_GLvoid___GENPT___GLenum_GLenum;
typedef struct {
    int index;
    ARGS_GLvoid___GENPT___GLenum_GLenum args;
} PACKED_GLvoid___GENPT___GLenum_GLenum;
typedef GLvoid * (*FUNC_GLvoid___GENPT___GLenum_GLintptr_GLsizeiptr_GLbitfield)(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
typedef struct {
    GLenum a1;
    GLintptr a2;
    GLsizeiptr a3;
    GLbitfield a4;
} ARGS_GLvoid___GENPT___GLenum_GLintptr_GLsizeiptr_GLbitfield;
typedef struct {
    int index;
    ARGS_GLvoid___GENPT___GLenum_GLintptr_GLsizeiptr_GLbitfield args;
} PACKED_GLvoid___GENPT___GLenum_GLintptr_GLsizeiptr_GLbitfield;
typedef void (*FUNC_void_GLenum_GLuint_GLenum_GLsizei_GLsizei_GLint_GLint_GLboolean_const_GLvoid___GENPT__)(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const GLvoid * points);
typedef struct {
    GLenum a1;
    GLuint a2;
    GLenum a3;
    GLsizei a4;
    GLsizei a5;
    GLint a6;
    GLint a7;
    GLboolean a8;
    GLvoid * a9;
} ARGS_void_GLenum_GLuint_GLenum_GLsizei_GLsizei_GLint_GLint_GLboolean_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLuint_GLenum_GLsizei_GLsizei_GLint_GLint_GLboolean_const_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLuint_GLenum_GLsizei_GLsizei_GLint_GLint_GLboolean_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLint_GLdouble_GLdouble)(GLint un, GLdouble u1, GLdouble u2);
typedef struct {
    GLint a1;
    GLdouble a2 __attribute__ ((aligned(8)));
    GLdouble a3 __attribute__ ((aligned(8)));
} ARGS_void_GLint_GLdouble_GLdouble;
typedef struct {
    int index;
    ARGS_void_GLint_GLdouble_GLdouble args;
} PACKED_void_GLint_GLdouble_GLdouble;
typedef void (*FUNC_void_GLint_GLfloat_GLfloat)(GLint un, GLfloat u1, GLfloat u2);
typedef struct {
    GLint a1;
    GLfloat a2;
    GLfloat a3;
} ARGS_void_GLint_GLfloat_GLfloat;
typedef struct {
    int index;
    ARGS_void_GLint_GLfloat_GLfloat args;
} PACKED_void_GLint_GLfloat_GLfloat;
typedef void (*FUNC_void_GLint_GLfixed_GLfixed)(GLint n, GLfixed u1, GLfixed u2);
typedef struct {
    GLint a1;
    GLfixed a2;
    GLfixed a3;
} ARGS_void_GLint_GLfixed_GLfixed;
typedef struct {
    int index;
    ARGS_void_GLint_GLfixed_GLfixed args;
} PACKED_void_GLint_GLfixed_GLfixed;
typedef void (*FUNC_void_GLint_GLdouble_GLdouble_GLint_GLdouble_GLdouble)(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
typedef struct {
    GLint a1;
    GLdouble a2 __attribute__ ((aligned(8)));
    GLdouble a3 __attribute__ ((aligned(8)));
    GLint a4;
    GLdouble a5 __attribute__ ((aligned(8)));
    GLdouble a6 __attribute__ ((aligned(8)));
} ARGS_void_GLint_GLdouble_GLdouble_GLint_GLdouble_GLdouble;
typedef struct {
    int index;
    ARGS_void_GLint_GLdouble_GLdouble_GLint_GLdouble_GLdouble args;
} PACKED_void_GLint_GLdouble_GLdouble_GLint_GLdouble_GLdouble;
typedef void (*FUNC_void_GLint_GLfloat_GLfloat_GLint_GLfloat_GLfloat)(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
typedef struct {
    GLint a1;
    GLfloat a2;
    GLfloat a3;
    GLint a4;
    GLfloat a5;
    GLfloat a6;
} ARGS_void_GLint_GLfloat_GLfloat_GLint_GLfloat_GLfloat;
typedef struct {
    int index;
    ARGS_void_GLint_GLfloat_GLfloat_GLint_GLfloat_GLfloat args;
} PACKED_void_GLint_GLfloat_GLfloat_GLint_GLfloat_GLfloat;
typedef void (*FUNC_void_GLint_GLfixed_GLfixed_GLfixed_GLfixed)(GLint n, GLfixed u1, GLfixed u2, GLfixed v1, GLfixed v2);
typedef struct {
    GLint a1;
    GLfixed a2;
    GLfixed a3;
    GLfixed a4;
    GLfixed a5;
} ARGS_void_GLint_GLfixed_GLfixed_GLfixed_GLfixed;
typedef struct {
    int index;
    ARGS_void_GLint_GLfixed_GLfixed_GLfixed_GLfixed args;
} PACKED_void_GLint_GLfixed_GLfixed_GLfixed_GLfixed;
typedef GLvoid * (*FUNC_GLvoid___GENPT___GLuint_GLenum)(GLuint buffer, GLenum access);
typedef struct {
    GLuint a1;
    GLenum a2;
} ARGS_GLvoid___GENPT___GLuint_GLenum;
typedef struct {
    int index;
    ARGS_GLvoid___GENPT___GLuint_GLenum args;
} PACKED_GLvoid___GENPT___GLuint_GLenum;
typedef GLvoid * (*FUNC_GLvoid___GENPT___GLuint_GLintptr_GLsizeiptr_GLbitfield)(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
typedef struct {
    GLuint a1;
    GLintptr a2;
    GLsizeiptr a3;
    GLbitfield a4;
} ARGS_GLvoid___GENPT___GLuint_GLintptr_GLsizeiptr_GLbitfield;
typedef struct {
    int index;
    ARGS_GLvoid___GENPT___GLuint_GLintptr_GLsizeiptr_GLbitfield args;
} PACKED_GLvoid___GENPT___GLuint_GLintptr_GLsizeiptr_GLbitfield;
typedef GLvoid * (*FUNC_GLvoid___GENPT___GLuint)(GLuint buffer);
typedef struct {
    GLuint a1;
} ARGS_GLvoid___GENPT___GLuint;
typedef struct {
    int index;
    ARGS_GLvoid___GENPT___GLuint args;
} PACKED_GLvoid___GENPT___GLuint;
typedef GLvoid * (*FUNC_GLvoid___GENPT___GLuint_GLint_GLbitfield_const_GLint___GENPT___const_GLenum___GENPT__)(GLuint texture, GLint level, GLbitfield access, const GLint * stride, const GLenum * layout);
typedef struct {
    GLuint a1;
    GLint a2;
    GLbitfield a3;
    GLint * a4;
    GLenum * a5;
} ARGS_GLvoid___GENPT___GLuint_GLint_GLbitfield_const_GLint___GENPT___const_GLenum___GENPT__;
typedef struct {
    int index;
    ARGS_GLvoid___GENPT___GLuint_GLint_GLbitfield_const_GLint___GENPT___const_GLenum___GENPT__ args;
} PACKED_GLvoid___GENPT___GLuint_GLint_GLbitfield_const_GLint___GENPT___const_GLenum___GENPT__;
typedef void (*FUNC_void_GLuint_GLuint_GLdouble_GLdouble_GLint_GLint_const_GLdouble___GENPT__)(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points);
typedef struct {
    GLuint a1;
    GLuint a2;
    GLdouble a3 __attribute__ ((aligned(8)));
    GLdouble a4 __attribute__ ((aligned(8)));
    GLint a5;
    GLint a6;
    GLdouble * a7;
} ARGS_void_GLuint_GLuint_GLdouble_GLdouble_GLint_GLint_const_GLdouble___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLuint_GLdouble_GLdouble_GLint_GLint_const_GLdouble___GENPT__ args;
} PACKED_void_GLuint_GLuint_GLdouble_GLdouble_GLint_GLint_const_GLdouble___GENPT__;
typedef void (*FUNC_void_GLuint_GLuint_GLfloat_GLfloat_GLint_GLint_const_GLfloat___GENPT__)(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points);
typedef struct {
    GLuint a1;
    GLuint a2;
    GLfloat a3;
    GLfloat a4;
    GLint a5;
    GLint a6;
    GLfloat * a7;
} ARGS_void_GLuint_GLuint_GLfloat_GLfloat_GLint_GLint_const_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLuint_GLfloat_GLfloat_GLint_GLint_const_GLfloat___GENPT__ args;
} PACKED_void_GLuint_GLuint_GLfloat_GLfloat_GLint_GLint_const_GLfloat___GENPT__;
typedef void (*FUNC_void_GLuint_GLuint_GLdouble_GLdouble_GLint_GLint_GLdouble_GLdouble_GLint_GLint_const_GLdouble___GENPT__)(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points);
typedef struct {
    GLuint a1;
    GLuint a2;
    GLdouble a3 __attribute__ ((aligned(8)));
    GLdouble a4 __attribute__ ((aligned(8)));
    GLint a5;
    GLint a6;
    GLdouble a7 __attribute__ ((aligned(8)));
    GLdouble a8 __attribute__ ((aligned(8)));
    GLint a9;
    GLint a10;
    GLdouble * a11;
} ARGS_void_GLuint_GLuint_GLdouble_GLdouble_GLint_GLint_GLdouble_GLdouble_GLint_GLint_const_GLdouble___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLuint_GLdouble_GLdouble_GLint_GLint_GLdouble_GLdouble_GLint_GLint_const_GLdouble___GENPT__ args;
} PACKED_void_GLuint_GLuint_GLdouble_GLdouble_GLint_GLint_GLdouble_GLdouble_GLint_GLint_const_GLdouble___GENPT__;
typedef void (*FUNC_void_GLuint_GLuint_GLfloat_GLfloat_GLint_GLint_GLfloat_GLfloat_GLint_GLint_const_GLfloat___GENPT__)(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points);
typedef struct {
    GLuint a1;
    GLuint a2;
    GLfloat a3;
    GLfloat a4;
    GLint a5;
    GLint a6;
    GLfloat a7;
    GLfloat a8;
    GLint a9;
    GLint a10;
    GLfloat * a11;
} ARGS_void_GLuint_GLuint_GLfloat_GLfloat_GLint_GLint_GLfloat_GLfloat_GLint_GLint_const_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLuint_GLfloat_GLfloat_GLint_GLint_GLfloat_GLfloat_GLint_GLint_const_GLfloat___GENPT__ args;
} PACKED_void_GLuint_GLuint_GLfloat_GLfloat_GLint_GLint_GLfloat_GLfloat_GLint_GLint_const_GLfloat___GENPT__;
typedef void (*FUNC_void_GLenum_GLdouble_GLdouble_GLdouble_GLdouble_GLdouble_GLdouble)(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
typedef struct {
    GLenum a1;
    GLdouble a2 __attribute__ ((aligned(8)));
    GLdouble a3 __attribute__ ((aligned(8)));
    GLdouble a4 __attribute__ ((aligned(8)));
    GLdouble a5 __attribute__ ((aligned(8)));
    GLdouble a6 __attribute__ ((aligned(8)));
    GLdouble a7 __attribute__ ((aligned(8)));
} ARGS_void_GLenum_GLdouble_GLdouble_GLdouble_GLdouble_GLdouble_GLdouble;
typedef struct {
    int index;
    ARGS_void_GLenum_GLdouble_GLdouble_GLdouble_GLdouble_GLdouble_GLdouble args;
} PACKED_void_GLenum_GLdouble_GLdouble_GLdouble_GLdouble_GLdouble_GLdouble;
typedef void (*FUNC_void_GLint_const_GLubyte___GENPT__)(GLint size, const GLubyte * indices);
typedef struct {
    GLint a1;
    GLubyte * a2;
} ARGS_void_GLint_const_GLubyte___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLint_const_GLubyte___GENPT__ args;
} PACKED_void_GLint_const_GLubyte___GENPT__;
typedef void (*FUNC_void_GLint_const_GLuint___GENPT__)(GLint size, const GLuint * indices);
typedef struct {
    GLint a1;
    GLuint * a2;
} ARGS_void_GLint_const_GLuint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLint_const_GLuint___GENPT__ args;
} PACKED_void_GLint_const_GLuint___GENPT__;
typedef void (*FUNC_void_GLint_const_GLushort___GENPT__)(GLint size, const GLushort * indices);
typedef struct {
    GLint a1;
    GLushort * a2;
} ARGS_void_GLint_const_GLushort___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLint_const_GLushort___GENPT__ args;
} PACKED_void_GLint_const_GLushort___GENPT__;
typedef void (*FUNC_void_GLenum_GLdouble_GLdouble_GLdouble_GLdouble)(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
typedef struct {
    GLenum a1;
    GLdouble a2 __attribute__ ((aligned(8)));
    GLdouble a3 __attribute__ ((aligned(8)));
    GLdouble a4 __attribute__ ((aligned(8)));
    GLdouble a5 __attribute__ ((aligned(8)));
} ARGS_void_GLenum_GLdouble_GLdouble_GLdouble_GLdouble;
typedef struct {
    int index;
    ARGS_void_GLenum_GLdouble_GLdouble_GLdouble_GLdouble args;
} PACKED_void_GLenum_GLdouble_GLdouble_GLdouble_GLdouble;
typedef void (*FUNC_void_GLenum_GLfloat_GLfloat_GLfloat_GLfloat)(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
typedef struct {
    GLenum a1;
    GLfloat a2;
    GLfloat a3;
    GLfloat a4;
    GLfloat a5;
} ARGS_void_GLenum_GLfloat_GLfloat_GLfloat_GLfloat;
typedef struct {
    int index;
    ARGS_void_GLenum_GLfloat_GLfloat_GLfloat_GLfloat args;
} PACKED_void_GLenum_GLfloat_GLfloat_GLfloat_GLfloat;
typedef void (*FUNC_void_GLenum_GLdouble_GLdouble_GLdouble)(GLenum mode, GLdouble x, GLdouble y, GLdouble z);
typedef struct {
    GLenum a1;
    GLdouble a2 __attribute__ ((aligned(8)));
    GLdouble a3 __attribute__ ((aligned(8)));
    GLdouble a4 __attribute__ ((aligned(8)));
} ARGS_void_GLenum_GLdouble_GLdouble_GLdouble;
typedef struct {
    int index;
    ARGS_void_GLenum_GLdouble_GLdouble_GLdouble args;
} PACKED_void_GLenum_GLdouble_GLdouble_GLdouble;
typedef void (*FUNC_void_GLenum_GLfloat_GLfloat_GLfloat)(GLenum mode, GLfloat x, GLfloat y, GLfloat z);
typedef struct {
    GLenum a1;
    GLfloat a2;
    GLfloat a3;
    GLfloat a4;
} ARGS_void_GLenum_GLfloat_GLfloat_GLfloat;
typedef struct {
    int index;
    ARGS_void_GLenum_GLfloat_GLfloat_GLfloat args;
} PACKED_void_GLenum_GLfloat_GLfloat_GLfloat;
typedef void (*FUNC_void_GLenum_GLenum_GLboolean)(GLenum target, GLenum internalformat, GLboolean sink);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLboolean a3;
} ARGS_void_GLenum_GLenum_GLboolean;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLboolean args;
} PACKED_void_GLenum_GLenum_GLboolean;
typedef void (*FUNC_void_GLenum_const_GLint___GENPT___const_GLsizei___GENPT___GLsizei)(GLenum mode, const GLint * first, const GLsizei * count, GLsizei drawcount);
typedef struct {
    GLenum a1;
    GLint * a2;
    GLsizei * a3;
    GLsizei a4;
} ARGS_void_GLenum_const_GLint___GENPT___const_GLsizei___GENPT___GLsizei;
typedef struct {
    int index;
    ARGS_void_GLenum_const_GLint___GENPT___const_GLsizei___GENPT___GLsizei args;
} PACKED_void_GLenum_const_GLint___GENPT___const_GLsizei___GENPT___GLsizei;
typedef void (*FUNC_void_GLenum_const_void___GENPT___GLsizei_GLsizei)(GLenum mode, const void * indirect, GLsizei drawcount, GLsizei stride);
typedef struct {
    GLenum a1;
    void * a2;
    GLsizei a3;
    GLsizei a4;
} ARGS_void_GLenum_const_void___GENPT___GLsizei_GLsizei;
typedef struct {
    int index;
    ARGS_void_GLenum_const_void___GENPT___GLsizei_GLsizei args;
} PACKED_void_GLenum_const_void___GENPT___GLsizei_GLsizei;
typedef void (*FUNC_void_GLenum_const_GLvoid___GENPT___GLsizei_GLsizei)(GLenum mode, const GLvoid * indirect, GLsizei primcount, GLsizei stride);
typedef struct {
    GLenum a1;
    GLvoid * a2;
    GLsizei a3;
    GLsizei a4;
} ARGS_void_GLenum_const_GLvoid___GENPT___GLsizei_GLsizei;
typedef struct {
    int index;
    ARGS_void_GLenum_const_GLvoid___GENPT___GLsizei_GLsizei args;
} PACKED_void_GLenum_const_GLvoid___GENPT___GLsizei_GLsizei;
typedef void (*FUNC_void_GLenum_const_GLsizei___GENPT___GLenum_GLvoid__GENPT__const___GENPT___GLsizei)(GLenum mode, const GLsizei * count, GLenum type, GLvoid*const * indices, GLsizei drawcount);
typedef struct {
    GLenum a1;
    GLsizei * a2;
    GLenum a3;
    GLvoid*const * a4;
    GLsizei a5;
} ARGS_void_GLenum_const_GLsizei___GENPT___GLenum_GLvoid__GENPT__const___GENPT___GLsizei;
typedef struct {
    int index;
    ARGS_void_GLenum_const_GLsizei___GENPT___GLenum_GLvoid__GENPT__const___GENPT___GLsizei args;
} PACKED_void_GLenum_const_GLsizei___GENPT___GLenum_GLvoid__GENPT__const___GENPT___GLsizei;
typedef void (*FUNC_void_GLenum_const_GLsizei___GENPT___GLenum_GLvoid__GENPT__const___GENPT___GLsizei_const_GLint___GENPT__)(GLenum mode, const GLsizei * count, GLenum type, GLvoid*const * indices, GLsizei drawcount, const GLint * basevertex);
typedef struct {
    GLenum a1;
    GLsizei * a2;
    GLenum a3;
    GLvoid*const * a4;
    GLsizei a5;
    GLint * a6;
} ARGS_void_GLenum_const_GLsizei___GENPT___GLenum_GLvoid__GENPT__const___GENPT___GLsizei_const_GLint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_const_GLsizei___GENPT___GLenum_GLvoid__GENPT__const___GENPT___GLsizei_const_GLint___GENPT__ args;
} PACKED_void_GLenum_const_GLsizei___GENPT___GLenum_GLvoid__GENPT__const___GENPT___GLsizei_const_GLint___GENPT__;
typedef void (*FUNC_void_GLenum_const_GLsizei___GENPT___GLenum_const_GLvoid___GENPT___GLsizei)(GLenum mode, const GLsizei * count, GLenum type, const GLvoid * indices, GLsizei primcount);
typedef struct {
    GLenum a1;
    GLsizei * a2;
    GLenum a3;
    GLvoid * a4;
    GLsizei a5;
} ARGS_void_GLenum_const_GLsizei___GENPT___GLenum_const_GLvoid___GENPT___GLsizei;
typedef struct {
    int index;
    ARGS_void_GLenum_const_GLsizei___GENPT___GLenum_const_GLvoid___GENPT___GLsizei args;
} PACKED_void_GLenum_const_GLsizei___GENPT___GLenum_const_GLvoid___GENPT___GLsizei;
typedef void (*FUNC_void_GLenum_GLenum_const_void___GENPT___GLsizei_GLsizei)(GLenum mode, GLenum type, const void * indirect, GLsizei drawcount, GLsizei stride);
typedef struct {
    GLenum a1;
    GLenum a2;
    void * a3;
    GLsizei a4;
    GLsizei a5;
} ARGS_void_GLenum_GLenum_const_void___GENPT___GLsizei_GLsizei;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_const_void___GENPT___GLsizei_GLsizei args;
} PACKED_void_GLenum_GLenum_const_void___GENPT___GLsizei_GLsizei;
typedef void (*FUNC_void_GLenum_GLenum_const_GLvoid___GENPT___GLsizei_GLsizei)(GLenum mode, GLenum type, const GLvoid * indirect, GLsizei primcount, GLsizei stride);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLvoid * a3;
    GLsizei a4;
    GLsizei a5;
} ARGS_void_GLenum_GLenum_const_GLvoid___GENPT___GLsizei_GLsizei;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_const_GLvoid___GENPT___GLsizei_GLsizei args;
} PACKED_void_GLenum_GLenum_const_GLvoid___GENPT___GLsizei_GLsizei;
typedef void (*FUNC_void_GLenum_GLuint_GLuint_const_GLint___GENPT___const_GLsizei___GENPT___GLsizei)(GLenum mode, GLuint start, GLuint end, const GLint * first, const GLsizei * count, GLsizei primcount);
typedef struct {
    GLenum a1;
    GLuint a2;
    GLuint a3;
    GLint * a4;
    GLsizei * a5;
    GLsizei a6;
} ARGS_void_GLenum_GLuint_GLuint_const_GLint___GENPT___const_GLsizei___GENPT___GLsizei;
typedef struct {
    int index;
    ARGS_void_GLenum_GLuint_GLuint_const_GLint___GENPT___const_GLsizei___GENPT___GLsizei args;
} PACKED_void_GLenum_GLuint_GLuint_const_GLint___GENPT___const_GLsizei___GENPT___GLsizei;
typedef void (*FUNC_void_const_GLenum___GENPT___const_GLint___GENPT___const_GLsizei___GENPT___GLsizei_GLint)(const GLenum * mode, const GLint * first, const GLsizei * count, GLsizei primcount, GLint modestride);
typedef struct {
    GLenum * a1;
    GLint * a2;
    GLsizei * a3;
    GLsizei a4;
    GLint a5;
} ARGS_void_const_GLenum___GENPT___const_GLint___GENPT___const_GLsizei___GENPT___GLsizei_GLint;
typedef struct {
    int index;
    ARGS_void_const_GLenum___GENPT___const_GLint___GENPT___const_GLsizei___GENPT___GLsizei_GLint args;
} PACKED_void_const_GLenum___GENPT___const_GLint___GENPT___const_GLsizei___GENPT___GLsizei_GLint;
typedef void (*FUNC_void_const_GLenum___GENPT___const_GLsizei___GENPT___GLenum_GLvoid__GENPT__const___GENPT___GLsizei_GLint)(const GLenum * mode, const GLsizei * count, GLenum type, GLvoid*const * indices, GLsizei primcount, GLint modestride);
typedef struct {
    GLenum * a1;
    GLsizei * a2;
    GLenum a3;
    GLvoid*const * a4;
    GLsizei a5;
    GLint a6;
} ARGS_void_const_GLenum___GENPT___const_GLsizei___GENPT___GLenum_GLvoid__GENPT__const___GENPT___GLsizei_GLint;
typedef struct {
    int index;
    ARGS_void_const_GLenum___GENPT___const_GLsizei___GENPT___GLenum_GLvoid__GENPT__const___GENPT___GLsizei_GLint args;
} PACKED_void_const_GLenum___GENPT___const_GLsizei___GENPT___GLenum_GLvoid__GENPT__const___GENPT___GLsizei_GLint;
typedef void (*FUNC_void_GLenum_GLbyte)(GLenum texture, GLbyte s);
typedef struct {
    GLenum a1;
    GLbyte a2;
} ARGS_void_GLenum_GLbyte;
typedef struct {
    int index;
    ARGS_void_GLenum_GLbyte args;
} PACKED_void_GLenum_GLbyte;
typedef void (*FUNC_void_GLenum_const_GLbyte___GENPT__)(GLenum texture, const GLbyte * coords);
typedef struct {
    GLenum a1;
    GLbyte * a2;
} ARGS_void_GLenum_const_GLbyte___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_const_GLbyte___GENPT__ args;
} PACKED_void_GLenum_const_GLbyte___GENPT__;
typedef void (*FUNC_void_GLenum_GLdouble)(GLenum target, GLdouble s);
typedef struct {
    GLenum a1;
    GLdouble a2 __attribute__ ((aligned(8)));
} ARGS_void_GLenum_GLdouble;
typedef struct {
    int index;
    ARGS_void_GLenum_GLdouble args;
} PACKED_void_GLenum_GLdouble;
typedef void (*FUNC_void_GLenum_GLhalfNV)(GLenum target, GLhalfNV s);
typedef struct {
    GLenum a1;
    GLhalfNV a2;
} ARGS_void_GLenum_GLhalfNV;
typedef struct {
    int index;
    ARGS_void_GLenum_GLhalfNV args;
} PACKED_void_GLenum_GLhalfNV;
typedef void (*FUNC_void_GLenum_const_GLhalfNV___GENPT__)(GLenum target, const GLhalfNV * v);
typedef struct {
    GLenum a1;
    GLhalfNV * a2;
} ARGS_void_GLenum_const_GLhalfNV___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_const_GLhalfNV___GENPT__ args;
} PACKED_void_GLenum_const_GLhalfNV___GENPT__;
typedef void (*FUNC_void_GLenum_GLshort)(GLenum target, GLshort s);
typedef struct {
    GLenum a1;
    GLshort a2;
} ARGS_void_GLenum_GLshort;
typedef struct {
    int index;
    ARGS_void_GLenum_GLshort args;
} PACKED_void_GLenum_GLshort;
typedef void (*FUNC_void_GLenum_const_GLshort___GENPT__)(GLenum target, const GLshort * v);
typedef struct {
    GLenum a1;
    GLshort * a2;
} ARGS_void_GLenum_const_GLshort___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_const_GLshort___GENPT__ args;
} PACKED_void_GLenum_const_GLshort___GENPT__;
typedef void (*FUNC_void_GLenum_GLbyte_GLbyte)(GLenum texture, GLbyte s, GLbyte t);
typedef struct {
    GLenum a1;
    GLbyte a2;
    GLbyte a3;
} ARGS_void_GLenum_GLbyte_GLbyte;
typedef struct {
    int index;
    ARGS_void_GLenum_GLbyte_GLbyte args;
} PACKED_void_GLenum_GLbyte_GLbyte;
typedef void (*FUNC_void_GLenum_GLdouble_GLdouble)(GLenum target, GLdouble s, GLdouble t);
typedef struct {
    GLenum a1;
    GLdouble a2 __attribute__ ((aligned(8)));
    GLdouble a3 __attribute__ ((aligned(8)));
} ARGS_void_GLenum_GLdouble_GLdouble;
typedef struct {
    int index;
    ARGS_void_GLenum_GLdouble_GLdouble args;
} PACKED_void_GLenum_GLdouble_GLdouble;
typedef void (*FUNC_void_GLenum_GLfloat_GLfloat)(GLenum target, GLfloat s, GLfloat t);
typedef struct {
    GLenum a1;
    GLfloat a2;
    GLfloat a3;
} ARGS_void_GLenum_GLfloat_GLfloat;
typedef struct {
    int index;
    ARGS_void_GLenum_GLfloat_GLfloat args;
} PACKED_void_GLenum_GLfloat_GLfloat;
typedef void (*FUNC_void_GLenum_GLhalfNV_GLhalfNV)(GLenum target, GLhalfNV s, GLhalfNV t);
typedef struct {
    GLenum a1;
    GLhalfNV a2;
    GLhalfNV a3;
} ARGS_void_GLenum_GLhalfNV_GLhalfNV;
typedef struct {
    int index;
    ARGS_void_GLenum_GLhalfNV_GLhalfNV args;
} PACKED_void_GLenum_GLhalfNV_GLhalfNV;
typedef void (*FUNC_void_GLenum_GLshort_GLshort)(GLenum target, GLshort s, GLshort t);
typedef struct {
    GLenum a1;
    GLshort a2;
    GLshort a3;
} ARGS_void_GLenum_GLshort_GLshort;
typedef struct {
    int index;
    ARGS_void_GLenum_GLshort_GLshort args;
} PACKED_void_GLenum_GLshort_GLshort;
typedef void (*FUNC_void_GLenum_GLfixed_GLfixed)(GLenum texture, GLfixed s, GLfixed t);
typedef struct {
    GLenum a1;
    GLfixed a2;
    GLfixed a3;
} ARGS_void_GLenum_GLfixed_GLfixed;
typedef struct {
    int index;
    ARGS_void_GLenum_GLfixed_GLfixed args;
} PACKED_void_GLenum_GLfixed_GLfixed;
typedef void (*FUNC_void_GLenum_GLbyte_GLbyte_GLbyte)(GLenum texture, GLbyte s, GLbyte t, GLbyte r);
typedef struct {
    GLenum a1;
    GLbyte a2;
    GLbyte a3;
    GLbyte a4;
} ARGS_void_GLenum_GLbyte_GLbyte_GLbyte;
typedef struct {
    int index;
    ARGS_void_GLenum_GLbyte_GLbyte_GLbyte args;
} PACKED_void_GLenum_GLbyte_GLbyte_GLbyte;
typedef void (*FUNC_void_GLenum_GLhalfNV_GLhalfNV_GLhalfNV)(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r);
typedef struct {
    GLenum a1;
    GLhalfNV a2;
    GLhalfNV a3;
    GLhalfNV a4;
} ARGS_void_GLenum_GLhalfNV_GLhalfNV_GLhalfNV;
typedef struct {
    int index;
    ARGS_void_GLenum_GLhalfNV_GLhalfNV_GLhalfNV args;
} PACKED_void_GLenum_GLhalfNV_GLhalfNV_GLhalfNV;
typedef void (*FUNC_void_GLenum_GLint_GLint_GLint)(GLenum target, GLint s, GLint t, GLint r);
typedef struct {
    GLenum a1;
    GLint a2;
    GLint a3;
    GLint a4;
} ARGS_void_GLenum_GLint_GLint_GLint;
typedef struct {
    int index;
    ARGS_void_GLenum_GLint_GLint_GLint args;
} PACKED_void_GLenum_GLint_GLint_GLint;
typedef void (*FUNC_void_GLenum_GLshort_GLshort_GLshort)(GLenum target, GLshort s, GLshort t, GLshort r);
typedef struct {
    GLenum a1;
    GLshort a2;
    GLshort a3;
    GLshort a4;
} ARGS_void_GLenum_GLshort_GLshort_GLshort;
typedef struct {
    int index;
    ARGS_void_GLenum_GLshort_GLshort_GLshort args;
} PACKED_void_GLenum_GLshort_GLshort_GLshort;
typedef void (*FUNC_void_GLenum_GLfixed_GLfixed_GLfixed)(GLenum texture, GLfixed s, GLfixed t, GLfixed r);
typedef struct {
    GLenum a1;
    GLfixed a2;
    GLfixed a3;
    GLfixed a4;
} ARGS_void_GLenum_GLfixed_GLfixed_GLfixed;
typedef struct {
    int index;
    ARGS_void_GLenum_GLfixed_GLfixed_GLfixed args;
} PACKED_void_GLenum_GLfixed_GLfixed_GLfixed;
typedef void (*FUNC_void_GLenum_GLbyte_GLbyte_GLbyte_GLbyte)(GLenum texture, GLbyte s, GLbyte t, GLbyte r, GLbyte q);
typedef struct {
    GLenum a1;
    GLbyte a2;
    GLbyte a3;
    GLbyte a4;
    GLbyte a5;
} ARGS_void_GLenum_GLbyte_GLbyte_GLbyte_GLbyte;
typedef struct {
    int index;
    ARGS_void_GLenum_GLbyte_GLbyte_GLbyte_GLbyte args;
} PACKED_void_GLenum_GLbyte_GLbyte_GLbyte_GLbyte;
typedef void (*FUNC_void_GLenum_GLhalfNV_GLhalfNV_GLhalfNV_GLhalfNV)(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
typedef struct {
    GLenum a1;
    GLhalfNV a2;
    GLhalfNV a3;
    GLhalfNV a4;
    GLhalfNV a5;
} ARGS_void_GLenum_GLhalfNV_GLhalfNV_GLhalfNV_GLhalfNV;
typedef struct {
    int index;
    ARGS_void_GLenum_GLhalfNV_GLhalfNV_GLhalfNV_GLhalfNV args;
} PACKED_void_GLenum_GLhalfNV_GLhalfNV_GLhalfNV_GLhalfNV;
typedef void (*FUNC_void_GLenum_GLshort_GLshort_GLshort_GLshort)(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
typedef struct {
    GLenum a1;
    GLshort a2;
    GLshort a3;
    GLshort a4;
    GLshort a5;
} ARGS_void_GLenum_GLshort_GLshort_GLshort_GLshort;
typedef struct {
    int index;
    ARGS_void_GLenum_GLshort_GLshort_GLshort_GLshort args;
} PACKED_void_GLenum_GLshort_GLshort_GLshort_GLshort;
typedef void (*FUNC_void_GLenum_GLfixed_GLfixed_GLfixed_GLfixed)(GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q);
typedef struct {
    GLenum a1;
    GLfixed a2;
    GLfixed a3;
    GLfixed a4;
    GLfixed a5;
} ARGS_void_GLenum_GLfixed_GLfixed_GLfixed_GLfixed;
typedef struct {
    int index;
    ARGS_void_GLenum_GLfixed_GLfixed_GLfixed_GLfixed args;
} PACKED_void_GLenum_GLfixed_GLfixed_GLfixed_GLfixed;
typedef void (*FUNC_void_GLenum_GLenum_const_GLuint___GENPT__)(GLenum texture, GLenum type, const GLuint * coords);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLuint * a3;
} ARGS_void_GLenum_GLenum_const_GLuint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_const_GLuint___GENPT__ args;
} PACKED_void_GLenum_GLenum_const_GLuint___GENPT__;
typedef void (*FUNC_void_GLenum_GLint_GLenum_GLsizei_const_GLvoid___GENPT__)(GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLvoid * pointer);
typedef struct {
    GLenum a1;
    GLint a2;
    GLenum a3;
    GLsizei a4;
    GLvoid * a5;
} ARGS_void_GLenum_GLint_GLenum_GLsizei_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLint_GLenum_GLsizei_const_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLint_GLenum_GLsizei_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLenum_GLfloat)(GLenum texunit, GLenum target, GLenum pname, GLfloat param);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLenum a3;
    GLfloat a4;
} ARGS_void_GLenum_GLenum_GLenum_GLfloat;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLenum_GLfloat args;
} PACKED_void_GLenum_GLenum_GLenum_GLfloat;
typedef void (*FUNC_void_GLenum_GLenum_GLenum_const_GLfloat___GENPT__)(GLenum texunit, GLenum target, GLenum pname, const GLfloat * params);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLenum a3;
    GLfloat * a4;
} ARGS_void_GLenum_GLenum_GLenum_const_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLenum_const_GLfloat___GENPT__ args;
} PACKED_void_GLenum_GLenum_GLenum_const_GLfloat___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLenum_GLint)(GLenum texunit, GLenum target, GLenum pname, GLint param);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLenum a3;
    GLint a4;
} ARGS_void_GLenum_GLenum_GLenum_GLint;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLenum_GLint args;
} PACKED_void_GLenum_GLenum_GLenum_GLint;
typedef void (*FUNC_void_GLenum_GLenum_GLenum_const_GLint___GENPT__)(GLenum texunit, GLenum target, GLenum pname, const GLint * params);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLenum a3;
    GLint * a4;
} ARGS_void_GLenum_GLenum_GLenum_const_GLint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLenum_const_GLint___GENPT__ args;
} PACKED_void_GLenum_GLenum_GLenum_const_GLint___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLenum_GLdouble)(GLenum texunit, GLenum coord, GLenum pname, GLdouble param);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLenum a3;
    GLdouble a4 __attribute__ ((aligned(8)));
} ARGS_void_GLenum_GLenum_GLenum_GLdouble;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLenum_GLdouble args;
} PACKED_void_GLenum_GLenum_GLenum_GLdouble;
typedef void (*FUNC_void_GLenum_GLenum_GLenum_const_GLdouble___GENPT__)(GLenum texunit, GLenum coord, GLenum pname, const GLdouble * params);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLenum a3;
    GLdouble * a4;
} ARGS_void_GLenum_GLenum_GLenum_const_GLdouble___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLenum_const_GLdouble___GENPT__ args;
} PACKED_void_GLenum_GLenum_GLenum_const_GLdouble___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLint_GLenum_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid * pixels);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLint a3;
    GLenum a4;
    GLsizei a5;
    GLint a6;
    GLenum a7;
    GLenum a8;
    GLvoid * a9;
} ARGS_void_GLenum_GLenum_GLint_GLenum_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLint_GLenum_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLenum_GLint_GLenum_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLint_GLenum_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid * pixels);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLint a3;
    GLenum a4;
    GLsizei a5;
    GLsizei a6;
    GLint a7;
    GLenum a8;
    GLenum a9;
    GLvoid * a10;
} ARGS_void_GLenum_GLenum_GLint_GLenum_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLint_GLenum_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLenum_GLint_GLenum_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLint_GLenum_GLsizei_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__)(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid * pixels);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLint a3;
    GLenum a4;
    GLsizei a5;
    GLsizei a6;
    GLsizei a7;
    GLint a8;
    GLenum a9;
    GLenum a10;
    GLvoid * a11;
} ARGS_void_GLenum_GLenum_GLint_GLenum_GLsizei_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLint_GLenum_GLsizei_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLenum_GLint_GLenum_GLsizei_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLenum_const_GLuint___GENPT__)(GLenum texunit, GLenum target, GLenum pname, const GLuint * params);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLenum a3;
    GLuint * a4;
} ARGS_void_GLenum_GLenum_GLenum_const_GLuint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLenum_const_GLuint___GENPT__ args;
} PACKED_void_GLenum_GLenum_GLenum_const_GLuint___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLint_GLint_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid * pixels);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLint a3;
    GLint a4;
    GLsizei a5;
    GLenum a6;
    GLenum a7;
    GLvoid * a8;
} ARGS_void_GLenum_GLenum_GLint_GLint_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLint_GLint_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLenum_GLint_GLint_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLint_GLint_GLint_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * pixels);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLint a3;
    GLint a4;
    GLint a5;
    GLsizei a6;
    GLsizei a7;
    GLenum a8;
    GLenum a9;
    GLvoid * a10;
} ARGS_void_GLenum_GLenum_GLint_GLint_GLint_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLint_GLint_GLint_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLenum_GLint_GLint_GLint_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__)(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid * pixels);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLint a3;
    GLint a4;
    GLint a5;
    GLint a6;
    GLsizei a7;
    GLsizei a8;
    GLsizei a9;
    GLenum a10;
    GLenum a11;
    GLvoid * a12;
} ARGS_void_GLenum_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLuint_GLsizeiptr_const_GLvoid___GENPT___GLenum)(GLuint buffer, GLsizeiptr size, const GLvoid * data, GLenum usage);
typedef struct {
    GLuint a1;
    GLsizeiptr a2;
    GLvoid * a3;
    GLenum a4;
} ARGS_void_GLuint_GLsizeiptr_const_GLvoid___GENPT___GLenum;
typedef struct {
    int index;
    ARGS_void_GLuint_GLsizeiptr_const_GLvoid___GENPT___GLenum args;
} PACKED_void_GLuint_GLsizeiptr_const_GLvoid___GENPT___GLenum;
typedef void (*FUNC_void_GLuint_GLintptr_GLsizeiptr_const_GLvoid___GENPT__)(GLuint buffer, GLintptr offset, GLsizeiptr size, const GLvoid * data);
typedef struct {
    GLuint a1;
    GLintptr a2;
    GLsizeiptr a3;
    GLvoid * a4;
} ARGS_void_GLuint_GLintptr_GLsizeiptr_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLintptr_GLsizeiptr_const_GLvoid___GENPT__ args;
} PACKED_void_GLuint_GLintptr_GLsizeiptr_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLuint_GLuint_GLintptr_GLintptr_GLsizeiptr)(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef struct {
    GLuint a1;
    GLuint a2;
    GLintptr a3;
    GLintptr a4;
    GLsizeiptr a5;
} ARGS_void_GLuint_GLuint_GLintptr_GLintptr_GLsizeiptr;
typedef struct {
    int index;
    ARGS_void_GLuint_GLuint_GLintptr_GLintptr_GLsizeiptr args;
} PACKED_void_GLuint_GLuint_GLintptr_GLintptr_GLsizeiptr;
typedef void (*FUNC_void_GLuint_GLenum_GLenum_GLuint)(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLenum a3;
    GLuint a4;
} ARGS_void_GLuint_GLenum_GLenum_GLuint;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLenum_GLuint args;
} PACKED_void_GLuint_GLenum_GLenum_GLuint;
typedef void (*FUNC_void_GLuint_GLenum_GLenum_GLuint_GLint)(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLenum a3;
    GLuint a4;
    GLint a5;
} ARGS_void_GLuint_GLenum_GLenum_GLuint_GLint;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLenum_GLuint_GLint args;
} PACKED_void_GLuint_GLenum_GLenum_GLuint_GLint;
typedef void (*FUNC_void_GLuint_GLenum_GLenum_GLuint_GLint_GLint)(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLenum a3;
    GLuint a4;
    GLint a5;
    GLint a6;
} ARGS_void_GLuint_GLenum_GLenum_GLuint_GLint_GLint;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLenum_GLuint_GLint_GLint args;
} PACKED_void_GLuint_GLenum_GLenum_GLuint_GLint_GLint;
typedef void (*FUNC_void_GLuint_GLenum_GLuint_GLint)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLuint a3;
    GLint a4;
} ARGS_void_GLuint_GLenum_GLuint_GLint;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLuint_GLint args;
} PACKED_void_GLuint_GLenum_GLuint_GLint;
typedef void (*FUNC_void_GLuint_GLenum_GLuint_GLint_GLenum)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLuint a3;
    GLint a4;
    GLenum a5;
} ARGS_void_GLuint_GLenum_GLuint_GLint_GLenum;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLuint_GLint_GLenum args;
} PACKED_void_GLuint_GLenum_GLuint_GLint_GLenum;
typedef void (*FUNC_void_GLuint_GLenum_GLuint_GLint_GLint)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLuint a3;
    GLint a4;
    GLint a5;
} ARGS_void_GLuint_GLenum_GLuint_GLint_GLint;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLuint_GLint_GLint args;
} PACKED_void_GLuint_GLenum_GLuint_GLint_GLint;
typedef void (*FUNC_void_GLuint_GLenum_GLuint_GLdouble_GLdouble_GLdouble_GLdouble)(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLuint a3;
    GLdouble a4 __attribute__ ((aligned(8)));
    GLdouble a5 __attribute__ ((aligned(8)));
    GLdouble a6 __attribute__ ((aligned(8)));
    GLdouble a7 __attribute__ ((aligned(8)));
} ARGS_void_GLuint_GLenum_GLuint_GLdouble_GLdouble_GLdouble_GLdouble;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLuint_GLdouble_GLdouble_GLdouble_GLdouble args;
} PACKED_void_GLuint_GLenum_GLuint_GLdouble_GLdouble_GLdouble_GLdouble;
typedef void (*FUNC_void_GLuint_GLenum_GLuint_const_GLdouble___GENPT__)(GLuint program, GLenum target, GLuint index, const GLdouble * params);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLuint a3;
    GLdouble * a4;
} ARGS_void_GLuint_GLenum_GLuint_const_GLdouble___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLuint_const_GLdouble___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLuint_const_GLdouble___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_GLuint_GLfloat_GLfloat_GLfloat_GLfloat)(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLuint a3;
    GLfloat a4;
    GLfloat a5;
    GLfloat a6;
    GLfloat a7;
} ARGS_void_GLuint_GLenum_GLuint_GLfloat_GLfloat_GLfloat_GLfloat;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLuint_GLfloat_GLfloat_GLfloat_GLfloat args;
} PACKED_void_GLuint_GLenum_GLuint_GLfloat_GLfloat_GLfloat_GLfloat;
typedef void (*FUNC_void_GLuint_GLenum_GLuint_const_GLfloat___GENPT__)(GLuint program, GLenum target, GLuint index, const GLfloat * params);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLuint a3;
    GLfloat * a4;
} ARGS_void_GLuint_GLenum_GLuint_const_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLuint_const_GLfloat___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLuint_const_GLfloat___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_GLuint_GLint_GLint_GLint_GLint)(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLuint a3;
    GLint a4;
    GLint a5;
    GLint a6;
    GLint a7;
} ARGS_void_GLuint_GLenum_GLuint_GLint_GLint_GLint_GLint;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLuint_GLint_GLint_GLint_GLint args;
} PACKED_void_GLuint_GLenum_GLuint_GLint_GLint_GLint_GLint;
typedef void (*FUNC_void_GLuint_GLenum_GLuint_const_GLint___GENPT__)(GLuint program, GLenum target, GLuint index, const GLint * params);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLuint a3;
    GLint * a4;
} ARGS_void_GLuint_GLenum_GLuint_const_GLint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLuint_const_GLint___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLuint_const_GLint___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_GLuint_GLuint_GLuint_GLuint_GLuint)(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLuint a3;
    GLuint a4;
    GLuint a5;
    GLuint a6;
    GLuint a7;
} ARGS_void_GLuint_GLenum_GLuint_GLuint_GLuint_GLuint_GLuint;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLuint_GLuint_GLuint_GLuint_GLuint args;
} PACKED_void_GLuint_GLenum_GLuint_GLuint_GLuint_GLuint_GLuint;
typedef void (*FUNC_void_GLuint_GLenum_GLuint_const_GLuint___GENPT__)(GLuint program, GLenum target, GLuint index, const GLuint * params);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLuint a3;
    GLuint * a4;
} ARGS_void_GLuint_GLenum_GLuint_const_GLuint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLuint_const_GLuint___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLuint_const_GLuint___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_GLuint_GLsizei_const_GLfloat___GENPT__)(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat * params);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLuint a3;
    GLsizei a4;
    GLfloat * a5;
} ARGS_void_GLuint_GLenum_GLuint_GLsizei_const_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLuint_GLsizei_const_GLfloat___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLuint_GLsizei_const_GLfloat___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_GLuint_GLsizei_const_GLint___GENPT__)(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint * params);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLuint a3;
    GLsizei a4;
    GLint * a5;
} ARGS_void_GLuint_GLenum_GLuint_GLsizei_const_GLint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLuint_GLsizei_const_GLint___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLuint_GLsizei_const_GLint___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_GLuint_GLsizei_const_GLuint___GENPT__)(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint * params);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLuint a3;
    GLsizei a4;
    GLuint * a5;
} ARGS_void_GLuint_GLenum_GLuint_GLsizei_const_GLuint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLuint_GLsizei_const_GLuint___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLuint_GLsizei_const_GLuint___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_GLenum_GLsizei_const_GLvoid___GENPT__)(GLuint program, GLenum target, GLenum format, GLsizei len, const GLvoid * string);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLenum a3;
    GLsizei a4;
    GLvoid * a5;
} ARGS_void_GLuint_GLenum_GLenum_GLsizei_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLenum_GLsizei_const_GLvoid___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLenum_GLsizei_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_GLsizei_GLsizei)(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLsizei a3;
    GLsizei a4;
} ARGS_void_GLuint_GLenum_GLsizei_GLsizei;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLsizei_GLsizei args;
} PACKED_void_GLuint_GLenum_GLsizei_GLsizei;
typedef void (*FUNC_void_GLuint_GLsizei_GLsizei_GLenum_GLsizei_GLsizei)(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
typedef struct {
    GLuint a1;
    GLsizei a2;
    GLsizei a3;
    GLenum a4;
    GLsizei a5;
    GLsizei a6;
} ARGS_void_GLuint_GLsizei_GLsizei_GLenum_GLsizei_GLsizei;
typedef struct {
    int index;
    ARGS_void_GLuint_GLsizei_GLsizei_GLenum_GLsizei_GLsizei args;
} PACKED_void_GLuint_GLsizei_GLsizei_GLenum_GLsizei_GLsizei;
typedef void (*FUNC_void_GLuint_GLsizei_GLenum_GLsizei_GLsizei)(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef struct {
    GLuint a1;
    GLsizei a2;
    GLenum a3;
    GLsizei a4;
    GLsizei a5;
} ARGS_void_GLuint_GLsizei_GLenum_GLsizei_GLsizei;
typedef struct {
    int index;
    ARGS_void_GLuint_GLsizei_GLenum_GLsizei_GLsizei args;
} PACKED_void_GLuint_GLsizei_GLenum_GLsizei_GLsizei;
typedef void (*FUNC_void_GLenum_GLint_const_GLchar___GENPT___GLint_const_GLchar___GENPT__)(GLenum type, GLint namelen, const GLchar * name, GLint stringlen, const GLchar * string);
typedef struct {
    GLenum a1;
    GLint a2;
    GLchar * a3;
    GLint a4;
    GLchar * a5;
} ARGS_void_GLenum_GLint_const_GLchar___GENPT___GLint_const_GLchar___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLint_const_GLchar___GENPT___GLint_const_GLchar___GENPT__ args;
} PACKED_void_GLenum_GLint_const_GLchar___GENPT___GLint_const_GLchar___GENPT__;
typedef GLuint (*FUNC_GLuint_GLsizei_const_GLvoid___GENPT___GLenum)(GLsizei size, const GLvoid * pointer, GLenum usage);
typedef struct {
    GLsizei a1;
    GLvoid * a2;
    GLenum a3;
} ARGS_GLuint_GLsizei_const_GLvoid___GENPT___GLenum;
typedef struct {
    int index;
    ARGS_GLuint_GLsizei_const_GLvoid___GENPT___GLenum args;
} PACKED_GLuint_GLsizei_const_GLvoid___GENPT___GLenum;
typedef void (*FUNC_void_GLenum_GLuint_GLsizei_const_GLchar___GENPT__)(GLenum identifier, GLuint name, GLsizei length, const GLchar * label);
typedef struct {
    GLenum a1;
    GLuint a2;
    GLsizei a3;
    GLchar * a4;
} ARGS_void_GLenum_GLuint_GLsizei_const_GLchar___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLuint_GLsizei_const_GLchar___GENPT__ args;
} PACKED_void_GLenum_GLuint_GLsizei_const_GLchar___GENPT__;
typedef void (*FUNC_void_const_void___GENPT___GLsizei_const_GLchar___GENPT__)(const void * ptr, GLsizei length, const GLchar * label);
typedef struct {
    void * a1;
    GLsizei a2;
    GLchar * a3;
} ARGS_void_const_void___GENPT___GLsizei_const_GLchar___GENPT__;
typedef struct {
    int index;
    ARGS_void_const_void___GENPT___GLsizei_const_GLchar___GENPT__ args;
} PACKED_void_const_void___GENPT___GLsizei_const_GLchar___GENPT__;
typedef GLenum (*FUNC_GLenum_GLenum_GLuint_GLenum)(GLenum objectType, GLuint name, GLenum option);
typedef struct {
    GLenum a1;
    GLuint a2;
    GLenum a3;
} ARGS_GLenum_GLenum_GLuint_GLenum;
typedef struct {
    int index;
    ARGS_GLenum_GLenum_GLuint_GLenum args;
} PACKED_GLenum_GLenum_GLuint_GLenum;
typedef void (*FUNC_void_GLuint_GLuint_GLenum)(GLuint dst, GLuint coord, GLenum swizzle);
typedef struct {
    GLuint a1;
    GLuint a2;
    GLenum a3;
} ARGS_void_GLuint_GLuint_GLenum;
typedef struct {
    int index;
    ARGS_void_GLuint_GLuint_GLenum args;
} PACKED_void_GLuint_GLuint_GLenum;
typedef void (*FUNC_void_GLuint_GLsizei_const_GLubyte___GENPT___GLsizei_GLenum_const_GLvoid___GENPT__)(GLuint path, GLsizei numCommands, const GLubyte * commands, GLsizei numCoords, GLenum coordType, const GLvoid * coords);
typedef struct {
    GLuint a1;
    GLsizei a2;
    GLubyte * a3;
    GLsizei a4;
    GLenum a5;
    GLvoid * a6;
} ARGS_void_GLuint_GLsizei_const_GLubyte___GENPT___GLsizei_GLenum_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLsizei_const_GLubyte___GENPT___GLsizei_GLenum_const_GLvoid___GENPT__ args;
} PACKED_void_GLuint_GLsizei_const_GLubyte___GENPT___GLsizei_GLenum_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLuint_GLsizei_GLenum_const_GLvoid___GENPT__)(GLuint path, GLsizei numCoords, GLenum coordType, const GLvoid * coords);
typedef struct {
    GLuint a1;
    GLsizei a2;
    GLenum a3;
    GLvoid * a4;
} ARGS_void_GLuint_GLsizei_GLenum_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLsizei_GLenum_const_GLvoid___GENPT__ args;
} PACKED_void_GLuint_GLsizei_GLenum_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLuint_GLsizei_const_GLfloat___GENPT__)(GLuint path, GLsizei dashCount, const GLfloat * dashArray);
typedef struct {
    GLuint a1;
    GLsizei a2;
    GLfloat * a3;
} ARGS_void_GLuint_GLsizei_const_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLsizei_const_GLfloat___GENPT__ args;
} PACKED_void_GLuint_GLsizei_const_GLfloat___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_const_GLvoid___GENPT___GLbitfield_GLuint_GLsizei_GLenum_GLuint_GLfloat)(GLuint firstPathName, GLenum fontTarget, const GLvoid * fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLvoid * a3;
    GLbitfield a4;
    GLuint a5;
    GLsizei a6;
    GLenum a7;
    GLuint a8;
    GLfloat a9;
} ARGS_void_GLuint_GLenum_const_GLvoid___GENPT___GLbitfield_GLuint_GLsizei_GLenum_GLuint_GLfloat;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_const_GLvoid___GENPT___GLbitfield_GLuint_GLsizei_GLenum_GLuint_GLfloat args;
} PACKED_void_GLuint_GLenum_const_GLvoid___GENPT___GLbitfield_GLuint_GLsizei_GLenum_GLuint_GLfloat;
typedef void (*FUNC_void_GLuint_GLenum_const_GLvoid___GENPT___GLbitfield_GLsizei_GLenum_const_GLvoid___GENPT___GLenum_GLuint_GLfloat)(GLuint firstPathName, GLenum fontTarget, const GLvoid * fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const GLvoid * charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLvoid * a3;
    GLbitfield a4;
    GLsizei a5;
    GLenum a6;
    GLvoid * a7;
    GLenum a8;
    GLuint a9;
    GLfloat a10;
} ARGS_void_GLuint_GLenum_const_GLvoid___GENPT___GLbitfield_GLsizei_GLenum_const_GLvoid___GENPT___GLenum_GLuint_GLfloat;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_const_GLvoid___GENPT___GLbitfield_GLsizei_GLenum_const_GLvoid___GENPT___GLenum_GLuint_GLfloat args;
} PACKED_void_GLuint_GLenum_const_GLvoid___GENPT___GLbitfield_GLsizei_GLenum_const_GLvoid___GENPT___GLenum_GLuint_GLfloat;
typedef void (*FUNC_void_GLenum_GLint_GLuint)(GLenum func, GLint ref, GLuint mask);
typedef struct {
    GLenum a1;
    GLint a2;
    GLuint a3;
} ARGS_void_GLenum_GLint_GLuint;
typedef struct {
    int index;
    ARGS_void_GLenum_GLint_GLuint args;
} PACKED_void_GLenum_GLint_GLuint;
typedef void (*FUNC_void_GLuint_GLenum_GLsizei_const_GLvoid___GENPT__)(GLuint path, GLenum format, GLsizei length, const GLvoid * pathString);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLsizei a3;
    GLvoid * a4;
} ARGS_void_GLuint_GLenum_GLsizei_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLsizei_const_GLvoid___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLsizei_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLuint_GLsizei_GLsizei_GLsizei_const_GLubyte___GENPT___GLsizei_GLenum_const_GLvoid___GENPT__)(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte * commands, GLsizei numCoords, GLenum coordType, const GLvoid * coords);
typedef struct {
    GLuint a1;
    GLsizei a2;
    GLsizei a3;
    GLsizei a4;
    GLubyte * a5;
    GLsizei a6;
    GLenum a7;
    GLvoid * a8;
} ARGS_void_GLuint_GLsizei_GLsizei_GLsizei_const_GLubyte___GENPT___GLsizei_GLenum_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLsizei_GLsizei_GLsizei_const_GLubyte___GENPT___GLsizei_GLenum_const_GLvoid___GENPT__ args;
} PACKED_void_GLuint_GLsizei_GLsizei_GLsizei_const_GLubyte___GENPT___GLsizei_GLenum_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLuint_GLsizei_GLsizei_GLenum_const_GLvoid___GENPT__)(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const GLvoid * coords);
typedef struct {
    GLuint a1;
    GLsizei a2;
    GLsizei a3;
    GLenum a4;
    GLvoid * a5;
} ARGS_void_GLuint_GLsizei_GLsizei_GLenum_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLsizei_GLsizei_GLenum_const_GLvoid___GENPT__ args;
} PACKED_void_GLuint_GLsizei_GLsizei_GLenum_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLint_const_GLfloat___GENPT__)(GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat * coeffs);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLint a3;
    GLfloat * a4;
} ARGS_void_GLenum_GLenum_GLint_const_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLint_const_GLfloat___GENPT__ args;
} PACKED_void_GLenum_GLenum_GLint_const_GLfloat___GENPT__;
typedef void (*FUNC_void_GLenum_GLsizei_const_GLuint___GENPT__)(GLenum map, GLsizei mapsize, const GLuint * values);
typedef struct {
    GLenum a1;
    GLsizei a2;
    GLuint * a3;
} ARGS_void_GLenum_GLsizei_const_GLuint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLsizei_const_GLuint___GENPT__ args;
} PACKED_void_GLenum_GLsizei_const_GLuint___GENPT__;
typedef void (*FUNC_void_GLenum_GLsizei_const_GLushort___GENPT__)(GLenum map, GLsizei mapsize, const GLushort * values);
typedef struct {
    GLenum a1;
    GLsizei a2;
    GLushort * a3;
} ARGS_void_GLenum_GLsizei_const_GLushort___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLsizei_const_GLushort___GENPT__ args;
} PACKED_void_GLenum_GLsizei_const_GLushort___GENPT__;
typedef void (*FUNC_void_GLenum_GLint_const_GLfixed___GENPT__)(GLenum map, GLint size, const GLfixed * values);
typedef struct {
    GLenum a1;
    GLint a2;
    GLfixed * a3;
} ARGS_void_GLenum_GLint_const_GLfixed___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLint_const_GLfixed___GENPT__ args;
} PACKED_void_GLenum_GLint_const_GLfixed___GENPT__;
typedef GLboolean (*FUNC_GLboolean_GLuint_GLsizei_GLsizei_GLfloat_GLfloat___GENPT___GLfloat___GENPT___GLfloat___GENPT___GLfloat___GENPT__)(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat * x, GLfloat * y, GLfloat * tangentX, GLfloat * tangentY);
typedef struct {
    GLuint a1;
    GLsizei a2;
    GLsizei a3;
    GLfloat a4;
    GLfloat * a5;
    GLfloat * a6;
    GLfloat * a7;
    GLfloat * a8;
} ARGS_GLboolean_GLuint_GLsizei_GLsizei_GLfloat_GLfloat___GENPT___GLfloat___GENPT___GLfloat___GENPT___GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_GLboolean_GLuint_GLsizei_GLsizei_GLfloat_GLfloat___GENPT___GLfloat___GENPT___GLfloat___GENPT___GLfloat___GENPT__ args;
} PACKED_GLboolean_GLuint_GLsizei_GLsizei_GLfloat_GLfloat___GENPT___GLfloat___GENPT___GLfloat___GENPT___GLfloat___GENPT__;
typedef GLint (*FUNC_GLint_GLint___GENPT__)(GLint * marker_p);
typedef struct {
    GLint * a1;
} ARGS_GLint_GLint___GENPT__;
typedef struct {
    int index;
    ARGS_GLint_GLint___GENPT__ args;
} PACKED_GLint_GLint___GENPT__;
typedef void (*FUNC_void_GLuint_GLuint64EXT_GLuint_GLuint_GLenum_GLenum_GLuint_GLenum_GLuint_GLenum_GLuint_GLenum_GLuint)(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3);
typedef struct {
    GLuint a1;
    GLuint64EXT a2;
    GLuint a3;
    GLuint a4;
    GLenum a5;
    GLenum a6;
    GLuint a7;
    GLenum a8;
    GLuint a9;
    GLenum a10;
    GLuint a11;
    GLenum a12;
    GLuint a13;
} ARGS_void_GLuint_GLuint64EXT_GLuint_GLuint_GLenum_GLenum_GLuint_GLenum_GLuint_GLenum_GLuint_GLenum_GLuint;
typedef struct {
    int index;
    ARGS_void_GLuint_GLuint64EXT_GLuint_GLuint_GLenum_GLenum_GLuint_GLenum_GLuint_GLenum_GLuint_GLenum_GLuint args;
} PACKED_void_GLuint_GLuint64EXT_GLuint_GLuint_GLenum_GLenum_GLuint_GLenum_GLuint_GLenum_GLuint_GLenum_GLuint;
typedef void (*FUNC_void_GLuint_GLuint64EXT_GLuint_GLuint_GLenum_GLenum_GLuint_GLuint_GLenum_GLuint_GLuint)(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1);
typedef struct {
    GLuint a1;
    GLuint64EXT a2;
    GLuint a3;
    GLuint a4;
    GLenum a5;
    GLenum a6;
    GLuint a7;
    GLuint a8;
    GLenum a9;
    GLuint a10;
    GLuint a11;
} ARGS_void_GLuint_GLuint64EXT_GLuint_GLuint_GLenum_GLenum_GLuint_GLuint_GLenum_GLuint_GLuint;
typedef struct {
    int index;
    ARGS_void_GLuint_GLuint64EXT_GLuint_GLuint_GLenum_GLenum_GLuint_GLuint_GLenum_GLuint_GLuint args;
} PACKED_void_GLuint_GLuint64EXT_GLuint_GLuint_GLenum_GLenum_GLuint_GLuint_GLenum_GLuint_GLuint;
typedef void (*FUNC_void_GLsizei_const_GLuint___GENPT___const_GLfloat___GENPT__)(GLsizei n, const GLuint * textures, const GLfloat * priorities);
typedef struct {
    GLsizei a1;
    GLuint * a2;
    GLfloat * a3;
} ARGS_void_GLsizei_const_GLuint___GENPT___const_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLsizei_const_GLuint___GENPT___const_GLfloat___GENPT__ args;
} PACKED_void_GLsizei_const_GLuint___GENPT___const_GLfloat___GENPT__;
typedef void (*FUNC_void_GLsizei_const_GLuint___GENPT___const_GLclampf___GENPT__)(GLsizei n, const GLuint * textures, const GLclampf * priorities);
typedef struct {
    GLsizei a1;
    GLuint * a2;
    GLclampf * a3;
} ARGS_void_GLsizei_const_GLuint___GENPT___const_GLclampf___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLsizei_const_GLuint___GENPT___const_GLclampf___GENPT__ args;
} PACKED_void_GLsizei_const_GLuint___GENPT___const_GLclampf___GENPT__;
typedef void (*FUNC_void_GLsizei_const_GLuint___GENPT___const_GLfixed___GENPT__)(GLsizei n, const GLuint * textures, const GLfixed * priorities);
typedef struct {
    GLsizei a1;
    GLuint * a2;
    GLfixed * a3;
} ARGS_void_GLsizei_const_GLuint___GENPT___const_GLfixed___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLsizei_const_GLuint___GENPT___const_GLfixed___GENPT__ args;
} PACKED_void_GLsizei_const_GLuint___GENPT___const_GLfixed___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_const_GLvoid___GENPT___GLsizei)(GLuint program, GLenum binaryFormat, const GLvoid * binary, GLsizei length);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLvoid * a3;
    GLsizei a4;
} ARGS_void_GLuint_GLenum_const_GLvoid___GENPT___GLsizei;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_const_GLvoid___GENPT___GLsizei args;
} PACKED_void_GLuint_GLenum_const_GLvoid___GENPT___GLsizei;
typedef void (*FUNC_void_GLenum_GLuint_GLuint_GLsizei_const_GLint___GENPT__)(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLint * params);
typedef struct {
    GLenum a1;
    GLuint a2;
    GLuint a3;
    GLsizei a4;
    GLint * a5;
} ARGS_void_GLenum_GLuint_GLuint_GLsizei_const_GLint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLuint_GLuint_GLsizei_const_GLint___GENPT__ args;
} PACKED_void_GLenum_GLuint_GLuint_GLsizei_const_GLint___GENPT__;
typedef void (*FUNC_void_GLenum_GLuint_GLuint_GLsizei_const_GLuint___GENPT__)(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLuint * params);
typedef struct {
    GLenum a1;
    GLuint a2;
    GLuint a3;
    GLsizei a4;
    GLuint * a5;
} ARGS_void_GLenum_GLuint_GLuint_GLsizei_const_GLuint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLuint_GLuint_GLsizei_const_GLuint___GENPT__ args;
} PACKED_void_GLenum_GLuint_GLuint_GLsizei_const_GLuint___GENPT__;
typedef void (*FUNC_void_GLenum_GLuint_GLuint_GLsizei_const_GLfloat___GENPT__)(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLfloat * params);
typedef struct {
    GLenum a1;
    GLuint a2;
    GLuint a3;
    GLsizei a4;
    GLfloat * a5;
} ARGS_void_GLenum_GLuint_GLuint_GLsizei_const_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLuint_GLuint_GLsizei_const_GLfloat___GENPT__ args;
} PACKED_void_GLenum_GLuint_GLuint_GLsizei_const_GLfloat___GENPT__;
typedef void (*FUNC_void_GLenum_GLuint_GLdouble_GLdouble_GLdouble_GLdouble)(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef struct {
    GLenum a1;
    GLuint a2;
    GLdouble a3 __attribute__ ((aligned(8)));
    GLdouble a4 __attribute__ ((aligned(8)));
    GLdouble a5 __attribute__ ((aligned(8)));
    GLdouble a6 __attribute__ ((aligned(8)));
} ARGS_void_GLenum_GLuint_GLdouble_GLdouble_GLdouble_GLdouble;
typedef struct {
    int index;
    ARGS_void_GLenum_GLuint_GLdouble_GLdouble_GLdouble_GLdouble args;
} PACKED_void_GLenum_GLuint_GLdouble_GLdouble_GLdouble_GLdouble;
typedef void (*FUNC_void_GLenum_GLuint_const_GLdouble___GENPT__)(GLenum target, GLuint index, const GLdouble * params);
typedef struct {
    GLenum a1;
    GLuint a2;
    GLdouble * a3;
} ARGS_void_GLenum_GLuint_const_GLdouble___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLuint_const_GLdouble___GENPT__ args;
} PACKED_void_GLenum_GLuint_const_GLdouble___GENPT__;
typedef void (*FUNC_void_GLenum_GLuint_GLfloat_GLfloat_GLfloat_GLfloat)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef struct {
    GLenum a1;
    GLuint a2;
    GLfloat a3;
    GLfloat a4;
    GLfloat a5;
    GLfloat a6;
} ARGS_void_GLenum_GLuint_GLfloat_GLfloat_GLfloat_GLfloat;
typedef struct {
    int index;
    ARGS_void_GLenum_GLuint_GLfloat_GLfloat_GLfloat_GLfloat args;
} PACKED_void_GLenum_GLuint_GLfloat_GLfloat_GLfloat_GLfloat;
typedef void (*FUNC_void_GLenum_GLuint_GLint_GLint_GLint_GLint)(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
typedef struct {
    GLenum a1;
    GLuint a2;
    GLint a3;
    GLint a4;
    GLint a5;
    GLint a6;
} ARGS_void_GLenum_GLuint_GLint_GLint_GLint_GLint;
typedef struct {
    int index;
    ARGS_void_GLenum_GLuint_GLint_GLint_GLint_GLint args;
} PACKED_void_GLenum_GLuint_GLint_GLint_GLint_GLint;
typedef void (*FUNC_void_GLenum_GLuint_const_GLint___GENPT__)(GLenum target, GLuint index, const GLint * params);
typedef struct {
    GLenum a1;
    GLuint a2;
    GLint * a3;
} ARGS_void_GLenum_GLuint_const_GLint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLuint_const_GLint___GENPT__ args;
} PACKED_void_GLenum_GLuint_const_GLint___GENPT__;
typedef void (*FUNC_void_GLenum_GLuint_GLsizei_const_GLfloat___GENPT__)(GLenum target, GLuint index, GLsizei count, const GLfloat * params);
typedef struct {
    GLenum a1;
    GLuint a2;
    GLsizei a3;
    GLfloat * a4;
} ARGS_void_GLenum_GLuint_GLsizei_const_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLuint_GLsizei_const_GLfloat___GENPT__ args;
} PACKED_void_GLenum_GLuint_GLsizei_const_GLfloat___GENPT__;
typedef void (*FUNC_void_GLenum_GLuint_GLsizei_const_GLint___GENPT__)(GLenum target, GLuint index, GLsizei count, const GLint * params);
typedef struct {
    GLenum a1;
    GLuint a2;
    GLsizei a3;
    GLint * a4;
} ARGS_void_GLenum_GLuint_GLsizei_const_GLint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLuint_GLsizei_const_GLint___GENPT__ args;
} PACKED_void_GLenum_GLuint_GLsizei_const_GLint___GENPT__;
typedef void (*FUNC_void_GLenum_GLuint_GLsizei_const_GLuint___GENPT__)(GLenum target, GLuint index, GLsizei count, const GLuint * params);
typedef struct {
    GLenum a1;
    GLuint a2;
    GLsizei a3;
    GLuint * a4;
} ARGS_void_GLenum_GLuint_GLsizei_const_GLuint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLuint_GLsizei_const_GLuint___GENPT__ args;
} PACKED_void_GLenum_GLuint_GLsizei_const_GLuint___GENPT__;
typedef void (*FUNC_void_GLuint_GLsizei_const_GLubyte___GENPT___GLdouble_GLdouble_GLdouble_GLdouble)(GLuint id, GLsizei len, const GLubyte * name, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef struct {
    GLuint a1;
    GLsizei a2;
    GLubyte * a3;
    GLdouble a4 __attribute__ ((aligned(8)));
    GLdouble a5 __attribute__ ((aligned(8)));
    GLdouble a6 __attribute__ ((aligned(8)));
    GLdouble a7 __attribute__ ((aligned(8)));
} ARGS_void_GLuint_GLsizei_const_GLubyte___GENPT___GLdouble_GLdouble_GLdouble_GLdouble;
typedef struct {
    int index;
    ARGS_void_GLuint_GLsizei_const_GLubyte___GENPT___GLdouble_GLdouble_GLdouble_GLdouble args;
} PACKED_void_GLuint_GLsizei_const_GLubyte___GENPT___GLdouble_GLdouble_GLdouble_GLdouble;
typedef void (*FUNC_void_GLuint_GLsizei_const_GLubyte___GENPT___const_GLdouble___GENPT__)(GLuint id, GLsizei len, const GLubyte * name, const GLdouble * v);
typedef struct {
    GLuint a1;
    GLsizei a2;
    GLubyte * a3;
    GLdouble * a4;
} ARGS_void_GLuint_GLsizei_const_GLubyte___GENPT___const_GLdouble___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLsizei_const_GLubyte___GENPT___const_GLdouble___GENPT__ args;
} PACKED_void_GLuint_GLsizei_const_GLubyte___GENPT___const_GLdouble___GENPT__;
typedef void (*FUNC_void_GLuint_GLsizei_const_GLubyte___GENPT___GLfloat_GLfloat_GLfloat_GLfloat)(GLuint id, GLsizei len, const GLubyte * name, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef struct {
    GLuint a1;
    GLsizei a2;
    GLubyte * a3;
    GLfloat a4;
    GLfloat a5;
    GLfloat a6;
    GLfloat a7;
} ARGS_void_GLuint_GLsizei_const_GLubyte___GENPT___GLfloat_GLfloat_GLfloat_GLfloat;
typedef struct {
    int index;
    ARGS_void_GLuint_GLsizei_const_GLubyte___GENPT___GLfloat_GLfloat_GLfloat_GLfloat args;
} PACKED_void_GLuint_GLsizei_const_GLubyte___GENPT___GLfloat_GLfloat_GLfloat_GLfloat;
typedef void (*FUNC_void_GLuint_GLsizei_const_GLubyte___GENPT___const_GLfloat___GENPT__)(GLuint id, GLsizei len, const GLubyte * name, const GLfloat * v);
typedef struct {
    GLuint a1;
    GLsizei a2;
    GLubyte * a3;
    GLfloat * a4;
} ARGS_void_GLuint_GLsizei_const_GLubyte___GENPT___const_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLsizei_const_GLubyte___GENPT___const_GLfloat___GENPT__ args;
} PACKED_void_GLuint_GLsizei_const_GLubyte___GENPT___const_GLfloat___GENPT__;
typedef void (*FUNC_void_GLenum_GLuint_GLsizei_const_GLdouble___GENPT__)(GLenum target, GLuint index, GLsizei count, const GLdouble * v);
typedef struct {
    GLenum a1;
    GLuint a2;
    GLsizei a3;
    GLdouble * a4;
} ARGS_void_GLenum_GLuint_GLsizei_const_GLdouble___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLuint_GLsizei_const_GLdouble___GENPT__ args;
} PACKED_void_GLenum_GLuint_GLsizei_const_GLdouble___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLsizei_const_GLvoid___GENPT__)(GLenum target, GLenum format, GLsizei len, const GLvoid * string);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLsizei a3;
    GLvoid * a4;
} ARGS_void_GLenum_GLenum_GLsizei_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLsizei_const_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLenum_GLsizei_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLuint_GLint_GLdouble)(GLuint program, GLint location, GLdouble v0);
typedef struct {
    GLuint a1;
    GLint a2;
    GLdouble a3 __attribute__ ((aligned(8)));
} ARGS_void_GLuint_GLint_GLdouble;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint_GLdouble args;
} PACKED_void_GLuint_GLint_GLdouble;
typedef void (*FUNC_void_GLuint_GLint_GLsizei_const_GLdouble___GENPT__)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
typedef struct {
    GLuint a1;
    GLint a2;
    GLsizei a3;
    GLdouble * a4;
} ARGS_void_GLuint_GLint_GLsizei_const_GLdouble___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint_GLsizei_const_GLdouble___GENPT__ args;
} PACKED_void_GLuint_GLint_GLsizei_const_GLdouble___GENPT__;
typedef void (*FUNC_void_GLuint_GLint_GLfloat)(GLuint program, GLint location, GLfloat v0);
typedef struct {
    GLuint a1;
    GLint a2;
    GLfloat a3;
} ARGS_void_GLuint_GLint_GLfloat;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint_GLfloat args;
} PACKED_void_GLuint_GLint_GLfloat;
typedef void (*FUNC_void_GLuint_GLint_GLsizei_const_GLfloat___GENPT__)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef struct {
    GLuint a1;
    GLint a2;
    GLsizei a3;
    GLfloat * a4;
} ARGS_void_GLuint_GLint_GLsizei_const_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint_GLsizei_const_GLfloat___GENPT__ args;
} PACKED_void_GLuint_GLint_GLsizei_const_GLfloat___GENPT__;
typedef void (*FUNC_void_GLuint_GLint_GLint)(GLuint program, GLint location, GLint v0);
typedef struct {
    GLuint a1;
    GLint a2;
    GLint a3;
} ARGS_void_GLuint_GLint_GLint;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint_GLint args;
} PACKED_void_GLuint_GLint_GLint;
typedef void (*FUNC_void_GLuint_GLint_GLint64EXT)(GLuint program, GLint location, GLint64EXT x);
typedef struct {
    GLuint a1;
    GLint a2;
    GLint64EXT a3;
} ARGS_void_GLuint_GLint_GLint64EXT;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint_GLint64EXT args;
} PACKED_void_GLuint_GLint_GLint64EXT;
typedef void (*FUNC_void_GLuint_GLint_GLsizei_const_GLint64EXT___GENPT__)(GLuint program, GLint location, GLsizei count, const GLint64EXT * value);
typedef struct {
    GLuint a1;
    GLint a2;
    GLsizei a3;
    GLint64EXT * a4;
} ARGS_void_GLuint_GLint_GLsizei_const_GLint64EXT___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint_GLsizei_const_GLint64EXT___GENPT__ args;
} PACKED_void_GLuint_GLint_GLsizei_const_GLint64EXT___GENPT__;
typedef void (*FUNC_void_GLuint_GLint_GLsizei_const_GLint___GENPT__)(GLuint program, GLint location, GLsizei count, const GLint * value);
typedef struct {
    GLuint a1;
    GLint a2;
    GLsizei a3;
    GLint * a4;
} ARGS_void_GLuint_GLint_GLsizei_const_GLint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint_GLsizei_const_GLint___GENPT__ args;
} PACKED_void_GLuint_GLint_GLsizei_const_GLint___GENPT__;
typedef void (*FUNC_void_GLuint_GLint_GLuint)(GLuint program, GLint location, GLuint v0);
typedef struct {
    GLuint a1;
    GLint a2;
    GLuint a3;
} ARGS_void_GLuint_GLint_GLuint;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint_GLuint args;
} PACKED_void_GLuint_GLint_GLuint;
typedef void (*FUNC_void_GLuint_GLint_GLuint64EXT)(GLuint program, GLint location, GLuint64EXT x);
typedef struct {
    GLuint a1;
    GLint a2;
    GLuint64EXT a3;
} ARGS_void_GLuint_GLint_GLuint64EXT;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint_GLuint64EXT args;
} PACKED_void_GLuint_GLint_GLuint64EXT;
typedef void (*FUNC_void_GLuint_GLint_GLsizei_const_GLuint64EXT___GENPT__)(GLuint program, GLint location, GLsizei count, const GLuint64EXT * value);
typedef struct {
    GLuint a1;
    GLint a2;
    GLsizei a3;
    GLuint64EXT * a4;
} ARGS_void_GLuint_GLint_GLsizei_const_GLuint64EXT___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint_GLsizei_const_GLuint64EXT___GENPT__ args;
} PACKED_void_GLuint_GLint_GLsizei_const_GLuint64EXT___GENPT__;
typedef void (*FUNC_void_GLuint_GLint_GLsizei_const_GLuint___GENPT__)(GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef struct {
    GLuint a1;
    GLint a2;
    GLsizei a3;
    GLuint * a4;
} ARGS_void_GLuint_GLint_GLsizei_const_GLuint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint_GLsizei_const_GLuint___GENPT__ args;
} PACKED_void_GLuint_GLint_GLsizei_const_GLuint___GENPT__;
typedef void (*FUNC_void_GLuint_GLint_GLdouble_GLdouble)(GLuint program, GLint location, GLdouble v0, GLdouble v1);
typedef struct {
    GLuint a1;
    GLint a2;
    GLdouble a3 __attribute__ ((aligned(8)));
    GLdouble a4 __attribute__ ((aligned(8)));
} ARGS_void_GLuint_GLint_GLdouble_GLdouble;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint_GLdouble_GLdouble args;
} PACKED_void_GLuint_GLint_GLdouble_GLdouble;
typedef void (*FUNC_void_GLuint_GLint_GLfloat_GLfloat)(GLuint program, GLint location, GLfloat v0, GLfloat v1);
typedef struct {
    GLuint a1;
    GLint a2;
    GLfloat a3;
    GLfloat a4;
} ARGS_void_GLuint_GLint_GLfloat_GLfloat;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint_GLfloat_GLfloat args;
} PACKED_void_GLuint_GLint_GLfloat_GLfloat;
typedef void (*FUNC_void_GLuint_GLint_GLint_GLint)(GLuint program, GLint location, GLint v0, GLint v1);
typedef struct {
    GLuint a1;
    GLint a2;
    GLint a3;
    GLint a4;
} ARGS_void_GLuint_GLint_GLint_GLint;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint_GLint_GLint args;
} PACKED_void_GLuint_GLint_GLint_GLint;
typedef void (*FUNC_void_GLuint_GLint_GLint64EXT_GLint64EXT)(GLuint program, GLint location, GLint64EXT x, GLint64EXT y);
typedef struct {
    GLuint a1;
    GLint a2;
    GLint64EXT a3;
    GLint64EXT a4;
} ARGS_void_GLuint_GLint_GLint64EXT_GLint64EXT;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint_GLint64EXT_GLint64EXT args;
} PACKED_void_GLuint_GLint_GLint64EXT_GLint64EXT;
typedef void (*FUNC_void_GLuint_GLint_GLuint_GLuint)(GLuint program, GLint location, GLuint v0, GLuint v1);
typedef struct {
    GLuint a1;
    GLint a2;
    GLuint a3;
    GLuint a4;
} ARGS_void_GLuint_GLint_GLuint_GLuint;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint_GLuint_GLuint args;
} PACKED_void_GLuint_GLint_GLuint_GLuint;
typedef void (*FUNC_void_GLuint_GLint_GLuint64EXT_GLuint64EXT)(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y);
typedef struct {
    GLuint a1;
    GLint a2;
    GLuint64EXT a3;
    GLuint64EXT a4;
} ARGS_void_GLuint_GLint_GLuint64EXT_GLuint64EXT;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint_GLuint64EXT_GLuint64EXT args;
} PACKED_void_GLuint_GLint_GLuint64EXT_GLuint64EXT;
typedef void (*FUNC_void_GLuint_GLint_GLdouble_GLdouble_GLdouble)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
typedef struct {
    GLuint a1;
    GLint a2;
    GLdouble a3 __attribute__ ((aligned(8)));
    GLdouble a4 __attribute__ ((aligned(8)));
    GLdouble a5 __attribute__ ((aligned(8)));
} ARGS_void_GLuint_GLint_GLdouble_GLdouble_GLdouble;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint_GLdouble_GLdouble_GLdouble args;
} PACKED_void_GLuint_GLint_GLdouble_GLdouble_GLdouble;
typedef void (*FUNC_void_GLuint_GLint_GLfloat_GLfloat_GLfloat)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef struct {
    GLuint a1;
    GLint a2;
    GLfloat a3;
    GLfloat a4;
    GLfloat a5;
} ARGS_void_GLuint_GLint_GLfloat_GLfloat_GLfloat;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint_GLfloat_GLfloat_GLfloat args;
} PACKED_void_GLuint_GLint_GLfloat_GLfloat_GLfloat;
typedef void (*FUNC_void_GLuint_GLint_GLint_GLint_GLint)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
typedef struct {
    GLuint a1;
    GLint a2;
    GLint a3;
    GLint a4;
    GLint a5;
} ARGS_void_GLuint_GLint_GLint_GLint_GLint;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint_GLint_GLint_GLint args;
} PACKED_void_GLuint_GLint_GLint_GLint_GLint;
typedef void (*FUNC_void_GLuint_GLint_GLint64EXT_GLint64EXT_GLint64EXT)(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
typedef struct {
    GLuint a1;
    GLint a2;
    GLint64EXT a3;
    GLint64EXT a4;
    GLint64EXT a5;
} ARGS_void_GLuint_GLint_GLint64EXT_GLint64EXT_GLint64EXT;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint_GLint64EXT_GLint64EXT_GLint64EXT args;
} PACKED_void_GLuint_GLint_GLint64EXT_GLint64EXT_GLint64EXT;
typedef void (*FUNC_void_GLuint_GLint_GLuint_GLuint_GLuint)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef struct {
    GLuint a1;
    GLint a2;
    GLuint a3;
    GLuint a4;
    GLuint a5;
} ARGS_void_GLuint_GLint_GLuint_GLuint_GLuint;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint_GLuint_GLuint_GLuint args;
} PACKED_void_GLuint_GLint_GLuint_GLuint_GLuint;
typedef void (*FUNC_void_GLuint_GLint_GLuint64EXT_GLuint64EXT_GLuint64EXT)(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
typedef struct {
    GLuint a1;
    GLint a2;
    GLuint64EXT a3;
    GLuint64EXT a4;
    GLuint64EXT a5;
} ARGS_void_GLuint_GLint_GLuint64EXT_GLuint64EXT_GLuint64EXT;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint_GLuint64EXT_GLuint64EXT_GLuint64EXT args;
} PACKED_void_GLuint_GLint_GLuint64EXT_GLuint64EXT_GLuint64EXT;
typedef void (*FUNC_void_GLuint_GLint_GLdouble_GLdouble_GLdouble_GLdouble)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
typedef struct {
    GLuint a1;
    GLint a2;
    GLdouble a3 __attribute__ ((aligned(8)));
    GLdouble a4 __attribute__ ((aligned(8)));
    GLdouble a5 __attribute__ ((aligned(8)));
    GLdouble a6 __attribute__ ((aligned(8)));
} ARGS_void_GLuint_GLint_GLdouble_GLdouble_GLdouble_GLdouble;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint_GLdouble_GLdouble_GLdouble_GLdouble args;
} PACKED_void_GLuint_GLint_GLdouble_GLdouble_GLdouble_GLdouble;
typedef void (*FUNC_void_GLuint_GLint_GLfloat_GLfloat_GLfloat_GLfloat)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef struct {
    GLuint a1;
    GLint a2;
    GLfloat a3;
    GLfloat a4;
    GLfloat a5;
    GLfloat a6;
} ARGS_void_GLuint_GLint_GLfloat_GLfloat_GLfloat_GLfloat;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint_GLfloat_GLfloat_GLfloat_GLfloat args;
} PACKED_void_GLuint_GLint_GLfloat_GLfloat_GLfloat_GLfloat;
typedef void (*FUNC_void_GLuint_GLint_GLint_GLint_GLint_GLint)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef struct {
    GLuint a1;
    GLint a2;
    GLint a3;
    GLint a4;
    GLint a5;
    GLint a6;
} ARGS_void_GLuint_GLint_GLint_GLint_GLint_GLint;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint_GLint_GLint_GLint_GLint args;
} PACKED_void_GLuint_GLint_GLint_GLint_GLint_GLint;
typedef void (*FUNC_void_GLuint_GLint_GLint64EXT_GLint64EXT_GLint64EXT_GLint64EXT)(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
typedef struct {
    GLuint a1;
    GLint a2;
    GLint64EXT a3;
    GLint64EXT a4;
    GLint64EXT a5;
    GLint64EXT a6;
} ARGS_void_GLuint_GLint_GLint64EXT_GLint64EXT_GLint64EXT_GLint64EXT;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint_GLint64EXT_GLint64EXT_GLint64EXT_GLint64EXT args;
} PACKED_void_GLuint_GLint_GLint64EXT_GLint64EXT_GLint64EXT_GLint64EXT;
typedef void (*FUNC_void_GLuint_GLint_GLuint_GLuint_GLuint_GLuint)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef struct {
    GLuint a1;
    GLint a2;
    GLuint a3;
    GLuint a4;
    GLuint a5;
    GLuint a6;
} ARGS_void_GLuint_GLint_GLuint_GLuint_GLuint_GLuint;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint_GLuint_GLuint_GLuint_GLuint args;
} PACKED_void_GLuint_GLint_GLuint_GLuint_GLuint_GLuint;
typedef void (*FUNC_void_GLuint_GLint_GLuint64EXT_GLuint64EXT_GLuint64EXT_GLuint64EXT)(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
typedef struct {
    GLuint a1;
    GLint a2;
    GLuint64EXT a3;
    GLuint64EXT a4;
    GLuint64EXT a5;
    GLuint64EXT a6;
} ARGS_void_GLuint_GLint_GLuint64EXT_GLuint64EXT_GLuint64EXT_GLuint64EXT;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint_GLuint64EXT_GLuint64EXT_GLuint64EXT_GLuint64EXT args;
} PACKED_void_GLuint_GLint_GLuint64EXT_GLuint64EXT_GLuint64EXT_GLuint64EXT;
typedef void (*FUNC_void_GLuint_GLint_GLuint64)(GLuint program, GLint location, GLuint64 value);
typedef struct {
    GLuint a1;
    GLint a2;
    GLuint64 a3;
} ARGS_void_GLuint_GLint_GLuint64;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint_GLuint64 args;
} PACKED_void_GLuint_GLint_GLuint64;
typedef void (*FUNC_void_GLuint_GLint_GLsizei_const_GLuint64___GENPT__)(GLuint program, GLint location, GLsizei count, const GLuint64 * values);
typedef struct {
    GLuint a1;
    GLint a2;
    GLsizei a3;
    GLuint64 * a4;
} ARGS_void_GLuint_GLint_GLsizei_const_GLuint64___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint_GLsizei_const_GLuint64___GENPT__ args;
} PACKED_void_GLuint_GLint_GLsizei_const_GLuint64___GENPT__;
typedef void (*FUNC_void_GLuint_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef struct {
    GLuint a1;
    GLint a2;
    GLsizei a3;
    GLboolean a4;
    GLdouble * a5;
} ARGS_void_GLuint_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__ args;
} PACKED_void_GLuint_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__;
typedef void (*FUNC_void_GLuint_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef struct {
    GLuint a1;
    GLint a2;
    GLsizei a3;
    GLboolean a4;
    GLfloat * a5;
} ARGS_void_GLuint_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__ args;
} PACKED_void_GLuint_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__;
typedef GLbitfield (*FUNC_GLbitfield_GLfixed___GENPT___GLint___GENPT__)(GLfixed * mantissa, GLint * exponent);
typedef struct {
    GLfixed * a1;
    GLint * a2;
} ARGS_GLbitfield_GLfixed___GENPT___GLint___GENPT__;
typedef struct {
    int index;
    ARGS_GLbitfield_GLfixed___GENPT___GLint___GENPT__ args;
} PACKED_GLbitfield_GLfixed___GENPT___GLint___GENPT__;
typedef void (*FUNC_void_GLshort_GLshort)(GLshort x, GLshort y);
typedef struct {
    GLshort a1;
    GLshort a2;
} ARGS_void_GLshort_GLshort;
typedef struct {
    int index;
    ARGS_void_GLshort_GLshort args;
} PACKED_void_GLshort_GLshort;
typedef void (*FUNC_void_GLint_GLint_GLsizei_GLsizei_GLenum_GLenum_GLvoid___GENPT__)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid * pixels);
typedef struct {
    GLint a1;
    GLint a2;
    GLsizei a3;
    GLsizei a4;
    GLenum a5;
    GLenum a6;
    GLvoid * a7;
} ARGS_void_GLint_GLint_GLsizei_GLsizei_GLenum_GLenum_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLint_GLint_GLsizei_GLsizei_GLenum_GLenum_GLvoid___GENPT__ args;
} PACKED_void_GLint_GLint_GLsizei_GLsizei_GLenum_GLenum_GLvoid___GENPT__;
typedef void (*FUNC_void_GLint_GLint_GLsizei_GLsizei_GLenum_GLenum_GLsizei_GLvoid___GENPT__)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, GLvoid * data);
typedef struct {
    GLint a1;
    GLint a2;
    GLsizei a3;
    GLsizei a4;
    GLenum a5;
    GLenum a6;
    GLsizei a7;
    GLvoid * a8;
} ARGS_void_GLint_GLint_GLsizei_GLsizei_GLenum_GLenum_GLsizei_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLint_GLint_GLsizei_GLsizei_GLenum_GLenum_GLsizei_GLvoid___GENPT__ args;
} PACKED_void_GLint_GLint_GLsizei_GLsizei_GLenum_GLenum_GLsizei_GLvoid___GENPT__;
typedef void (*FUNC_void_const_GLdouble___GENPT___const_GLdouble___GENPT__)(const GLdouble * v1, const GLdouble * v2);
typedef struct {
    GLdouble * a1;
    GLdouble * a2;
} ARGS_void_const_GLdouble___GENPT___const_GLdouble___GENPT__;
typedef struct {
    int index;
    ARGS_void_const_GLdouble___GENPT___const_GLdouble___GENPT__ args;
} PACKED_void_const_GLdouble___GENPT___const_GLdouble___GENPT__;
typedef void (*FUNC_void_const_GLint___GENPT___const_GLint___GENPT__)(const GLint * v1, const GLint * v2);
typedef struct {
    GLint * a1;
    GLint * a2;
} ARGS_void_const_GLint___GENPT___const_GLint___GENPT__;
typedef struct {
    int index;
    ARGS_void_const_GLint___GENPT___const_GLint___GENPT__ args;
} PACKED_void_const_GLint___GENPT___const_GLint___GENPT__;
typedef void (*FUNC_void_const_GLshort___GENPT___const_GLshort___GENPT__)(const GLshort * v1, const GLshort * v2);
typedef struct {
    GLshort * a1;
    GLshort * a2;
} ARGS_void_const_GLshort___GENPT___const_GLshort___GENPT__;
typedef struct {
    int index;
    ARGS_void_const_GLshort___GENPT___const_GLshort___GENPT__ args;
} PACKED_void_const_GLshort___GENPT___const_GLshort___GENPT__;
typedef void (*FUNC_void_const_GLfixed___GENPT___const_GLfixed___GENPT__)(const GLfixed * v1, const GLfixed * v2);
typedef struct {
    GLfixed * a1;
    GLfixed * a2;
} ARGS_void_const_GLfixed___GENPT___const_GLfixed___GENPT__;
typedef struct {
    int index;
    ARGS_void_const_GLfixed___GENPT___const_GLfixed___GENPT__ args;
} PACKED_void_const_GLfixed___GENPT___const_GLfixed___GENPT__;
typedef GLint (*FUNC_GLint_GLenum)(GLenum mode);
typedef struct {
    GLenum a1;
} ARGS_GLint_GLenum;
typedef struct {
    int index;
    ARGS_GLint_GLenum args;
} PACKED_GLint_GLenum;
typedef void (*FUNC_void_GLenum_GLenum_GLsizei_GLsizei)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLsizei a3;
    GLsizei a4;
} ARGS_void_GLenum_GLenum_GLsizei_GLsizei;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLsizei_GLsizei args;
} PACKED_void_GLenum_GLenum_GLsizei_GLsizei;
typedef void (*FUNC_void_GLenum_GLsizei_GLenum_GLsizei_GLsizei)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef struct {
    GLenum a1;
    GLsizei a2;
    GLenum a3;
    GLsizei a4;
    GLsizei a5;
} ARGS_void_GLenum_GLsizei_GLenum_GLsizei_GLsizei;
typedef struct {
    int index;
    ARGS_void_GLenum_GLsizei_GLenum_GLsizei_GLsizei args;
} PACKED_void_GLenum_GLsizei_GLenum_GLsizei_GLsizei;
typedef void (*FUNC_void_GLenum_GLsizei_GLsizei_GLenum_GLsizei_GLsizei)(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
typedef struct {
    GLenum a1;
    GLsizei a2;
    GLsizei a3;
    GLenum a4;
    GLsizei a5;
    GLsizei a6;
} ARGS_void_GLenum_GLsizei_GLsizei_GLenum_GLsizei_GLsizei;
typedef struct {
    int index;
    ARGS_void_GLenum_GLsizei_GLsizei_GLenum_GLsizei_GLsizei args;
} PACKED_void_GLenum_GLsizei_GLsizei_GLenum_GLsizei_GLsizei;
typedef void (*FUNC_void_GLuint_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat)(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
typedef struct {
    GLuint a1;
    GLfloat a2;
    GLfloat a3;
    GLfloat a4;
    GLfloat a5;
    GLfloat a6;
    GLfloat a7;
} ARGS_void_GLuint_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat;
typedef struct {
    int index;
    ARGS_void_GLuint_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat args;
} PACKED_void_GLuint_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat;
typedef void (*FUNC_void_const_GLuint___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT__)(const GLuint * rc, const GLfloat * c, const GLfloat * v);
typedef struct {
    GLuint * a1;
    GLfloat * a2;
    GLfloat * a3;
} ARGS_void_const_GLuint___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_const_GLuint___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT__ args;
} PACKED_void_const_GLuint___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT__;
typedef void (*FUNC_void_GLuint_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat)(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef struct {
    GLuint a1;
    GLfloat a2;
    GLfloat a3;
    GLfloat a4;
    GLfloat a5;
    GLfloat a6;
    GLfloat a7;
    GLfloat a8;
    GLfloat a9;
    GLfloat a10;
    GLfloat a11;
} ARGS_void_GLuint_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat;
typedef struct {
    int index;
    ARGS_void_GLuint_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat args;
} PACKED_void_GLuint_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat;
typedef void (*FUNC_void_const_GLuint___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT__)(const GLuint * rc, const GLfloat * c, const GLfloat * n, const GLfloat * v);
typedef struct {
    GLuint * a1;
    GLfloat * a2;
    GLfloat * a3;
    GLfloat * a4;
} ARGS_void_const_GLuint___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_const_GLuint___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT__ args;
} PACKED_void_const_GLuint___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT__;
typedef void (*FUNC_void_GLuint_GLubyte_GLubyte_GLubyte_GLubyte_GLfloat_GLfloat_GLfloat)(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
typedef struct {
    GLuint a1;
    GLubyte a2;
    GLubyte a3;
    GLubyte a4;
    GLubyte a5;
    GLfloat a6;
    GLfloat a7;
    GLfloat a8;
} ARGS_void_GLuint_GLubyte_GLubyte_GLubyte_GLubyte_GLfloat_GLfloat_GLfloat;
typedef struct {
    int index;
    ARGS_void_GLuint_GLubyte_GLubyte_GLubyte_GLubyte_GLfloat_GLfloat_GLfloat args;
} PACKED_void_GLuint_GLubyte_GLubyte_GLubyte_GLubyte_GLfloat_GLfloat_GLfloat;
typedef void (*FUNC_void_const_GLuint___GENPT___const_GLubyte___GENPT___const_GLfloat___GENPT__)(const GLuint * rc, const GLubyte * c, const GLfloat * v);
typedef struct {
    GLuint * a1;
    GLubyte * a2;
    GLfloat * a3;
} ARGS_void_const_GLuint___GENPT___const_GLubyte___GENPT___const_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_const_GLuint___GENPT___const_GLubyte___GENPT___const_GLfloat___GENPT__ args;
} PACKED_void_const_GLuint___GENPT___const_GLubyte___GENPT___const_GLfloat___GENPT__;
typedef void (*FUNC_void_GLuint_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat)(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef struct {
    GLuint a1;
    GLfloat a2;
    GLfloat a3;
    GLfloat a4;
    GLfloat a5;
    GLfloat a6;
    GLfloat a7;
    GLfloat a8;
    GLfloat a9;
    GLfloat a10;
    GLfloat a11;
    GLfloat a12;
    GLfloat a13;
} ARGS_void_GLuint_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat;
typedef struct {
    int index;
    ARGS_void_GLuint_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat args;
} PACKED_void_GLuint_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat;
typedef void (*FUNC_void_const_GLuint___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT__)(const GLuint * rc, const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v);
typedef struct {
    GLuint * a1;
    GLfloat * a2;
    GLfloat * a3;
    GLfloat * a4;
    GLfloat * a5;
} ARGS_void_const_GLuint___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_const_GLuint___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT__ args;
} PACKED_void_const_GLuint___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT__;
typedef void (*FUNC_void_GLuint_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat)(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef struct {
    GLuint a1;
    GLfloat a2;
    GLfloat a3;
    GLfloat a4;
    GLfloat a5;
    GLfloat a6;
    GLfloat a7;
    GLfloat a8;
    GLfloat a9;
} ARGS_void_GLuint_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat;
typedef struct {
    int index;
    ARGS_void_GLuint_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat args;
} PACKED_void_GLuint_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat;
typedef void (*FUNC_void_GLuint_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat)(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
typedef struct {
    GLuint a1;
    GLfloat a2;
    GLfloat a3;
    GLfloat a4;
    GLfloat a5;
    GLfloat a6;
} ARGS_void_GLuint_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat;
typedef struct {
    int index;
    ARGS_void_GLuint_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat args;
} PACKED_void_GLuint_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat;
typedef void (*FUNC_void_GLuint_GLfloat_GLfloat_GLfloat)(GLuint rc, GLfloat x, GLfloat y, GLfloat z);
typedef struct {
    GLuint a1;
    GLfloat a2;
    GLfloat a3;
    GLfloat a4;
} ARGS_void_GLuint_GLfloat_GLfloat_GLfloat;
typedef struct {
    int index;
    ARGS_void_GLuint_GLfloat_GLfloat_GLfloat args;
} PACKED_void_GLuint_GLfloat_GLfloat_GLfloat;
typedef void (*FUNC_void_const_GLuint___GENPT___const_GLfloat___GENPT__)(const GLuint * rc, const GLfloat * v);
typedef struct {
    GLuint * a1;
    GLfloat * a2;
} ARGS_void_const_GLuint___GENPT___const_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_const_GLuint___GENPT___const_GLfloat___GENPT__ args;
} PACKED_void_const_GLuint___GENPT___const_GLfloat___GENPT__;
typedef void (*FUNC_void_GLfloat_GLboolean)(GLfloat value, GLboolean invert);
typedef struct {
    GLfloat a1;
    GLboolean a2;
} ARGS_void_GLfloat_GLboolean;
typedef struct {
    int index;
    ARGS_void_GLfloat_GLboolean args;
} PACKED_void_GLfloat_GLboolean;
typedef void (*FUNC_void_GLfixed_GLboolean)(GLfixed value, GLboolean invert);
typedef struct {
    GLfixed a1;
    GLboolean a2;
} ARGS_void_GLfixed_GLboolean;
typedef struct {
    int index;
    ARGS_void_GLfixed_GLboolean args;
} PACKED_void_GLfixed_GLboolean;
typedef void (*FUNC_void_GLclampf_GLboolean)(GLclampf value, GLboolean invert);
typedef struct {
    GLclampf a1;
    GLboolean a2;
} ARGS_void_GLclampf_GLboolean;
typedef struct {
    int index;
    ARGS_void_GLclampf_GLboolean args;
} PACKED_void_GLclampf_GLboolean;
typedef void (*FUNC_void_GLuint_GLbitfield)(GLuint index, GLbitfield mask);
typedef struct {
    GLuint a1;
    GLbitfield a2;
} ARGS_void_GLuint_GLbitfield;
typedef struct {
    int index;
    ARGS_void_GLuint_GLbitfield args;
} PACKED_void_GLuint_GLbitfield;
typedef void (*FUNC_void_GLuint_GLenum_const_GLuint___GENPT__)(GLuint sampler, GLenum pname, const GLuint * param);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLuint * a3;
} ARGS_void_GLuint_GLenum_const_GLuint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_const_GLuint___GENPT__ args;
} PACKED_void_GLuint_GLenum_const_GLuint___GENPT__;
typedef void (*FUNC_void_GLint_GLint_GLsizei_GLsizei)(GLint x, GLint y, GLsizei width, GLsizei height);
typedef struct {
    GLint a1;
    GLint a2;
    GLsizei a3;
    GLsizei a4;
} ARGS_void_GLint_GLint_GLsizei_GLsizei;
typedef struct {
    int index;
    ARGS_void_GLint_GLint_GLsizei_GLsizei args;
} PACKED_void_GLint_GLint_GLsizei_GLsizei;
typedef void (*FUNC_void_GLuint_GLsizei_const_GLint___GENPT__)(GLuint first, GLsizei count, const GLint * v);
typedef struct {
    GLuint a1;
    GLsizei a2;
    GLint * a3;
} ARGS_void_GLuint_GLsizei_const_GLint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLsizei_const_GLint___GENPT__ args;
} PACKED_void_GLuint_GLsizei_const_GLint___GENPT__;
typedef void (*FUNC_void_GLuint_GLint_GLint_GLsizei_GLsizei)(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
typedef struct {
    GLuint a1;
    GLint a2;
    GLint a3;
    GLsizei a4;
    GLsizei a5;
} ARGS_void_GLuint_GLint_GLint_GLsizei_GLsizei;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint_GLint_GLsizei_GLsizei args;
} PACKED_void_GLuint_GLint_GLint_GLsizei_GLsizei;
typedef void (*FUNC_void_GLuint_const_GLint___GENPT__)(GLuint index, const GLint * v);
typedef struct {
    GLuint a1;
    GLint * a2;
} ARGS_void_GLuint_const_GLint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_const_GLint___GENPT__ args;
} PACKED_void_GLuint_const_GLint___GENPT__;
typedef void (*FUNC_void_GLuint_GLboolean_GLuint_GLint_GLuint___GENPT__)(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint * counterList);
typedef struct {
    GLuint a1;
    GLboolean a2;
    GLuint a3;
    GLint a4;
    GLuint * a5;
} ARGS_void_GLuint_GLboolean_GLuint_GLint_GLuint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLboolean_GLuint_GLint_GLuint___GENPT__ args;
} PACKED_void_GLuint_GLboolean_GLuint_GLint_GLuint___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT___const_GLvoid___GENPT__)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * row, const GLvoid * column);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLsizei a3;
    GLsizei a4;
    GLenum a5;
    GLenum a6;
    GLvoid * a7;
    GLvoid * a8;
} ARGS_void_GLenum_GLenum_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT___const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT___const_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLenum_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT___const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLuint_const_GLfloat___GENPT__)(GLuint dst, const GLfloat * value);
typedef struct {
    GLuint a1;
    GLfloat * a2;
} ARGS_void_GLuint_const_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_const_GLfloat___GENPT__ args;
} PACKED_void_GLuint_const_GLfloat___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_const_GLvoid___GENPT__)(GLuint id, GLenum type, const GLvoid * addr);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLvoid * a3;
} ARGS_void_GLuint_GLenum_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_const_GLvoid___GENPT__ args;
} PACKED_void_GLuint_GLenum_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLsizei_const_GLuint___GENPT___GLenum_const_GLvoid___GENPT___GLsizei)(GLsizei count, const GLuint * shaders, GLenum binaryformat, const GLvoid * binary, GLsizei length);
typedef struct {
    GLsizei a1;
    GLuint * a2;
    GLenum a3;
    GLvoid * a4;
    GLsizei a5;
} ARGS_void_GLsizei_const_GLuint___GENPT___GLenum_const_GLvoid___GENPT___GLsizei;
typedef struct {
    int index;
    ARGS_void_GLsizei_const_GLuint___GENPT___GLenum_const_GLvoid___GENPT___GLsizei args;
} PACKED_void_GLsizei_const_GLuint___GENPT___GLenum_const_GLvoid___GENPT___GLsizei;
typedef void (*FUNC_void_GLenum_GLuint_GLuint_GLuint)(GLenum op, GLuint res, GLuint arg1, GLuint arg2);
typedef struct {
    GLenum a1;
    GLuint a2;
    GLuint a3;
    GLuint a4;
} ARGS_void_GLenum_GLuint_GLuint_GLuint;
typedef struct {
    int index;
    ARGS_void_GLenum_GLuint_GLuint_GLuint args;
} PACKED_void_GLenum_GLuint_GLuint_GLuint;
typedef void (*FUNC_void_GLenum_GLuint_GLuint_GLuint_GLuint)(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3);
typedef struct {
    GLenum a1;
    GLuint a2;
    GLuint a3;
    GLuint a4;
    GLuint a5;
} ARGS_void_GLenum_GLuint_GLuint_GLuint_GLuint;
typedef struct {
    int index;
    ARGS_void_GLenum_GLuint_GLuint_GLuint_GLuint args;
} PACKED_void_GLenum_GLuint_GLuint_GLuint_GLuint;
typedef void (*FUNC_void_GLuint_GLsizei_GLchar__GENPT__const___GENPT___const_GLint___GENPT__)(GLuint shader, GLsizei count, GLchar*const * string, const GLint * length);
typedef struct {
    GLuint a1;
    GLsizei a2;
    GLchar*const * a3;
    GLint * a4;
} ARGS_void_GLuint_GLsizei_GLchar__GENPT__const___GENPT___const_GLint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLsizei_GLchar__GENPT__const___GENPT___const_GLint___GENPT__ args;
} PACKED_void_GLuint_GLsizei_GLchar__GENPT__const___GENPT___const_GLint___GENPT__;
typedef void (*FUNC_void_GLhandleARB_GLsizei_const_GLcharARB___GENPT___const_GLint___GENPT__)(GLhandleARB shaderObj, GLsizei count, const GLcharARB * string, const GLint * length);
typedef struct {
    GLhandleARB a1;
    GLsizei a2;
    GLcharARB * a3;
    GLint * a4;
} ARGS_void_GLhandleARB_GLsizei_const_GLcharARB___GENPT___const_GLint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLhandleARB_GLsizei_const_GLcharARB___GENPT___const_GLint___GENPT__ args;
} PACKED_void_GLhandleARB_GLsizei_const_GLcharARB___GENPT___const_GLint___GENPT__;
typedef void (*FUNC_void_GLsizei_GLuint)(GLsizei stencilTagBits, GLuint stencilClearTag);
typedef struct {
    GLsizei a1;
    GLuint a2;
} ARGS_void_GLsizei_GLuint;
typedef struct {
    int index;
    ARGS_void_GLsizei_GLuint args;
} PACKED_void_GLsizei_GLuint;
typedef void (*FUNC_void_GLsizei_GLenum_const_GLvoid___GENPT___GLuint_GLenum_GLuint_GLenum_const_GLfloat___GENPT__)(GLsizei numPaths, GLenum pathNameType, const GLvoid * paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat * transformValues);
typedef struct {
    GLsizei a1;
    GLenum a2;
    GLvoid * a3;
    GLuint a4;
    GLenum a5;
    GLuint a6;
    GLenum a7;
    GLfloat * a8;
} ARGS_void_GLsizei_GLenum_const_GLvoid___GENPT___GLuint_GLenum_GLuint_GLenum_const_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLsizei_GLenum_const_GLvoid___GENPT___GLuint_GLenum_GLuint_GLenum_const_GLfloat___GENPT__ args;
} PACKED_void_GLsizei_GLenum_const_GLvoid___GENPT___GLuint_GLenum_GLuint_GLenum_const_GLfloat___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_GLuint)(GLuint path, GLenum fillMode, GLuint mask);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLuint a3;
} ARGS_void_GLuint_GLenum_GLuint;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLuint args;
} PACKED_void_GLuint_GLenum_GLuint;
typedef void (*FUNC_void_GLenum_GLenum_GLint_GLuint)(GLenum face, GLenum func, GLint ref, GLuint mask);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLint a3;
    GLuint a4;
} ARGS_void_GLenum_GLenum_GLint_GLuint;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLint_GLuint args;
} PACKED_void_GLenum_GLenum_GLint_GLuint;
typedef void (*FUNC_void_GLenum_GLenum_GLenum)(GLenum fail, GLenum zfail, GLenum zpass);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLenum a3;
} ARGS_void_GLenum_GLenum_GLenum;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLenum args;
} PACKED_void_GLenum_GLenum_GLenum;
typedef void (*FUNC_void_GLsizei_GLenum_const_GLvoid___GENPT___GLuint_GLint_GLuint_GLenum_const_GLfloat___GENPT__)(GLsizei numPaths, GLenum pathNameType, const GLvoid * paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat * transformValues);
typedef struct {
    GLsizei a1;
    GLenum a2;
    GLvoid * a3;
    GLuint a4;
    GLint a5;
    GLuint a6;
    GLenum a7;
    GLfloat * a8;
} ARGS_void_GLsizei_GLenum_const_GLvoid___GENPT___GLuint_GLint_GLuint_GLenum_const_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLsizei_GLenum_const_GLvoid___GENPT___GLuint_GLint_GLuint_GLenum_const_GLfloat___GENPT__ args;
} PACKED_void_GLsizei_GLenum_const_GLvoid___GENPT___GLuint_GLint_GLuint_GLenum_const_GLfloat___GENPT__;
typedef void (*FUNC_void_GLuint_GLuint_GLenum_GLenum_GLenum_GLenum)(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
typedef struct {
    GLuint a1;
    GLuint a2;
    GLenum a3;
    GLenum a4;
    GLenum a5;
    GLenum a6;
} ARGS_void_GLuint_GLuint_GLenum_GLenum_GLenum_GLenum;
typedef struct {
    int index;
    ARGS_void_GLuint_GLuint_GLenum_GLenum_GLenum_GLenum args;
} PACKED_void_GLuint_GLuint_GLenum_GLenum_GLenum_GLenum;
typedef void (*FUNC_void_GLenum_GLenum_GLuint_GLintptr_GLsizeiptr)(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLuint a3;
    GLintptr a4;
    GLsizeiptr a5;
} ARGS_void_GLenum_GLenum_GLuint_GLintptr_GLsizeiptr;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLuint_GLintptr_GLsizeiptr args;
} PACKED_void_GLenum_GLenum_GLuint_GLintptr_GLsizeiptr;
typedef void (*FUNC_void_GLbyte_GLbyte)(GLbyte s, GLbyte t);
typedef struct {
    GLbyte a1;
    GLbyte a2;
} ARGS_void_GLbyte_GLbyte;
typedef struct {
    int index;
    ARGS_void_GLbyte_GLbyte args;
} PACKED_void_GLbyte_GLbyte;
typedef void (*FUNC_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat)(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
typedef struct {
    GLfloat a1;
    GLfloat a2;
    GLfloat a3;
    GLfloat a4;
    GLfloat a5;
    GLfloat a6;
    GLfloat a7;
    GLfloat a8;
} ARGS_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat;
typedef struct {
    int index;
    ARGS_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat args;
} PACKED_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat;
typedef void (*FUNC_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat)(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
typedef struct {
    GLfloat a1;
    GLfloat a2;
    GLfloat a3;
    GLfloat a4;
    GLfloat a5;
    GLfloat a6;
    GLfloat a7;
    GLfloat a8;
    GLfloat a9;
    GLfloat a10;
    GLfloat a11;
    GLfloat a12;
} ARGS_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat;
typedef struct {
    int index;
    ARGS_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat args;
} PACKED_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat;
typedef void (*FUNC_void_const_GLfloat___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT__)(const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v);
typedef struct {
    GLfloat * a1;
    GLfloat * a2;
    GLfloat * a3;
    GLfloat * a4;
} ARGS_void_const_GLfloat___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_const_GLfloat___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT__ args;
} PACKED_void_const_GLfloat___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT__;
typedef void (*FUNC_void_GLfloat_GLfloat_GLubyte_GLubyte_GLubyte_GLubyte_GLfloat_GLfloat_GLfloat)(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
typedef struct {
    GLfloat a1;
    GLfloat a2;
    GLubyte a3;
    GLubyte a4;
    GLubyte a5;
    GLubyte a6;
    GLfloat a7;
    GLfloat a8;
    GLfloat a9;
} ARGS_void_GLfloat_GLfloat_GLubyte_GLubyte_GLubyte_GLubyte_GLfloat_GLfloat_GLfloat;
typedef struct {
    int index;
    ARGS_void_GLfloat_GLfloat_GLubyte_GLubyte_GLubyte_GLubyte_GLfloat_GLfloat_GLfloat args;
} PACKED_void_GLfloat_GLfloat_GLubyte_GLubyte_GLubyte_GLubyte_GLfloat_GLfloat_GLfloat;
typedef void (*FUNC_void_const_GLfloat___GENPT___const_GLubyte___GENPT___const_GLfloat___GENPT__)(const GLfloat * tc, const GLubyte * c, const GLfloat * v);
typedef struct {
    GLfloat * a1;
    GLubyte * a2;
    GLfloat * a3;
} ARGS_void_const_GLfloat___GENPT___const_GLubyte___GENPT___const_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_const_GLfloat___GENPT___const_GLubyte___GENPT___const_GLfloat___GENPT__ args;
} PACKED_void_const_GLfloat___GENPT___const_GLubyte___GENPT___const_GLfloat___GENPT__;
typedef void (*FUNC_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat)(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
typedef struct {
    GLfloat a1;
    GLfloat a2;
    GLfloat a3;
    GLfloat a4;
    GLfloat a5;
} ARGS_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat;
typedef struct {
    int index;
    ARGS_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat args;
} PACKED_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat;
typedef void (*FUNC_void_GLhalfNV_GLhalfNV)(GLhalfNV s, GLhalfNV t);
typedef struct {
    GLhalfNV a1;
    GLhalfNV a2;
} ARGS_void_GLhalfNV_GLhalfNV;
typedef struct {
    int index;
    ARGS_void_GLhalfNV_GLhalfNV args;
} PACKED_void_GLhalfNV_GLhalfNV;
typedef void (*FUNC_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat)(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef struct {
    GLfloat a1;
    GLfloat a2;
    GLfloat a3;
    GLfloat a4;
    GLfloat a5;
    GLfloat a6;
    GLfloat a7;
    GLfloat a8;
    GLfloat a9;
    GLfloat a10;
    GLfloat a11;
    GLfloat a12;
    GLfloat a13;
    GLfloat a14;
    GLfloat a15;
} ARGS_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat;
typedef struct {
    int index;
    ARGS_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat args;
} PACKED_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat;
typedef void (*FUNC_void_GLenum_GLenum_GLsizei_const_GLfloat___GENPT__)(GLenum target, GLenum filter, GLsizei n, const GLfloat * weights);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLsizei a3;
    GLfloat * a4;
} ARGS_void_GLenum_GLenum_GLsizei_const_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLsizei_const_GLfloat___GENPT__ args;
} PACKED_void_GLenum_GLenum_GLsizei_const_GLfloat___GENPT__;
typedef void (*FUNC_void_GLenum_GLenum_GLdouble)(GLenum coord, GLenum pname, GLdouble param);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLdouble a3 __attribute__ ((aligned(8)));
} ARGS_void_GLenum_GLenum_GLdouble;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLdouble args;
} PACKED_void_GLenum_GLenum_GLdouble;
typedef void (*FUNC_void_GLenum_GLenum_const_GLdouble___GENPT__)(GLenum coord, GLenum pname, const GLdouble * params);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLdouble * a3;
} ARGS_void_GLenum_GLenum_const_GLdouble___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_const_GLdouble___GENPT__ args;
} PACKED_void_GLenum_GLenum_const_GLdouble___GENPT__;
typedef void (*FUNC_void_GLenum_GLint_GLint_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid * pixels);
typedef struct {
    GLenum a1;
    GLint a2;
    GLint a3;
    GLsizei a4;
    GLint a5;
    GLenum a6;
    GLenum a7;
    GLvoid * a8;
} ARGS_void_GLenum_GLint_GLint_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLint_GLint_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLint_GLint_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLenum_GLint_GLint_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid * pixels);
typedef struct {
    GLenum a1;
    GLint a2;
    GLint a3;
    GLsizei a4;
    GLsizei a5;
    GLint a6;
    GLenum a7;
    GLenum a8;
    GLvoid * a9;
} ARGS_void_GLenum_GLint_GLint_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLint_GLint_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLint_GLint_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLenum_GLsizei_GLint_GLsizei_GLsizei_GLboolean)(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef struct {
    GLenum a1;
    GLsizei a2;
    GLint a3;
    GLsizei a4;
    GLsizei a5;
    GLboolean a6;
} ARGS_void_GLenum_GLsizei_GLint_GLsizei_GLsizei_GLboolean;
typedef struct {
    int index;
    ARGS_void_GLenum_GLsizei_GLint_GLsizei_GLsizei_GLboolean args;
} PACKED_void_GLenum_GLsizei_GLint_GLsizei_GLsizei_GLboolean;
typedef void (*FUNC_void_GLenum_GLsizei_GLsizei_GLint_GLsizei_GLsizei_GLboolean)(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
typedef struct {
    GLenum a1;
    GLsizei a2;
    GLsizei a3;
    GLint a4;
    GLsizei a5;
    GLsizei a6;
    GLboolean a7;
} ARGS_void_GLenum_GLsizei_GLsizei_GLint_GLsizei_GLsizei_GLboolean;
typedef struct {
    int index;
    ARGS_void_GLenum_GLsizei_GLsizei_GLint_GLsizei_GLsizei_GLboolean args;
} PACKED_void_GLenum_GLsizei_GLsizei_GLint_GLsizei_GLsizei_GLboolean;
typedef void (*FUNC_void_GLenum_GLint_GLint_GLsizei_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid * pixels);
typedef struct {
    GLenum a1;
    GLint a2;
    GLint a3;
    GLsizei a4;
    GLsizei a5;
    GLsizei a6;
    GLint a7;
    GLenum a8;
    GLenum a9;
    GLvoid * a10;
} ARGS_void_GLenum_GLint_GLint_GLsizei_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLint_GLint_GLsizei_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLint_GLint_GLsizei_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLenum_GLint_GLenum_GLsizei_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid * pixels);
typedef struct {
    GLenum a1;
    GLint a2;
    GLenum a3;
    GLsizei a4;
    GLsizei a5;
    GLsizei a6;
    GLint a7;
    GLenum a8;
    GLenum a9;
    GLvoid * a10;
} ARGS_void_GLenum_GLint_GLenum_GLsizei_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLint_GLenum_GLsizei_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLint_GLenum_GLsizei_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLenum_GLsizei_GLint_GLsizei_GLsizei_GLsizei_GLboolean)(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef struct {
    GLenum a1;
    GLsizei a2;
    GLint a3;
    GLsizei a4;
    GLsizei a5;
    GLsizei a6;
    GLboolean a7;
} ARGS_void_GLenum_GLsizei_GLint_GLsizei_GLsizei_GLsizei_GLboolean;
typedef struct {
    int index;
    ARGS_void_GLenum_GLsizei_GLint_GLsizei_GLsizei_GLsizei_GLboolean args;
} PACKED_void_GLenum_GLsizei_GLint_GLsizei_GLsizei_GLsizei_GLboolean;
typedef void (*FUNC_void_GLenum_GLsizei_GLsizei_GLint_GLsizei_GLsizei_GLsizei_GLboolean)(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
typedef struct {
    GLenum a1;
    GLsizei a2;
    GLsizei a3;
    GLint a4;
    GLsizei a5;
    GLsizei a6;
    GLsizei a7;
    GLboolean a8;
} ARGS_void_GLenum_GLsizei_GLsizei_GLint_GLsizei_GLsizei_GLsizei_GLboolean;
typedef struct {
    int index;
    ARGS_void_GLenum_GLsizei_GLsizei_GLint_GLsizei_GLsizei_GLsizei_GLboolean args;
} PACKED_void_GLenum_GLsizei_GLsizei_GLint_GLsizei_GLsizei_GLsizei_GLboolean;
typedef void (*FUNC_void_GLenum_GLint_GLenum_GLsizei_GLsizei_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const GLvoid * pixels);
typedef struct {
    GLenum a1;
    GLint a2;
    GLenum a3;
    GLsizei a4;
    GLsizei a5;
    GLsizei a6;
    GLsizei a7;
    GLint a8;
    GLenum a9;
    GLenum a10;
    GLvoid * a11;
} ARGS_void_GLenum_GLint_GLenum_GLsizei_GLsizei_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLint_GLenum_GLsizei_GLsizei_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLint_GLenum_GLsizei_GLsizei_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLenum_GLsizei_GLenum_GLsizei)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
typedef struct {
    GLenum a1;
    GLsizei a2;
    GLenum a3;
    GLsizei a4;
} ARGS_void_GLenum_GLsizei_GLenum_GLsizei;
typedef struct {
    int index;
    ARGS_void_GLenum_GLsizei_GLenum_GLsizei args;
} PACKED_void_GLenum_GLsizei_GLenum_GLsizei;
typedef void (*FUNC_void_GLenum_GLsizei_GLenum_GLsizei_GLsizei_GLboolean)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef struct {
    GLenum a1;
    GLsizei a2;
    GLenum a3;
    GLsizei a4;
    GLsizei a5;
    GLboolean a6;
} ARGS_void_GLenum_GLsizei_GLenum_GLsizei_GLsizei_GLboolean;
typedef struct {
    int index;
    ARGS_void_GLenum_GLsizei_GLenum_GLsizei_GLsizei_GLboolean args;
} PACKED_void_GLenum_GLsizei_GLenum_GLsizei_GLsizei_GLboolean;
typedef void (*FUNC_void_GLenum_GLsizei_GLenum_GLsizei_GLsizei_GLsizei)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
typedef struct {
    GLenum a1;
    GLsizei a2;
    GLenum a3;
    GLsizei a4;
    GLsizei a5;
    GLsizei a6;
} ARGS_void_GLenum_GLsizei_GLenum_GLsizei_GLsizei_GLsizei;
typedef struct {
    int index;
    ARGS_void_GLenum_GLsizei_GLenum_GLsizei_GLsizei_GLsizei args;
} PACKED_void_GLenum_GLsizei_GLenum_GLsizei_GLsizei_GLsizei;
typedef void (*FUNC_void_GLenum_GLsizei_GLenum_GLsizei_GLsizei_GLsizei_GLboolean)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef struct {
    GLenum a1;
    GLsizei a2;
    GLenum a3;
    GLsizei a4;
    GLsizei a5;
    GLsizei a6;
    GLboolean a7;
} ARGS_void_GLenum_GLsizei_GLenum_GLsizei_GLsizei_GLsizei_GLboolean;
typedef struct {
    int index;
    ARGS_void_GLenum_GLsizei_GLenum_GLsizei_GLsizei_GLsizei_GLboolean args;
} PACKED_void_GLenum_GLsizei_GLenum_GLsizei_GLsizei_GLsizei_GLboolean;
typedef void (*FUNC_void_GLenum_GLenum_GLsizei_GLsizei_GLsizei_GLsizei_GLbitfield)(GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags);
typedef struct {
    GLenum a1;
    GLenum a2;
    GLsizei a3;
    GLsizei a4;
    GLsizei a5;
    GLsizei a6;
    GLbitfield a7;
} ARGS_void_GLenum_GLenum_GLsizei_GLsizei_GLsizei_GLsizei_GLbitfield;
typedef struct {
    int index;
    ARGS_void_GLenum_GLenum_GLsizei_GLsizei_GLsizei_GLsizei_GLbitfield args;
} PACKED_void_GLenum_GLenum_GLsizei_GLsizei_GLsizei_GLsizei_GLbitfield;
typedef void (*FUNC_void_GLenum_GLint_GLint_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid * pixels);
typedef struct {
    GLenum a1;
    GLint a2;
    GLint a3;
    GLsizei a4;
    GLenum a5;
    GLenum a6;
    GLvoid * a7;
} ARGS_void_GLenum_GLint_GLint_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLint_GLint_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLint_GLint_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLenum_GLint_GLint_GLint_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * pixels);
typedef struct {
    GLenum a1;
    GLint a2;
    GLint a3;
    GLint a4;
    GLsizei a5;
    GLsizei a6;
    GLenum a7;
    GLenum a8;
    GLvoid * a9;
} ARGS_void_GLenum_GLint_GLint_GLint_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLint_GLint_GLint_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLint_GLint_GLint_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid * pixels);
typedef struct {
    GLenum a1;
    GLint a2;
    GLint a3;
    GLint a4;
    GLint a5;
    GLsizei a6;
    GLsizei a7;
    GLsizei a8;
    GLenum a9;
    GLenum a10;
    GLvoid * a11;
} ARGS_void_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLenum_GLint_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const GLvoid * pixels);
typedef struct {
    GLenum a1;
    GLint a2;
    GLint a3;
    GLint a4;
    GLint a5;
    GLint a6;
    GLsizei a7;
    GLsizei a8;
    GLsizei a9;
    GLsizei a10;
    GLenum a11;
    GLenum a12;
    GLvoid * a13;
} ARGS_void_GLenum_GLint_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLenum_GLint_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__ args;
} PACKED_void_GLenum_GLint_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_GLenum_GLuint_GLintptr_GLsizeiptr)(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLenum a3;
    GLuint a4;
    GLintptr a5;
    GLsizeiptr a6;
} ARGS_void_GLuint_GLenum_GLenum_GLuint_GLintptr_GLsizeiptr;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLenum_GLuint_GLintptr_GLsizeiptr args;
} PACKED_void_GLuint_GLenum_GLenum_GLuint_GLintptr_GLsizeiptr;
typedef void (*FUNC_void_GLuint_GLenum_GLint_GLenum_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid * pixels);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLint a3;
    GLenum a4;
    GLsizei a5;
    GLint a6;
    GLenum a7;
    GLenum a8;
    GLvoid * a9;
} ARGS_void_GLuint_GLenum_GLint_GLenum_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLint_GLenum_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLint_GLenum_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_GLint_GLenum_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid * pixels);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLint a3;
    GLenum a4;
    GLsizei a5;
    GLsizei a6;
    GLint a7;
    GLenum a8;
    GLenum a9;
    GLvoid * a10;
} ARGS_void_GLuint_GLenum_GLint_GLenum_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLint_GLenum_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLint_GLenum_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_GLsizei_GLsizei_GLint_GLsizei_GLsizei_GLboolean)(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLsizei a3;
    GLsizei a4;
    GLint a5;
    GLsizei a6;
    GLsizei a7;
    GLboolean a8;
} ARGS_void_GLuint_GLenum_GLsizei_GLsizei_GLint_GLsizei_GLsizei_GLboolean;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLsizei_GLsizei_GLint_GLsizei_GLsizei_GLboolean args;
} PACKED_void_GLuint_GLenum_GLsizei_GLsizei_GLint_GLsizei_GLsizei_GLboolean;
typedef void (*FUNC_void_GLuint_GLenum_GLsizei_GLint_GLsizei_GLsizei_GLboolean)(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLsizei a3;
    GLint a4;
    GLsizei a5;
    GLsizei a6;
    GLboolean a7;
} ARGS_void_GLuint_GLenum_GLsizei_GLint_GLsizei_GLsizei_GLboolean;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLsizei_GLint_GLsizei_GLsizei_GLboolean args;
} PACKED_void_GLuint_GLenum_GLsizei_GLint_GLsizei_GLsizei_GLboolean;
typedef void (*FUNC_void_GLuint_GLenum_GLint_GLenum_GLsizei_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__)(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid * pixels);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLint a3;
    GLenum a4;
    GLsizei a5;
    GLsizei a6;
    GLsizei a7;
    GLint a8;
    GLenum a9;
    GLenum a10;
    GLvoid * a11;
} ARGS_void_GLuint_GLenum_GLint_GLenum_GLsizei_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLint_GLenum_GLsizei_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLint_GLenum_GLsizei_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_GLsizei_GLsizei_GLint_GLsizei_GLsizei_GLsizei_GLboolean)(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLsizei a3;
    GLsizei a4;
    GLint a5;
    GLsizei a6;
    GLsizei a7;
    GLsizei a8;
    GLboolean a9;
} ARGS_void_GLuint_GLenum_GLsizei_GLsizei_GLint_GLsizei_GLsizei_GLsizei_GLboolean;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLsizei_GLsizei_GLint_GLsizei_GLsizei_GLsizei_GLboolean args;
} PACKED_void_GLuint_GLenum_GLsizei_GLsizei_GLint_GLsizei_GLsizei_GLsizei_GLboolean;
typedef void (*FUNC_void_GLuint_GLenum_GLsizei_GLint_GLsizei_GLsizei_GLsizei_GLboolean)(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLsizei a3;
    GLint a4;
    GLsizei a5;
    GLsizei a6;
    GLsizei a7;
    GLboolean a8;
} ARGS_void_GLuint_GLenum_GLsizei_GLint_GLsizei_GLsizei_GLsizei_GLboolean;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLsizei_GLint_GLsizei_GLsizei_GLsizei_GLboolean args;
} PACKED_void_GLuint_GLenum_GLsizei_GLint_GLsizei_GLsizei_GLsizei_GLboolean;
typedef void (*FUNC_void_GLuint_GLenum_GLenum_const_GLint___GENPT__)(GLuint texture, GLenum target, GLenum pname, const GLint * params);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLenum a3;
    GLint * a4;
} ARGS_void_GLuint_GLenum_GLenum_const_GLint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLenum_const_GLint___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLenum_const_GLint___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_GLenum_const_GLuint___GENPT__)(GLuint texture, GLenum target, GLenum pname, const GLuint * params);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLenum a3;
    GLuint * a4;
} ARGS_void_GLuint_GLenum_GLenum_const_GLuint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLenum_const_GLuint___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLenum_const_GLuint___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_GLenum_GLfloat)(GLuint texture, GLenum target, GLenum pname, GLfloat param);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLenum a3;
    GLfloat a4;
} ARGS_void_GLuint_GLenum_GLenum_GLfloat;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLenum_GLfloat args;
} PACKED_void_GLuint_GLenum_GLenum_GLfloat;
typedef void (*FUNC_void_GLuint_GLenum_GLenum_const_GLfloat___GENPT__)(GLuint texture, GLenum target, GLenum pname, const GLfloat * params);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLenum a3;
    GLfloat * a4;
} ARGS_void_GLuint_GLenum_GLenum_const_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLenum_const_GLfloat___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLenum_const_GLfloat___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_GLenum_GLint)(GLuint texture, GLenum target, GLenum pname, GLint param);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLenum a3;
    GLint a4;
} ARGS_void_GLuint_GLenum_GLenum_GLint;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLenum_GLint args;
} PACKED_void_GLuint_GLenum_GLenum_GLint;
typedef void (*FUNC_void_GLuint_GLenum_GLsizei_GLenum_GLsizei)(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLsizei a3;
    GLenum a4;
    GLsizei a5;
} ARGS_void_GLuint_GLenum_GLsizei_GLenum_GLsizei;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLsizei_GLenum_GLsizei args;
} PACKED_void_GLuint_GLenum_GLsizei_GLenum_GLsizei;
typedef void (*FUNC_void_GLuint_GLenum_GLsizei_GLenum_GLsizei_GLsizei)(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLsizei a3;
    GLenum a4;
    GLsizei a5;
    GLsizei a6;
} ARGS_void_GLuint_GLenum_GLsizei_GLenum_GLsizei_GLsizei;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLsizei_GLenum_GLsizei_GLsizei args;
} PACKED_void_GLuint_GLenum_GLsizei_GLenum_GLsizei_GLsizei;
typedef void (*FUNC_void_GLuint_GLenum_GLsizei_GLenum_GLsizei_GLsizei_GLboolean)(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLsizei a3;
    GLenum a4;
    GLsizei a5;
    GLsizei a6;
    GLboolean a7;
} ARGS_void_GLuint_GLenum_GLsizei_GLenum_GLsizei_GLsizei_GLboolean;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLsizei_GLenum_GLsizei_GLsizei_GLboolean args;
} PACKED_void_GLuint_GLenum_GLsizei_GLenum_GLsizei_GLsizei_GLboolean;
typedef void (*FUNC_void_GLuint_GLenum_GLsizei_GLenum_GLsizei_GLsizei_GLsizei)(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLsizei a3;
    GLenum a4;
    GLsizei a5;
    GLsizei a6;
    GLsizei a7;
} ARGS_void_GLuint_GLenum_GLsizei_GLenum_GLsizei_GLsizei_GLsizei;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLsizei_GLenum_GLsizei_GLsizei_GLsizei args;
} PACKED_void_GLuint_GLenum_GLsizei_GLenum_GLsizei_GLsizei_GLsizei;
typedef void (*FUNC_void_GLuint_GLenum_GLsizei_GLenum_GLsizei_GLsizei_GLsizei_GLboolean)(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLsizei a3;
    GLenum a4;
    GLsizei a5;
    GLsizei a6;
    GLsizei a7;
    GLboolean a8;
} ARGS_void_GLuint_GLenum_GLsizei_GLenum_GLsizei_GLsizei_GLsizei_GLboolean;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLsizei_GLenum_GLsizei_GLsizei_GLsizei_GLboolean args;
} PACKED_void_GLuint_GLenum_GLsizei_GLenum_GLsizei_GLsizei_GLsizei_GLboolean;
typedef void (*FUNC_void_GLuint_GLenum_GLenum_GLsizei_GLsizei_GLsizei_GLsizei_GLbitfield)(GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLenum a3;
    GLsizei a4;
    GLsizei a5;
    GLsizei a6;
    GLsizei a7;
    GLbitfield a8;
} ARGS_void_GLuint_GLenum_GLenum_GLsizei_GLsizei_GLsizei_GLsizei_GLbitfield;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLenum_GLsizei_GLsizei_GLsizei_GLsizei_GLbitfield args;
} PACKED_void_GLuint_GLenum_GLenum_GLsizei_GLsizei_GLsizei_GLsizei_GLbitfield;
typedef void (*FUNC_void_GLuint_GLenum_GLint_GLint_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid * pixels);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLint a3;
    GLint a4;
    GLsizei a5;
    GLenum a6;
    GLenum a7;
    GLvoid * a8;
} ARGS_void_GLuint_GLenum_GLint_GLint_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLint_GLint_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLint_GLint_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_GLint_GLint_GLint_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * pixels);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLint a3;
    GLint a4;
    GLint a5;
    GLsizei a6;
    GLsizei a7;
    GLenum a8;
    GLenum a9;
    GLvoid * a10;
} ARGS_void_GLuint_GLenum_GLint_GLint_GLint_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLint_GLint_GLint_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLint_GLint_GLint_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__)(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid * pixels);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLint a3;
    GLint a4;
    GLint a5;
    GLint a6;
    GLsizei a7;
    GLsizei a8;
    GLsizei a9;
    GLenum a10;
    GLenum a11;
    GLvoid * a12;
} ARGS_void_GLuint_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLuint_GLenum_GLuint_GLenum_GLuint_GLuint_GLuint_GLuint)(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLuint a3;
    GLenum a4;
    GLuint a5;
    GLuint a6;
    GLuint a7;
    GLuint a8;
} ARGS_void_GLuint_GLenum_GLuint_GLenum_GLuint_GLuint_GLuint_GLuint;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLuint_GLenum_GLuint_GLuint_GLuint_GLuint args;
} PACKED_void_GLuint_GLenum_GLuint_GLenum_GLuint_GLuint_GLuint_GLuint;
typedef void (*FUNC_void_GLenum_GLuint_GLenum_GLenum)(GLenum target, GLuint address, GLenum matrix, GLenum transform);
typedef struct {
    GLenum a1;
    GLuint a2;
    GLenum a3;
    GLenum a4;
} ARGS_void_GLenum_GLuint_GLenum_GLenum;
typedef struct {
    int index;
    ARGS_void_GLenum_GLuint_GLenum_GLenum args;
} PACKED_void_GLenum_GLuint_GLenum_GLenum;
typedef void (*FUNC_void_GLsizei_const_GLint___GENPT___GLenum)(GLsizei count, const GLint * attribs, GLenum bufferMode);
typedef struct {
    GLsizei a1;
    GLint * a2;
    GLenum a3;
} ARGS_void_GLsizei_const_GLint___GENPT___GLenum;
typedef struct {
    int index;
    ARGS_void_GLsizei_const_GLint___GENPT___GLenum args;
} PACKED_void_GLsizei_const_GLint___GENPT___GLenum;
typedef void (*FUNC_void_GLsizei_const_GLint___GENPT___GLsizei_const_GLint___GENPT___GLenum)(GLsizei count, const GLint * attribs, GLsizei nbuffers, const GLint * bufstreams, GLenum bufferMode);
typedef struct {
    GLsizei a1;
    GLint * a2;
    GLsizei a3;
    GLint * a4;
    GLenum a5;
} ARGS_void_GLsizei_const_GLint___GENPT___GLsizei_const_GLint___GENPT___GLenum;
typedef struct {
    int index;
    ARGS_void_GLsizei_const_GLint___GENPT___GLsizei_const_GLint___GENPT___GLenum args;
} PACKED_void_GLsizei_const_GLint___GENPT___GLsizei_const_GLint___GENPT___GLenum;
typedef void (*FUNC_void_GLuint_GLsizei_GLchar__GENPT__const___GENPT___GLenum)(GLuint program, GLsizei count, GLchar*const * varyings, GLenum bufferMode);
typedef struct {
    GLuint a1;
    GLsizei a2;
    GLchar*const * a3;
    GLenum a4;
} ARGS_void_GLuint_GLsizei_GLchar__GENPT__const___GENPT___GLenum;
typedef struct {
    int index;
    ARGS_void_GLuint_GLsizei_GLchar__GENPT__const___GENPT___GLenum args;
} PACKED_void_GLuint_GLsizei_GLchar__GENPT__const___GENPT___GLenum;
typedef void (*FUNC_void_GLuint_GLsizei_const_GLchar___GENPT___GLenum)(GLuint program, GLsizei count, const GLchar * varyings, GLenum bufferMode);
typedef struct {
    GLuint a1;
    GLsizei a2;
    GLchar * a3;
    GLenum a4;
} ARGS_void_GLuint_GLsizei_const_GLchar___GENPT___GLenum;
typedef struct {
    int index;
    ARGS_void_GLuint_GLsizei_const_GLchar___GENPT___GLenum args;
} PACKED_void_GLuint_GLsizei_const_GLchar___GENPT___GLenum;
typedef void (*FUNC_void_GLuint_GLsizei_const_GLint___GENPT___GLenum)(GLuint program, GLsizei count, const GLint * locations, GLenum bufferMode);
typedef struct {
    GLuint a1;
    GLsizei a2;
    GLint * a3;
    GLenum a4;
} ARGS_void_GLuint_GLsizei_const_GLint___GENPT___GLenum;
typedef struct {
    int index;
    ARGS_void_GLuint_GLsizei_const_GLint___GENPT___GLenum args;
} PACKED_void_GLuint_GLsizei_const_GLint___GENPT___GLenum;
typedef void (*FUNC_void_GLuint_GLuint_GLenum_const_GLfloat___GENPT__)(GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat * transformValues);
typedef struct {
    GLuint a1;
    GLuint a2;
    GLenum a3;
    GLfloat * a4;
} ARGS_void_GLuint_GLuint_GLenum_const_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLuint_GLenum_const_GLfloat___GENPT__ args;
} PACKED_void_GLuint_GLuint_GLenum_const_GLfloat___GENPT__;
typedef void (*FUNC_void_GLint_GLdouble)(GLint location, GLdouble x);
typedef struct {
    GLint a1;
    GLdouble a2 __attribute__ ((aligned(8)));
} ARGS_void_GLint_GLdouble;
typedef struct {
    int index;
    ARGS_void_GLint_GLdouble args;
} PACKED_void_GLint_GLdouble;
typedef void (*FUNC_void_GLint_GLsizei_const_GLdouble___GENPT__)(GLint location, GLsizei count, const GLdouble * value);
typedef struct {
    GLint a1;
    GLsizei a2;
    GLdouble * a3;
} ARGS_void_GLint_GLsizei_const_GLdouble___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLint_GLsizei_const_GLdouble___GENPT__ args;
} PACKED_void_GLint_GLsizei_const_GLdouble___GENPT__;
typedef void (*FUNC_void_GLint_GLfloat)(GLint location, GLfloat v0);
typedef struct {
    GLint a1;
    GLfloat a2;
} ARGS_void_GLint_GLfloat;
typedef struct {
    int index;
    ARGS_void_GLint_GLfloat args;
} PACKED_void_GLint_GLfloat;
typedef void (*FUNC_void_GLint_GLsizei_const_GLfloat___GENPT__)(GLint location, GLsizei count, const GLfloat * value);
typedef struct {
    GLint a1;
    GLsizei a2;
    GLfloat * a3;
} ARGS_void_GLint_GLsizei_const_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLint_GLsizei_const_GLfloat___GENPT__ args;
} PACKED_void_GLint_GLsizei_const_GLfloat___GENPT__;
typedef void (*FUNC_void_GLint_GLint64EXT)(GLint location, GLint64EXT x);
typedef struct {
    GLint a1;
    GLint64EXT a2;
} ARGS_void_GLint_GLint64EXT;
typedef struct {
    int index;
    ARGS_void_GLint_GLint64EXT args;
} PACKED_void_GLint_GLint64EXT;
typedef void (*FUNC_void_GLint_GLsizei_const_GLint64EXT___GENPT__)(GLint location, GLsizei count, const GLint64EXT * value);
typedef struct {
    GLint a1;
    GLsizei a2;
    GLint64EXT * a3;
} ARGS_void_GLint_GLsizei_const_GLint64EXT___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLint_GLsizei_const_GLint64EXT___GENPT__ args;
} PACKED_void_GLint_GLsizei_const_GLint64EXT___GENPT__;
typedef void (*FUNC_void_GLint_GLsizei_const_GLint___GENPT__)(GLint location, GLsizei count, const GLint * value);
typedef struct {
    GLint a1;
    GLsizei a2;
    GLint * a3;
} ARGS_void_GLint_GLsizei_const_GLint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLint_GLsizei_const_GLint___GENPT__ args;
} PACKED_void_GLint_GLsizei_const_GLint___GENPT__;
typedef void (*FUNC_void_GLint_GLuint)(GLint location, GLuint v0);
typedef struct {
    GLint a1;
    GLuint a2;
} ARGS_void_GLint_GLuint;
typedef struct {
    int index;
    ARGS_void_GLint_GLuint args;
} PACKED_void_GLint_GLuint;
typedef void (*FUNC_void_GLint_GLuint64EXT)(GLint location, GLuint64EXT x);
typedef struct {
    GLint a1;
    GLuint64EXT a2;
} ARGS_void_GLint_GLuint64EXT;
typedef struct {
    int index;
    ARGS_void_GLint_GLuint64EXT args;
} PACKED_void_GLint_GLuint64EXT;
typedef void (*FUNC_void_GLint_GLsizei_const_GLuint64EXT___GENPT__)(GLint location, GLsizei count, const GLuint64EXT * value);
typedef struct {
    GLint a1;
    GLsizei a2;
    GLuint64EXT * a3;
} ARGS_void_GLint_GLsizei_const_GLuint64EXT___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLint_GLsizei_const_GLuint64EXT___GENPT__ args;
} PACKED_void_GLint_GLsizei_const_GLuint64EXT___GENPT__;
typedef void (*FUNC_void_GLint_GLsizei_const_GLuint___GENPT__)(GLint location, GLsizei count, const GLuint * value);
typedef struct {
    GLint a1;
    GLsizei a2;
    GLuint * a3;
} ARGS_void_GLint_GLsizei_const_GLuint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLint_GLsizei_const_GLuint___GENPT__ args;
} PACKED_void_GLint_GLsizei_const_GLuint___GENPT__;
typedef void (*FUNC_void_GLint_GLint64EXT_GLint64EXT)(GLint location, GLint64EXT x, GLint64EXT y);
typedef struct {
    GLint a1;
    GLint64EXT a2;
    GLint64EXT a3;
} ARGS_void_GLint_GLint64EXT_GLint64EXT;
typedef struct {
    int index;
    ARGS_void_GLint_GLint64EXT_GLint64EXT args;
} PACKED_void_GLint_GLint64EXT_GLint64EXT;
typedef void (*FUNC_void_GLint_GLuint_GLuint)(GLint location, GLuint v0, GLuint v1);
typedef struct {
    GLint a1;
    GLuint a2;
    GLuint a3;
} ARGS_void_GLint_GLuint_GLuint;
typedef struct {
    int index;
    ARGS_void_GLint_GLuint_GLuint args;
} PACKED_void_GLint_GLuint_GLuint;
typedef void (*FUNC_void_GLint_GLuint64EXT_GLuint64EXT)(GLint location, GLuint64EXT x, GLuint64EXT y);
typedef struct {
    GLint a1;
    GLuint64EXT a2;
    GLuint64EXT a3;
} ARGS_void_GLint_GLuint64EXT_GLuint64EXT;
typedef struct {
    int index;
    ARGS_void_GLint_GLuint64EXT_GLuint64EXT args;
} PACKED_void_GLint_GLuint64EXT_GLuint64EXT;
typedef void (*FUNC_void_GLint_GLdouble_GLdouble_GLdouble)(GLint location, GLdouble x, GLdouble y, GLdouble z);
typedef struct {
    GLint a1;
    GLdouble a2 __attribute__ ((aligned(8)));
    GLdouble a3 __attribute__ ((aligned(8)));
    GLdouble a4 __attribute__ ((aligned(8)));
} ARGS_void_GLint_GLdouble_GLdouble_GLdouble;
typedef struct {
    int index;
    ARGS_void_GLint_GLdouble_GLdouble_GLdouble args;
} PACKED_void_GLint_GLdouble_GLdouble_GLdouble;
typedef void (*FUNC_void_GLint_GLfloat_GLfloat_GLfloat)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef struct {
    GLint a1;
    GLfloat a2;
    GLfloat a3;
    GLfloat a4;
} ARGS_void_GLint_GLfloat_GLfloat_GLfloat;
typedef struct {
    int index;
    ARGS_void_GLint_GLfloat_GLfloat_GLfloat args;
} PACKED_void_GLint_GLfloat_GLfloat_GLfloat;
typedef void (*FUNC_void_GLint_GLint64EXT_GLint64EXT_GLint64EXT)(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
typedef struct {
    GLint a1;
    GLint64EXT a2;
    GLint64EXT a3;
    GLint64EXT a4;
} ARGS_void_GLint_GLint64EXT_GLint64EXT_GLint64EXT;
typedef struct {
    int index;
    ARGS_void_GLint_GLint64EXT_GLint64EXT_GLint64EXT args;
} PACKED_void_GLint_GLint64EXT_GLint64EXT_GLint64EXT;
typedef void (*FUNC_void_GLint_GLuint_GLuint_GLuint)(GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef struct {
    GLint a1;
    GLuint a2;
    GLuint a3;
    GLuint a4;
} ARGS_void_GLint_GLuint_GLuint_GLuint;
typedef struct {
    int index;
    ARGS_void_GLint_GLuint_GLuint_GLuint args;
} PACKED_void_GLint_GLuint_GLuint_GLuint;
typedef void (*FUNC_void_GLint_GLuint64EXT_GLuint64EXT_GLuint64EXT)(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
typedef struct {
    GLint a1;
    GLuint64EXT a2;
    GLuint64EXT a3;
    GLuint64EXT a4;
} ARGS_void_GLint_GLuint64EXT_GLuint64EXT_GLuint64EXT;
typedef struct {
    int index;
    ARGS_void_GLint_GLuint64EXT_GLuint64EXT_GLuint64EXT args;
} PACKED_void_GLint_GLuint64EXT_GLuint64EXT_GLuint64EXT;
typedef void (*FUNC_void_GLint_GLdouble_GLdouble_GLdouble_GLdouble)(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef struct {
    GLint a1;
    GLdouble a2 __attribute__ ((aligned(8)));
    GLdouble a3 __attribute__ ((aligned(8)));
    GLdouble a4 __attribute__ ((aligned(8)));
    GLdouble a5 __attribute__ ((aligned(8)));
} ARGS_void_GLint_GLdouble_GLdouble_GLdouble_GLdouble;
typedef struct {
    int index;
    ARGS_void_GLint_GLdouble_GLdouble_GLdouble_GLdouble args;
} PACKED_void_GLint_GLdouble_GLdouble_GLdouble_GLdouble;
typedef void (*FUNC_void_GLint_GLfloat_GLfloat_GLfloat_GLfloat)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef struct {
    GLint a1;
    GLfloat a2;
    GLfloat a3;
    GLfloat a4;
    GLfloat a5;
} ARGS_void_GLint_GLfloat_GLfloat_GLfloat_GLfloat;
typedef struct {
    int index;
    ARGS_void_GLint_GLfloat_GLfloat_GLfloat_GLfloat args;
} PACKED_void_GLint_GLfloat_GLfloat_GLfloat_GLfloat;
typedef void (*FUNC_void_GLint_GLint_GLint_GLint_GLint)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef struct {
    GLint a1;
    GLint a2;
    GLint a3;
    GLint a4;
    GLint a5;
} ARGS_void_GLint_GLint_GLint_GLint_GLint;
typedef struct {
    int index;
    ARGS_void_GLint_GLint_GLint_GLint_GLint args;
} PACKED_void_GLint_GLint_GLint_GLint_GLint;
typedef void (*FUNC_void_GLint_GLint64EXT_GLint64EXT_GLint64EXT_GLint64EXT)(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
typedef struct {
    GLint a1;
    GLint64EXT a2;
    GLint64EXT a3;
    GLint64EXT a4;
    GLint64EXT a5;
} ARGS_void_GLint_GLint64EXT_GLint64EXT_GLint64EXT_GLint64EXT;
typedef struct {
    int index;
    ARGS_void_GLint_GLint64EXT_GLint64EXT_GLint64EXT_GLint64EXT args;
} PACKED_void_GLint_GLint64EXT_GLint64EXT_GLint64EXT_GLint64EXT;
typedef void (*FUNC_void_GLint_GLuint_GLuint_GLuint_GLuint)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef struct {
    GLint a1;
    GLuint a2;
    GLuint a3;
    GLuint a4;
    GLuint a5;
} ARGS_void_GLint_GLuint_GLuint_GLuint_GLuint;
typedef struct {
    int index;
    ARGS_void_GLint_GLuint_GLuint_GLuint_GLuint args;
} PACKED_void_GLint_GLuint_GLuint_GLuint_GLuint;
typedef void (*FUNC_void_GLint_GLuint64EXT_GLuint64EXT_GLuint64EXT_GLuint64EXT)(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
typedef struct {
    GLint a1;
    GLuint64EXT a2;
    GLuint64EXT a3;
    GLuint64EXT a4;
    GLuint64EXT a5;
} ARGS_void_GLint_GLuint64EXT_GLuint64EXT_GLuint64EXT_GLuint64EXT;
typedef struct {
    int index;
    ARGS_void_GLint_GLuint64EXT_GLuint64EXT_GLuint64EXT_GLuint64EXT args;
} PACKED_void_GLint_GLuint64EXT_GLuint64EXT_GLuint64EXT_GLuint64EXT;
typedef void (*FUNC_void_GLint_GLuint64)(GLint location, GLuint64 value);
typedef struct {
    GLint a1;
    GLuint64 a2;
} ARGS_void_GLint_GLuint64;
typedef struct {
    int index;
    ARGS_void_GLint_GLuint64 args;
} PACKED_void_GLint_GLuint64;
typedef void (*FUNC_void_GLint_GLsizei_const_GLuint64___GENPT__)(GLint location, GLsizei count, const GLuint64 * value);
typedef struct {
    GLint a1;
    GLsizei a2;
    GLuint64 * a3;
} ARGS_void_GLint_GLsizei_const_GLuint64___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLint_GLsizei_const_GLuint64___GENPT__ args;
} PACKED_void_GLint_GLsizei_const_GLuint64___GENPT__;
typedef void (*FUNC_void_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef struct {
    GLint a1;
    GLsizei a2;
    GLboolean a3;
    GLdouble * a4;
} ARGS_void_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__ args;
} PACKED_void_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__;
typedef void (*FUNC_void_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef struct {
    GLint a1;
    GLsizei a2;
    GLboolean a3;
    GLfloat * a4;
} ARGS_void_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__ args;
} PACKED_void_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__;
typedef void (*FUNC_void_GLuint_GLuint_GLsizei_const_GLvoid___GENPT___GLenum)(GLuint buffer, GLuint offset, GLsizei size, const GLvoid * pointer, GLenum preserve);
typedef struct {
    GLuint a1;
    GLuint a2;
    GLsizei a3;
    GLvoid * a4;
    GLenum a5;
} ARGS_void_GLuint_GLuint_GLsizei_const_GLvoid___GENPT___GLenum;
typedef struct {
    int index;
    ARGS_void_GLuint_GLuint_GLsizei_const_GLvoid___GENPT___GLenum args;
} PACKED_void_GLuint_GLuint_GLsizei_const_GLvoid___GENPT___GLenum;
typedef void (*FUNC_void_GLuint_GLbitfield_GLuint)(GLuint pipeline, GLbitfield stages, GLuint program);
typedef struct {
    GLuint a1;
    GLbitfield a2;
    GLuint a3;
} ARGS_void_GLuint_GLbitfield_GLuint;
typedef struct {
    int index;
    ARGS_void_GLuint_GLbitfield_GLuint args;
} PACKED_void_GLuint_GLbitfield_GLuint;
typedef void (*FUNC_void_GLvdpauSurfaceNV_GLenum_GLsizei_GLsizei___GENPT___GLint___GENPT__)(GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei * length, GLint * values);
typedef struct {
    GLvdpauSurfaceNV a1;
    GLenum a2;
    GLsizei a3;
    GLsizei * a4;
    GLint * a5;
} ARGS_void_GLvdpauSurfaceNV_GLenum_GLsizei_GLsizei___GENPT___GLint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLvdpauSurfaceNV_GLenum_GLsizei_GLsizei___GENPT___GLint___GENPT__ args;
} PACKED_void_GLvdpauSurfaceNV_GLenum_GLsizei_GLsizei___GENPT___GLint___GENPT__;
typedef void (*FUNC_void_const_GLvoid___GENPT___const_GLvoid___GENPT__)(const GLvoid * vdpDevice, const GLvoid * getProcAddress);
typedef struct {
    GLvoid * a1;
    GLvoid * a2;
} ARGS_void_const_GLvoid___GENPT___const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_const_GLvoid___GENPT___const_GLvoid___GENPT__ args;
} PACKED_void_const_GLvoid___GENPT___const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLvdpauSurfaceNV)(GLvdpauSurfaceNV surface);
typedef struct {
    GLvdpauSurfaceNV a1;
} ARGS_void_GLvdpauSurfaceNV;
typedef struct {
    int index;
    ARGS_void_GLvdpauSurfaceNV args;
} PACKED_void_GLvdpauSurfaceNV;
typedef void (*FUNC_void_GLsizei_const_GLvdpauSurfaceNV___GENPT__)(GLsizei numSurfaces, const GLvdpauSurfaceNV * surfaces);
typedef struct {
    GLsizei a1;
    GLvdpauSurfaceNV * a2;
} ARGS_void_GLsizei_const_GLvdpauSurfaceNV___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLsizei_const_GLvdpauSurfaceNV___GENPT__ args;
} PACKED_void_GLsizei_const_GLvdpauSurfaceNV___GENPT__;
typedef GLvdpauSurfaceNV (*FUNC_GLvdpauSurfaceNV_GLvoid___GENPT___GLenum_GLsizei_const_GLuint___GENPT__)(GLvoid * vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint * textureNames);
typedef struct {
    GLvoid * a1;
    GLenum a2;
    GLsizei a3;
    GLuint * a4;
} ARGS_GLvdpauSurfaceNV_GLvoid___GENPT___GLenum_GLsizei_const_GLuint___GENPT__;
typedef struct {
    int index;
    ARGS_GLvdpauSurfaceNV_GLvoid___GENPT___GLenum_GLsizei_const_GLuint___GENPT__ args;
} PACKED_GLvdpauSurfaceNV_GLvoid___GENPT___GLenum_GLsizei_const_GLuint___GENPT__;
typedef GLvdpauSurfaceNV (*FUNC_GLvdpauSurfaceNV_const_GLvoid___GENPT___GLenum_GLsizei_const_GLuint___GENPT__)(const GLvoid * vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint * textureNames);
typedef struct {
    GLvoid * a1;
    GLenum a2;
    GLsizei a3;
    GLuint * a4;
} ARGS_GLvdpauSurfaceNV_const_GLvoid___GENPT___GLenum_GLsizei_const_GLuint___GENPT__;
typedef struct {
    int index;
    ARGS_GLvdpauSurfaceNV_const_GLvoid___GENPT___GLenum_GLsizei_const_GLuint___GENPT__ args;
} PACKED_GLvdpauSurfaceNV_const_GLvoid___GENPT___GLenum_GLsizei_const_GLuint___GENPT__;
typedef void (*FUNC_void_GLvdpauSurfaceNV_GLenum)(GLvdpauSurfaceNV surface, GLenum access);
typedef struct {
    GLvdpauSurfaceNV a1;
    GLenum a2;
} ARGS_void_GLvdpauSurfaceNV_GLenum;
typedef struct {
    int index;
    ARGS_void_GLvdpauSurfaceNV_GLenum args;
} PACKED_void_GLvdpauSurfaceNV_GLenum;
typedef void (*FUNC_void_GLuint_GLenum_GLsizei_GLuint_GLuint)(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLsizei a3;
    GLuint a4;
    GLuint a5;
} ARGS_void_GLuint_GLenum_GLsizei_GLuint_GLuint;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLsizei_GLuint_GLuint args;
} PACKED_void_GLuint_GLenum_GLsizei_GLuint_GLuint;
typedef void (*FUNC_void_GLuint_GLenum_GLuint_const_GLvoid___GENPT__)(GLuint id, GLenum type, GLuint stride, const GLvoid * addr);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLuint a3;
    GLvoid * a4;
} ARGS_void_GLuint_GLenum_GLuint_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLuint_const_GLvoid___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLuint_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLuint_const_GLbyte___GENPT__)(GLuint id, const GLbyte * addr);
typedef struct {
    GLuint a1;
    GLbyte * a2;
} ARGS_void_GLuint_const_GLbyte___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_const_GLbyte___GENPT__ args;
} PACKED_void_GLuint_const_GLbyte___GENPT__;
typedef void (*FUNC_void_GLuint_const_GLdouble___GENPT__)(GLuint id, const GLdouble * addr);
typedef struct {
    GLuint a1;
    GLdouble * a2;
} ARGS_void_GLuint_const_GLdouble___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_const_GLdouble___GENPT__ args;
} PACKED_void_GLuint_const_GLdouble___GENPT__;
typedef void (*FUNC_void_GLuint_const_GLshort___GENPT__)(GLuint id, const GLshort * addr);
typedef struct {
    GLuint a1;
    GLshort * a2;
} ARGS_void_GLuint_const_GLshort___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_const_GLshort___GENPT__ args;
} PACKED_void_GLuint_const_GLshort___GENPT__;
typedef void (*FUNC_void_GLuint_const_GLubyte___GENPT__)(GLuint id, const GLubyte * addr);
typedef struct {
    GLuint a1;
    GLubyte * a2;
} ARGS_void_GLuint_const_GLubyte___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_const_GLubyte___GENPT__ args;
} PACKED_void_GLuint_const_GLubyte___GENPT__;
typedef void (*FUNC_void_GLuint_const_GLuint___GENPT__)(GLuint id, const GLuint * addr);
typedef struct {
    GLuint a1;
    GLuint * a2;
} ARGS_void_GLuint_const_GLuint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_const_GLuint___GENPT__ args;
} PACKED_void_GLuint_const_GLuint___GENPT__;
typedef void (*FUNC_void_GLuint_const_GLushort___GENPT__)(GLuint id, const GLushort * addr);
typedef struct {
    GLuint a1;
    GLushort * a2;
} ARGS_void_GLuint_const_GLushort___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_const_GLushort___GENPT__ args;
} PACKED_void_GLuint_const_GLushort___GENPT__;
typedef void (*FUNC_void_GLuint_GLuint_GLuint_GLintptr_GLsizei)(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
typedef struct {
    GLuint a1;
    GLuint a2;
    GLuint a3;
    GLintptr a4;
    GLsizei a5;
} ARGS_void_GLuint_GLuint_GLuint_GLintptr_GLsizei;
typedef struct {
    int index;
    ARGS_void_GLuint_GLuint_GLuint_GLintptr_GLsizei args;
} PACKED_void_GLuint_GLuint_GLuint_GLintptr_GLsizei;
typedef void (*FUNC_void_GLuint_GLuint_GLint_GLenum_GLsizei_GLintptr)(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef struct {
    GLuint a1;
    GLuint a2;
    GLint a3;
    GLenum a4;
    GLsizei a5;
    GLintptr a6;
} ARGS_void_GLuint_GLuint_GLint_GLenum_GLsizei_GLintptr;
typedef struct {
    int index;
    ARGS_void_GLuint_GLuint_GLint_GLenum_GLsizei_GLintptr args;
} PACKED_void_GLuint_GLuint_GLint_GLenum_GLsizei_GLintptr;
typedef void (*FUNC_void_GLuint_GLuint_GLsizei_GLintptr)(GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset);
typedef struct {
    GLuint a1;
    GLuint a2;
    GLsizei a3;
    GLintptr a4;
} ARGS_void_GLuint_GLuint_GLsizei_GLintptr;
typedef struct {
    int index;
    ARGS_void_GLuint_GLuint_GLsizei_GLintptr args;
} PACKED_void_GLuint_GLuint_GLsizei_GLintptr;
typedef void (*FUNC_void_GLuint_GLuint_GLenum_GLsizei_GLintptr)(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);
typedef struct {
    GLuint a1;
    GLuint a2;
    GLenum a3;
    GLsizei a4;
    GLintptr a5;
} ARGS_void_GLuint_GLuint_GLenum_GLsizei_GLintptr;
typedef struct {
    int index;
    ARGS_void_GLuint_GLuint_GLenum_GLsizei_GLintptr args;
} PACKED_void_GLuint_GLuint_GLenum_GLsizei_GLintptr;
typedef void (*FUNC_void_GLuint_GLuint_GLenum_GLint_GLenum_GLsizei_GLintptr)(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef struct {
    GLuint a1;
    GLuint a2;
    GLenum a3;
    GLint a4;
    GLenum a5;
    GLsizei a6;
    GLintptr a7;
} ARGS_void_GLuint_GLuint_GLenum_GLint_GLenum_GLsizei_GLintptr;
typedef struct {
    int index;
    ARGS_void_GLuint_GLuint_GLenum_GLint_GLenum_GLsizei_GLintptr args;
} PACKED_void_GLuint_GLuint_GLenum_GLint_GLenum_GLsizei_GLintptr;
typedef void (*FUNC_void_GLuint_GLuint_GLint_GLenum_GLboolean_GLuint)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
typedef struct {
    GLuint a1;
    GLuint a2;
    GLint a3;
    GLenum a4;
    GLboolean a5;
    GLuint a6;
} ARGS_void_GLuint_GLuint_GLint_GLenum_GLboolean_GLuint;
typedef struct {
    int index;
    ARGS_void_GLuint_GLuint_GLint_GLenum_GLboolean_GLuint args;
} PACKED_void_GLuint_GLuint_GLint_GLenum_GLboolean_GLuint;
typedef void (*FUNC_void_GLuint_GLuint_GLint_GLenum_GLuint)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef struct {
    GLuint a1;
    GLuint a2;
    GLint a3;
    GLenum a4;
    GLuint a5;
} ARGS_void_GLuint_GLuint_GLint_GLenum_GLuint;
typedef struct {
    int index;
    ARGS_void_GLuint_GLuint_GLint_GLenum_GLuint args;
} PACKED_void_GLuint_GLuint_GLint_GLenum_GLuint;
typedef void (*FUNC_void_GLuint_GLuint_GLuint_GLint_GLenum_GLsizei_GLintptr)(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
typedef struct {
    GLuint a1;
    GLuint a2;
    GLuint a3;
    GLint a4;
    GLenum a5;
    GLsizei a6;
    GLintptr a7;
} ARGS_void_GLuint_GLuint_GLuint_GLint_GLenum_GLsizei_GLintptr;
typedef struct {
    int index;
    ARGS_void_GLuint_GLuint_GLuint_GLint_GLenum_GLsizei_GLintptr args;
} PACKED_void_GLuint_GLuint_GLuint_GLint_GLenum_GLsizei_GLintptr;
typedef void (*FUNC_void_GLuint_GLuint_GLuint_GLint_GLenum_GLboolean_GLsizei_GLintptr)(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset);
typedef struct {
    GLuint a1;
    GLuint a2;
    GLuint a3;
    GLint a4;
    GLenum a5;
    GLboolean a6;
    GLsizei a7;
    GLintptr a8;
} ARGS_void_GLuint_GLuint_GLuint_GLint_GLenum_GLboolean_GLsizei_GLintptr;
typedef struct {
    int index;
    ARGS_void_GLuint_GLuint_GLuint_GLint_GLenum_GLboolean_GLsizei_GLintptr args;
} PACKED_void_GLuint_GLuint_GLuint_GLint_GLenum_GLboolean_GLsizei_GLintptr;
typedef void (*FUNC_void_GLuint_GLdouble)(GLuint index, GLdouble x);
typedef struct {
    GLuint a1;
    GLdouble a2 __attribute__ ((aligned(8)));
} ARGS_void_GLuint_GLdouble;
typedef struct {
    int index;
    ARGS_void_GLuint_GLdouble args;
} PACKED_void_GLuint_GLdouble;
typedef void (*FUNC_void_GLuint_GLfloat)(GLuint index, GLfloat x);
typedef struct {
    GLuint a1;
    GLfloat a2;
} ARGS_void_GLuint_GLfloat;
typedef struct {
    int index;
    ARGS_void_GLuint_GLfloat args;
} PACKED_void_GLuint_GLfloat;
typedef void (*FUNC_void_GLuint_GLhalfNV)(GLuint index, GLhalfNV x);
typedef struct {
    GLuint a1;
    GLhalfNV a2;
} ARGS_void_GLuint_GLhalfNV;
typedef struct {
    int index;
    ARGS_void_GLuint_GLhalfNV args;
} PACKED_void_GLuint_GLhalfNV;
typedef void (*FUNC_void_GLuint_const_GLhalfNV___GENPT__)(GLuint index, const GLhalfNV * v);
typedef struct {
    GLuint a1;
    GLhalfNV * a2;
} ARGS_void_GLuint_const_GLhalfNV___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_const_GLhalfNV___GENPT__ args;
} PACKED_void_GLuint_const_GLhalfNV___GENPT__;
typedef void (*FUNC_void_GLuint_GLshort)(GLuint index, GLshort x);
typedef struct {
    GLuint a1;
    GLshort a2;
} ARGS_void_GLuint_GLshort;
typedef struct {
    int index;
    ARGS_void_GLuint_GLshort args;
} PACKED_void_GLuint_GLshort;
typedef void (*FUNC_void_GLuint_GLfloat_GLfloat)(GLuint index, GLfloat x, GLfloat y);
typedef struct {
    GLuint a1;
    GLfloat a2;
    GLfloat a3;
} ARGS_void_GLuint_GLfloat_GLfloat;
typedef struct {
    int index;
    ARGS_void_GLuint_GLfloat_GLfloat args;
} PACKED_void_GLuint_GLfloat_GLfloat;
typedef void (*FUNC_void_GLuint_GLhalfNV_GLhalfNV)(GLuint index, GLhalfNV x, GLhalfNV y);
typedef struct {
    GLuint a1;
    GLhalfNV a2;
    GLhalfNV a3;
} ARGS_void_GLuint_GLhalfNV_GLhalfNV;
typedef struct {
    int index;
    ARGS_void_GLuint_GLhalfNV_GLhalfNV args;
} PACKED_void_GLuint_GLhalfNV_GLhalfNV;
typedef void (*FUNC_void_GLuint_GLshort_GLshort)(GLuint index, GLshort x, GLshort y);
typedef struct {
    GLuint a1;
    GLshort a2;
    GLshort a3;
} ARGS_void_GLuint_GLshort_GLshort;
typedef struct {
    int index;
    ARGS_void_GLuint_GLshort_GLshort args;
} PACKED_void_GLuint_GLshort_GLshort;
typedef void (*FUNC_void_GLuint_GLdouble_GLdouble_GLdouble)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
typedef struct {
    GLuint a1;
    GLdouble a2 __attribute__ ((aligned(8)));
    GLdouble a3 __attribute__ ((aligned(8)));
    GLdouble a4 __attribute__ ((aligned(8)));
} ARGS_void_GLuint_GLdouble_GLdouble_GLdouble;
typedef struct {
    int index;
    ARGS_void_GLuint_GLdouble_GLdouble_GLdouble args;
} PACKED_void_GLuint_GLdouble_GLdouble_GLdouble;
typedef void (*FUNC_void_GLuint_GLhalfNV_GLhalfNV_GLhalfNV)(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z);
typedef struct {
    GLuint a1;
    GLhalfNV a2;
    GLhalfNV a3;
    GLhalfNV a4;
} ARGS_void_GLuint_GLhalfNV_GLhalfNV_GLhalfNV;
typedef struct {
    int index;
    ARGS_void_GLuint_GLhalfNV_GLhalfNV_GLhalfNV args;
} PACKED_void_GLuint_GLhalfNV_GLhalfNV_GLhalfNV;
typedef void (*FUNC_void_GLuint_GLshort_GLshort_GLshort)(GLuint index, GLshort x, GLshort y, GLshort z);
typedef struct {
    GLuint a1;
    GLshort a2;
    GLshort a3;
    GLshort a4;
} ARGS_void_GLuint_GLshort_GLshort_GLshort;
typedef struct {
    int index;
    ARGS_void_GLuint_GLshort_GLshort_GLshort args;
} PACKED_void_GLuint_GLshort_GLshort_GLshort;
typedef void (*FUNC_void_GLuint_GLubyte_GLubyte_GLubyte_GLubyte)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
typedef struct {
    GLuint a1;
    GLubyte a2;
    GLubyte a3;
    GLubyte a4;
    GLubyte a5;
} ARGS_void_GLuint_GLubyte_GLubyte_GLubyte_GLubyte;
typedef struct {
    int index;
    ARGS_void_GLuint_GLubyte_GLubyte_GLubyte_GLubyte args;
} PACKED_void_GLuint_GLubyte_GLubyte_GLubyte_GLubyte;
typedef void (*FUNC_void_GLuint_GLdouble_GLdouble_GLdouble_GLdouble)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef struct {
    GLuint a1;
    GLdouble a2 __attribute__ ((aligned(8)));
    GLdouble a3 __attribute__ ((aligned(8)));
    GLdouble a4 __attribute__ ((aligned(8)));
    GLdouble a5 __attribute__ ((aligned(8)));
} ARGS_void_GLuint_GLdouble_GLdouble_GLdouble_GLdouble;
typedef struct {
    int index;
    ARGS_void_GLuint_GLdouble_GLdouble_GLdouble_GLdouble args;
} PACKED_void_GLuint_GLdouble_GLdouble_GLdouble_GLdouble;
typedef void (*FUNC_void_GLuint_GLfloat_GLfloat_GLfloat_GLfloat)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef struct {
    GLuint a1;
    GLfloat a2;
    GLfloat a3;
    GLfloat a4;
    GLfloat a5;
} ARGS_void_GLuint_GLfloat_GLfloat_GLfloat_GLfloat;
typedef struct {
    int index;
    ARGS_void_GLuint_GLfloat_GLfloat_GLfloat_GLfloat args;
} PACKED_void_GLuint_GLfloat_GLfloat_GLfloat_GLfloat;
typedef void (*FUNC_void_GLuint_GLhalfNV_GLhalfNV_GLhalfNV_GLhalfNV)(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
typedef struct {
    GLuint a1;
    GLhalfNV a2;
    GLhalfNV a3;
    GLhalfNV a4;
    GLhalfNV a5;
} ARGS_void_GLuint_GLhalfNV_GLhalfNV_GLhalfNV_GLhalfNV;
typedef struct {
    int index;
    ARGS_void_GLuint_GLhalfNV_GLhalfNV_GLhalfNV_GLhalfNV args;
} PACKED_void_GLuint_GLhalfNV_GLhalfNV_GLhalfNV_GLhalfNV;
typedef void (*FUNC_void_GLuint_GLshort_GLshort_GLshort_GLshort)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
typedef struct {
    GLuint a1;
    GLshort a2;
    GLshort a3;
    GLshort a4;
    GLshort a5;
} ARGS_void_GLuint_GLshort_GLshort_GLshort_GLshort;
typedef struct {
    int index;
    ARGS_void_GLuint_GLshort_GLshort_GLshort_GLshort args;
} PACKED_void_GLuint_GLshort_GLshort_GLshort_GLshort;
typedef void (*FUNC_void_GLuint_GLint_GLenum_GLboolean_GLsizei_GLuint_GLuint)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset);
typedef struct {
    GLuint a1;
    GLint a2;
    GLenum a3;
    GLboolean a4;
    GLsizei a5;
    GLuint a6;
    GLuint a7;
} ARGS_void_GLuint_GLint_GLenum_GLboolean_GLsizei_GLuint_GLuint;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint_GLenum_GLboolean_GLsizei_GLuint_GLuint args;
} PACKED_void_GLuint_GLint_GLenum_GLboolean_GLsizei_GLuint_GLuint;
typedef void (*FUNC_void_GLuint_GLint_GLenum_GLboolean_GLuint)(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
typedef struct {
    GLuint a1;
    GLint a2;
    GLenum a3;
    GLboolean a4;
    GLuint a5;
} ARGS_void_GLuint_GLint_GLenum_GLboolean_GLuint;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint_GLenum_GLboolean_GLuint args;
} PACKED_void_GLuint_GLint_GLenum_GLboolean_GLuint;
typedef void (*FUNC_void_GLuint_GLint_GLenum_GLboolean_GLsizei)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride);
typedef struct {
    GLuint a1;
    GLint a2;
    GLenum a3;
    GLboolean a4;
    GLsizei a5;
} ARGS_void_GLuint_GLint_GLenum_GLboolean_GLsizei;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint_GLenum_GLboolean_GLsizei args;
} PACKED_void_GLuint_GLint_GLenum_GLboolean_GLsizei;
typedef void (*FUNC_void_GLuint_GLuint_GLuint_GLuint_GLuint)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
typedef struct {
    GLuint a1;
    GLuint a2;
    GLuint a3;
    GLuint a4;
    GLuint a5;
} ARGS_void_GLuint_GLuint_GLuint_GLuint_GLuint;
typedef struct {
    int index;
    ARGS_void_GLuint_GLuint_GLuint_GLuint_GLuint args;
} PACKED_void_GLuint_GLuint_GLuint_GLuint_GLuint;
typedef void (*FUNC_void_GLuint_GLint_GLenum_GLuint)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef struct {
    GLuint a1;
    GLint a2;
    GLenum a3;
    GLuint a4;
} ARGS_void_GLuint_GLint_GLenum_GLuint;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint_GLenum_GLuint args;
} PACKED_void_GLuint_GLint_GLenum_GLuint;
typedef void (*FUNC_void_GLuint_GLint_GLenum_GLsizei)(GLuint index, GLint size, GLenum type, GLsizei stride);
typedef struct {
    GLuint a1;
    GLint a2;
    GLenum a3;
    GLsizei a4;
} ARGS_void_GLuint_GLint_GLenum_GLsizei;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint_GLenum_GLsizei args;
} PACKED_void_GLuint_GLint_GLenum_GLsizei;
typedef void (*FUNC_void_GLuint_GLint_GLenum_GLsizei_const_GLvoid___GENPT__)(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid * pointer);
typedef struct {
    GLuint a1;
    GLint a2;
    GLenum a3;
    GLsizei a4;
    GLvoid * a5;
} ARGS_void_GLuint_GLint_GLenum_GLsizei_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint_GLenum_GLsizei_const_GLvoid___GENPT__ args;
} PACKED_void_GLuint_GLint_GLenum_GLsizei_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLuint_GLint64EXT)(GLuint index, GLint64EXT x);
typedef struct {
    GLuint a1;
    GLint64EXT a2;
} ARGS_void_GLuint_GLint64EXT;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint64EXT args;
} PACKED_void_GLuint_GLint64EXT;
typedef void (*FUNC_void_GLuint_const_GLint64EXT___GENPT__)(GLuint index, const GLint64EXT * v);
typedef struct {
    GLuint a1;
    GLint64EXT * a2;
} ARGS_void_GLuint_const_GLint64EXT___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_const_GLint64EXT___GENPT__ args;
} PACKED_void_GLuint_const_GLint64EXT___GENPT__;
typedef void (*FUNC_void_GLuint_GLuint64EXT)(GLuint index, GLuint64EXT x);
typedef struct {
    GLuint a1;
    GLuint64EXT a2;
} ARGS_void_GLuint_GLuint64EXT;
typedef struct {
    int index;
    ARGS_void_GLuint_GLuint64EXT args;
} PACKED_void_GLuint_GLuint64EXT;
typedef void (*FUNC_void_GLuint_const_GLuint64EXT___GENPT__)(GLuint index, const GLuint64EXT * v);
typedef struct {
    GLuint a1;
    GLuint64EXT * a2;
} ARGS_void_GLuint_const_GLuint64EXT___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_const_GLuint64EXT___GENPT__ args;
} PACKED_void_GLuint_const_GLuint64EXT___GENPT__;
typedef void (*FUNC_void_GLuint_GLint64EXT_GLint64EXT)(GLuint index, GLint64EXT x, GLint64EXT y);
typedef struct {
    GLuint a1;
    GLint64EXT a2;
    GLint64EXT a3;
} ARGS_void_GLuint_GLint64EXT_GLint64EXT;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint64EXT_GLint64EXT args;
} PACKED_void_GLuint_GLint64EXT_GLint64EXT;
typedef void (*FUNC_void_GLuint_GLuint64EXT_GLuint64EXT)(GLuint index, GLuint64EXT x, GLuint64EXT y);
typedef struct {
    GLuint a1;
    GLuint64EXT a2;
    GLuint64EXT a3;
} ARGS_void_GLuint_GLuint64EXT_GLuint64EXT;
typedef struct {
    int index;
    ARGS_void_GLuint_GLuint64EXT_GLuint64EXT args;
} PACKED_void_GLuint_GLuint64EXT_GLuint64EXT;
typedef void (*FUNC_void_GLuint_GLint64EXT_GLint64EXT_GLint64EXT)(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z);
typedef struct {
    GLuint a1;
    GLint64EXT a2;
    GLint64EXT a3;
    GLint64EXT a4;
} ARGS_void_GLuint_GLint64EXT_GLint64EXT_GLint64EXT;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint64EXT_GLint64EXT_GLint64EXT args;
} PACKED_void_GLuint_GLint64EXT_GLint64EXT_GLint64EXT;
typedef void (*FUNC_void_GLuint_GLuint64EXT_GLuint64EXT_GLuint64EXT)(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
typedef struct {
    GLuint a1;
    GLuint64EXT a2;
    GLuint64EXT a3;
    GLuint64EXT a4;
} ARGS_void_GLuint_GLuint64EXT_GLuint64EXT_GLuint64EXT;
typedef struct {
    int index;
    ARGS_void_GLuint_GLuint64EXT_GLuint64EXT_GLuint64EXT args;
} PACKED_void_GLuint_GLuint64EXT_GLuint64EXT_GLuint64EXT;
typedef void (*FUNC_void_GLuint_GLint64EXT_GLint64EXT_GLint64EXT_GLint64EXT)(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
typedef struct {
    GLuint a1;
    GLint64EXT a2;
    GLint64EXT a3;
    GLint64EXT a4;
    GLint64EXT a5;
} ARGS_void_GLuint_GLint64EXT_GLint64EXT_GLint64EXT_GLint64EXT;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint64EXT_GLint64EXT_GLint64EXT_GLint64EXT args;
} PACKED_void_GLuint_GLint64EXT_GLint64EXT_GLint64EXT_GLint64EXT;
typedef void (*FUNC_void_GLuint_GLuint64EXT_GLuint64EXT_GLuint64EXT_GLuint64EXT)(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
typedef struct {
    GLuint a1;
    GLuint64EXT a2;
    GLuint64EXT a3;
    GLuint64EXT a4;
    GLuint64EXT a5;
} ARGS_void_GLuint_GLuint64EXT_GLuint64EXT_GLuint64EXT_GLuint64EXT;
typedef struct {
    int index;
    ARGS_void_GLuint_GLuint64EXT_GLuint64EXT_GLuint64EXT_GLuint64EXT args;
} PACKED_void_GLuint_GLuint64EXT_GLuint64EXT_GLuint64EXT_GLuint64EXT;
typedef void (*FUNC_void_GLuint_GLenum_GLboolean_GLuint)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLboolean a3;
    GLuint a4;
} ARGS_void_GLuint_GLenum_GLboolean_GLuint;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLboolean_GLuint args;
} PACKED_void_GLuint_GLenum_GLboolean_GLuint;
typedef void (*FUNC_void_GLuint_GLenum_GLboolean_const_GLuint___GENPT__)(GLuint index, GLenum type, GLboolean normalized, const GLuint * value);
typedef struct {
    GLuint a1;
    GLenum a2;
    GLboolean a3;
    GLuint * a4;
} ARGS_void_GLuint_GLenum_GLboolean_const_GLuint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLenum_GLboolean_const_GLuint___GENPT__ args;
} PACKED_void_GLuint_GLenum_GLboolean_const_GLuint___GENPT__;
typedef void (*FUNC_void_GLuint_GLint_GLenum_GLboolean_GLsizei_const_GLvoid___GENPT__)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid * pointer);
typedef struct {
    GLuint a1;
    GLint a2;
    GLenum a3;
    GLboolean a4;
    GLsizei a5;
    GLvoid * a6;
} ARGS_void_GLuint_GLint_GLenum_GLboolean_GLsizei_const_GLvoid___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLint_GLenum_GLboolean_GLsizei_const_GLvoid___GENPT__ args;
} PACKED_void_GLuint_GLint_GLenum_GLboolean_GLsizei_const_GLvoid___GENPT__;
typedef void (*FUNC_void_GLuint_GLsizei_const_GLhalfNV___GENPT__)(GLuint index, GLsizei n, const GLhalfNV * v);
typedef struct {
    GLuint a1;
    GLsizei a2;
    GLhalfNV * a3;
} ARGS_void_GLuint_GLsizei_const_GLhalfNV___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLsizei_const_GLhalfNV___GENPT__ args;
} PACKED_void_GLuint_GLsizei_const_GLhalfNV___GENPT__;
typedef void (*FUNC_void_GLuint_GLsizei_const_GLshort___GENPT__)(GLuint index, GLsizei count, const GLshort * v);
typedef struct {
    GLuint a1;
    GLsizei a2;
    GLshort * a3;
} ARGS_void_GLuint_GLsizei_const_GLshort___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLsizei_const_GLshort___GENPT__ args;
} PACKED_void_GLuint_GLsizei_const_GLshort___GENPT__;
typedef void (*FUNC_void_GLuint_GLsizei_const_GLubyte___GENPT__)(GLuint index, GLsizei count, const GLubyte * v);
typedef struct {
    GLuint a1;
    GLsizei a2;
    GLubyte * a3;
} ARGS_void_GLuint_GLsizei_const_GLubyte___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLsizei_const_GLubyte___GENPT__ args;
} PACKED_void_GLuint_GLsizei_const_GLubyte___GENPT__;
typedef GLenum (*FUNC_GLenum_GLuint_GLuint___GENPT___GLuint64EXT___GENPT__)(GLuint video_capture_slot, GLuint * sequence_num, GLuint64EXT * capture_time);
typedef struct {
    GLuint a1;
    GLuint * a2;
    GLuint64EXT * a3;
} ARGS_GLenum_GLuint_GLuint___GENPT___GLuint64EXT___GENPT__;
typedef struct {
    int index;
    ARGS_GLenum_GLuint_GLuint___GENPT___GLuint64EXT___GENPT__ args;
} PACKED_GLenum_GLuint_GLuint___GENPT___GLuint64EXT___GENPT__;
typedef void (*FUNC_void_GLuint_GLuint_GLenum_const_GLdouble___GENPT__)(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble * params);
typedef struct {
    GLuint a1;
    GLuint a2;
    GLenum a3;
    GLdouble * a4;
} ARGS_void_GLuint_GLuint_GLenum_const_GLdouble___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLuint_GLenum_const_GLdouble___GENPT__ args;
} PACKED_void_GLuint_GLuint_GLenum_const_GLdouble___GENPT__;
typedef void (*FUNC_void_GLuint_GLuint_GLenum_const_GLint___GENPT__)(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint * params);
typedef struct {
    GLuint a1;
    GLuint a2;
    GLenum a3;
    GLint * a4;
} ARGS_void_GLuint_GLuint_GLenum_const_GLint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLuint_GLenum_const_GLint___GENPT__ args;
} PACKED_void_GLuint_GLuint_GLenum_const_GLint___GENPT__;
typedef void (*FUNC_void_GLsync_GLbitfield_GLuint64)(GLsync sync, GLbitfield flags, GLuint64 timeout);
typedef struct {
    GLsync a1;
    GLbitfield a2;
    GLuint64 a3;
} ARGS_void_GLsync_GLbitfield_GLuint64;
typedef struct {
    int index;
    ARGS_void_GLsync_GLbitfield_GLuint64 args;
} PACKED_void_GLsync_GLbitfield_GLuint64;
typedef void (*FUNC_void_GLuint_GLsizei_const_GLuint___GENPT___const_GLfloat___GENPT__)(GLuint resultPath, GLsizei numPaths, const GLuint * paths, const GLfloat * weights);
typedef struct {
    GLuint a1;
    GLsizei a2;
    GLuint * a3;
    GLfloat * a4;
} ARGS_void_GLuint_GLsizei_const_GLuint___GENPT___const_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLuint_GLsizei_const_GLuint___GENPT___const_GLfloat___GENPT__ args;
} PACKED_void_GLuint_GLsizei_const_GLuint___GENPT___const_GLfloat___GENPT__;
typedef void (*FUNC_void_GLint_const_GLbyte___GENPT__)(GLint size, const GLbyte * weights);
typedef struct {
    GLint a1;
    GLbyte * a2;
} ARGS_void_GLint_const_GLbyte___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLint_const_GLbyte___GENPT__ args;
} PACKED_void_GLint_const_GLbyte___GENPT__;
typedef void (*FUNC_void_GLint_const_GLdouble___GENPT__)(GLint size, const GLdouble * weights);
typedef struct {
    GLint a1;
    GLdouble * a2;
} ARGS_void_GLint_const_GLdouble___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLint_const_GLdouble___GENPT__ args;
} PACKED_void_GLint_const_GLdouble___GENPT__;
typedef void (*FUNC_void_GLint_const_GLfloat___GENPT__)(GLint size, const GLfloat * weights);
typedef struct {
    GLint a1;
    GLfloat * a2;
} ARGS_void_GLint_const_GLfloat___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLint_const_GLfloat___GENPT__ args;
} PACKED_void_GLint_const_GLfloat___GENPT__;
typedef void (*FUNC_void_GLint_const_GLint___GENPT__)(GLint size, const GLint * weights);
typedef struct {
    GLint a1;
    GLint * a2;
} ARGS_void_GLint_const_GLint___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLint_const_GLint___GENPT__ args;
} PACKED_void_GLint_const_GLint___GENPT__;
typedef void (*FUNC_void_GLint_const_GLshort___GENPT__)(GLint size, const GLshort * weights);
typedef struct {
    GLint a1;
    GLshort * a2;
} ARGS_void_GLint_const_GLshort___GENPT__;
typedef struct {
    int index;
    ARGS_void_GLint_const_GLshort___GENPT__ args;
} PACKED_void_GLint_const_GLshort___GENPT__;
typedef void (*FUNC_void_GLenum_GLclampx)(GLenum func, GLclampx ref);
typedef struct {
    GLenum a1;
    GLclampx a2;
} ARGS_void_GLenum_GLclampx;
typedef struct {
    int index;
    ARGS_void_GLenum_GLclampx args;
} PACKED_void_GLenum_GLclampx;
typedef void (*FUNC_void_GLclampf_GLclampf_GLclampf_GLclampf)(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
typedef struct {
    GLclampf a1;
    GLclampf a2;
    GLclampf a3;
    GLclampf a4;
} ARGS_void_GLclampf_GLclampf_GLclampf_GLclampf;
typedef struct {
    int index;
    ARGS_void_GLclampf_GLclampf_GLclampf_GLclampf args;
} PACKED_void_GLclampf_GLclampf_GLclampf_GLclampf;
typedef void (*FUNC_void_GLclampx_GLclampx_GLclampx_GLclampx)(GLclampx red, GLclampx green, GLclampx blue, GLclampx alpha);
typedef struct {
    GLclampx a1;
    GLclampx a2;
    GLclampx a3;
    GLclampx a4;
} ARGS_void_GLclampx_GLclampx_GLclampx_GLclampx;
typedef struct {
    int index;
    ARGS_void_GLclampx_GLclampx_GLclampx_GLclampx args;
} PACKED_void_GLclampx_GLclampx_GLclampx_GLclampx;
typedef void (*FUNC_void_GLclampx)(GLclampx depth);
typedef struct {
    GLclampx a1;
} ARGS_void_GLclampx;
typedef struct {
    int index;
    ARGS_void_GLclampx args;
} PACKED_void_GLclampx;
typedef void (*FUNC_void_GLclampx_GLclampx)(GLclampx near, GLclampx far);
typedef struct {
    GLclampx a1;
    GLclampx a2;
} ARGS_void_GLclampx_GLclampx;
typedef struct {
    int index;
    ARGS_void_GLclampx_GLclampx args;
} PACKED_void_GLclampx_GLclampx;
typedef void (*FUNC_void_GLclampx_GLboolean)(GLclampx value, GLboolean invert);
typedef struct {
    GLclampx a1;
    GLboolean a2;
} ARGS_void_GLclampx_GLboolean;
typedef struct {
    int index;
    ARGS_void_GLclampx_GLboolean args;
} PACKED_void_GLclampx_GLboolean;
typedef EGLBoolean (*FUNC_EGLBoolean_EGLenum)(EGLenum api);
typedef struct {
    EGLenum a1;
} ARGS_EGLBoolean_EGLenum;
typedef struct {
    int index;
    ARGS_EGLBoolean_EGLenum args;
} PACKED_EGLBoolean_EGLenum;
typedef EGLBoolean (*FUNC_EGLBoolean_EGLDisplay_EGLSurface_EGLint)(EGLDisplay dpy, EGLSurface surface, EGLint buffer);
typedef struct {
    EGLDisplay a1;
    EGLSurface a2;
    EGLint a3;
} ARGS_EGLBoolean_EGLDisplay_EGLSurface_EGLint;
typedef struct {
    int index;
    ARGS_EGLBoolean_EGLDisplay_EGLSurface_EGLint args;
} PACKED_EGLBoolean_EGLDisplay_EGLSurface_EGLint;
typedef EGLBoolean (*FUNC_EGLBoolean_EGLDisplay_const_EGLint___GENPT___EGLConfig___GENPT___EGLint_EGLint___GENPT__)(EGLDisplay dpy, const EGLint * attrib_list, EGLConfig * configs, EGLint config_size, EGLint * num_config);
typedef struct {
    EGLDisplay a1;
    EGLint * a2;
    EGLConfig * a3;
    EGLint a4;
    EGLint * a5;
} ARGS_EGLBoolean_EGLDisplay_const_EGLint___GENPT___EGLConfig___GENPT___EGLint_EGLint___GENPT__;
typedef struct {
    int index;
    ARGS_EGLBoolean_EGLDisplay_const_EGLint___GENPT___EGLConfig___GENPT___EGLint_EGLint___GENPT__ args;
} PACKED_EGLBoolean_EGLDisplay_const_EGLint___GENPT___EGLConfig___GENPT___EGLint_EGLint___GENPT__;
typedef EGLint (*FUNC_EGLint_EGLDisplay_EGLSyncKHR_EGLint_EGLTimeKHR)(EGLDisplay dpy, EGLSyncKHR sync, EGLint flags, EGLTimeKHR timeout);
typedef struct {
    EGLDisplay a1;
    EGLSyncKHR a2;
    EGLint a3;
    EGLTimeKHR a4;
} ARGS_EGLint_EGLDisplay_EGLSyncKHR_EGLint_EGLTimeKHR;
typedef struct {
    int index;
    ARGS_EGLint_EGLDisplay_EGLSyncKHR_EGLint_EGLTimeKHR args;
} PACKED_EGLint_EGLDisplay_EGLSyncKHR_EGLint_EGLTimeKHR;
typedef EGLint (*FUNC_EGLint_EGLSyncNV_EGLint_EGLTimeNV)(EGLSyncNV sync, EGLint flags, EGLTimeNV timeout);
typedef struct {
    EGLSyncNV a1;
    EGLint a2;
    EGLTimeNV a3;
} ARGS_EGLint_EGLSyncNV_EGLint_EGLTimeNV;
typedef struct {
    int index;
    ARGS_EGLint_EGLSyncNV_EGLint_EGLTimeNV args;
} PACKED_EGLint_EGLSyncNV_EGLint_EGLTimeNV;
typedef EGLBoolean (*FUNC_EGLBoolean_EGLDisplay_EGLSurface_EGLNativePixmapType)(EGLDisplay dpy, EGLSurface surface, EGLNativePixmapType target);
typedef struct {
    EGLDisplay a1;
    EGLSurface a2;
    EGLNativePixmapType a3;
} ARGS_EGLBoolean_EGLDisplay_EGLSurface_EGLNativePixmapType;
typedef struct {
    int index;
    ARGS_EGLBoolean_EGLDisplay_EGLSurface_EGLNativePixmapType args;
} PACKED_EGLBoolean_EGLDisplay_EGLSurface_EGLNativePixmapType;
typedef EGLContext (*FUNC_EGLContext_EGLDisplay_EGLConfig_EGLContext_const_EGLint___GENPT__)(EGLDisplay dpy, EGLConfig config, EGLContext share_context, const EGLint * attrib_list);
typedef struct {
    EGLDisplay a1;
    EGLConfig a2;
    EGLContext a3;
    EGLint * a4;
} ARGS_EGLContext_EGLDisplay_EGLConfig_EGLContext_const_EGLint___GENPT__;
typedef struct {
    int index;
    ARGS_EGLContext_EGLDisplay_EGLConfig_EGLContext_const_EGLint___GENPT__ args;
} PACKED_EGLContext_EGLDisplay_EGLConfig_EGLContext_const_EGLint___GENPT__;
typedef EGLImageKHR (*FUNC_EGLImageKHR_EGLDisplay_const_EGLint___GENPT__)(EGLDisplay dpy, const EGLint * attrib_list);
typedef struct {
    EGLDisplay a1;
    EGLint * a2;
} ARGS_EGLImageKHR_EGLDisplay_const_EGLint___GENPT__;
typedef struct {
    int index;
    ARGS_EGLImageKHR_EGLDisplay_const_EGLint___GENPT__ args;
} PACKED_EGLImageKHR_EGLDisplay_const_EGLint___GENPT__;
typedef EGLSyncNV (*FUNC_EGLSyncNV_EGLDisplay_EGLenum_const_EGLint___GENPT__)(EGLDisplay dpy, EGLenum condition, const EGLint * attrib_list);
typedef struct {
    EGLDisplay a1;
    EGLenum a2;
    EGLint * a3;
} ARGS_EGLSyncNV_EGLDisplay_EGLenum_const_EGLint___GENPT__;
typedef struct {
    int index;
    ARGS_EGLSyncNV_EGLDisplay_EGLenum_const_EGLint___GENPT__ args;
} PACKED_EGLSyncNV_EGLDisplay_EGLenum_const_EGLint___GENPT__;
typedef EGLImageKHR (*FUNC_EGLImageKHR_EGLDisplay_EGLContext_EGLenum_EGLClientBuffer_const_EGLint___GENPT__)(EGLDisplay dpy, EGLContext ctx, EGLenum target, EGLClientBuffer buffer, const EGLint * attrib_list);
typedef struct {
    EGLDisplay a1;
    EGLContext a2;
    EGLenum a3;
    EGLClientBuffer a4;
    EGLint * a5;
} ARGS_EGLImageKHR_EGLDisplay_EGLContext_EGLenum_EGLClientBuffer_const_EGLint___GENPT__;
typedef struct {
    int index;
    ARGS_EGLImageKHR_EGLDisplay_EGLContext_EGLenum_EGLClientBuffer_const_EGLint___GENPT__ args;
} PACKED_EGLImageKHR_EGLDisplay_EGLContext_EGLenum_EGLClientBuffer_const_EGLint___GENPT__;
typedef EGLSurface (*FUNC_EGLSurface_EGLDisplay_EGLenum_EGLClientBuffer_EGLConfig_const_EGLint___GENPT__)(EGLDisplay dpy, EGLenum buftype, EGLClientBuffer buffer, EGLConfig config, const EGLint * attrib_list);
typedef struct {
    EGLDisplay a1;
    EGLenum a2;
    EGLClientBuffer a3;
    EGLConfig a4;
    EGLint * a5;
} ARGS_EGLSurface_EGLDisplay_EGLenum_EGLClientBuffer_EGLConfig_const_EGLint___GENPT__;
typedef struct {
    int index;
    ARGS_EGLSurface_EGLDisplay_EGLenum_EGLClientBuffer_EGLConfig_const_EGLint___GENPT__ args;
} PACKED_EGLSurface_EGLDisplay_EGLenum_EGLClientBuffer_EGLConfig_const_EGLint___GENPT__;
typedef EGLSurface (*FUNC_EGLSurface_EGLDisplay_EGLConfig_const_EGLint___GENPT__)(EGLDisplay dpy, EGLConfig config, const EGLint * attrib_list);
typedef struct {
    EGLDisplay a1;
    EGLConfig a2;
    EGLint * a3;
} ARGS_EGLSurface_EGLDisplay_EGLConfig_const_EGLint___GENPT__;
typedef struct {
    int index;
    ARGS_EGLSurface_EGLDisplay_EGLConfig_const_EGLint___GENPT__ args;
} PACKED_EGLSurface_EGLDisplay_EGLConfig_const_EGLint___GENPT__;
typedef EGLSurface (*FUNC_EGLSurface_EGLDisplay_EGLConfig_EGLNativePixmapType_const_EGLint___GENPT__)(EGLDisplay dpy, EGLConfig config, EGLNativePixmapType pixmap, const EGLint * attrib_list);
typedef struct {
    EGLDisplay a1;
    EGLConfig a2;
    EGLNativePixmapType a3;
    EGLint * a4;
} ARGS_EGLSurface_EGLDisplay_EGLConfig_EGLNativePixmapType_const_EGLint___GENPT__;
typedef struct {
    int index;
    ARGS_EGLSurface_EGLDisplay_EGLConfig_EGLNativePixmapType_const_EGLint___GENPT__ args;
} PACKED_EGLSurface_EGLDisplay_EGLConfig_EGLNativePixmapType_const_EGLint___GENPT__;
typedef EGLSurface (*FUNC_EGLSurface_EGLDisplay_EGLConfig_struct_EGLClientPixmapHI___GENPT__)(EGLDisplay dpy, EGLConfig config, struct EGLClientPixmapHI * pixmap);
typedef struct {
    EGLDisplay a1;
    EGLConfig a2;
    struct EGLClientPixmapHI * a3;
} ARGS_EGLSurface_EGLDisplay_EGLConfig_struct_EGLClientPixmapHI___GENPT__;
typedef struct {
    int index;
    ARGS_EGLSurface_EGLDisplay_EGLConfig_struct_EGLClientPixmapHI___GENPT__ args;
} PACKED_EGLSurface_EGLDisplay_EGLConfig_struct_EGLClientPixmapHI___GENPT__;
typedef EGLStreamKHR (*FUNC_EGLStreamKHR_EGLDisplay_EGLNativeFileDescriptorKHR)(EGLDisplay dpy, EGLNativeFileDescriptorKHR file_descriptor);
typedef struct {
    EGLDisplay a1;
    EGLNativeFileDescriptorKHR a2;
} ARGS_EGLStreamKHR_EGLDisplay_EGLNativeFileDescriptorKHR;
typedef struct {
    int index;
    ARGS_EGLStreamKHR_EGLDisplay_EGLNativeFileDescriptorKHR args;
} PACKED_EGLStreamKHR_EGLDisplay_EGLNativeFileDescriptorKHR;
typedef EGLStreamKHR (*FUNC_EGLStreamKHR_EGLDisplay_const_EGLint___GENPT__)(EGLDisplay dpy, const EGLint * attrib_list);
typedef struct {
    EGLDisplay a1;
    EGLint * a2;
} ARGS_EGLStreamKHR_EGLDisplay_const_EGLint___GENPT__;
typedef struct {
    int index;
    ARGS_EGLStreamKHR_EGLDisplay_const_EGLint___GENPT__ args;
} PACKED_EGLStreamKHR_EGLDisplay_const_EGLint___GENPT__;
typedef EGLSurface (*FUNC_EGLSurface_EGLDisplay_EGLConfig_EGLStreamKHR_const_EGLint___GENPT__)(EGLDisplay dpy, EGLConfig config, EGLStreamKHR stream, const EGLint * attrib_list);
typedef struct {
    EGLDisplay a1;
    EGLConfig a2;
    EGLStreamKHR a3;
    EGLint * a4;
} ARGS_EGLSurface_EGLDisplay_EGLConfig_EGLStreamKHR_const_EGLint___GENPT__;
typedef struct {
    int index;
    ARGS_EGLSurface_EGLDisplay_EGLConfig_EGLStreamKHR_const_EGLint___GENPT__ args;
} PACKED_EGLSurface_EGLDisplay_EGLConfig_EGLStreamKHR_const_EGLint___GENPT__;
typedef EGLSyncKHR (*FUNC_EGLSyncKHR_EGLDisplay_EGLenum_const_EGLint___GENPT__)(EGLDisplay dpy, EGLenum type, const EGLint * attrib_list);
typedef struct {
    EGLDisplay a1;
    EGLenum a2;
    EGLint * a3;
} ARGS_EGLSyncKHR_EGLDisplay_EGLenum_const_EGLint___GENPT__;
typedef struct {
    int index;
    ARGS_EGLSyncKHR_EGLDisplay_EGLenum_const_EGLint___GENPT__ args;
} PACKED_EGLSyncKHR_EGLDisplay_EGLenum_const_EGLint___GENPT__;
typedef EGLSurface (*FUNC_EGLSurface_EGLDisplay_EGLConfig_EGLNativeWindowType_const_EGLint___GENPT__)(EGLDisplay dpy, EGLConfig config, EGLNativeWindowType win, const EGLint * attrib_list);
typedef struct {
    EGLDisplay a1;
    EGLConfig a2;
    EGLNativeWindowType a3;
    EGLint * a4;
} ARGS_EGLSurface_EGLDisplay_EGLConfig_EGLNativeWindowType_const_EGLint___GENPT__;
typedef struct {
    int index;
    ARGS_EGLSurface_EGLDisplay_EGLConfig_EGLNativeWindowType_const_EGLint___GENPT__ args;
} PACKED_EGLSurface_EGLDisplay_EGLConfig_EGLNativeWindowType_const_EGLint___GENPT__;
typedef EGLBoolean (*FUNC_EGLBoolean_EGLDisplay_EGLContext)(EGLDisplay dpy, EGLContext ctx);
typedef struct {
    EGLDisplay a1;
    EGLContext a2;
} ARGS_EGLBoolean_EGLDisplay_EGLContext;
typedef struct {
    int index;
    ARGS_EGLBoolean_EGLDisplay_EGLContext args;
} PACKED_EGLBoolean_EGLDisplay_EGLContext;
typedef EGLBoolean (*FUNC_EGLBoolean_EGLDisplay_EGLImageKHR)(EGLDisplay dpy, EGLImageKHR image);
typedef struct {
    EGLDisplay a1;
    EGLImageKHR a2;
} ARGS_EGLBoolean_EGLDisplay_EGLImageKHR;
typedef struct {
    int index;
    ARGS_EGLBoolean_EGLDisplay_EGLImageKHR args;
} PACKED_EGLBoolean_EGLDisplay_EGLImageKHR;
typedef EGLBoolean (*FUNC_EGLBoolean_EGLDisplay_EGLStreamKHR)(EGLDisplay dpy, EGLStreamKHR stream);
typedef struct {
    EGLDisplay a1;
    EGLStreamKHR a2;
} ARGS_EGLBoolean_EGLDisplay_EGLStreamKHR;
typedef struct {
    int index;
    ARGS_EGLBoolean_EGLDisplay_EGLStreamKHR args;
} PACKED_EGLBoolean_EGLDisplay_EGLStreamKHR;
typedef EGLBoolean (*FUNC_EGLBoolean_EGLDisplay_EGLSurface)(EGLDisplay dpy, EGLSurface surface);
typedef struct {
    EGLDisplay a1;
    EGLSurface a2;
} ARGS_EGLBoolean_EGLDisplay_EGLSurface;
typedef struct {
    int index;
    ARGS_EGLBoolean_EGLDisplay_EGLSurface args;
} PACKED_EGLBoolean_EGLDisplay_EGLSurface;
typedef EGLBoolean (*FUNC_EGLBoolean_EGLDisplay_EGLSyncKHR)(EGLDisplay dpy, EGLSyncKHR sync);
typedef struct {
    EGLDisplay a1;
    EGLSyncKHR a2;
} ARGS_EGLBoolean_EGLDisplay_EGLSyncKHR;
typedef struct {
    int index;
    ARGS_EGLBoolean_EGLDisplay_EGLSyncKHR args;
} PACKED_EGLBoolean_EGLDisplay_EGLSyncKHR;
typedef EGLBoolean (*FUNC_EGLBoolean_EGLSyncNV)(EGLSyncNV sync);
typedef struct {
    EGLSyncNV a1;
} ARGS_EGLBoolean_EGLSyncNV;
typedef struct {
    int index;
    ARGS_EGLBoolean_EGLSyncNV args;
} PACKED_EGLBoolean_EGLSyncNV;
typedef EGLint (*FUNC_EGLint_EGLDisplay_EGLSyncKHR)(EGLDisplay dpy, EGLSyncKHR sync);
typedef struct {
    EGLDisplay a1;
    EGLSyncKHR a2;
} ARGS_EGLint_EGLDisplay_EGLSyncKHR;
typedef struct {
    int index;
    ARGS_EGLint_EGLDisplay_EGLSyncKHR args;
} PACKED_EGLint_EGLDisplay_EGLSyncKHR;
typedef EGLBoolean (*FUNC_EGLBoolean_EGLDisplay_EGLImageKHR_EGLint___GENPT___EGLint___GENPT___EGLint___GENPT__)(EGLDisplay dpy, EGLImageKHR image, EGLint * name, EGLint * handle, EGLint * stride);
typedef struct {
    EGLDisplay a1;
    EGLImageKHR a2;
    EGLint * a3;
    EGLint * a4;
    EGLint * a5;
} ARGS_EGLBoolean_EGLDisplay_EGLImageKHR_EGLint___GENPT___EGLint___GENPT___EGLint___GENPT__;
typedef struct {
    int index;
    ARGS_EGLBoolean_EGLDisplay_EGLImageKHR_EGLint___GENPT___EGLint___GENPT___EGLint___GENPT__ args;
} PACKED_EGLBoolean_EGLDisplay_EGLImageKHR_EGLint___GENPT___EGLint___GENPT___EGLint___GENPT__;
typedef EGLBoolean (*FUNC_EGLBoolean_EGLDisplay_EGLConfig_EGLint_EGLint___GENPT__)(EGLDisplay dpy, EGLConfig config, EGLint attribute, EGLint * value);
typedef struct {
    EGLDisplay a1;
    EGLConfig a2;
    EGLint a3;
    EGLint * a4;
} ARGS_EGLBoolean_EGLDisplay_EGLConfig_EGLint_EGLint___GENPT__;
typedef struct {
    int index;
    ARGS_EGLBoolean_EGLDisplay_EGLConfig_EGLint_EGLint___GENPT__ args;
} PACKED_EGLBoolean_EGLDisplay_EGLConfig_EGLint_EGLint___GENPT__;
typedef EGLBoolean (*FUNC_EGLBoolean_EGLDisplay_EGLConfig___GENPT___EGLint_EGLint___GENPT__)(EGLDisplay dpy, EGLConfig * configs, EGLint config_size, EGLint * num_config);
typedef struct {
    EGLDisplay a1;
    EGLConfig * a2;
    EGLint a3;
    EGLint * a4;
} ARGS_EGLBoolean_EGLDisplay_EGLConfig___GENPT___EGLint_EGLint___GENPT__;
typedef struct {
    int index;
    ARGS_EGLBoolean_EGLDisplay_EGLConfig___GENPT___EGLint_EGLint___GENPT__ args;
} PACKED_EGLBoolean_EGLDisplay_EGLConfig___GENPT___EGLint_EGLint___GENPT__;
typedef EGLContext (*FUNC_EGLContext)();
typedef struct {
    int index;
} PACKED_EGLContext;
typedef EGLDisplay (*FUNC_EGLDisplay)();
typedef struct {
    int index;
} PACKED_EGLDisplay;
typedef EGLSurface (*FUNC_EGLSurface_EGLint)(EGLint readdraw);
typedef struct {
    EGLint a1;
} ARGS_EGLSurface_EGLint;
typedef struct {
    int index;
    ARGS_EGLSurface_EGLint args;
} PACKED_EGLSurface_EGLint;
typedef EGLDisplay (*FUNC_EGLDisplay_EGLNativeDisplayType)(EGLNativeDisplayType display_id);
typedef struct {
    EGLNativeDisplayType a1;
} ARGS_EGLDisplay_EGLNativeDisplayType;
typedef struct {
    int index;
    ARGS_EGLDisplay_EGLNativeDisplayType args;
} PACKED_EGLDisplay_EGLNativeDisplayType;
typedef EGLint (*FUNC_EGLint)();
typedef struct {
    int index;
} PACKED_EGLint;
typedef __eglMustCastToProperFunctionPointerType (*FUNC___eglMustCastToProperFunctionPointerType_const_char___GENPT__)(const char * procname);
typedef struct {
    char * a1;
} ARGS___eglMustCastToProperFunctionPointerType_const_char___GENPT__;
typedef struct {
    int index;
    ARGS___eglMustCastToProperFunctionPointerType_const_char___GENPT__ args;
} PACKED___eglMustCastToProperFunctionPointerType_const_char___GENPT__;
typedef EGLNativeFileDescriptorKHR (*FUNC_EGLNativeFileDescriptorKHR_EGLDisplay_EGLStreamKHR)(EGLDisplay dpy, EGLStreamKHR stream);
typedef struct {
    EGLDisplay a1;
    EGLStreamKHR a2;
} ARGS_EGLNativeFileDescriptorKHR_EGLDisplay_EGLStreamKHR;
typedef struct {
    int index;
    ARGS_EGLNativeFileDescriptorKHR_EGLDisplay_EGLStreamKHR args;
} PACKED_EGLNativeFileDescriptorKHR_EGLDisplay_EGLStreamKHR;
typedef EGLBoolean (*FUNC_EGLBoolean_EGLDisplay_EGLSyncKHR_EGLint_EGLint___GENPT__)(EGLDisplay dpy, EGLSyncKHR sync, EGLint attribute, EGLint * value);
typedef struct {
    EGLDisplay a1;
    EGLSyncKHR a2;
    EGLint a3;
    EGLint * a4;
} ARGS_EGLBoolean_EGLDisplay_EGLSyncKHR_EGLint_EGLint___GENPT__;
typedef struct {
    int index;
    ARGS_EGLBoolean_EGLDisplay_EGLSyncKHR_EGLint_EGLint___GENPT__ args;
} PACKED_EGLBoolean_EGLDisplay_EGLSyncKHR_EGLint_EGLint___GENPT__;
typedef EGLBoolean (*FUNC_EGLBoolean_EGLSyncNV_EGLint_EGLint___GENPT__)(EGLSyncNV sync, EGLint attribute, EGLint * value);
typedef struct {
    EGLSyncNV a1;
    EGLint a2;
    EGLint * a3;
} ARGS_EGLBoolean_EGLSyncNV_EGLint_EGLint___GENPT__;
typedef struct {
    int index;
    ARGS_EGLBoolean_EGLSyncNV_EGLint_EGLint___GENPT__ args;
} PACKED_EGLBoolean_EGLSyncNV_EGLint_EGLint___GENPT__;
typedef EGLuint64NV (*FUNC_EGLuint64NV)();
typedef struct {
    int index;
} PACKED_EGLuint64NV;
typedef EGLBoolean (*FUNC_EGLBoolean_EGLDisplay_EGLint___GENPT___EGLint___GENPT__)(EGLDisplay dpy, EGLint * major, EGLint * minor);
typedef struct {
    EGLDisplay a1;
    EGLint * a2;
    EGLint * a3;
} ARGS_EGLBoolean_EGLDisplay_EGLint___GENPT___EGLint___GENPT__;
typedef struct {
    int index;
    ARGS_EGLBoolean_EGLDisplay_EGLint___GENPT___EGLint___GENPT__ args;
} PACKED_EGLBoolean_EGLDisplay_EGLint___GENPT___EGLint___GENPT__;
typedef EGLBoolean (*FUNC_EGLBoolean_EGLDisplay_EGLSurface_const_EGLint___GENPT__)(EGLDisplay display, EGLSurface surface, const EGLint * attrib_list);
typedef struct {
    EGLDisplay a1;
    EGLSurface a2;
    EGLint * a3;
} ARGS_EGLBoolean_EGLDisplay_EGLSurface_const_EGLint___GENPT__;
typedef struct {
    int index;
    ARGS_EGLBoolean_EGLDisplay_EGLSurface_const_EGLint___GENPT__ args;
} PACKED_EGLBoolean_EGLDisplay_EGLSurface_const_EGLint___GENPT__;
typedef EGLBoolean (*FUNC_EGLBoolean_EGLDisplay_EGLSurface_EGLSurface_EGLContext)(EGLDisplay dpy, EGLSurface draw, EGLSurface read, EGLContext ctx);
typedef struct {
    EGLDisplay a1;
    EGLSurface a2;
    EGLSurface a3;
    EGLContext a4;
} ARGS_EGLBoolean_EGLDisplay_EGLSurface_EGLSurface_EGLContext;
typedef struct {
    int index;
    ARGS_EGLBoolean_EGLDisplay_EGLSurface_EGLSurface_EGLContext args;
} PACKED_EGLBoolean_EGLDisplay_EGLSurface_EGLSurface_EGLContext;
typedef EGLBoolean (*FUNC_EGLBoolean_EGLDisplay_EGLSurface_EGLint_EGLint_EGLint_EGLint)(EGLDisplay dpy, EGLSurface surface, EGLint x, EGLint y, EGLint width, EGLint height);
typedef struct {
    EGLDisplay a1;
    EGLSurface a2;
    EGLint a3;
    EGLint a4;
    EGLint a5;
    EGLint a6;
} ARGS_EGLBoolean_EGLDisplay_EGLSurface_EGLint_EGLint_EGLint_EGLint;
typedef struct {
    int index;
    ARGS_EGLBoolean_EGLDisplay_EGLSurface_EGLint_EGLint_EGLint_EGLint args;
} PACKED_EGLBoolean_EGLDisplay_EGLSurface_EGLint_EGLint_EGLint_EGLint;
typedef EGLenum (*FUNC_EGLenum)();
typedef struct {
    int index;
} PACKED_EGLenum;
typedef EGLBoolean (*FUNC_EGLBoolean_EGLDisplay_EGLContext_EGLint_EGLint___GENPT__)(EGLDisplay dpy, EGLContext ctx, EGLint attribute, EGLint * value);
typedef struct {
    EGLDisplay a1;
    EGLContext a2;
    EGLint a3;
    EGLint * a4;
} ARGS_EGLBoolean_EGLDisplay_EGLContext_EGLint_EGLint___GENPT__;
typedef struct {
    int index;
    ARGS_EGLBoolean_EGLDisplay_EGLContext_EGLint_EGLint___GENPT__ args;
} PACKED_EGLBoolean_EGLDisplay_EGLContext_EGLint_EGLint___GENPT__;
typedef EGLBoolean (*FUNC_EGLBoolean_EGLDisplay_EGLNativeDisplayType___GENPT__)(EGLDisplay dpy, EGLNativeDisplayType * display_id);
typedef struct {
    EGLDisplay a1;
    EGLNativeDisplayType * a2;
} ARGS_EGLBoolean_EGLDisplay_EGLNativeDisplayType___GENPT__;
typedef struct {
    int index;
    ARGS_EGLBoolean_EGLDisplay_EGLNativeDisplayType___GENPT__ args;
} PACKED_EGLBoolean_EGLDisplay_EGLNativeDisplayType___GENPT__;
typedef EGLBoolean (*FUNC_EGLBoolean_EGLDisplay_EGLSurface_EGLNativePixmapType___GENPT__)(EGLDisplay dpy, EGLSurface surf, EGLNativePixmapType * pixmap);
typedef struct {
    EGLDisplay a1;
    EGLSurface a2;
    EGLNativePixmapType * a3;
} ARGS_EGLBoolean_EGLDisplay_EGLSurface_EGLNativePixmapType___GENPT__;
typedef struct {
    int index;
    ARGS_EGLBoolean_EGLDisplay_EGLSurface_EGLNativePixmapType___GENPT__ args;
} PACKED_EGLBoolean_EGLDisplay_EGLSurface_EGLNativePixmapType___GENPT__;
typedef EGLBoolean (*FUNC_EGLBoolean_EGLDisplay_EGLSurface_EGLNativeWindowType___GENPT__)(EGLDisplay dpy, EGLSurface surf, EGLNativeWindowType * window);
typedef struct {
    EGLDisplay a1;
    EGLSurface a2;
    EGLNativeWindowType * a3;
} ARGS_EGLBoolean_EGLDisplay_EGLSurface_EGLNativeWindowType___GENPT__;
typedef struct {
    int index;
    ARGS_EGLBoolean_EGLDisplay_EGLSurface_EGLNativeWindowType___GENPT__ args;
} PACKED_EGLBoolean_EGLDisplay_EGLSurface_EGLNativeWindowType___GENPT__;
typedef EGLBoolean (*FUNC_EGLBoolean_EGLDisplay_EGLStreamKHR_EGLenum_EGLint___GENPT__)(EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLint * value);
typedef struct {
    EGLDisplay a1;
    EGLStreamKHR a2;
    EGLenum a3;
    EGLint * a4;
} ARGS_EGLBoolean_EGLDisplay_EGLStreamKHR_EGLenum_EGLint___GENPT__;
typedef struct {
    int index;
    ARGS_EGLBoolean_EGLDisplay_EGLStreamKHR_EGLenum_EGLint___GENPT__ args;
} PACKED_EGLBoolean_EGLDisplay_EGLStreamKHR_EGLenum_EGLint___GENPT__;
typedef EGLBoolean (*FUNC_EGLBoolean_EGLDisplay_EGLStreamKHR_EGLenum_EGLTimeKHR___GENPT__)(EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLTimeKHR * value);
typedef struct {
    EGLDisplay a1;
    EGLStreamKHR a2;
    EGLenum a3;
    EGLTimeKHR * a4;
} ARGS_EGLBoolean_EGLDisplay_EGLStreamKHR_EGLenum_EGLTimeKHR___GENPT__;
typedef struct {
    int index;
    ARGS_EGLBoolean_EGLDisplay_EGLStreamKHR_EGLenum_EGLTimeKHR___GENPT__ args;
} PACKED_EGLBoolean_EGLDisplay_EGLStreamKHR_EGLenum_EGLTimeKHR___GENPT__;
typedef EGLBoolean (*FUNC_EGLBoolean_EGLDisplay_EGLStreamKHR_EGLenum_EGLuint64KHR___GENPT__)(EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLuint64KHR * value);
typedef struct {
    EGLDisplay a1;
    EGLStreamKHR a2;
    EGLenum a3;
    EGLuint64KHR * a4;
} ARGS_EGLBoolean_EGLDisplay_EGLStreamKHR_EGLenum_EGLuint64KHR___GENPT__;
typedef struct {
    int index;
    ARGS_EGLBoolean_EGLDisplay_EGLStreamKHR_EGLenum_EGLuint64KHR___GENPT__ args;
} PACKED_EGLBoolean_EGLDisplay_EGLStreamKHR_EGLenum_EGLuint64KHR___GENPT__;
typedef const char * (*FUNC_const_char___GENPT___EGLDisplay_EGLint)(EGLDisplay dpy, EGLint name);
typedef struct {
    EGLDisplay a1;
    EGLint a2;
} ARGS_const_char___GENPT___EGLDisplay_EGLint;
typedef struct {
    int index;
    ARGS_const_char___GENPT___EGLDisplay_EGLint args;
} PACKED_const_char___GENPT___EGLDisplay_EGLint;
typedef EGLBoolean (*FUNC_EGLBoolean_EGLDisplay_EGLSurface_EGLint_EGLint___GENPT__)(EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint * value);
typedef struct {
    EGLDisplay a1;
    EGLSurface a2;
    EGLint a3;
    EGLint * a4;
} ARGS_EGLBoolean_EGLDisplay_EGLSurface_EGLint_EGLint___GENPT__;
typedef struct {
    int index;
    ARGS_EGLBoolean_EGLDisplay_EGLSurface_EGLint_EGLint___GENPT__ args;
} PACKED_EGLBoolean_EGLDisplay_EGLSurface_EGLint_EGLint___GENPT__;
typedef EGLBoolean (*FUNC_EGLBoolean_EGLDisplay_EGLSurface_EGLint_void___GENPT____GENPT__)(EGLDisplay dpy, EGLSurface surface, EGLint attribute, void ** value);
typedef struct {
    EGLDisplay a1;
    EGLSurface a2;
    EGLint a3;
    void ** a4;
} ARGS_EGLBoolean_EGLDisplay_EGLSurface_EGLint_void___GENPT____GENPT__;
typedef struct {
    int index;
    ARGS_EGLBoolean_EGLDisplay_EGLSurface_EGLint_void___GENPT____GENPT__ args;
} PACKED_EGLBoolean_EGLDisplay_EGLSurface_EGLint_void___GENPT____GENPT__;
typedef EGLBoolean (*FUNC_EGLBoolean)();
typedef struct {
    int index;
} PACKED_EGLBoolean;
typedef EGLBoolean (*FUNC_EGLBoolean_EGLDisplay_EGLSyncKHR_EGLenum)(EGLDisplay dpy, EGLSyncKHR sync, EGLenum mode);
typedef struct {
    EGLDisplay a1;
    EGLSyncKHR a2;
    EGLenum a3;
} ARGS_EGLBoolean_EGLDisplay_EGLSyncKHR_EGLenum;
typedef struct {
    int index;
    ARGS_EGLBoolean_EGLDisplay_EGLSyncKHR_EGLenum args;
} PACKED_EGLBoolean_EGLDisplay_EGLSyncKHR_EGLenum;
typedef EGLBoolean (*FUNC_EGLBoolean_EGLSyncNV_EGLenum)(EGLSyncNV sync, EGLenum mode);
typedef struct {
    EGLSyncNV a1;
    EGLenum a2;
} ARGS_EGLBoolean_EGLSyncNV_EGLenum;
typedef struct {
    int index;
    ARGS_EGLBoolean_EGLSyncNV_EGLenum args;
} PACKED_EGLBoolean_EGLSyncNV_EGLenum;
typedef EGLBoolean (*FUNC_EGLBoolean_EGLDisplay_EGLStreamKHR_EGLenum_EGLint)(EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLint value);
typedef struct {
    EGLDisplay a1;
    EGLStreamKHR a2;
    EGLenum a3;
    EGLint a4;
} ARGS_EGLBoolean_EGLDisplay_EGLStreamKHR_EGLenum_EGLint;
typedef struct {
    int index;
    ARGS_EGLBoolean_EGLDisplay_EGLStreamKHR_EGLenum_EGLint args;
} PACKED_EGLBoolean_EGLDisplay_EGLStreamKHR_EGLenum_EGLint;
typedef EGLBoolean (*FUNC_EGLBoolean_EGLDisplay_EGLSurface_EGLint_EGLint)(EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint value);
typedef struct {
    EGLDisplay a1;
    EGLSurface a2;
    EGLint a3;
    EGLint a4;
} ARGS_EGLBoolean_EGLDisplay_EGLSurface_EGLint_EGLint;
typedef struct {
    int index;
    ARGS_EGLBoolean_EGLDisplay_EGLSurface_EGLint_EGLint args;
} PACKED_EGLBoolean_EGLDisplay_EGLSurface_EGLint_EGLint;
typedef EGLBoolean (*FUNC_EGLBoolean_EGLDisplay_EGLSurface_EGLint___GENPT___EGLint)(EGLDisplay dpy, EGLSurface surface, EGLint * rects, EGLint n_rects);
typedef struct {
    EGLDisplay a1;
    EGLSurface a2;
    EGLint * a3;
    EGLint a4;
} ARGS_EGLBoolean_EGLDisplay_EGLSurface_EGLint___GENPT___EGLint;
typedef struct {
    int index;
    ARGS_EGLBoolean_EGLDisplay_EGLSurface_EGLint___GENPT___EGLint args;
} PACKED_EGLBoolean_EGLDisplay_EGLSurface_EGLint___GENPT___EGLint;
typedef EGLBoolean (*FUNC_EGLBoolean_EGLDisplay_EGLint)(EGLDisplay dpy, EGLint interval);
typedef struct {
    EGLDisplay a1;
    EGLint a2;
} ARGS_EGLBoolean_EGLDisplay_EGLint;
typedef struct {
    int index;
    ARGS_EGLBoolean_EGLDisplay_EGLint args;
} PACKED_EGLBoolean_EGLDisplay_EGLint;
typedef EGLBoolean (*FUNC_EGLBoolean_EGLDisplay)(EGLDisplay dpy);
typedef struct {
    EGLDisplay a1;
} ARGS_EGLBoolean_EGLDisplay;
typedef struct {
    int index;
    ARGS_EGLBoolean_EGLDisplay args;
} PACKED_EGLBoolean_EGLDisplay;
typedef EGLBoolean (*FUNC_EGLBoolean_EGLint)(EGLint engine);
typedef struct {
    EGLint a1;
} ARGS_EGLBoolean_EGLint;
typedef struct {
    int index;
    ARGS_EGLBoolean_EGLint args;
} PACKED_EGLBoolean_EGLint;
typedef EGLint (*FUNC_EGLint_EGLDisplay_EGLSyncKHR_EGLint)(EGLDisplay dpy, EGLSyncKHR sync, EGLint flags);
typedef struct {
    EGLDisplay a1;
    EGLSyncKHR a2;
    EGLint a3;
} ARGS_EGLint_EGLDisplay_EGLSyncKHR_EGLint;
typedef struct {
    int index;
    ARGS_EGLint_EGLDisplay_EGLSyncKHR_EGLint args;
} PACKED_EGLint_EGLDisplay_EGLSyncKHR_EGLint;

extern const int INDEX_RET_SIZE[];
extern const int INDEX_PACKED_SIZE[];
extern const char *INDEX_NAME[];
extern void glPushCall(void *data);
void glIndexedCall(const packed_call_t *packed, void *ret_v);
void glIndexedPrint(const packed_call_t *packed);

#define eglBindAPI_INDEX 1
#define eglBindAPI_RETURN EGLBoolean
#define eglBindAPI_ARG_NAMES api
#define eglBindAPI_ARG_EXPAND EGLenum api
#define eglBindAPI_PACKED PACKED_EGLBoolean_EGLenum
#define eglBindAPI_FORMAT FORMAT_EGLBoolean_EGLenum
#define eglBindAPI_VOID_ONLY_WRAP(...) {}
#define eglBindAPI_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglBindTexImage_INDEX 2
#define eglBindTexImage_RETURN EGLBoolean
#define eglBindTexImage_ARG_NAMES dpy, surface, buffer
#define eglBindTexImage_ARG_EXPAND EGLDisplay dpy, EGLSurface surface, EGLint buffer
#define eglBindTexImage_PACKED PACKED_EGLBoolean_EGLDisplay_EGLSurface_EGLint
#define eglBindTexImage_FORMAT FORMAT_EGLBoolean_EGLDisplay_EGLSurface_EGLint
#define eglBindTexImage_VOID_ONLY_WRAP(...) {}
#define eglBindTexImage_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglChooseConfig_INDEX 3
#define eglChooseConfig_RETURN EGLBoolean
#define eglChooseConfig_ARG_NAMES dpy, attrib_list, configs, config_size, num_config
#define eglChooseConfig_ARG_EXPAND EGLDisplay dpy, const EGLint * attrib_list, EGLConfig * configs, EGLint config_size, EGLint * num_config
#define eglChooseConfig_PACKED PACKED_EGLBoolean_EGLDisplay_const_EGLint___GENPT___EGLConfig___GENPT___EGLint_EGLint___GENPT__
#define eglChooseConfig_FORMAT FORMAT_EGLBoolean_EGLDisplay_const_EGLint___GENPT___EGLConfig___GENPT___EGLint_EGLint___GENPT__
#define eglChooseConfig_VOID_ONLY_WRAP(...) {}
#define eglChooseConfig_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglClientWaitSyncKHR_INDEX 4
#define eglClientWaitSyncKHR_RETURN EGLint
#define eglClientWaitSyncKHR_ARG_NAMES dpy, sync, flags, timeout
#define eglClientWaitSyncKHR_ARG_EXPAND EGLDisplay dpy, EGLSyncKHR sync, EGLint flags, EGLTimeKHR timeout
#define eglClientWaitSyncKHR_PACKED PACKED_EGLint_EGLDisplay_EGLSyncKHR_EGLint_EGLTimeKHR
#define eglClientWaitSyncKHR_FORMAT FORMAT_EGLint_EGLDisplay_EGLSyncKHR_EGLint_EGLTimeKHR
#define eglClientWaitSyncKHR_VOID_ONLY_WRAP(...) {}
#define eglClientWaitSyncKHR_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglClientWaitSyncNV_INDEX 5
#define eglClientWaitSyncNV_RETURN EGLint
#define eglClientWaitSyncNV_ARG_NAMES sync, flags, timeout
#define eglClientWaitSyncNV_ARG_EXPAND EGLSyncNV sync, EGLint flags, EGLTimeNV timeout
#define eglClientWaitSyncNV_PACKED PACKED_EGLint_EGLSyncNV_EGLint_EGLTimeNV
#define eglClientWaitSyncNV_FORMAT FORMAT_EGLint_EGLSyncNV_EGLint_EGLTimeNV
#define eglClientWaitSyncNV_VOID_ONLY_WRAP(...) {}
#define eglClientWaitSyncNV_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglCopyBuffers_INDEX 6
#define eglCopyBuffers_RETURN EGLBoolean
#define eglCopyBuffers_ARG_NAMES dpy, surface, target
#define eglCopyBuffers_ARG_EXPAND EGLDisplay dpy, EGLSurface surface, EGLNativePixmapType target
#define eglCopyBuffers_PACKED PACKED_EGLBoolean_EGLDisplay_EGLSurface_EGLNativePixmapType
#define eglCopyBuffers_FORMAT FORMAT_EGLBoolean_EGLDisplay_EGLSurface_EGLNativePixmapType
#define eglCopyBuffers_VOID_ONLY_WRAP(...) {}
#define eglCopyBuffers_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglCreateContext_INDEX 7
#define eglCreateContext_RETURN EGLContext
#define eglCreateContext_ARG_NAMES dpy, config, share_context, attrib_list
#define eglCreateContext_ARG_EXPAND EGLDisplay dpy, EGLConfig config, EGLContext share_context, const EGLint * attrib_list
#define eglCreateContext_PACKED PACKED_EGLContext_EGLDisplay_EGLConfig_EGLContext_const_EGLint___GENPT__
#define eglCreateContext_FORMAT FORMAT_EGLContext_EGLDisplay_EGLConfig_EGLContext_const_EGLint___GENPT__
#define eglCreateContext_VOID_ONLY_WRAP(...) {}
#define eglCreateContext_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglCreateDRMImageMESA_INDEX 8
#define eglCreateDRMImageMESA_RETURN EGLImageKHR
#define eglCreateDRMImageMESA_ARG_NAMES dpy, attrib_list
#define eglCreateDRMImageMESA_ARG_EXPAND EGLDisplay dpy, const EGLint * attrib_list
#define eglCreateDRMImageMESA_PACKED PACKED_EGLImageKHR_EGLDisplay_const_EGLint___GENPT__
#define eglCreateDRMImageMESA_FORMAT FORMAT_EGLImageKHR_EGLDisplay_const_EGLint___GENPT__
#define eglCreateDRMImageMESA_VOID_ONLY_WRAP(...) {}
#define eglCreateDRMImageMESA_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglCreateFenceSyncNV_INDEX 9
#define eglCreateFenceSyncNV_RETURN EGLSyncNV
#define eglCreateFenceSyncNV_ARG_NAMES dpy, condition, attrib_list
#define eglCreateFenceSyncNV_ARG_EXPAND EGLDisplay dpy, EGLenum condition, const EGLint * attrib_list
#define eglCreateFenceSyncNV_PACKED PACKED_EGLSyncNV_EGLDisplay_EGLenum_const_EGLint___GENPT__
#define eglCreateFenceSyncNV_FORMAT FORMAT_EGLSyncNV_EGLDisplay_EGLenum_const_EGLint___GENPT__
#define eglCreateFenceSyncNV_VOID_ONLY_WRAP(...) {}
#define eglCreateFenceSyncNV_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglCreateImageKHR_INDEX 10
#define eglCreateImageKHR_RETURN EGLImageKHR
#define eglCreateImageKHR_ARG_NAMES dpy, ctx, target, buffer, attrib_list
#define eglCreateImageKHR_ARG_EXPAND EGLDisplay dpy, EGLContext ctx, EGLenum target, EGLClientBuffer buffer, const EGLint * attrib_list
#define eglCreateImageKHR_PACKED PACKED_EGLImageKHR_EGLDisplay_EGLContext_EGLenum_EGLClientBuffer_const_EGLint___GENPT__
#define eglCreateImageKHR_FORMAT FORMAT_EGLImageKHR_EGLDisplay_EGLContext_EGLenum_EGLClientBuffer_const_EGLint___GENPT__
#define eglCreateImageKHR_VOID_ONLY_WRAP(...) {}
#define eglCreateImageKHR_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglCreatePbufferFromClientBuffer_INDEX 11
#define eglCreatePbufferFromClientBuffer_RETURN EGLSurface
#define eglCreatePbufferFromClientBuffer_ARG_NAMES dpy, buftype, buffer, config, attrib_list
#define eglCreatePbufferFromClientBuffer_ARG_EXPAND EGLDisplay dpy, EGLenum buftype, EGLClientBuffer buffer, EGLConfig config, const EGLint * attrib_list
#define eglCreatePbufferFromClientBuffer_PACKED PACKED_EGLSurface_EGLDisplay_EGLenum_EGLClientBuffer_EGLConfig_const_EGLint___GENPT__
#define eglCreatePbufferFromClientBuffer_FORMAT FORMAT_EGLSurface_EGLDisplay_EGLenum_EGLClientBuffer_EGLConfig_const_EGLint___GENPT__
#define eglCreatePbufferFromClientBuffer_VOID_ONLY_WRAP(...) {}
#define eglCreatePbufferFromClientBuffer_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglCreatePbufferSurface_INDEX 12
#define eglCreatePbufferSurface_RETURN EGLSurface
#define eglCreatePbufferSurface_ARG_NAMES dpy, config, attrib_list
#define eglCreatePbufferSurface_ARG_EXPAND EGLDisplay dpy, EGLConfig config, const EGLint * attrib_list
#define eglCreatePbufferSurface_PACKED PACKED_EGLSurface_EGLDisplay_EGLConfig_const_EGLint___GENPT__
#define eglCreatePbufferSurface_FORMAT FORMAT_EGLSurface_EGLDisplay_EGLConfig_const_EGLint___GENPT__
#define eglCreatePbufferSurface_VOID_ONLY_WRAP(...) {}
#define eglCreatePbufferSurface_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglCreatePixmapSurface_INDEX 13
#define eglCreatePixmapSurface_RETURN EGLSurface
#define eglCreatePixmapSurface_ARG_NAMES dpy, config, pixmap, attrib_list
#define eglCreatePixmapSurface_ARG_EXPAND EGLDisplay dpy, EGLConfig config, EGLNativePixmapType pixmap, const EGLint * attrib_list
#define eglCreatePixmapSurface_PACKED PACKED_EGLSurface_EGLDisplay_EGLConfig_EGLNativePixmapType_const_EGLint___GENPT__
#define eglCreatePixmapSurface_FORMAT FORMAT_EGLSurface_EGLDisplay_EGLConfig_EGLNativePixmapType_const_EGLint___GENPT__
#define eglCreatePixmapSurface_VOID_ONLY_WRAP(...) {}
#define eglCreatePixmapSurface_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglCreatePixmapSurfaceHI_INDEX 14
#define eglCreatePixmapSurfaceHI_RETURN EGLSurface
#define eglCreatePixmapSurfaceHI_ARG_NAMES dpy, config, pixmap
#define eglCreatePixmapSurfaceHI_ARG_EXPAND EGLDisplay dpy, EGLConfig config, struct EGLClientPixmapHI * pixmap
#define eglCreatePixmapSurfaceHI_PACKED PACKED_EGLSurface_EGLDisplay_EGLConfig_struct_EGLClientPixmapHI___GENPT__
#define eglCreatePixmapSurfaceHI_FORMAT FORMAT_EGLSurface_EGLDisplay_EGLConfig_struct_EGLClientPixmapHI___GENPT__
#define eglCreatePixmapSurfaceHI_VOID_ONLY_WRAP(...) {}
#define eglCreatePixmapSurfaceHI_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglCreateStreamFromFileDescriptorKHR_INDEX 15
#define eglCreateStreamFromFileDescriptorKHR_RETURN EGLStreamKHR
#define eglCreateStreamFromFileDescriptorKHR_ARG_NAMES dpy, file_descriptor
#define eglCreateStreamFromFileDescriptorKHR_ARG_EXPAND EGLDisplay dpy, EGLNativeFileDescriptorKHR file_descriptor
#define eglCreateStreamFromFileDescriptorKHR_PACKED PACKED_EGLStreamKHR_EGLDisplay_EGLNativeFileDescriptorKHR
#define eglCreateStreamFromFileDescriptorKHR_FORMAT FORMAT_EGLStreamKHR_EGLDisplay_EGLNativeFileDescriptorKHR
#define eglCreateStreamFromFileDescriptorKHR_VOID_ONLY_WRAP(...) {}
#define eglCreateStreamFromFileDescriptorKHR_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglCreateStreamKHR_INDEX 16
#define eglCreateStreamKHR_RETURN EGLStreamKHR
#define eglCreateStreamKHR_ARG_NAMES dpy, attrib_list
#define eglCreateStreamKHR_ARG_EXPAND EGLDisplay dpy, const EGLint * attrib_list
#define eglCreateStreamKHR_PACKED PACKED_EGLStreamKHR_EGLDisplay_const_EGLint___GENPT__
#define eglCreateStreamKHR_FORMAT FORMAT_EGLStreamKHR_EGLDisplay_const_EGLint___GENPT__
#define eglCreateStreamKHR_VOID_ONLY_WRAP(...) {}
#define eglCreateStreamKHR_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglCreateStreamProducerSurfaceKHR_INDEX 17
#define eglCreateStreamProducerSurfaceKHR_RETURN EGLSurface
#define eglCreateStreamProducerSurfaceKHR_ARG_NAMES dpy, config, stream, attrib_list
#define eglCreateStreamProducerSurfaceKHR_ARG_EXPAND EGLDisplay dpy, EGLConfig config, EGLStreamKHR stream, const EGLint * attrib_list
#define eglCreateStreamProducerSurfaceKHR_PACKED PACKED_EGLSurface_EGLDisplay_EGLConfig_EGLStreamKHR_const_EGLint___GENPT__
#define eglCreateStreamProducerSurfaceKHR_FORMAT FORMAT_EGLSurface_EGLDisplay_EGLConfig_EGLStreamKHR_const_EGLint___GENPT__
#define eglCreateStreamProducerSurfaceKHR_VOID_ONLY_WRAP(...) {}
#define eglCreateStreamProducerSurfaceKHR_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglCreateSyncKHR_INDEX 18
#define eglCreateSyncKHR_RETURN EGLSyncKHR
#define eglCreateSyncKHR_ARG_NAMES dpy, type, attrib_list
#define eglCreateSyncKHR_ARG_EXPAND EGLDisplay dpy, EGLenum type, const EGLint * attrib_list
#define eglCreateSyncKHR_PACKED PACKED_EGLSyncKHR_EGLDisplay_EGLenum_const_EGLint___GENPT__
#define eglCreateSyncKHR_FORMAT FORMAT_EGLSyncKHR_EGLDisplay_EGLenum_const_EGLint___GENPT__
#define eglCreateSyncKHR_VOID_ONLY_WRAP(...) {}
#define eglCreateSyncKHR_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglCreateWindowSurface_INDEX 19
#define eglCreateWindowSurface_RETURN EGLSurface
#define eglCreateWindowSurface_ARG_NAMES dpy, config, win, attrib_list
#define eglCreateWindowSurface_ARG_EXPAND EGLDisplay dpy, EGLConfig config, EGLNativeWindowType win, const EGLint * attrib_list
#define eglCreateWindowSurface_PACKED PACKED_EGLSurface_EGLDisplay_EGLConfig_EGLNativeWindowType_const_EGLint___GENPT__
#define eglCreateWindowSurface_FORMAT FORMAT_EGLSurface_EGLDisplay_EGLConfig_EGLNativeWindowType_const_EGLint___GENPT__
#define eglCreateWindowSurface_VOID_ONLY_WRAP(...) {}
#define eglCreateWindowSurface_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglDestroyContext_INDEX 20
#define eglDestroyContext_RETURN EGLBoolean
#define eglDestroyContext_ARG_NAMES dpy, ctx
#define eglDestroyContext_ARG_EXPAND EGLDisplay dpy, EGLContext ctx
#define eglDestroyContext_PACKED PACKED_EGLBoolean_EGLDisplay_EGLContext
#define eglDestroyContext_FORMAT FORMAT_EGLBoolean_EGLDisplay_EGLContext
#define eglDestroyContext_VOID_ONLY_WRAP(...) {}
#define eglDestroyContext_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglDestroyImageKHR_INDEX 21
#define eglDestroyImageKHR_RETURN EGLBoolean
#define eglDestroyImageKHR_ARG_NAMES dpy, image
#define eglDestroyImageKHR_ARG_EXPAND EGLDisplay dpy, EGLImageKHR image
#define eglDestroyImageKHR_PACKED PACKED_EGLBoolean_EGLDisplay_EGLImageKHR
#define eglDestroyImageKHR_FORMAT FORMAT_EGLBoolean_EGLDisplay_EGLImageKHR
#define eglDestroyImageKHR_VOID_ONLY_WRAP(...) {}
#define eglDestroyImageKHR_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglDestroyStreamKHR_INDEX 22
#define eglDestroyStreamKHR_RETURN EGLBoolean
#define eglDestroyStreamKHR_ARG_NAMES dpy, stream
#define eglDestroyStreamKHR_ARG_EXPAND EGLDisplay dpy, EGLStreamKHR stream
#define eglDestroyStreamKHR_PACKED PACKED_EGLBoolean_EGLDisplay_EGLStreamKHR
#define eglDestroyStreamKHR_FORMAT FORMAT_EGLBoolean_EGLDisplay_EGLStreamKHR
#define eglDestroyStreamKHR_VOID_ONLY_WRAP(...) {}
#define eglDestroyStreamKHR_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglDestroySurface_INDEX 23
#define eglDestroySurface_RETURN EGLBoolean
#define eglDestroySurface_ARG_NAMES dpy, surface
#define eglDestroySurface_ARG_EXPAND EGLDisplay dpy, EGLSurface surface
#define eglDestroySurface_PACKED PACKED_EGLBoolean_EGLDisplay_EGLSurface
#define eglDestroySurface_FORMAT FORMAT_EGLBoolean_EGLDisplay_EGLSurface
#define eglDestroySurface_VOID_ONLY_WRAP(...) {}
#define eglDestroySurface_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglDestroySyncKHR_INDEX 24
#define eglDestroySyncKHR_RETURN EGLBoolean
#define eglDestroySyncKHR_ARG_NAMES dpy, sync
#define eglDestroySyncKHR_ARG_EXPAND EGLDisplay dpy, EGLSyncKHR sync
#define eglDestroySyncKHR_PACKED PACKED_EGLBoolean_EGLDisplay_EGLSyncKHR
#define eglDestroySyncKHR_FORMAT FORMAT_EGLBoolean_EGLDisplay_EGLSyncKHR
#define eglDestroySyncKHR_VOID_ONLY_WRAP(...) {}
#define eglDestroySyncKHR_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglDestroySyncNV_INDEX 25
#define eglDestroySyncNV_RETURN EGLBoolean
#define eglDestroySyncNV_ARG_NAMES sync
#define eglDestroySyncNV_ARG_EXPAND EGLSyncNV sync
#define eglDestroySyncNV_PACKED PACKED_EGLBoolean_EGLSyncNV
#define eglDestroySyncNV_FORMAT FORMAT_EGLBoolean_EGLSyncNV
#define eglDestroySyncNV_VOID_ONLY_WRAP(...) {}
#define eglDestroySyncNV_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglDupNativeFenceFDANDROID_INDEX 26
#define eglDupNativeFenceFDANDROID_RETURN EGLint
#define eglDupNativeFenceFDANDROID_ARG_NAMES dpy, sync
#define eglDupNativeFenceFDANDROID_ARG_EXPAND EGLDisplay dpy, EGLSyncKHR sync
#define eglDupNativeFenceFDANDROID_PACKED PACKED_EGLint_EGLDisplay_EGLSyncKHR
#define eglDupNativeFenceFDANDROID_FORMAT FORMAT_EGLint_EGLDisplay_EGLSyncKHR
#define eglDupNativeFenceFDANDROID_VOID_ONLY_WRAP(...) {}
#define eglDupNativeFenceFDANDROID_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglExportDRMImageMESA_INDEX 27
#define eglExportDRMImageMESA_RETURN EGLBoolean
#define eglExportDRMImageMESA_ARG_NAMES dpy, image, name, handle, stride
#define eglExportDRMImageMESA_ARG_EXPAND EGLDisplay dpy, EGLImageKHR image, EGLint * name, EGLint * handle, EGLint * stride
#define eglExportDRMImageMESA_PACKED PACKED_EGLBoolean_EGLDisplay_EGLImageKHR_EGLint___GENPT___EGLint___GENPT___EGLint___GENPT__
#define eglExportDRMImageMESA_FORMAT FORMAT_EGLBoolean_EGLDisplay_EGLImageKHR_EGLint___GENPT___EGLint___GENPT___EGLint___GENPT__
#define eglExportDRMImageMESA_VOID_ONLY_WRAP(...) {}
#define eglExportDRMImageMESA_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglFenceNV_INDEX 28
#define eglFenceNV_RETURN EGLBoolean
#define eglFenceNV_ARG_NAMES sync
#define eglFenceNV_ARG_EXPAND EGLSyncNV sync
#define eglFenceNV_PACKED PACKED_EGLBoolean_EGLSyncNV
#define eglFenceNV_FORMAT FORMAT_EGLBoolean_EGLSyncNV
#define eglFenceNV_VOID_ONLY_WRAP(...) {}
#define eglFenceNV_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglGetConfigAttrib_INDEX 29
#define eglGetConfigAttrib_RETURN EGLBoolean
#define eglGetConfigAttrib_ARG_NAMES dpy, config, attribute, value
#define eglGetConfigAttrib_ARG_EXPAND EGLDisplay dpy, EGLConfig config, EGLint attribute, EGLint * value
#define eglGetConfigAttrib_PACKED PACKED_EGLBoolean_EGLDisplay_EGLConfig_EGLint_EGLint___GENPT__
#define eglGetConfigAttrib_FORMAT FORMAT_EGLBoolean_EGLDisplay_EGLConfig_EGLint_EGLint___GENPT__
#define eglGetConfigAttrib_VOID_ONLY_WRAP(...) {}
#define eglGetConfigAttrib_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglGetConfigs_INDEX 30
#define eglGetConfigs_RETURN EGLBoolean
#define eglGetConfigs_ARG_NAMES dpy, configs, config_size, num_config
#define eglGetConfigs_ARG_EXPAND EGLDisplay dpy, EGLConfig * configs, EGLint config_size, EGLint * num_config
#define eglGetConfigs_PACKED PACKED_EGLBoolean_EGLDisplay_EGLConfig___GENPT___EGLint_EGLint___GENPT__
#define eglGetConfigs_FORMAT FORMAT_EGLBoolean_EGLDisplay_EGLConfig___GENPT___EGLint_EGLint___GENPT__
#define eglGetConfigs_VOID_ONLY_WRAP(...) {}
#define eglGetConfigs_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglGetCurrentContext_INDEX 31
#define eglGetCurrentContext_RETURN EGLContext
#define eglGetCurrentContext_ARG_NAMES 
#define eglGetCurrentContext_ARG_EXPAND 
#define eglGetCurrentContext_PACKED PACKED_EGLContext
#define eglGetCurrentContext_FORMAT FORMAT_EGLContext
#define eglGetCurrentContext_VOID_ONLY_WRAP(...) {}
#define eglGetCurrentContext_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglGetCurrentDisplay_INDEX 32
#define eglGetCurrentDisplay_RETURN EGLDisplay
#define eglGetCurrentDisplay_ARG_NAMES 
#define eglGetCurrentDisplay_ARG_EXPAND 
#define eglGetCurrentDisplay_PACKED PACKED_EGLDisplay
#define eglGetCurrentDisplay_FORMAT FORMAT_EGLDisplay
#define eglGetCurrentDisplay_VOID_ONLY_WRAP(...) {}
#define eglGetCurrentDisplay_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglGetCurrentSurface_INDEX 33
#define eglGetCurrentSurface_RETURN EGLSurface
#define eglGetCurrentSurface_ARG_NAMES readdraw
#define eglGetCurrentSurface_ARG_EXPAND EGLint readdraw
#define eglGetCurrentSurface_PACKED PACKED_EGLSurface_EGLint
#define eglGetCurrentSurface_FORMAT FORMAT_EGLSurface_EGLint
#define eglGetCurrentSurface_VOID_ONLY_WRAP(...) {}
#define eglGetCurrentSurface_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglGetDisplay_INDEX 34
#define eglGetDisplay_RETURN EGLDisplay
#define eglGetDisplay_ARG_NAMES display_id
#define eglGetDisplay_ARG_EXPAND EGLNativeDisplayType display_id
#define eglGetDisplay_PACKED PACKED_EGLDisplay_EGLNativeDisplayType
#define eglGetDisplay_FORMAT FORMAT_EGLDisplay_EGLNativeDisplayType
#define eglGetDisplay_VOID_ONLY_WRAP(...) {}
#define eglGetDisplay_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglGetError_INDEX 35
#define eglGetError_RETURN EGLint
#define eglGetError_ARG_NAMES 
#define eglGetError_ARG_EXPAND 
#define eglGetError_PACKED PACKED_EGLint
#define eglGetError_FORMAT FORMAT_EGLint
#define eglGetError_VOID_ONLY_WRAP(...) {}
#define eglGetError_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglGetProcAddress_INDEX 36
#define eglGetProcAddress_RETURN __eglMustCastToProperFunctionPointerType
#define eglGetProcAddress_ARG_NAMES procname
#define eglGetProcAddress_ARG_EXPAND const char * procname
#define eglGetProcAddress_PACKED PACKED___eglMustCastToProperFunctionPointerType_const_char___GENPT__
#define eglGetProcAddress_FORMAT FORMAT___eglMustCastToProperFunctionPointerType_const_char___GENPT__
#define eglGetProcAddress_VOID_ONLY_WRAP(...) {}
#define eglGetProcAddress_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglGetStreamFileDescriptorKHR_INDEX 37
#define eglGetStreamFileDescriptorKHR_RETURN EGLNativeFileDescriptorKHR
#define eglGetStreamFileDescriptorKHR_ARG_NAMES dpy, stream
#define eglGetStreamFileDescriptorKHR_ARG_EXPAND EGLDisplay dpy, EGLStreamKHR stream
#define eglGetStreamFileDescriptorKHR_PACKED PACKED_EGLNativeFileDescriptorKHR_EGLDisplay_EGLStreamKHR
#define eglGetStreamFileDescriptorKHR_FORMAT FORMAT_EGLNativeFileDescriptorKHR_EGLDisplay_EGLStreamKHR
#define eglGetStreamFileDescriptorKHR_VOID_ONLY_WRAP(...) {}
#define eglGetStreamFileDescriptorKHR_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglGetSyncAttribKHR_INDEX 38
#define eglGetSyncAttribKHR_RETURN EGLBoolean
#define eglGetSyncAttribKHR_ARG_NAMES dpy, sync, attribute, value
#define eglGetSyncAttribKHR_ARG_EXPAND EGLDisplay dpy, EGLSyncKHR sync, EGLint attribute, EGLint * value
#define eglGetSyncAttribKHR_PACKED PACKED_EGLBoolean_EGLDisplay_EGLSyncKHR_EGLint_EGLint___GENPT__
#define eglGetSyncAttribKHR_FORMAT FORMAT_EGLBoolean_EGLDisplay_EGLSyncKHR_EGLint_EGLint___GENPT__
#define eglGetSyncAttribKHR_VOID_ONLY_WRAP(...) {}
#define eglGetSyncAttribKHR_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglGetSyncAttribNV_INDEX 39
#define eglGetSyncAttribNV_RETURN EGLBoolean
#define eglGetSyncAttribNV_ARG_NAMES sync, attribute, value
#define eglGetSyncAttribNV_ARG_EXPAND EGLSyncNV sync, EGLint attribute, EGLint * value
#define eglGetSyncAttribNV_PACKED PACKED_EGLBoolean_EGLSyncNV_EGLint_EGLint___GENPT__
#define eglGetSyncAttribNV_FORMAT FORMAT_EGLBoolean_EGLSyncNV_EGLint_EGLint___GENPT__
#define eglGetSyncAttribNV_VOID_ONLY_WRAP(...) {}
#define eglGetSyncAttribNV_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglGetSystemTimeFrequencyNV_INDEX 40
#define eglGetSystemTimeFrequencyNV_RETURN EGLuint64NV
#define eglGetSystemTimeFrequencyNV_ARG_NAMES 
#define eglGetSystemTimeFrequencyNV_ARG_EXPAND 
#define eglGetSystemTimeFrequencyNV_PACKED PACKED_EGLuint64NV
#define eglGetSystemTimeFrequencyNV_FORMAT FORMAT_EGLuint64NV
#define eglGetSystemTimeFrequencyNV_VOID_ONLY_WRAP(...) {}
#define eglGetSystemTimeFrequencyNV_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglGetSystemTimeNV_INDEX 41
#define eglGetSystemTimeNV_RETURN EGLuint64NV
#define eglGetSystemTimeNV_ARG_NAMES 
#define eglGetSystemTimeNV_ARG_EXPAND 
#define eglGetSystemTimeNV_PACKED PACKED_EGLuint64NV
#define eglGetSystemTimeNV_FORMAT FORMAT_EGLuint64NV
#define eglGetSystemTimeNV_VOID_ONLY_WRAP(...) {}
#define eglGetSystemTimeNV_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglInitialize_INDEX 42
#define eglInitialize_RETURN EGLBoolean
#define eglInitialize_ARG_NAMES dpy, major, minor
#define eglInitialize_ARG_EXPAND EGLDisplay dpy, EGLint * major, EGLint * minor
#define eglInitialize_PACKED PACKED_EGLBoolean_EGLDisplay_EGLint___GENPT___EGLint___GENPT__
#define eglInitialize_FORMAT FORMAT_EGLBoolean_EGLDisplay_EGLint___GENPT___EGLint___GENPT__
#define eglInitialize_VOID_ONLY_WRAP(...) {}
#define eglInitialize_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglLockSurfaceKHR_INDEX 43
#define eglLockSurfaceKHR_RETURN EGLBoolean
#define eglLockSurfaceKHR_ARG_NAMES display, surface, attrib_list
#define eglLockSurfaceKHR_ARG_EXPAND EGLDisplay display, EGLSurface surface, const EGLint * attrib_list
#define eglLockSurfaceKHR_PACKED PACKED_EGLBoolean_EGLDisplay_EGLSurface_const_EGLint___GENPT__
#define eglLockSurfaceKHR_FORMAT FORMAT_EGLBoolean_EGLDisplay_EGLSurface_const_EGLint___GENPT__
#define eglLockSurfaceKHR_VOID_ONLY_WRAP(...) {}
#define eglLockSurfaceKHR_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglMakeCurrent_INDEX 44
#define eglMakeCurrent_RETURN EGLBoolean
#define eglMakeCurrent_ARG_NAMES dpy, draw, read, ctx
#define eglMakeCurrent_ARG_EXPAND EGLDisplay dpy, EGLSurface draw, EGLSurface read, EGLContext ctx
#define eglMakeCurrent_PACKED PACKED_EGLBoolean_EGLDisplay_EGLSurface_EGLSurface_EGLContext
#define eglMakeCurrent_FORMAT FORMAT_EGLBoolean_EGLDisplay_EGLSurface_EGLSurface_EGLContext
#define eglMakeCurrent_VOID_ONLY_WRAP(...) {}
#define eglMakeCurrent_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglPostSubBufferNV_INDEX 45
#define eglPostSubBufferNV_RETURN EGLBoolean
#define eglPostSubBufferNV_ARG_NAMES dpy, surface, x, y, width, height
#define eglPostSubBufferNV_ARG_EXPAND EGLDisplay dpy, EGLSurface surface, EGLint x, EGLint y, EGLint width, EGLint height
#define eglPostSubBufferNV_PACKED PACKED_EGLBoolean_EGLDisplay_EGLSurface_EGLint_EGLint_EGLint_EGLint
#define eglPostSubBufferNV_FORMAT FORMAT_EGLBoolean_EGLDisplay_EGLSurface_EGLint_EGLint_EGLint_EGLint
#define eglPostSubBufferNV_VOID_ONLY_WRAP(...) {}
#define eglPostSubBufferNV_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglQueryAPI_INDEX 46
#define eglQueryAPI_RETURN EGLenum
#define eglQueryAPI_ARG_NAMES 
#define eglQueryAPI_ARG_EXPAND 
#define eglQueryAPI_PACKED PACKED_EGLenum
#define eglQueryAPI_FORMAT FORMAT_EGLenum
#define eglQueryAPI_VOID_ONLY_WRAP(...) {}
#define eglQueryAPI_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglQueryContext_INDEX 47
#define eglQueryContext_RETURN EGLBoolean
#define eglQueryContext_ARG_NAMES dpy, ctx, attribute, value
#define eglQueryContext_ARG_EXPAND EGLDisplay dpy, EGLContext ctx, EGLint attribute, EGLint * value
#define eglQueryContext_PACKED PACKED_EGLBoolean_EGLDisplay_EGLContext_EGLint_EGLint___GENPT__
#define eglQueryContext_FORMAT FORMAT_EGLBoolean_EGLDisplay_EGLContext_EGLint_EGLint___GENPT__
#define eglQueryContext_VOID_ONLY_WRAP(...) {}
#define eglQueryContext_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglQueryNativeDisplayNV_INDEX 48
#define eglQueryNativeDisplayNV_RETURN EGLBoolean
#define eglQueryNativeDisplayNV_ARG_NAMES dpy, display_id
#define eglQueryNativeDisplayNV_ARG_EXPAND EGLDisplay dpy, EGLNativeDisplayType * display_id
#define eglQueryNativeDisplayNV_PACKED PACKED_EGLBoolean_EGLDisplay_EGLNativeDisplayType___GENPT__
#define eglQueryNativeDisplayNV_FORMAT FORMAT_EGLBoolean_EGLDisplay_EGLNativeDisplayType___GENPT__
#define eglQueryNativeDisplayNV_VOID_ONLY_WRAP(...) {}
#define eglQueryNativeDisplayNV_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglQueryNativePixmapNV_INDEX 49
#define eglQueryNativePixmapNV_RETURN EGLBoolean
#define eglQueryNativePixmapNV_ARG_NAMES dpy, surf, pixmap
#define eglQueryNativePixmapNV_ARG_EXPAND EGLDisplay dpy, EGLSurface surf, EGLNativePixmapType * pixmap
#define eglQueryNativePixmapNV_PACKED PACKED_EGLBoolean_EGLDisplay_EGLSurface_EGLNativePixmapType___GENPT__
#define eglQueryNativePixmapNV_FORMAT FORMAT_EGLBoolean_EGLDisplay_EGLSurface_EGLNativePixmapType___GENPT__
#define eglQueryNativePixmapNV_VOID_ONLY_WRAP(...) {}
#define eglQueryNativePixmapNV_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglQueryNativeWindowNV_INDEX 50
#define eglQueryNativeWindowNV_RETURN EGLBoolean
#define eglQueryNativeWindowNV_ARG_NAMES dpy, surf, window
#define eglQueryNativeWindowNV_ARG_EXPAND EGLDisplay dpy, EGLSurface surf, EGLNativeWindowType * window
#define eglQueryNativeWindowNV_PACKED PACKED_EGLBoolean_EGLDisplay_EGLSurface_EGLNativeWindowType___GENPT__
#define eglQueryNativeWindowNV_FORMAT FORMAT_EGLBoolean_EGLDisplay_EGLSurface_EGLNativeWindowType___GENPT__
#define eglQueryNativeWindowNV_VOID_ONLY_WRAP(...) {}
#define eglQueryNativeWindowNV_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglQueryStreamKHR_INDEX 51
#define eglQueryStreamKHR_RETURN EGLBoolean
#define eglQueryStreamKHR_ARG_NAMES dpy, stream, attribute, value
#define eglQueryStreamKHR_ARG_EXPAND EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLint * value
#define eglQueryStreamKHR_PACKED PACKED_EGLBoolean_EGLDisplay_EGLStreamKHR_EGLenum_EGLint___GENPT__
#define eglQueryStreamKHR_FORMAT FORMAT_EGLBoolean_EGLDisplay_EGLStreamKHR_EGLenum_EGLint___GENPT__
#define eglQueryStreamKHR_VOID_ONLY_WRAP(...) {}
#define eglQueryStreamKHR_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglQueryStreamTimeKHR_INDEX 52
#define eglQueryStreamTimeKHR_RETURN EGLBoolean
#define eglQueryStreamTimeKHR_ARG_NAMES dpy, stream, attribute, value
#define eglQueryStreamTimeKHR_ARG_EXPAND EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLTimeKHR * value
#define eglQueryStreamTimeKHR_PACKED PACKED_EGLBoolean_EGLDisplay_EGLStreamKHR_EGLenum_EGLTimeKHR___GENPT__
#define eglQueryStreamTimeKHR_FORMAT FORMAT_EGLBoolean_EGLDisplay_EGLStreamKHR_EGLenum_EGLTimeKHR___GENPT__
#define eglQueryStreamTimeKHR_VOID_ONLY_WRAP(...) {}
#define eglQueryStreamTimeKHR_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglQueryStreamu64KHR_INDEX 53
#define eglQueryStreamu64KHR_RETURN EGLBoolean
#define eglQueryStreamu64KHR_ARG_NAMES dpy, stream, attribute, value
#define eglQueryStreamu64KHR_ARG_EXPAND EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLuint64KHR * value
#define eglQueryStreamu64KHR_PACKED PACKED_EGLBoolean_EGLDisplay_EGLStreamKHR_EGLenum_EGLuint64KHR___GENPT__
#define eglQueryStreamu64KHR_FORMAT FORMAT_EGLBoolean_EGLDisplay_EGLStreamKHR_EGLenum_EGLuint64KHR___GENPT__
#define eglQueryStreamu64KHR_VOID_ONLY_WRAP(...) {}
#define eglQueryStreamu64KHR_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglQueryString_INDEX 54
#define eglQueryString_RETURN const char *
#define eglQueryString_ARG_NAMES dpy, name
#define eglQueryString_ARG_EXPAND EGLDisplay dpy, EGLint name
#define eglQueryString_PACKED PACKED_const_char___GENPT___EGLDisplay_EGLint
#define eglQueryString_FORMAT FORMAT_const_char___GENPT___EGLDisplay_EGLint
#define eglQueryString_VOID_ONLY_WRAP(...) {}
#define eglQueryString_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglQuerySurface_INDEX 55
#define eglQuerySurface_RETURN EGLBoolean
#define eglQuerySurface_ARG_NAMES dpy, surface, attribute, value
#define eglQuerySurface_ARG_EXPAND EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint * value
#define eglQuerySurface_PACKED PACKED_EGLBoolean_EGLDisplay_EGLSurface_EGLint_EGLint___GENPT__
#define eglQuerySurface_FORMAT FORMAT_EGLBoolean_EGLDisplay_EGLSurface_EGLint_EGLint___GENPT__
#define eglQuerySurface_VOID_ONLY_WRAP(...) {}
#define eglQuerySurface_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglQuerySurfacePointerANGLE_INDEX 56
#define eglQuerySurfacePointerANGLE_RETURN EGLBoolean
#define eglQuerySurfacePointerANGLE_ARG_NAMES dpy, surface, attribute, value
#define eglQuerySurfacePointerANGLE_ARG_EXPAND EGLDisplay dpy, EGLSurface surface, EGLint attribute, void ** value
#define eglQuerySurfacePointerANGLE_PACKED PACKED_EGLBoolean_EGLDisplay_EGLSurface_EGLint_void___GENPT____GENPT__
#define eglQuerySurfacePointerANGLE_FORMAT FORMAT_EGLBoolean_EGLDisplay_EGLSurface_EGLint_void___GENPT____GENPT__
#define eglQuerySurfacePointerANGLE_VOID_ONLY_WRAP(...) {}
#define eglQuerySurfacePointerANGLE_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglReleaseTexImage_INDEX 57
#define eglReleaseTexImage_RETURN EGLBoolean
#define eglReleaseTexImage_ARG_NAMES dpy, surface, buffer
#define eglReleaseTexImage_ARG_EXPAND EGLDisplay dpy, EGLSurface surface, EGLint buffer
#define eglReleaseTexImage_PACKED PACKED_EGLBoolean_EGLDisplay_EGLSurface_EGLint
#define eglReleaseTexImage_FORMAT FORMAT_EGLBoolean_EGLDisplay_EGLSurface_EGLint
#define eglReleaseTexImage_VOID_ONLY_WRAP(...) {}
#define eglReleaseTexImage_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglReleaseThread_INDEX 58
#define eglReleaseThread_RETURN EGLBoolean
#define eglReleaseThread_ARG_NAMES 
#define eglReleaseThread_ARG_EXPAND 
#define eglReleaseThread_PACKED PACKED_EGLBoolean
#define eglReleaseThread_FORMAT FORMAT_EGLBoolean
#define eglReleaseThread_VOID_ONLY_WRAP(...) {}
#define eglReleaseThread_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglSignalSyncKHR_INDEX 59
#define eglSignalSyncKHR_RETURN EGLBoolean
#define eglSignalSyncKHR_ARG_NAMES dpy, sync, mode
#define eglSignalSyncKHR_ARG_EXPAND EGLDisplay dpy, EGLSyncKHR sync, EGLenum mode
#define eglSignalSyncKHR_PACKED PACKED_EGLBoolean_EGLDisplay_EGLSyncKHR_EGLenum
#define eglSignalSyncKHR_FORMAT FORMAT_EGLBoolean_EGLDisplay_EGLSyncKHR_EGLenum
#define eglSignalSyncKHR_VOID_ONLY_WRAP(...) {}
#define eglSignalSyncKHR_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglSignalSyncNV_INDEX 60
#define eglSignalSyncNV_RETURN EGLBoolean
#define eglSignalSyncNV_ARG_NAMES sync, mode
#define eglSignalSyncNV_ARG_EXPAND EGLSyncNV sync, EGLenum mode
#define eglSignalSyncNV_PACKED PACKED_EGLBoolean_EGLSyncNV_EGLenum
#define eglSignalSyncNV_FORMAT FORMAT_EGLBoolean_EGLSyncNV_EGLenum
#define eglSignalSyncNV_VOID_ONLY_WRAP(...) {}
#define eglSignalSyncNV_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglStreamAttribKHR_INDEX 61
#define eglStreamAttribKHR_RETURN EGLBoolean
#define eglStreamAttribKHR_ARG_NAMES dpy, stream, attribute, value
#define eglStreamAttribKHR_ARG_EXPAND EGLDisplay dpy, EGLStreamKHR stream, EGLenum attribute, EGLint value
#define eglStreamAttribKHR_PACKED PACKED_EGLBoolean_EGLDisplay_EGLStreamKHR_EGLenum_EGLint
#define eglStreamAttribKHR_FORMAT FORMAT_EGLBoolean_EGLDisplay_EGLStreamKHR_EGLenum_EGLint
#define eglStreamAttribKHR_VOID_ONLY_WRAP(...) {}
#define eglStreamAttribKHR_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglStreamConsumerAcquireKHR_INDEX 62
#define eglStreamConsumerAcquireKHR_RETURN EGLBoolean
#define eglStreamConsumerAcquireKHR_ARG_NAMES dpy, stream
#define eglStreamConsumerAcquireKHR_ARG_EXPAND EGLDisplay dpy, EGLStreamKHR stream
#define eglStreamConsumerAcquireKHR_PACKED PACKED_EGLBoolean_EGLDisplay_EGLStreamKHR
#define eglStreamConsumerAcquireKHR_FORMAT FORMAT_EGLBoolean_EGLDisplay_EGLStreamKHR
#define eglStreamConsumerAcquireKHR_VOID_ONLY_WRAP(...) {}
#define eglStreamConsumerAcquireKHR_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglStreamConsumerGLTextureExternalKHR_INDEX 63
#define eglStreamConsumerGLTextureExternalKHR_RETURN EGLBoolean
#define eglStreamConsumerGLTextureExternalKHR_ARG_NAMES dpy, stream
#define eglStreamConsumerGLTextureExternalKHR_ARG_EXPAND EGLDisplay dpy, EGLStreamKHR stream
#define eglStreamConsumerGLTextureExternalKHR_PACKED PACKED_EGLBoolean_EGLDisplay_EGLStreamKHR
#define eglStreamConsumerGLTextureExternalKHR_FORMAT FORMAT_EGLBoolean_EGLDisplay_EGLStreamKHR
#define eglStreamConsumerGLTextureExternalKHR_VOID_ONLY_WRAP(...) {}
#define eglStreamConsumerGLTextureExternalKHR_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglStreamConsumerReleaseKHR_INDEX 64
#define eglStreamConsumerReleaseKHR_RETURN EGLBoolean
#define eglStreamConsumerReleaseKHR_ARG_NAMES dpy, stream
#define eglStreamConsumerReleaseKHR_ARG_EXPAND EGLDisplay dpy, EGLStreamKHR stream
#define eglStreamConsumerReleaseKHR_PACKED PACKED_EGLBoolean_EGLDisplay_EGLStreamKHR
#define eglStreamConsumerReleaseKHR_FORMAT FORMAT_EGLBoolean_EGLDisplay_EGLStreamKHR
#define eglStreamConsumerReleaseKHR_VOID_ONLY_WRAP(...) {}
#define eglStreamConsumerReleaseKHR_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglSurfaceAttrib_INDEX 65
#define eglSurfaceAttrib_RETURN EGLBoolean
#define eglSurfaceAttrib_ARG_NAMES dpy, surface, attribute, value
#define eglSurfaceAttrib_ARG_EXPAND EGLDisplay dpy, EGLSurface surface, EGLint attribute, EGLint value
#define eglSurfaceAttrib_PACKED PACKED_EGLBoolean_EGLDisplay_EGLSurface_EGLint_EGLint
#define eglSurfaceAttrib_FORMAT FORMAT_EGLBoolean_EGLDisplay_EGLSurface_EGLint_EGLint
#define eglSurfaceAttrib_VOID_ONLY_WRAP(...) {}
#define eglSurfaceAttrib_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglSwapBuffers_INDEX 66
#define eglSwapBuffers_RETURN EGLBoolean
#define eglSwapBuffers_ARG_NAMES dpy, surface
#define eglSwapBuffers_ARG_EXPAND EGLDisplay dpy, EGLSurface surface
#define eglSwapBuffers_PACKED PACKED_EGLBoolean_EGLDisplay_EGLSurface
#define eglSwapBuffers_FORMAT FORMAT_EGLBoolean_EGLDisplay_EGLSurface
#define eglSwapBuffers_VOID_ONLY_WRAP(...) {}
#define eglSwapBuffers_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglSwapBuffersWithDamageEXT_INDEX 67
#define eglSwapBuffersWithDamageEXT_RETURN EGLBoolean
#define eglSwapBuffersWithDamageEXT_ARG_NAMES dpy, surface, rects, n_rects
#define eglSwapBuffersWithDamageEXT_ARG_EXPAND EGLDisplay dpy, EGLSurface surface, EGLint * rects, EGLint n_rects
#define eglSwapBuffersWithDamageEXT_PACKED PACKED_EGLBoolean_EGLDisplay_EGLSurface_EGLint___GENPT___EGLint
#define eglSwapBuffersWithDamageEXT_FORMAT FORMAT_EGLBoolean_EGLDisplay_EGLSurface_EGLint___GENPT___EGLint
#define eglSwapBuffersWithDamageEXT_VOID_ONLY_WRAP(...) {}
#define eglSwapBuffersWithDamageEXT_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglSwapInterval_INDEX 68
#define eglSwapInterval_RETURN EGLBoolean
#define eglSwapInterval_ARG_NAMES dpy, interval
#define eglSwapInterval_ARG_EXPAND EGLDisplay dpy, EGLint interval
#define eglSwapInterval_PACKED PACKED_EGLBoolean_EGLDisplay_EGLint
#define eglSwapInterval_FORMAT FORMAT_EGLBoolean_EGLDisplay_EGLint
#define eglSwapInterval_VOID_ONLY_WRAP(...) {}
#define eglSwapInterval_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglTerminate_INDEX 69
#define eglTerminate_RETURN EGLBoolean
#define eglTerminate_ARG_NAMES dpy
#define eglTerminate_ARG_EXPAND EGLDisplay dpy
#define eglTerminate_PACKED PACKED_EGLBoolean_EGLDisplay
#define eglTerminate_FORMAT FORMAT_EGLBoolean_EGLDisplay
#define eglTerminate_VOID_ONLY_WRAP(...) {}
#define eglTerminate_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglUnlockSurfaceKHR_INDEX 70
#define eglUnlockSurfaceKHR_RETURN EGLBoolean
#define eglUnlockSurfaceKHR_ARG_NAMES display, surface
#define eglUnlockSurfaceKHR_ARG_EXPAND EGLDisplay display, EGLSurface surface
#define eglUnlockSurfaceKHR_PACKED PACKED_EGLBoolean_EGLDisplay_EGLSurface
#define eglUnlockSurfaceKHR_FORMAT FORMAT_EGLBoolean_EGLDisplay_EGLSurface
#define eglUnlockSurfaceKHR_VOID_ONLY_WRAP(...) {}
#define eglUnlockSurfaceKHR_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglWaitClient_INDEX 71
#define eglWaitClient_RETURN EGLBoolean
#define eglWaitClient_ARG_NAMES 
#define eglWaitClient_ARG_EXPAND 
#define eglWaitClient_PACKED PACKED_EGLBoolean
#define eglWaitClient_FORMAT FORMAT_EGLBoolean
#define eglWaitClient_VOID_ONLY_WRAP(...) {}
#define eglWaitClient_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglWaitGL_INDEX 72
#define eglWaitGL_RETURN EGLBoolean
#define eglWaitGL_ARG_NAMES 
#define eglWaitGL_ARG_EXPAND 
#define eglWaitGL_PACKED PACKED_EGLBoolean
#define eglWaitGL_FORMAT FORMAT_EGLBoolean
#define eglWaitGL_VOID_ONLY_WRAP(...) {}
#define eglWaitGL_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglWaitNative_INDEX 73
#define eglWaitNative_RETURN EGLBoolean
#define eglWaitNative_ARG_NAMES engine
#define eglWaitNative_ARG_EXPAND EGLint engine
#define eglWaitNative_PACKED PACKED_EGLBoolean_EGLint
#define eglWaitNative_FORMAT FORMAT_EGLBoolean_EGLint
#define eglWaitNative_VOID_ONLY_WRAP(...) {}
#define eglWaitNative_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define eglWaitSyncKHR_INDEX 74
#define eglWaitSyncKHR_RETURN EGLint
#define eglWaitSyncKHR_ARG_NAMES dpy, sync, flags
#define eglWaitSyncKHR_ARG_EXPAND EGLDisplay dpy, EGLSyncKHR sync, EGLint flags
#define eglWaitSyncKHR_PACKED PACKED_EGLint_EGLDisplay_EGLSyncKHR_EGLint
#define eglWaitSyncKHR_FORMAT FORMAT_EGLint_EGLDisplay_EGLSyncKHR_EGLint
#define eglWaitSyncKHR_VOID_ONLY_WRAP(...) {}
#define eglWaitSyncKHR_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glAccum_INDEX 75
#define glAccum_RETURN void
#define glAccum_ARG_NAMES op, value
#define glAccum_ARG_EXPAND GLenum op, GLfloat value
#define glAccum_PACKED PACKED_void_GLenum_GLfloat
#define glAccum_FORMAT FORMAT_void_GLenum_GLfloat
#define glAccum_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glAccum_NOT_VOID_WRAP(...) {}
#define glAccumxOES_INDEX 76
#define glAccumxOES_RETURN void
#define glAccumxOES_ARG_NAMES op, value
#define glAccumxOES_ARG_EXPAND GLenum op, GLfixed value
#define glAccumxOES_PACKED PACKED_void_GLenum_GLfixed
#define glAccumxOES_FORMAT FORMAT_void_GLenum_GLfixed
#define glAccumxOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glAccumxOES_NOT_VOID_WRAP(...) {}
#define glActiveProgramEXT_INDEX 77
#define glActiveProgramEXT_RETURN void
#define glActiveProgramEXT_ARG_NAMES program
#define glActiveProgramEXT_ARG_EXPAND GLuint program
#define glActiveProgramEXT_PACKED PACKED_void_GLuint
#define glActiveProgramEXT_FORMAT FORMAT_void_GLuint
#define glActiveProgramEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glActiveProgramEXT_NOT_VOID_WRAP(...) {}
#define glActiveShaderProgram_INDEX 78
#define glActiveShaderProgram_RETURN void
#define glActiveShaderProgram_ARG_NAMES pipeline, program
#define glActiveShaderProgram_ARG_EXPAND GLuint pipeline, GLuint program
#define glActiveShaderProgram_PACKED PACKED_void_GLuint_GLuint
#define glActiveShaderProgram_FORMAT FORMAT_void_GLuint_GLuint
#define glActiveShaderProgram_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glActiveShaderProgram_NOT_VOID_WRAP(...) {}
#define glActiveStencilFaceEXT_INDEX 79
#define glActiveStencilFaceEXT_RETURN void
#define glActiveStencilFaceEXT_ARG_NAMES face
#define glActiveStencilFaceEXT_ARG_EXPAND GLenum face
#define glActiveStencilFaceEXT_PACKED PACKED_void_GLenum
#define glActiveStencilFaceEXT_FORMAT FORMAT_void_GLenum
#define glActiveStencilFaceEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glActiveStencilFaceEXT_NOT_VOID_WRAP(...) {}
#define glActiveTexture_INDEX 80
#define glActiveTexture_RETURN void
#define glActiveTexture_ARG_NAMES texture
#define glActiveTexture_ARG_EXPAND GLenum texture
#define glActiveTexture_PACKED PACKED_void_GLenum
#define glActiveTexture_FORMAT FORMAT_void_GLenum
#define glActiveTexture_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glActiveTexture_NOT_VOID_WRAP(...) {}
#define glActiveTextureARB_INDEX 81
#define glActiveTextureARB_RETURN void
#define glActiveTextureARB_ARG_NAMES texture
#define glActiveTextureARB_ARG_EXPAND GLenum texture
#define glActiveTextureARB_PACKED PACKED_void_GLenum
#define glActiveTextureARB_FORMAT FORMAT_void_GLenum
#define glActiveTextureARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glActiveTextureARB_NOT_VOID_WRAP(...) {}
#define glActiveVaryingNV_INDEX 82
#define glActiveVaryingNV_RETURN void
#define glActiveVaryingNV_ARG_NAMES program, name
#define glActiveVaryingNV_ARG_EXPAND GLuint program, const GLchar * name
#define glActiveVaryingNV_PACKED PACKED_void_GLuint_const_GLchar___GENPT__
#define glActiveVaryingNV_FORMAT FORMAT_void_GLuint_const_GLchar___GENPT__
#define glActiveVaryingNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glActiveVaryingNV_NOT_VOID_WRAP(...) {}
#define glAlphaFragmentOp1ATI_INDEX 83
#define glAlphaFragmentOp1ATI_RETURN void
#define glAlphaFragmentOp1ATI_ARG_NAMES op, dst, dstMod, arg1, arg1Rep, arg1Mod
#define glAlphaFragmentOp1ATI_ARG_EXPAND GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod
#define glAlphaFragmentOp1ATI_PACKED PACKED_void_GLenum_GLuint_GLuint_GLuint_GLuint_GLuint
#define glAlphaFragmentOp1ATI_FORMAT FORMAT_void_GLenum_GLuint_GLuint_GLuint_GLuint_GLuint
#define glAlphaFragmentOp1ATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glAlphaFragmentOp1ATI_NOT_VOID_WRAP(...) {}
#define glAlphaFragmentOp2ATI_INDEX 84
#define glAlphaFragmentOp2ATI_RETURN void
#define glAlphaFragmentOp2ATI_ARG_NAMES op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod
#define glAlphaFragmentOp2ATI_ARG_EXPAND GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod
#define glAlphaFragmentOp2ATI_PACKED PACKED_void_GLenum_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint
#define glAlphaFragmentOp2ATI_FORMAT FORMAT_void_GLenum_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint
#define glAlphaFragmentOp2ATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glAlphaFragmentOp2ATI_NOT_VOID_WRAP(...) {}
#define glAlphaFragmentOp3ATI_INDEX 85
#define glAlphaFragmentOp3ATI_RETURN void
#define glAlphaFragmentOp3ATI_ARG_NAMES op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod
#define glAlphaFragmentOp3ATI_ARG_EXPAND GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod
#define glAlphaFragmentOp3ATI_PACKED PACKED_void_GLenum_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint
#define glAlphaFragmentOp3ATI_FORMAT FORMAT_void_GLenum_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint
#define glAlphaFragmentOp3ATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glAlphaFragmentOp3ATI_NOT_VOID_WRAP(...) {}
#define glAlphaFunc_INDEX 86
#define glAlphaFunc_RETURN void
#define glAlphaFunc_ARG_NAMES func, ref
#define glAlphaFunc_ARG_EXPAND GLenum func, GLclampf ref
#define glAlphaFunc_PACKED PACKED_void_GLenum_GLclampf
#define glAlphaFunc_FORMAT FORMAT_void_GLenum_GLclampf
#define glAlphaFunc_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glAlphaFunc_NOT_VOID_WRAP(...) {}
#define glAlphaFuncx_INDEX 87
#define glAlphaFuncx_RETURN void
#define glAlphaFuncx_ARG_NAMES func, ref
#define glAlphaFuncx_ARG_EXPAND GLenum func, GLclampx ref
#define glAlphaFuncx_PACKED PACKED_void_GLenum_GLclampx
#define glAlphaFuncx_FORMAT FORMAT_void_GLenum_GLclampx
#define glAlphaFuncx_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glAlphaFuncx_NOT_VOID_WRAP(...) {}
#define glAlphaFuncxOES_INDEX 88
#define glAlphaFuncxOES_RETURN void
#define glAlphaFuncxOES_ARG_NAMES func, ref
#define glAlphaFuncxOES_ARG_EXPAND GLenum func, GLfixed ref
#define glAlphaFuncxOES_PACKED PACKED_void_GLenum_GLfixed
#define glAlphaFuncxOES_FORMAT FORMAT_void_GLenum_GLfixed
#define glAlphaFuncxOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glAlphaFuncxOES_NOT_VOID_WRAP(...) {}
#define glApplyTextureEXT_INDEX 89
#define glApplyTextureEXT_RETURN void
#define glApplyTextureEXT_ARG_NAMES mode
#define glApplyTextureEXT_ARG_EXPAND GLenum mode
#define glApplyTextureEXT_PACKED PACKED_void_GLenum
#define glApplyTextureEXT_FORMAT FORMAT_void_GLenum
#define glApplyTextureEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glApplyTextureEXT_NOT_VOID_WRAP(...) {}
#define glAreProgramsResidentNV_INDEX 90
#define glAreProgramsResidentNV_RETURN GLboolean
#define glAreProgramsResidentNV_ARG_NAMES n, programs, residences
#define glAreProgramsResidentNV_ARG_EXPAND GLsizei n, const GLuint * programs, GLboolean * residences
#define glAreProgramsResidentNV_PACKED PACKED_GLboolean_GLsizei_const_GLuint___GENPT___GLboolean___GENPT__
#define glAreProgramsResidentNV_FORMAT FORMAT_GLboolean_GLsizei_const_GLuint___GENPT___GLboolean___GENPT__
#define glAreProgramsResidentNV_VOID_ONLY_WRAP(...) {}
#define glAreProgramsResidentNV_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glAreTexturesResident_INDEX 91
#define glAreTexturesResident_RETURN GLboolean
#define glAreTexturesResident_ARG_NAMES n, textures, residences
#define glAreTexturesResident_ARG_EXPAND GLsizei n, const GLuint * textures, GLboolean * residences
#define glAreTexturesResident_PACKED PACKED_GLboolean_GLsizei_const_GLuint___GENPT___GLboolean___GENPT__
#define glAreTexturesResident_FORMAT FORMAT_GLboolean_GLsizei_const_GLuint___GENPT___GLboolean___GENPT__
#define glAreTexturesResident_VOID_ONLY_WRAP(...) {}
#define glAreTexturesResident_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glAreTexturesResidentEXT_INDEX 92
#define glAreTexturesResidentEXT_RETURN GLboolean
#define glAreTexturesResidentEXT_ARG_NAMES n, textures, residences
#define glAreTexturesResidentEXT_ARG_EXPAND GLsizei n, const GLuint * textures, GLboolean * residences
#define glAreTexturesResidentEXT_PACKED PACKED_GLboolean_GLsizei_const_GLuint___GENPT___GLboolean___GENPT__
#define glAreTexturesResidentEXT_FORMAT FORMAT_GLboolean_GLsizei_const_GLuint___GENPT___GLboolean___GENPT__
#define glAreTexturesResidentEXT_VOID_ONLY_WRAP(...) {}
#define glAreTexturesResidentEXT_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glArrayElement_INDEX 93
#define glArrayElement_RETURN void
#define glArrayElement_ARG_NAMES i
#define glArrayElement_ARG_EXPAND GLint i
#define glArrayElement_PACKED PACKED_void_GLint
#define glArrayElement_FORMAT FORMAT_void_GLint
#define glArrayElement_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glArrayElement_NOT_VOID_WRAP(...) {}
#define glArrayElementEXT_INDEX 94
#define glArrayElementEXT_RETURN void
#define glArrayElementEXT_ARG_NAMES i
#define glArrayElementEXT_ARG_EXPAND GLint i
#define glArrayElementEXT_PACKED PACKED_void_GLint
#define glArrayElementEXT_FORMAT FORMAT_void_GLint
#define glArrayElementEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glArrayElementEXT_NOT_VOID_WRAP(...) {}
#define glArrayObjectATI_INDEX 95
#define glArrayObjectATI_RETURN void
#define glArrayObjectATI_ARG_NAMES array, size, type, stride, buffer, offset
#define glArrayObjectATI_ARG_EXPAND GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset
#define glArrayObjectATI_PACKED PACKED_void_GLenum_GLint_GLenum_GLsizei_GLuint_GLuint
#define glArrayObjectATI_FORMAT FORMAT_void_GLenum_GLint_GLenum_GLsizei_GLuint_GLuint
#define glArrayObjectATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glArrayObjectATI_NOT_VOID_WRAP(...) {}
#define glAsyncMarkerSGIX_INDEX 96
#define glAsyncMarkerSGIX_RETURN void
#define glAsyncMarkerSGIX_ARG_NAMES marker
#define glAsyncMarkerSGIX_ARG_EXPAND GLuint marker
#define glAsyncMarkerSGIX_PACKED PACKED_void_GLuint
#define glAsyncMarkerSGIX_FORMAT FORMAT_void_GLuint
#define glAsyncMarkerSGIX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glAsyncMarkerSGIX_NOT_VOID_WRAP(...) {}
#define glAttachObjectARB_INDEX 97
#define glAttachObjectARB_RETURN void
#define glAttachObjectARB_ARG_NAMES containerObj, obj
#define glAttachObjectARB_ARG_EXPAND GLhandleARB containerObj, GLhandleARB obj
#define glAttachObjectARB_PACKED PACKED_void_GLhandleARB_GLhandleARB
#define glAttachObjectARB_FORMAT FORMAT_void_GLhandleARB_GLhandleARB
#define glAttachObjectARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glAttachObjectARB_NOT_VOID_WRAP(...) {}
#define glAttachShader_INDEX 98
#define glAttachShader_RETURN void
#define glAttachShader_ARG_NAMES program, shader
#define glAttachShader_ARG_EXPAND GLuint program, GLuint shader
#define glAttachShader_PACKED PACKED_void_GLuint_GLuint
#define glAttachShader_FORMAT FORMAT_void_GLuint_GLuint
#define glAttachShader_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glAttachShader_NOT_VOID_WRAP(...) {}
#define glBegin_INDEX 99
#define glBegin_RETURN void
#define glBegin_ARG_NAMES mode
#define glBegin_ARG_EXPAND GLenum mode
#define glBegin_PACKED PACKED_void_GLenum
#define glBegin_FORMAT FORMAT_void_GLenum
#define glBegin_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBegin_NOT_VOID_WRAP(...) {}
#define glBeginConditionalRender_INDEX 100
#define glBeginConditionalRender_RETURN void
#define glBeginConditionalRender_ARG_NAMES id, mode
#define glBeginConditionalRender_ARG_EXPAND GLuint id, GLenum mode
#define glBeginConditionalRender_PACKED PACKED_void_GLuint_GLenum
#define glBeginConditionalRender_FORMAT FORMAT_void_GLuint_GLenum
#define glBeginConditionalRender_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBeginConditionalRender_NOT_VOID_WRAP(...) {}
#define glBeginConditionalRenderNV_INDEX 101
#define glBeginConditionalRenderNV_RETURN void
#define glBeginConditionalRenderNV_ARG_NAMES id, mode
#define glBeginConditionalRenderNV_ARG_EXPAND GLuint id, GLenum mode
#define glBeginConditionalRenderNV_PACKED PACKED_void_GLuint_GLenum
#define glBeginConditionalRenderNV_FORMAT FORMAT_void_GLuint_GLenum
#define glBeginConditionalRenderNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBeginConditionalRenderNV_NOT_VOID_WRAP(...) {}
#define glBeginConditionalRenderNVX_INDEX 102
#define glBeginConditionalRenderNVX_RETURN void
#define glBeginConditionalRenderNVX_ARG_NAMES id
#define glBeginConditionalRenderNVX_ARG_EXPAND GLuint id
#define glBeginConditionalRenderNVX_PACKED PACKED_void_GLuint
#define glBeginConditionalRenderNVX_FORMAT FORMAT_void_GLuint
#define glBeginConditionalRenderNVX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBeginConditionalRenderNVX_NOT_VOID_WRAP(...) {}
#define glBeginFragmentShaderATI_INDEX 103
#define glBeginFragmentShaderATI_RETURN void
#define glBeginFragmentShaderATI_ARG_NAMES 
#define glBeginFragmentShaderATI_ARG_EXPAND 
#define glBeginFragmentShaderATI_PACKED PACKED_void
#define glBeginFragmentShaderATI_FORMAT FORMAT_void
#define glBeginFragmentShaderATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBeginFragmentShaderATI_NOT_VOID_WRAP(...) {}
#define glBeginOcclusionQueryNV_INDEX 104
#define glBeginOcclusionQueryNV_RETURN void
#define glBeginOcclusionQueryNV_ARG_NAMES id
#define glBeginOcclusionQueryNV_ARG_EXPAND GLuint id
#define glBeginOcclusionQueryNV_PACKED PACKED_void_GLuint
#define glBeginOcclusionQueryNV_FORMAT FORMAT_void_GLuint
#define glBeginOcclusionQueryNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBeginOcclusionQueryNV_NOT_VOID_WRAP(...) {}
#define glBeginPerfMonitorAMD_INDEX 105
#define glBeginPerfMonitorAMD_RETURN void
#define glBeginPerfMonitorAMD_ARG_NAMES monitor
#define glBeginPerfMonitorAMD_ARG_EXPAND GLuint monitor
#define glBeginPerfMonitorAMD_PACKED PACKED_void_GLuint
#define glBeginPerfMonitorAMD_FORMAT FORMAT_void_GLuint
#define glBeginPerfMonitorAMD_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBeginPerfMonitorAMD_NOT_VOID_WRAP(...) {}
#define glBeginQuery_INDEX 106
#define glBeginQuery_RETURN void
#define glBeginQuery_ARG_NAMES target, id
#define glBeginQuery_ARG_EXPAND GLenum target, GLuint id
#define glBeginQuery_PACKED PACKED_void_GLenum_GLuint
#define glBeginQuery_FORMAT FORMAT_void_GLenum_GLuint
#define glBeginQuery_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBeginQuery_NOT_VOID_WRAP(...) {}
#define glBeginQueryARB_INDEX 107
#define glBeginQueryARB_RETURN void
#define glBeginQueryARB_ARG_NAMES target, id
#define glBeginQueryARB_ARG_EXPAND GLenum target, GLuint id
#define glBeginQueryARB_PACKED PACKED_void_GLenum_GLuint
#define glBeginQueryARB_FORMAT FORMAT_void_GLenum_GLuint
#define glBeginQueryARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBeginQueryARB_NOT_VOID_WRAP(...) {}
#define glBeginQueryIndexed_INDEX 108
#define glBeginQueryIndexed_RETURN void
#define glBeginQueryIndexed_ARG_NAMES target, index, id
#define glBeginQueryIndexed_ARG_EXPAND GLenum target, GLuint index, GLuint id
#define glBeginQueryIndexed_PACKED PACKED_void_GLenum_GLuint_GLuint
#define glBeginQueryIndexed_FORMAT FORMAT_void_GLenum_GLuint_GLuint
#define glBeginQueryIndexed_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBeginQueryIndexed_NOT_VOID_WRAP(...) {}
#define glBeginTransformFeedback_INDEX 109
#define glBeginTransformFeedback_RETURN void
#define glBeginTransformFeedback_ARG_NAMES primitiveMode
#define glBeginTransformFeedback_ARG_EXPAND GLenum primitiveMode
#define glBeginTransformFeedback_PACKED PACKED_void_GLenum
#define glBeginTransformFeedback_FORMAT FORMAT_void_GLenum
#define glBeginTransformFeedback_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBeginTransformFeedback_NOT_VOID_WRAP(...) {}
#define glBeginTransformFeedbackEXT_INDEX 110
#define glBeginTransformFeedbackEXT_RETURN void
#define glBeginTransformFeedbackEXT_ARG_NAMES primitiveMode
#define glBeginTransformFeedbackEXT_ARG_EXPAND GLenum primitiveMode
#define glBeginTransformFeedbackEXT_PACKED PACKED_void_GLenum
#define glBeginTransformFeedbackEXT_FORMAT FORMAT_void_GLenum
#define glBeginTransformFeedbackEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBeginTransformFeedbackEXT_NOT_VOID_WRAP(...) {}
#define glBeginTransformFeedbackNV_INDEX 111
#define glBeginTransformFeedbackNV_RETURN void
#define glBeginTransformFeedbackNV_ARG_NAMES primitiveMode
#define glBeginTransformFeedbackNV_ARG_EXPAND GLenum primitiveMode
#define glBeginTransformFeedbackNV_PACKED PACKED_void_GLenum
#define glBeginTransformFeedbackNV_FORMAT FORMAT_void_GLenum
#define glBeginTransformFeedbackNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBeginTransformFeedbackNV_NOT_VOID_WRAP(...) {}
#define glBeginVertexShaderEXT_INDEX 112
#define glBeginVertexShaderEXT_RETURN void
#define glBeginVertexShaderEXT_ARG_NAMES 
#define glBeginVertexShaderEXT_ARG_EXPAND 
#define glBeginVertexShaderEXT_PACKED PACKED_void
#define glBeginVertexShaderEXT_FORMAT FORMAT_void
#define glBeginVertexShaderEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBeginVertexShaderEXT_NOT_VOID_WRAP(...) {}
#define glBeginVideoCaptureNV_INDEX 113
#define glBeginVideoCaptureNV_RETURN void
#define glBeginVideoCaptureNV_ARG_NAMES video_capture_slot
#define glBeginVideoCaptureNV_ARG_EXPAND GLuint video_capture_slot
#define glBeginVideoCaptureNV_PACKED PACKED_void_GLuint
#define glBeginVideoCaptureNV_FORMAT FORMAT_void_GLuint
#define glBeginVideoCaptureNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBeginVideoCaptureNV_NOT_VOID_WRAP(...) {}
#define glBindAttribLocation_INDEX 114
#define glBindAttribLocation_RETURN void
#define glBindAttribLocation_ARG_NAMES program, index, name
#define glBindAttribLocation_ARG_EXPAND GLuint program, GLuint index, const GLchar * name
#define glBindAttribLocation_PACKED PACKED_void_GLuint_GLuint_const_GLchar___GENPT__
#define glBindAttribLocation_FORMAT FORMAT_void_GLuint_GLuint_const_GLchar___GENPT__
#define glBindAttribLocation_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBindAttribLocation_NOT_VOID_WRAP(...) {}
#define glBindAttribLocationARB_INDEX 115
#define glBindAttribLocationARB_RETURN void
#define glBindAttribLocationARB_ARG_NAMES programObj, index, name
#define glBindAttribLocationARB_ARG_EXPAND GLhandleARB programObj, GLuint index, const GLcharARB * name
#define glBindAttribLocationARB_PACKED PACKED_void_GLhandleARB_GLuint_const_GLcharARB___GENPT__
#define glBindAttribLocationARB_FORMAT FORMAT_void_GLhandleARB_GLuint_const_GLcharARB___GENPT__
#define glBindAttribLocationARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBindAttribLocationARB_NOT_VOID_WRAP(...) {}
#define glBindBuffer_INDEX 116
#define glBindBuffer_RETURN void
#define glBindBuffer_ARG_NAMES target, buffer
#define glBindBuffer_ARG_EXPAND GLenum target, GLuint buffer
#define glBindBuffer_PACKED PACKED_void_GLenum_GLuint
#define glBindBuffer_FORMAT FORMAT_void_GLenum_GLuint
#define glBindBuffer_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBindBuffer_NOT_VOID_WRAP(...) {}
#define glBindBufferARB_INDEX 117
#define glBindBufferARB_RETURN void
#define glBindBufferARB_ARG_NAMES target, buffer
#define glBindBufferARB_ARG_EXPAND GLenum target, GLuint buffer
#define glBindBufferARB_PACKED PACKED_void_GLenum_GLuint
#define glBindBufferARB_FORMAT FORMAT_void_GLenum_GLuint
#define glBindBufferARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBindBufferARB_NOT_VOID_WRAP(...) {}
#define glBindBufferBase_INDEX 118
#define glBindBufferBase_RETURN void
#define glBindBufferBase_ARG_NAMES target, index, buffer
#define glBindBufferBase_ARG_EXPAND GLenum target, GLuint index, GLuint buffer
#define glBindBufferBase_PACKED PACKED_void_GLenum_GLuint_GLuint
#define glBindBufferBase_FORMAT FORMAT_void_GLenum_GLuint_GLuint
#define glBindBufferBase_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBindBufferBase_NOT_VOID_WRAP(...) {}
#define glBindBufferBaseEXT_INDEX 119
#define glBindBufferBaseEXT_RETURN void
#define glBindBufferBaseEXT_ARG_NAMES target, index, buffer
#define glBindBufferBaseEXT_ARG_EXPAND GLenum target, GLuint index, GLuint buffer
#define glBindBufferBaseEXT_PACKED PACKED_void_GLenum_GLuint_GLuint
#define glBindBufferBaseEXT_FORMAT FORMAT_void_GLenum_GLuint_GLuint
#define glBindBufferBaseEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBindBufferBaseEXT_NOT_VOID_WRAP(...) {}
#define glBindBufferBaseNV_INDEX 120
#define glBindBufferBaseNV_RETURN void
#define glBindBufferBaseNV_ARG_NAMES target, index, buffer
#define glBindBufferBaseNV_ARG_EXPAND GLenum target, GLuint index, GLuint buffer
#define glBindBufferBaseNV_PACKED PACKED_void_GLenum_GLuint_GLuint
#define glBindBufferBaseNV_FORMAT FORMAT_void_GLenum_GLuint_GLuint
#define glBindBufferBaseNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBindBufferBaseNV_NOT_VOID_WRAP(...) {}
#define glBindBufferOffsetEXT_INDEX 121
#define glBindBufferOffsetEXT_RETURN void
#define glBindBufferOffsetEXT_ARG_NAMES target, index, buffer, offset
#define glBindBufferOffsetEXT_ARG_EXPAND GLenum target, GLuint index, GLuint buffer, GLintptr offset
#define glBindBufferOffsetEXT_PACKED PACKED_void_GLenum_GLuint_GLuint_GLintptr
#define glBindBufferOffsetEXT_FORMAT FORMAT_void_GLenum_GLuint_GLuint_GLintptr
#define glBindBufferOffsetEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBindBufferOffsetEXT_NOT_VOID_WRAP(...) {}
#define glBindBufferOffsetNV_INDEX 122
#define glBindBufferOffsetNV_RETURN void
#define glBindBufferOffsetNV_ARG_NAMES target, index, buffer, offset
#define glBindBufferOffsetNV_ARG_EXPAND GLenum target, GLuint index, GLuint buffer, GLintptr offset
#define glBindBufferOffsetNV_PACKED PACKED_void_GLenum_GLuint_GLuint_GLintptr
#define glBindBufferOffsetNV_FORMAT FORMAT_void_GLenum_GLuint_GLuint_GLintptr
#define glBindBufferOffsetNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBindBufferOffsetNV_NOT_VOID_WRAP(...) {}
#define glBindBufferRange_INDEX 123
#define glBindBufferRange_RETURN void
#define glBindBufferRange_ARG_NAMES target, index, buffer, offset, size
#define glBindBufferRange_ARG_EXPAND GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size
#define glBindBufferRange_PACKED PACKED_void_GLenum_GLuint_GLuint_GLintptr_GLsizeiptr
#define glBindBufferRange_FORMAT FORMAT_void_GLenum_GLuint_GLuint_GLintptr_GLsizeiptr
#define glBindBufferRange_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBindBufferRange_NOT_VOID_WRAP(...) {}
#define glBindBufferRangeEXT_INDEX 124
#define glBindBufferRangeEXT_RETURN void
#define glBindBufferRangeEXT_ARG_NAMES target, index, buffer, offset, size
#define glBindBufferRangeEXT_ARG_EXPAND GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size
#define glBindBufferRangeEXT_PACKED PACKED_void_GLenum_GLuint_GLuint_GLintptr_GLsizeiptr
#define glBindBufferRangeEXT_FORMAT FORMAT_void_GLenum_GLuint_GLuint_GLintptr_GLsizeiptr
#define glBindBufferRangeEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBindBufferRangeEXT_NOT_VOID_WRAP(...) {}
#define glBindBufferRangeNV_INDEX 125
#define glBindBufferRangeNV_RETURN void
#define glBindBufferRangeNV_ARG_NAMES target, index, buffer, offset, size
#define glBindBufferRangeNV_ARG_EXPAND GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size
#define glBindBufferRangeNV_PACKED PACKED_void_GLenum_GLuint_GLuint_GLintptr_GLsizeiptr
#define glBindBufferRangeNV_FORMAT FORMAT_void_GLenum_GLuint_GLuint_GLintptr_GLsizeiptr
#define glBindBufferRangeNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBindBufferRangeNV_NOT_VOID_WRAP(...) {}
#define glBindFragDataLocation_INDEX 126
#define glBindFragDataLocation_RETURN void
#define glBindFragDataLocation_ARG_NAMES program, color, name
#define glBindFragDataLocation_ARG_EXPAND GLuint program, GLuint color, const GLchar * name
#define glBindFragDataLocation_PACKED PACKED_void_GLuint_GLuint_const_GLchar___GENPT__
#define glBindFragDataLocation_FORMAT FORMAT_void_GLuint_GLuint_const_GLchar___GENPT__
#define glBindFragDataLocation_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBindFragDataLocation_NOT_VOID_WRAP(...) {}
#define glBindFragDataLocationEXT_INDEX 127
#define glBindFragDataLocationEXT_RETURN void
#define glBindFragDataLocationEXT_ARG_NAMES program, color, name
#define glBindFragDataLocationEXT_ARG_EXPAND GLuint program, GLuint color, const GLchar * name
#define glBindFragDataLocationEXT_PACKED PACKED_void_GLuint_GLuint_const_GLchar___GENPT__
#define glBindFragDataLocationEXT_FORMAT FORMAT_void_GLuint_GLuint_const_GLchar___GENPT__
#define glBindFragDataLocationEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBindFragDataLocationEXT_NOT_VOID_WRAP(...) {}
#define glBindFragDataLocationIndexed_INDEX 128
#define glBindFragDataLocationIndexed_RETURN void
#define glBindFragDataLocationIndexed_ARG_NAMES program, colorNumber, index, name
#define glBindFragDataLocationIndexed_ARG_EXPAND GLuint program, GLuint colorNumber, GLuint index, const GLchar * name
#define glBindFragDataLocationIndexed_PACKED PACKED_void_GLuint_GLuint_GLuint_const_GLchar___GENPT__
#define glBindFragDataLocationIndexed_FORMAT FORMAT_void_GLuint_GLuint_GLuint_const_GLchar___GENPT__
#define glBindFragDataLocationIndexed_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBindFragDataLocationIndexed_NOT_VOID_WRAP(...) {}
#define glBindFragmentShaderATI_INDEX 129
#define glBindFragmentShaderATI_RETURN void
#define glBindFragmentShaderATI_ARG_NAMES id
#define glBindFragmentShaderATI_ARG_EXPAND GLuint id
#define glBindFragmentShaderATI_PACKED PACKED_void_GLuint
#define glBindFragmentShaderATI_FORMAT FORMAT_void_GLuint
#define glBindFragmentShaderATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBindFragmentShaderATI_NOT_VOID_WRAP(...) {}
#define glBindFramebuffer_INDEX 130
#define glBindFramebuffer_RETURN void
#define glBindFramebuffer_ARG_NAMES target, framebuffer
#define glBindFramebuffer_ARG_EXPAND GLenum target, GLuint framebuffer
#define glBindFramebuffer_PACKED PACKED_void_GLenum_GLuint
#define glBindFramebuffer_FORMAT FORMAT_void_GLenum_GLuint
#define glBindFramebuffer_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBindFramebuffer_NOT_VOID_WRAP(...) {}
#define glBindFramebufferEXT_INDEX 131
#define glBindFramebufferEXT_RETURN void
#define glBindFramebufferEXT_ARG_NAMES target, framebuffer
#define glBindFramebufferEXT_ARG_EXPAND GLenum target, GLuint framebuffer
#define glBindFramebufferEXT_PACKED PACKED_void_GLenum_GLuint
#define glBindFramebufferEXT_FORMAT FORMAT_void_GLenum_GLuint
#define glBindFramebufferEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBindFramebufferEXT_NOT_VOID_WRAP(...) {}
#define glBindImageTexture_INDEX 132
#define glBindImageTexture_RETURN void
#define glBindImageTexture_ARG_NAMES unit, texture, level, layered, layer, access, format
#define glBindImageTexture_ARG_EXPAND GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format
#define glBindImageTexture_PACKED PACKED_void_GLuint_GLuint_GLint_GLboolean_GLint_GLenum_GLenum
#define glBindImageTexture_FORMAT FORMAT_void_GLuint_GLuint_GLint_GLboolean_GLint_GLenum_GLenum
#define glBindImageTexture_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBindImageTexture_NOT_VOID_WRAP(...) {}
#define glBindImageTextureEXT_INDEX 133
#define glBindImageTextureEXT_RETURN void
#define glBindImageTextureEXT_ARG_NAMES index, texture, level, layered, layer, access, format
#define glBindImageTextureEXT_ARG_EXPAND GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format
#define glBindImageTextureEXT_PACKED PACKED_void_GLuint_GLuint_GLint_GLboolean_GLint_GLenum_GLint
#define glBindImageTextureEXT_FORMAT FORMAT_void_GLuint_GLuint_GLint_GLboolean_GLint_GLenum_GLint
#define glBindImageTextureEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBindImageTextureEXT_NOT_VOID_WRAP(...) {}
#define glBindLightParameterEXT_INDEX 134
#define glBindLightParameterEXT_RETURN GLuint
#define glBindLightParameterEXT_ARG_NAMES light, value
#define glBindLightParameterEXT_ARG_EXPAND GLenum light, GLenum value
#define glBindLightParameterEXT_PACKED PACKED_GLuint_GLenum_GLenum
#define glBindLightParameterEXT_FORMAT FORMAT_GLuint_GLenum_GLenum
#define glBindLightParameterEXT_VOID_ONLY_WRAP(...) {}
#define glBindLightParameterEXT_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glBindMaterialParameterEXT_INDEX 135
#define glBindMaterialParameterEXT_RETURN GLuint
#define glBindMaterialParameterEXT_ARG_NAMES face, value
#define glBindMaterialParameterEXT_ARG_EXPAND GLenum face, GLenum value
#define glBindMaterialParameterEXT_PACKED PACKED_GLuint_GLenum_GLenum
#define glBindMaterialParameterEXT_FORMAT FORMAT_GLuint_GLenum_GLenum
#define glBindMaterialParameterEXT_VOID_ONLY_WRAP(...) {}
#define glBindMaterialParameterEXT_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glBindMultiTextureEXT_INDEX 136
#define glBindMultiTextureEXT_RETURN void
#define glBindMultiTextureEXT_ARG_NAMES texunit, target, texture
#define glBindMultiTextureEXT_ARG_EXPAND GLenum texunit, GLenum target, GLuint texture
#define glBindMultiTextureEXT_PACKED PACKED_void_GLenum_GLenum_GLuint
#define glBindMultiTextureEXT_FORMAT FORMAT_void_GLenum_GLenum_GLuint
#define glBindMultiTextureEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBindMultiTextureEXT_NOT_VOID_WRAP(...) {}
#define glBindParameterEXT_INDEX 137
#define glBindParameterEXT_RETURN GLuint
#define glBindParameterEXT_ARG_NAMES value
#define glBindParameterEXT_ARG_EXPAND GLenum value
#define glBindParameterEXT_PACKED PACKED_GLuint_GLenum
#define glBindParameterEXT_FORMAT FORMAT_GLuint_GLenum
#define glBindParameterEXT_VOID_ONLY_WRAP(...) {}
#define glBindParameterEXT_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glBindProgramARB_INDEX 138
#define glBindProgramARB_RETURN void
#define glBindProgramARB_ARG_NAMES target, program
#define glBindProgramARB_ARG_EXPAND GLenum target, GLuint program
#define glBindProgramARB_PACKED PACKED_void_GLenum_GLuint
#define glBindProgramARB_FORMAT FORMAT_void_GLenum_GLuint
#define glBindProgramARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBindProgramARB_NOT_VOID_WRAP(...) {}
#define glBindProgramNV_INDEX 139
#define glBindProgramNV_RETURN void
#define glBindProgramNV_ARG_NAMES target, id
#define glBindProgramNV_ARG_EXPAND GLenum target, GLuint id
#define glBindProgramNV_PACKED PACKED_void_GLenum_GLuint
#define glBindProgramNV_FORMAT FORMAT_void_GLenum_GLuint
#define glBindProgramNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBindProgramNV_NOT_VOID_WRAP(...) {}
#define glBindProgramPipeline_INDEX 140
#define glBindProgramPipeline_RETURN void
#define glBindProgramPipeline_ARG_NAMES pipeline
#define glBindProgramPipeline_ARG_EXPAND GLuint pipeline
#define glBindProgramPipeline_PACKED PACKED_void_GLuint
#define glBindProgramPipeline_FORMAT FORMAT_void_GLuint
#define glBindProgramPipeline_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBindProgramPipeline_NOT_VOID_WRAP(...) {}
#define glBindRenderbuffer_INDEX 141
#define glBindRenderbuffer_RETURN void
#define glBindRenderbuffer_ARG_NAMES target, renderbuffer
#define glBindRenderbuffer_ARG_EXPAND GLenum target, GLuint renderbuffer
#define glBindRenderbuffer_PACKED PACKED_void_GLenum_GLuint
#define glBindRenderbuffer_FORMAT FORMAT_void_GLenum_GLuint
#define glBindRenderbuffer_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBindRenderbuffer_NOT_VOID_WRAP(...) {}
#define glBindRenderbufferEXT_INDEX 142
#define glBindRenderbufferEXT_RETURN void
#define glBindRenderbufferEXT_ARG_NAMES target, renderbuffer
#define glBindRenderbufferEXT_ARG_EXPAND GLenum target, GLuint renderbuffer
#define glBindRenderbufferEXT_PACKED PACKED_void_GLenum_GLuint
#define glBindRenderbufferEXT_FORMAT FORMAT_void_GLenum_GLuint
#define glBindRenderbufferEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBindRenderbufferEXT_NOT_VOID_WRAP(...) {}
#define glBindSampler_INDEX 143
#define glBindSampler_RETURN void
#define glBindSampler_ARG_NAMES unit, sampler
#define glBindSampler_ARG_EXPAND GLuint unit, GLuint sampler
#define glBindSampler_PACKED PACKED_void_GLuint_GLuint
#define glBindSampler_FORMAT FORMAT_void_GLuint_GLuint
#define glBindSampler_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBindSampler_NOT_VOID_WRAP(...) {}
#define glBindTexGenParameterEXT_INDEX 144
#define glBindTexGenParameterEXT_RETURN GLuint
#define glBindTexGenParameterEXT_ARG_NAMES unit, coord, value
#define glBindTexGenParameterEXT_ARG_EXPAND GLenum unit, GLenum coord, GLenum value
#define glBindTexGenParameterEXT_PACKED PACKED_GLuint_GLenum_GLenum_GLenum
#define glBindTexGenParameterEXT_FORMAT FORMAT_GLuint_GLenum_GLenum_GLenum
#define glBindTexGenParameterEXT_VOID_ONLY_WRAP(...) {}
#define glBindTexGenParameterEXT_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glBindTexture_INDEX 145
#define glBindTexture_RETURN void
#define glBindTexture_ARG_NAMES target, texture
#define glBindTexture_ARG_EXPAND GLenum target, GLuint texture
#define glBindTexture_PACKED PACKED_void_GLenum_GLuint
#define glBindTexture_FORMAT FORMAT_void_GLenum_GLuint
#define glBindTexture_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBindTexture_NOT_VOID_WRAP(...) {}
#define glBindTextureEXT_INDEX 146
#define glBindTextureEXT_RETURN void
#define glBindTextureEXT_ARG_NAMES target, texture
#define glBindTextureEXT_ARG_EXPAND GLenum target, GLuint texture
#define glBindTextureEXT_PACKED PACKED_void_GLenum_GLuint
#define glBindTextureEXT_FORMAT FORMAT_void_GLenum_GLuint
#define glBindTextureEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBindTextureEXT_NOT_VOID_WRAP(...) {}
#define glBindTextureUnitParameterEXT_INDEX 147
#define glBindTextureUnitParameterEXT_RETURN GLuint
#define glBindTextureUnitParameterEXT_ARG_NAMES unit, value
#define glBindTextureUnitParameterEXT_ARG_EXPAND GLenum unit, GLenum value
#define glBindTextureUnitParameterEXT_PACKED PACKED_GLuint_GLenum_GLenum
#define glBindTextureUnitParameterEXT_FORMAT FORMAT_GLuint_GLenum_GLenum
#define glBindTextureUnitParameterEXT_VOID_ONLY_WRAP(...) {}
#define glBindTextureUnitParameterEXT_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glBindTransformFeedback_INDEX 148
#define glBindTransformFeedback_RETURN void
#define glBindTransformFeedback_ARG_NAMES target, id
#define glBindTransformFeedback_ARG_EXPAND GLenum target, GLuint id
#define glBindTransformFeedback_PACKED PACKED_void_GLenum_GLuint
#define glBindTransformFeedback_FORMAT FORMAT_void_GLenum_GLuint
#define glBindTransformFeedback_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBindTransformFeedback_NOT_VOID_WRAP(...) {}
#define glBindTransformFeedbackNV_INDEX 149
#define glBindTransformFeedbackNV_RETURN void
#define glBindTransformFeedbackNV_ARG_NAMES target, id
#define glBindTransformFeedbackNV_ARG_EXPAND GLenum target, GLuint id
#define glBindTransformFeedbackNV_PACKED PACKED_void_GLenum_GLuint
#define glBindTransformFeedbackNV_FORMAT FORMAT_void_GLenum_GLuint
#define glBindTransformFeedbackNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBindTransformFeedbackNV_NOT_VOID_WRAP(...) {}
#define glBindVertexArray_INDEX 150
#define glBindVertexArray_RETURN void
#define glBindVertexArray_ARG_NAMES array
#define glBindVertexArray_ARG_EXPAND GLuint array
#define glBindVertexArray_PACKED PACKED_void_GLuint
#define glBindVertexArray_FORMAT FORMAT_void_GLuint
#define glBindVertexArray_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBindVertexArray_NOT_VOID_WRAP(...) {}
#define glBindVertexArrayAPPLE_INDEX 151
#define glBindVertexArrayAPPLE_RETURN void
#define glBindVertexArrayAPPLE_ARG_NAMES array
#define glBindVertexArrayAPPLE_ARG_EXPAND GLuint array
#define glBindVertexArrayAPPLE_PACKED PACKED_void_GLuint
#define glBindVertexArrayAPPLE_FORMAT FORMAT_void_GLuint
#define glBindVertexArrayAPPLE_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBindVertexArrayAPPLE_NOT_VOID_WRAP(...) {}
#define glBindVertexBuffer_INDEX 152
#define glBindVertexBuffer_RETURN void
#define glBindVertexBuffer_ARG_NAMES bindingindex, buffer, offset, stride
#define glBindVertexBuffer_ARG_EXPAND GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride
#define glBindVertexBuffer_PACKED PACKED_void_GLuint_GLuint_GLintptr_GLsizei
#define glBindVertexBuffer_FORMAT FORMAT_void_GLuint_GLuint_GLintptr_GLsizei
#define glBindVertexBuffer_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBindVertexBuffer_NOT_VOID_WRAP(...) {}
#define glBindVertexShaderEXT_INDEX 153
#define glBindVertexShaderEXT_RETURN void
#define glBindVertexShaderEXT_ARG_NAMES id
#define glBindVertexShaderEXT_ARG_EXPAND GLuint id
#define glBindVertexShaderEXT_PACKED PACKED_void_GLuint
#define glBindVertexShaderEXT_FORMAT FORMAT_void_GLuint
#define glBindVertexShaderEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBindVertexShaderEXT_NOT_VOID_WRAP(...) {}
#define glBindVideoCaptureStreamBufferNV_INDEX 154
#define glBindVideoCaptureStreamBufferNV_RETURN void
#define glBindVideoCaptureStreamBufferNV_ARG_NAMES video_capture_slot, stream, frame_region, offset
#define glBindVideoCaptureStreamBufferNV_ARG_EXPAND GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset
#define glBindVideoCaptureStreamBufferNV_PACKED PACKED_void_GLuint_GLuint_GLenum_GLintptrARB
#define glBindVideoCaptureStreamBufferNV_FORMAT FORMAT_void_GLuint_GLuint_GLenum_GLintptrARB
#define glBindVideoCaptureStreamBufferNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBindVideoCaptureStreamBufferNV_NOT_VOID_WRAP(...) {}
#define glBindVideoCaptureStreamTextureNV_INDEX 155
#define glBindVideoCaptureStreamTextureNV_RETURN void
#define glBindVideoCaptureStreamTextureNV_ARG_NAMES video_capture_slot, stream, frame_region, target, texture
#define glBindVideoCaptureStreamTextureNV_ARG_EXPAND GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture
#define glBindVideoCaptureStreamTextureNV_PACKED PACKED_void_GLuint_GLuint_GLenum_GLenum_GLuint
#define glBindVideoCaptureStreamTextureNV_FORMAT FORMAT_void_GLuint_GLuint_GLenum_GLenum_GLuint
#define glBindVideoCaptureStreamTextureNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBindVideoCaptureStreamTextureNV_NOT_VOID_WRAP(...) {}
#define glBinormal3bEXT_INDEX 156
#define glBinormal3bEXT_RETURN void
#define glBinormal3bEXT_ARG_NAMES bx, by, bz
#define glBinormal3bEXT_ARG_EXPAND GLbyte bx, GLbyte by, GLbyte bz
#define glBinormal3bEXT_PACKED PACKED_void_GLbyte_GLbyte_GLbyte
#define glBinormal3bEXT_FORMAT FORMAT_void_GLbyte_GLbyte_GLbyte
#define glBinormal3bEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBinormal3bEXT_NOT_VOID_WRAP(...) {}
#define glBinormal3bvEXT_INDEX 157
#define glBinormal3bvEXT_RETURN void
#define glBinormal3bvEXT_ARG_NAMES v
#define glBinormal3bvEXT_ARG_EXPAND const GLbyte * v
#define glBinormal3bvEXT_PACKED PACKED_void_const_GLbyte___GENPT__
#define glBinormal3bvEXT_FORMAT FORMAT_void_const_GLbyte___GENPT__
#define glBinormal3bvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBinormal3bvEXT_NOT_VOID_WRAP(...) {}
#define glBinormal3dEXT_INDEX 158
#define glBinormal3dEXT_RETURN void
#define glBinormal3dEXT_ARG_NAMES bx, by, bz
#define glBinormal3dEXT_ARG_EXPAND GLdouble bx, GLdouble by, GLdouble bz
#define glBinormal3dEXT_PACKED PACKED_void_GLdouble_GLdouble_GLdouble
#define glBinormal3dEXT_FORMAT FORMAT_void_GLdouble_GLdouble_GLdouble
#define glBinormal3dEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBinormal3dEXT_NOT_VOID_WRAP(...) {}
#define glBinormal3dvEXT_INDEX 159
#define glBinormal3dvEXT_RETURN void
#define glBinormal3dvEXT_ARG_NAMES v
#define glBinormal3dvEXT_ARG_EXPAND const GLdouble * v
#define glBinormal3dvEXT_PACKED PACKED_void_const_GLdouble___GENPT__
#define glBinormal3dvEXT_FORMAT FORMAT_void_const_GLdouble___GENPT__
#define glBinormal3dvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBinormal3dvEXT_NOT_VOID_WRAP(...) {}
#define glBinormal3fEXT_INDEX 160
#define glBinormal3fEXT_RETURN void
#define glBinormal3fEXT_ARG_NAMES bx, by, bz
#define glBinormal3fEXT_ARG_EXPAND GLfloat bx, GLfloat by, GLfloat bz
#define glBinormal3fEXT_PACKED PACKED_void_GLfloat_GLfloat_GLfloat
#define glBinormal3fEXT_FORMAT FORMAT_void_GLfloat_GLfloat_GLfloat
#define glBinormal3fEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBinormal3fEXT_NOT_VOID_WRAP(...) {}
#define glBinormal3fvEXT_INDEX 161
#define glBinormal3fvEXT_RETURN void
#define glBinormal3fvEXT_ARG_NAMES v
#define glBinormal3fvEXT_ARG_EXPAND const GLfloat * v
#define glBinormal3fvEXT_PACKED PACKED_void_const_GLfloat___GENPT__
#define glBinormal3fvEXT_FORMAT FORMAT_void_const_GLfloat___GENPT__
#define glBinormal3fvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBinormal3fvEXT_NOT_VOID_WRAP(...) {}
#define glBinormal3iEXT_INDEX 162
#define glBinormal3iEXT_RETURN void
#define glBinormal3iEXT_ARG_NAMES bx, by, bz
#define glBinormal3iEXT_ARG_EXPAND GLint bx, GLint by, GLint bz
#define glBinormal3iEXT_PACKED PACKED_void_GLint_GLint_GLint
#define glBinormal3iEXT_FORMAT FORMAT_void_GLint_GLint_GLint
#define glBinormal3iEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBinormal3iEXT_NOT_VOID_WRAP(...) {}
#define glBinormal3ivEXT_INDEX 163
#define glBinormal3ivEXT_RETURN void
#define glBinormal3ivEXT_ARG_NAMES v
#define glBinormal3ivEXT_ARG_EXPAND const GLint * v
#define glBinormal3ivEXT_PACKED PACKED_void_const_GLint___GENPT__
#define glBinormal3ivEXT_FORMAT FORMAT_void_const_GLint___GENPT__
#define glBinormal3ivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBinormal3ivEXT_NOT_VOID_WRAP(...) {}
#define glBinormal3sEXT_INDEX 164
#define glBinormal3sEXT_RETURN void
#define glBinormal3sEXT_ARG_NAMES bx, by, bz
#define glBinormal3sEXT_ARG_EXPAND GLshort bx, GLshort by, GLshort bz
#define glBinormal3sEXT_PACKED PACKED_void_GLshort_GLshort_GLshort
#define glBinormal3sEXT_FORMAT FORMAT_void_GLshort_GLshort_GLshort
#define glBinormal3sEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBinormal3sEXT_NOT_VOID_WRAP(...) {}
#define glBinormal3svEXT_INDEX 165
#define glBinormal3svEXT_RETURN void
#define glBinormal3svEXT_ARG_NAMES v
#define glBinormal3svEXT_ARG_EXPAND const GLshort * v
#define glBinormal3svEXT_PACKED PACKED_void_const_GLshort___GENPT__
#define glBinormal3svEXT_FORMAT FORMAT_void_const_GLshort___GENPT__
#define glBinormal3svEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBinormal3svEXT_NOT_VOID_WRAP(...) {}
#define glBinormalPointerEXT_INDEX 166
#define glBinormalPointerEXT_RETURN void
#define glBinormalPointerEXT_ARG_NAMES type, stride, pointer
#define glBinormalPointerEXT_ARG_EXPAND GLenum type, GLsizei stride, const GLvoid * pointer
#define glBinormalPointerEXT_PACKED PACKED_void_GLenum_GLsizei_const_GLvoid___GENPT__
#define glBinormalPointerEXT_FORMAT FORMAT_void_GLenum_GLsizei_const_GLvoid___GENPT__
#define glBinormalPointerEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBinormalPointerEXT_NOT_VOID_WRAP(...) {}
#define glBitmap_INDEX 167
#define glBitmap_RETURN void
#define glBitmap_ARG_NAMES width, height, xorig, yorig, xmove, ymove, bitmap
#define glBitmap_ARG_EXPAND GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte * bitmap
#define glBitmap_PACKED PACKED_void_GLsizei_GLsizei_GLfloat_GLfloat_GLfloat_GLfloat_const_GLubyte___GENPT__
#define glBitmap_FORMAT FORMAT_void_GLsizei_GLsizei_GLfloat_GLfloat_GLfloat_GLfloat_const_GLubyte___GENPT__
#define glBitmap_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBitmap_NOT_VOID_WRAP(...) {}
#define glBitmapxOES_INDEX 168
#define glBitmapxOES_RETURN void
#define glBitmapxOES_ARG_NAMES width, height, xorig, yorig, xmove, ymove, bitmap
#define glBitmapxOES_ARG_EXPAND GLsizei width, GLsizei height, GLfixed xorig, GLfixed yorig, GLfixed xmove, GLfixed ymove, const GLubyte * bitmap
#define glBitmapxOES_PACKED PACKED_void_GLsizei_GLsizei_GLfixed_GLfixed_GLfixed_GLfixed_const_GLubyte___GENPT__
#define glBitmapxOES_FORMAT FORMAT_void_GLsizei_GLsizei_GLfixed_GLfixed_GLfixed_GLfixed_const_GLubyte___GENPT__
#define glBitmapxOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBitmapxOES_NOT_VOID_WRAP(...) {}
#define glBlendColor_INDEX 169
#define glBlendColor_RETURN void
#define glBlendColor_ARG_NAMES red, green, blue, alpha
#define glBlendColor_ARG_EXPAND GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha
#define glBlendColor_PACKED PACKED_void_GLfloat_GLfloat_GLfloat_GLfloat
#define glBlendColor_FORMAT FORMAT_void_GLfloat_GLfloat_GLfloat_GLfloat
#define glBlendColor_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBlendColor_NOT_VOID_WRAP(...) {}
#define glBlendColorEXT_INDEX 170
#define glBlendColorEXT_RETURN void
#define glBlendColorEXT_ARG_NAMES red, green, blue, alpha
#define glBlendColorEXT_ARG_EXPAND GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha
#define glBlendColorEXT_PACKED PACKED_void_GLfloat_GLfloat_GLfloat_GLfloat
#define glBlendColorEXT_FORMAT FORMAT_void_GLfloat_GLfloat_GLfloat_GLfloat
#define glBlendColorEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBlendColorEXT_NOT_VOID_WRAP(...) {}
#define glBlendColorOES_INDEX 171
#define glBlendColorOES_RETURN void
#define glBlendColorOES_ARG_NAMES red, green, blue, alpha
#define glBlendColorOES_ARG_EXPAND GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha
#define glBlendColorOES_PACKED PACKED_void_GLclampf_GLclampf_GLclampf_GLclampf
#define glBlendColorOES_FORMAT FORMAT_void_GLclampf_GLclampf_GLclampf_GLclampf
#define glBlendColorOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBlendColorOES_NOT_VOID_WRAP(...) {}
#define glBlendColorxOES_INDEX 172
#define glBlendColorxOES_RETURN void
#define glBlendColorxOES_ARG_NAMES red, green, blue, alpha
#define glBlendColorxOES_ARG_EXPAND GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha
#define glBlendColorxOES_PACKED PACKED_void_GLfixed_GLfixed_GLfixed_GLfixed
#define glBlendColorxOES_FORMAT FORMAT_void_GLfixed_GLfixed_GLfixed_GLfixed
#define glBlendColorxOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBlendColorxOES_NOT_VOID_WRAP(...) {}
#define glBlendEquation_INDEX 173
#define glBlendEquation_RETURN void
#define glBlendEquation_ARG_NAMES mode
#define glBlendEquation_ARG_EXPAND GLenum mode
#define glBlendEquation_PACKED PACKED_void_GLenum
#define glBlendEquation_FORMAT FORMAT_void_GLenum
#define glBlendEquation_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBlendEquation_NOT_VOID_WRAP(...) {}
#define glBlendEquationEXT_INDEX 174
#define glBlendEquationEXT_RETURN void
#define glBlendEquationEXT_ARG_NAMES mode
#define glBlendEquationEXT_ARG_EXPAND GLenum mode
#define glBlendEquationEXT_PACKED PACKED_void_GLenum
#define glBlendEquationEXT_FORMAT FORMAT_void_GLenum
#define glBlendEquationEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBlendEquationEXT_NOT_VOID_WRAP(...) {}
#define glBlendEquationIndexedAMD_INDEX 175
#define glBlendEquationIndexedAMD_RETURN void
#define glBlendEquationIndexedAMD_ARG_NAMES buf, mode
#define glBlendEquationIndexedAMD_ARG_EXPAND GLuint buf, GLenum mode
#define glBlendEquationIndexedAMD_PACKED PACKED_void_GLuint_GLenum
#define glBlendEquationIndexedAMD_FORMAT FORMAT_void_GLuint_GLenum
#define glBlendEquationIndexedAMD_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBlendEquationIndexedAMD_NOT_VOID_WRAP(...) {}
#define glBlendEquationOES_INDEX 176
#define glBlendEquationOES_RETURN void
#define glBlendEquationOES_ARG_NAMES mode
#define glBlendEquationOES_ARG_EXPAND GLenum mode
#define glBlendEquationOES_PACKED PACKED_void_GLenum
#define glBlendEquationOES_FORMAT FORMAT_void_GLenum
#define glBlendEquationOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBlendEquationOES_NOT_VOID_WRAP(...) {}
#define glBlendEquationSeparate_INDEX 177
#define glBlendEquationSeparate_RETURN void
#define glBlendEquationSeparate_ARG_NAMES modeRGB, modeAlpha
#define glBlendEquationSeparate_ARG_EXPAND GLenum modeRGB, GLenum modeAlpha
#define glBlendEquationSeparate_PACKED PACKED_void_GLenum_GLenum
#define glBlendEquationSeparate_FORMAT FORMAT_void_GLenum_GLenum
#define glBlendEquationSeparate_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBlendEquationSeparate_NOT_VOID_WRAP(...) {}
#define glBlendEquationSeparateEXT_INDEX 178
#define glBlendEquationSeparateEXT_RETURN void
#define glBlendEquationSeparateEXT_ARG_NAMES modeRGB, modeAlpha
#define glBlendEquationSeparateEXT_ARG_EXPAND GLenum modeRGB, GLenum modeAlpha
#define glBlendEquationSeparateEXT_PACKED PACKED_void_GLenum_GLenum
#define glBlendEquationSeparateEXT_FORMAT FORMAT_void_GLenum_GLenum
#define glBlendEquationSeparateEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBlendEquationSeparateEXT_NOT_VOID_WRAP(...) {}
#define glBlendEquationSeparateIndexedAMD_INDEX 179
#define glBlendEquationSeparateIndexedAMD_RETURN void
#define glBlendEquationSeparateIndexedAMD_ARG_NAMES buf, modeRGB, modeAlpha
#define glBlendEquationSeparateIndexedAMD_ARG_EXPAND GLuint buf, GLenum modeRGB, GLenum modeAlpha
#define glBlendEquationSeparateIndexedAMD_PACKED PACKED_void_GLuint_GLenum_GLenum
#define glBlendEquationSeparateIndexedAMD_FORMAT FORMAT_void_GLuint_GLenum_GLenum
#define glBlendEquationSeparateIndexedAMD_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBlendEquationSeparateIndexedAMD_NOT_VOID_WRAP(...) {}
#define glBlendEquationSeparateOES_INDEX 180
#define glBlendEquationSeparateOES_RETURN void
#define glBlendEquationSeparateOES_ARG_NAMES modeRGB, modeAlpha
#define glBlendEquationSeparateOES_ARG_EXPAND GLenum modeRGB, GLenum modeAlpha
#define glBlendEquationSeparateOES_PACKED PACKED_void_GLenum_GLenum
#define glBlendEquationSeparateOES_FORMAT FORMAT_void_GLenum_GLenum
#define glBlendEquationSeparateOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBlendEquationSeparateOES_NOT_VOID_WRAP(...) {}
#define glBlendEquationSeparatei_INDEX 181
#define glBlendEquationSeparatei_RETURN void
#define glBlendEquationSeparatei_ARG_NAMES buf, modeRGB, modeAlpha
#define glBlendEquationSeparatei_ARG_EXPAND GLuint buf, GLenum modeRGB, GLenum modeAlpha
#define glBlendEquationSeparatei_PACKED PACKED_void_GLuint_GLenum_GLenum
#define glBlendEquationSeparatei_FORMAT FORMAT_void_GLuint_GLenum_GLenum
#define glBlendEquationSeparatei_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBlendEquationSeparatei_NOT_VOID_WRAP(...) {}
#define glBlendEquationSeparateiARB_INDEX 182
#define glBlendEquationSeparateiARB_RETURN void
#define glBlendEquationSeparateiARB_ARG_NAMES buf, modeRGB, modeAlpha
#define glBlendEquationSeparateiARB_ARG_EXPAND GLuint buf, GLenum modeRGB, GLenum modeAlpha
#define glBlendEquationSeparateiARB_PACKED PACKED_void_GLuint_GLenum_GLenum
#define glBlendEquationSeparateiARB_FORMAT FORMAT_void_GLuint_GLenum_GLenum
#define glBlendEquationSeparateiARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBlendEquationSeparateiARB_NOT_VOID_WRAP(...) {}
#define glBlendEquationi_INDEX 183
#define glBlendEquationi_RETURN void
#define glBlendEquationi_ARG_NAMES buf, mode
#define glBlendEquationi_ARG_EXPAND GLuint buf, GLenum mode
#define glBlendEquationi_PACKED PACKED_void_GLuint_GLenum
#define glBlendEquationi_FORMAT FORMAT_void_GLuint_GLenum
#define glBlendEquationi_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBlendEquationi_NOT_VOID_WRAP(...) {}
#define glBlendEquationiARB_INDEX 184
#define glBlendEquationiARB_RETURN void
#define glBlendEquationiARB_ARG_NAMES buf, mode
#define glBlendEquationiARB_ARG_EXPAND GLuint buf, GLenum mode
#define glBlendEquationiARB_PACKED PACKED_void_GLuint_GLenum
#define glBlendEquationiARB_FORMAT FORMAT_void_GLuint_GLenum
#define glBlendEquationiARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBlendEquationiARB_NOT_VOID_WRAP(...) {}
#define glBlendFunc_INDEX 185
#define glBlendFunc_RETURN void
#define glBlendFunc_ARG_NAMES sfactor, dfactor
#define glBlendFunc_ARG_EXPAND GLenum sfactor, GLenum dfactor
#define glBlendFunc_PACKED PACKED_void_GLenum_GLenum
#define glBlendFunc_FORMAT FORMAT_void_GLenum_GLenum
#define glBlendFunc_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBlendFunc_NOT_VOID_WRAP(...) {}
#define glBlendFuncIndexedAMD_INDEX 186
#define glBlendFuncIndexedAMD_RETURN void
#define glBlendFuncIndexedAMD_ARG_NAMES buf, src, dst
#define glBlendFuncIndexedAMD_ARG_EXPAND GLuint buf, GLenum src, GLenum dst
#define glBlendFuncIndexedAMD_PACKED PACKED_void_GLuint_GLenum_GLenum
#define glBlendFuncIndexedAMD_FORMAT FORMAT_void_GLuint_GLenum_GLenum
#define glBlendFuncIndexedAMD_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBlendFuncIndexedAMD_NOT_VOID_WRAP(...) {}
#define glBlendFuncSeparate_INDEX 187
#define glBlendFuncSeparate_RETURN void
#define glBlendFuncSeparate_ARG_NAMES sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha
#define glBlendFuncSeparate_ARG_EXPAND GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha
#define glBlendFuncSeparate_PACKED PACKED_void_GLenum_GLenum_GLenum_GLenum
#define glBlendFuncSeparate_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLenum
#define glBlendFuncSeparate_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBlendFuncSeparate_NOT_VOID_WRAP(...) {}
#define glBlendFuncSeparateEXT_INDEX 188
#define glBlendFuncSeparateEXT_RETURN void
#define glBlendFuncSeparateEXT_ARG_NAMES sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha
#define glBlendFuncSeparateEXT_ARG_EXPAND GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha
#define glBlendFuncSeparateEXT_PACKED PACKED_void_GLenum_GLenum_GLenum_GLenum
#define glBlendFuncSeparateEXT_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLenum
#define glBlendFuncSeparateEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBlendFuncSeparateEXT_NOT_VOID_WRAP(...) {}
#define glBlendFuncSeparateINGR_INDEX 189
#define glBlendFuncSeparateINGR_RETURN void
#define glBlendFuncSeparateINGR_ARG_NAMES sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha
#define glBlendFuncSeparateINGR_ARG_EXPAND GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha
#define glBlendFuncSeparateINGR_PACKED PACKED_void_GLenum_GLenum_GLenum_GLenum
#define glBlendFuncSeparateINGR_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLenum
#define glBlendFuncSeparateINGR_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBlendFuncSeparateINGR_NOT_VOID_WRAP(...) {}
#define glBlendFuncSeparateIndexedAMD_INDEX 190
#define glBlendFuncSeparateIndexedAMD_RETURN void
#define glBlendFuncSeparateIndexedAMD_ARG_NAMES buf, srcRGB, dstRGB, srcAlpha, dstAlpha
#define glBlendFuncSeparateIndexedAMD_ARG_EXPAND GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha
#define glBlendFuncSeparateIndexedAMD_PACKED PACKED_void_GLuint_GLenum_GLenum_GLenum_GLenum
#define glBlendFuncSeparateIndexedAMD_FORMAT FORMAT_void_GLuint_GLenum_GLenum_GLenum_GLenum
#define glBlendFuncSeparateIndexedAMD_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBlendFuncSeparateIndexedAMD_NOT_VOID_WRAP(...) {}
#define glBlendFuncSeparateOES_INDEX 191
#define glBlendFuncSeparateOES_RETURN void
#define glBlendFuncSeparateOES_ARG_NAMES sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha
#define glBlendFuncSeparateOES_ARG_EXPAND GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha
#define glBlendFuncSeparateOES_PACKED PACKED_void_GLenum_GLenum_GLenum_GLenum
#define glBlendFuncSeparateOES_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLenum
#define glBlendFuncSeparateOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBlendFuncSeparateOES_NOT_VOID_WRAP(...) {}
#define glBlendFuncSeparatei_INDEX 192
#define glBlendFuncSeparatei_RETURN void
#define glBlendFuncSeparatei_ARG_NAMES buf, srcRGB, dstRGB, srcAlpha, dstAlpha
#define glBlendFuncSeparatei_ARG_EXPAND GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha
#define glBlendFuncSeparatei_PACKED PACKED_void_GLuint_GLenum_GLenum_GLenum_GLenum
#define glBlendFuncSeparatei_FORMAT FORMAT_void_GLuint_GLenum_GLenum_GLenum_GLenum
#define glBlendFuncSeparatei_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBlendFuncSeparatei_NOT_VOID_WRAP(...) {}
#define glBlendFuncSeparateiARB_INDEX 193
#define glBlendFuncSeparateiARB_RETURN void
#define glBlendFuncSeparateiARB_ARG_NAMES buf, srcRGB, dstRGB, srcAlpha, dstAlpha
#define glBlendFuncSeparateiARB_ARG_EXPAND GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha
#define glBlendFuncSeparateiARB_PACKED PACKED_void_GLuint_GLenum_GLenum_GLenum_GLenum
#define glBlendFuncSeparateiARB_FORMAT FORMAT_void_GLuint_GLenum_GLenum_GLenum_GLenum
#define glBlendFuncSeparateiARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBlendFuncSeparateiARB_NOT_VOID_WRAP(...) {}
#define glBlendFunci_INDEX 194
#define glBlendFunci_RETURN void
#define glBlendFunci_ARG_NAMES buf, src, dst
#define glBlendFunci_ARG_EXPAND GLuint buf, GLenum src, GLenum dst
#define glBlendFunci_PACKED PACKED_void_GLuint_GLenum_GLenum
#define glBlendFunci_FORMAT FORMAT_void_GLuint_GLenum_GLenum
#define glBlendFunci_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBlendFunci_NOT_VOID_WRAP(...) {}
#define glBlendFunciARB_INDEX 195
#define glBlendFunciARB_RETURN void
#define glBlendFunciARB_ARG_NAMES buf, src, dst
#define glBlendFunciARB_ARG_EXPAND GLuint buf, GLenum src, GLenum dst
#define glBlendFunciARB_PACKED PACKED_void_GLuint_GLenum_GLenum
#define glBlendFunciARB_FORMAT FORMAT_void_GLuint_GLenum_GLenum
#define glBlendFunciARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBlendFunciARB_NOT_VOID_WRAP(...) {}
#define glBlitFramebuffer_INDEX 196
#define glBlitFramebuffer_RETURN void
#define glBlitFramebuffer_ARG_NAMES srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter
#define glBlitFramebuffer_ARG_EXPAND GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter
#define glBlitFramebuffer_PACKED PACKED_void_GLint_GLint_GLint_GLint_GLint_GLint_GLint_GLint_GLbitfield_GLenum
#define glBlitFramebuffer_FORMAT FORMAT_void_GLint_GLint_GLint_GLint_GLint_GLint_GLint_GLint_GLbitfield_GLenum
#define glBlitFramebuffer_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBlitFramebuffer_NOT_VOID_WRAP(...) {}
#define glBlitFramebufferEXT_INDEX 197
#define glBlitFramebufferEXT_RETURN void
#define glBlitFramebufferEXT_ARG_NAMES srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter
#define glBlitFramebufferEXT_ARG_EXPAND GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter
#define glBlitFramebufferEXT_PACKED PACKED_void_GLint_GLint_GLint_GLint_GLint_GLint_GLint_GLint_GLbitfield_GLenum
#define glBlitFramebufferEXT_FORMAT FORMAT_void_GLint_GLint_GLint_GLint_GLint_GLint_GLint_GLint_GLbitfield_GLenum
#define glBlitFramebufferEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBlitFramebufferEXT_NOT_VOID_WRAP(...) {}
#define glBufferAddressRangeNV_INDEX 198
#define glBufferAddressRangeNV_RETURN void
#define glBufferAddressRangeNV_ARG_NAMES pname, index, address, length
#define glBufferAddressRangeNV_ARG_EXPAND GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length
#define glBufferAddressRangeNV_PACKED PACKED_void_GLenum_GLuint_GLuint64EXT_GLsizeiptr
#define glBufferAddressRangeNV_FORMAT FORMAT_void_GLenum_GLuint_GLuint64EXT_GLsizeiptr
#define glBufferAddressRangeNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBufferAddressRangeNV_NOT_VOID_WRAP(...) {}
#define glBufferData_INDEX 199
#define glBufferData_RETURN void
#define glBufferData_ARG_NAMES target, size, data, usage
#define glBufferData_ARG_EXPAND GLenum target, GLsizeiptr size, const GLvoid * data, GLenum usage
#define glBufferData_PACKED PACKED_void_GLenum_GLsizeiptr_const_GLvoid___GENPT___GLenum
#define glBufferData_FORMAT FORMAT_void_GLenum_GLsizeiptr_const_GLvoid___GENPT___GLenum
#define glBufferData_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBufferData_NOT_VOID_WRAP(...) {}
#define glBufferDataARB_INDEX 200
#define glBufferDataARB_RETURN void
#define glBufferDataARB_ARG_NAMES target, size, data, usage
#define glBufferDataARB_ARG_EXPAND GLenum target, GLsizeiptrARB size, const GLvoid * data, GLenum usage
#define glBufferDataARB_PACKED PACKED_void_GLenum_GLsizeiptrARB_const_GLvoid___GENPT___GLenum
#define glBufferDataARB_FORMAT FORMAT_void_GLenum_GLsizeiptrARB_const_GLvoid___GENPT___GLenum
#define glBufferDataARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBufferDataARB_NOT_VOID_WRAP(...) {}
#define glBufferParameteriAPPLE_INDEX 201
#define glBufferParameteriAPPLE_RETURN void
#define glBufferParameteriAPPLE_ARG_NAMES target, pname, param
#define glBufferParameteriAPPLE_ARG_EXPAND GLenum target, GLenum pname, GLint param
#define glBufferParameteriAPPLE_PACKED PACKED_void_GLenum_GLenum_GLint
#define glBufferParameteriAPPLE_FORMAT FORMAT_void_GLenum_GLenum_GLint
#define glBufferParameteriAPPLE_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBufferParameteriAPPLE_NOT_VOID_WRAP(...) {}
#define glBufferSubData_INDEX 202
#define glBufferSubData_RETURN void
#define glBufferSubData_ARG_NAMES target, offset, size, data
#define glBufferSubData_ARG_EXPAND GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid * data
#define glBufferSubData_PACKED PACKED_void_GLenum_GLintptr_GLsizeiptr_const_GLvoid___GENPT__
#define glBufferSubData_FORMAT FORMAT_void_GLenum_GLintptr_GLsizeiptr_const_GLvoid___GENPT__
#define glBufferSubData_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBufferSubData_NOT_VOID_WRAP(...) {}
#define glBufferSubDataARB_INDEX 203
#define glBufferSubDataARB_RETURN void
#define glBufferSubDataARB_ARG_NAMES target, offset, size, data
#define glBufferSubDataARB_ARG_EXPAND GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid * data
#define glBufferSubDataARB_PACKED PACKED_void_GLenum_GLintptrARB_GLsizeiptrARB_const_GLvoid___GENPT__
#define glBufferSubDataARB_FORMAT FORMAT_void_GLenum_GLintptrARB_GLsizeiptrARB_const_GLvoid___GENPT__
#define glBufferSubDataARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glBufferSubDataARB_NOT_VOID_WRAP(...) {}
#define glCallList_INDEX 204
#define glCallList_RETURN void
#define glCallList_ARG_NAMES list
#define glCallList_ARG_EXPAND GLuint list
#define glCallList_PACKED PACKED_void_GLuint
#define glCallList_FORMAT FORMAT_void_GLuint
#define glCallList_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCallList_NOT_VOID_WRAP(...) {}
#define glCallLists_INDEX 205
#define glCallLists_RETURN void
#define glCallLists_ARG_NAMES n, type, lists
#define glCallLists_ARG_EXPAND GLsizei n, GLenum type, const GLvoid * lists
#define glCallLists_PACKED PACKED_void_GLsizei_GLenum_const_GLvoid___GENPT__
#define glCallLists_FORMAT FORMAT_void_GLsizei_GLenum_const_GLvoid___GENPT__
#define glCallLists_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCallLists_NOT_VOID_WRAP(...) {}
#define glCheckFramebufferStatus_INDEX 206
#define glCheckFramebufferStatus_RETURN GLenum
#define glCheckFramebufferStatus_ARG_NAMES target
#define glCheckFramebufferStatus_ARG_EXPAND GLenum target
#define glCheckFramebufferStatus_PACKED PACKED_GLenum_GLenum
#define glCheckFramebufferStatus_FORMAT FORMAT_GLenum_GLenum
#define glCheckFramebufferStatus_VOID_ONLY_WRAP(...) {}
#define glCheckFramebufferStatus_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glCheckFramebufferStatusEXT_INDEX 207
#define glCheckFramebufferStatusEXT_RETURN GLenum
#define glCheckFramebufferStatusEXT_ARG_NAMES target
#define glCheckFramebufferStatusEXT_ARG_EXPAND GLenum target
#define glCheckFramebufferStatusEXT_PACKED PACKED_GLenum_GLenum
#define glCheckFramebufferStatusEXT_FORMAT FORMAT_GLenum_GLenum
#define glCheckFramebufferStatusEXT_VOID_ONLY_WRAP(...) {}
#define glCheckFramebufferStatusEXT_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glCheckNamedFramebufferStatusEXT_INDEX 208
#define glCheckNamedFramebufferStatusEXT_RETURN GLenum
#define glCheckNamedFramebufferStatusEXT_ARG_NAMES framebuffer, target
#define glCheckNamedFramebufferStatusEXT_ARG_EXPAND GLuint framebuffer, GLenum target
#define glCheckNamedFramebufferStatusEXT_PACKED PACKED_GLenum_GLuint_GLenum
#define glCheckNamedFramebufferStatusEXT_FORMAT FORMAT_GLenum_GLuint_GLenum
#define glCheckNamedFramebufferStatusEXT_VOID_ONLY_WRAP(...) {}
#define glCheckNamedFramebufferStatusEXT_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glClampColor_INDEX 209
#define glClampColor_RETURN void
#define glClampColor_ARG_NAMES target, clamp
#define glClampColor_ARG_EXPAND GLenum target, GLenum clamp
#define glClampColor_PACKED PACKED_void_GLenum_GLenum
#define glClampColor_FORMAT FORMAT_void_GLenum_GLenum
#define glClampColor_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glClampColor_NOT_VOID_WRAP(...) {}
#define glClampColorARB_INDEX 210
#define glClampColorARB_RETURN void
#define glClampColorARB_ARG_NAMES target, clamp
#define glClampColorARB_ARG_EXPAND GLenum target, GLenum clamp
#define glClampColorARB_PACKED PACKED_void_GLenum_GLenum
#define glClampColorARB_FORMAT FORMAT_void_GLenum_GLenum
#define glClampColorARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glClampColorARB_NOT_VOID_WRAP(...) {}
#define glClear_INDEX 211
#define glClear_RETURN void
#define glClear_ARG_NAMES mask
#define glClear_ARG_EXPAND GLbitfield mask
#define glClear_PACKED PACKED_void_GLbitfield
#define glClear_FORMAT FORMAT_void_GLbitfield
#define glClear_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glClear_NOT_VOID_WRAP(...) {}
#define glClearAccum_INDEX 212
#define glClearAccum_RETURN void
#define glClearAccum_ARG_NAMES red, green, blue, alpha
#define glClearAccum_ARG_EXPAND GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha
#define glClearAccum_PACKED PACKED_void_GLfloat_GLfloat_GLfloat_GLfloat
#define glClearAccum_FORMAT FORMAT_void_GLfloat_GLfloat_GLfloat_GLfloat
#define glClearAccum_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glClearAccum_NOT_VOID_WRAP(...) {}
#define glClearAccumxOES_INDEX 213
#define glClearAccumxOES_RETURN void
#define glClearAccumxOES_ARG_NAMES red, green, blue, alpha
#define glClearAccumxOES_ARG_EXPAND GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha
#define glClearAccumxOES_PACKED PACKED_void_GLfixed_GLfixed_GLfixed_GLfixed
#define glClearAccumxOES_FORMAT FORMAT_void_GLfixed_GLfixed_GLfixed_GLfixed
#define glClearAccumxOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glClearAccumxOES_NOT_VOID_WRAP(...) {}
#define glClearBufferData_INDEX 214
#define glClearBufferData_RETURN void
#define glClearBufferData_ARG_NAMES target, internalformat, format, type, data
#define glClearBufferData_ARG_EXPAND GLenum target, GLenum internalformat, GLenum format, GLenum type, const void * data
#define glClearBufferData_PACKED PACKED_void_GLenum_GLenum_GLenum_GLenum_const_void___GENPT__
#define glClearBufferData_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLenum_const_void___GENPT__
#define glClearBufferData_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glClearBufferData_NOT_VOID_WRAP(...) {}
#define glClearBufferSubData_INDEX 215
#define glClearBufferSubData_RETURN void
#define glClearBufferSubData_ARG_NAMES target, internalformat, offset, size, format, type, data
#define glClearBufferSubData_ARG_EXPAND GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data
#define glClearBufferSubData_PACKED PACKED_void_GLenum_GLenum_GLintptr_GLsizeiptr_GLenum_GLenum_const_void___GENPT__
#define glClearBufferSubData_FORMAT FORMAT_void_GLenum_GLenum_GLintptr_GLsizeiptr_GLenum_GLenum_const_void___GENPT__
#define glClearBufferSubData_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glClearBufferSubData_NOT_VOID_WRAP(...) {}
#define glClearBufferfi_INDEX 216
#define glClearBufferfi_RETURN void
#define glClearBufferfi_ARG_NAMES buffer, drawbuffer, depth, stencil
#define glClearBufferfi_ARG_EXPAND GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil
#define glClearBufferfi_PACKED PACKED_void_GLenum_GLint_GLfloat_GLint
#define glClearBufferfi_FORMAT FORMAT_void_GLenum_GLint_GLfloat_GLint
#define glClearBufferfi_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glClearBufferfi_NOT_VOID_WRAP(...) {}
#define glClearBufferfv_INDEX 217
#define glClearBufferfv_RETURN void
#define glClearBufferfv_ARG_NAMES buffer, drawbuffer, value
#define glClearBufferfv_ARG_EXPAND GLenum buffer, GLint drawbuffer, const GLfloat * value
#define glClearBufferfv_PACKED PACKED_void_GLenum_GLint_const_GLfloat___GENPT__
#define glClearBufferfv_FORMAT FORMAT_void_GLenum_GLint_const_GLfloat___GENPT__
#define glClearBufferfv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glClearBufferfv_NOT_VOID_WRAP(...) {}
#define glClearBufferiv_INDEX 218
#define glClearBufferiv_RETURN void
#define glClearBufferiv_ARG_NAMES buffer, drawbuffer, value
#define glClearBufferiv_ARG_EXPAND GLenum buffer, GLint drawbuffer, const GLint * value
#define glClearBufferiv_PACKED PACKED_void_GLenum_GLint_const_GLint___GENPT__
#define glClearBufferiv_FORMAT FORMAT_void_GLenum_GLint_const_GLint___GENPT__
#define glClearBufferiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glClearBufferiv_NOT_VOID_WRAP(...) {}
#define glClearBufferuiv_INDEX 219
#define glClearBufferuiv_RETURN void
#define glClearBufferuiv_ARG_NAMES buffer, drawbuffer, value
#define glClearBufferuiv_ARG_EXPAND GLenum buffer, GLint drawbuffer, const GLuint * value
#define glClearBufferuiv_PACKED PACKED_void_GLenum_GLint_const_GLuint___GENPT__
#define glClearBufferuiv_FORMAT FORMAT_void_GLenum_GLint_const_GLuint___GENPT__
#define glClearBufferuiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glClearBufferuiv_NOT_VOID_WRAP(...) {}
#define glClearColor_INDEX 220
#define glClearColor_RETURN void
#define glClearColor_ARG_NAMES red, green, blue, alpha
#define glClearColor_ARG_EXPAND GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha
#define glClearColor_PACKED PACKED_void_GLclampf_GLclampf_GLclampf_GLclampf
#define glClearColor_FORMAT FORMAT_void_GLclampf_GLclampf_GLclampf_GLclampf
#define glClearColor_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glClearColor_NOT_VOID_WRAP(...) {}
#define glClearColorIiEXT_INDEX 221
#define glClearColorIiEXT_RETURN void
#define glClearColorIiEXT_ARG_NAMES red, green, blue, alpha
#define glClearColorIiEXT_ARG_EXPAND GLint red, GLint green, GLint blue, GLint alpha
#define glClearColorIiEXT_PACKED PACKED_void_GLint_GLint_GLint_GLint
#define glClearColorIiEXT_FORMAT FORMAT_void_GLint_GLint_GLint_GLint
#define glClearColorIiEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glClearColorIiEXT_NOT_VOID_WRAP(...) {}
#define glClearColorIuiEXT_INDEX 222
#define glClearColorIuiEXT_RETURN void
#define glClearColorIuiEXT_ARG_NAMES red, green, blue, alpha
#define glClearColorIuiEXT_ARG_EXPAND GLuint red, GLuint green, GLuint blue, GLuint alpha
#define glClearColorIuiEXT_PACKED PACKED_void_GLuint_GLuint_GLuint_GLuint
#define glClearColorIuiEXT_FORMAT FORMAT_void_GLuint_GLuint_GLuint_GLuint
#define glClearColorIuiEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glClearColorIuiEXT_NOT_VOID_WRAP(...) {}
#define glClearColorx_INDEX 223
#define glClearColorx_RETURN void
#define glClearColorx_ARG_NAMES red, green, blue, alpha
#define glClearColorx_ARG_EXPAND GLclampx red, GLclampx green, GLclampx blue, GLclampx alpha
#define glClearColorx_PACKED PACKED_void_GLclampx_GLclampx_GLclampx_GLclampx
#define glClearColorx_FORMAT FORMAT_void_GLclampx_GLclampx_GLclampx_GLclampx
#define glClearColorx_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glClearColorx_NOT_VOID_WRAP(...) {}
#define glClearColorxOES_INDEX 224
#define glClearColorxOES_RETURN void
#define glClearColorxOES_ARG_NAMES red, green, blue, alpha
#define glClearColorxOES_ARG_EXPAND GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha
#define glClearColorxOES_PACKED PACKED_void_GLfixed_GLfixed_GLfixed_GLfixed
#define glClearColorxOES_FORMAT FORMAT_void_GLfixed_GLfixed_GLfixed_GLfixed
#define glClearColorxOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glClearColorxOES_NOT_VOID_WRAP(...) {}
#define glClearDepth_INDEX 225
#define glClearDepth_RETURN void
#define glClearDepth_ARG_NAMES depth
#define glClearDepth_ARG_EXPAND GLdouble depth
#define glClearDepth_PACKED PACKED_void_GLdouble
#define glClearDepth_FORMAT FORMAT_void_GLdouble
#define glClearDepth_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glClearDepth_NOT_VOID_WRAP(...) {}
#define glClearDepthdNV_INDEX 226
#define glClearDepthdNV_RETURN void
#define glClearDepthdNV_ARG_NAMES depth
#define glClearDepthdNV_ARG_EXPAND GLdouble depth
#define glClearDepthdNV_PACKED PACKED_void_GLdouble
#define glClearDepthdNV_FORMAT FORMAT_void_GLdouble
#define glClearDepthdNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glClearDepthdNV_NOT_VOID_WRAP(...) {}
#define glClearDepthf_INDEX 227
#define glClearDepthf_RETURN void
#define glClearDepthf_ARG_NAMES depth
#define glClearDepthf_ARG_EXPAND GLclampf depth
#define glClearDepthf_PACKED PACKED_void_GLclampf
#define glClearDepthf_FORMAT FORMAT_void_GLclampf
#define glClearDepthf_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glClearDepthf_NOT_VOID_WRAP(...) {}
#define glClearDepthfOES_INDEX 228
#define glClearDepthfOES_RETURN void
#define glClearDepthfOES_ARG_NAMES depth
#define glClearDepthfOES_ARG_EXPAND GLclampf depth
#define glClearDepthfOES_PACKED PACKED_void_GLclampf
#define glClearDepthfOES_FORMAT FORMAT_void_GLclampf
#define glClearDepthfOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glClearDepthfOES_NOT_VOID_WRAP(...) {}
#define glClearDepthx_INDEX 229
#define glClearDepthx_RETURN void
#define glClearDepthx_ARG_NAMES depth
#define glClearDepthx_ARG_EXPAND GLclampx depth
#define glClearDepthx_PACKED PACKED_void_GLclampx
#define glClearDepthx_FORMAT FORMAT_void_GLclampx
#define glClearDepthx_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glClearDepthx_NOT_VOID_WRAP(...) {}
#define glClearDepthxOES_INDEX 230
#define glClearDepthxOES_RETURN void
#define glClearDepthxOES_ARG_NAMES depth
#define glClearDepthxOES_ARG_EXPAND GLfixed depth
#define glClearDepthxOES_PACKED PACKED_void_GLfixed
#define glClearDepthxOES_FORMAT FORMAT_void_GLfixed
#define glClearDepthxOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glClearDepthxOES_NOT_VOID_WRAP(...) {}
#define glClearIndex_INDEX 231
#define glClearIndex_RETURN void
#define glClearIndex_ARG_NAMES c
#define glClearIndex_ARG_EXPAND GLfloat c
#define glClearIndex_PACKED PACKED_void_GLfloat
#define glClearIndex_FORMAT FORMAT_void_GLfloat
#define glClearIndex_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glClearIndex_NOT_VOID_WRAP(...) {}
#define glClearNamedBufferDataEXT_INDEX 232
#define glClearNamedBufferDataEXT_RETURN void
#define glClearNamedBufferDataEXT_ARG_NAMES buffer, internalformat, format, type, data
#define glClearNamedBufferDataEXT_ARG_EXPAND GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void * data
#define glClearNamedBufferDataEXT_PACKED PACKED_void_GLuint_GLenum_GLenum_GLenum_const_void___GENPT__
#define glClearNamedBufferDataEXT_FORMAT FORMAT_void_GLuint_GLenum_GLenum_GLenum_const_void___GENPT__
#define glClearNamedBufferDataEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glClearNamedBufferDataEXT_NOT_VOID_WRAP(...) {}
#define glClearNamedBufferSubDataEXT_INDEX 233
#define glClearNamedBufferSubDataEXT_RETURN void
#define glClearNamedBufferSubDataEXT_ARG_NAMES buffer, internalformat, format, type, offset, size, data
#define glClearNamedBufferSubDataEXT_ARG_EXPAND GLuint buffer, GLenum internalformat, GLenum format, GLenum type, GLsizeiptr offset, GLsizeiptr size, const void * data
#define glClearNamedBufferSubDataEXT_PACKED PACKED_void_GLuint_GLenum_GLenum_GLenum_GLsizeiptr_GLsizeiptr_const_void___GENPT__
#define glClearNamedBufferSubDataEXT_FORMAT FORMAT_void_GLuint_GLenum_GLenum_GLenum_GLsizeiptr_GLsizeiptr_const_void___GENPT__
#define glClearNamedBufferSubDataEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glClearNamedBufferSubDataEXT_NOT_VOID_WRAP(...) {}
#define glClearStencil_INDEX 234
#define glClearStencil_RETURN void
#define glClearStencil_ARG_NAMES s
#define glClearStencil_ARG_EXPAND GLint s
#define glClearStencil_PACKED PACKED_void_GLint
#define glClearStencil_FORMAT FORMAT_void_GLint
#define glClearStencil_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glClearStencil_NOT_VOID_WRAP(...) {}
#define glClientActiveTexture_INDEX 235
#define glClientActiveTexture_RETURN void
#define glClientActiveTexture_ARG_NAMES texture
#define glClientActiveTexture_ARG_EXPAND GLenum texture
#define glClientActiveTexture_PACKED PACKED_void_GLenum
#define glClientActiveTexture_FORMAT FORMAT_void_GLenum
#define glClientActiveTexture_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glClientActiveTexture_NOT_VOID_WRAP(...) {}
#define glClientActiveTextureARB_INDEX 236
#define glClientActiveTextureARB_RETURN void
#define glClientActiveTextureARB_ARG_NAMES texture
#define glClientActiveTextureARB_ARG_EXPAND GLenum texture
#define glClientActiveTextureARB_PACKED PACKED_void_GLenum
#define glClientActiveTextureARB_FORMAT FORMAT_void_GLenum
#define glClientActiveTextureARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glClientActiveTextureARB_NOT_VOID_WRAP(...) {}
#define glClientActiveVertexStreamATI_INDEX 237
#define glClientActiveVertexStreamATI_RETURN void
#define glClientActiveVertexStreamATI_ARG_NAMES stream
#define glClientActiveVertexStreamATI_ARG_EXPAND GLenum stream
#define glClientActiveVertexStreamATI_PACKED PACKED_void_GLenum
#define glClientActiveVertexStreamATI_FORMAT FORMAT_void_GLenum
#define glClientActiveVertexStreamATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glClientActiveVertexStreamATI_NOT_VOID_WRAP(...) {}
#define glClientAttribDefaultEXT_INDEX 238
#define glClientAttribDefaultEXT_RETURN void
#define glClientAttribDefaultEXT_ARG_NAMES mask
#define glClientAttribDefaultEXT_ARG_EXPAND GLbitfield mask
#define glClientAttribDefaultEXT_PACKED PACKED_void_GLbitfield
#define glClientAttribDefaultEXT_FORMAT FORMAT_void_GLbitfield
#define glClientAttribDefaultEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glClientAttribDefaultEXT_NOT_VOID_WRAP(...) {}
#define glClientWaitSync_INDEX 239
#define glClientWaitSync_RETURN GLenum
#define glClientWaitSync_ARG_NAMES sync, flags, timeout
#define glClientWaitSync_ARG_EXPAND GLsync sync, GLbitfield flags, GLuint64 timeout
#define glClientWaitSync_PACKED PACKED_GLenum_GLsync_GLbitfield_GLuint64
#define glClientWaitSync_FORMAT FORMAT_GLenum_GLsync_GLbitfield_GLuint64
#define glClientWaitSync_VOID_ONLY_WRAP(...) {}
#define glClientWaitSync_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glClipPlane_INDEX 240
#define glClipPlane_RETURN void
#define glClipPlane_ARG_NAMES plane, equation
#define glClipPlane_ARG_EXPAND GLenum plane, const GLdouble * equation
#define glClipPlane_PACKED PACKED_void_GLenum_const_GLdouble___GENPT__
#define glClipPlane_FORMAT FORMAT_void_GLenum_const_GLdouble___GENPT__
#define glClipPlane_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glClipPlane_NOT_VOID_WRAP(...) {}
#define glClipPlanef_INDEX 241
#define glClipPlanef_RETURN void
#define glClipPlanef_ARG_NAMES plane, equation
#define glClipPlanef_ARG_EXPAND GLenum plane, const GLfloat * equation
#define glClipPlanef_PACKED PACKED_void_GLenum_const_GLfloat___GENPT__
#define glClipPlanef_FORMAT FORMAT_void_GLenum_const_GLfloat___GENPT__
#define glClipPlanef_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glClipPlanef_NOT_VOID_WRAP(...) {}
#define glClipPlanefOES_INDEX 242
#define glClipPlanefOES_RETURN void
#define glClipPlanefOES_ARG_NAMES plane, equation
#define glClipPlanefOES_ARG_EXPAND GLenum plane, const GLfloat * equation
#define glClipPlanefOES_PACKED PACKED_void_GLenum_const_GLfloat___GENPT__
#define glClipPlanefOES_FORMAT FORMAT_void_GLenum_const_GLfloat___GENPT__
#define glClipPlanefOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glClipPlanefOES_NOT_VOID_WRAP(...) {}
#define glClipPlanex_INDEX 243
#define glClipPlanex_RETURN void
#define glClipPlanex_ARG_NAMES plane, equation
#define glClipPlanex_ARG_EXPAND GLenum plane, const GLfixed * equation
#define glClipPlanex_PACKED PACKED_void_GLenum_const_GLfixed___GENPT__
#define glClipPlanex_FORMAT FORMAT_void_GLenum_const_GLfixed___GENPT__
#define glClipPlanex_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glClipPlanex_NOT_VOID_WRAP(...) {}
#define glClipPlanexOES_INDEX 244
#define glClipPlanexOES_RETURN void
#define glClipPlanexOES_ARG_NAMES plane, equation
#define glClipPlanexOES_ARG_EXPAND GLenum plane, const GLfixed * equation
#define glClipPlanexOES_PACKED PACKED_void_GLenum_const_GLfixed___GENPT__
#define glClipPlanexOES_FORMAT FORMAT_void_GLenum_const_GLfixed___GENPT__
#define glClipPlanexOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glClipPlanexOES_NOT_VOID_WRAP(...) {}
#define glColor3b_INDEX 245
#define glColor3b_RETURN void
#define glColor3b_ARG_NAMES red, green, blue
#define glColor3b_ARG_EXPAND GLbyte red, GLbyte green, GLbyte blue
#define glColor3b_PACKED PACKED_void_GLbyte_GLbyte_GLbyte
#define glColor3b_FORMAT FORMAT_void_GLbyte_GLbyte_GLbyte
#define glColor3b_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColor3b_NOT_VOID_WRAP(...) {}
#define glColor3bv_INDEX 246
#define glColor3bv_RETURN void
#define glColor3bv_ARG_NAMES v
#define glColor3bv_ARG_EXPAND const GLbyte * v
#define glColor3bv_PACKED PACKED_void_const_GLbyte___GENPT__
#define glColor3bv_FORMAT FORMAT_void_const_GLbyte___GENPT__
#define glColor3bv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColor3bv_NOT_VOID_WRAP(...) {}
#define glColor3d_INDEX 247
#define glColor3d_RETURN void
#define glColor3d_ARG_NAMES red, green, blue
#define glColor3d_ARG_EXPAND GLdouble red, GLdouble green, GLdouble blue
#define glColor3d_PACKED PACKED_void_GLdouble_GLdouble_GLdouble
#define glColor3d_FORMAT FORMAT_void_GLdouble_GLdouble_GLdouble
#define glColor3d_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColor3d_NOT_VOID_WRAP(...) {}
#define glColor3dv_INDEX 248
#define glColor3dv_RETURN void
#define glColor3dv_ARG_NAMES v
#define glColor3dv_ARG_EXPAND const GLdouble * v
#define glColor3dv_PACKED PACKED_void_const_GLdouble___GENPT__
#define glColor3dv_FORMAT FORMAT_void_const_GLdouble___GENPT__
#define glColor3dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColor3dv_NOT_VOID_WRAP(...) {}
#define glColor3f_INDEX 249
#define glColor3f_RETURN void
#define glColor3f_ARG_NAMES red, green, blue
#define glColor3f_ARG_EXPAND GLfloat red, GLfloat green, GLfloat blue
#define glColor3f_PACKED PACKED_void_GLfloat_GLfloat_GLfloat
#define glColor3f_FORMAT FORMAT_void_GLfloat_GLfloat_GLfloat
#define glColor3f_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColor3f_NOT_VOID_WRAP(...) {}
#define glColor3fVertex3fSUN_INDEX 250
#define glColor3fVertex3fSUN_RETURN void
#define glColor3fVertex3fSUN_ARG_NAMES r, g, b, x, y, z
#define glColor3fVertex3fSUN_ARG_EXPAND GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z
#define glColor3fVertex3fSUN_PACKED PACKED_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat
#define glColor3fVertex3fSUN_FORMAT FORMAT_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat
#define glColor3fVertex3fSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColor3fVertex3fSUN_NOT_VOID_WRAP(...) {}
#define glColor3fVertex3fvSUN_INDEX 251
#define glColor3fVertex3fvSUN_RETURN void
#define glColor3fVertex3fvSUN_ARG_NAMES c, v
#define glColor3fVertex3fvSUN_ARG_EXPAND const GLfloat * c, const GLfloat * v
#define glColor3fVertex3fvSUN_PACKED PACKED_void_const_GLfloat___GENPT___const_GLfloat___GENPT__
#define glColor3fVertex3fvSUN_FORMAT FORMAT_void_const_GLfloat___GENPT___const_GLfloat___GENPT__
#define glColor3fVertex3fvSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColor3fVertex3fvSUN_NOT_VOID_WRAP(...) {}
#define glColor3fv_INDEX 252
#define glColor3fv_RETURN void
#define glColor3fv_ARG_NAMES v
#define glColor3fv_ARG_EXPAND const GLfloat * v
#define glColor3fv_PACKED PACKED_void_const_GLfloat___GENPT__
#define glColor3fv_FORMAT FORMAT_void_const_GLfloat___GENPT__
#define glColor3fv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColor3fv_NOT_VOID_WRAP(...) {}
#define glColor3hNV_INDEX 253
#define glColor3hNV_RETURN void
#define glColor3hNV_ARG_NAMES red, green, blue
#define glColor3hNV_ARG_EXPAND GLhalfNV red, GLhalfNV green, GLhalfNV blue
#define glColor3hNV_PACKED PACKED_void_GLhalfNV_GLhalfNV_GLhalfNV
#define glColor3hNV_FORMAT FORMAT_void_GLhalfNV_GLhalfNV_GLhalfNV
#define glColor3hNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColor3hNV_NOT_VOID_WRAP(...) {}
#define glColor3hvNV_INDEX 254
#define glColor3hvNV_RETURN void
#define glColor3hvNV_ARG_NAMES v
#define glColor3hvNV_ARG_EXPAND const GLhalfNV * v
#define glColor3hvNV_PACKED PACKED_void_const_GLhalfNV___GENPT__
#define glColor3hvNV_FORMAT FORMAT_void_const_GLhalfNV___GENPT__
#define glColor3hvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColor3hvNV_NOT_VOID_WRAP(...) {}
#define glColor3i_INDEX 255
#define glColor3i_RETURN void
#define glColor3i_ARG_NAMES red, green, blue
#define glColor3i_ARG_EXPAND GLint red, GLint green, GLint blue
#define glColor3i_PACKED PACKED_void_GLint_GLint_GLint
#define glColor3i_FORMAT FORMAT_void_GLint_GLint_GLint
#define glColor3i_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColor3i_NOT_VOID_WRAP(...) {}
#define glColor3iv_INDEX 256
#define glColor3iv_RETURN void
#define glColor3iv_ARG_NAMES v
#define glColor3iv_ARG_EXPAND const GLint * v
#define glColor3iv_PACKED PACKED_void_const_GLint___GENPT__
#define glColor3iv_FORMAT FORMAT_void_const_GLint___GENPT__
#define glColor3iv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColor3iv_NOT_VOID_WRAP(...) {}
#define glColor3s_INDEX 257
#define glColor3s_RETURN void
#define glColor3s_ARG_NAMES red, green, blue
#define glColor3s_ARG_EXPAND GLshort red, GLshort green, GLshort blue
#define glColor3s_PACKED PACKED_void_GLshort_GLshort_GLshort
#define glColor3s_FORMAT FORMAT_void_GLshort_GLshort_GLshort
#define glColor3s_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColor3s_NOT_VOID_WRAP(...) {}
#define glColor3sv_INDEX 258
#define glColor3sv_RETURN void
#define glColor3sv_ARG_NAMES v
#define glColor3sv_ARG_EXPAND const GLshort * v
#define glColor3sv_PACKED PACKED_void_const_GLshort___GENPT__
#define glColor3sv_FORMAT FORMAT_void_const_GLshort___GENPT__
#define glColor3sv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColor3sv_NOT_VOID_WRAP(...) {}
#define glColor3ub_INDEX 259
#define glColor3ub_RETURN void
#define glColor3ub_ARG_NAMES red, green, blue
#define glColor3ub_ARG_EXPAND GLubyte red, GLubyte green, GLubyte blue
#define glColor3ub_PACKED PACKED_void_GLubyte_GLubyte_GLubyte
#define glColor3ub_FORMAT FORMAT_void_GLubyte_GLubyte_GLubyte
#define glColor3ub_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColor3ub_NOT_VOID_WRAP(...) {}
#define glColor3ubv_INDEX 260
#define glColor3ubv_RETURN void
#define glColor3ubv_ARG_NAMES v
#define glColor3ubv_ARG_EXPAND const GLubyte * v
#define glColor3ubv_PACKED PACKED_void_const_GLubyte___GENPT__
#define glColor3ubv_FORMAT FORMAT_void_const_GLubyte___GENPT__
#define glColor3ubv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColor3ubv_NOT_VOID_WRAP(...) {}
#define glColor3ui_INDEX 261
#define glColor3ui_RETURN void
#define glColor3ui_ARG_NAMES red, green, blue
#define glColor3ui_ARG_EXPAND GLuint red, GLuint green, GLuint blue
#define glColor3ui_PACKED PACKED_void_GLuint_GLuint_GLuint
#define glColor3ui_FORMAT FORMAT_void_GLuint_GLuint_GLuint
#define glColor3ui_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColor3ui_NOT_VOID_WRAP(...) {}
#define glColor3uiv_INDEX 262
#define glColor3uiv_RETURN void
#define glColor3uiv_ARG_NAMES v
#define glColor3uiv_ARG_EXPAND const GLuint * v
#define glColor3uiv_PACKED PACKED_void_const_GLuint___GENPT__
#define glColor3uiv_FORMAT FORMAT_void_const_GLuint___GENPT__
#define glColor3uiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColor3uiv_NOT_VOID_WRAP(...) {}
#define glColor3us_INDEX 263
#define glColor3us_RETURN void
#define glColor3us_ARG_NAMES red, green, blue
#define glColor3us_ARG_EXPAND GLushort red, GLushort green, GLushort blue
#define glColor3us_PACKED PACKED_void_GLushort_GLushort_GLushort
#define glColor3us_FORMAT FORMAT_void_GLushort_GLushort_GLushort
#define glColor3us_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColor3us_NOT_VOID_WRAP(...) {}
#define glColor3usv_INDEX 264
#define glColor3usv_RETURN void
#define glColor3usv_ARG_NAMES v
#define glColor3usv_ARG_EXPAND const GLushort * v
#define glColor3usv_PACKED PACKED_void_const_GLushort___GENPT__
#define glColor3usv_FORMAT FORMAT_void_const_GLushort___GENPT__
#define glColor3usv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColor3usv_NOT_VOID_WRAP(...) {}
#define glColor3xOES_INDEX 265
#define glColor3xOES_RETURN void
#define glColor3xOES_ARG_NAMES red, green, blue
#define glColor3xOES_ARG_EXPAND GLfixed red, GLfixed green, GLfixed blue
#define glColor3xOES_PACKED PACKED_void_GLfixed_GLfixed_GLfixed
#define glColor3xOES_FORMAT FORMAT_void_GLfixed_GLfixed_GLfixed
#define glColor3xOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColor3xOES_NOT_VOID_WRAP(...) {}
#define glColor3xvOES_INDEX 266
#define glColor3xvOES_RETURN void
#define glColor3xvOES_ARG_NAMES components
#define glColor3xvOES_ARG_EXPAND const GLfixed * components
#define glColor3xvOES_PACKED PACKED_void_const_GLfixed___GENPT__
#define glColor3xvOES_FORMAT FORMAT_void_const_GLfixed___GENPT__
#define glColor3xvOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColor3xvOES_NOT_VOID_WRAP(...) {}
#define glColor4b_INDEX 267
#define glColor4b_RETURN void
#define glColor4b_ARG_NAMES red, green, blue, alpha
#define glColor4b_ARG_EXPAND GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha
#define glColor4b_PACKED PACKED_void_GLbyte_GLbyte_GLbyte_GLbyte
#define glColor4b_FORMAT FORMAT_void_GLbyte_GLbyte_GLbyte_GLbyte
#define glColor4b_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColor4b_NOT_VOID_WRAP(...) {}
#define glColor4bv_INDEX 268
#define glColor4bv_RETURN void
#define glColor4bv_ARG_NAMES v
#define glColor4bv_ARG_EXPAND const GLbyte * v
#define glColor4bv_PACKED PACKED_void_const_GLbyte___GENPT__
#define glColor4bv_FORMAT FORMAT_void_const_GLbyte___GENPT__
#define glColor4bv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColor4bv_NOT_VOID_WRAP(...) {}
#define glColor4d_INDEX 269
#define glColor4d_RETURN void
#define glColor4d_ARG_NAMES red, green, blue, alpha
#define glColor4d_ARG_EXPAND GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha
#define glColor4d_PACKED PACKED_void_GLdouble_GLdouble_GLdouble_GLdouble
#define glColor4d_FORMAT FORMAT_void_GLdouble_GLdouble_GLdouble_GLdouble
#define glColor4d_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColor4d_NOT_VOID_WRAP(...) {}
#define glColor4dv_INDEX 270
#define glColor4dv_RETURN void
#define glColor4dv_ARG_NAMES v
#define glColor4dv_ARG_EXPAND const GLdouble * v
#define glColor4dv_PACKED PACKED_void_const_GLdouble___GENPT__
#define glColor4dv_FORMAT FORMAT_void_const_GLdouble___GENPT__
#define glColor4dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColor4dv_NOT_VOID_WRAP(...) {}
#define glColor4f_INDEX 271
#define glColor4f_RETURN void
#define glColor4f_ARG_NAMES red, green, blue, alpha
#define glColor4f_ARG_EXPAND GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha
#define glColor4f_PACKED PACKED_void_GLfloat_GLfloat_GLfloat_GLfloat
#define glColor4f_FORMAT FORMAT_void_GLfloat_GLfloat_GLfloat_GLfloat
#define glColor4f_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColor4f_NOT_VOID_WRAP(...) {}
#define glColor4fNormal3fVertex3fSUN_INDEX 272
#define glColor4fNormal3fVertex3fSUN_RETURN void
#define glColor4fNormal3fVertex3fSUN_ARG_NAMES r, g, b, a, nx, ny, nz, x, y, z
#define glColor4fNormal3fVertex3fSUN_ARG_EXPAND GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z
#define glColor4fNormal3fVertex3fSUN_PACKED PACKED_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat
#define glColor4fNormal3fVertex3fSUN_FORMAT FORMAT_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat
#define glColor4fNormal3fVertex3fSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColor4fNormal3fVertex3fSUN_NOT_VOID_WRAP(...) {}
#define glColor4fNormal3fVertex3fvSUN_INDEX 273
#define glColor4fNormal3fVertex3fvSUN_RETURN void
#define glColor4fNormal3fVertex3fvSUN_ARG_NAMES c, n, v
#define glColor4fNormal3fVertex3fvSUN_ARG_EXPAND const GLfloat * c, const GLfloat * n, const GLfloat * v
#define glColor4fNormal3fVertex3fvSUN_PACKED PACKED_void_const_GLfloat___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT__
#define glColor4fNormal3fVertex3fvSUN_FORMAT FORMAT_void_const_GLfloat___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT__
#define glColor4fNormal3fVertex3fvSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColor4fNormal3fVertex3fvSUN_NOT_VOID_WRAP(...) {}
#define glColor4fv_INDEX 274
#define glColor4fv_RETURN void
#define glColor4fv_ARG_NAMES v
#define glColor4fv_ARG_EXPAND const GLfloat * v
#define glColor4fv_PACKED PACKED_void_const_GLfloat___GENPT__
#define glColor4fv_FORMAT FORMAT_void_const_GLfloat___GENPT__
#define glColor4fv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColor4fv_NOT_VOID_WRAP(...) {}
#define glColor4hNV_INDEX 275
#define glColor4hNV_RETURN void
#define glColor4hNV_ARG_NAMES red, green, blue, alpha
#define glColor4hNV_ARG_EXPAND GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha
#define glColor4hNV_PACKED PACKED_void_GLhalfNV_GLhalfNV_GLhalfNV_GLhalfNV
#define glColor4hNV_FORMAT FORMAT_void_GLhalfNV_GLhalfNV_GLhalfNV_GLhalfNV
#define glColor4hNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColor4hNV_NOT_VOID_WRAP(...) {}
#define glColor4hvNV_INDEX 276
#define glColor4hvNV_RETURN void
#define glColor4hvNV_ARG_NAMES v
#define glColor4hvNV_ARG_EXPAND const GLhalfNV * v
#define glColor4hvNV_PACKED PACKED_void_const_GLhalfNV___GENPT__
#define glColor4hvNV_FORMAT FORMAT_void_const_GLhalfNV___GENPT__
#define glColor4hvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColor4hvNV_NOT_VOID_WRAP(...) {}
#define glColor4i_INDEX 277
#define glColor4i_RETURN void
#define glColor4i_ARG_NAMES red, green, blue, alpha
#define glColor4i_ARG_EXPAND GLint red, GLint green, GLint blue, GLint alpha
#define glColor4i_PACKED PACKED_void_GLint_GLint_GLint_GLint
#define glColor4i_FORMAT FORMAT_void_GLint_GLint_GLint_GLint
#define glColor4i_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColor4i_NOT_VOID_WRAP(...) {}
#define glColor4iv_INDEX 278
#define glColor4iv_RETURN void
#define glColor4iv_ARG_NAMES v
#define glColor4iv_ARG_EXPAND const GLint * v
#define glColor4iv_PACKED PACKED_void_const_GLint___GENPT__
#define glColor4iv_FORMAT FORMAT_void_const_GLint___GENPT__
#define glColor4iv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColor4iv_NOT_VOID_WRAP(...) {}
#define glColor4s_INDEX 279
#define glColor4s_RETURN void
#define glColor4s_ARG_NAMES red, green, blue, alpha
#define glColor4s_ARG_EXPAND GLshort red, GLshort green, GLshort blue, GLshort alpha
#define glColor4s_PACKED PACKED_void_GLshort_GLshort_GLshort_GLshort
#define glColor4s_FORMAT FORMAT_void_GLshort_GLshort_GLshort_GLshort
#define glColor4s_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColor4s_NOT_VOID_WRAP(...) {}
#define glColor4sv_INDEX 280
#define glColor4sv_RETURN void
#define glColor4sv_ARG_NAMES v
#define glColor4sv_ARG_EXPAND const GLshort * v
#define glColor4sv_PACKED PACKED_void_const_GLshort___GENPT__
#define glColor4sv_FORMAT FORMAT_void_const_GLshort___GENPT__
#define glColor4sv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColor4sv_NOT_VOID_WRAP(...) {}
#define glColor4ub_INDEX 281
#define glColor4ub_RETURN void
#define glColor4ub_ARG_NAMES red, green, blue, alpha
#define glColor4ub_ARG_EXPAND GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha
#define glColor4ub_PACKED PACKED_void_GLubyte_GLubyte_GLubyte_GLubyte
#define glColor4ub_FORMAT FORMAT_void_GLubyte_GLubyte_GLubyte_GLubyte
#define glColor4ub_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColor4ub_NOT_VOID_WRAP(...) {}
#define glColor4ubVertex2fSUN_INDEX 282
#define glColor4ubVertex2fSUN_RETURN void
#define glColor4ubVertex2fSUN_ARG_NAMES r, g, b, a, x, y
#define glColor4ubVertex2fSUN_ARG_EXPAND GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y
#define glColor4ubVertex2fSUN_PACKED PACKED_void_GLubyte_GLubyte_GLubyte_GLubyte_GLfloat_GLfloat
#define glColor4ubVertex2fSUN_FORMAT FORMAT_void_GLubyte_GLubyte_GLubyte_GLubyte_GLfloat_GLfloat
#define glColor4ubVertex2fSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColor4ubVertex2fSUN_NOT_VOID_WRAP(...) {}
#define glColor4ubVertex2fvSUN_INDEX 283
#define glColor4ubVertex2fvSUN_RETURN void
#define glColor4ubVertex2fvSUN_ARG_NAMES c, v
#define glColor4ubVertex2fvSUN_ARG_EXPAND const GLubyte * c, const GLfloat * v
#define glColor4ubVertex2fvSUN_PACKED PACKED_void_const_GLubyte___GENPT___const_GLfloat___GENPT__
#define glColor4ubVertex2fvSUN_FORMAT FORMAT_void_const_GLubyte___GENPT___const_GLfloat___GENPT__
#define glColor4ubVertex2fvSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColor4ubVertex2fvSUN_NOT_VOID_WRAP(...) {}
#define glColor4ubVertex3fSUN_INDEX 284
#define glColor4ubVertex3fSUN_RETURN void
#define glColor4ubVertex3fSUN_ARG_NAMES r, g, b, a, x, y, z
#define glColor4ubVertex3fSUN_ARG_EXPAND GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z
#define glColor4ubVertex3fSUN_PACKED PACKED_void_GLubyte_GLubyte_GLubyte_GLubyte_GLfloat_GLfloat_GLfloat
#define glColor4ubVertex3fSUN_FORMAT FORMAT_void_GLubyte_GLubyte_GLubyte_GLubyte_GLfloat_GLfloat_GLfloat
#define glColor4ubVertex3fSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColor4ubVertex3fSUN_NOT_VOID_WRAP(...) {}
#define glColor4ubVertex3fvSUN_INDEX 285
#define glColor4ubVertex3fvSUN_RETURN void
#define glColor4ubVertex3fvSUN_ARG_NAMES c, v
#define glColor4ubVertex3fvSUN_ARG_EXPAND const GLubyte * c, const GLfloat * v
#define glColor4ubVertex3fvSUN_PACKED PACKED_void_const_GLubyte___GENPT___const_GLfloat___GENPT__
#define glColor4ubVertex3fvSUN_FORMAT FORMAT_void_const_GLubyte___GENPT___const_GLfloat___GENPT__
#define glColor4ubVertex3fvSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColor4ubVertex3fvSUN_NOT_VOID_WRAP(...) {}
#define glColor4ubv_INDEX 286
#define glColor4ubv_RETURN void
#define glColor4ubv_ARG_NAMES v
#define glColor4ubv_ARG_EXPAND const GLubyte * v
#define glColor4ubv_PACKED PACKED_void_const_GLubyte___GENPT__
#define glColor4ubv_FORMAT FORMAT_void_const_GLubyte___GENPT__
#define glColor4ubv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColor4ubv_NOT_VOID_WRAP(...) {}
#define glColor4ui_INDEX 287
#define glColor4ui_RETURN void
#define glColor4ui_ARG_NAMES red, green, blue, alpha
#define glColor4ui_ARG_EXPAND GLuint red, GLuint green, GLuint blue, GLuint alpha
#define glColor4ui_PACKED PACKED_void_GLuint_GLuint_GLuint_GLuint
#define glColor4ui_FORMAT FORMAT_void_GLuint_GLuint_GLuint_GLuint
#define glColor4ui_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColor4ui_NOT_VOID_WRAP(...) {}
#define glColor4uiv_INDEX 288
#define glColor4uiv_RETURN void
#define glColor4uiv_ARG_NAMES v
#define glColor4uiv_ARG_EXPAND const GLuint * v
#define glColor4uiv_PACKED PACKED_void_const_GLuint___GENPT__
#define glColor4uiv_FORMAT FORMAT_void_const_GLuint___GENPT__
#define glColor4uiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColor4uiv_NOT_VOID_WRAP(...) {}
#define glColor4us_INDEX 289
#define glColor4us_RETURN void
#define glColor4us_ARG_NAMES red, green, blue, alpha
#define glColor4us_ARG_EXPAND GLushort red, GLushort green, GLushort blue, GLushort alpha
#define glColor4us_PACKED PACKED_void_GLushort_GLushort_GLushort_GLushort
#define glColor4us_FORMAT FORMAT_void_GLushort_GLushort_GLushort_GLushort
#define glColor4us_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColor4us_NOT_VOID_WRAP(...) {}
#define glColor4usv_INDEX 290
#define glColor4usv_RETURN void
#define glColor4usv_ARG_NAMES v
#define glColor4usv_ARG_EXPAND const GLushort * v
#define glColor4usv_PACKED PACKED_void_const_GLushort___GENPT__
#define glColor4usv_FORMAT FORMAT_void_const_GLushort___GENPT__
#define glColor4usv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColor4usv_NOT_VOID_WRAP(...) {}
#define glColor4x_INDEX 291
#define glColor4x_RETURN void
#define glColor4x_ARG_NAMES red, green, blue, alpha
#define glColor4x_ARG_EXPAND GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha
#define glColor4x_PACKED PACKED_void_GLfixed_GLfixed_GLfixed_GLfixed
#define glColor4x_FORMAT FORMAT_void_GLfixed_GLfixed_GLfixed_GLfixed
#define glColor4x_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColor4x_NOT_VOID_WRAP(...) {}
#define glColor4xOES_INDEX 292
#define glColor4xOES_RETURN void
#define glColor4xOES_ARG_NAMES red, green, blue, alpha
#define glColor4xOES_ARG_EXPAND GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha
#define glColor4xOES_PACKED PACKED_void_GLfixed_GLfixed_GLfixed_GLfixed
#define glColor4xOES_FORMAT FORMAT_void_GLfixed_GLfixed_GLfixed_GLfixed
#define glColor4xOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColor4xOES_NOT_VOID_WRAP(...) {}
#define glColor4xvOES_INDEX 293
#define glColor4xvOES_RETURN void
#define glColor4xvOES_ARG_NAMES components
#define glColor4xvOES_ARG_EXPAND const GLfixed * components
#define glColor4xvOES_PACKED PACKED_void_const_GLfixed___GENPT__
#define glColor4xvOES_FORMAT FORMAT_void_const_GLfixed___GENPT__
#define glColor4xvOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColor4xvOES_NOT_VOID_WRAP(...) {}
#define glColorFormatNV_INDEX 294
#define glColorFormatNV_RETURN void
#define glColorFormatNV_ARG_NAMES size, type, stride
#define glColorFormatNV_ARG_EXPAND GLint size, GLenum type, GLsizei stride
#define glColorFormatNV_PACKED PACKED_void_GLint_GLenum_GLsizei
#define glColorFormatNV_FORMAT FORMAT_void_GLint_GLenum_GLsizei
#define glColorFormatNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColorFormatNV_NOT_VOID_WRAP(...) {}
#define glColorFragmentOp1ATI_INDEX 295
#define glColorFragmentOp1ATI_RETURN void
#define glColorFragmentOp1ATI_ARG_NAMES op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod
#define glColorFragmentOp1ATI_ARG_EXPAND GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod
#define glColorFragmentOp1ATI_PACKED PACKED_void_GLenum_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint
#define glColorFragmentOp1ATI_FORMAT FORMAT_void_GLenum_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint
#define glColorFragmentOp1ATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColorFragmentOp1ATI_NOT_VOID_WRAP(...) {}
#define glColorFragmentOp2ATI_INDEX 296
#define glColorFragmentOp2ATI_RETURN void
#define glColorFragmentOp2ATI_ARG_NAMES op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod
#define glColorFragmentOp2ATI_ARG_EXPAND GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod
#define glColorFragmentOp2ATI_PACKED PACKED_void_GLenum_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint
#define glColorFragmentOp2ATI_FORMAT FORMAT_void_GLenum_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint
#define glColorFragmentOp2ATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColorFragmentOp2ATI_NOT_VOID_WRAP(...) {}
#define glColorFragmentOp3ATI_INDEX 297
#define glColorFragmentOp3ATI_RETURN void
#define glColorFragmentOp3ATI_ARG_NAMES op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod
#define glColorFragmentOp3ATI_ARG_EXPAND GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod
#define glColorFragmentOp3ATI_PACKED PACKED_void_GLenum_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint
#define glColorFragmentOp3ATI_FORMAT FORMAT_void_GLenum_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint_GLuint
#define glColorFragmentOp3ATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColorFragmentOp3ATI_NOT_VOID_WRAP(...) {}
#define glColorMask_INDEX 298
#define glColorMask_RETURN void
#define glColorMask_ARG_NAMES red, green, blue, alpha
#define glColorMask_ARG_EXPAND GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha
#define glColorMask_PACKED PACKED_void_GLboolean_GLboolean_GLboolean_GLboolean
#define glColorMask_FORMAT FORMAT_void_GLboolean_GLboolean_GLboolean_GLboolean
#define glColorMask_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColorMask_NOT_VOID_WRAP(...) {}
#define glColorMaskIndexedEXT_INDEX 299
#define glColorMaskIndexedEXT_RETURN void
#define glColorMaskIndexedEXT_ARG_NAMES index, r, g, b, a
#define glColorMaskIndexedEXT_ARG_EXPAND GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a
#define glColorMaskIndexedEXT_PACKED PACKED_void_GLuint_GLboolean_GLboolean_GLboolean_GLboolean
#define glColorMaskIndexedEXT_FORMAT FORMAT_void_GLuint_GLboolean_GLboolean_GLboolean_GLboolean
#define glColorMaskIndexedEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColorMaskIndexedEXT_NOT_VOID_WRAP(...) {}
#define glColorMaski_INDEX 300
#define glColorMaski_RETURN void
#define glColorMaski_ARG_NAMES index, r, g, b, a
#define glColorMaski_ARG_EXPAND GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a
#define glColorMaski_PACKED PACKED_void_GLuint_GLboolean_GLboolean_GLboolean_GLboolean
#define glColorMaski_FORMAT FORMAT_void_GLuint_GLboolean_GLboolean_GLboolean_GLboolean
#define glColorMaski_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColorMaski_NOT_VOID_WRAP(...) {}
#define glColorMaterial_INDEX 301
#define glColorMaterial_RETURN void
#define glColorMaterial_ARG_NAMES face, mode
#define glColorMaterial_ARG_EXPAND GLenum face, GLenum mode
#define glColorMaterial_PACKED PACKED_void_GLenum_GLenum
#define glColorMaterial_FORMAT FORMAT_void_GLenum_GLenum
#define glColorMaterial_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColorMaterial_NOT_VOID_WRAP(...) {}
#define glColorP3ui_INDEX 302
#define glColorP3ui_RETURN void
#define glColorP3ui_ARG_NAMES type, color
#define glColorP3ui_ARG_EXPAND GLenum type, GLuint color
#define glColorP3ui_PACKED PACKED_void_GLenum_GLuint
#define glColorP3ui_FORMAT FORMAT_void_GLenum_GLuint
#define glColorP3ui_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColorP3ui_NOT_VOID_WRAP(...) {}
#define glColorP3uiv_INDEX 303
#define glColorP3uiv_RETURN void
#define glColorP3uiv_ARG_NAMES type, color
#define glColorP3uiv_ARG_EXPAND GLenum type, const GLuint * color
#define glColorP3uiv_PACKED PACKED_void_GLenum_const_GLuint___GENPT__
#define glColorP3uiv_FORMAT FORMAT_void_GLenum_const_GLuint___GENPT__
#define glColorP3uiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColorP3uiv_NOT_VOID_WRAP(...) {}
#define glColorP4ui_INDEX 304
#define glColorP4ui_RETURN void
#define glColorP4ui_ARG_NAMES type, color
#define glColorP4ui_ARG_EXPAND GLenum type, GLuint color
#define glColorP4ui_PACKED PACKED_void_GLenum_GLuint
#define glColorP4ui_FORMAT FORMAT_void_GLenum_GLuint
#define glColorP4ui_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColorP4ui_NOT_VOID_WRAP(...) {}
#define glColorP4uiv_INDEX 305
#define glColorP4uiv_RETURN void
#define glColorP4uiv_ARG_NAMES type, color
#define glColorP4uiv_ARG_EXPAND GLenum type, const GLuint * color
#define glColorP4uiv_PACKED PACKED_void_GLenum_const_GLuint___GENPT__
#define glColorP4uiv_FORMAT FORMAT_void_GLenum_const_GLuint___GENPT__
#define glColorP4uiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColorP4uiv_NOT_VOID_WRAP(...) {}
#define glColorPointer_INDEX 306
#define glColorPointer_RETURN void
#define glColorPointer_ARG_NAMES size, type, stride, pointer
#define glColorPointer_ARG_EXPAND GLint size, GLenum type, GLsizei stride, const GLvoid * pointer
#define glColorPointer_PACKED PACKED_void_GLint_GLenum_GLsizei_const_GLvoid___GENPT__
#define glColorPointer_FORMAT FORMAT_void_GLint_GLenum_GLsizei_const_GLvoid___GENPT__
#define glColorPointer_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColorPointer_NOT_VOID_WRAP(...) {}
#define glColorPointerEXT_INDEX 307
#define glColorPointerEXT_RETURN void
#define glColorPointerEXT_ARG_NAMES size, type, stride, count, pointer
#define glColorPointerEXT_ARG_EXPAND GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid * pointer
#define glColorPointerEXT_PACKED PACKED_void_GLint_GLenum_GLsizei_GLsizei_const_GLvoid___GENPT__
#define glColorPointerEXT_FORMAT FORMAT_void_GLint_GLenum_GLsizei_GLsizei_const_GLvoid___GENPT__
#define glColorPointerEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColorPointerEXT_NOT_VOID_WRAP(...) {}
#define glColorPointerListIBM_INDEX 308
#define glColorPointerListIBM_RETURN void
#define glColorPointerListIBM_ARG_NAMES size, type, stride, pointer, ptrstride
#define glColorPointerListIBM_ARG_EXPAND GLint size, GLenum type, GLint stride, const GLvoid * pointer, GLint ptrstride
#define glColorPointerListIBM_PACKED PACKED_void_GLint_GLenum_GLint_const_GLvoid___GENPT___GLint
#define glColorPointerListIBM_FORMAT FORMAT_void_GLint_GLenum_GLint_const_GLvoid___GENPT___GLint
#define glColorPointerListIBM_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColorPointerListIBM_NOT_VOID_WRAP(...) {}
#define glColorPointervINTEL_INDEX 309
#define glColorPointervINTEL_RETURN void
#define glColorPointervINTEL_ARG_NAMES size, type, pointer
#define glColorPointervINTEL_ARG_EXPAND GLint size, GLenum type, const GLvoid * pointer
#define glColorPointervINTEL_PACKED PACKED_void_GLint_GLenum_const_GLvoid___GENPT__
#define glColorPointervINTEL_FORMAT FORMAT_void_GLint_GLenum_const_GLvoid___GENPT__
#define glColorPointervINTEL_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColorPointervINTEL_NOT_VOID_WRAP(...) {}
#define glColorSubTable_INDEX 310
#define glColorSubTable_RETURN void
#define glColorSubTable_ARG_NAMES target, start, count, format, type, data
#define glColorSubTable_ARG_EXPAND GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid * data
#define glColorSubTable_PACKED PACKED_void_GLenum_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__
#define glColorSubTable_FORMAT FORMAT_void_GLenum_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__
#define glColorSubTable_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColorSubTable_NOT_VOID_WRAP(...) {}
#define glColorSubTableEXT_INDEX 311
#define glColorSubTableEXT_RETURN void
#define glColorSubTableEXT_ARG_NAMES target, start, count, format, type, data
#define glColorSubTableEXT_ARG_EXPAND GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid * data
#define glColorSubTableEXT_PACKED PACKED_void_GLenum_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__
#define glColorSubTableEXT_FORMAT FORMAT_void_GLenum_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__
#define glColorSubTableEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColorSubTableEXT_NOT_VOID_WRAP(...) {}
#define glColorTable_INDEX 312
#define glColorTable_RETURN void
#define glColorTable_ARG_NAMES target, internalformat, width, format, type, table
#define glColorTable_ARG_EXPAND GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid * table
#define glColorTable_PACKED PACKED_void_GLenum_GLenum_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__
#define glColorTable_FORMAT FORMAT_void_GLenum_GLenum_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__
#define glColorTable_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColorTable_NOT_VOID_WRAP(...) {}
#define glColorTableEXT_INDEX 313
#define glColorTableEXT_RETURN void
#define glColorTableEXT_ARG_NAMES target, internalFormat, width, format, type, table
#define glColorTableEXT_ARG_EXPAND GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const GLvoid * table
#define glColorTableEXT_PACKED PACKED_void_GLenum_GLenum_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__
#define glColorTableEXT_FORMAT FORMAT_void_GLenum_GLenum_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__
#define glColorTableEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColorTableEXT_NOT_VOID_WRAP(...) {}
#define glColorTableParameterfv_INDEX 314
#define glColorTableParameterfv_RETURN void
#define glColorTableParameterfv_ARG_NAMES target, pname, params
#define glColorTableParameterfv_ARG_EXPAND GLenum target, GLenum pname, const GLfloat * params
#define glColorTableParameterfv_PACKED PACKED_void_GLenum_GLenum_const_GLfloat___GENPT__
#define glColorTableParameterfv_FORMAT FORMAT_void_GLenum_GLenum_const_GLfloat___GENPT__
#define glColorTableParameterfv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColorTableParameterfv_NOT_VOID_WRAP(...) {}
#define glColorTableParameterfvSGI_INDEX 315
#define glColorTableParameterfvSGI_RETURN void
#define glColorTableParameterfvSGI_ARG_NAMES target, pname, params
#define glColorTableParameterfvSGI_ARG_EXPAND GLenum target, GLenum pname, const GLfloat * params
#define glColorTableParameterfvSGI_PACKED PACKED_void_GLenum_GLenum_const_GLfloat___GENPT__
#define glColorTableParameterfvSGI_FORMAT FORMAT_void_GLenum_GLenum_const_GLfloat___GENPT__
#define glColorTableParameterfvSGI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColorTableParameterfvSGI_NOT_VOID_WRAP(...) {}
#define glColorTableParameteriv_INDEX 316
#define glColorTableParameteriv_RETURN void
#define glColorTableParameteriv_ARG_NAMES target, pname, params
#define glColorTableParameteriv_ARG_EXPAND GLenum target, GLenum pname, const GLint * params
#define glColorTableParameteriv_PACKED PACKED_void_GLenum_GLenum_const_GLint___GENPT__
#define glColorTableParameteriv_FORMAT FORMAT_void_GLenum_GLenum_const_GLint___GENPT__
#define glColorTableParameteriv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColorTableParameteriv_NOT_VOID_WRAP(...) {}
#define glColorTableParameterivSGI_INDEX 317
#define glColorTableParameterivSGI_RETURN void
#define glColorTableParameterivSGI_ARG_NAMES target, pname, params
#define glColorTableParameterivSGI_ARG_EXPAND GLenum target, GLenum pname, const GLint * params
#define glColorTableParameterivSGI_PACKED PACKED_void_GLenum_GLenum_const_GLint___GENPT__
#define glColorTableParameterivSGI_FORMAT FORMAT_void_GLenum_GLenum_const_GLint___GENPT__
#define glColorTableParameterivSGI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColorTableParameterivSGI_NOT_VOID_WRAP(...) {}
#define glColorTableSGI_INDEX 318
#define glColorTableSGI_RETURN void
#define glColorTableSGI_ARG_NAMES target, internalformat, width, format, type, table
#define glColorTableSGI_ARG_EXPAND GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid * table
#define glColorTableSGI_PACKED PACKED_void_GLenum_GLenum_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__
#define glColorTableSGI_FORMAT FORMAT_void_GLenum_GLenum_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__
#define glColorTableSGI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glColorTableSGI_NOT_VOID_WRAP(...) {}
#define glCombinerInputNV_INDEX 319
#define glCombinerInputNV_RETURN void
#define glCombinerInputNV_ARG_NAMES stage, portion, variable, input, mapping, componentUsage
#define glCombinerInputNV_ARG_EXPAND GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage
#define glCombinerInputNV_PACKED PACKED_void_GLenum_GLenum_GLenum_GLenum_GLenum_GLenum
#define glCombinerInputNV_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLenum_GLenum_GLenum
#define glCombinerInputNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCombinerInputNV_NOT_VOID_WRAP(...) {}
#define glCombinerOutputNV_INDEX 320
#define glCombinerOutputNV_RETURN void
#define glCombinerOutputNV_ARG_NAMES stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum
#define glCombinerOutputNV_ARG_EXPAND GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum
#define glCombinerOutputNV_PACKED PACKED_void_GLenum_GLenum_GLenum_GLenum_GLenum_GLenum_GLenum_GLboolean_GLboolean_GLboolean
#define glCombinerOutputNV_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLenum_GLenum_GLenum_GLenum_GLboolean_GLboolean_GLboolean
#define glCombinerOutputNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCombinerOutputNV_NOT_VOID_WRAP(...) {}
#define glCombinerParameterfNV_INDEX 321
#define glCombinerParameterfNV_RETURN void
#define glCombinerParameterfNV_ARG_NAMES pname, param
#define glCombinerParameterfNV_ARG_EXPAND GLenum pname, GLfloat param
#define glCombinerParameterfNV_PACKED PACKED_void_GLenum_GLfloat
#define glCombinerParameterfNV_FORMAT FORMAT_void_GLenum_GLfloat
#define glCombinerParameterfNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCombinerParameterfNV_NOT_VOID_WRAP(...) {}
#define glCombinerParameterfvNV_INDEX 322
#define glCombinerParameterfvNV_RETURN void
#define glCombinerParameterfvNV_ARG_NAMES pname, params
#define glCombinerParameterfvNV_ARG_EXPAND GLenum pname, const GLfloat * params
#define glCombinerParameterfvNV_PACKED PACKED_void_GLenum_const_GLfloat___GENPT__
#define glCombinerParameterfvNV_FORMAT FORMAT_void_GLenum_const_GLfloat___GENPT__
#define glCombinerParameterfvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCombinerParameterfvNV_NOT_VOID_WRAP(...) {}
#define glCombinerParameteriNV_INDEX 323
#define glCombinerParameteriNV_RETURN void
#define glCombinerParameteriNV_ARG_NAMES pname, param
#define glCombinerParameteriNV_ARG_EXPAND GLenum pname, GLint param
#define glCombinerParameteriNV_PACKED PACKED_void_GLenum_GLint
#define glCombinerParameteriNV_FORMAT FORMAT_void_GLenum_GLint
#define glCombinerParameteriNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCombinerParameteriNV_NOT_VOID_WRAP(...) {}
#define glCombinerParameterivNV_INDEX 324
#define glCombinerParameterivNV_RETURN void
#define glCombinerParameterivNV_ARG_NAMES pname, params
#define glCombinerParameterivNV_ARG_EXPAND GLenum pname, const GLint * params
#define glCombinerParameterivNV_PACKED PACKED_void_GLenum_const_GLint___GENPT__
#define glCombinerParameterivNV_FORMAT FORMAT_void_GLenum_const_GLint___GENPT__
#define glCombinerParameterivNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCombinerParameterivNV_NOT_VOID_WRAP(...) {}
#define glCombinerStageParameterfvNV_INDEX 325
#define glCombinerStageParameterfvNV_RETURN void
#define glCombinerStageParameterfvNV_ARG_NAMES stage, pname, params
#define glCombinerStageParameterfvNV_ARG_EXPAND GLenum stage, GLenum pname, const GLfloat * params
#define glCombinerStageParameterfvNV_PACKED PACKED_void_GLenum_GLenum_const_GLfloat___GENPT__
#define glCombinerStageParameterfvNV_FORMAT FORMAT_void_GLenum_GLenum_const_GLfloat___GENPT__
#define glCombinerStageParameterfvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCombinerStageParameterfvNV_NOT_VOID_WRAP(...) {}
#define glCompileShader_INDEX 326
#define glCompileShader_RETURN void
#define glCompileShader_ARG_NAMES shader
#define glCompileShader_ARG_EXPAND GLuint shader
#define glCompileShader_PACKED PACKED_void_GLuint
#define glCompileShader_FORMAT FORMAT_void_GLuint
#define glCompileShader_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCompileShader_NOT_VOID_WRAP(...) {}
#define glCompileShaderARB_INDEX 327
#define glCompileShaderARB_RETURN void
#define glCompileShaderARB_ARG_NAMES shaderObj
#define glCompileShaderARB_ARG_EXPAND GLhandleARB shaderObj
#define glCompileShaderARB_PACKED PACKED_void_GLhandleARB
#define glCompileShaderARB_FORMAT FORMAT_void_GLhandleARB
#define glCompileShaderARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCompileShaderARB_NOT_VOID_WRAP(...) {}
#define glCompileShaderIncludeARB_INDEX 328
#define glCompileShaderIncludeARB_RETURN void
#define glCompileShaderIncludeARB_ARG_NAMES shader, count, path, length
#define glCompileShaderIncludeARB_ARG_EXPAND GLuint shader, GLsizei count, const GLchar * path, const GLint * length
#define glCompileShaderIncludeARB_PACKED PACKED_void_GLuint_GLsizei_const_GLchar___GENPT___const_GLint___GENPT__
#define glCompileShaderIncludeARB_FORMAT FORMAT_void_GLuint_GLsizei_const_GLchar___GENPT___const_GLint___GENPT__
#define glCompileShaderIncludeARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCompileShaderIncludeARB_NOT_VOID_WRAP(...) {}
#define glCompressedMultiTexImage1DEXT_INDEX 329
#define glCompressedMultiTexImage1DEXT_RETURN void
#define glCompressedMultiTexImage1DEXT_ARG_NAMES texunit, target, level, internalformat, width, border, imageSize, bits
#define glCompressedMultiTexImage1DEXT_ARG_EXPAND GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid * bits
#define glCompressedMultiTexImage1DEXT_PACKED PACKED_void_GLenum_GLenum_GLint_GLenum_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__
#define glCompressedMultiTexImage1DEXT_FORMAT FORMAT_void_GLenum_GLenum_GLint_GLenum_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__
#define glCompressedMultiTexImage1DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCompressedMultiTexImage1DEXT_NOT_VOID_WRAP(...) {}
#define glCompressedMultiTexImage2DEXT_INDEX 330
#define glCompressedMultiTexImage2DEXT_RETURN void
#define glCompressedMultiTexImage2DEXT_ARG_NAMES texunit, target, level, internalformat, width, height, border, imageSize, bits
#define glCompressedMultiTexImage2DEXT_ARG_EXPAND GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid * bits
#define glCompressedMultiTexImage2DEXT_PACKED PACKED_void_GLenum_GLenum_GLint_GLenum_GLsizei_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__
#define glCompressedMultiTexImage2DEXT_FORMAT FORMAT_void_GLenum_GLenum_GLint_GLenum_GLsizei_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__
#define glCompressedMultiTexImage2DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCompressedMultiTexImage2DEXT_NOT_VOID_WRAP(...) {}
#define glCompressedMultiTexImage3DEXT_INDEX 331
#define glCompressedMultiTexImage3DEXT_RETURN void
#define glCompressedMultiTexImage3DEXT_ARG_NAMES texunit, target, level, internalformat, width, height, depth, border, imageSize, bits
#define glCompressedMultiTexImage3DEXT_ARG_EXPAND GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid * bits
#define glCompressedMultiTexImage3DEXT_PACKED PACKED_void_GLenum_GLenum_GLint_GLenum_GLsizei_GLsizei_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__
#define glCompressedMultiTexImage3DEXT_FORMAT FORMAT_void_GLenum_GLenum_GLint_GLenum_GLsizei_GLsizei_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__
#define glCompressedMultiTexImage3DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCompressedMultiTexImage3DEXT_NOT_VOID_WRAP(...) {}
#define glCompressedMultiTexSubImage1DEXT_INDEX 332
#define glCompressedMultiTexSubImage1DEXT_RETURN void
#define glCompressedMultiTexSubImage1DEXT_ARG_NAMES texunit, target, level, xoffset, width, format, imageSize, bits
#define glCompressedMultiTexSubImage1DEXT_ARG_EXPAND GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid * bits
#define glCompressedMultiTexSubImage1DEXT_PACKED PACKED_void_GLenum_GLenum_GLint_GLint_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__
#define glCompressedMultiTexSubImage1DEXT_FORMAT FORMAT_void_GLenum_GLenum_GLint_GLint_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__
#define glCompressedMultiTexSubImage1DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCompressedMultiTexSubImage1DEXT_NOT_VOID_WRAP(...) {}
#define glCompressedMultiTexSubImage2DEXT_INDEX 333
#define glCompressedMultiTexSubImage2DEXT_RETURN void
#define glCompressedMultiTexSubImage2DEXT_ARG_NAMES texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits
#define glCompressedMultiTexSubImage2DEXT_ARG_EXPAND GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid * bits
#define glCompressedMultiTexSubImage2DEXT_PACKED PACKED_void_GLenum_GLenum_GLint_GLint_GLint_GLsizei_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__
#define glCompressedMultiTexSubImage2DEXT_FORMAT FORMAT_void_GLenum_GLenum_GLint_GLint_GLint_GLsizei_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__
#define glCompressedMultiTexSubImage2DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCompressedMultiTexSubImage2DEXT_NOT_VOID_WRAP(...) {}
#define glCompressedMultiTexSubImage3DEXT_INDEX 334
#define glCompressedMultiTexSubImage3DEXT_RETURN void
#define glCompressedMultiTexSubImage3DEXT_ARG_NAMES texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits
#define glCompressedMultiTexSubImage3DEXT_ARG_EXPAND GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid * bits
#define glCompressedMultiTexSubImage3DEXT_PACKED PACKED_void_GLenum_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__
#define glCompressedMultiTexSubImage3DEXT_FORMAT FORMAT_void_GLenum_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__
#define glCompressedMultiTexSubImage3DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCompressedMultiTexSubImage3DEXT_NOT_VOID_WRAP(...) {}
#define glCompressedTexImage1D_INDEX 335
#define glCompressedTexImage1D_RETURN void
#define glCompressedTexImage1D_ARG_NAMES target, level, internalformat, width, border, imageSize, data
#define glCompressedTexImage1D_ARG_EXPAND GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid * data
#define glCompressedTexImage1D_PACKED PACKED_void_GLenum_GLint_GLenum_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__
#define glCompressedTexImage1D_FORMAT FORMAT_void_GLenum_GLint_GLenum_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__
#define glCompressedTexImage1D_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCompressedTexImage1D_NOT_VOID_WRAP(...) {}
#define glCompressedTexImage1DARB_INDEX 336
#define glCompressedTexImage1DARB_RETURN void
#define glCompressedTexImage1DARB_ARG_NAMES target, level, internalformat, width, border, imageSize, data
#define glCompressedTexImage1DARB_ARG_EXPAND GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid * data
#define glCompressedTexImage1DARB_PACKED PACKED_void_GLenum_GLint_GLenum_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__
#define glCompressedTexImage1DARB_FORMAT FORMAT_void_GLenum_GLint_GLenum_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__
#define glCompressedTexImage1DARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCompressedTexImage1DARB_NOT_VOID_WRAP(...) {}
#define glCompressedTexImage2D_INDEX 337
#define glCompressedTexImage2D_RETURN void
#define glCompressedTexImage2D_ARG_NAMES target, level, internalformat, width, height, border, imageSize, data
#define glCompressedTexImage2D_ARG_EXPAND GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid * data
#define glCompressedTexImage2D_PACKED PACKED_void_GLenum_GLint_GLenum_GLsizei_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__
#define glCompressedTexImage2D_FORMAT FORMAT_void_GLenum_GLint_GLenum_GLsizei_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__
#define glCompressedTexImage2D_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCompressedTexImage2D_NOT_VOID_WRAP(...) {}
#define glCompressedTexImage2DARB_INDEX 338
#define glCompressedTexImage2DARB_RETURN void
#define glCompressedTexImage2DARB_ARG_NAMES target, level, internalformat, width, height, border, imageSize, data
#define glCompressedTexImage2DARB_ARG_EXPAND GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid * data
#define glCompressedTexImage2DARB_PACKED PACKED_void_GLenum_GLint_GLenum_GLsizei_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__
#define glCompressedTexImage2DARB_FORMAT FORMAT_void_GLenum_GLint_GLenum_GLsizei_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__
#define glCompressedTexImage2DARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCompressedTexImage2DARB_NOT_VOID_WRAP(...) {}
#define glCompressedTexImage3D_INDEX 339
#define glCompressedTexImage3D_RETURN void
#define glCompressedTexImage3D_ARG_NAMES target, level, internalformat, width, height, depth, border, imageSize, data
#define glCompressedTexImage3D_ARG_EXPAND GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid * data
#define glCompressedTexImage3D_PACKED PACKED_void_GLenum_GLint_GLenum_GLsizei_GLsizei_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__
#define glCompressedTexImage3D_FORMAT FORMAT_void_GLenum_GLint_GLenum_GLsizei_GLsizei_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__
#define glCompressedTexImage3D_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCompressedTexImage3D_NOT_VOID_WRAP(...) {}
#define glCompressedTexImage3DARB_INDEX 340
#define glCompressedTexImage3DARB_RETURN void
#define glCompressedTexImage3DARB_ARG_NAMES target, level, internalformat, width, height, depth, border, imageSize, data
#define glCompressedTexImage3DARB_ARG_EXPAND GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid * data
#define glCompressedTexImage3DARB_PACKED PACKED_void_GLenum_GLint_GLenum_GLsizei_GLsizei_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__
#define glCompressedTexImage3DARB_FORMAT FORMAT_void_GLenum_GLint_GLenum_GLsizei_GLsizei_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__
#define glCompressedTexImage3DARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCompressedTexImage3DARB_NOT_VOID_WRAP(...) {}
#define glCompressedTexSubImage1D_INDEX 341
#define glCompressedTexSubImage1D_RETURN void
#define glCompressedTexSubImage1D_ARG_NAMES target, level, xoffset, width, format, imageSize, data
#define glCompressedTexSubImage1D_ARG_EXPAND GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid * data
#define glCompressedTexSubImage1D_PACKED PACKED_void_GLenum_GLint_GLint_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__
#define glCompressedTexSubImage1D_FORMAT FORMAT_void_GLenum_GLint_GLint_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__
#define glCompressedTexSubImage1D_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCompressedTexSubImage1D_NOT_VOID_WRAP(...) {}
#define glCompressedTexSubImage1DARB_INDEX 342
#define glCompressedTexSubImage1DARB_RETURN void
#define glCompressedTexSubImage1DARB_ARG_NAMES target, level, xoffset, width, format, imageSize, data
#define glCompressedTexSubImage1DARB_ARG_EXPAND GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid * data
#define glCompressedTexSubImage1DARB_PACKED PACKED_void_GLenum_GLint_GLint_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__
#define glCompressedTexSubImage1DARB_FORMAT FORMAT_void_GLenum_GLint_GLint_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__
#define glCompressedTexSubImage1DARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCompressedTexSubImage1DARB_NOT_VOID_WRAP(...) {}
#define glCompressedTexSubImage2D_INDEX 343
#define glCompressedTexSubImage2D_RETURN void
#define glCompressedTexSubImage2D_ARG_NAMES target, level, xoffset, yoffset, width, height, format, imageSize, data
#define glCompressedTexSubImage2D_ARG_EXPAND GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid * data
#define glCompressedTexSubImage2D_PACKED PACKED_void_GLenum_GLint_GLint_GLint_GLsizei_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__
#define glCompressedTexSubImage2D_FORMAT FORMAT_void_GLenum_GLint_GLint_GLint_GLsizei_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__
#define glCompressedTexSubImage2D_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCompressedTexSubImage2D_NOT_VOID_WRAP(...) {}
#define glCompressedTexSubImage2DARB_INDEX 344
#define glCompressedTexSubImage2DARB_RETURN void
#define glCompressedTexSubImage2DARB_ARG_NAMES target, level, xoffset, yoffset, width, height, format, imageSize, data
#define glCompressedTexSubImage2DARB_ARG_EXPAND GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid * data
#define glCompressedTexSubImage2DARB_PACKED PACKED_void_GLenum_GLint_GLint_GLint_GLsizei_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__
#define glCompressedTexSubImage2DARB_FORMAT FORMAT_void_GLenum_GLint_GLint_GLint_GLsizei_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__
#define glCompressedTexSubImage2DARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCompressedTexSubImage2DARB_NOT_VOID_WRAP(...) {}
#define glCompressedTexSubImage3D_INDEX 345
#define glCompressedTexSubImage3D_RETURN void
#define glCompressedTexSubImage3D_ARG_NAMES target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data
#define glCompressedTexSubImage3D_ARG_EXPAND GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid * data
#define glCompressedTexSubImage3D_PACKED PACKED_void_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__
#define glCompressedTexSubImage3D_FORMAT FORMAT_void_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__
#define glCompressedTexSubImage3D_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCompressedTexSubImage3D_NOT_VOID_WRAP(...) {}
#define glCompressedTexSubImage3DARB_INDEX 346
#define glCompressedTexSubImage3DARB_RETURN void
#define glCompressedTexSubImage3DARB_ARG_NAMES target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data
#define glCompressedTexSubImage3DARB_ARG_EXPAND GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid * data
#define glCompressedTexSubImage3DARB_PACKED PACKED_void_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__
#define glCompressedTexSubImage3DARB_FORMAT FORMAT_void_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__
#define glCompressedTexSubImage3DARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCompressedTexSubImage3DARB_NOT_VOID_WRAP(...) {}
#define glCompressedTextureImage1DEXT_INDEX 347
#define glCompressedTextureImage1DEXT_RETURN void
#define glCompressedTextureImage1DEXT_ARG_NAMES texture, target, level, internalformat, width, border, imageSize, bits
#define glCompressedTextureImage1DEXT_ARG_EXPAND GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid * bits
#define glCompressedTextureImage1DEXT_PACKED PACKED_void_GLuint_GLenum_GLint_GLenum_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__
#define glCompressedTextureImage1DEXT_FORMAT FORMAT_void_GLuint_GLenum_GLint_GLenum_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__
#define glCompressedTextureImage1DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCompressedTextureImage1DEXT_NOT_VOID_WRAP(...) {}
#define glCompressedTextureImage2DEXT_INDEX 348
#define glCompressedTextureImage2DEXT_RETURN void
#define glCompressedTextureImage2DEXT_ARG_NAMES texture, target, level, internalformat, width, height, border, imageSize, bits
#define glCompressedTextureImage2DEXT_ARG_EXPAND GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid * bits
#define glCompressedTextureImage2DEXT_PACKED PACKED_void_GLuint_GLenum_GLint_GLenum_GLsizei_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__
#define glCompressedTextureImage2DEXT_FORMAT FORMAT_void_GLuint_GLenum_GLint_GLenum_GLsizei_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__
#define glCompressedTextureImage2DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCompressedTextureImage2DEXT_NOT_VOID_WRAP(...) {}
#define glCompressedTextureImage3DEXT_INDEX 349
#define glCompressedTextureImage3DEXT_RETURN void
#define glCompressedTextureImage3DEXT_ARG_NAMES texture, target, level, internalformat, width, height, depth, border, imageSize, bits
#define glCompressedTextureImage3DEXT_ARG_EXPAND GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid * bits
#define glCompressedTextureImage3DEXT_PACKED PACKED_void_GLuint_GLenum_GLint_GLenum_GLsizei_GLsizei_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__
#define glCompressedTextureImage3DEXT_FORMAT FORMAT_void_GLuint_GLenum_GLint_GLenum_GLsizei_GLsizei_GLsizei_GLint_GLsizei_const_GLvoid___GENPT__
#define glCompressedTextureImage3DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCompressedTextureImage3DEXT_NOT_VOID_WRAP(...) {}
#define glCompressedTextureSubImage1DEXT_INDEX 350
#define glCompressedTextureSubImage1DEXT_RETURN void
#define glCompressedTextureSubImage1DEXT_ARG_NAMES texture, target, level, xoffset, width, format, imageSize, bits
#define glCompressedTextureSubImage1DEXT_ARG_EXPAND GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid * bits
#define glCompressedTextureSubImage1DEXT_PACKED PACKED_void_GLuint_GLenum_GLint_GLint_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__
#define glCompressedTextureSubImage1DEXT_FORMAT FORMAT_void_GLuint_GLenum_GLint_GLint_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__
#define glCompressedTextureSubImage1DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCompressedTextureSubImage1DEXT_NOT_VOID_WRAP(...) {}
#define glCompressedTextureSubImage2DEXT_INDEX 351
#define glCompressedTextureSubImage2DEXT_RETURN void
#define glCompressedTextureSubImage2DEXT_ARG_NAMES texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits
#define glCompressedTextureSubImage2DEXT_ARG_EXPAND GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid * bits
#define glCompressedTextureSubImage2DEXT_PACKED PACKED_void_GLuint_GLenum_GLint_GLint_GLint_GLsizei_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__
#define glCompressedTextureSubImage2DEXT_FORMAT FORMAT_void_GLuint_GLenum_GLint_GLint_GLint_GLsizei_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__
#define glCompressedTextureSubImage2DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCompressedTextureSubImage2DEXT_NOT_VOID_WRAP(...) {}
#define glCompressedTextureSubImage3DEXT_INDEX 352
#define glCompressedTextureSubImage3DEXT_RETURN void
#define glCompressedTextureSubImage3DEXT_ARG_NAMES texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits
#define glCompressedTextureSubImage3DEXT_ARG_EXPAND GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid * bits
#define glCompressedTextureSubImage3DEXT_PACKED PACKED_void_GLuint_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__
#define glCompressedTextureSubImage3DEXT_FORMAT FORMAT_void_GLuint_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei_GLenum_GLsizei_const_GLvoid___GENPT__
#define glCompressedTextureSubImage3DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCompressedTextureSubImage3DEXT_NOT_VOID_WRAP(...) {}
#define glConvolutionFilter1D_INDEX 353
#define glConvolutionFilter1D_RETURN void
#define glConvolutionFilter1D_ARG_NAMES target, internalformat, width, format, type, image
#define glConvolutionFilter1D_ARG_EXPAND GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid * image
#define glConvolutionFilter1D_PACKED PACKED_void_GLenum_GLenum_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__
#define glConvolutionFilter1D_FORMAT FORMAT_void_GLenum_GLenum_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__
#define glConvolutionFilter1D_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glConvolutionFilter1D_NOT_VOID_WRAP(...) {}
#define glConvolutionFilter1DEXT_INDEX 354
#define glConvolutionFilter1DEXT_RETURN void
#define glConvolutionFilter1DEXT_ARG_NAMES target, internalformat, width, format, type, image
#define glConvolutionFilter1DEXT_ARG_EXPAND GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid * image
#define glConvolutionFilter1DEXT_PACKED PACKED_void_GLenum_GLenum_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__
#define glConvolutionFilter1DEXT_FORMAT FORMAT_void_GLenum_GLenum_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__
#define glConvolutionFilter1DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glConvolutionFilter1DEXT_NOT_VOID_WRAP(...) {}
#define glConvolutionFilter2D_INDEX 355
#define glConvolutionFilter2D_RETURN void
#define glConvolutionFilter2D_ARG_NAMES target, internalformat, width, height, format, type, image
#define glConvolutionFilter2D_ARG_EXPAND GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * image
#define glConvolutionFilter2D_PACKED PACKED_void_GLenum_GLenum_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__
#define glConvolutionFilter2D_FORMAT FORMAT_void_GLenum_GLenum_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__
#define glConvolutionFilter2D_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glConvolutionFilter2D_NOT_VOID_WRAP(...) {}
#define glConvolutionFilter2DEXT_INDEX 356
#define glConvolutionFilter2DEXT_RETURN void
#define glConvolutionFilter2DEXT_ARG_NAMES target, internalformat, width, height, format, type, image
#define glConvolutionFilter2DEXT_ARG_EXPAND GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * image
#define glConvolutionFilter2DEXT_PACKED PACKED_void_GLenum_GLenum_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__
#define glConvolutionFilter2DEXT_FORMAT FORMAT_void_GLenum_GLenum_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__
#define glConvolutionFilter2DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glConvolutionFilter2DEXT_NOT_VOID_WRAP(...) {}
#define glConvolutionParameterf_INDEX 357
#define glConvolutionParameterf_RETURN void
#define glConvolutionParameterf_ARG_NAMES target, pname, params
#define glConvolutionParameterf_ARG_EXPAND GLenum target, GLenum pname, GLfloat params
#define glConvolutionParameterf_PACKED PACKED_void_GLenum_GLenum_GLfloat
#define glConvolutionParameterf_FORMAT FORMAT_void_GLenum_GLenum_GLfloat
#define glConvolutionParameterf_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glConvolutionParameterf_NOT_VOID_WRAP(...) {}
#define glConvolutionParameterfEXT_INDEX 358
#define glConvolutionParameterfEXT_RETURN void
#define glConvolutionParameterfEXT_ARG_NAMES target, pname, params
#define glConvolutionParameterfEXT_ARG_EXPAND GLenum target, GLenum pname, GLfloat params
#define glConvolutionParameterfEXT_PACKED PACKED_void_GLenum_GLenum_GLfloat
#define glConvolutionParameterfEXT_FORMAT FORMAT_void_GLenum_GLenum_GLfloat
#define glConvolutionParameterfEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glConvolutionParameterfEXT_NOT_VOID_WRAP(...) {}
#define glConvolutionParameterfv_INDEX 359
#define glConvolutionParameterfv_RETURN void
#define glConvolutionParameterfv_ARG_NAMES target, pname, params
#define glConvolutionParameterfv_ARG_EXPAND GLenum target, GLenum pname, const GLfloat * params
#define glConvolutionParameterfv_PACKED PACKED_void_GLenum_GLenum_const_GLfloat___GENPT__
#define glConvolutionParameterfv_FORMAT FORMAT_void_GLenum_GLenum_const_GLfloat___GENPT__
#define glConvolutionParameterfv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glConvolutionParameterfv_NOT_VOID_WRAP(...) {}
#define glConvolutionParameterfvEXT_INDEX 360
#define glConvolutionParameterfvEXT_RETURN void
#define glConvolutionParameterfvEXT_ARG_NAMES target, pname, params
#define glConvolutionParameterfvEXT_ARG_EXPAND GLenum target, GLenum pname, const GLfloat * params
#define glConvolutionParameterfvEXT_PACKED PACKED_void_GLenum_GLenum_const_GLfloat___GENPT__
#define glConvolutionParameterfvEXT_FORMAT FORMAT_void_GLenum_GLenum_const_GLfloat___GENPT__
#define glConvolutionParameterfvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glConvolutionParameterfvEXT_NOT_VOID_WRAP(...) {}
#define glConvolutionParameteri_INDEX 361
#define glConvolutionParameteri_RETURN void
#define glConvolutionParameteri_ARG_NAMES target, pname, params
#define glConvolutionParameteri_ARG_EXPAND GLenum target, GLenum pname, GLint params
#define glConvolutionParameteri_PACKED PACKED_void_GLenum_GLenum_GLint
#define glConvolutionParameteri_FORMAT FORMAT_void_GLenum_GLenum_GLint
#define glConvolutionParameteri_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glConvolutionParameteri_NOT_VOID_WRAP(...) {}
#define glConvolutionParameteriEXT_INDEX 362
#define glConvolutionParameteriEXT_RETURN void
#define glConvolutionParameteriEXT_ARG_NAMES target, pname, params
#define glConvolutionParameteriEXT_ARG_EXPAND GLenum target, GLenum pname, GLint params
#define glConvolutionParameteriEXT_PACKED PACKED_void_GLenum_GLenum_GLint
#define glConvolutionParameteriEXT_FORMAT FORMAT_void_GLenum_GLenum_GLint
#define glConvolutionParameteriEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glConvolutionParameteriEXT_NOT_VOID_WRAP(...) {}
#define glConvolutionParameteriv_INDEX 363
#define glConvolutionParameteriv_RETURN void
#define glConvolutionParameteriv_ARG_NAMES target, pname, params
#define glConvolutionParameteriv_ARG_EXPAND GLenum target, GLenum pname, const GLint * params
#define glConvolutionParameteriv_PACKED PACKED_void_GLenum_GLenum_const_GLint___GENPT__
#define glConvolutionParameteriv_FORMAT FORMAT_void_GLenum_GLenum_const_GLint___GENPT__
#define glConvolutionParameteriv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glConvolutionParameteriv_NOT_VOID_WRAP(...) {}
#define glConvolutionParameterivEXT_INDEX 364
#define glConvolutionParameterivEXT_RETURN void
#define glConvolutionParameterivEXT_ARG_NAMES target, pname, params
#define glConvolutionParameterivEXT_ARG_EXPAND GLenum target, GLenum pname, const GLint * params
#define glConvolutionParameterivEXT_PACKED PACKED_void_GLenum_GLenum_const_GLint___GENPT__
#define glConvolutionParameterivEXT_FORMAT FORMAT_void_GLenum_GLenum_const_GLint___GENPT__
#define glConvolutionParameterivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glConvolutionParameterivEXT_NOT_VOID_WRAP(...) {}
#define glConvolutionParameterxOES_INDEX 365
#define glConvolutionParameterxOES_RETURN void
#define glConvolutionParameterxOES_ARG_NAMES target, pname, param
#define glConvolutionParameterxOES_ARG_EXPAND GLenum target, GLenum pname, GLfixed param
#define glConvolutionParameterxOES_PACKED PACKED_void_GLenum_GLenum_GLfixed
#define glConvolutionParameterxOES_FORMAT FORMAT_void_GLenum_GLenum_GLfixed
#define glConvolutionParameterxOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glConvolutionParameterxOES_NOT_VOID_WRAP(...) {}
#define glConvolutionParameterxvOES_INDEX 366
#define glConvolutionParameterxvOES_RETURN void
#define glConvolutionParameterxvOES_ARG_NAMES target, pname, params
#define glConvolutionParameterxvOES_ARG_EXPAND GLenum target, GLenum pname, const GLfixed * params
#define glConvolutionParameterxvOES_PACKED PACKED_void_GLenum_GLenum_const_GLfixed___GENPT__
#define glConvolutionParameterxvOES_FORMAT FORMAT_void_GLenum_GLenum_const_GLfixed___GENPT__
#define glConvolutionParameterxvOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glConvolutionParameterxvOES_NOT_VOID_WRAP(...) {}
#define glCopyBufferSubData_INDEX 367
#define glCopyBufferSubData_RETURN void
#define glCopyBufferSubData_ARG_NAMES readTarget, writeTarget, readOffset, writeOffset, size
#define glCopyBufferSubData_ARG_EXPAND GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size
#define glCopyBufferSubData_PACKED PACKED_void_GLenum_GLenum_GLintptr_GLintptr_GLsizeiptr
#define glCopyBufferSubData_FORMAT FORMAT_void_GLenum_GLenum_GLintptr_GLintptr_GLsizeiptr
#define glCopyBufferSubData_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCopyBufferSubData_NOT_VOID_WRAP(...) {}
#define glCopyColorSubTable_INDEX 368
#define glCopyColorSubTable_RETURN void
#define glCopyColorSubTable_ARG_NAMES target, start, x, y, width
#define glCopyColorSubTable_ARG_EXPAND GLenum target, GLsizei start, GLint x, GLint y, GLsizei width
#define glCopyColorSubTable_PACKED PACKED_void_GLenum_GLsizei_GLint_GLint_GLsizei
#define glCopyColorSubTable_FORMAT FORMAT_void_GLenum_GLsizei_GLint_GLint_GLsizei
#define glCopyColorSubTable_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCopyColorSubTable_NOT_VOID_WRAP(...) {}
#define glCopyColorSubTableEXT_INDEX 369
#define glCopyColorSubTableEXT_RETURN void
#define glCopyColorSubTableEXT_ARG_NAMES target, start, x, y, width
#define glCopyColorSubTableEXT_ARG_EXPAND GLenum target, GLsizei start, GLint x, GLint y, GLsizei width
#define glCopyColorSubTableEXT_PACKED PACKED_void_GLenum_GLsizei_GLint_GLint_GLsizei
#define glCopyColorSubTableEXT_FORMAT FORMAT_void_GLenum_GLsizei_GLint_GLint_GLsizei
#define glCopyColorSubTableEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCopyColorSubTableEXT_NOT_VOID_WRAP(...) {}
#define glCopyColorTable_INDEX 370
#define glCopyColorTable_RETURN void
#define glCopyColorTable_ARG_NAMES target, internalformat, x, y, width
#define glCopyColorTable_ARG_EXPAND GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width
#define glCopyColorTable_PACKED PACKED_void_GLenum_GLenum_GLint_GLint_GLsizei
#define glCopyColorTable_FORMAT FORMAT_void_GLenum_GLenum_GLint_GLint_GLsizei
#define glCopyColorTable_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCopyColorTable_NOT_VOID_WRAP(...) {}
#define glCopyColorTableSGI_INDEX 371
#define glCopyColorTableSGI_RETURN void
#define glCopyColorTableSGI_ARG_NAMES target, internalformat, x, y, width
#define glCopyColorTableSGI_ARG_EXPAND GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width
#define glCopyColorTableSGI_PACKED PACKED_void_GLenum_GLenum_GLint_GLint_GLsizei
#define glCopyColorTableSGI_FORMAT FORMAT_void_GLenum_GLenum_GLint_GLint_GLsizei
#define glCopyColorTableSGI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCopyColorTableSGI_NOT_VOID_WRAP(...) {}
#define glCopyConvolutionFilter1D_INDEX 372
#define glCopyConvolutionFilter1D_RETURN void
#define glCopyConvolutionFilter1D_ARG_NAMES target, internalformat, x, y, width
#define glCopyConvolutionFilter1D_ARG_EXPAND GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width
#define glCopyConvolutionFilter1D_PACKED PACKED_void_GLenum_GLenum_GLint_GLint_GLsizei
#define glCopyConvolutionFilter1D_FORMAT FORMAT_void_GLenum_GLenum_GLint_GLint_GLsizei
#define glCopyConvolutionFilter1D_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCopyConvolutionFilter1D_NOT_VOID_WRAP(...) {}
#define glCopyConvolutionFilter1DEXT_INDEX 373
#define glCopyConvolutionFilter1DEXT_RETURN void
#define glCopyConvolutionFilter1DEXT_ARG_NAMES target, internalformat, x, y, width
#define glCopyConvolutionFilter1DEXT_ARG_EXPAND GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width
#define glCopyConvolutionFilter1DEXT_PACKED PACKED_void_GLenum_GLenum_GLint_GLint_GLsizei
#define glCopyConvolutionFilter1DEXT_FORMAT FORMAT_void_GLenum_GLenum_GLint_GLint_GLsizei
#define glCopyConvolutionFilter1DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCopyConvolutionFilter1DEXT_NOT_VOID_WRAP(...) {}
#define glCopyConvolutionFilter2D_INDEX 374
#define glCopyConvolutionFilter2D_RETURN void
#define glCopyConvolutionFilter2D_ARG_NAMES target, internalformat, x, y, width, height
#define glCopyConvolutionFilter2D_ARG_EXPAND GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height
#define glCopyConvolutionFilter2D_PACKED PACKED_void_GLenum_GLenum_GLint_GLint_GLsizei_GLsizei
#define glCopyConvolutionFilter2D_FORMAT FORMAT_void_GLenum_GLenum_GLint_GLint_GLsizei_GLsizei
#define glCopyConvolutionFilter2D_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCopyConvolutionFilter2D_NOT_VOID_WRAP(...) {}
#define glCopyConvolutionFilter2DEXT_INDEX 375
#define glCopyConvolutionFilter2DEXT_RETURN void
#define glCopyConvolutionFilter2DEXT_ARG_NAMES target, internalformat, x, y, width, height
#define glCopyConvolutionFilter2DEXT_ARG_EXPAND GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height
#define glCopyConvolutionFilter2DEXT_PACKED PACKED_void_GLenum_GLenum_GLint_GLint_GLsizei_GLsizei
#define glCopyConvolutionFilter2DEXT_FORMAT FORMAT_void_GLenum_GLenum_GLint_GLint_GLsizei_GLsizei
#define glCopyConvolutionFilter2DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCopyConvolutionFilter2DEXT_NOT_VOID_WRAP(...) {}
#define glCopyImageSubData_INDEX 376
#define glCopyImageSubData_RETURN void
#define glCopyImageSubData_ARG_NAMES srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth
#define glCopyImageSubData_ARG_EXPAND GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth
#define glCopyImageSubData_PACKED PACKED_void_GLuint_GLenum_GLint_GLint_GLint_GLint_GLuint_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei
#define glCopyImageSubData_FORMAT FORMAT_void_GLuint_GLenum_GLint_GLint_GLint_GLint_GLuint_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei
#define glCopyImageSubData_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCopyImageSubData_NOT_VOID_WRAP(...) {}
#define glCopyImageSubDataNV_INDEX 377
#define glCopyImageSubDataNV_RETURN void
#define glCopyImageSubDataNV_ARG_NAMES srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth
#define glCopyImageSubDataNV_ARG_EXPAND GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth
#define glCopyImageSubDataNV_PACKED PACKED_void_GLuint_GLenum_GLint_GLint_GLint_GLint_GLuint_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei
#define glCopyImageSubDataNV_FORMAT FORMAT_void_GLuint_GLenum_GLint_GLint_GLint_GLint_GLuint_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei
#define glCopyImageSubDataNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCopyImageSubDataNV_NOT_VOID_WRAP(...) {}
#define glCopyMultiTexImage1DEXT_INDEX 378
#define glCopyMultiTexImage1DEXT_RETURN void
#define glCopyMultiTexImage1DEXT_ARG_NAMES texunit, target, level, internalformat, x, y, width, border
#define glCopyMultiTexImage1DEXT_ARG_EXPAND GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border
#define glCopyMultiTexImage1DEXT_PACKED PACKED_void_GLenum_GLenum_GLint_GLenum_GLint_GLint_GLsizei_GLint
#define glCopyMultiTexImage1DEXT_FORMAT FORMAT_void_GLenum_GLenum_GLint_GLenum_GLint_GLint_GLsizei_GLint
#define glCopyMultiTexImage1DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCopyMultiTexImage1DEXT_NOT_VOID_WRAP(...) {}
#define glCopyMultiTexImage2DEXT_INDEX 379
#define glCopyMultiTexImage2DEXT_RETURN void
#define glCopyMultiTexImage2DEXT_ARG_NAMES texunit, target, level, internalformat, x, y, width, height, border
#define glCopyMultiTexImage2DEXT_ARG_EXPAND GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border
#define glCopyMultiTexImage2DEXT_PACKED PACKED_void_GLenum_GLenum_GLint_GLenum_GLint_GLint_GLsizei_GLsizei_GLint
#define glCopyMultiTexImage2DEXT_FORMAT FORMAT_void_GLenum_GLenum_GLint_GLenum_GLint_GLint_GLsizei_GLsizei_GLint
#define glCopyMultiTexImage2DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCopyMultiTexImage2DEXT_NOT_VOID_WRAP(...) {}
#define glCopyMultiTexSubImage1DEXT_INDEX 380
#define glCopyMultiTexSubImage1DEXT_RETURN void
#define glCopyMultiTexSubImage1DEXT_ARG_NAMES texunit, target, level, xoffset, x, y, width
#define glCopyMultiTexSubImage1DEXT_ARG_EXPAND GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width
#define glCopyMultiTexSubImage1DEXT_PACKED PACKED_void_GLenum_GLenum_GLint_GLint_GLint_GLint_GLsizei
#define glCopyMultiTexSubImage1DEXT_FORMAT FORMAT_void_GLenum_GLenum_GLint_GLint_GLint_GLint_GLsizei
#define glCopyMultiTexSubImage1DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCopyMultiTexSubImage1DEXT_NOT_VOID_WRAP(...) {}
#define glCopyMultiTexSubImage2DEXT_INDEX 381
#define glCopyMultiTexSubImage2DEXT_RETURN void
#define glCopyMultiTexSubImage2DEXT_ARG_NAMES texunit, target, level, xoffset, yoffset, x, y, width, height
#define glCopyMultiTexSubImage2DEXT_ARG_EXPAND GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height
#define glCopyMultiTexSubImage2DEXT_PACKED PACKED_void_GLenum_GLenum_GLint_GLint_GLint_GLint_GLint_GLsizei_GLsizei
#define glCopyMultiTexSubImage2DEXT_FORMAT FORMAT_void_GLenum_GLenum_GLint_GLint_GLint_GLint_GLint_GLsizei_GLsizei
#define glCopyMultiTexSubImage2DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCopyMultiTexSubImage2DEXT_NOT_VOID_WRAP(...) {}
#define glCopyMultiTexSubImage3DEXT_INDEX 382
#define glCopyMultiTexSubImage3DEXT_RETURN void
#define glCopyMultiTexSubImage3DEXT_ARG_NAMES texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height
#define glCopyMultiTexSubImage3DEXT_ARG_EXPAND GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height
#define glCopyMultiTexSubImage3DEXT_PACKED PACKED_void_GLenum_GLenum_GLint_GLint_GLint_GLint_GLint_GLint_GLsizei_GLsizei
#define glCopyMultiTexSubImage3DEXT_FORMAT FORMAT_void_GLenum_GLenum_GLint_GLint_GLint_GLint_GLint_GLint_GLsizei_GLsizei
#define glCopyMultiTexSubImage3DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCopyMultiTexSubImage3DEXT_NOT_VOID_WRAP(...) {}
#define glCopyPathNV_INDEX 383
#define glCopyPathNV_RETURN void
#define glCopyPathNV_ARG_NAMES resultPath, srcPath
#define glCopyPathNV_ARG_EXPAND GLuint resultPath, GLuint srcPath
#define glCopyPathNV_PACKED PACKED_void_GLuint_GLuint
#define glCopyPathNV_FORMAT FORMAT_void_GLuint_GLuint
#define glCopyPathNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCopyPathNV_NOT_VOID_WRAP(...) {}
#define glCopyPixels_INDEX 384
#define glCopyPixels_RETURN void
#define glCopyPixels_ARG_NAMES x, y, width, height, type
#define glCopyPixels_ARG_EXPAND GLint x, GLint y, GLsizei width, GLsizei height, GLenum type
#define glCopyPixels_PACKED PACKED_void_GLint_GLint_GLsizei_GLsizei_GLenum
#define glCopyPixels_FORMAT FORMAT_void_GLint_GLint_GLsizei_GLsizei_GLenum
#define glCopyPixels_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCopyPixels_NOT_VOID_WRAP(...) {}
#define glCopyTexImage1D_INDEX 385
#define glCopyTexImage1D_RETURN void
#define glCopyTexImage1D_ARG_NAMES target, level, internalformat, x, y, width, border
#define glCopyTexImage1D_ARG_EXPAND GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border
#define glCopyTexImage1D_PACKED PACKED_void_GLenum_GLint_GLenum_GLint_GLint_GLsizei_GLint
#define glCopyTexImage1D_FORMAT FORMAT_void_GLenum_GLint_GLenum_GLint_GLint_GLsizei_GLint
#define glCopyTexImage1D_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCopyTexImage1D_NOT_VOID_WRAP(...) {}
#define glCopyTexImage1DEXT_INDEX 386
#define glCopyTexImage1DEXT_RETURN void
#define glCopyTexImage1DEXT_ARG_NAMES target, level, internalformat, x, y, width, border
#define glCopyTexImage1DEXT_ARG_EXPAND GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border
#define glCopyTexImage1DEXT_PACKED PACKED_void_GLenum_GLint_GLenum_GLint_GLint_GLsizei_GLint
#define glCopyTexImage1DEXT_FORMAT FORMAT_void_GLenum_GLint_GLenum_GLint_GLint_GLsizei_GLint
#define glCopyTexImage1DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCopyTexImage1DEXT_NOT_VOID_WRAP(...) {}
#define glCopyTexImage2D_INDEX 387
#define glCopyTexImage2D_RETURN void
#define glCopyTexImage2D_ARG_NAMES target, level, internalformat, x, y, width, height, border
#define glCopyTexImage2D_ARG_EXPAND GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border
#define glCopyTexImage2D_PACKED PACKED_void_GLenum_GLint_GLenum_GLint_GLint_GLsizei_GLsizei_GLint
#define glCopyTexImage2D_FORMAT FORMAT_void_GLenum_GLint_GLenum_GLint_GLint_GLsizei_GLsizei_GLint
#define glCopyTexImage2D_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCopyTexImage2D_NOT_VOID_WRAP(...) {}
#define glCopyTexImage2DEXT_INDEX 388
#define glCopyTexImage2DEXT_RETURN void
#define glCopyTexImage2DEXT_ARG_NAMES target, level, internalformat, x, y, width, height, border
#define glCopyTexImage2DEXT_ARG_EXPAND GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border
#define glCopyTexImage2DEXT_PACKED PACKED_void_GLenum_GLint_GLenum_GLint_GLint_GLsizei_GLsizei_GLint
#define glCopyTexImage2DEXT_FORMAT FORMAT_void_GLenum_GLint_GLenum_GLint_GLint_GLsizei_GLsizei_GLint
#define glCopyTexImage2DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCopyTexImage2DEXT_NOT_VOID_WRAP(...) {}
#define glCopyTexSubImage1D_INDEX 389
#define glCopyTexSubImage1D_RETURN void
#define glCopyTexSubImage1D_ARG_NAMES target, level, xoffset, x, y, width
#define glCopyTexSubImage1D_ARG_EXPAND GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width
#define glCopyTexSubImage1D_PACKED PACKED_void_GLenum_GLint_GLint_GLint_GLint_GLsizei
#define glCopyTexSubImage1D_FORMAT FORMAT_void_GLenum_GLint_GLint_GLint_GLint_GLsizei
#define glCopyTexSubImage1D_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCopyTexSubImage1D_NOT_VOID_WRAP(...) {}
#define glCopyTexSubImage1DEXT_INDEX 390
#define glCopyTexSubImage1DEXT_RETURN void
#define glCopyTexSubImage1DEXT_ARG_NAMES target, level, xoffset, x, y, width
#define glCopyTexSubImage1DEXT_ARG_EXPAND GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width
#define glCopyTexSubImage1DEXT_PACKED PACKED_void_GLenum_GLint_GLint_GLint_GLint_GLsizei
#define glCopyTexSubImage1DEXT_FORMAT FORMAT_void_GLenum_GLint_GLint_GLint_GLint_GLsizei
#define glCopyTexSubImage1DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCopyTexSubImage1DEXT_NOT_VOID_WRAP(...) {}
#define glCopyTexSubImage2D_INDEX 391
#define glCopyTexSubImage2D_RETURN void
#define glCopyTexSubImage2D_ARG_NAMES target, level, xoffset, yoffset, x, y, width, height
#define glCopyTexSubImage2D_ARG_EXPAND GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height
#define glCopyTexSubImage2D_PACKED PACKED_void_GLenum_GLint_GLint_GLint_GLint_GLint_GLsizei_GLsizei
#define glCopyTexSubImage2D_FORMAT FORMAT_void_GLenum_GLint_GLint_GLint_GLint_GLint_GLsizei_GLsizei
#define glCopyTexSubImage2D_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCopyTexSubImage2D_NOT_VOID_WRAP(...) {}
#define glCopyTexSubImage2DEXT_INDEX 392
#define glCopyTexSubImage2DEXT_RETURN void
#define glCopyTexSubImage2DEXT_ARG_NAMES target, level, xoffset, yoffset, x, y, width, height
#define glCopyTexSubImage2DEXT_ARG_EXPAND GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height
#define glCopyTexSubImage2DEXT_PACKED PACKED_void_GLenum_GLint_GLint_GLint_GLint_GLint_GLsizei_GLsizei
#define glCopyTexSubImage2DEXT_FORMAT FORMAT_void_GLenum_GLint_GLint_GLint_GLint_GLint_GLsizei_GLsizei
#define glCopyTexSubImage2DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCopyTexSubImage2DEXT_NOT_VOID_WRAP(...) {}
#define glCopyTexSubImage3D_INDEX 393
#define glCopyTexSubImage3D_RETURN void
#define glCopyTexSubImage3D_ARG_NAMES target, level, xoffset, yoffset, zoffset, x, y, width, height
#define glCopyTexSubImage3D_ARG_EXPAND GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height
#define glCopyTexSubImage3D_PACKED PACKED_void_GLenum_GLint_GLint_GLint_GLint_GLint_GLint_GLsizei_GLsizei
#define glCopyTexSubImage3D_FORMAT FORMAT_void_GLenum_GLint_GLint_GLint_GLint_GLint_GLint_GLsizei_GLsizei
#define glCopyTexSubImage3D_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCopyTexSubImage3D_NOT_VOID_WRAP(...) {}
#define glCopyTexSubImage3DEXT_INDEX 394
#define glCopyTexSubImage3DEXT_RETURN void
#define glCopyTexSubImage3DEXT_ARG_NAMES target, level, xoffset, yoffset, zoffset, x, y, width, height
#define glCopyTexSubImage3DEXT_ARG_EXPAND GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height
#define glCopyTexSubImage3DEXT_PACKED PACKED_void_GLenum_GLint_GLint_GLint_GLint_GLint_GLint_GLsizei_GLsizei
#define glCopyTexSubImage3DEXT_FORMAT FORMAT_void_GLenum_GLint_GLint_GLint_GLint_GLint_GLint_GLsizei_GLsizei
#define glCopyTexSubImage3DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCopyTexSubImage3DEXT_NOT_VOID_WRAP(...) {}
#define glCopyTextureImage1DEXT_INDEX 395
#define glCopyTextureImage1DEXT_RETURN void
#define glCopyTextureImage1DEXT_ARG_NAMES texture, target, level, internalformat, x, y, width, border
#define glCopyTextureImage1DEXT_ARG_EXPAND GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border
#define glCopyTextureImage1DEXT_PACKED PACKED_void_GLuint_GLenum_GLint_GLenum_GLint_GLint_GLsizei_GLint
#define glCopyTextureImage1DEXT_FORMAT FORMAT_void_GLuint_GLenum_GLint_GLenum_GLint_GLint_GLsizei_GLint
#define glCopyTextureImage1DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCopyTextureImage1DEXT_NOT_VOID_WRAP(...) {}
#define glCopyTextureImage2DEXT_INDEX 396
#define glCopyTextureImage2DEXT_RETURN void
#define glCopyTextureImage2DEXT_ARG_NAMES texture, target, level, internalformat, x, y, width, height, border
#define glCopyTextureImage2DEXT_ARG_EXPAND GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border
#define glCopyTextureImage2DEXT_PACKED PACKED_void_GLuint_GLenum_GLint_GLenum_GLint_GLint_GLsizei_GLsizei_GLint
#define glCopyTextureImage2DEXT_FORMAT FORMAT_void_GLuint_GLenum_GLint_GLenum_GLint_GLint_GLsizei_GLsizei_GLint
#define glCopyTextureImage2DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCopyTextureImage2DEXT_NOT_VOID_WRAP(...) {}
#define glCopyTextureSubImage1DEXT_INDEX 397
#define glCopyTextureSubImage1DEXT_RETURN void
#define glCopyTextureSubImage1DEXT_ARG_NAMES texture, target, level, xoffset, x, y, width
#define glCopyTextureSubImage1DEXT_ARG_EXPAND GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width
#define glCopyTextureSubImage1DEXT_PACKED PACKED_void_GLuint_GLenum_GLint_GLint_GLint_GLint_GLsizei
#define glCopyTextureSubImage1DEXT_FORMAT FORMAT_void_GLuint_GLenum_GLint_GLint_GLint_GLint_GLsizei
#define glCopyTextureSubImage1DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCopyTextureSubImage1DEXT_NOT_VOID_WRAP(...) {}
#define glCopyTextureSubImage2DEXT_INDEX 398
#define glCopyTextureSubImage2DEXT_RETURN void
#define glCopyTextureSubImage2DEXT_ARG_NAMES texture, target, level, xoffset, yoffset, x, y, width, height
#define glCopyTextureSubImage2DEXT_ARG_EXPAND GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height
#define glCopyTextureSubImage2DEXT_PACKED PACKED_void_GLuint_GLenum_GLint_GLint_GLint_GLint_GLint_GLsizei_GLsizei
#define glCopyTextureSubImage2DEXT_FORMAT FORMAT_void_GLuint_GLenum_GLint_GLint_GLint_GLint_GLint_GLsizei_GLsizei
#define glCopyTextureSubImage2DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCopyTextureSubImage2DEXT_NOT_VOID_WRAP(...) {}
#define glCopyTextureSubImage3DEXT_INDEX 399
#define glCopyTextureSubImage3DEXT_RETURN void
#define glCopyTextureSubImage3DEXT_ARG_NAMES texture, target, level, xoffset, yoffset, zoffset, x, y, width, height
#define glCopyTextureSubImage3DEXT_ARG_EXPAND GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height
#define glCopyTextureSubImage3DEXT_PACKED PACKED_void_GLuint_GLenum_GLint_GLint_GLint_GLint_GLint_GLint_GLsizei_GLsizei
#define glCopyTextureSubImage3DEXT_FORMAT FORMAT_void_GLuint_GLenum_GLint_GLint_GLint_GLint_GLint_GLint_GLsizei_GLsizei
#define glCopyTextureSubImage3DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCopyTextureSubImage3DEXT_NOT_VOID_WRAP(...) {}
#define glCoverFillPathInstancedNV_INDEX 400
#define glCoverFillPathInstancedNV_RETURN void
#define glCoverFillPathInstancedNV_ARG_NAMES numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues
#define glCoverFillPathInstancedNV_ARG_EXPAND GLsizei numPaths, GLenum pathNameType, const GLvoid * paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat * transformValues
#define glCoverFillPathInstancedNV_PACKED PACKED_void_GLsizei_GLenum_const_GLvoid___GENPT___GLuint_GLenum_GLenum_const_GLfloat___GENPT__
#define glCoverFillPathInstancedNV_FORMAT FORMAT_void_GLsizei_GLenum_const_GLvoid___GENPT___GLuint_GLenum_GLenum_const_GLfloat___GENPT__
#define glCoverFillPathInstancedNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCoverFillPathInstancedNV_NOT_VOID_WRAP(...) {}
#define glCoverFillPathNV_INDEX 401
#define glCoverFillPathNV_RETURN void
#define glCoverFillPathNV_ARG_NAMES path, coverMode
#define glCoverFillPathNV_ARG_EXPAND GLuint path, GLenum coverMode
#define glCoverFillPathNV_PACKED PACKED_void_GLuint_GLenum
#define glCoverFillPathNV_FORMAT FORMAT_void_GLuint_GLenum
#define glCoverFillPathNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCoverFillPathNV_NOT_VOID_WRAP(...) {}
#define glCoverStrokePathInstancedNV_INDEX 402
#define glCoverStrokePathInstancedNV_RETURN void
#define glCoverStrokePathInstancedNV_ARG_NAMES numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues
#define glCoverStrokePathInstancedNV_ARG_EXPAND GLsizei numPaths, GLenum pathNameType, const GLvoid * paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat * transformValues
#define glCoverStrokePathInstancedNV_PACKED PACKED_void_GLsizei_GLenum_const_GLvoid___GENPT___GLuint_GLenum_GLenum_const_GLfloat___GENPT__
#define glCoverStrokePathInstancedNV_FORMAT FORMAT_void_GLsizei_GLenum_const_GLvoid___GENPT___GLuint_GLenum_GLenum_const_GLfloat___GENPT__
#define glCoverStrokePathInstancedNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCoverStrokePathInstancedNV_NOT_VOID_WRAP(...) {}
#define glCoverStrokePathNV_INDEX 403
#define glCoverStrokePathNV_RETURN void
#define glCoverStrokePathNV_ARG_NAMES path, coverMode
#define glCoverStrokePathNV_ARG_EXPAND GLuint path, GLenum coverMode
#define glCoverStrokePathNV_PACKED PACKED_void_GLuint_GLenum
#define glCoverStrokePathNV_FORMAT FORMAT_void_GLuint_GLenum
#define glCoverStrokePathNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCoverStrokePathNV_NOT_VOID_WRAP(...) {}
#define glCreateProgram_INDEX 404
#define glCreateProgram_RETURN GLuint
#define glCreateProgram_ARG_NAMES 
#define glCreateProgram_ARG_EXPAND 
#define glCreateProgram_PACKED PACKED_GLuint
#define glCreateProgram_FORMAT FORMAT_GLuint
#define glCreateProgram_VOID_ONLY_WRAP(...) {}
#define glCreateProgram_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glCreateProgramObjectARB_INDEX 405
#define glCreateProgramObjectARB_RETURN GLhandleARB
#define glCreateProgramObjectARB_ARG_NAMES 
#define glCreateProgramObjectARB_ARG_EXPAND 
#define glCreateProgramObjectARB_PACKED PACKED_GLhandleARB
#define glCreateProgramObjectARB_FORMAT FORMAT_GLhandleARB
#define glCreateProgramObjectARB_VOID_ONLY_WRAP(...) {}
#define glCreateProgramObjectARB_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glCreateShader_INDEX 406
#define glCreateShader_RETURN GLuint
#define glCreateShader_ARG_NAMES type
#define glCreateShader_ARG_EXPAND GLenum type
#define glCreateShader_PACKED PACKED_GLuint_GLenum
#define glCreateShader_FORMAT FORMAT_GLuint_GLenum
#define glCreateShader_VOID_ONLY_WRAP(...) {}
#define glCreateShader_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glCreateShaderObjectARB_INDEX 407
#define glCreateShaderObjectARB_RETURN GLhandleARB
#define glCreateShaderObjectARB_ARG_NAMES shaderType
#define glCreateShaderObjectARB_ARG_EXPAND GLenum shaderType
#define glCreateShaderObjectARB_PACKED PACKED_GLhandleARB_GLenum
#define glCreateShaderObjectARB_FORMAT FORMAT_GLhandleARB_GLenum
#define glCreateShaderObjectARB_VOID_ONLY_WRAP(...) {}
#define glCreateShaderObjectARB_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glCreateShaderProgramEXT_INDEX 408
#define glCreateShaderProgramEXT_RETURN GLuint
#define glCreateShaderProgramEXT_ARG_NAMES type, string
#define glCreateShaderProgramEXT_ARG_EXPAND GLenum type, const GLchar * string
#define glCreateShaderProgramEXT_PACKED PACKED_GLuint_GLenum_const_GLchar___GENPT__
#define glCreateShaderProgramEXT_FORMAT FORMAT_GLuint_GLenum_const_GLchar___GENPT__
#define glCreateShaderProgramEXT_VOID_ONLY_WRAP(...) {}
#define glCreateShaderProgramEXT_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glCreateShaderProgramv_INDEX 409
#define glCreateShaderProgramv_RETURN GLuint
#define glCreateShaderProgramv_ARG_NAMES type, count, strings
#define glCreateShaderProgramv_ARG_EXPAND GLenum type, GLsizei count, GLchar*const * strings
#define glCreateShaderProgramv_PACKED PACKED_GLuint_GLenum_GLsizei_GLchar__GENPT__const___GENPT__
#define glCreateShaderProgramv_FORMAT FORMAT_GLuint_GLenum_GLsizei_GLchar__GENPT__const___GENPT__
#define glCreateShaderProgramv_VOID_ONLY_WRAP(...) {}
#define glCreateShaderProgramv_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glCreateSyncFromCLeventARB_INDEX 410
#define glCreateSyncFromCLeventARB_RETURN GLsync
#define glCreateSyncFromCLeventARB_ARG_NAMES context, event, flags
#define glCreateSyncFromCLeventARB_ARG_EXPAND struct _cl_context * context, struct _cl_event * event, GLbitfield flags
#define glCreateSyncFromCLeventARB_PACKED PACKED_GLsync_struct__cl_context___GENPT___struct__cl_event___GENPT___GLbitfield
#define glCreateSyncFromCLeventARB_FORMAT FORMAT_GLsync_struct__cl_context___GENPT___struct__cl_event___GENPT___GLbitfield
#define glCreateSyncFromCLeventARB_VOID_ONLY_WRAP(...) {}
#define glCreateSyncFromCLeventARB_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glCullFace_INDEX 411
#define glCullFace_RETURN void
#define glCullFace_ARG_NAMES mode
#define glCullFace_ARG_EXPAND GLenum mode
#define glCullFace_PACKED PACKED_void_GLenum
#define glCullFace_FORMAT FORMAT_void_GLenum
#define glCullFace_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCullFace_NOT_VOID_WRAP(...) {}
#define glCullParameterdvEXT_INDEX 412
#define glCullParameterdvEXT_RETURN void
#define glCullParameterdvEXT_ARG_NAMES pname, params
#define glCullParameterdvEXT_ARG_EXPAND GLenum pname, GLdouble * params
#define glCullParameterdvEXT_PACKED PACKED_void_GLenum_GLdouble___GENPT__
#define glCullParameterdvEXT_FORMAT FORMAT_void_GLenum_GLdouble___GENPT__
#define glCullParameterdvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCullParameterdvEXT_NOT_VOID_WRAP(...) {}
#define glCullParameterfvEXT_INDEX 413
#define glCullParameterfvEXT_RETURN void
#define glCullParameterfvEXT_ARG_NAMES pname, params
#define glCullParameterfvEXT_ARG_EXPAND GLenum pname, GLfloat * params
#define glCullParameterfvEXT_PACKED PACKED_void_GLenum_GLfloat___GENPT__
#define glCullParameterfvEXT_FORMAT FORMAT_void_GLenum_GLfloat___GENPT__
#define glCullParameterfvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCullParameterfvEXT_NOT_VOID_WRAP(...) {}
#define glCurrentPaletteMatrixARB_INDEX 414
#define glCurrentPaletteMatrixARB_RETURN void
#define glCurrentPaletteMatrixARB_ARG_NAMES index
#define glCurrentPaletteMatrixARB_ARG_EXPAND GLint index
#define glCurrentPaletteMatrixARB_PACKED PACKED_void_GLint
#define glCurrentPaletteMatrixARB_FORMAT FORMAT_void_GLint
#define glCurrentPaletteMatrixARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glCurrentPaletteMatrixARB_NOT_VOID_WRAP(...) {}
#define glDebugMessageCallback_INDEX 415
#define glDebugMessageCallback_RETURN void
#define glDebugMessageCallback_ARG_NAMES callback, userParam
#define glDebugMessageCallback_ARG_EXPAND GLDEBUGPROC callback, const void * userParam
#define glDebugMessageCallback_PACKED PACKED_void_GLDEBUGPROC_const_void___GENPT__
#define glDebugMessageCallback_FORMAT FORMAT_void_GLDEBUGPROC_const_void___GENPT__
#define glDebugMessageCallback_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDebugMessageCallback_NOT_VOID_WRAP(...) {}
#define glDebugMessageCallbackAMD_INDEX 416
#define glDebugMessageCallbackAMD_RETURN void
#define glDebugMessageCallbackAMD_ARG_NAMES callback, userParam
#define glDebugMessageCallbackAMD_ARG_EXPAND GLDEBUGPROCAMD callback, GLvoid * userParam
#define glDebugMessageCallbackAMD_PACKED PACKED_void_GLDEBUGPROCAMD_GLvoid___GENPT__
#define glDebugMessageCallbackAMD_FORMAT FORMAT_void_GLDEBUGPROCAMD_GLvoid___GENPT__
#define glDebugMessageCallbackAMD_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDebugMessageCallbackAMD_NOT_VOID_WRAP(...) {}
#define glDebugMessageCallbackARB_INDEX 417
#define glDebugMessageCallbackARB_RETURN void
#define glDebugMessageCallbackARB_ARG_NAMES callback, userParam
#define glDebugMessageCallbackARB_ARG_EXPAND GLDEBUGPROCARB callback, const GLvoid * userParam
#define glDebugMessageCallbackARB_PACKED PACKED_void_GLDEBUGPROCARB_const_GLvoid___GENPT__
#define glDebugMessageCallbackARB_FORMAT FORMAT_void_GLDEBUGPROCARB_const_GLvoid___GENPT__
#define glDebugMessageCallbackARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDebugMessageCallbackARB_NOT_VOID_WRAP(...) {}
#define glDebugMessageControl_INDEX 418
#define glDebugMessageControl_RETURN void
#define glDebugMessageControl_ARG_NAMES source, type, severity, count, ids, enabled
#define glDebugMessageControl_ARG_EXPAND GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled
#define glDebugMessageControl_PACKED PACKED_void_GLenum_GLenum_GLenum_GLsizei_const_GLuint___GENPT___GLboolean
#define glDebugMessageControl_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLsizei_const_GLuint___GENPT___GLboolean
#define glDebugMessageControl_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDebugMessageControl_NOT_VOID_WRAP(...) {}
#define glDebugMessageControlARB_INDEX 419
#define glDebugMessageControlARB_RETURN void
#define glDebugMessageControlARB_ARG_NAMES source, type, severity, count, ids, enabled
#define glDebugMessageControlARB_ARG_EXPAND GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled
#define glDebugMessageControlARB_PACKED PACKED_void_GLenum_GLenum_GLenum_GLsizei_const_GLuint___GENPT___GLboolean
#define glDebugMessageControlARB_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLsizei_const_GLuint___GENPT___GLboolean
#define glDebugMessageControlARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDebugMessageControlARB_NOT_VOID_WRAP(...) {}
#define glDebugMessageEnableAMD_INDEX 420
#define glDebugMessageEnableAMD_RETURN void
#define glDebugMessageEnableAMD_ARG_NAMES category, severity, count, ids, enabled
#define glDebugMessageEnableAMD_ARG_EXPAND GLenum category, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled
#define glDebugMessageEnableAMD_PACKED PACKED_void_GLenum_GLenum_GLsizei_const_GLuint___GENPT___GLboolean
#define glDebugMessageEnableAMD_FORMAT FORMAT_void_GLenum_GLenum_GLsizei_const_GLuint___GENPT___GLboolean
#define glDebugMessageEnableAMD_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDebugMessageEnableAMD_NOT_VOID_WRAP(...) {}
#define glDebugMessageInsert_INDEX 421
#define glDebugMessageInsert_RETURN void
#define glDebugMessageInsert_ARG_NAMES source, type, id, severity, length, buf
#define glDebugMessageInsert_ARG_EXPAND GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf
#define glDebugMessageInsert_PACKED PACKED_void_GLenum_GLenum_GLuint_GLenum_GLsizei_const_GLchar___GENPT__
#define glDebugMessageInsert_FORMAT FORMAT_void_GLenum_GLenum_GLuint_GLenum_GLsizei_const_GLchar___GENPT__
#define glDebugMessageInsert_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDebugMessageInsert_NOT_VOID_WRAP(...) {}
#define glDebugMessageInsertAMD_INDEX 422
#define glDebugMessageInsertAMD_RETURN void
#define glDebugMessageInsertAMD_ARG_NAMES category, severity, id, length, buf
#define glDebugMessageInsertAMD_ARG_EXPAND GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar * buf
#define glDebugMessageInsertAMD_PACKED PACKED_void_GLenum_GLenum_GLuint_GLsizei_const_GLchar___GENPT__
#define glDebugMessageInsertAMD_FORMAT FORMAT_void_GLenum_GLenum_GLuint_GLsizei_const_GLchar___GENPT__
#define glDebugMessageInsertAMD_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDebugMessageInsertAMD_NOT_VOID_WRAP(...) {}
#define glDebugMessageInsertARB_INDEX 423
#define glDebugMessageInsertARB_RETURN void
#define glDebugMessageInsertARB_ARG_NAMES source, type, id, severity, length, buf
#define glDebugMessageInsertARB_ARG_EXPAND GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf
#define glDebugMessageInsertARB_PACKED PACKED_void_GLenum_GLenum_GLuint_GLenum_GLsizei_const_GLchar___GENPT__
#define glDebugMessageInsertARB_FORMAT FORMAT_void_GLenum_GLenum_GLuint_GLenum_GLsizei_const_GLchar___GENPT__
#define glDebugMessageInsertARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDebugMessageInsertARB_NOT_VOID_WRAP(...) {}
#define glDeformSGIX_INDEX 424
#define glDeformSGIX_RETURN void
#define glDeformSGIX_ARG_NAMES mask
#define glDeformSGIX_ARG_EXPAND GLbitfield mask
#define glDeformSGIX_PACKED PACKED_void_GLbitfield
#define glDeformSGIX_FORMAT FORMAT_void_GLbitfield
#define glDeformSGIX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDeformSGIX_NOT_VOID_WRAP(...) {}
#define glDeformationMap3dSGIX_INDEX 425
#define glDeformationMap3dSGIX_RETURN void
#define glDeformationMap3dSGIX_ARG_NAMES target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points
#define glDeformationMap3dSGIX_ARG_EXPAND GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble * points
#define glDeformationMap3dSGIX_PACKED PACKED_void_GLenum_GLdouble_GLdouble_GLint_GLint_GLdouble_GLdouble_GLint_GLint_GLdouble_GLdouble_GLint_GLint_const_GLdouble___GENPT__
#define glDeformationMap3dSGIX_FORMAT FORMAT_void_GLenum_GLdouble_GLdouble_GLint_GLint_GLdouble_GLdouble_GLint_GLint_GLdouble_GLdouble_GLint_GLint_const_GLdouble___GENPT__
#define glDeformationMap3dSGIX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDeformationMap3dSGIX_NOT_VOID_WRAP(...) {}
#define glDeformationMap3fSGIX_INDEX 426
#define glDeformationMap3fSGIX_RETURN void
#define glDeformationMap3fSGIX_ARG_NAMES target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points
#define glDeformationMap3fSGIX_ARG_EXPAND GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat * points
#define glDeformationMap3fSGIX_PACKED PACKED_void_GLenum_GLfloat_GLfloat_GLint_GLint_GLfloat_GLfloat_GLint_GLint_GLfloat_GLfloat_GLint_GLint_const_GLfloat___GENPT__
#define glDeformationMap3fSGIX_FORMAT FORMAT_void_GLenum_GLfloat_GLfloat_GLint_GLint_GLfloat_GLfloat_GLint_GLint_GLfloat_GLfloat_GLint_GLint_const_GLfloat___GENPT__
#define glDeformationMap3fSGIX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDeformationMap3fSGIX_NOT_VOID_WRAP(...) {}
#define glDeleteAsyncMarkersSGIX_INDEX 427
#define glDeleteAsyncMarkersSGIX_RETURN void
#define glDeleteAsyncMarkersSGIX_ARG_NAMES marker, range
#define glDeleteAsyncMarkersSGIX_ARG_EXPAND GLuint marker, GLsizei range
#define glDeleteAsyncMarkersSGIX_PACKED PACKED_void_GLuint_GLsizei
#define glDeleteAsyncMarkersSGIX_FORMAT FORMAT_void_GLuint_GLsizei
#define glDeleteAsyncMarkersSGIX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDeleteAsyncMarkersSGIX_NOT_VOID_WRAP(...) {}
#define glDeleteBuffers_INDEX 428
#define glDeleteBuffers_RETURN void
#define glDeleteBuffers_ARG_NAMES n, buffers
#define glDeleteBuffers_ARG_EXPAND GLsizei n, const GLuint * buffers
#define glDeleteBuffers_PACKED PACKED_void_GLsizei_const_GLuint___GENPT__
#define glDeleteBuffers_FORMAT FORMAT_void_GLsizei_const_GLuint___GENPT__
#define glDeleteBuffers_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDeleteBuffers_NOT_VOID_WRAP(...) {}
#define glDeleteBuffersARB_INDEX 429
#define glDeleteBuffersARB_RETURN void
#define glDeleteBuffersARB_ARG_NAMES n, buffers
#define glDeleteBuffersARB_ARG_EXPAND GLsizei n, const GLuint * buffers
#define glDeleteBuffersARB_PACKED PACKED_void_GLsizei_const_GLuint___GENPT__
#define glDeleteBuffersARB_FORMAT FORMAT_void_GLsizei_const_GLuint___GENPT__
#define glDeleteBuffersARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDeleteBuffersARB_NOT_VOID_WRAP(...) {}
#define glDeleteFencesAPPLE_INDEX 430
#define glDeleteFencesAPPLE_RETURN void
#define glDeleteFencesAPPLE_ARG_NAMES n, fences
#define glDeleteFencesAPPLE_ARG_EXPAND GLsizei n, const GLuint * fences
#define glDeleteFencesAPPLE_PACKED PACKED_void_GLsizei_const_GLuint___GENPT__
#define glDeleteFencesAPPLE_FORMAT FORMAT_void_GLsizei_const_GLuint___GENPT__
#define glDeleteFencesAPPLE_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDeleteFencesAPPLE_NOT_VOID_WRAP(...) {}
#define glDeleteFencesNV_INDEX 431
#define glDeleteFencesNV_RETURN void
#define glDeleteFencesNV_ARG_NAMES n, fences
#define glDeleteFencesNV_ARG_EXPAND GLsizei n, const GLuint * fences
#define glDeleteFencesNV_PACKED PACKED_void_GLsizei_const_GLuint___GENPT__
#define glDeleteFencesNV_FORMAT FORMAT_void_GLsizei_const_GLuint___GENPT__
#define glDeleteFencesNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDeleteFencesNV_NOT_VOID_WRAP(...) {}
#define glDeleteFragmentShaderATI_INDEX 432
#define glDeleteFragmentShaderATI_RETURN void
#define glDeleteFragmentShaderATI_ARG_NAMES id
#define glDeleteFragmentShaderATI_ARG_EXPAND GLuint id
#define glDeleteFragmentShaderATI_PACKED PACKED_void_GLuint
#define glDeleteFragmentShaderATI_FORMAT FORMAT_void_GLuint
#define glDeleteFragmentShaderATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDeleteFragmentShaderATI_NOT_VOID_WRAP(...) {}
#define glDeleteFramebuffers_INDEX 433
#define glDeleteFramebuffers_RETURN void
#define glDeleteFramebuffers_ARG_NAMES n, framebuffers
#define glDeleteFramebuffers_ARG_EXPAND GLsizei n, const GLuint * framebuffers
#define glDeleteFramebuffers_PACKED PACKED_void_GLsizei_const_GLuint___GENPT__
#define glDeleteFramebuffers_FORMAT FORMAT_void_GLsizei_const_GLuint___GENPT__
#define glDeleteFramebuffers_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDeleteFramebuffers_NOT_VOID_WRAP(...) {}
#define glDeleteFramebuffersEXT_INDEX 434
#define glDeleteFramebuffersEXT_RETURN void
#define glDeleteFramebuffersEXT_ARG_NAMES n, framebuffers
#define glDeleteFramebuffersEXT_ARG_EXPAND GLsizei n, const GLuint * framebuffers
#define glDeleteFramebuffersEXT_PACKED PACKED_void_GLsizei_const_GLuint___GENPT__
#define glDeleteFramebuffersEXT_FORMAT FORMAT_void_GLsizei_const_GLuint___GENPT__
#define glDeleteFramebuffersEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDeleteFramebuffersEXT_NOT_VOID_WRAP(...) {}
#define glDeleteLists_INDEX 435
#define glDeleteLists_RETURN void
#define glDeleteLists_ARG_NAMES list, range
#define glDeleteLists_ARG_EXPAND GLuint list, GLsizei range
#define glDeleteLists_PACKED PACKED_void_GLuint_GLsizei
#define glDeleteLists_FORMAT FORMAT_void_GLuint_GLsizei
#define glDeleteLists_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDeleteLists_NOT_VOID_WRAP(...) {}
#define glDeleteNamedStringARB_INDEX 436
#define glDeleteNamedStringARB_RETURN void
#define glDeleteNamedStringARB_ARG_NAMES namelen, name
#define glDeleteNamedStringARB_ARG_EXPAND GLint namelen, const GLchar * name
#define glDeleteNamedStringARB_PACKED PACKED_void_GLint_const_GLchar___GENPT__
#define glDeleteNamedStringARB_FORMAT FORMAT_void_GLint_const_GLchar___GENPT__
#define glDeleteNamedStringARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDeleteNamedStringARB_NOT_VOID_WRAP(...) {}
#define glDeleteNamesAMD_INDEX 437
#define glDeleteNamesAMD_RETURN void
#define glDeleteNamesAMD_ARG_NAMES identifier, num, names
#define glDeleteNamesAMD_ARG_EXPAND GLenum identifier, GLuint num, const GLuint * names
#define glDeleteNamesAMD_PACKED PACKED_void_GLenum_GLuint_const_GLuint___GENPT__
#define glDeleteNamesAMD_FORMAT FORMAT_void_GLenum_GLuint_const_GLuint___GENPT__
#define glDeleteNamesAMD_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDeleteNamesAMD_NOT_VOID_WRAP(...) {}
#define glDeleteObjectARB_INDEX 438
#define glDeleteObjectARB_RETURN void
#define glDeleteObjectARB_ARG_NAMES obj
#define glDeleteObjectARB_ARG_EXPAND GLhandleARB obj
#define glDeleteObjectARB_PACKED PACKED_void_GLhandleARB
#define glDeleteObjectARB_FORMAT FORMAT_void_GLhandleARB
#define glDeleteObjectARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDeleteObjectARB_NOT_VOID_WRAP(...) {}
#define glDeleteOcclusionQueriesNV_INDEX 439
#define glDeleteOcclusionQueriesNV_RETURN void
#define glDeleteOcclusionQueriesNV_ARG_NAMES n, ids
#define glDeleteOcclusionQueriesNV_ARG_EXPAND GLsizei n, const GLuint * ids
#define glDeleteOcclusionQueriesNV_PACKED PACKED_void_GLsizei_const_GLuint___GENPT__
#define glDeleteOcclusionQueriesNV_FORMAT FORMAT_void_GLsizei_const_GLuint___GENPT__
#define glDeleteOcclusionQueriesNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDeleteOcclusionQueriesNV_NOT_VOID_WRAP(...) {}
#define glDeletePathsNV_INDEX 440
#define glDeletePathsNV_RETURN void
#define glDeletePathsNV_ARG_NAMES path, range
#define glDeletePathsNV_ARG_EXPAND GLuint path, GLsizei range
#define glDeletePathsNV_PACKED PACKED_void_GLuint_GLsizei
#define glDeletePathsNV_FORMAT FORMAT_void_GLuint_GLsizei
#define glDeletePathsNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDeletePathsNV_NOT_VOID_WRAP(...) {}
#define glDeletePerfMonitorsAMD_INDEX 441
#define glDeletePerfMonitorsAMD_RETURN void
#define glDeletePerfMonitorsAMD_ARG_NAMES n, monitors
#define glDeletePerfMonitorsAMD_ARG_EXPAND GLsizei n, GLuint * monitors
#define glDeletePerfMonitorsAMD_PACKED PACKED_void_GLsizei_GLuint___GENPT__
#define glDeletePerfMonitorsAMD_FORMAT FORMAT_void_GLsizei_GLuint___GENPT__
#define glDeletePerfMonitorsAMD_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDeletePerfMonitorsAMD_NOT_VOID_WRAP(...) {}
#define glDeleteProgram_INDEX 442
#define glDeleteProgram_RETURN void
#define glDeleteProgram_ARG_NAMES program
#define glDeleteProgram_ARG_EXPAND GLuint program
#define glDeleteProgram_PACKED PACKED_void_GLuint
#define glDeleteProgram_FORMAT FORMAT_void_GLuint
#define glDeleteProgram_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDeleteProgram_NOT_VOID_WRAP(...) {}
#define glDeleteProgramPipelines_INDEX 443
#define glDeleteProgramPipelines_RETURN void
#define glDeleteProgramPipelines_ARG_NAMES n, pipelines
#define glDeleteProgramPipelines_ARG_EXPAND GLsizei n, const GLuint * pipelines
#define glDeleteProgramPipelines_PACKED PACKED_void_GLsizei_const_GLuint___GENPT__
#define glDeleteProgramPipelines_FORMAT FORMAT_void_GLsizei_const_GLuint___GENPT__
#define glDeleteProgramPipelines_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDeleteProgramPipelines_NOT_VOID_WRAP(...) {}
#define glDeleteProgramsARB_INDEX 444
#define glDeleteProgramsARB_RETURN void
#define glDeleteProgramsARB_ARG_NAMES n, programs
#define glDeleteProgramsARB_ARG_EXPAND GLsizei n, const GLuint * programs
#define glDeleteProgramsARB_PACKED PACKED_void_GLsizei_const_GLuint___GENPT__
#define glDeleteProgramsARB_FORMAT FORMAT_void_GLsizei_const_GLuint___GENPT__
#define glDeleteProgramsARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDeleteProgramsARB_NOT_VOID_WRAP(...) {}
#define glDeleteProgramsNV_INDEX 445
#define glDeleteProgramsNV_RETURN void
#define glDeleteProgramsNV_ARG_NAMES n, programs
#define glDeleteProgramsNV_ARG_EXPAND GLsizei n, const GLuint * programs
#define glDeleteProgramsNV_PACKED PACKED_void_GLsizei_const_GLuint___GENPT__
#define glDeleteProgramsNV_FORMAT FORMAT_void_GLsizei_const_GLuint___GENPT__
#define glDeleteProgramsNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDeleteProgramsNV_NOT_VOID_WRAP(...) {}
#define glDeleteQueries_INDEX 446
#define glDeleteQueries_RETURN void
#define glDeleteQueries_ARG_NAMES n, ids
#define glDeleteQueries_ARG_EXPAND GLsizei n, const GLuint * ids
#define glDeleteQueries_PACKED PACKED_void_GLsizei_const_GLuint___GENPT__
#define glDeleteQueries_FORMAT FORMAT_void_GLsizei_const_GLuint___GENPT__
#define glDeleteQueries_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDeleteQueries_NOT_VOID_WRAP(...) {}
#define glDeleteQueriesARB_INDEX 447
#define glDeleteQueriesARB_RETURN void
#define glDeleteQueriesARB_ARG_NAMES n, ids
#define glDeleteQueriesARB_ARG_EXPAND GLsizei n, const GLuint * ids
#define glDeleteQueriesARB_PACKED PACKED_void_GLsizei_const_GLuint___GENPT__
#define glDeleteQueriesARB_FORMAT FORMAT_void_GLsizei_const_GLuint___GENPT__
#define glDeleteQueriesARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDeleteQueriesARB_NOT_VOID_WRAP(...) {}
#define glDeleteRenderbuffers_INDEX 448
#define glDeleteRenderbuffers_RETURN void
#define glDeleteRenderbuffers_ARG_NAMES n, renderbuffers
#define glDeleteRenderbuffers_ARG_EXPAND GLsizei n, const GLuint * renderbuffers
#define glDeleteRenderbuffers_PACKED PACKED_void_GLsizei_const_GLuint___GENPT__
#define glDeleteRenderbuffers_FORMAT FORMAT_void_GLsizei_const_GLuint___GENPT__
#define glDeleteRenderbuffers_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDeleteRenderbuffers_NOT_VOID_WRAP(...) {}
#define glDeleteRenderbuffersEXT_INDEX 449
#define glDeleteRenderbuffersEXT_RETURN void
#define glDeleteRenderbuffersEXT_ARG_NAMES n, renderbuffers
#define glDeleteRenderbuffersEXT_ARG_EXPAND GLsizei n, const GLuint * renderbuffers
#define glDeleteRenderbuffersEXT_PACKED PACKED_void_GLsizei_const_GLuint___GENPT__
#define glDeleteRenderbuffersEXT_FORMAT FORMAT_void_GLsizei_const_GLuint___GENPT__
#define glDeleteRenderbuffersEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDeleteRenderbuffersEXT_NOT_VOID_WRAP(...) {}
#define glDeleteSamplers_INDEX 450
#define glDeleteSamplers_RETURN void
#define glDeleteSamplers_ARG_NAMES count, samplers
#define glDeleteSamplers_ARG_EXPAND GLsizei count, const GLuint * samplers
#define glDeleteSamplers_PACKED PACKED_void_GLsizei_const_GLuint___GENPT__
#define glDeleteSamplers_FORMAT FORMAT_void_GLsizei_const_GLuint___GENPT__
#define glDeleteSamplers_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDeleteSamplers_NOT_VOID_WRAP(...) {}
#define glDeleteShader_INDEX 451
#define glDeleteShader_RETURN void
#define glDeleteShader_ARG_NAMES shader
#define glDeleteShader_ARG_EXPAND GLuint shader
#define glDeleteShader_PACKED PACKED_void_GLuint
#define glDeleteShader_FORMAT FORMAT_void_GLuint
#define glDeleteShader_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDeleteShader_NOT_VOID_WRAP(...) {}
#define glDeleteSync_INDEX 452
#define glDeleteSync_RETURN void
#define glDeleteSync_ARG_NAMES sync
#define glDeleteSync_ARG_EXPAND GLsync sync
#define glDeleteSync_PACKED PACKED_void_GLsync
#define glDeleteSync_FORMAT FORMAT_void_GLsync
#define glDeleteSync_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDeleteSync_NOT_VOID_WRAP(...) {}
#define glDeleteTextures_INDEX 453
#define glDeleteTextures_RETURN void
#define glDeleteTextures_ARG_NAMES n, textures
#define glDeleteTextures_ARG_EXPAND GLsizei n, const GLuint * textures
#define glDeleteTextures_PACKED PACKED_void_GLsizei_const_GLuint___GENPT__
#define glDeleteTextures_FORMAT FORMAT_void_GLsizei_const_GLuint___GENPT__
#define glDeleteTextures_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDeleteTextures_NOT_VOID_WRAP(...) {}
#define glDeleteTexturesEXT_INDEX 454
#define glDeleteTexturesEXT_RETURN void
#define glDeleteTexturesEXT_ARG_NAMES n, textures
#define glDeleteTexturesEXT_ARG_EXPAND GLsizei n, const GLuint * textures
#define glDeleteTexturesEXT_PACKED PACKED_void_GLsizei_const_GLuint___GENPT__
#define glDeleteTexturesEXT_FORMAT FORMAT_void_GLsizei_const_GLuint___GENPT__
#define glDeleteTexturesEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDeleteTexturesEXT_NOT_VOID_WRAP(...) {}
#define glDeleteTransformFeedbacks_INDEX 455
#define glDeleteTransformFeedbacks_RETURN void
#define glDeleteTransformFeedbacks_ARG_NAMES n, ids
#define glDeleteTransformFeedbacks_ARG_EXPAND GLsizei n, const GLuint * ids
#define glDeleteTransformFeedbacks_PACKED PACKED_void_GLsizei_const_GLuint___GENPT__
#define glDeleteTransformFeedbacks_FORMAT FORMAT_void_GLsizei_const_GLuint___GENPT__
#define glDeleteTransformFeedbacks_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDeleteTransformFeedbacks_NOT_VOID_WRAP(...) {}
#define glDeleteTransformFeedbacksNV_INDEX 456
#define glDeleteTransformFeedbacksNV_RETURN void
#define glDeleteTransformFeedbacksNV_ARG_NAMES n, ids
#define glDeleteTransformFeedbacksNV_ARG_EXPAND GLsizei n, const GLuint * ids
#define glDeleteTransformFeedbacksNV_PACKED PACKED_void_GLsizei_const_GLuint___GENPT__
#define glDeleteTransformFeedbacksNV_FORMAT FORMAT_void_GLsizei_const_GLuint___GENPT__
#define glDeleteTransformFeedbacksNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDeleteTransformFeedbacksNV_NOT_VOID_WRAP(...) {}
#define glDeleteVertexArrays_INDEX 457
#define glDeleteVertexArrays_RETURN void
#define glDeleteVertexArrays_ARG_NAMES n, arrays
#define glDeleteVertexArrays_ARG_EXPAND GLsizei n, const GLuint * arrays
#define glDeleteVertexArrays_PACKED PACKED_void_GLsizei_const_GLuint___GENPT__
#define glDeleteVertexArrays_FORMAT FORMAT_void_GLsizei_const_GLuint___GENPT__
#define glDeleteVertexArrays_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDeleteVertexArrays_NOT_VOID_WRAP(...) {}
#define glDeleteVertexArraysAPPLE_INDEX 458
#define glDeleteVertexArraysAPPLE_RETURN void
#define glDeleteVertexArraysAPPLE_ARG_NAMES n, arrays
#define glDeleteVertexArraysAPPLE_ARG_EXPAND GLsizei n, const GLuint * arrays
#define glDeleteVertexArraysAPPLE_PACKED PACKED_void_GLsizei_const_GLuint___GENPT__
#define glDeleteVertexArraysAPPLE_FORMAT FORMAT_void_GLsizei_const_GLuint___GENPT__
#define glDeleteVertexArraysAPPLE_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDeleteVertexArraysAPPLE_NOT_VOID_WRAP(...) {}
#define glDeleteVertexShaderEXT_INDEX 459
#define glDeleteVertexShaderEXT_RETURN void
#define glDeleteVertexShaderEXT_ARG_NAMES id
#define glDeleteVertexShaderEXT_ARG_EXPAND GLuint id
#define glDeleteVertexShaderEXT_PACKED PACKED_void_GLuint
#define glDeleteVertexShaderEXT_FORMAT FORMAT_void_GLuint
#define glDeleteVertexShaderEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDeleteVertexShaderEXT_NOT_VOID_WRAP(...) {}
#define glDepthBoundsEXT_INDEX 460
#define glDepthBoundsEXT_RETURN void
#define glDepthBoundsEXT_ARG_NAMES zmin, zmax
#define glDepthBoundsEXT_ARG_EXPAND GLclampd zmin, GLclampd zmax
#define glDepthBoundsEXT_PACKED PACKED_void_GLclampd_GLclampd
#define glDepthBoundsEXT_FORMAT FORMAT_void_GLclampd_GLclampd
#define glDepthBoundsEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDepthBoundsEXT_NOT_VOID_WRAP(...) {}
#define glDepthBoundsdNV_INDEX 461
#define glDepthBoundsdNV_RETURN void
#define glDepthBoundsdNV_ARG_NAMES zmin, zmax
#define glDepthBoundsdNV_ARG_EXPAND GLdouble zmin, GLdouble zmax
#define glDepthBoundsdNV_PACKED PACKED_void_GLdouble_GLdouble
#define glDepthBoundsdNV_FORMAT FORMAT_void_GLdouble_GLdouble
#define glDepthBoundsdNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDepthBoundsdNV_NOT_VOID_WRAP(...) {}
#define glDepthFunc_INDEX 462
#define glDepthFunc_RETURN void
#define glDepthFunc_ARG_NAMES func
#define glDepthFunc_ARG_EXPAND GLenum func
#define glDepthFunc_PACKED PACKED_void_GLenum
#define glDepthFunc_FORMAT FORMAT_void_GLenum
#define glDepthFunc_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDepthFunc_NOT_VOID_WRAP(...) {}
#define glDepthMask_INDEX 463
#define glDepthMask_RETURN void
#define glDepthMask_ARG_NAMES flag
#define glDepthMask_ARG_EXPAND GLboolean flag
#define glDepthMask_PACKED PACKED_void_GLboolean
#define glDepthMask_FORMAT FORMAT_void_GLboolean
#define glDepthMask_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDepthMask_NOT_VOID_WRAP(...) {}
#define glDepthRange_INDEX 464
#define glDepthRange_RETURN void
#define glDepthRange_ARG_NAMES near, far
#define glDepthRange_ARG_EXPAND GLdouble near, GLdouble far
#define glDepthRange_PACKED PACKED_void_GLdouble_GLdouble
#define glDepthRange_FORMAT FORMAT_void_GLdouble_GLdouble
#define glDepthRange_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDepthRange_NOT_VOID_WRAP(...) {}
#define glDepthRangeArrayv_INDEX 465
#define glDepthRangeArrayv_RETURN void
#define glDepthRangeArrayv_ARG_NAMES first, count, v
#define glDepthRangeArrayv_ARG_EXPAND GLuint first, GLsizei count, const GLdouble * v
#define glDepthRangeArrayv_PACKED PACKED_void_GLuint_GLsizei_const_GLdouble___GENPT__
#define glDepthRangeArrayv_FORMAT FORMAT_void_GLuint_GLsizei_const_GLdouble___GENPT__
#define glDepthRangeArrayv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDepthRangeArrayv_NOT_VOID_WRAP(...) {}
#define glDepthRangeIndexed_INDEX 466
#define glDepthRangeIndexed_RETURN void
#define glDepthRangeIndexed_ARG_NAMES index, n, f
#define glDepthRangeIndexed_ARG_EXPAND GLuint index, GLdouble n, GLdouble f
#define glDepthRangeIndexed_PACKED PACKED_void_GLuint_GLdouble_GLdouble
#define glDepthRangeIndexed_FORMAT FORMAT_void_GLuint_GLdouble_GLdouble
#define glDepthRangeIndexed_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDepthRangeIndexed_NOT_VOID_WRAP(...) {}
#define glDepthRangedNV_INDEX 467
#define glDepthRangedNV_RETURN void
#define glDepthRangedNV_ARG_NAMES zNear, zFar
#define glDepthRangedNV_ARG_EXPAND GLdouble zNear, GLdouble zFar
#define glDepthRangedNV_PACKED PACKED_void_GLdouble_GLdouble
#define glDepthRangedNV_FORMAT FORMAT_void_GLdouble_GLdouble
#define glDepthRangedNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDepthRangedNV_NOT_VOID_WRAP(...) {}
#define glDepthRangef_INDEX 468
#define glDepthRangef_RETURN void
#define glDepthRangef_ARG_NAMES near, far
#define glDepthRangef_ARG_EXPAND GLclampf near, GLclampf far
#define glDepthRangef_PACKED PACKED_void_GLclampf_GLclampf
#define glDepthRangef_FORMAT FORMAT_void_GLclampf_GLclampf
#define glDepthRangef_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDepthRangef_NOT_VOID_WRAP(...) {}
#define glDepthRangefOES_INDEX 469
#define glDepthRangefOES_RETURN void
#define glDepthRangefOES_ARG_NAMES n, f
#define glDepthRangefOES_ARG_EXPAND GLclampf n, GLclampf f
#define glDepthRangefOES_PACKED PACKED_void_GLclampf_GLclampf
#define glDepthRangefOES_FORMAT FORMAT_void_GLclampf_GLclampf
#define glDepthRangefOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDepthRangefOES_NOT_VOID_WRAP(...) {}
#define glDepthRangex_INDEX 470
#define glDepthRangex_RETURN void
#define glDepthRangex_ARG_NAMES near, far
#define glDepthRangex_ARG_EXPAND GLclampx near, GLclampx far
#define glDepthRangex_PACKED PACKED_void_GLclampx_GLclampx
#define glDepthRangex_FORMAT FORMAT_void_GLclampx_GLclampx
#define glDepthRangex_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDepthRangex_NOT_VOID_WRAP(...) {}
#define glDepthRangexOES_INDEX 471
#define glDepthRangexOES_RETURN void
#define glDepthRangexOES_ARG_NAMES n, f
#define glDepthRangexOES_ARG_EXPAND GLfixed n, GLfixed f
#define glDepthRangexOES_PACKED PACKED_void_GLfixed_GLfixed
#define glDepthRangexOES_FORMAT FORMAT_void_GLfixed_GLfixed
#define glDepthRangexOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDepthRangexOES_NOT_VOID_WRAP(...) {}
#define glDetachObjectARB_INDEX 472
#define glDetachObjectARB_RETURN void
#define glDetachObjectARB_ARG_NAMES containerObj, attachedObj
#define glDetachObjectARB_ARG_EXPAND GLhandleARB containerObj, GLhandleARB attachedObj
#define glDetachObjectARB_PACKED PACKED_void_GLhandleARB_GLhandleARB
#define glDetachObjectARB_FORMAT FORMAT_void_GLhandleARB_GLhandleARB
#define glDetachObjectARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDetachObjectARB_NOT_VOID_WRAP(...) {}
#define glDetachShader_INDEX 473
#define glDetachShader_RETURN void
#define glDetachShader_ARG_NAMES program, shader
#define glDetachShader_ARG_EXPAND GLuint program, GLuint shader
#define glDetachShader_PACKED PACKED_void_GLuint_GLuint
#define glDetachShader_FORMAT FORMAT_void_GLuint_GLuint
#define glDetachShader_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDetachShader_NOT_VOID_WRAP(...) {}
#define glDetailTexFuncSGIS_INDEX 474
#define glDetailTexFuncSGIS_RETURN void
#define glDetailTexFuncSGIS_ARG_NAMES target, n, points
#define glDetailTexFuncSGIS_ARG_EXPAND GLenum target, GLsizei n, const GLfloat * points
#define glDetailTexFuncSGIS_PACKED PACKED_void_GLenum_GLsizei_const_GLfloat___GENPT__
#define glDetailTexFuncSGIS_FORMAT FORMAT_void_GLenum_GLsizei_const_GLfloat___GENPT__
#define glDetailTexFuncSGIS_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDetailTexFuncSGIS_NOT_VOID_WRAP(...) {}
#define glDisable_INDEX 475
#define glDisable_RETURN void
#define glDisable_ARG_NAMES cap
#define glDisable_ARG_EXPAND GLenum cap
#define glDisable_PACKED PACKED_void_GLenum
#define glDisable_FORMAT FORMAT_void_GLenum
#define glDisable_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDisable_NOT_VOID_WRAP(...) {}
#define glDisableClientState_INDEX 476
#define glDisableClientState_RETURN void
#define glDisableClientState_ARG_NAMES array
#define glDisableClientState_ARG_EXPAND GLenum array
#define glDisableClientState_PACKED PACKED_void_GLenum
#define glDisableClientState_FORMAT FORMAT_void_GLenum
#define glDisableClientState_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDisableClientState_NOT_VOID_WRAP(...) {}
#define glDisableClientStateIndexedEXT_INDEX 477
#define glDisableClientStateIndexedEXT_RETURN void
#define glDisableClientStateIndexedEXT_ARG_NAMES array, index
#define glDisableClientStateIndexedEXT_ARG_EXPAND GLenum array, GLuint index
#define glDisableClientStateIndexedEXT_PACKED PACKED_void_GLenum_GLuint
#define glDisableClientStateIndexedEXT_FORMAT FORMAT_void_GLenum_GLuint
#define glDisableClientStateIndexedEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDisableClientStateIndexedEXT_NOT_VOID_WRAP(...) {}
#define glDisableClientStateiEXT_INDEX 478
#define glDisableClientStateiEXT_RETURN void
#define glDisableClientStateiEXT_ARG_NAMES array, index
#define glDisableClientStateiEXT_ARG_EXPAND GLenum array, GLuint index
#define glDisableClientStateiEXT_PACKED PACKED_void_GLenum_GLuint
#define glDisableClientStateiEXT_FORMAT FORMAT_void_GLenum_GLuint
#define glDisableClientStateiEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDisableClientStateiEXT_NOT_VOID_WRAP(...) {}
#define glDisableIndexedEXT_INDEX 479
#define glDisableIndexedEXT_RETURN void
#define glDisableIndexedEXT_ARG_NAMES target, index
#define glDisableIndexedEXT_ARG_EXPAND GLenum target, GLuint index
#define glDisableIndexedEXT_PACKED PACKED_void_GLenum_GLuint
#define glDisableIndexedEXT_FORMAT FORMAT_void_GLenum_GLuint
#define glDisableIndexedEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDisableIndexedEXT_NOT_VOID_WRAP(...) {}
#define glDisableVariantClientStateEXT_INDEX 480
#define glDisableVariantClientStateEXT_RETURN void
#define glDisableVariantClientStateEXT_ARG_NAMES id
#define glDisableVariantClientStateEXT_ARG_EXPAND GLuint id
#define glDisableVariantClientStateEXT_PACKED PACKED_void_GLuint
#define glDisableVariantClientStateEXT_FORMAT FORMAT_void_GLuint
#define glDisableVariantClientStateEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDisableVariantClientStateEXT_NOT_VOID_WRAP(...) {}
#define glDisableVertexArrayAttribEXT_INDEX 481
#define glDisableVertexArrayAttribEXT_RETURN void
#define glDisableVertexArrayAttribEXT_ARG_NAMES vaobj, index
#define glDisableVertexArrayAttribEXT_ARG_EXPAND GLuint vaobj, GLuint index
#define glDisableVertexArrayAttribEXT_PACKED PACKED_void_GLuint_GLuint
#define glDisableVertexArrayAttribEXT_FORMAT FORMAT_void_GLuint_GLuint
#define glDisableVertexArrayAttribEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDisableVertexArrayAttribEXT_NOT_VOID_WRAP(...) {}
#define glDisableVertexArrayEXT_INDEX 482
#define glDisableVertexArrayEXT_RETURN void
#define glDisableVertexArrayEXT_ARG_NAMES vaobj, array
#define glDisableVertexArrayEXT_ARG_EXPAND GLuint vaobj, GLenum array
#define glDisableVertexArrayEXT_PACKED PACKED_void_GLuint_GLenum
#define glDisableVertexArrayEXT_FORMAT FORMAT_void_GLuint_GLenum
#define glDisableVertexArrayEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDisableVertexArrayEXT_NOT_VOID_WRAP(...) {}
#define glDisableVertexAttribAPPLE_INDEX 483
#define glDisableVertexAttribAPPLE_RETURN void
#define glDisableVertexAttribAPPLE_ARG_NAMES index, pname
#define glDisableVertexAttribAPPLE_ARG_EXPAND GLuint index, GLenum pname
#define glDisableVertexAttribAPPLE_PACKED PACKED_void_GLuint_GLenum
#define glDisableVertexAttribAPPLE_FORMAT FORMAT_void_GLuint_GLenum
#define glDisableVertexAttribAPPLE_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDisableVertexAttribAPPLE_NOT_VOID_WRAP(...) {}
#define glDisableVertexAttribArray_INDEX 484
#define glDisableVertexAttribArray_RETURN void
#define glDisableVertexAttribArray_ARG_NAMES index
#define glDisableVertexAttribArray_ARG_EXPAND GLuint index
#define glDisableVertexAttribArray_PACKED PACKED_void_GLuint
#define glDisableVertexAttribArray_FORMAT FORMAT_void_GLuint
#define glDisableVertexAttribArray_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDisableVertexAttribArray_NOT_VOID_WRAP(...) {}
#define glDisableVertexAttribArrayARB_INDEX 485
#define glDisableVertexAttribArrayARB_RETURN void
#define glDisableVertexAttribArrayARB_ARG_NAMES index
#define glDisableVertexAttribArrayARB_ARG_EXPAND GLuint index
#define glDisableVertexAttribArrayARB_PACKED PACKED_void_GLuint
#define glDisableVertexAttribArrayARB_FORMAT FORMAT_void_GLuint
#define glDisableVertexAttribArrayARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDisableVertexAttribArrayARB_NOT_VOID_WRAP(...) {}
#define glDisablei_INDEX 486
#define glDisablei_RETURN void
#define glDisablei_ARG_NAMES target, index
#define glDisablei_ARG_EXPAND GLenum target, GLuint index
#define glDisablei_PACKED PACKED_void_GLenum_GLuint
#define glDisablei_FORMAT FORMAT_void_GLenum_GLuint
#define glDisablei_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDisablei_NOT_VOID_WRAP(...) {}
#define glDispatchCompute_INDEX 487
#define glDispatchCompute_RETURN void
#define glDispatchCompute_ARG_NAMES num_groups_x, num_groups_y, num_groups_z
#define glDispatchCompute_ARG_EXPAND GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z
#define glDispatchCompute_PACKED PACKED_void_GLuint_GLuint_GLuint
#define glDispatchCompute_FORMAT FORMAT_void_GLuint_GLuint_GLuint
#define glDispatchCompute_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDispatchCompute_NOT_VOID_WRAP(...) {}
#define glDispatchComputeIndirect_INDEX 488
#define glDispatchComputeIndirect_RETURN void
#define glDispatchComputeIndirect_ARG_NAMES indirect
#define glDispatchComputeIndirect_ARG_EXPAND GLintptr indirect
#define glDispatchComputeIndirect_PACKED PACKED_void_GLintptr
#define glDispatchComputeIndirect_FORMAT FORMAT_void_GLintptr
#define glDispatchComputeIndirect_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDispatchComputeIndirect_NOT_VOID_WRAP(...) {}
#define glDrawArrays_INDEX 489
#define glDrawArrays_RETURN void
#define glDrawArrays_ARG_NAMES mode, first, count
#define glDrawArrays_ARG_EXPAND GLenum mode, GLint first, GLsizei count
#define glDrawArrays_PACKED PACKED_void_GLenum_GLint_GLsizei
#define glDrawArrays_FORMAT FORMAT_void_GLenum_GLint_GLsizei
#define glDrawArrays_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDrawArrays_NOT_VOID_WRAP(...) {}
#define glDrawArraysEXT_INDEX 490
#define glDrawArraysEXT_RETURN void
#define glDrawArraysEXT_ARG_NAMES mode, first, count
#define glDrawArraysEXT_ARG_EXPAND GLenum mode, GLint first, GLsizei count
#define glDrawArraysEXT_PACKED PACKED_void_GLenum_GLint_GLsizei
#define glDrawArraysEXT_FORMAT FORMAT_void_GLenum_GLint_GLsizei
#define glDrawArraysEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDrawArraysEXT_NOT_VOID_WRAP(...) {}
#define glDrawArraysIndirect_INDEX 491
#define glDrawArraysIndirect_RETURN void
#define glDrawArraysIndirect_ARG_NAMES mode, indirect
#define glDrawArraysIndirect_ARG_EXPAND GLenum mode, const GLvoid * indirect
#define glDrawArraysIndirect_PACKED PACKED_void_GLenum_const_GLvoid___GENPT__
#define glDrawArraysIndirect_FORMAT FORMAT_void_GLenum_const_GLvoid___GENPT__
#define glDrawArraysIndirect_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDrawArraysIndirect_NOT_VOID_WRAP(...) {}
#define glDrawArraysInstanced_INDEX 492
#define glDrawArraysInstanced_RETURN void
#define glDrawArraysInstanced_ARG_NAMES mode, first, count, instancecount
#define glDrawArraysInstanced_ARG_EXPAND GLenum mode, GLint first, GLsizei count, GLsizei instancecount
#define glDrawArraysInstanced_PACKED PACKED_void_GLenum_GLint_GLsizei_GLsizei
#define glDrawArraysInstanced_FORMAT FORMAT_void_GLenum_GLint_GLsizei_GLsizei
#define glDrawArraysInstanced_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDrawArraysInstanced_NOT_VOID_WRAP(...) {}
#define glDrawArraysInstancedARB_INDEX 493
#define glDrawArraysInstancedARB_RETURN void
#define glDrawArraysInstancedARB_ARG_NAMES mode, first, count, primcount
#define glDrawArraysInstancedARB_ARG_EXPAND GLenum mode, GLint first, GLsizei count, GLsizei primcount
#define glDrawArraysInstancedARB_PACKED PACKED_void_GLenum_GLint_GLsizei_GLsizei
#define glDrawArraysInstancedARB_FORMAT FORMAT_void_GLenum_GLint_GLsizei_GLsizei
#define glDrawArraysInstancedARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDrawArraysInstancedARB_NOT_VOID_WRAP(...) {}
#define glDrawArraysInstancedBaseInstance_INDEX 494
#define glDrawArraysInstancedBaseInstance_RETURN void
#define glDrawArraysInstancedBaseInstance_ARG_NAMES mode, first, count, instancecount, baseinstance
#define glDrawArraysInstancedBaseInstance_ARG_EXPAND GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance
#define glDrawArraysInstancedBaseInstance_PACKED PACKED_void_GLenum_GLint_GLsizei_GLsizei_GLuint
#define glDrawArraysInstancedBaseInstance_FORMAT FORMAT_void_GLenum_GLint_GLsizei_GLsizei_GLuint
#define glDrawArraysInstancedBaseInstance_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDrawArraysInstancedBaseInstance_NOT_VOID_WRAP(...) {}
#define glDrawArraysInstancedEXT_INDEX 495
#define glDrawArraysInstancedEXT_RETURN void
#define glDrawArraysInstancedEXT_ARG_NAMES mode, start, count, primcount
#define glDrawArraysInstancedEXT_ARG_EXPAND GLenum mode, GLint start, GLsizei count, GLsizei primcount
#define glDrawArraysInstancedEXT_PACKED PACKED_void_GLenum_GLint_GLsizei_GLsizei
#define glDrawArraysInstancedEXT_FORMAT FORMAT_void_GLenum_GLint_GLsizei_GLsizei
#define glDrawArraysInstancedEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDrawArraysInstancedEXT_NOT_VOID_WRAP(...) {}
#define glDrawBuffer_INDEX 496
#define glDrawBuffer_RETURN void
#define glDrawBuffer_ARG_NAMES mode
#define glDrawBuffer_ARG_EXPAND GLenum mode
#define glDrawBuffer_PACKED PACKED_void_GLenum
#define glDrawBuffer_FORMAT FORMAT_void_GLenum
#define glDrawBuffer_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDrawBuffer_NOT_VOID_WRAP(...) {}
#define glDrawBuffers_INDEX 497
#define glDrawBuffers_RETURN void
#define glDrawBuffers_ARG_NAMES n, bufs
#define glDrawBuffers_ARG_EXPAND GLsizei n, const GLenum * bufs
#define glDrawBuffers_PACKED PACKED_void_GLsizei_const_GLenum___GENPT__
#define glDrawBuffers_FORMAT FORMAT_void_GLsizei_const_GLenum___GENPT__
#define glDrawBuffers_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDrawBuffers_NOT_VOID_WRAP(...) {}
#define glDrawBuffersARB_INDEX 498
#define glDrawBuffersARB_RETURN void
#define glDrawBuffersARB_ARG_NAMES n, bufs
#define glDrawBuffersARB_ARG_EXPAND GLsizei n, const GLenum * bufs
#define glDrawBuffersARB_PACKED PACKED_void_GLsizei_const_GLenum___GENPT__
#define glDrawBuffersARB_FORMAT FORMAT_void_GLsizei_const_GLenum___GENPT__
#define glDrawBuffersARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDrawBuffersARB_NOT_VOID_WRAP(...) {}
#define glDrawBuffersATI_INDEX 499
#define glDrawBuffersATI_RETURN void
#define glDrawBuffersATI_ARG_NAMES n, bufs
#define glDrawBuffersATI_ARG_EXPAND GLsizei n, const GLenum * bufs
#define glDrawBuffersATI_PACKED PACKED_void_GLsizei_const_GLenum___GENPT__
#define glDrawBuffersATI_FORMAT FORMAT_void_GLsizei_const_GLenum___GENPT__
#define glDrawBuffersATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDrawBuffersATI_NOT_VOID_WRAP(...) {}
#define glDrawElementArrayAPPLE_INDEX 500
#define glDrawElementArrayAPPLE_RETURN void
#define glDrawElementArrayAPPLE_ARG_NAMES mode, first, count
#define glDrawElementArrayAPPLE_ARG_EXPAND GLenum mode, GLint first, GLsizei count
#define glDrawElementArrayAPPLE_PACKED PACKED_void_GLenum_GLint_GLsizei
#define glDrawElementArrayAPPLE_FORMAT FORMAT_void_GLenum_GLint_GLsizei
#define glDrawElementArrayAPPLE_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDrawElementArrayAPPLE_NOT_VOID_WRAP(...) {}
#define glDrawElementArrayATI_INDEX 501
#define glDrawElementArrayATI_RETURN void
#define glDrawElementArrayATI_ARG_NAMES mode, count
#define glDrawElementArrayATI_ARG_EXPAND GLenum mode, GLsizei count
#define glDrawElementArrayATI_PACKED PACKED_void_GLenum_GLsizei
#define glDrawElementArrayATI_FORMAT FORMAT_void_GLenum_GLsizei
#define glDrawElementArrayATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDrawElementArrayATI_NOT_VOID_WRAP(...) {}
#define glDrawElements_INDEX 502
#define glDrawElements_RETURN void
#define glDrawElements_ARG_NAMES mode, count, type, indices
#define glDrawElements_ARG_EXPAND GLenum mode, GLsizei count, GLenum type, const GLvoid * indices
#define glDrawElements_PACKED PACKED_void_GLenum_GLsizei_GLenum_const_GLvoid___GENPT__
#define glDrawElements_FORMAT FORMAT_void_GLenum_GLsizei_GLenum_const_GLvoid___GENPT__
#define glDrawElements_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDrawElements_NOT_VOID_WRAP(...) {}
#define glDrawElementsBaseVertex_INDEX 503
#define glDrawElementsBaseVertex_RETURN void
#define glDrawElementsBaseVertex_ARG_NAMES mode, count, type, indices, basevertex
#define glDrawElementsBaseVertex_ARG_EXPAND GLenum mode, GLsizei count, GLenum type, const GLvoid * indices, GLint basevertex
#define glDrawElementsBaseVertex_PACKED PACKED_void_GLenum_GLsizei_GLenum_const_GLvoid___GENPT___GLint
#define glDrawElementsBaseVertex_FORMAT FORMAT_void_GLenum_GLsizei_GLenum_const_GLvoid___GENPT___GLint
#define glDrawElementsBaseVertex_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDrawElementsBaseVertex_NOT_VOID_WRAP(...) {}
#define glDrawElementsIndirect_INDEX 504
#define glDrawElementsIndirect_RETURN void
#define glDrawElementsIndirect_ARG_NAMES mode, type, indirect
#define glDrawElementsIndirect_ARG_EXPAND GLenum mode, GLenum type, const GLvoid * indirect
#define glDrawElementsIndirect_PACKED PACKED_void_GLenum_GLenum_const_GLvoid___GENPT__
#define glDrawElementsIndirect_FORMAT FORMAT_void_GLenum_GLenum_const_GLvoid___GENPT__
#define glDrawElementsIndirect_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDrawElementsIndirect_NOT_VOID_WRAP(...) {}
#define glDrawElementsInstanced_INDEX 505
#define glDrawElementsInstanced_RETURN void
#define glDrawElementsInstanced_ARG_NAMES mode, count, type, indices, instancecount
#define glDrawElementsInstanced_ARG_EXPAND GLenum mode, GLsizei count, GLenum type, const GLvoid * indices, GLsizei instancecount
#define glDrawElementsInstanced_PACKED PACKED_void_GLenum_GLsizei_GLenum_const_GLvoid___GENPT___GLsizei
#define glDrawElementsInstanced_FORMAT FORMAT_void_GLenum_GLsizei_GLenum_const_GLvoid___GENPT___GLsizei
#define glDrawElementsInstanced_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDrawElementsInstanced_NOT_VOID_WRAP(...) {}
#define glDrawElementsInstancedARB_INDEX 506
#define glDrawElementsInstancedARB_RETURN void
#define glDrawElementsInstancedARB_ARG_NAMES mode, count, type, indices, primcount
#define glDrawElementsInstancedARB_ARG_EXPAND GLenum mode, GLsizei count, GLenum type, const GLvoid * indices, GLsizei primcount
#define glDrawElementsInstancedARB_PACKED PACKED_void_GLenum_GLsizei_GLenum_const_GLvoid___GENPT___GLsizei
#define glDrawElementsInstancedARB_FORMAT FORMAT_void_GLenum_GLsizei_GLenum_const_GLvoid___GENPT___GLsizei
#define glDrawElementsInstancedARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDrawElementsInstancedARB_NOT_VOID_WRAP(...) {}
#define glDrawElementsInstancedBaseInstance_INDEX 507
#define glDrawElementsInstancedBaseInstance_RETURN void
#define glDrawElementsInstancedBaseInstance_ARG_NAMES mode, count, type, indices, instancecount, baseinstance
#define glDrawElementsInstancedBaseInstance_ARG_EXPAND GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLuint baseinstance
#define glDrawElementsInstancedBaseInstance_PACKED PACKED_void_GLenum_GLsizei_GLenum_const_void___GENPT___GLsizei_GLuint
#define glDrawElementsInstancedBaseInstance_FORMAT FORMAT_void_GLenum_GLsizei_GLenum_const_void___GENPT___GLsizei_GLuint
#define glDrawElementsInstancedBaseInstance_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDrawElementsInstancedBaseInstance_NOT_VOID_WRAP(...) {}
#define glDrawElementsInstancedBaseVertex_INDEX 508
#define glDrawElementsInstancedBaseVertex_RETURN void
#define glDrawElementsInstancedBaseVertex_ARG_NAMES mode, count, type, indices, instancecount, basevertex
#define glDrawElementsInstancedBaseVertex_ARG_EXPAND GLenum mode, GLsizei count, GLenum type, const GLvoid * indices, GLsizei instancecount, GLint basevertex
#define glDrawElementsInstancedBaseVertex_PACKED PACKED_void_GLenum_GLsizei_GLenum_const_GLvoid___GENPT___GLsizei_GLint
#define glDrawElementsInstancedBaseVertex_FORMAT FORMAT_void_GLenum_GLsizei_GLenum_const_GLvoid___GENPT___GLsizei_GLint
#define glDrawElementsInstancedBaseVertex_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDrawElementsInstancedBaseVertex_NOT_VOID_WRAP(...) {}
#define glDrawElementsInstancedBaseVertexBaseInstance_INDEX 509
#define glDrawElementsInstancedBaseVertexBaseInstance_RETURN void
#define glDrawElementsInstancedBaseVertexBaseInstance_ARG_NAMES mode, count, type, indices, instancecount, basevertex, baseinstance
#define glDrawElementsInstancedBaseVertexBaseInstance_ARG_EXPAND GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance
#define glDrawElementsInstancedBaseVertexBaseInstance_PACKED PACKED_void_GLenum_GLsizei_GLenum_const_void___GENPT___GLsizei_GLint_GLuint
#define glDrawElementsInstancedBaseVertexBaseInstance_FORMAT FORMAT_void_GLenum_GLsizei_GLenum_const_void___GENPT___GLsizei_GLint_GLuint
#define glDrawElementsInstancedBaseVertexBaseInstance_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDrawElementsInstancedBaseVertexBaseInstance_NOT_VOID_WRAP(...) {}
#define glDrawElementsInstancedEXT_INDEX 510
#define glDrawElementsInstancedEXT_RETURN void
#define glDrawElementsInstancedEXT_ARG_NAMES mode, count, type, indices, primcount
#define glDrawElementsInstancedEXT_ARG_EXPAND GLenum mode, GLsizei count, GLenum type, const GLvoid * indices, GLsizei primcount
#define glDrawElementsInstancedEXT_PACKED PACKED_void_GLenum_GLsizei_GLenum_const_GLvoid___GENPT___GLsizei
#define glDrawElementsInstancedEXT_FORMAT FORMAT_void_GLenum_GLsizei_GLenum_const_GLvoid___GENPT___GLsizei
#define glDrawElementsInstancedEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDrawElementsInstancedEXT_NOT_VOID_WRAP(...) {}
#define glDrawMeshArraysSUN_INDEX 511
#define glDrawMeshArraysSUN_RETURN void
#define glDrawMeshArraysSUN_ARG_NAMES mode, first, count, width
#define glDrawMeshArraysSUN_ARG_EXPAND GLenum mode, GLint first, GLsizei count, GLsizei width
#define glDrawMeshArraysSUN_PACKED PACKED_void_GLenum_GLint_GLsizei_GLsizei
#define glDrawMeshArraysSUN_FORMAT FORMAT_void_GLenum_GLint_GLsizei_GLsizei
#define glDrawMeshArraysSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDrawMeshArraysSUN_NOT_VOID_WRAP(...) {}
#define glDrawPixels_INDEX 512
#define glDrawPixels_RETURN void
#define glDrawPixels_ARG_NAMES width, height, format, type, pixels
#define glDrawPixels_ARG_EXPAND GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * pixels
#define glDrawPixels_PACKED PACKED_void_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__
#define glDrawPixels_FORMAT FORMAT_void_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__
#define glDrawPixels_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDrawPixels_NOT_VOID_WRAP(...) {}
#define glDrawRangeElementArrayAPPLE_INDEX 513
#define glDrawRangeElementArrayAPPLE_RETURN void
#define glDrawRangeElementArrayAPPLE_ARG_NAMES mode, start, end, first, count
#define glDrawRangeElementArrayAPPLE_ARG_EXPAND GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count
#define glDrawRangeElementArrayAPPLE_PACKED PACKED_void_GLenum_GLuint_GLuint_GLint_GLsizei
#define glDrawRangeElementArrayAPPLE_FORMAT FORMAT_void_GLenum_GLuint_GLuint_GLint_GLsizei
#define glDrawRangeElementArrayAPPLE_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDrawRangeElementArrayAPPLE_NOT_VOID_WRAP(...) {}
#define glDrawRangeElementArrayATI_INDEX 514
#define glDrawRangeElementArrayATI_RETURN void
#define glDrawRangeElementArrayATI_ARG_NAMES mode, start, end, count
#define glDrawRangeElementArrayATI_ARG_EXPAND GLenum mode, GLuint start, GLuint end, GLsizei count
#define glDrawRangeElementArrayATI_PACKED PACKED_void_GLenum_GLuint_GLuint_GLsizei
#define glDrawRangeElementArrayATI_FORMAT FORMAT_void_GLenum_GLuint_GLuint_GLsizei
#define glDrawRangeElementArrayATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDrawRangeElementArrayATI_NOT_VOID_WRAP(...) {}
#define glDrawRangeElements_INDEX 515
#define glDrawRangeElements_RETURN void
#define glDrawRangeElements_ARG_NAMES mode, start, end, count, type, indices
#define glDrawRangeElements_ARG_EXPAND GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid * indices
#define glDrawRangeElements_PACKED PACKED_void_GLenum_GLuint_GLuint_GLsizei_GLenum_const_GLvoid___GENPT__
#define glDrawRangeElements_FORMAT FORMAT_void_GLenum_GLuint_GLuint_GLsizei_GLenum_const_GLvoid___GENPT__
#define glDrawRangeElements_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDrawRangeElements_NOT_VOID_WRAP(...) {}
#define glDrawRangeElementsBaseVertex_INDEX 516
#define glDrawRangeElementsBaseVertex_RETURN void
#define glDrawRangeElementsBaseVertex_ARG_NAMES mode, start, end, count, type, indices, basevertex
#define glDrawRangeElementsBaseVertex_ARG_EXPAND GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid * indices, GLint basevertex
#define glDrawRangeElementsBaseVertex_PACKED PACKED_void_GLenum_GLuint_GLuint_GLsizei_GLenum_const_GLvoid___GENPT___GLint
#define glDrawRangeElementsBaseVertex_FORMAT FORMAT_void_GLenum_GLuint_GLuint_GLsizei_GLenum_const_GLvoid___GENPT___GLint
#define glDrawRangeElementsBaseVertex_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDrawRangeElementsBaseVertex_NOT_VOID_WRAP(...) {}
#define glDrawRangeElementsEXT_INDEX 517
#define glDrawRangeElementsEXT_RETURN void
#define glDrawRangeElementsEXT_ARG_NAMES mode, start, end, count, type, indices
#define glDrawRangeElementsEXT_ARG_EXPAND GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid * indices
#define glDrawRangeElementsEXT_PACKED PACKED_void_GLenum_GLuint_GLuint_GLsizei_GLenum_const_GLvoid___GENPT__
#define glDrawRangeElementsEXT_FORMAT FORMAT_void_GLenum_GLuint_GLuint_GLsizei_GLenum_const_GLvoid___GENPT__
#define glDrawRangeElementsEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDrawRangeElementsEXT_NOT_VOID_WRAP(...) {}
#define glDrawTextureNV_INDEX 518
#define glDrawTextureNV_RETURN void
#define glDrawTextureNV_ARG_NAMES texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1
#define glDrawTextureNV_ARG_EXPAND GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1
#define glDrawTextureNV_PACKED PACKED_void_GLuint_GLuint_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat
#define glDrawTextureNV_FORMAT FORMAT_void_GLuint_GLuint_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat
#define glDrawTextureNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDrawTextureNV_NOT_VOID_WRAP(...) {}
#define glDrawTransformFeedback_INDEX 519
#define glDrawTransformFeedback_RETURN void
#define glDrawTransformFeedback_ARG_NAMES mode, id
#define glDrawTransformFeedback_ARG_EXPAND GLenum mode, GLuint id
#define glDrawTransformFeedback_PACKED PACKED_void_GLenum_GLuint
#define glDrawTransformFeedback_FORMAT FORMAT_void_GLenum_GLuint
#define glDrawTransformFeedback_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDrawTransformFeedback_NOT_VOID_WRAP(...) {}
#define glDrawTransformFeedbackInstanced_INDEX 520
#define glDrawTransformFeedbackInstanced_RETURN void
#define glDrawTransformFeedbackInstanced_ARG_NAMES mode, id, instancecount
#define glDrawTransformFeedbackInstanced_ARG_EXPAND GLenum mode, GLuint id, GLsizei instancecount
#define glDrawTransformFeedbackInstanced_PACKED PACKED_void_GLenum_GLuint_GLsizei
#define glDrawTransformFeedbackInstanced_FORMAT FORMAT_void_GLenum_GLuint_GLsizei
#define glDrawTransformFeedbackInstanced_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDrawTransformFeedbackInstanced_NOT_VOID_WRAP(...) {}
#define glDrawTransformFeedbackNV_INDEX 521
#define glDrawTransformFeedbackNV_RETURN void
#define glDrawTransformFeedbackNV_ARG_NAMES mode, id
#define glDrawTransformFeedbackNV_ARG_EXPAND GLenum mode, GLuint id
#define glDrawTransformFeedbackNV_PACKED PACKED_void_GLenum_GLuint
#define glDrawTransformFeedbackNV_FORMAT FORMAT_void_GLenum_GLuint
#define glDrawTransformFeedbackNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDrawTransformFeedbackNV_NOT_VOID_WRAP(...) {}
#define glDrawTransformFeedbackStream_INDEX 522
#define glDrawTransformFeedbackStream_RETURN void
#define glDrawTransformFeedbackStream_ARG_NAMES mode, id, stream
#define glDrawTransformFeedbackStream_ARG_EXPAND GLenum mode, GLuint id, GLuint stream
#define glDrawTransformFeedbackStream_PACKED PACKED_void_GLenum_GLuint_GLuint
#define glDrawTransformFeedbackStream_FORMAT FORMAT_void_GLenum_GLuint_GLuint
#define glDrawTransformFeedbackStream_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDrawTransformFeedbackStream_NOT_VOID_WRAP(...) {}
#define glDrawTransformFeedbackStreamInstanced_INDEX 523
#define glDrawTransformFeedbackStreamInstanced_RETURN void
#define glDrawTransformFeedbackStreamInstanced_ARG_NAMES mode, id, stream, instancecount
#define glDrawTransformFeedbackStreamInstanced_ARG_EXPAND GLenum mode, GLuint id, GLuint stream, GLsizei instancecount
#define glDrawTransformFeedbackStreamInstanced_PACKED PACKED_void_GLenum_GLuint_GLuint_GLsizei
#define glDrawTransformFeedbackStreamInstanced_FORMAT FORMAT_void_GLenum_GLuint_GLuint_GLsizei
#define glDrawTransformFeedbackStreamInstanced_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glDrawTransformFeedbackStreamInstanced_NOT_VOID_WRAP(...) {}
#define glEdgeFlag_INDEX 524
#define glEdgeFlag_RETURN void
#define glEdgeFlag_ARG_NAMES flag
#define glEdgeFlag_ARG_EXPAND GLboolean flag
#define glEdgeFlag_PACKED PACKED_void_GLboolean
#define glEdgeFlag_FORMAT FORMAT_void_GLboolean
#define glEdgeFlag_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glEdgeFlag_NOT_VOID_WRAP(...) {}
#define glEdgeFlagFormatNV_INDEX 525
#define glEdgeFlagFormatNV_RETURN void
#define glEdgeFlagFormatNV_ARG_NAMES stride
#define glEdgeFlagFormatNV_ARG_EXPAND GLsizei stride
#define glEdgeFlagFormatNV_PACKED PACKED_void_GLsizei
#define glEdgeFlagFormatNV_FORMAT FORMAT_void_GLsizei
#define glEdgeFlagFormatNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glEdgeFlagFormatNV_NOT_VOID_WRAP(...) {}
#define glEdgeFlagPointer_INDEX 526
#define glEdgeFlagPointer_RETURN void
#define glEdgeFlagPointer_ARG_NAMES stride, pointer
#define glEdgeFlagPointer_ARG_EXPAND GLsizei stride, const GLvoid * pointer
#define glEdgeFlagPointer_PACKED PACKED_void_GLsizei_const_GLvoid___GENPT__
#define glEdgeFlagPointer_FORMAT FORMAT_void_GLsizei_const_GLvoid___GENPT__
#define glEdgeFlagPointer_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glEdgeFlagPointer_NOT_VOID_WRAP(...) {}
#define glEdgeFlagPointerEXT_INDEX 527
#define glEdgeFlagPointerEXT_RETURN void
#define glEdgeFlagPointerEXT_ARG_NAMES stride, count, pointer
#define glEdgeFlagPointerEXT_ARG_EXPAND GLsizei stride, GLsizei count, const GLboolean * pointer
#define glEdgeFlagPointerEXT_PACKED PACKED_void_GLsizei_GLsizei_const_GLboolean___GENPT__
#define glEdgeFlagPointerEXT_FORMAT FORMAT_void_GLsizei_GLsizei_const_GLboolean___GENPT__
#define glEdgeFlagPointerEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glEdgeFlagPointerEXT_NOT_VOID_WRAP(...) {}
#define glEdgeFlagPointerListIBM_INDEX 528
#define glEdgeFlagPointerListIBM_RETURN void
#define glEdgeFlagPointerListIBM_ARG_NAMES stride, pointer, ptrstride
#define glEdgeFlagPointerListIBM_ARG_EXPAND GLint stride, const GLboolean * pointer, GLint ptrstride
#define glEdgeFlagPointerListIBM_PACKED PACKED_void_GLint_const_GLboolean___GENPT___GLint
#define glEdgeFlagPointerListIBM_FORMAT FORMAT_void_GLint_const_GLboolean___GENPT___GLint
#define glEdgeFlagPointerListIBM_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glEdgeFlagPointerListIBM_NOT_VOID_WRAP(...) {}
#define glEdgeFlagv_INDEX 529
#define glEdgeFlagv_RETURN void
#define glEdgeFlagv_ARG_NAMES flag
#define glEdgeFlagv_ARG_EXPAND const GLboolean * flag
#define glEdgeFlagv_PACKED PACKED_void_const_GLboolean___GENPT__
#define glEdgeFlagv_FORMAT FORMAT_void_const_GLboolean___GENPT__
#define glEdgeFlagv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glEdgeFlagv_NOT_VOID_WRAP(...) {}
#define glElementPointerAPPLE_INDEX 530
#define glElementPointerAPPLE_RETURN void
#define glElementPointerAPPLE_ARG_NAMES type, pointer
#define glElementPointerAPPLE_ARG_EXPAND GLenum type, const GLvoid * pointer
#define glElementPointerAPPLE_PACKED PACKED_void_GLenum_const_GLvoid___GENPT__
#define glElementPointerAPPLE_FORMAT FORMAT_void_GLenum_const_GLvoid___GENPT__
#define glElementPointerAPPLE_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glElementPointerAPPLE_NOT_VOID_WRAP(...) {}
#define glElementPointerATI_INDEX 531
#define glElementPointerATI_RETURN void
#define glElementPointerATI_ARG_NAMES type, pointer
#define glElementPointerATI_ARG_EXPAND GLenum type, const GLvoid * pointer
#define glElementPointerATI_PACKED PACKED_void_GLenum_const_GLvoid___GENPT__
#define glElementPointerATI_FORMAT FORMAT_void_GLenum_const_GLvoid___GENPT__
#define glElementPointerATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glElementPointerATI_NOT_VOID_WRAP(...) {}
#define glEnable_INDEX 532
#define glEnable_RETURN void
#define glEnable_ARG_NAMES cap
#define glEnable_ARG_EXPAND GLenum cap
#define glEnable_PACKED PACKED_void_GLenum
#define glEnable_FORMAT FORMAT_void_GLenum
#define glEnable_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glEnable_NOT_VOID_WRAP(...) {}
#define glEnableClientState_INDEX 533
#define glEnableClientState_RETURN void
#define glEnableClientState_ARG_NAMES array
#define glEnableClientState_ARG_EXPAND GLenum array
#define glEnableClientState_PACKED PACKED_void_GLenum
#define glEnableClientState_FORMAT FORMAT_void_GLenum
#define glEnableClientState_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glEnableClientState_NOT_VOID_WRAP(...) {}
#define glEnableClientStateIndexedEXT_INDEX 534
#define glEnableClientStateIndexedEXT_RETURN void
#define glEnableClientStateIndexedEXT_ARG_NAMES array, index
#define glEnableClientStateIndexedEXT_ARG_EXPAND GLenum array, GLuint index
#define glEnableClientStateIndexedEXT_PACKED PACKED_void_GLenum_GLuint
#define glEnableClientStateIndexedEXT_FORMAT FORMAT_void_GLenum_GLuint
#define glEnableClientStateIndexedEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glEnableClientStateIndexedEXT_NOT_VOID_WRAP(...) {}
#define glEnableClientStateiEXT_INDEX 535
#define glEnableClientStateiEXT_RETURN void
#define glEnableClientStateiEXT_ARG_NAMES array, index
#define glEnableClientStateiEXT_ARG_EXPAND GLenum array, GLuint index
#define glEnableClientStateiEXT_PACKED PACKED_void_GLenum_GLuint
#define glEnableClientStateiEXT_FORMAT FORMAT_void_GLenum_GLuint
#define glEnableClientStateiEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glEnableClientStateiEXT_NOT_VOID_WRAP(...) {}
#define glEnableIndexedEXT_INDEX 536
#define glEnableIndexedEXT_RETURN void
#define glEnableIndexedEXT_ARG_NAMES target, index
#define glEnableIndexedEXT_ARG_EXPAND GLenum target, GLuint index
#define glEnableIndexedEXT_PACKED PACKED_void_GLenum_GLuint
#define glEnableIndexedEXT_FORMAT FORMAT_void_GLenum_GLuint
#define glEnableIndexedEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glEnableIndexedEXT_NOT_VOID_WRAP(...) {}
#define glEnableVariantClientStateEXT_INDEX 537
#define glEnableVariantClientStateEXT_RETURN void
#define glEnableVariantClientStateEXT_ARG_NAMES id
#define glEnableVariantClientStateEXT_ARG_EXPAND GLuint id
#define glEnableVariantClientStateEXT_PACKED PACKED_void_GLuint
#define glEnableVariantClientStateEXT_FORMAT FORMAT_void_GLuint
#define glEnableVariantClientStateEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glEnableVariantClientStateEXT_NOT_VOID_WRAP(...) {}
#define glEnableVertexArrayAttribEXT_INDEX 538
#define glEnableVertexArrayAttribEXT_RETURN void
#define glEnableVertexArrayAttribEXT_ARG_NAMES vaobj, index
#define glEnableVertexArrayAttribEXT_ARG_EXPAND GLuint vaobj, GLuint index
#define glEnableVertexArrayAttribEXT_PACKED PACKED_void_GLuint_GLuint
#define glEnableVertexArrayAttribEXT_FORMAT FORMAT_void_GLuint_GLuint
#define glEnableVertexArrayAttribEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glEnableVertexArrayAttribEXT_NOT_VOID_WRAP(...) {}
#define glEnableVertexArrayEXT_INDEX 539
#define glEnableVertexArrayEXT_RETURN void
#define glEnableVertexArrayEXT_ARG_NAMES vaobj, array
#define glEnableVertexArrayEXT_ARG_EXPAND GLuint vaobj, GLenum array
#define glEnableVertexArrayEXT_PACKED PACKED_void_GLuint_GLenum
#define glEnableVertexArrayEXT_FORMAT FORMAT_void_GLuint_GLenum
#define glEnableVertexArrayEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glEnableVertexArrayEXT_NOT_VOID_WRAP(...) {}
#define glEnableVertexAttribAPPLE_INDEX 540
#define glEnableVertexAttribAPPLE_RETURN void
#define glEnableVertexAttribAPPLE_ARG_NAMES index, pname
#define glEnableVertexAttribAPPLE_ARG_EXPAND GLuint index, GLenum pname
#define glEnableVertexAttribAPPLE_PACKED PACKED_void_GLuint_GLenum
#define glEnableVertexAttribAPPLE_FORMAT FORMAT_void_GLuint_GLenum
#define glEnableVertexAttribAPPLE_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glEnableVertexAttribAPPLE_NOT_VOID_WRAP(...) {}
#define glEnableVertexAttribArray_INDEX 541
#define glEnableVertexAttribArray_RETURN void
#define glEnableVertexAttribArray_ARG_NAMES index
#define glEnableVertexAttribArray_ARG_EXPAND GLuint index
#define glEnableVertexAttribArray_PACKED PACKED_void_GLuint
#define glEnableVertexAttribArray_FORMAT FORMAT_void_GLuint
#define glEnableVertexAttribArray_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glEnableVertexAttribArray_NOT_VOID_WRAP(...) {}
#define glEnableVertexAttribArrayARB_INDEX 542
#define glEnableVertexAttribArrayARB_RETURN void
#define glEnableVertexAttribArrayARB_ARG_NAMES index
#define glEnableVertexAttribArrayARB_ARG_EXPAND GLuint index
#define glEnableVertexAttribArrayARB_PACKED PACKED_void_GLuint
#define glEnableVertexAttribArrayARB_FORMAT FORMAT_void_GLuint
#define glEnableVertexAttribArrayARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glEnableVertexAttribArrayARB_NOT_VOID_WRAP(...) {}
#define glEnablei_INDEX 543
#define glEnablei_RETURN void
#define glEnablei_ARG_NAMES target, index
#define glEnablei_ARG_EXPAND GLenum target, GLuint index
#define glEnablei_PACKED PACKED_void_GLenum_GLuint
#define glEnablei_FORMAT FORMAT_void_GLenum_GLuint
#define glEnablei_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glEnablei_NOT_VOID_WRAP(...) {}
#define glEnd_INDEX 544
#define glEnd_RETURN void
#define glEnd_ARG_NAMES 
#define glEnd_ARG_EXPAND 
#define glEnd_PACKED PACKED_void
#define glEnd_FORMAT FORMAT_void
#define glEnd_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glEnd_NOT_VOID_WRAP(...) {}
#define glEndConditionalRender_INDEX 545
#define glEndConditionalRender_RETURN void
#define glEndConditionalRender_ARG_NAMES 
#define glEndConditionalRender_ARG_EXPAND 
#define glEndConditionalRender_PACKED PACKED_void
#define glEndConditionalRender_FORMAT FORMAT_void
#define glEndConditionalRender_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glEndConditionalRender_NOT_VOID_WRAP(...) {}
#define glEndConditionalRenderNV_INDEX 546
#define glEndConditionalRenderNV_RETURN void
#define glEndConditionalRenderNV_ARG_NAMES 
#define glEndConditionalRenderNV_ARG_EXPAND 
#define glEndConditionalRenderNV_PACKED PACKED_void
#define glEndConditionalRenderNV_FORMAT FORMAT_void
#define glEndConditionalRenderNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glEndConditionalRenderNV_NOT_VOID_WRAP(...) {}
#define glEndConditionalRenderNVX_INDEX 547
#define glEndConditionalRenderNVX_RETURN void
#define glEndConditionalRenderNVX_ARG_NAMES 
#define glEndConditionalRenderNVX_ARG_EXPAND 
#define glEndConditionalRenderNVX_PACKED PACKED_void
#define glEndConditionalRenderNVX_FORMAT FORMAT_void
#define glEndConditionalRenderNVX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glEndConditionalRenderNVX_NOT_VOID_WRAP(...) {}
#define glEndFragmentShaderATI_INDEX 548
#define glEndFragmentShaderATI_RETURN void
#define glEndFragmentShaderATI_ARG_NAMES 
#define glEndFragmentShaderATI_ARG_EXPAND 
#define glEndFragmentShaderATI_PACKED PACKED_void
#define glEndFragmentShaderATI_FORMAT FORMAT_void
#define glEndFragmentShaderATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glEndFragmentShaderATI_NOT_VOID_WRAP(...) {}
#define glEndList_INDEX 549
#define glEndList_RETURN void
#define glEndList_ARG_NAMES 
#define glEndList_ARG_EXPAND 
#define glEndList_PACKED PACKED_void
#define glEndList_FORMAT FORMAT_void
#define glEndList_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glEndList_NOT_VOID_WRAP(...) {}
#define glEndOcclusionQueryNV_INDEX 550
#define glEndOcclusionQueryNV_RETURN void
#define glEndOcclusionQueryNV_ARG_NAMES 
#define glEndOcclusionQueryNV_ARG_EXPAND 
#define glEndOcclusionQueryNV_PACKED PACKED_void
#define glEndOcclusionQueryNV_FORMAT FORMAT_void
#define glEndOcclusionQueryNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glEndOcclusionQueryNV_NOT_VOID_WRAP(...) {}
#define glEndPerfMonitorAMD_INDEX 551
#define glEndPerfMonitorAMD_RETURN void
#define glEndPerfMonitorAMD_ARG_NAMES monitor
#define glEndPerfMonitorAMD_ARG_EXPAND GLuint monitor
#define glEndPerfMonitorAMD_PACKED PACKED_void_GLuint
#define glEndPerfMonitorAMD_FORMAT FORMAT_void_GLuint
#define glEndPerfMonitorAMD_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glEndPerfMonitorAMD_NOT_VOID_WRAP(...) {}
#define glEndQuery_INDEX 552
#define glEndQuery_RETURN void
#define glEndQuery_ARG_NAMES target
#define glEndQuery_ARG_EXPAND GLenum target
#define glEndQuery_PACKED PACKED_void_GLenum
#define glEndQuery_FORMAT FORMAT_void_GLenum
#define glEndQuery_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glEndQuery_NOT_VOID_WRAP(...) {}
#define glEndQueryARB_INDEX 553
#define glEndQueryARB_RETURN void
#define glEndQueryARB_ARG_NAMES target
#define glEndQueryARB_ARG_EXPAND GLenum target
#define glEndQueryARB_PACKED PACKED_void_GLenum
#define glEndQueryARB_FORMAT FORMAT_void_GLenum
#define glEndQueryARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glEndQueryARB_NOT_VOID_WRAP(...) {}
#define glEndQueryIndexed_INDEX 554
#define glEndQueryIndexed_RETURN void
#define glEndQueryIndexed_ARG_NAMES target, index
#define glEndQueryIndexed_ARG_EXPAND GLenum target, GLuint index
#define glEndQueryIndexed_PACKED PACKED_void_GLenum_GLuint
#define glEndQueryIndexed_FORMAT FORMAT_void_GLenum_GLuint
#define glEndQueryIndexed_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glEndQueryIndexed_NOT_VOID_WRAP(...) {}
#define glEndTransformFeedback_INDEX 555
#define glEndTransformFeedback_RETURN void
#define glEndTransformFeedback_ARG_NAMES 
#define glEndTransformFeedback_ARG_EXPAND 
#define glEndTransformFeedback_PACKED PACKED_void
#define glEndTransformFeedback_FORMAT FORMAT_void
#define glEndTransformFeedback_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glEndTransformFeedback_NOT_VOID_WRAP(...) {}
#define glEndTransformFeedbackEXT_INDEX 556
#define glEndTransformFeedbackEXT_RETURN void
#define glEndTransformFeedbackEXT_ARG_NAMES 
#define glEndTransformFeedbackEXT_ARG_EXPAND 
#define glEndTransformFeedbackEXT_PACKED PACKED_void
#define glEndTransformFeedbackEXT_FORMAT FORMAT_void
#define glEndTransformFeedbackEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glEndTransformFeedbackEXT_NOT_VOID_WRAP(...) {}
#define glEndTransformFeedbackNV_INDEX 557
#define glEndTransformFeedbackNV_RETURN void
#define glEndTransformFeedbackNV_ARG_NAMES 
#define glEndTransformFeedbackNV_ARG_EXPAND 
#define glEndTransformFeedbackNV_PACKED PACKED_void
#define glEndTransformFeedbackNV_FORMAT FORMAT_void
#define glEndTransformFeedbackNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glEndTransformFeedbackNV_NOT_VOID_WRAP(...) {}
#define glEndVertexShaderEXT_INDEX 558
#define glEndVertexShaderEXT_RETURN void
#define glEndVertexShaderEXT_ARG_NAMES 
#define glEndVertexShaderEXT_ARG_EXPAND 
#define glEndVertexShaderEXT_PACKED PACKED_void
#define glEndVertexShaderEXT_FORMAT FORMAT_void
#define glEndVertexShaderEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glEndVertexShaderEXT_NOT_VOID_WRAP(...) {}
#define glEndVideoCaptureNV_INDEX 559
#define glEndVideoCaptureNV_RETURN void
#define glEndVideoCaptureNV_ARG_NAMES video_capture_slot
#define glEndVideoCaptureNV_ARG_EXPAND GLuint video_capture_slot
#define glEndVideoCaptureNV_PACKED PACKED_void_GLuint
#define glEndVideoCaptureNV_FORMAT FORMAT_void_GLuint
#define glEndVideoCaptureNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glEndVideoCaptureNV_NOT_VOID_WRAP(...) {}
#define glEvalCoord1d_INDEX 560
#define glEvalCoord1d_RETURN void
#define glEvalCoord1d_ARG_NAMES u
#define glEvalCoord1d_ARG_EXPAND GLdouble u
#define glEvalCoord1d_PACKED PACKED_void_GLdouble
#define glEvalCoord1d_FORMAT FORMAT_void_GLdouble
#define glEvalCoord1d_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glEvalCoord1d_NOT_VOID_WRAP(...) {}
#define glEvalCoord1dv_INDEX 561
#define glEvalCoord1dv_RETURN void
#define glEvalCoord1dv_ARG_NAMES u
#define glEvalCoord1dv_ARG_EXPAND const GLdouble * u
#define glEvalCoord1dv_PACKED PACKED_void_const_GLdouble___GENPT__
#define glEvalCoord1dv_FORMAT FORMAT_void_const_GLdouble___GENPT__
#define glEvalCoord1dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glEvalCoord1dv_NOT_VOID_WRAP(...) {}
#define glEvalCoord1f_INDEX 562
#define glEvalCoord1f_RETURN void
#define glEvalCoord1f_ARG_NAMES u
#define glEvalCoord1f_ARG_EXPAND GLfloat u
#define glEvalCoord1f_PACKED PACKED_void_GLfloat
#define glEvalCoord1f_FORMAT FORMAT_void_GLfloat
#define glEvalCoord1f_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glEvalCoord1f_NOT_VOID_WRAP(...) {}
#define glEvalCoord1fv_INDEX 563
#define glEvalCoord1fv_RETURN void
#define glEvalCoord1fv_ARG_NAMES u
#define glEvalCoord1fv_ARG_EXPAND const GLfloat * u
#define glEvalCoord1fv_PACKED PACKED_void_const_GLfloat___GENPT__
#define glEvalCoord1fv_FORMAT FORMAT_void_const_GLfloat___GENPT__
#define glEvalCoord1fv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glEvalCoord1fv_NOT_VOID_WRAP(...) {}
#define glEvalCoord1xOES_INDEX 564
#define glEvalCoord1xOES_RETURN void
#define glEvalCoord1xOES_ARG_NAMES u
#define glEvalCoord1xOES_ARG_EXPAND GLfixed u
#define glEvalCoord1xOES_PACKED PACKED_void_GLfixed
#define glEvalCoord1xOES_FORMAT FORMAT_void_GLfixed
#define glEvalCoord1xOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glEvalCoord1xOES_NOT_VOID_WRAP(...) {}
#define glEvalCoord1xvOES_INDEX 565
#define glEvalCoord1xvOES_RETURN void
#define glEvalCoord1xvOES_ARG_NAMES coords
#define glEvalCoord1xvOES_ARG_EXPAND const GLfixed * coords
#define glEvalCoord1xvOES_PACKED PACKED_void_const_GLfixed___GENPT__
#define glEvalCoord1xvOES_FORMAT FORMAT_void_const_GLfixed___GENPT__
#define glEvalCoord1xvOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glEvalCoord1xvOES_NOT_VOID_WRAP(...) {}
#define glEvalCoord2d_INDEX 566
#define glEvalCoord2d_RETURN void
#define glEvalCoord2d_ARG_NAMES u, v
#define glEvalCoord2d_ARG_EXPAND GLdouble u, GLdouble v
#define glEvalCoord2d_PACKED PACKED_void_GLdouble_GLdouble
#define glEvalCoord2d_FORMAT FORMAT_void_GLdouble_GLdouble
#define glEvalCoord2d_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glEvalCoord2d_NOT_VOID_WRAP(...) {}
#define glEvalCoord2dv_INDEX 567
#define glEvalCoord2dv_RETURN void
#define glEvalCoord2dv_ARG_NAMES u
#define glEvalCoord2dv_ARG_EXPAND const GLdouble * u
#define glEvalCoord2dv_PACKED PACKED_void_const_GLdouble___GENPT__
#define glEvalCoord2dv_FORMAT FORMAT_void_const_GLdouble___GENPT__
#define glEvalCoord2dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glEvalCoord2dv_NOT_VOID_WRAP(...) {}
#define glEvalCoord2f_INDEX 568
#define glEvalCoord2f_RETURN void
#define glEvalCoord2f_ARG_NAMES u, v
#define glEvalCoord2f_ARG_EXPAND GLfloat u, GLfloat v
#define glEvalCoord2f_PACKED PACKED_void_GLfloat_GLfloat
#define glEvalCoord2f_FORMAT FORMAT_void_GLfloat_GLfloat
#define glEvalCoord2f_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glEvalCoord2f_NOT_VOID_WRAP(...) {}
#define glEvalCoord2fv_INDEX 569
#define glEvalCoord2fv_RETURN void
#define glEvalCoord2fv_ARG_NAMES u
#define glEvalCoord2fv_ARG_EXPAND const GLfloat * u
#define glEvalCoord2fv_PACKED PACKED_void_const_GLfloat___GENPT__
#define glEvalCoord2fv_FORMAT FORMAT_void_const_GLfloat___GENPT__
#define glEvalCoord2fv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glEvalCoord2fv_NOT_VOID_WRAP(...) {}
#define glEvalCoord2xOES_INDEX 570
#define glEvalCoord2xOES_RETURN void
#define glEvalCoord2xOES_ARG_NAMES u, v
#define glEvalCoord2xOES_ARG_EXPAND GLfixed u, GLfixed v
#define glEvalCoord2xOES_PACKED PACKED_void_GLfixed_GLfixed
#define glEvalCoord2xOES_FORMAT FORMAT_void_GLfixed_GLfixed
#define glEvalCoord2xOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glEvalCoord2xOES_NOT_VOID_WRAP(...) {}
#define glEvalCoord2xvOES_INDEX 571
#define glEvalCoord2xvOES_RETURN void
#define glEvalCoord2xvOES_ARG_NAMES coords
#define glEvalCoord2xvOES_ARG_EXPAND const GLfixed * coords
#define glEvalCoord2xvOES_PACKED PACKED_void_const_GLfixed___GENPT__
#define glEvalCoord2xvOES_FORMAT FORMAT_void_const_GLfixed___GENPT__
#define glEvalCoord2xvOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glEvalCoord2xvOES_NOT_VOID_WRAP(...) {}
#define glEvalMapsNV_INDEX 572
#define glEvalMapsNV_RETURN void
#define glEvalMapsNV_ARG_NAMES target, mode
#define glEvalMapsNV_ARG_EXPAND GLenum target, GLenum mode
#define glEvalMapsNV_PACKED PACKED_void_GLenum_GLenum
#define glEvalMapsNV_FORMAT FORMAT_void_GLenum_GLenum
#define glEvalMapsNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glEvalMapsNV_NOT_VOID_WRAP(...) {}
#define glEvalMesh1_INDEX 573
#define glEvalMesh1_RETURN void
#define glEvalMesh1_ARG_NAMES mode, i1, i2
#define glEvalMesh1_ARG_EXPAND GLenum mode, GLint i1, GLint i2
#define glEvalMesh1_PACKED PACKED_void_GLenum_GLint_GLint
#define glEvalMesh1_FORMAT FORMAT_void_GLenum_GLint_GLint
#define glEvalMesh1_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glEvalMesh1_NOT_VOID_WRAP(...) {}
#define glEvalMesh2_INDEX 574
#define glEvalMesh2_RETURN void
#define glEvalMesh2_ARG_NAMES mode, i1, i2, j1, j2
#define glEvalMesh2_ARG_EXPAND GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2
#define glEvalMesh2_PACKED PACKED_void_GLenum_GLint_GLint_GLint_GLint
#define glEvalMesh2_FORMAT FORMAT_void_GLenum_GLint_GLint_GLint_GLint
#define glEvalMesh2_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glEvalMesh2_NOT_VOID_WRAP(...) {}
#define glEvalPoint1_INDEX 575
#define glEvalPoint1_RETURN void
#define glEvalPoint1_ARG_NAMES i
#define glEvalPoint1_ARG_EXPAND GLint i
#define glEvalPoint1_PACKED PACKED_void_GLint
#define glEvalPoint1_FORMAT FORMAT_void_GLint
#define glEvalPoint1_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glEvalPoint1_NOT_VOID_WRAP(...) {}
#define glEvalPoint2_INDEX 576
#define glEvalPoint2_RETURN void
#define glEvalPoint2_ARG_NAMES i, j
#define glEvalPoint2_ARG_EXPAND GLint i, GLint j
#define glEvalPoint2_PACKED PACKED_void_GLint_GLint
#define glEvalPoint2_FORMAT FORMAT_void_GLint_GLint
#define glEvalPoint2_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glEvalPoint2_NOT_VOID_WRAP(...) {}
#define glExecuteProgramNV_INDEX 577
#define glExecuteProgramNV_RETURN void
#define glExecuteProgramNV_ARG_NAMES target, id, params
#define glExecuteProgramNV_ARG_EXPAND GLenum target, GLuint id, const GLfloat * params
#define glExecuteProgramNV_PACKED PACKED_void_GLenum_GLuint_const_GLfloat___GENPT__
#define glExecuteProgramNV_FORMAT FORMAT_void_GLenum_GLuint_const_GLfloat___GENPT__
#define glExecuteProgramNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glExecuteProgramNV_NOT_VOID_WRAP(...) {}
#define glExtractComponentEXT_INDEX 578
#define glExtractComponentEXT_RETURN void
#define glExtractComponentEXT_ARG_NAMES res, src, num
#define glExtractComponentEXT_ARG_EXPAND GLuint res, GLuint src, GLuint num
#define glExtractComponentEXT_PACKED PACKED_void_GLuint_GLuint_GLuint
#define glExtractComponentEXT_FORMAT FORMAT_void_GLuint_GLuint_GLuint
#define glExtractComponentEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glExtractComponentEXT_NOT_VOID_WRAP(...) {}
#define glFeedbackBuffer_INDEX 579
#define glFeedbackBuffer_RETURN void
#define glFeedbackBuffer_ARG_NAMES size, type, buffer
#define glFeedbackBuffer_ARG_EXPAND GLsizei size, GLenum type, GLfloat * buffer
#define glFeedbackBuffer_PACKED PACKED_void_GLsizei_GLenum_GLfloat___GENPT__
#define glFeedbackBuffer_FORMAT FORMAT_void_GLsizei_GLenum_GLfloat___GENPT__
#define glFeedbackBuffer_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFeedbackBuffer_NOT_VOID_WRAP(...) {}
#define glFeedbackBufferxOES_INDEX 580
#define glFeedbackBufferxOES_RETURN void
#define glFeedbackBufferxOES_ARG_NAMES n, type, buffer
#define glFeedbackBufferxOES_ARG_EXPAND GLsizei n, GLenum type, const GLfixed * buffer
#define glFeedbackBufferxOES_PACKED PACKED_void_GLsizei_GLenum_const_GLfixed___GENPT__
#define glFeedbackBufferxOES_FORMAT FORMAT_void_GLsizei_GLenum_const_GLfixed___GENPT__
#define glFeedbackBufferxOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFeedbackBufferxOES_NOT_VOID_WRAP(...) {}
#define glFenceSync_INDEX 581
#define glFenceSync_RETURN GLsync
#define glFenceSync_ARG_NAMES condition, flags
#define glFenceSync_ARG_EXPAND GLenum condition, GLbitfield flags
#define glFenceSync_PACKED PACKED_GLsync_GLenum_GLbitfield
#define glFenceSync_FORMAT FORMAT_GLsync_GLenum_GLbitfield
#define glFenceSync_VOID_ONLY_WRAP(...) {}
#define glFenceSync_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glFinalCombinerInputNV_INDEX 582
#define glFinalCombinerInputNV_RETURN void
#define glFinalCombinerInputNV_ARG_NAMES variable, input, mapping, componentUsage
#define glFinalCombinerInputNV_ARG_EXPAND GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage
#define glFinalCombinerInputNV_PACKED PACKED_void_GLenum_GLenum_GLenum_GLenum
#define glFinalCombinerInputNV_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLenum
#define glFinalCombinerInputNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFinalCombinerInputNV_NOT_VOID_WRAP(...) {}
#define glFinish_INDEX 583
#define glFinish_RETURN void
#define glFinish_ARG_NAMES 
#define glFinish_ARG_EXPAND 
#define glFinish_PACKED PACKED_void
#define glFinish_FORMAT FORMAT_void
#define glFinish_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFinish_NOT_VOID_WRAP(...) {}
#define glFinishAsyncSGIX_INDEX 584
#define glFinishAsyncSGIX_RETURN GLint
#define glFinishAsyncSGIX_ARG_NAMES markerp
#define glFinishAsyncSGIX_ARG_EXPAND GLuint * markerp
#define glFinishAsyncSGIX_PACKED PACKED_GLint_GLuint___GENPT__
#define glFinishAsyncSGIX_FORMAT FORMAT_GLint_GLuint___GENPT__
#define glFinishAsyncSGIX_VOID_ONLY_WRAP(...) {}
#define glFinishAsyncSGIX_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glFinishFenceAPPLE_INDEX 585
#define glFinishFenceAPPLE_RETURN void
#define glFinishFenceAPPLE_ARG_NAMES fence
#define glFinishFenceAPPLE_ARG_EXPAND GLuint fence
#define glFinishFenceAPPLE_PACKED PACKED_void_GLuint
#define glFinishFenceAPPLE_FORMAT FORMAT_void_GLuint
#define glFinishFenceAPPLE_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFinishFenceAPPLE_NOT_VOID_WRAP(...) {}
#define glFinishFenceNV_INDEX 586
#define glFinishFenceNV_RETURN void
#define glFinishFenceNV_ARG_NAMES fence
#define glFinishFenceNV_ARG_EXPAND GLuint fence
#define glFinishFenceNV_PACKED PACKED_void_GLuint
#define glFinishFenceNV_FORMAT FORMAT_void_GLuint
#define glFinishFenceNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFinishFenceNV_NOT_VOID_WRAP(...) {}
#define glFinishObjectAPPLE_INDEX 587
#define glFinishObjectAPPLE_RETURN void
#define glFinishObjectAPPLE_ARG_NAMES object, name
#define glFinishObjectAPPLE_ARG_EXPAND GLenum object, GLint name
#define glFinishObjectAPPLE_PACKED PACKED_void_GLenum_GLint
#define glFinishObjectAPPLE_FORMAT FORMAT_void_GLenum_GLint
#define glFinishObjectAPPLE_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFinishObjectAPPLE_NOT_VOID_WRAP(...) {}
#define glFinishTextureSUNX_INDEX 588
#define glFinishTextureSUNX_RETURN void
#define glFinishTextureSUNX_ARG_NAMES 
#define glFinishTextureSUNX_ARG_EXPAND 
#define glFinishTextureSUNX_PACKED PACKED_void
#define glFinishTextureSUNX_FORMAT FORMAT_void
#define glFinishTextureSUNX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFinishTextureSUNX_NOT_VOID_WRAP(...) {}
#define glFlush_INDEX 589
#define glFlush_RETURN void
#define glFlush_ARG_NAMES 
#define glFlush_ARG_EXPAND 
#define glFlush_PACKED PACKED_void
#define glFlush_FORMAT FORMAT_void
#define glFlush_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFlush_NOT_VOID_WRAP(...) {}
#define glFlushMappedBufferRange_INDEX 590
#define glFlushMappedBufferRange_RETURN void
#define glFlushMappedBufferRange_ARG_NAMES target, offset, length
#define glFlushMappedBufferRange_ARG_EXPAND GLenum target, GLintptr offset, GLsizeiptr length
#define glFlushMappedBufferRange_PACKED PACKED_void_GLenum_GLintptr_GLsizeiptr
#define glFlushMappedBufferRange_FORMAT FORMAT_void_GLenum_GLintptr_GLsizeiptr
#define glFlushMappedBufferRange_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFlushMappedBufferRange_NOT_VOID_WRAP(...) {}
#define glFlushMappedBufferRangeAPPLE_INDEX 591
#define glFlushMappedBufferRangeAPPLE_RETURN void
#define glFlushMappedBufferRangeAPPLE_ARG_NAMES target, offset, size
#define glFlushMappedBufferRangeAPPLE_ARG_EXPAND GLenum target, GLintptr offset, GLsizeiptr size
#define glFlushMappedBufferRangeAPPLE_PACKED PACKED_void_GLenum_GLintptr_GLsizeiptr
#define glFlushMappedBufferRangeAPPLE_FORMAT FORMAT_void_GLenum_GLintptr_GLsizeiptr
#define glFlushMappedBufferRangeAPPLE_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFlushMappedBufferRangeAPPLE_NOT_VOID_WRAP(...) {}
#define glFlushMappedNamedBufferRangeEXT_INDEX 592
#define glFlushMappedNamedBufferRangeEXT_RETURN void
#define glFlushMappedNamedBufferRangeEXT_ARG_NAMES buffer, offset, length
#define glFlushMappedNamedBufferRangeEXT_ARG_EXPAND GLuint buffer, GLintptr offset, GLsizeiptr length
#define glFlushMappedNamedBufferRangeEXT_PACKED PACKED_void_GLuint_GLintptr_GLsizeiptr
#define glFlushMappedNamedBufferRangeEXT_FORMAT FORMAT_void_GLuint_GLintptr_GLsizeiptr
#define glFlushMappedNamedBufferRangeEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFlushMappedNamedBufferRangeEXT_NOT_VOID_WRAP(...) {}
#define glFlushPixelDataRangeNV_INDEX 593
#define glFlushPixelDataRangeNV_RETURN void
#define glFlushPixelDataRangeNV_ARG_NAMES target
#define glFlushPixelDataRangeNV_ARG_EXPAND GLenum target
#define glFlushPixelDataRangeNV_PACKED PACKED_void_GLenum
#define glFlushPixelDataRangeNV_FORMAT FORMAT_void_GLenum
#define glFlushPixelDataRangeNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFlushPixelDataRangeNV_NOT_VOID_WRAP(...) {}
#define glFlushRasterSGIX_INDEX 594
#define glFlushRasterSGIX_RETURN void
#define glFlushRasterSGIX_ARG_NAMES 
#define glFlushRasterSGIX_ARG_EXPAND 
#define glFlushRasterSGIX_PACKED PACKED_void
#define glFlushRasterSGIX_FORMAT FORMAT_void
#define glFlushRasterSGIX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFlushRasterSGIX_NOT_VOID_WRAP(...) {}
#define glFlushStaticDataIBM_INDEX 595
#define glFlushStaticDataIBM_RETURN void
#define glFlushStaticDataIBM_ARG_NAMES target
#define glFlushStaticDataIBM_ARG_EXPAND GLenum target
#define glFlushStaticDataIBM_PACKED PACKED_void_GLenum
#define glFlushStaticDataIBM_FORMAT FORMAT_void_GLenum
#define glFlushStaticDataIBM_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFlushStaticDataIBM_NOT_VOID_WRAP(...) {}
#define glFlushVertexArrayRangeAPPLE_INDEX 596
#define glFlushVertexArrayRangeAPPLE_RETURN void
#define glFlushVertexArrayRangeAPPLE_ARG_NAMES length, pointer
#define glFlushVertexArrayRangeAPPLE_ARG_EXPAND GLsizei length, GLvoid * pointer
#define glFlushVertexArrayRangeAPPLE_PACKED PACKED_void_GLsizei_GLvoid___GENPT__
#define glFlushVertexArrayRangeAPPLE_FORMAT FORMAT_void_GLsizei_GLvoid___GENPT__
#define glFlushVertexArrayRangeAPPLE_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFlushVertexArrayRangeAPPLE_NOT_VOID_WRAP(...) {}
#define glFlushVertexArrayRangeNV_INDEX 597
#define glFlushVertexArrayRangeNV_RETURN void
#define glFlushVertexArrayRangeNV_ARG_NAMES 
#define glFlushVertexArrayRangeNV_ARG_EXPAND 
#define glFlushVertexArrayRangeNV_PACKED PACKED_void
#define glFlushVertexArrayRangeNV_FORMAT FORMAT_void
#define glFlushVertexArrayRangeNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFlushVertexArrayRangeNV_NOT_VOID_WRAP(...) {}
#define glFogCoordFormatNV_INDEX 598
#define glFogCoordFormatNV_RETURN void
#define glFogCoordFormatNV_ARG_NAMES type, stride
#define glFogCoordFormatNV_ARG_EXPAND GLenum type, GLsizei stride
#define glFogCoordFormatNV_PACKED PACKED_void_GLenum_GLsizei
#define glFogCoordFormatNV_FORMAT FORMAT_void_GLenum_GLsizei
#define glFogCoordFormatNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFogCoordFormatNV_NOT_VOID_WRAP(...) {}
#define glFogCoordPointer_INDEX 599
#define glFogCoordPointer_RETURN void
#define glFogCoordPointer_ARG_NAMES type, stride, pointer
#define glFogCoordPointer_ARG_EXPAND GLenum type, GLsizei stride, const GLvoid * pointer
#define glFogCoordPointer_PACKED PACKED_void_GLenum_GLsizei_const_GLvoid___GENPT__
#define glFogCoordPointer_FORMAT FORMAT_void_GLenum_GLsizei_const_GLvoid___GENPT__
#define glFogCoordPointer_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFogCoordPointer_NOT_VOID_WRAP(...) {}
#define glFogCoordPointerEXT_INDEX 600
#define glFogCoordPointerEXT_RETURN void
#define glFogCoordPointerEXT_ARG_NAMES type, stride, pointer
#define glFogCoordPointerEXT_ARG_EXPAND GLenum type, GLsizei stride, const GLvoid * pointer
#define glFogCoordPointerEXT_PACKED PACKED_void_GLenum_GLsizei_const_GLvoid___GENPT__
#define glFogCoordPointerEXT_FORMAT FORMAT_void_GLenum_GLsizei_const_GLvoid___GENPT__
#define glFogCoordPointerEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFogCoordPointerEXT_NOT_VOID_WRAP(...) {}
#define glFogCoordPointerListIBM_INDEX 601
#define glFogCoordPointerListIBM_RETURN void
#define glFogCoordPointerListIBM_ARG_NAMES type, stride, pointer, ptrstride
#define glFogCoordPointerListIBM_ARG_EXPAND GLenum type, GLint stride, const GLvoid * pointer, GLint ptrstride
#define glFogCoordPointerListIBM_PACKED PACKED_void_GLenum_GLint_const_GLvoid___GENPT___GLint
#define glFogCoordPointerListIBM_FORMAT FORMAT_void_GLenum_GLint_const_GLvoid___GENPT___GLint
#define glFogCoordPointerListIBM_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFogCoordPointerListIBM_NOT_VOID_WRAP(...) {}
#define glFogCoordd_INDEX 602
#define glFogCoordd_RETURN void
#define glFogCoordd_ARG_NAMES coord
#define glFogCoordd_ARG_EXPAND GLdouble coord
#define glFogCoordd_PACKED PACKED_void_GLdouble
#define glFogCoordd_FORMAT FORMAT_void_GLdouble
#define glFogCoordd_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFogCoordd_NOT_VOID_WRAP(...) {}
#define glFogCoorddEXT_INDEX 603
#define glFogCoorddEXT_RETURN void
#define glFogCoorddEXT_ARG_NAMES coord
#define glFogCoorddEXT_ARG_EXPAND GLdouble coord
#define glFogCoorddEXT_PACKED PACKED_void_GLdouble
#define glFogCoorddEXT_FORMAT FORMAT_void_GLdouble
#define glFogCoorddEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFogCoorddEXT_NOT_VOID_WRAP(...) {}
#define glFogCoorddv_INDEX 604
#define glFogCoorddv_RETURN void
#define glFogCoorddv_ARG_NAMES coord
#define glFogCoorddv_ARG_EXPAND const GLdouble * coord
#define glFogCoorddv_PACKED PACKED_void_const_GLdouble___GENPT__
#define glFogCoorddv_FORMAT FORMAT_void_const_GLdouble___GENPT__
#define glFogCoorddv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFogCoorddv_NOT_VOID_WRAP(...) {}
#define glFogCoorddvEXT_INDEX 605
#define glFogCoorddvEXT_RETURN void
#define glFogCoorddvEXT_ARG_NAMES coord
#define glFogCoorddvEXT_ARG_EXPAND const GLdouble * coord
#define glFogCoorddvEXT_PACKED PACKED_void_const_GLdouble___GENPT__
#define glFogCoorddvEXT_FORMAT FORMAT_void_const_GLdouble___GENPT__
#define glFogCoorddvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFogCoorddvEXT_NOT_VOID_WRAP(...) {}
#define glFogCoordf_INDEX 606
#define glFogCoordf_RETURN void
#define glFogCoordf_ARG_NAMES coord
#define glFogCoordf_ARG_EXPAND GLfloat coord
#define glFogCoordf_PACKED PACKED_void_GLfloat
#define glFogCoordf_FORMAT FORMAT_void_GLfloat
#define glFogCoordf_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFogCoordf_NOT_VOID_WRAP(...) {}
#define glFogCoordfEXT_INDEX 607
#define glFogCoordfEXT_RETURN void
#define glFogCoordfEXT_ARG_NAMES coord
#define glFogCoordfEXT_ARG_EXPAND GLfloat coord
#define glFogCoordfEXT_PACKED PACKED_void_GLfloat
#define glFogCoordfEXT_FORMAT FORMAT_void_GLfloat
#define glFogCoordfEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFogCoordfEXT_NOT_VOID_WRAP(...) {}
#define glFogCoordfv_INDEX 608
#define glFogCoordfv_RETURN void
#define glFogCoordfv_ARG_NAMES coord
#define glFogCoordfv_ARG_EXPAND const GLfloat * coord
#define glFogCoordfv_PACKED PACKED_void_const_GLfloat___GENPT__
#define glFogCoordfv_FORMAT FORMAT_void_const_GLfloat___GENPT__
#define glFogCoordfv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFogCoordfv_NOT_VOID_WRAP(...) {}
#define glFogCoordfvEXT_INDEX 609
#define glFogCoordfvEXT_RETURN void
#define glFogCoordfvEXT_ARG_NAMES coord
#define glFogCoordfvEXT_ARG_EXPAND const GLfloat * coord
#define glFogCoordfvEXT_PACKED PACKED_void_const_GLfloat___GENPT__
#define glFogCoordfvEXT_FORMAT FORMAT_void_const_GLfloat___GENPT__
#define glFogCoordfvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFogCoordfvEXT_NOT_VOID_WRAP(...) {}
#define glFogCoordhNV_INDEX 610
#define glFogCoordhNV_RETURN void
#define glFogCoordhNV_ARG_NAMES fog
#define glFogCoordhNV_ARG_EXPAND GLhalfNV fog
#define glFogCoordhNV_PACKED PACKED_void_GLhalfNV
#define glFogCoordhNV_FORMAT FORMAT_void_GLhalfNV
#define glFogCoordhNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFogCoordhNV_NOT_VOID_WRAP(...) {}
#define glFogCoordhvNV_INDEX 611
#define glFogCoordhvNV_RETURN void
#define glFogCoordhvNV_ARG_NAMES fog
#define glFogCoordhvNV_ARG_EXPAND const GLhalfNV * fog
#define glFogCoordhvNV_PACKED PACKED_void_const_GLhalfNV___GENPT__
#define glFogCoordhvNV_FORMAT FORMAT_void_const_GLhalfNV___GENPT__
#define glFogCoordhvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFogCoordhvNV_NOT_VOID_WRAP(...) {}
#define glFogFuncSGIS_INDEX 612
#define glFogFuncSGIS_RETURN void
#define glFogFuncSGIS_ARG_NAMES n, points
#define glFogFuncSGIS_ARG_EXPAND GLsizei n, const GLfloat * points
#define glFogFuncSGIS_PACKED PACKED_void_GLsizei_const_GLfloat___GENPT__
#define glFogFuncSGIS_FORMAT FORMAT_void_GLsizei_const_GLfloat___GENPT__
#define glFogFuncSGIS_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFogFuncSGIS_NOT_VOID_WRAP(...) {}
#define glFogf_INDEX 613
#define glFogf_RETURN void
#define glFogf_ARG_NAMES pname, param
#define glFogf_ARG_EXPAND GLenum pname, GLfloat param
#define glFogf_PACKED PACKED_void_GLenum_GLfloat
#define glFogf_FORMAT FORMAT_void_GLenum_GLfloat
#define glFogf_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFogf_NOT_VOID_WRAP(...) {}
#define glFogfv_INDEX 614
#define glFogfv_RETURN void
#define glFogfv_ARG_NAMES pname, params
#define glFogfv_ARG_EXPAND GLenum pname, const GLfloat * params
#define glFogfv_PACKED PACKED_void_GLenum_const_GLfloat___GENPT__
#define glFogfv_FORMAT FORMAT_void_GLenum_const_GLfloat___GENPT__
#define glFogfv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFogfv_NOT_VOID_WRAP(...) {}
#define glFogi_INDEX 615
#define glFogi_RETURN void
#define glFogi_ARG_NAMES pname, param
#define glFogi_ARG_EXPAND GLenum pname, GLint param
#define glFogi_PACKED PACKED_void_GLenum_GLint
#define glFogi_FORMAT FORMAT_void_GLenum_GLint
#define glFogi_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFogi_NOT_VOID_WRAP(...) {}
#define glFogiv_INDEX 616
#define glFogiv_RETURN void
#define glFogiv_ARG_NAMES pname, params
#define glFogiv_ARG_EXPAND GLenum pname, const GLint * params
#define glFogiv_PACKED PACKED_void_GLenum_const_GLint___GENPT__
#define glFogiv_FORMAT FORMAT_void_GLenum_const_GLint___GENPT__
#define glFogiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFogiv_NOT_VOID_WRAP(...) {}
#define glFogx_INDEX 617
#define glFogx_RETURN void
#define glFogx_ARG_NAMES pname, param
#define glFogx_ARG_EXPAND GLenum pname, GLfixed param
#define glFogx_PACKED PACKED_void_GLenum_GLfixed
#define glFogx_FORMAT FORMAT_void_GLenum_GLfixed
#define glFogx_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFogx_NOT_VOID_WRAP(...) {}
#define glFogxOES_INDEX 618
#define glFogxOES_RETURN void
#define glFogxOES_ARG_NAMES pname, param
#define glFogxOES_ARG_EXPAND GLenum pname, GLfixed param
#define glFogxOES_PACKED PACKED_void_GLenum_GLfixed
#define glFogxOES_FORMAT FORMAT_void_GLenum_GLfixed
#define glFogxOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFogxOES_NOT_VOID_WRAP(...) {}
#define glFogxv_INDEX 619
#define glFogxv_RETURN void
#define glFogxv_ARG_NAMES pname, params
#define glFogxv_ARG_EXPAND GLenum pname, const GLfixed * params
#define glFogxv_PACKED PACKED_void_GLenum_const_GLfixed___GENPT__
#define glFogxv_FORMAT FORMAT_void_GLenum_const_GLfixed___GENPT__
#define glFogxv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFogxv_NOT_VOID_WRAP(...) {}
#define glFogxvOES_INDEX 620
#define glFogxvOES_RETURN void
#define glFogxvOES_ARG_NAMES pname, param
#define glFogxvOES_ARG_EXPAND GLenum pname, const GLfixed * param
#define glFogxvOES_PACKED PACKED_void_GLenum_const_GLfixed___GENPT__
#define glFogxvOES_FORMAT FORMAT_void_GLenum_const_GLfixed___GENPT__
#define glFogxvOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFogxvOES_NOT_VOID_WRAP(...) {}
#define glFragmentColorMaterialSGIX_INDEX 621
#define glFragmentColorMaterialSGIX_RETURN void
#define glFragmentColorMaterialSGIX_ARG_NAMES face, mode
#define glFragmentColorMaterialSGIX_ARG_EXPAND GLenum face, GLenum mode
#define glFragmentColorMaterialSGIX_PACKED PACKED_void_GLenum_GLenum
#define glFragmentColorMaterialSGIX_FORMAT FORMAT_void_GLenum_GLenum
#define glFragmentColorMaterialSGIX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFragmentColorMaterialSGIX_NOT_VOID_WRAP(...) {}
#define glFragmentLightModelfSGIX_INDEX 622
#define glFragmentLightModelfSGIX_RETURN void
#define glFragmentLightModelfSGIX_ARG_NAMES pname, param
#define glFragmentLightModelfSGIX_ARG_EXPAND GLenum pname, GLfloat param
#define glFragmentLightModelfSGIX_PACKED PACKED_void_GLenum_GLfloat
#define glFragmentLightModelfSGIX_FORMAT FORMAT_void_GLenum_GLfloat
#define glFragmentLightModelfSGIX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFragmentLightModelfSGIX_NOT_VOID_WRAP(...) {}
#define glFragmentLightModelfvSGIX_INDEX 623
#define glFragmentLightModelfvSGIX_RETURN void
#define glFragmentLightModelfvSGIX_ARG_NAMES pname, params
#define glFragmentLightModelfvSGIX_ARG_EXPAND GLenum pname, const GLfloat * params
#define glFragmentLightModelfvSGIX_PACKED PACKED_void_GLenum_const_GLfloat___GENPT__
#define glFragmentLightModelfvSGIX_FORMAT FORMAT_void_GLenum_const_GLfloat___GENPT__
#define glFragmentLightModelfvSGIX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFragmentLightModelfvSGIX_NOT_VOID_WRAP(...) {}
#define glFragmentLightModeliSGIX_INDEX 624
#define glFragmentLightModeliSGIX_RETURN void
#define glFragmentLightModeliSGIX_ARG_NAMES pname, param
#define glFragmentLightModeliSGIX_ARG_EXPAND GLenum pname, GLint param
#define glFragmentLightModeliSGIX_PACKED PACKED_void_GLenum_GLint
#define glFragmentLightModeliSGIX_FORMAT FORMAT_void_GLenum_GLint
#define glFragmentLightModeliSGIX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFragmentLightModeliSGIX_NOT_VOID_WRAP(...) {}
#define glFragmentLightModelivSGIX_INDEX 625
#define glFragmentLightModelivSGIX_RETURN void
#define glFragmentLightModelivSGIX_ARG_NAMES pname, params
#define glFragmentLightModelivSGIX_ARG_EXPAND GLenum pname, const GLint * params
#define glFragmentLightModelivSGIX_PACKED PACKED_void_GLenum_const_GLint___GENPT__
#define glFragmentLightModelivSGIX_FORMAT FORMAT_void_GLenum_const_GLint___GENPT__
#define glFragmentLightModelivSGIX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFragmentLightModelivSGIX_NOT_VOID_WRAP(...) {}
#define glFragmentLightfSGIX_INDEX 626
#define glFragmentLightfSGIX_RETURN void
#define glFragmentLightfSGIX_ARG_NAMES light, pname, param
#define glFragmentLightfSGIX_ARG_EXPAND GLenum light, GLenum pname, GLfloat param
#define glFragmentLightfSGIX_PACKED PACKED_void_GLenum_GLenum_GLfloat
#define glFragmentLightfSGIX_FORMAT FORMAT_void_GLenum_GLenum_GLfloat
#define glFragmentLightfSGIX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFragmentLightfSGIX_NOT_VOID_WRAP(...) {}
#define glFragmentLightfvSGIX_INDEX 627
#define glFragmentLightfvSGIX_RETURN void
#define glFragmentLightfvSGIX_ARG_NAMES light, pname, params
#define glFragmentLightfvSGIX_ARG_EXPAND GLenum light, GLenum pname, const GLfloat * params
#define glFragmentLightfvSGIX_PACKED PACKED_void_GLenum_GLenum_const_GLfloat___GENPT__
#define glFragmentLightfvSGIX_FORMAT FORMAT_void_GLenum_GLenum_const_GLfloat___GENPT__
#define glFragmentLightfvSGIX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFragmentLightfvSGIX_NOT_VOID_WRAP(...) {}
#define glFragmentLightiSGIX_INDEX 628
#define glFragmentLightiSGIX_RETURN void
#define glFragmentLightiSGIX_ARG_NAMES light, pname, param
#define glFragmentLightiSGIX_ARG_EXPAND GLenum light, GLenum pname, GLint param
#define glFragmentLightiSGIX_PACKED PACKED_void_GLenum_GLenum_GLint
#define glFragmentLightiSGIX_FORMAT FORMAT_void_GLenum_GLenum_GLint
#define glFragmentLightiSGIX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFragmentLightiSGIX_NOT_VOID_WRAP(...) {}
#define glFragmentLightivSGIX_INDEX 629
#define glFragmentLightivSGIX_RETURN void
#define glFragmentLightivSGIX_ARG_NAMES light, pname, params
#define glFragmentLightivSGIX_ARG_EXPAND GLenum light, GLenum pname, const GLint * params
#define glFragmentLightivSGIX_PACKED PACKED_void_GLenum_GLenum_const_GLint___GENPT__
#define glFragmentLightivSGIX_FORMAT FORMAT_void_GLenum_GLenum_const_GLint___GENPT__
#define glFragmentLightivSGIX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFragmentLightivSGIX_NOT_VOID_WRAP(...) {}
#define glFragmentMaterialfSGIX_INDEX 630
#define glFragmentMaterialfSGIX_RETURN void
#define glFragmentMaterialfSGIX_ARG_NAMES face, pname, param
#define glFragmentMaterialfSGIX_ARG_EXPAND GLenum face, GLenum pname, GLfloat param
#define glFragmentMaterialfSGIX_PACKED PACKED_void_GLenum_GLenum_GLfloat
#define glFragmentMaterialfSGIX_FORMAT FORMAT_void_GLenum_GLenum_GLfloat
#define glFragmentMaterialfSGIX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFragmentMaterialfSGIX_NOT_VOID_WRAP(...) {}
#define glFragmentMaterialfvSGIX_INDEX 631
#define glFragmentMaterialfvSGIX_RETURN void
#define glFragmentMaterialfvSGIX_ARG_NAMES face, pname, params
#define glFragmentMaterialfvSGIX_ARG_EXPAND GLenum face, GLenum pname, const GLfloat * params
#define glFragmentMaterialfvSGIX_PACKED PACKED_void_GLenum_GLenum_const_GLfloat___GENPT__
#define glFragmentMaterialfvSGIX_FORMAT FORMAT_void_GLenum_GLenum_const_GLfloat___GENPT__
#define glFragmentMaterialfvSGIX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFragmentMaterialfvSGIX_NOT_VOID_WRAP(...) {}
#define glFragmentMaterialiSGIX_INDEX 632
#define glFragmentMaterialiSGIX_RETURN void
#define glFragmentMaterialiSGIX_ARG_NAMES face, pname, param
#define glFragmentMaterialiSGIX_ARG_EXPAND GLenum face, GLenum pname, GLint param
#define glFragmentMaterialiSGIX_PACKED PACKED_void_GLenum_GLenum_GLint
#define glFragmentMaterialiSGIX_FORMAT FORMAT_void_GLenum_GLenum_GLint
#define glFragmentMaterialiSGIX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFragmentMaterialiSGIX_NOT_VOID_WRAP(...) {}
#define glFragmentMaterialivSGIX_INDEX 633
#define glFragmentMaterialivSGIX_RETURN void
#define glFragmentMaterialivSGIX_ARG_NAMES face, pname, params
#define glFragmentMaterialivSGIX_ARG_EXPAND GLenum face, GLenum pname, const GLint * params
#define glFragmentMaterialivSGIX_PACKED PACKED_void_GLenum_GLenum_const_GLint___GENPT__
#define glFragmentMaterialivSGIX_FORMAT FORMAT_void_GLenum_GLenum_const_GLint___GENPT__
#define glFragmentMaterialivSGIX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFragmentMaterialivSGIX_NOT_VOID_WRAP(...) {}
#define glFrameTerminatorGREMEDY_INDEX 634
#define glFrameTerminatorGREMEDY_RETURN void
#define glFrameTerminatorGREMEDY_ARG_NAMES 
#define glFrameTerminatorGREMEDY_ARG_EXPAND 
#define glFrameTerminatorGREMEDY_PACKED PACKED_void
#define glFrameTerminatorGREMEDY_FORMAT FORMAT_void
#define glFrameTerminatorGREMEDY_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFrameTerminatorGREMEDY_NOT_VOID_WRAP(...) {}
#define glFrameZoomSGIX_INDEX 635
#define glFrameZoomSGIX_RETURN void
#define glFrameZoomSGIX_ARG_NAMES factor
#define glFrameZoomSGIX_ARG_EXPAND GLint factor
#define glFrameZoomSGIX_PACKED PACKED_void_GLint
#define glFrameZoomSGIX_FORMAT FORMAT_void_GLint
#define glFrameZoomSGIX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFrameZoomSGIX_NOT_VOID_WRAP(...) {}
#define glFramebufferDrawBufferEXT_INDEX 636
#define glFramebufferDrawBufferEXT_RETURN void
#define glFramebufferDrawBufferEXT_ARG_NAMES framebuffer, mode
#define glFramebufferDrawBufferEXT_ARG_EXPAND GLuint framebuffer, GLenum mode
#define glFramebufferDrawBufferEXT_PACKED PACKED_void_GLuint_GLenum
#define glFramebufferDrawBufferEXT_FORMAT FORMAT_void_GLuint_GLenum
#define glFramebufferDrawBufferEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFramebufferDrawBufferEXT_NOT_VOID_WRAP(...) {}
#define glFramebufferDrawBuffersEXT_INDEX 637
#define glFramebufferDrawBuffersEXT_RETURN void
#define glFramebufferDrawBuffersEXT_ARG_NAMES framebuffer, n, bufs
#define glFramebufferDrawBuffersEXT_ARG_EXPAND GLuint framebuffer, GLsizei n, const GLenum * bufs
#define glFramebufferDrawBuffersEXT_PACKED PACKED_void_GLuint_GLsizei_const_GLenum___GENPT__
#define glFramebufferDrawBuffersEXT_FORMAT FORMAT_void_GLuint_GLsizei_const_GLenum___GENPT__
#define glFramebufferDrawBuffersEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFramebufferDrawBuffersEXT_NOT_VOID_WRAP(...) {}
#define glFramebufferParameteri_INDEX 638
#define glFramebufferParameteri_RETURN void
#define glFramebufferParameteri_ARG_NAMES target, pname, param
#define glFramebufferParameteri_ARG_EXPAND GLenum target, GLenum pname, GLint param
#define glFramebufferParameteri_PACKED PACKED_void_GLenum_GLenum_GLint
#define glFramebufferParameteri_FORMAT FORMAT_void_GLenum_GLenum_GLint
#define glFramebufferParameteri_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFramebufferParameteri_NOT_VOID_WRAP(...) {}
#define glFramebufferReadBufferEXT_INDEX 639
#define glFramebufferReadBufferEXT_RETURN void
#define glFramebufferReadBufferEXT_ARG_NAMES framebuffer, mode
#define glFramebufferReadBufferEXT_ARG_EXPAND GLuint framebuffer, GLenum mode
#define glFramebufferReadBufferEXT_PACKED PACKED_void_GLuint_GLenum
#define glFramebufferReadBufferEXT_FORMAT FORMAT_void_GLuint_GLenum
#define glFramebufferReadBufferEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFramebufferReadBufferEXT_NOT_VOID_WRAP(...) {}
#define glFramebufferRenderbuffer_INDEX 640
#define glFramebufferRenderbuffer_RETURN void
#define glFramebufferRenderbuffer_ARG_NAMES target, attachment, renderbuffertarget, renderbuffer
#define glFramebufferRenderbuffer_ARG_EXPAND GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer
#define glFramebufferRenderbuffer_PACKED PACKED_void_GLenum_GLenum_GLenum_GLuint
#define glFramebufferRenderbuffer_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLuint
#define glFramebufferRenderbuffer_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFramebufferRenderbuffer_NOT_VOID_WRAP(...) {}
#define glFramebufferRenderbufferEXT_INDEX 641
#define glFramebufferRenderbufferEXT_RETURN void
#define glFramebufferRenderbufferEXT_ARG_NAMES target, attachment, renderbuffertarget, renderbuffer
#define glFramebufferRenderbufferEXT_ARG_EXPAND GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer
#define glFramebufferRenderbufferEXT_PACKED PACKED_void_GLenum_GLenum_GLenum_GLuint
#define glFramebufferRenderbufferEXT_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLuint
#define glFramebufferRenderbufferEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFramebufferRenderbufferEXT_NOT_VOID_WRAP(...) {}
#define glFramebufferTexture_INDEX 642
#define glFramebufferTexture_RETURN void
#define glFramebufferTexture_ARG_NAMES target, attachment, texture, level
#define glFramebufferTexture_ARG_EXPAND GLenum target, GLenum attachment, GLuint texture, GLint level
#define glFramebufferTexture_PACKED PACKED_void_GLenum_GLenum_GLuint_GLint
#define glFramebufferTexture_FORMAT FORMAT_void_GLenum_GLenum_GLuint_GLint
#define glFramebufferTexture_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFramebufferTexture_NOT_VOID_WRAP(...) {}
#define glFramebufferTexture1D_INDEX 643
#define glFramebufferTexture1D_RETURN void
#define glFramebufferTexture1D_ARG_NAMES target, attachment, textarget, texture, level
#define glFramebufferTexture1D_ARG_EXPAND GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level
#define glFramebufferTexture1D_PACKED PACKED_void_GLenum_GLenum_GLenum_GLuint_GLint
#define glFramebufferTexture1D_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLuint_GLint
#define glFramebufferTexture1D_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFramebufferTexture1D_NOT_VOID_WRAP(...) {}
#define glFramebufferTexture1DEXT_INDEX 644
#define glFramebufferTexture1DEXT_RETURN void
#define glFramebufferTexture1DEXT_ARG_NAMES target, attachment, textarget, texture, level
#define glFramebufferTexture1DEXT_ARG_EXPAND GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level
#define glFramebufferTexture1DEXT_PACKED PACKED_void_GLenum_GLenum_GLenum_GLuint_GLint
#define glFramebufferTexture1DEXT_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLuint_GLint
#define glFramebufferTexture1DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFramebufferTexture1DEXT_NOT_VOID_WRAP(...) {}
#define glFramebufferTexture2D_INDEX 645
#define glFramebufferTexture2D_RETURN void
#define glFramebufferTexture2D_ARG_NAMES target, attachment, textarget, texture, level
#define glFramebufferTexture2D_ARG_EXPAND GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level
#define glFramebufferTexture2D_PACKED PACKED_void_GLenum_GLenum_GLenum_GLuint_GLint
#define glFramebufferTexture2D_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLuint_GLint
#define glFramebufferTexture2D_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFramebufferTexture2D_NOT_VOID_WRAP(...) {}
#define glFramebufferTexture2DEXT_INDEX 646
#define glFramebufferTexture2DEXT_RETURN void
#define glFramebufferTexture2DEXT_ARG_NAMES target, attachment, textarget, texture, level
#define glFramebufferTexture2DEXT_ARG_EXPAND GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level
#define glFramebufferTexture2DEXT_PACKED PACKED_void_GLenum_GLenum_GLenum_GLuint_GLint
#define glFramebufferTexture2DEXT_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLuint_GLint
#define glFramebufferTexture2DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFramebufferTexture2DEXT_NOT_VOID_WRAP(...) {}
#define glFramebufferTexture3D_INDEX 647
#define glFramebufferTexture3D_RETURN void
#define glFramebufferTexture3D_ARG_NAMES target, attachment, textarget, texture, level, zoffset
#define glFramebufferTexture3D_ARG_EXPAND GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset
#define glFramebufferTexture3D_PACKED PACKED_void_GLenum_GLenum_GLenum_GLuint_GLint_GLint
#define glFramebufferTexture3D_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLuint_GLint_GLint
#define glFramebufferTexture3D_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFramebufferTexture3D_NOT_VOID_WRAP(...) {}
#define glFramebufferTexture3DEXT_INDEX 648
#define glFramebufferTexture3DEXT_RETURN void
#define glFramebufferTexture3DEXT_ARG_NAMES target, attachment, textarget, texture, level, zoffset
#define glFramebufferTexture3DEXT_ARG_EXPAND GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset
#define glFramebufferTexture3DEXT_PACKED PACKED_void_GLenum_GLenum_GLenum_GLuint_GLint_GLint
#define glFramebufferTexture3DEXT_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLuint_GLint_GLint
#define glFramebufferTexture3DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFramebufferTexture3DEXT_NOT_VOID_WRAP(...) {}
#define glFramebufferTextureARB_INDEX 649
#define glFramebufferTextureARB_RETURN void
#define glFramebufferTextureARB_ARG_NAMES target, attachment, texture, level
#define glFramebufferTextureARB_ARG_EXPAND GLenum target, GLenum attachment, GLuint texture, GLint level
#define glFramebufferTextureARB_PACKED PACKED_void_GLenum_GLenum_GLuint_GLint
#define glFramebufferTextureARB_FORMAT FORMAT_void_GLenum_GLenum_GLuint_GLint
#define glFramebufferTextureARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFramebufferTextureARB_NOT_VOID_WRAP(...) {}
#define glFramebufferTextureEXT_INDEX 650
#define glFramebufferTextureEXT_RETURN void
#define glFramebufferTextureEXT_ARG_NAMES target, attachment, texture, level
#define glFramebufferTextureEXT_ARG_EXPAND GLenum target, GLenum attachment, GLuint texture, GLint level
#define glFramebufferTextureEXT_PACKED PACKED_void_GLenum_GLenum_GLuint_GLint
#define glFramebufferTextureEXT_FORMAT FORMAT_void_GLenum_GLenum_GLuint_GLint
#define glFramebufferTextureEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFramebufferTextureEXT_NOT_VOID_WRAP(...) {}
#define glFramebufferTextureFaceARB_INDEX 651
#define glFramebufferTextureFaceARB_RETURN void
#define glFramebufferTextureFaceARB_ARG_NAMES target, attachment, texture, level, face
#define glFramebufferTextureFaceARB_ARG_EXPAND GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face
#define glFramebufferTextureFaceARB_PACKED PACKED_void_GLenum_GLenum_GLuint_GLint_GLenum
#define glFramebufferTextureFaceARB_FORMAT FORMAT_void_GLenum_GLenum_GLuint_GLint_GLenum
#define glFramebufferTextureFaceARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFramebufferTextureFaceARB_NOT_VOID_WRAP(...) {}
#define glFramebufferTextureFaceEXT_INDEX 652
#define glFramebufferTextureFaceEXT_RETURN void
#define glFramebufferTextureFaceEXT_ARG_NAMES target, attachment, texture, level, face
#define glFramebufferTextureFaceEXT_ARG_EXPAND GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face
#define glFramebufferTextureFaceEXT_PACKED PACKED_void_GLenum_GLenum_GLuint_GLint_GLenum
#define glFramebufferTextureFaceEXT_FORMAT FORMAT_void_GLenum_GLenum_GLuint_GLint_GLenum
#define glFramebufferTextureFaceEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFramebufferTextureFaceEXT_NOT_VOID_WRAP(...) {}
#define glFramebufferTextureLayer_INDEX 653
#define glFramebufferTextureLayer_RETURN void
#define glFramebufferTextureLayer_ARG_NAMES target, attachment, texture, level, layer
#define glFramebufferTextureLayer_ARG_EXPAND GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer
#define glFramebufferTextureLayer_PACKED PACKED_void_GLenum_GLenum_GLuint_GLint_GLint
#define glFramebufferTextureLayer_FORMAT FORMAT_void_GLenum_GLenum_GLuint_GLint_GLint
#define glFramebufferTextureLayer_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFramebufferTextureLayer_NOT_VOID_WRAP(...) {}
#define glFramebufferTextureLayerARB_INDEX 654
#define glFramebufferTextureLayerARB_RETURN void
#define glFramebufferTextureLayerARB_ARG_NAMES target, attachment, texture, level, layer
#define glFramebufferTextureLayerARB_ARG_EXPAND GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer
#define glFramebufferTextureLayerARB_PACKED PACKED_void_GLenum_GLenum_GLuint_GLint_GLint
#define glFramebufferTextureLayerARB_FORMAT FORMAT_void_GLenum_GLenum_GLuint_GLint_GLint
#define glFramebufferTextureLayerARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFramebufferTextureLayerARB_NOT_VOID_WRAP(...) {}
#define glFramebufferTextureLayerEXT_INDEX 655
#define glFramebufferTextureLayerEXT_RETURN void
#define glFramebufferTextureLayerEXT_ARG_NAMES target, attachment, texture, level, layer
#define glFramebufferTextureLayerEXT_ARG_EXPAND GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer
#define glFramebufferTextureLayerEXT_PACKED PACKED_void_GLenum_GLenum_GLuint_GLint_GLint
#define glFramebufferTextureLayerEXT_FORMAT FORMAT_void_GLenum_GLenum_GLuint_GLint_GLint
#define glFramebufferTextureLayerEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFramebufferTextureLayerEXT_NOT_VOID_WRAP(...) {}
#define glFreeObjectBufferATI_INDEX 656
#define glFreeObjectBufferATI_RETURN void
#define glFreeObjectBufferATI_ARG_NAMES buffer
#define glFreeObjectBufferATI_ARG_EXPAND GLuint buffer
#define glFreeObjectBufferATI_PACKED PACKED_void_GLuint
#define glFreeObjectBufferATI_FORMAT FORMAT_void_GLuint
#define glFreeObjectBufferATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFreeObjectBufferATI_NOT_VOID_WRAP(...) {}
#define glFrontFace_INDEX 657
#define glFrontFace_RETURN void
#define glFrontFace_ARG_NAMES mode
#define glFrontFace_ARG_EXPAND GLenum mode
#define glFrontFace_PACKED PACKED_void_GLenum
#define glFrontFace_FORMAT FORMAT_void_GLenum
#define glFrontFace_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFrontFace_NOT_VOID_WRAP(...) {}
#define glFrustum_INDEX 658
#define glFrustum_RETURN void
#define glFrustum_ARG_NAMES left, right, bottom, top, zNear, zFar
#define glFrustum_ARG_EXPAND GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar
#define glFrustum_PACKED PACKED_void_GLdouble_GLdouble_GLdouble_GLdouble_GLdouble_GLdouble
#define glFrustum_FORMAT FORMAT_void_GLdouble_GLdouble_GLdouble_GLdouble_GLdouble_GLdouble
#define glFrustum_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFrustum_NOT_VOID_WRAP(...) {}
#define glFrustumf_INDEX 659
#define glFrustumf_RETURN void
#define glFrustumf_ARG_NAMES left, right, bottom, top, near, far
#define glFrustumf_ARG_EXPAND GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat near, GLfloat far
#define glFrustumf_PACKED PACKED_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat
#define glFrustumf_FORMAT FORMAT_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat
#define glFrustumf_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFrustumf_NOT_VOID_WRAP(...) {}
#define glFrustumfOES_INDEX 660
#define glFrustumfOES_RETURN void
#define glFrustumfOES_ARG_NAMES l, r, b, t, n, f
#define glFrustumfOES_ARG_EXPAND GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f
#define glFrustumfOES_PACKED PACKED_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat
#define glFrustumfOES_FORMAT FORMAT_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat
#define glFrustumfOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFrustumfOES_NOT_VOID_WRAP(...) {}
#define glFrustumx_INDEX 661
#define glFrustumx_RETURN void
#define glFrustumx_ARG_NAMES left, right, bottom, top, near, far
#define glFrustumx_ARG_EXPAND GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed near, GLfixed far
#define glFrustumx_PACKED PACKED_void_GLfixed_GLfixed_GLfixed_GLfixed_GLfixed_GLfixed
#define glFrustumx_FORMAT FORMAT_void_GLfixed_GLfixed_GLfixed_GLfixed_GLfixed_GLfixed
#define glFrustumx_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFrustumx_NOT_VOID_WRAP(...) {}
#define glFrustumxOES_INDEX 662
#define glFrustumxOES_RETURN void
#define glFrustumxOES_ARG_NAMES l, r, b, t, n, f
#define glFrustumxOES_ARG_EXPAND GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f
#define glFrustumxOES_PACKED PACKED_void_GLfixed_GLfixed_GLfixed_GLfixed_GLfixed_GLfixed
#define glFrustumxOES_FORMAT FORMAT_void_GLfixed_GLfixed_GLfixed_GLfixed_GLfixed_GLfixed
#define glFrustumxOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glFrustumxOES_NOT_VOID_WRAP(...) {}
#define glGenAsyncMarkersSGIX_INDEX 663
#define glGenAsyncMarkersSGIX_RETURN GLuint
#define glGenAsyncMarkersSGIX_ARG_NAMES range
#define glGenAsyncMarkersSGIX_ARG_EXPAND GLsizei range
#define glGenAsyncMarkersSGIX_PACKED PACKED_GLuint_GLsizei
#define glGenAsyncMarkersSGIX_FORMAT FORMAT_GLuint_GLsizei
#define glGenAsyncMarkersSGIX_VOID_ONLY_WRAP(...) {}
#define glGenAsyncMarkersSGIX_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glGenBuffers_INDEX 664
#define glGenBuffers_RETURN void
#define glGenBuffers_ARG_NAMES n, buffers
#define glGenBuffers_ARG_EXPAND GLsizei n, GLuint * buffers
#define glGenBuffers_PACKED PACKED_void_GLsizei_GLuint___GENPT__
#define glGenBuffers_FORMAT FORMAT_void_GLsizei_GLuint___GENPT__
#define glGenBuffers_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGenBuffers_NOT_VOID_WRAP(...) {}
#define glGenBuffersARB_INDEX 665
#define glGenBuffersARB_RETURN void
#define glGenBuffersARB_ARG_NAMES n, buffers
#define glGenBuffersARB_ARG_EXPAND GLsizei n, GLuint * buffers
#define glGenBuffersARB_PACKED PACKED_void_GLsizei_GLuint___GENPT__
#define glGenBuffersARB_FORMAT FORMAT_void_GLsizei_GLuint___GENPT__
#define glGenBuffersARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGenBuffersARB_NOT_VOID_WRAP(...) {}
#define glGenFencesAPPLE_INDEX 666
#define glGenFencesAPPLE_RETURN void
#define glGenFencesAPPLE_ARG_NAMES n, fences
#define glGenFencesAPPLE_ARG_EXPAND GLsizei n, GLuint * fences
#define glGenFencesAPPLE_PACKED PACKED_void_GLsizei_GLuint___GENPT__
#define glGenFencesAPPLE_FORMAT FORMAT_void_GLsizei_GLuint___GENPT__
#define glGenFencesAPPLE_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGenFencesAPPLE_NOT_VOID_WRAP(...) {}
#define glGenFencesNV_INDEX 667
#define glGenFencesNV_RETURN void
#define glGenFencesNV_ARG_NAMES n, fences
#define glGenFencesNV_ARG_EXPAND GLsizei n, GLuint * fences
#define glGenFencesNV_PACKED PACKED_void_GLsizei_GLuint___GENPT__
#define glGenFencesNV_FORMAT FORMAT_void_GLsizei_GLuint___GENPT__
#define glGenFencesNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGenFencesNV_NOT_VOID_WRAP(...) {}
#define glGenFragmentShadersATI_INDEX 668
#define glGenFragmentShadersATI_RETURN GLuint
#define glGenFragmentShadersATI_ARG_NAMES range
#define glGenFragmentShadersATI_ARG_EXPAND GLuint range
#define glGenFragmentShadersATI_PACKED PACKED_GLuint_GLuint
#define glGenFragmentShadersATI_FORMAT FORMAT_GLuint_GLuint
#define glGenFragmentShadersATI_VOID_ONLY_WRAP(...) {}
#define glGenFragmentShadersATI_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glGenFramebuffers_INDEX 669
#define glGenFramebuffers_RETURN void
#define glGenFramebuffers_ARG_NAMES n, framebuffers
#define glGenFramebuffers_ARG_EXPAND GLsizei n, GLuint * framebuffers
#define glGenFramebuffers_PACKED PACKED_void_GLsizei_GLuint___GENPT__
#define glGenFramebuffers_FORMAT FORMAT_void_GLsizei_GLuint___GENPT__
#define glGenFramebuffers_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGenFramebuffers_NOT_VOID_WRAP(...) {}
#define glGenFramebuffersEXT_INDEX 670
#define glGenFramebuffersEXT_RETURN void
#define glGenFramebuffersEXT_ARG_NAMES n, framebuffers
#define glGenFramebuffersEXT_ARG_EXPAND GLsizei n, GLuint * framebuffers
#define glGenFramebuffersEXT_PACKED PACKED_void_GLsizei_GLuint___GENPT__
#define glGenFramebuffersEXT_FORMAT FORMAT_void_GLsizei_GLuint___GENPT__
#define glGenFramebuffersEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGenFramebuffersEXT_NOT_VOID_WRAP(...) {}
#define glGenLists_INDEX 671
#define glGenLists_RETURN GLuint
#define glGenLists_ARG_NAMES range
#define glGenLists_ARG_EXPAND GLsizei range
#define glGenLists_PACKED PACKED_GLuint_GLsizei
#define glGenLists_FORMAT FORMAT_GLuint_GLsizei
#define glGenLists_VOID_ONLY_WRAP(...) {}
#define glGenLists_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glGenNamesAMD_INDEX 672
#define glGenNamesAMD_RETURN void
#define glGenNamesAMD_ARG_NAMES identifier, num, names
#define glGenNamesAMD_ARG_EXPAND GLenum identifier, GLuint num, GLuint * names
#define glGenNamesAMD_PACKED PACKED_void_GLenum_GLuint_GLuint___GENPT__
#define glGenNamesAMD_FORMAT FORMAT_void_GLenum_GLuint_GLuint___GENPT__
#define glGenNamesAMD_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGenNamesAMD_NOT_VOID_WRAP(...) {}
#define glGenOcclusionQueriesNV_INDEX 673
#define glGenOcclusionQueriesNV_RETURN void
#define glGenOcclusionQueriesNV_ARG_NAMES n, ids
#define glGenOcclusionQueriesNV_ARG_EXPAND GLsizei n, GLuint * ids
#define glGenOcclusionQueriesNV_PACKED PACKED_void_GLsizei_GLuint___GENPT__
#define glGenOcclusionQueriesNV_FORMAT FORMAT_void_GLsizei_GLuint___GENPT__
#define glGenOcclusionQueriesNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGenOcclusionQueriesNV_NOT_VOID_WRAP(...) {}
#define glGenPathsNV_INDEX 674
#define glGenPathsNV_RETURN GLuint
#define glGenPathsNV_ARG_NAMES range
#define glGenPathsNV_ARG_EXPAND GLsizei range
#define glGenPathsNV_PACKED PACKED_GLuint_GLsizei
#define glGenPathsNV_FORMAT FORMAT_GLuint_GLsizei
#define glGenPathsNV_VOID_ONLY_WRAP(...) {}
#define glGenPathsNV_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glGenPerfMonitorsAMD_INDEX 675
#define glGenPerfMonitorsAMD_RETURN void
#define glGenPerfMonitorsAMD_ARG_NAMES n, monitors
#define glGenPerfMonitorsAMD_ARG_EXPAND GLsizei n, GLuint * monitors
#define glGenPerfMonitorsAMD_PACKED PACKED_void_GLsizei_GLuint___GENPT__
#define glGenPerfMonitorsAMD_FORMAT FORMAT_void_GLsizei_GLuint___GENPT__
#define glGenPerfMonitorsAMD_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGenPerfMonitorsAMD_NOT_VOID_WRAP(...) {}
#define glGenProgramPipelines_INDEX 676
#define glGenProgramPipelines_RETURN void
#define glGenProgramPipelines_ARG_NAMES n, pipelines
#define glGenProgramPipelines_ARG_EXPAND GLsizei n, GLuint * pipelines
#define glGenProgramPipelines_PACKED PACKED_void_GLsizei_GLuint___GENPT__
#define glGenProgramPipelines_FORMAT FORMAT_void_GLsizei_GLuint___GENPT__
#define glGenProgramPipelines_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGenProgramPipelines_NOT_VOID_WRAP(...) {}
#define glGenProgramsARB_INDEX 677
#define glGenProgramsARB_RETURN void
#define glGenProgramsARB_ARG_NAMES n, programs
#define glGenProgramsARB_ARG_EXPAND GLsizei n, GLuint * programs
#define glGenProgramsARB_PACKED PACKED_void_GLsizei_GLuint___GENPT__
#define glGenProgramsARB_FORMAT FORMAT_void_GLsizei_GLuint___GENPT__
#define glGenProgramsARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGenProgramsARB_NOT_VOID_WRAP(...) {}
#define glGenProgramsNV_INDEX 678
#define glGenProgramsNV_RETURN void
#define glGenProgramsNV_ARG_NAMES n, programs
#define glGenProgramsNV_ARG_EXPAND GLsizei n, GLuint * programs
#define glGenProgramsNV_PACKED PACKED_void_GLsizei_GLuint___GENPT__
#define glGenProgramsNV_FORMAT FORMAT_void_GLsizei_GLuint___GENPT__
#define glGenProgramsNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGenProgramsNV_NOT_VOID_WRAP(...) {}
#define glGenQueries_INDEX 679
#define glGenQueries_RETURN void
#define glGenQueries_ARG_NAMES n, ids
#define glGenQueries_ARG_EXPAND GLsizei n, GLuint * ids
#define glGenQueries_PACKED PACKED_void_GLsizei_GLuint___GENPT__
#define glGenQueries_FORMAT FORMAT_void_GLsizei_GLuint___GENPT__
#define glGenQueries_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGenQueries_NOT_VOID_WRAP(...) {}
#define glGenQueriesARB_INDEX 680
#define glGenQueriesARB_RETURN void
#define glGenQueriesARB_ARG_NAMES n, ids
#define glGenQueriesARB_ARG_EXPAND GLsizei n, GLuint * ids
#define glGenQueriesARB_PACKED PACKED_void_GLsizei_GLuint___GENPT__
#define glGenQueriesARB_FORMAT FORMAT_void_GLsizei_GLuint___GENPT__
#define glGenQueriesARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGenQueriesARB_NOT_VOID_WRAP(...) {}
#define glGenRenderbuffers_INDEX 681
#define glGenRenderbuffers_RETURN void
#define glGenRenderbuffers_ARG_NAMES n, renderbuffers
#define glGenRenderbuffers_ARG_EXPAND GLsizei n, GLuint * renderbuffers
#define glGenRenderbuffers_PACKED PACKED_void_GLsizei_GLuint___GENPT__
#define glGenRenderbuffers_FORMAT FORMAT_void_GLsizei_GLuint___GENPT__
#define glGenRenderbuffers_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGenRenderbuffers_NOT_VOID_WRAP(...) {}
#define glGenRenderbuffersEXT_INDEX 682
#define glGenRenderbuffersEXT_RETURN void
#define glGenRenderbuffersEXT_ARG_NAMES n, renderbuffers
#define glGenRenderbuffersEXT_ARG_EXPAND GLsizei n, GLuint * renderbuffers
#define glGenRenderbuffersEXT_PACKED PACKED_void_GLsizei_GLuint___GENPT__
#define glGenRenderbuffersEXT_FORMAT FORMAT_void_GLsizei_GLuint___GENPT__
#define glGenRenderbuffersEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGenRenderbuffersEXT_NOT_VOID_WRAP(...) {}
#define glGenSamplers_INDEX 683
#define glGenSamplers_RETURN void
#define glGenSamplers_ARG_NAMES count, samplers
#define glGenSamplers_ARG_EXPAND GLsizei count, GLuint * samplers
#define glGenSamplers_PACKED PACKED_void_GLsizei_GLuint___GENPT__
#define glGenSamplers_FORMAT FORMAT_void_GLsizei_GLuint___GENPT__
#define glGenSamplers_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGenSamplers_NOT_VOID_WRAP(...) {}
#define glGenSymbolsEXT_INDEX 684
#define glGenSymbolsEXT_RETURN GLuint
#define glGenSymbolsEXT_ARG_NAMES datatype, storagetype, range, components
#define glGenSymbolsEXT_ARG_EXPAND GLenum datatype, GLenum storagetype, GLenum range, GLuint components
#define glGenSymbolsEXT_PACKED PACKED_GLuint_GLenum_GLenum_GLenum_GLuint
#define glGenSymbolsEXT_FORMAT FORMAT_GLuint_GLenum_GLenum_GLenum_GLuint
#define glGenSymbolsEXT_VOID_ONLY_WRAP(...) {}
#define glGenSymbolsEXT_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glGenTextures_INDEX 685
#define glGenTextures_RETURN void
#define glGenTextures_ARG_NAMES n, textures
#define glGenTextures_ARG_EXPAND GLsizei n, GLuint * textures
#define glGenTextures_PACKED PACKED_void_GLsizei_GLuint___GENPT__
#define glGenTextures_FORMAT FORMAT_void_GLsizei_GLuint___GENPT__
#define glGenTextures_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGenTextures_NOT_VOID_WRAP(...) {}
#define glGenTexturesEXT_INDEX 686
#define glGenTexturesEXT_RETURN void
#define glGenTexturesEXT_ARG_NAMES n, textures
#define glGenTexturesEXT_ARG_EXPAND GLsizei n, GLuint * textures
#define glGenTexturesEXT_PACKED PACKED_void_GLsizei_GLuint___GENPT__
#define glGenTexturesEXT_FORMAT FORMAT_void_GLsizei_GLuint___GENPT__
#define glGenTexturesEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGenTexturesEXT_NOT_VOID_WRAP(...) {}
#define glGenTransformFeedbacks_INDEX 687
#define glGenTransformFeedbacks_RETURN void
#define glGenTransformFeedbacks_ARG_NAMES n, ids
#define glGenTransformFeedbacks_ARG_EXPAND GLsizei n, GLuint * ids
#define glGenTransformFeedbacks_PACKED PACKED_void_GLsizei_GLuint___GENPT__
#define glGenTransformFeedbacks_FORMAT FORMAT_void_GLsizei_GLuint___GENPT__
#define glGenTransformFeedbacks_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGenTransformFeedbacks_NOT_VOID_WRAP(...) {}
#define glGenTransformFeedbacksNV_INDEX 688
#define glGenTransformFeedbacksNV_RETURN void
#define glGenTransformFeedbacksNV_ARG_NAMES n, ids
#define glGenTransformFeedbacksNV_ARG_EXPAND GLsizei n, GLuint * ids
#define glGenTransformFeedbacksNV_PACKED PACKED_void_GLsizei_GLuint___GENPT__
#define glGenTransformFeedbacksNV_FORMAT FORMAT_void_GLsizei_GLuint___GENPT__
#define glGenTransformFeedbacksNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGenTransformFeedbacksNV_NOT_VOID_WRAP(...) {}
#define glGenVertexArrays_INDEX 689
#define glGenVertexArrays_RETURN void
#define glGenVertexArrays_ARG_NAMES n, arrays
#define glGenVertexArrays_ARG_EXPAND GLsizei n, GLuint * arrays
#define glGenVertexArrays_PACKED PACKED_void_GLsizei_GLuint___GENPT__
#define glGenVertexArrays_FORMAT FORMAT_void_GLsizei_GLuint___GENPT__
#define glGenVertexArrays_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGenVertexArrays_NOT_VOID_WRAP(...) {}
#define glGenVertexArraysAPPLE_INDEX 690
#define glGenVertexArraysAPPLE_RETURN void
#define glGenVertexArraysAPPLE_ARG_NAMES n, arrays
#define glGenVertexArraysAPPLE_ARG_EXPAND GLsizei n, GLuint * arrays
#define glGenVertexArraysAPPLE_PACKED PACKED_void_GLsizei_GLuint___GENPT__
#define glGenVertexArraysAPPLE_FORMAT FORMAT_void_GLsizei_GLuint___GENPT__
#define glGenVertexArraysAPPLE_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGenVertexArraysAPPLE_NOT_VOID_WRAP(...) {}
#define glGenVertexShadersEXT_INDEX 691
#define glGenVertexShadersEXT_RETURN GLuint
#define glGenVertexShadersEXT_ARG_NAMES range
#define glGenVertexShadersEXT_ARG_EXPAND GLuint range
#define glGenVertexShadersEXT_PACKED PACKED_GLuint_GLuint
#define glGenVertexShadersEXT_FORMAT FORMAT_GLuint_GLuint
#define glGenVertexShadersEXT_VOID_ONLY_WRAP(...) {}
#define glGenVertexShadersEXT_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glGenerateMipmap_INDEX 692
#define glGenerateMipmap_RETURN void
#define glGenerateMipmap_ARG_NAMES target
#define glGenerateMipmap_ARG_EXPAND GLenum target
#define glGenerateMipmap_PACKED PACKED_void_GLenum
#define glGenerateMipmap_FORMAT FORMAT_void_GLenum
#define glGenerateMipmap_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGenerateMipmap_NOT_VOID_WRAP(...) {}
#define glGenerateMipmapEXT_INDEX 693
#define glGenerateMipmapEXT_RETURN void
#define glGenerateMipmapEXT_ARG_NAMES target
#define glGenerateMipmapEXT_ARG_EXPAND GLenum target
#define glGenerateMipmapEXT_PACKED PACKED_void_GLenum
#define glGenerateMipmapEXT_FORMAT FORMAT_void_GLenum
#define glGenerateMipmapEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGenerateMipmapEXT_NOT_VOID_WRAP(...) {}
#define glGenerateMultiTexMipmapEXT_INDEX 694
#define glGenerateMultiTexMipmapEXT_RETURN void
#define glGenerateMultiTexMipmapEXT_ARG_NAMES texunit, target
#define glGenerateMultiTexMipmapEXT_ARG_EXPAND GLenum texunit, GLenum target
#define glGenerateMultiTexMipmapEXT_PACKED PACKED_void_GLenum_GLenum
#define glGenerateMultiTexMipmapEXT_FORMAT FORMAT_void_GLenum_GLenum
#define glGenerateMultiTexMipmapEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGenerateMultiTexMipmapEXT_NOT_VOID_WRAP(...) {}
#define glGenerateTextureMipmapEXT_INDEX 695
#define glGenerateTextureMipmapEXT_RETURN void
#define glGenerateTextureMipmapEXT_ARG_NAMES texture, target
#define glGenerateTextureMipmapEXT_ARG_EXPAND GLuint texture, GLenum target
#define glGenerateTextureMipmapEXT_PACKED PACKED_void_GLuint_GLenum
#define glGenerateTextureMipmapEXT_FORMAT FORMAT_void_GLuint_GLenum
#define glGenerateTextureMipmapEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGenerateTextureMipmapEXT_NOT_VOID_WRAP(...) {}
#define glGetActiveAtomicCounterBufferiv_INDEX 696
#define glGetActiveAtomicCounterBufferiv_RETURN void
#define glGetActiveAtomicCounterBufferiv_ARG_NAMES program, bufferIndex, pname, params
#define glGetActiveAtomicCounterBufferiv_ARG_EXPAND GLuint program, GLuint bufferIndex, GLenum pname, GLint * params
#define glGetActiveAtomicCounterBufferiv_PACKED PACKED_void_GLuint_GLuint_GLenum_GLint___GENPT__
#define glGetActiveAtomicCounterBufferiv_FORMAT FORMAT_void_GLuint_GLuint_GLenum_GLint___GENPT__
#define glGetActiveAtomicCounterBufferiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetActiveAtomicCounterBufferiv_NOT_VOID_WRAP(...) {}
#define glGetActiveAttrib_INDEX 697
#define glGetActiveAttrib_RETURN void
#define glGetActiveAttrib_ARG_NAMES program, index, bufSize, length, size, type, name
#define glGetActiveAttrib_ARG_EXPAND GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name
#define glGetActiveAttrib_PACKED PACKED_void_GLuint_GLuint_GLsizei_GLsizei___GENPT___GLint___GENPT___GLenum___GENPT___GLchar___GENPT__
#define glGetActiveAttrib_FORMAT FORMAT_void_GLuint_GLuint_GLsizei_GLsizei___GENPT___GLint___GENPT___GLenum___GENPT___GLchar___GENPT__
#define glGetActiveAttrib_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetActiveAttrib_NOT_VOID_WRAP(...) {}
#define glGetActiveAttribARB_INDEX 698
#define glGetActiveAttribARB_RETURN void
#define glGetActiveAttribARB_ARG_NAMES programObj, index, maxLength, length, size, type, name
#define glGetActiveAttribARB_ARG_EXPAND GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name
#define glGetActiveAttribARB_PACKED PACKED_void_GLhandleARB_GLuint_GLsizei_GLsizei___GENPT___GLint___GENPT___GLenum___GENPT___GLcharARB___GENPT__
#define glGetActiveAttribARB_FORMAT FORMAT_void_GLhandleARB_GLuint_GLsizei_GLsizei___GENPT___GLint___GENPT___GLenum___GENPT___GLcharARB___GENPT__
#define glGetActiveAttribARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetActiveAttribARB_NOT_VOID_WRAP(...) {}
#define glGetActiveSubroutineName_INDEX 699
#define glGetActiveSubroutineName_RETURN void
#define glGetActiveSubroutineName_ARG_NAMES program, shadertype, index, bufsize, length, name
#define glGetActiveSubroutineName_ARG_EXPAND GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei * length, GLchar * name
#define glGetActiveSubroutineName_PACKED PACKED_void_GLuint_GLenum_GLuint_GLsizei_GLsizei___GENPT___GLchar___GENPT__
#define glGetActiveSubroutineName_FORMAT FORMAT_void_GLuint_GLenum_GLuint_GLsizei_GLsizei___GENPT___GLchar___GENPT__
#define glGetActiveSubroutineName_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetActiveSubroutineName_NOT_VOID_WRAP(...) {}
#define glGetActiveSubroutineUniformName_INDEX 700
#define glGetActiveSubroutineUniformName_RETURN void
#define glGetActiveSubroutineUniformName_ARG_NAMES program, shadertype, index, bufsize, length, name
#define glGetActiveSubroutineUniformName_ARG_EXPAND GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei * length, GLchar * name
#define glGetActiveSubroutineUniformName_PACKED PACKED_void_GLuint_GLenum_GLuint_GLsizei_GLsizei___GENPT___GLchar___GENPT__
#define glGetActiveSubroutineUniformName_FORMAT FORMAT_void_GLuint_GLenum_GLuint_GLsizei_GLsizei___GENPT___GLchar___GENPT__
#define glGetActiveSubroutineUniformName_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetActiveSubroutineUniformName_NOT_VOID_WRAP(...) {}
#define glGetActiveSubroutineUniformiv_INDEX 701
#define glGetActiveSubroutineUniformiv_RETURN void
#define glGetActiveSubroutineUniformiv_ARG_NAMES program, shadertype, index, pname, values
#define glGetActiveSubroutineUniformiv_ARG_EXPAND GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint * values
#define glGetActiveSubroutineUniformiv_PACKED PACKED_void_GLuint_GLenum_GLuint_GLenum_GLint___GENPT__
#define glGetActiveSubroutineUniformiv_FORMAT FORMAT_void_GLuint_GLenum_GLuint_GLenum_GLint___GENPT__
#define glGetActiveSubroutineUniformiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetActiveSubroutineUniformiv_NOT_VOID_WRAP(...) {}
#define glGetActiveUniform_INDEX 702
#define glGetActiveUniform_RETURN void
#define glGetActiveUniform_ARG_NAMES program, index, bufSize, length, size, type, name
#define glGetActiveUniform_ARG_EXPAND GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name
#define glGetActiveUniform_PACKED PACKED_void_GLuint_GLuint_GLsizei_GLsizei___GENPT___GLint___GENPT___GLenum___GENPT___GLchar___GENPT__
#define glGetActiveUniform_FORMAT FORMAT_void_GLuint_GLuint_GLsizei_GLsizei___GENPT___GLint___GENPT___GLenum___GENPT___GLchar___GENPT__
#define glGetActiveUniform_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetActiveUniform_NOT_VOID_WRAP(...) {}
#define glGetActiveUniformARB_INDEX 703
#define glGetActiveUniformARB_RETURN void
#define glGetActiveUniformARB_ARG_NAMES programObj, index, maxLength, length, size, type, name
#define glGetActiveUniformARB_ARG_EXPAND GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name
#define glGetActiveUniformARB_PACKED PACKED_void_GLhandleARB_GLuint_GLsizei_GLsizei___GENPT___GLint___GENPT___GLenum___GENPT___GLcharARB___GENPT__
#define glGetActiveUniformARB_FORMAT FORMAT_void_GLhandleARB_GLuint_GLsizei_GLsizei___GENPT___GLint___GENPT___GLenum___GENPT___GLcharARB___GENPT__
#define glGetActiveUniformARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetActiveUniformARB_NOT_VOID_WRAP(...) {}
#define glGetActiveUniformBlockName_INDEX 704
#define glGetActiveUniformBlockName_RETURN void
#define glGetActiveUniformBlockName_ARG_NAMES program, uniformBlockIndex, bufSize, length, uniformBlockName
#define glGetActiveUniformBlockName_ARG_EXPAND GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformBlockName
#define glGetActiveUniformBlockName_PACKED PACKED_void_GLuint_GLuint_GLsizei_GLsizei___GENPT___GLchar___GENPT__
#define glGetActiveUniformBlockName_FORMAT FORMAT_void_GLuint_GLuint_GLsizei_GLsizei___GENPT___GLchar___GENPT__
#define glGetActiveUniformBlockName_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetActiveUniformBlockName_NOT_VOID_WRAP(...) {}
#define glGetActiveUniformBlockiv_INDEX 705
#define glGetActiveUniformBlockiv_RETURN void
#define glGetActiveUniformBlockiv_ARG_NAMES program, uniformBlockIndex, pname, params
#define glGetActiveUniformBlockiv_ARG_EXPAND GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint * params
#define glGetActiveUniformBlockiv_PACKED PACKED_void_GLuint_GLuint_GLenum_GLint___GENPT__
#define glGetActiveUniformBlockiv_FORMAT FORMAT_void_GLuint_GLuint_GLenum_GLint___GENPT__
#define glGetActiveUniformBlockiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetActiveUniformBlockiv_NOT_VOID_WRAP(...) {}
#define glGetActiveUniformName_INDEX 706
#define glGetActiveUniformName_RETURN void
#define glGetActiveUniformName_ARG_NAMES program, uniformIndex, bufSize, length, uniformName
#define glGetActiveUniformName_ARG_EXPAND GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformName
#define glGetActiveUniformName_PACKED PACKED_void_GLuint_GLuint_GLsizei_GLsizei___GENPT___GLchar___GENPT__
#define glGetActiveUniformName_FORMAT FORMAT_void_GLuint_GLuint_GLsizei_GLsizei___GENPT___GLchar___GENPT__
#define glGetActiveUniformName_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetActiveUniformName_NOT_VOID_WRAP(...) {}
#define glGetActiveUniformsiv_INDEX 707
#define glGetActiveUniformsiv_RETURN void
#define glGetActiveUniformsiv_ARG_NAMES program, uniformCount, uniformIndices, pname, params
#define glGetActiveUniformsiv_ARG_EXPAND GLuint program, GLsizei uniformCount, const GLuint * uniformIndices, GLenum pname, GLint * params
#define glGetActiveUniformsiv_PACKED PACKED_void_GLuint_GLsizei_const_GLuint___GENPT___GLenum_GLint___GENPT__
#define glGetActiveUniformsiv_FORMAT FORMAT_void_GLuint_GLsizei_const_GLuint___GENPT___GLenum_GLint___GENPT__
#define glGetActiveUniformsiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetActiveUniformsiv_NOT_VOID_WRAP(...) {}
#define glGetActiveVaryingNV_INDEX 708
#define glGetActiveVaryingNV_RETURN void
#define glGetActiveVaryingNV_ARG_NAMES program, index, bufSize, length, size, type, name
#define glGetActiveVaryingNV_ARG_EXPAND GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name
#define glGetActiveVaryingNV_PACKED PACKED_void_GLuint_GLuint_GLsizei_GLsizei___GENPT___GLsizei___GENPT___GLenum___GENPT___GLchar___GENPT__
#define glGetActiveVaryingNV_FORMAT FORMAT_void_GLuint_GLuint_GLsizei_GLsizei___GENPT___GLsizei___GENPT___GLenum___GENPT___GLchar___GENPT__
#define glGetActiveVaryingNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetActiveVaryingNV_NOT_VOID_WRAP(...) {}
#define glGetArrayObjectfvATI_INDEX 709
#define glGetArrayObjectfvATI_RETURN void
#define glGetArrayObjectfvATI_ARG_NAMES array, pname, params
#define glGetArrayObjectfvATI_ARG_EXPAND GLenum array, GLenum pname, GLfloat * params
#define glGetArrayObjectfvATI_PACKED PACKED_void_GLenum_GLenum_GLfloat___GENPT__
#define glGetArrayObjectfvATI_FORMAT FORMAT_void_GLenum_GLenum_GLfloat___GENPT__
#define glGetArrayObjectfvATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetArrayObjectfvATI_NOT_VOID_WRAP(...) {}
#define glGetArrayObjectivATI_INDEX 710
#define glGetArrayObjectivATI_RETURN void
#define glGetArrayObjectivATI_ARG_NAMES array, pname, params
#define glGetArrayObjectivATI_ARG_EXPAND GLenum array, GLenum pname, GLint * params
#define glGetArrayObjectivATI_PACKED PACKED_void_GLenum_GLenum_GLint___GENPT__
#define glGetArrayObjectivATI_FORMAT FORMAT_void_GLenum_GLenum_GLint___GENPT__
#define glGetArrayObjectivATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetArrayObjectivATI_NOT_VOID_WRAP(...) {}
#define glGetAttachedObjectsARB_INDEX 711
#define glGetAttachedObjectsARB_RETURN void
#define glGetAttachedObjectsARB_ARG_NAMES containerObj, maxCount, count, obj
#define glGetAttachedObjectsARB_ARG_EXPAND GLhandleARB containerObj, GLsizei maxCount, GLsizei * count, GLhandleARB * obj
#define glGetAttachedObjectsARB_PACKED PACKED_void_GLhandleARB_GLsizei_GLsizei___GENPT___GLhandleARB___GENPT__
#define glGetAttachedObjectsARB_FORMAT FORMAT_void_GLhandleARB_GLsizei_GLsizei___GENPT___GLhandleARB___GENPT__
#define glGetAttachedObjectsARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetAttachedObjectsARB_NOT_VOID_WRAP(...) {}
#define glGetAttachedShaders_INDEX 712
#define glGetAttachedShaders_RETURN void
#define glGetAttachedShaders_ARG_NAMES program, maxCount, count, obj
#define glGetAttachedShaders_ARG_EXPAND GLuint program, GLsizei maxCount, GLsizei * count, GLuint * obj
#define glGetAttachedShaders_PACKED PACKED_void_GLuint_GLsizei_GLsizei___GENPT___GLuint___GENPT__
#define glGetAttachedShaders_FORMAT FORMAT_void_GLuint_GLsizei_GLsizei___GENPT___GLuint___GENPT__
#define glGetAttachedShaders_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetAttachedShaders_NOT_VOID_WRAP(...) {}
#define glGetAttribLocation_INDEX 713
#define glGetAttribLocation_RETURN GLint
#define glGetAttribLocation_ARG_NAMES program, name
#define glGetAttribLocation_ARG_EXPAND GLuint program, const GLchar * name
#define glGetAttribLocation_PACKED PACKED_GLint_GLuint_const_GLchar___GENPT__
#define glGetAttribLocation_FORMAT FORMAT_GLint_GLuint_const_GLchar___GENPT__
#define glGetAttribLocation_VOID_ONLY_WRAP(...) {}
#define glGetAttribLocation_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glGetAttribLocationARB_INDEX 714
#define glGetAttribLocationARB_RETURN GLint
#define glGetAttribLocationARB_ARG_NAMES programObj, name
#define glGetAttribLocationARB_ARG_EXPAND GLhandleARB programObj, const GLcharARB * name
#define glGetAttribLocationARB_PACKED PACKED_GLint_GLhandleARB_const_GLcharARB___GENPT__
#define glGetAttribLocationARB_FORMAT FORMAT_GLint_GLhandleARB_const_GLcharARB___GENPT__
#define glGetAttribLocationARB_VOID_ONLY_WRAP(...) {}
#define glGetAttribLocationARB_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glGetBooleanIndexedvEXT_INDEX 715
#define glGetBooleanIndexedvEXT_RETURN void
#define glGetBooleanIndexedvEXT_ARG_NAMES target, index, data
#define glGetBooleanIndexedvEXT_ARG_EXPAND GLenum target, GLuint index, GLboolean * data
#define glGetBooleanIndexedvEXT_PACKED PACKED_void_GLenum_GLuint_GLboolean___GENPT__
#define glGetBooleanIndexedvEXT_FORMAT FORMAT_void_GLenum_GLuint_GLboolean___GENPT__
#define glGetBooleanIndexedvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetBooleanIndexedvEXT_NOT_VOID_WRAP(...) {}
#define glGetBooleani_v_INDEX 716
#define glGetBooleani_v_RETURN void
#define glGetBooleani_v_ARG_NAMES target, index, data
#define glGetBooleani_v_ARG_EXPAND GLenum target, GLuint index, GLboolean * data
#define glGetBooleani_v_PACKED PACKED_void_GLenum_GLuint_GLboolean___GENPT__
#define glGetBooleani_v_FORMAT FORMAT_void_GLenum_GLuint_GLboolean___GENPT__
#define glGetBooleani_v_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetBooleani_v_NOT_VOID_WRAP(...) {}
#define glGetBooleanv_INDEX 717
#define glGetBooleanv_RETURN void
#define glGetBooleanv_ARG_NAMES pname, params
#define glGetBooleanv_ARG_EXPAND GLenum pname, GLboolean * params
#define glGetBooleanv_PACKED PACKED_void_GLenum_GLboolean___GENPT__
#define glGetBooleanv_FORMAT FORMAT_void_GLenum_GLboolean___GENPT__
#define glGetBooleanv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetBooleanv_NOT_VOID_WRAP(...) {}
#define glGetBufferParameteri64v_INDEX 718
#define glGetBufferParameteri64v_RETURN void
#define glGetBufferParameteri64v_ARG_NAMES target, pname, params
#define glGetBufferParameteri64v_ARG_EXPAND GLenum target, GLenum pname, GLint64 * params
#define glGetBufferParameteri64v_PACKED PACKED_void_GLenum_GLenum_GLint64___GENPT__
#define glGetBufferParameteri64v_FORMAT FORMAT_void_GLenum_GLenum_GLint64___GENPT__
#define glGetBufferParameteri64v_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetBufferParameteri64v_NOT_VOID_WRAP(...) {}
#define glGetBufferParameteriv_INDEX 719
#define glGetBufferParameteriv_RETURN void
#define glGetBufferParameteriv_ARG_NAMES target, pname, params
#define glGetBufferParameteriv_ARG_EXPAND GLenum target, GLenum pname, GLint * params
#define glGetBufferParameteriv_PACKED PACKED_void_GLenum_GLenum_GLint___GENPT__
#define glGetBufferParameteriv_FORMAT FORMAT_void_GLenum_GLenum_GLint___GENPT__
#define glGetBufferParameteriv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetBufferParameteriv_NOT_VOID_WRAP(...) {}
#define glGetBufferParameterivARB_INDEX 720
#define glGetBufferParameterivARB_RETURN void
#define glGetBufferParameterivARB_ARG_NAMES target, pname, params
#define glGetBufferParameterivARB_ARG_EXPAND GLenum target, GLenum pname, GLint * params
#define glGetBufferParameterivARB_PACKED PACKED_void_GLenum_GLenum_GLint___GENPT__
#define glGetBufferParameterivARB_FORMAT FORMAT_void_GLenum_GLenum_GLint___GENPT__
#define glGetBufferParameterivARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetBufferParameterivARB_NOT_VOID_WRAP(...) {}
#define glGetBufferParameterui64vNV_INDEX 721
#define glGetBufferParameterui64vNV_RETURN void
#define glGetBufferParameterui64vNV_ARG_NAMES target, pname, params
#define glGetBufferParameterui64vNV_ARG_EXPAND GLenum target, GLenum pname, GLuint64EXT * params
#define glGetBufferParameterui64vNV_PACKED PACKED_void_GLenum_GLenum_GLuint64EXT___GENPT__
#define glGetBufferParameterui64vNV_FORMAT FORMAT_void_GLenum_GLenum_GLuint64EXT___GENPT__
#define glGetBufferParameterui64vNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetBufferParameterui64vNV_NOT_VOID_WRAP(...) {}
#define glGetBufferPointerv_INDEX 722
#define glGetBufferPointerv_RETURN void
#define glGetBufferPointerv_ARG_NAMES target, pname, params
#define glGetBufferPointerv_ARG_EXPAND GLenum target, GLenum pname, GLvoid * params
#define glGetBufferPointerv_PACKED PACKED_void_GLenum_GLenum_GLvoid___GENPT__
#define glGetBufferPointerv_FORMAT FORMAT_void_GLenum_GLenum_GLvoid___GENPT__
#define glGetBufferPointerv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetBufferPointerv_NOT_VOID_WRAP(...) {}
#define glGetBufferPointervARB_INDEX 723
#define glGetBufferPointervARB_RETURN void
#define glGetBufferPointervARB_ARG_NAMES target, pname, params
#define glGetBufferPointervARB_ARG_EXPAND GLenum target, GLenum pname, GLvoid * params
#define glGetBufferPointervARB_PACKED PACKED_void_GLenum_GLenum_GLvoid___GENPT__
#define glGetBufferPointervARB_FORMAT FORMAT_void_GLenum_GLenum_GLvoid___GENPT__
#define glGetBufferPointervARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetBufferPointervARB_NOT_VOID_WRAP(...) {}
#define glGetBufferSubData_INDEX 724
#define glGetBufferSubData_RETURN void
#define glGetBufferSubData_ARG_NAMES target, offset, size, data
#define glGetBufferSubData_ARG_EXPAND GLenum target, GLintptr offset, GLsizeiptr size, GLvoid * data
#define glGetBufferSubData_PACKED PACKED_void_GLenum_GLintptr_GLsizeiptr_GLvoid___GENPT__
#define glGetBufferSubData_FORMAT FORMAT_void_GLenum_GLintptr_GLsizeiptr_GLvoid___GENPT__
#define glGetBufferSubData_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetBufferSubData_NOT_VOID_WRAP(...) {}
#define glGetBufferSubDataARB_INDEX 725
#define glGetBufferSubDataARB_RETURN void
#define glGetBufferSubDataARB_ARG_NAMES target, offset, size, data
#define glGetBufferSubDataARB_ARG_EXPAND GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid * data
#define glGetBufferSubDataARB_PACKED PACKED_void_GLenum_GLintptrARB_GLsizeiptrARB_GLvoid___GENPT__
#define glGetBufferSubDataARB_FORMAT FORMAT_void_GLenum_GLintptrARB_GLsizeiptrARB_GLvoid___GENPT__
#define glGetBufferSubDataARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetBufferSubDataARB_NOT_VOID_WRAP(...) {}
#define glGetClipPlane_INDEX 726
#define glGetClipPlane_RETURN void
#define glGetClipPlane_ARG_NAMES plane, equation
#define glGetClipPlane_ARG_EXPAND GLenum plane, GLdouble * equation
#define glGetClipPlane_PACKED PACKED_void_GLenum_GLdouble___GENPT__
#define glGetClipPlane_FORMAT FORMAT_void_GLenum_GLdouble___GENPT__
#define glGetClipPlane_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetClipPlane_NOT_VOID_WRAP(...) {}
#define glGetClipPlanef_INDEX 727
#define glGetClipPlanef_RETURN void
#define glGetClipPlanef_ARG_NAMES plane, equation
#define glGetClipPlanef_ARG_EXPAND GLenum plane, GLfloat * equation
#define glGetClipPlanef_PACKED PACKED_void_GLenum_GLfloat___GENPT__
#define glGetClipPlanef_FORMAT FORMAT_void_GLenum_GLfloat___GENPT__
#define glGetClipPlanef_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetClipPlanef_NOT_VOID_WRAP(...) {}
#define glGetClipPlanefOES_INDEX 728
#define glGetClipPlanefOES_RETURN void
#define glGetClipPlanefOES_ARG_NAMES plane, equation
#define glGetClipPlanefOES_ARG_EXPAND GLenum plane, GLfloat * equation
#define glGetClipPlanefOES_PACKED PACKED_void_GLenum_GLfloat___GENPT__
#define glGetClipPlanefOES_FORMAT FORMAT_void_GLenum_GLfloat___GENPT__
#define glGetClipPlanefOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetClipPlanefOES_NOT_VOID_WRAP(...) {}
#define glGetClipPlanex_INDEX 729
#define glGetClipPlanex_RETURN void
#define glGetClipPlanex_ARG_NAMES plane, equation
#define glGetClipPlanex_ARG_EXPAND GLenum plane, GLfixed * equation
#define glGetClipPlanex_PACKED PACKED_void_GLenum_GLfixed___GENPT__
#define glGetClipPlanex_FORMAT FORMAT_void_GLenum_GLfixed___GENPT__
#define glGetClipPlanex_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetClipPlanex_NOT_VOID_WRAP(...) {}
#define glGetClipPlanexOES_INDEX 730
#define glGetClipPlanexOES_RETURN void
#define glGetClipPlanexOES_ARG_NAMES plane, equation
#define glGetClipPlanexOES_ARG_EXPAND GLenum plane, GLfixed * equation
#define glGetClipPlanexOES_PACKED PACKED_void_GLenum_GLfixed___GENPT__
#define glGetClipPlanexOES_FORMAT FORMAT_void_GLenum_GLfixed___GENPT__
#define glGetClipPlanexOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetClipPlanexOES_NOT_VOID_WRAP(...) {}
#define glGetColorTable_INDEX 731
#define glGetColorTable_RETURN void
#define glGetColorTable_ARG_NAMES target, format, type, table
#define glGetColorTable_ARG_EXPAND GLenum target, GLenum format, GLenum type, GLvoid * table
#define glGetColorTable_PACKED PACKED_void_GLenum_GLenum_GLenum_GLvoid___GENPT__
#define glGetColorTable_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLvoid___GENPT__
#define glGetColorTable_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetColorTable_NOT_VOID_WRAP(...) {}
#define glGetColorTableEXT_INDEX 732
#define glGetColorTableEXT_RETURN void
#define glGetColorTableEXT_ARG_NAMES target, format, type, data
#define glGetColorTableEXT_ARG_EXPAND GLenum target, GLenum format, GLenum type, GLvoid * data
#define glGetColorTableEXT_PACKED PACKED_void_GLenum_GLenum_GLenum_GLvoid___GENPT__
#define glGetColorTableEXT_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLvoid___GENPT__
#define glGetColorTableEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetColorTableEXT_NOT_VOID_WRAP(...) {}
#define glGetColorTableParameterfv_INDEX 733
#define glGetColorTableParameterfv_RETURN void
#define glGetColorTableParameterfv_ARG_NAMES target, pname, params
#define glGetColorTableParameterfv_ARG_EXPAND GLenum target, GLenum pname, GLfloat * params
#define glGetColorTableParameterfv_PACKED PACKED_void_GLenum_GLenum_GLfloat___GENPT__
#define glGetColorTableParameterfv_FORMAT FORMAT_void_GLenum_GLenum_GLfloat___GENPT__
#define glGetColorTableParameterfv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetColorTableParameterfv_NOT_VOID_WRAP(...) {}
#define glGetColorTableParameterfvEXT_INDEX 734
#define glGetColorTableParameterfvEXT_RETURN void
#define glGetColorTableParameterfvEXT_ARG_NAMES target, pname, params
#define glGetColorTableParameterfvEXT_ARG_EXPAND GLenum target, GLenum pname, GLfloat * params
#define glGetColorTableParameterfvEXT_PACKED PACKED_void_GLenum_GLenum_GLfloat___GENPT__
#define glGetColorTableParameterfvEXT_FORMAT FORMAT_void_GLenum_GLenum_GLfloat___GENPT__
#define glGetColorTableParameterfvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetColorTableParameterfvEXT_NOT_VOID_WRAP(...) {}
#define glGetColorTableParameterfvSGI_INDEX 735
#define glGetColorTableParameterfvSGI_RETURN void
#define glGetColorTableParameterfvSGI_ARG_NAMES target, pname, params
#define glGetColorTableParameterfvSGI_ARG_EXPAND GLenum target, GLenum pname, GLfloat * params
#define glGetColorTableParameterfvSGI_PACKED PACKED_void_GLenum_GLenum_GLfloat___GENPT__
#define glGetColorTableParameterfvSGI_FORMAT FORMAT_void_GLenum_GLenum_GLfloat___GENPT__
#define glGetColorTableParameterfvSGI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetColorTableParameterfvSGI_NOT_VOID_WRAP(...) {}
#define glGetColorTableParameteriv_INDEX 736
#define glGetColorTableParameteriv_RETURN void
#define glGetColorTableParameteriv_ARG_NAMES target, pname, params
#define glGetColorTableParameteriv_ARG_EXPAND GLenum target, GLenum pname, GLint * params
#define glGetColorTableParameteriv_PACKED PACKED_void_GLenum_GLenum_GLint___GENPT__
#define glGetColorTableParameteriv_FORMAT FORMAT_void_GLenum_GLenum_GLint___GENPT__
#define glGetColorTableParameteriv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetColorTableParameteriv_NOT_VOID_WRAP(...) {}
#define glGetColorTableParameterivEXT_INDEX 737
#define glGetColorTableParameterivEXT_RETURN void
#define glGetColorTableParameterivEXT_ARG_NAMES target, pname, params
#define glGetColorTableParameterivEXT_ARG_EXPAND GLenum target, GLenum pname, GLint * params
#define glGetColorTableParameterivEXT_PACKED PACKED_void_GLenum_GLenum_GLint___GENPT__
#define glGetColorTableParameterivEXT_FORMAT FORMAT_void_GLenum_GLenum_GLint___GENPT__
#define glGetColorTableParameterivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetColorTableParameterivEXT_NOT_VOID_WRAP(...) {}
#define glGetColorTableParameterivSGI_INDEX 738
#define glGetColorTableParameterivSGI_RETURN void
#define glGetColorTableParameterivSGI_ARG_NAMES target, pname, params
#define glGetColorTableParameterivSGI_ARG_EXPAND GLenum target, GLenum pname, GLint * params
#define glGetColorTableParameterivSGI_PACKED PACKED_void_GLenum_GLenum_GLint___GENPT__
#define glGetColorTableParameterivSGI_FORMAT FORMAT_void_GLenum_GLenum_GLint___GENPT__
#define glGetColorTableParameterivSGI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetColorTableParameterivSGI_NOT_VOID_WRAP(...) {}
#define glGetColorTableSGI_INDEX 739
#define glGetColorTableSGI_RETURN void
#define glGetColorTableSGI_ARG_NAMES target, format, type, table
#define glGetColorTableSGI_ARG_EXPAND GLenum target, GLenum format, GLenum type, GLvoid * table
#define glGetColorTableSGI_PACKED PACKED_void_GLenum_GLenum_GLenum_GLvoid___GENPT__
#define glGetColorTableSGI_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLvoid___GENPT__
#define glGetColorTableSGI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetColorTableSGI_NOT_VOID_WRAP(...) {}
#define glGetCombinerInputParameterfvNV_INDEX 740
#define glGetCombinerInputParameterfvNV_RETURN void
#define glGetCombinerInputParameterfvNV_ARG_NAMES stage, portion, variable, pname, params
#define glGetCombinerInputParameterfvNV_ARG_EXPAND GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat * params
#define glGetCombinerInputParameterfvNV_PACKED PACKED_void_GLenum_GLenum_GLenum_GLenum_GLfloat___GENPT__
#define glGetCombinerInputParameterfvNV_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLenum_GLfloat___GENPT__
#define glGetCombinerInputParameterfvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetCombinerInputParameterfvNV_NOT_VOID_WRAP(...) {}
#define glGetCombinerInputParameterivNV_INDEX 741
#define glGetCombinerInputParameterivNV_RETURN void
#define glGetCombinerInputParameterivNV_ARG_NAMES stage, portion, variable, pname, params
#define glGetCombinerInputParameterivNV_ARG_EXPAND GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint * params
#define glGetCombinerInputParameterivNV_PACKED PACKED_void_GLenum_GLenum_GLenum_GLenum_GLint___GENPT__
#define glGetCombinerInputParameterivNV_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLenum_GLint___GENPT__
#define glGetCombinerInputParameterivNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetCombinerInputParameterivNV_NOT_VOID_WRAP(...) {}
#define glGetCombinerOutputParameterfvNV_INDEX 742
#define glGetCombinerOutputParameterfvNV_RETURN void
#define glGetCombinerOutputParameterfvNV_ARG_NAMES stage, portion, pname, params
#define glGetCombinerOutputParameterfvNV_ARG_EXPAND GLenum stage, GLenum portion, GLenum pname, GLfloat * params
#define glGetCombinerOutputParameterfvNV_PACKED PACKED_void_GLenum_GLenum_GLenum_GLfloat___GENPT__
#define glGetCombinerOutputParameterfvNV_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLfloat___GENPT__
#define glGetCombinerOutputParameterfvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetCombinerOutputParameterfvNV_NOT_VOID_WRAP(...) {}
#define glGetCombinerOutputParameterivNV_INDEX 743
#define glGetCombinerOutputParameterivNV_RETURN void
#define glGetCombinerOutputParameterivNV_ARG_NAMES stage, portion, pname, params
#define glGetCombinerOutputParameterivNV_ARG_EXPAND GLenum stage, GLenum portion, GLenum pname, GLint * params
#define glGetCombinerOutputParameterivNV_PACKED PACKED_void_GLenum_GLenum_GLenum_GLint___GENPT__
#define glGetCombinerOutputParameterivNV_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLint___GENPT__
#define glGetCombinerOutputParameterivNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetCombinerOutputParameterivNV_NOT_VOID_WRAP(...) {}
#define glGetCombinerStageParameterfvNV_INDEX 744
#define glGetCombinerStageParameterfvNV_RETURN void
#define glGetCombinerStageParameterfvNV_ARG_NAMES stage, pname, params
#define glGetCombinerStageParameterfvNV_ARG_EXPAND GLenum stage, GLenum pname, GLfloat * params
#define glGetCombinerStageParameterfvNV_PACKED PACKED_void_GLenum_GLenum_GLfloat___GENPT__
#define glGetCombinerStageParameterfvNV_FORMAT FORMAT_void_GLenum_GLenum_GLfloat___GENPT__
#define glGetCombinerStageParameterfvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetCombinerStageParameterfvNV_NOT_VOID_WRAP(...) {}
#define glGetCompressedMultiTexImageEXT_INDEX 745
#define glGetCompressedMultiTexImageEXT_RETURN void
#define glGetCompressedMultiTexImageEXT_ARG_NAMES texunit, target, lod, img
#define glGetCompressedMultiTexImageEXT_ARG_EXPAND GLenum texunit, GLenum target, GLint lod, GLvoid * img
#define glGetCompressedMultiTexImageEXT_PACKED PACKED_void_GLenum_GLenum_GLint_GLvoid___GENPT__
#define glGetCompressedMultiTexImageEXT_FORMAT FORMAT_void_GLenum_GLenum_GLint_GLvoid___GENPT__
#define glGetCompressedMultiTexImageEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetCompressedMultiTexImageEXT_NOT_VOID_WRAP(...) {}
#define glGetCompressedTexImage_INDEX 746
#define glGetCompressedTexImage_RETURN void
#define glGetCompressedTexImage_ARG_NAMES target, level, img
#define glGetCompressedTexImage_ARG_EXPAND GLenum target, GLint level, GLvoid * img
#define glGetCompressedTexImage_PACKED PACKED_void_GLenum_GLint_GLvoid___GENPT__
#define glGetCompressedTexImage_FORMAT FORMAT_void_GLenum_GLint_GLvoid___GENPT__
#define glGetCompressedTexImage_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetCompressedTexImage_NOT_VOID_WRAP(...) {}
#define glGetCompressedTexImageARB_INDEX 747
#define glGetCompressedTexImageARB_RETURN void
#define glGetCompressedTexImageARB_ARG_NAMES target, level, img
#define glGetCompressedTexImageARB_ARG_EXPAND GLenum target, GLint level, GLvoid * img
#define glGetCompressedTexImageARB_PACKED PACKED_void_GLenum_GLint_GLvoid___GENPT__
#define glGetCompressedTexImageARB_FORMAT FORMAT_void_GLenum_GLint_GLvoid___GENPT__
#define glGetCompressedTexImageARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetCompressedTexImageARB_NOT_VOID_WRAP(...) {}
#define glGetCompressedTextureImageEXT_INDEX 748
#define glGetCompressedTextureImageEXT_RETURN void
#define glGetCompressedTextureImageEXT_ARG_NAMES texture, target, lod, img
#define glGetCompressedTextureImageEXT_ARG_EXPAND GLuint texture, GLenum target, GLint lod, GLvoid * img
#define glGetCompressedTextureImageEXT_PACKED PACKED_void_GLuint_GLenum_GLint_GLvoid___GENPT__
#define glGetCompressedTextureImageEXT_FORMAT FORMAT_void_GLuint_GLenum_GLint_GLvoid___GENPT__
#define glGetCompressedTextureImageEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetCompressedTextureImageEXT_NOT_VOID_WRAP(...) {}
#define glGetConvolutionFilter_INDEX 749
#define glGetConvolutionFilter_RETURN void
#define glGetConvolutionFilter_ARG_NAMES target, format, type, image
#define glGetConvolutionFilter_ARG_EXPAND GLenum target, GLenum format, GLenum type, GLvoid * image
#define glGetConvolutionFilter_PACKED PACKED_void_GLenum_GLenum_GLenum_GLvoid___GENPT__
#define glGetConvolutionFilter_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLvoid___GENPT__
#define glGetConvolutionFilter_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetConvolutionFilter_NOT_VOID_WRAP(...) {}
#define glGetConvolutionFilterEXT_INDEX 750
#define glGetConvolutionFilterEXT_RETURN void
#define glGetConvolutionFilterEXT_ARG_NAMES target, format, type, image
#define glGetConvolutionFilterEXT_ARG_EXPAND GLenum target, GLenum format, GLenum type, GLvoid * image
#define glGetConvolutionFilterEXT_PACKED PACKED_void_GLenum_GLenum_GLenum_GLvoid___GENPT__
#define glGetConvolutionFilterEXT_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLvoid___GENPT__
#define glGetConvolutionFilterEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetConvolutionFilterEXT_NOT_VOID_WRAP(...) {}
#define glGetConvolutionParameterfv_INDEX 751
#define glGetConvolutionParameterfv_RETURN void
#define glGetConvolutionParameterfv_ARG_NAMES target, pname, params
#define glGetConvolutionParameterfv_ARG_EXPAND GLenum target, GLenum pname, GLfloat * params
#define glGetConvolutionParameterfv_PACKED PACKED_void_GLenum_GLenum_GLfloat___GENPT__
#define glGetConvolutionParameterfv_FORMAT FORMAT_void_GLenum_GLenum_GLfloat___GENPT__
#define glGetConvolutionParameterfv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetConvolutionParameterfv_NOT_VOID_WRAP(...) {}
#define glGetConvolutionParameterfvEXT_INDEX 752
#define glGetConvolutionParameterfvEXT_RETURN void
#define glGetConvolutionParameterfvEXT_ARG_NAMES target, pname, params
#define glGetConvolutionParameterfvEXT_ARG_EXPAND GLenum target, GLenum pname, GLfloat * params
#define glGetConvolutionParameterfvEXT_PACKED PACKED_void_GLenum_GLenum_GLfloat___GENPT__
#define glGetConvolutionParameterfvEXT_FORMAT FORMAT_void_GLenum_GLenum_GLfloat___GENPT__
#define glGetConvolutionParameterfvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetConvolutionParameterfvEXT_NOT_VOID_WRAP(...) {}
#define glGetConvolutionParameteriv_INDEX 753
#define glGetConvolutionParameteriv_RETURN void
#define glGetConvolutionParameteriv_ARG_NAMES target, pname, params
#define glGetConvolutionParameteriv_ARG_EXPAND GLenum target, GLenum pname, GLint * params
#define glGetConvolutionParameteriv_PACKED PACKED_void_GLenum_GLenum_GLint___GENPT__
#define glGetConvolutionParameteriv_FORMAT FORMAT_void_GLenum_GLenum_GLint___GENPT__
#define glGetConvolutionParameteriv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetConvolutionParameteriv_NOT_VOID_WRAP(...) {}
#define glGetConvolutionParameterivEXT_INDEX 754
#define glGetConvolutionParameterivEXT_RETURN void
#define glGetConvolutionParameterivEXT_ARG_NAMES target, pname, params
#define glGetConvolutionParameterivEXT_ARG_EXPAND GLenum target, GLenum pname, GLint * params
#define glGetConvolutionParameterivEXT_PACKED PACKED_void_GLenum_GLenum_GLint___GENPT__
#define glGetConvolutionParameterivEXT_FORMAT FORMAT_void_GLenum_GLenum_GLint___GENPT__
#define glGetConvolutionParameterivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetConvolutionParameterivEXT_NOT_VOID_WRAP(...) {}
#define glGetConvolutionParameterxvOES_INDEX 755
#define glGetConvolutionParameterxvOES_RETURN void
#define glGetConvolutionParameterxvOES_ARG_NAMES target, pname, params
#define glGetConvolutionParameterxvOES_ARG_EXPAND GLenum target, GLenum pname, GLfixed * params
#define glGetConvolutionParameterxvOES_PACKED PACKED_void_GLenum_GLenum_GLfixed___GENPT__
#define glGetConvolutionParameterxvOES_FORMAT FORMAT_void_GLenum_GLenum_GLfixed___GENPT__
#define glGetConvolutionParameterxvOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetConvolutionParameterxvOES_NOT_VOID_WRAP(...) {}
#define glGetDebugMessageLog_INDEX 756
#define glGetDebugMessageLog_RETURN GLuint
#define glGetDebugMessageLog_ARG_NAMES count, bufsize, sources, types, ids, severities, lengths, messageLog
#define glGetDebugMessageLog_ARG_EXPAND GLuint count, GLsizei bufsize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog
#define glGetDebugMessageLog_PACKED PACKED_GLuint_GLuint_GLsizei_GLenum___GENPT___GLenum___GENPT___GLuint___GENPT___GLenum___GENPT___GLsizei___GENPT___GLchar___GENPT__
#define glGetDebugMessageLog_FORMAT FORMAT_GLuint_GLuint_GLsizei_GLenum___GENPT___GLenum___GENPT___GLuint___GENPT___GLenum___GENPT___GLsizei___GENPT___GLchar___GENPT__
#define glGetDebugMessageLog_VOID_ONLY_WRAP(...) {}
#define glGetDebugMessageLog_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glGetDebugMessageLogAMD_INDEX 757
#define glGetDebugMessageLogAMD_RETURN GLuint
#define glGetDebugMessageLogAMD_ARG_NAMES count, bufsize, categories, severities, ids, lengths, message
#define glGetDebugMessageLogAMD_ARG_EXPAND GLuint count, GLsizei bufsize, GLenum * categories, GLuint * severities, GLuint * ids, GLsizei * lengths, GLchar * message
#define glGetDebugMessageLogAMD_PACKED PACKED_GLuint_GLuint_GLsizei_GLenum___GENPT___GLuint___GENPT___GLuint___GENPT___GLsizei___GENPT___GLchar___GENPT__
#define glGetDebugMessageLogAMD_FORMAT FORMAT_GLuint_GLuint_GLsizei_GLenum___GENPT___GLuint___GENPT___GLuint___GENPT___GLsizei___GENPT___GLchar___GENPT__
#define glGetDebugMessageLogAMD_VOID_ONLY_WRAP(...) {}
#define glGetDebugMessageLogAMD_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glGetDebugMessageLogARB_INDEX 758
#define glGetDebugMessageLogARB_RETURN GLuint
#define glGetDebugMessageLogARB_ARG_NAMES count, bufsize, sources, types, ids, severities, lengths, messageLog
#define glGetDebugMessageLogARB_ARG_EXPAND GLuint count, GLsizei bufsize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog
#define glGetDebugMessageLogARB_PACKED PACKED_GLuint_GLuint_GLsizei_GLenum___GENPT___GLenum___GENPT___GLuint___GENPT___GLenum___GENPT___GLsizei___GENPT___GLchar___GENPT__
#define glGetDebugMessageLogARB_FORMAT FORMAT_GLuint_GLuint_GLsizei_GLenum___GENPT___GLenum___GENPT___GLuint___GENPT___GLenum___GENPT___GLsizei___GENPT___GLchar___GENPT__
#define glGetDebugMessageLogARB_VOID_ONLY_WRAP(...) {}
#define glGetDebugMessageLogARB_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glGetDetailTexFuncSGIS_INDEX 759
#define glGetDetailTexFuncSGIS_RETURN void
#define glGetDetailTexFuncSGIS_ARG_NAMES target, points
#define glGetDetailTexFuncSGIS_ARG_EXPAND GLenum target, GLfloat * points
#define glGetDetailTexFuncSGIS_PACKED PACKED_void_GLenum_GLfloat___GENPT__
#define glGetDetailTexFuncSGIS_FORMAT FORMAT_void_GLenum_GLfloat___GENPT__
#define glGetDetailTexFuncSGIS_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetDetailTexFuncSGIS_NOT_VOID_WRAP(...) {}
#define glGetDoubleIndexedvEXT_INDEX 760
#define glGetDoubleIndexedvEXT_RETURN void
#define glGetDoubleIndexedvEXT_ARG_NAMES target, index, data
#define glGetDoubleIndexedvEXT_ARG_EXPAND GLenum target, GLuint index, GLdouble * data
#define glGetDoubleIndexedvEXT_PACKED PACKED_void_GLenum_GLuint_GLdouble___GENPT__
#define glGetDoubleIndexedvEXT_FORMAT FORMAT_void_GLenum_GLuint_GLdouble___GENPT__
#define glGetDoubleIndexedvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetDoubleIndexedvEXT_NOT_VOID_WRAP(...) {}
#define glGetDoublei_v_INDEX 761
#define glGetDoublei_v_RETURN void
#define glGetDoublei_v_ARG_NAMES target, index, data
#define glGetDoublei_v_ARG_EXPAND GLenum target, GLuint index, GLdouble * data
#define glGetDoublei_v_PACKED PACKED_void_GLenum_GLuint_GLdouble___GENPT__
#define glGetDoublei_v_FORMAT FORMAT_void_GLenum_GLuint_GLdouble___GENPT__
#define glGetDoublei_v_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetDoublei_v_NOT_VOID_WRAP(...) {}
#define glGetDoublei_vEXT_INDEX 762
#define glGetDoublei_vEXT_RETURN void
#define glGetDoublei_vEXT_ARG_NAMES target, index, data
#define glGetDoublei_vEXT_ARG_EXPAND GLenum target, GLuint index, GLdouble * data
#define glGetDoublei_vEXT_PACKED PACKED_void_GLenum_GLuint_GLdouble___GENPT__
#define glGetDoublei_vEXT_FORMAT FORMAT_void_GLenum_GLuint_GLdouble___GENPT__
#define glGetDoublei_vEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetDoublei_vEXT_NOT_VOID_WRAP(...) {}
#define glGetDoublev_INDEX 763
#define glGetDoublev_RETURN void
#define glGetDoublev_ARG_NAMES pname, params
#define glGetDoublev_ARG_EXPAND GLenum pname, GLdouble * params
#define glGetDoublev_PACKED PACKED_void_GLenum_GLdouble___GENPT__
#define glGetDoublev_FORMAT FORMAT_void_GLenum_GLdouble___GENPT__
#define glGetDoublev_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetDoublev_NOT_VOID_WRAP(...) {}
#define glGetError_INDEX 764
#define glGetError_RETURN GLenum
#define glGetError_ARG_NAMES 
#define glGetError_ARG_EXPAND 
#define glGetError_PACKED PACKED_GLenum
#define glGetError_FORMAT FORMAT_GLenum
#define glGetError_VOID_ONLY_WRAP(...) {}
#define glGetError_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glGetFenceivNV_INDEX 765
#define glGetFenceivNV_RETURN void
#define glGetFenceivNV_ARG_NAMES fence, pname, params
#define glGetFenceivNV_ARG_EXPAND GLuint fence, GLenum pname, GLint * params
#define glGetFenceivNV_PACKED PACKED_void_GLuint_GLenum_GLint___GENPT__
#define glGetFenceivNV_FORMAT FORMAT_void_GLuint_GLenum_GLint___GENPT__
#define glGetFenceivNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetFenceivNV_NOT_VOID_WRAP(...) {}
#define glGetFinalCombinerInputParameterfvNV_INDEX 766
#define glGetFinalCombinerInputParameterfvNV_RETURN void
#define glGetFinalCombinerInputParameterfvNV_ARG_NAMES variable, pname, params
#define glGetFinalCombinerInputParameterfvNV_ARG_EXPAND GLenum variable, GLenum pname, GLfloat * params
#define glGetFinalCombinerInputParameterfvNV_PACKED PACKED_void_GLenum_GLenum_GLfloat___GENPT__
#define glGetFinalCombinerInputParameterfvNV_FORMAT FORMAT_void_GLenum_GLenum_GLfloat___GENPT__
#define glGetFinalCombinerInputParameterfvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetFinalCombinerInputParameterfvNV_NOT_VOID_WRAP(...) {}
#define glGetFinalCombinerInputParameterivNV_INDEX 767
#define glGetFinalCombinerInputParameterivNV_RETURN void
#define glGetFinalCombinerInputParameterivNV_ARG_NAMES variable, pname, params
#define glGetFinalCombinerInputParameterivNV_ARG_EXPAND GLenum variable, GLenum pname, GLint * params
#define glGetFinalCombinerInputParameterivNV_PACKED PACKED_void_GLenum_GLenum_GLint___GENPT__
#define glGetFinalCombinerInputParameterivNV_FORMAT FORMAT_void_GLenum_GLenum_GLint___GENPT__
#define glGetFinalCombinerInputParameterivNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetFinalCombinerInputParameterivNV_NOT_VOID_WRAP(...) {}
#define glGetFixedv_INDEX 768
#define glGetFixedv_RETURN void
#define glGetFixedv_ARG_NAMES pname, params
#define glGetFixedv_ARG_EXPAND GLenum pname, GLfixed * params
#define glGetFixedv_PACKED PACKED_void_GLenum_GLfixed___GENPT__
#define glGetFixedv_FORMAT FORMAT_void_GLenum_GLfixed___GENPT__
#define glGetFixedv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetFixedv_NOT_VOID_WRAP(...) {}
#define glGetFixedvOES_INDEX 769
#define glGetFixedvOES_RETURN void
#define glGetFixedvOES_ARG_NAMES pname, params
#define glGetFixedvOES_ARG_EXPAND GLenum pname, GLfixed * params
#define glGetFixedvOES_PACKED PACKED_void_GLenum_GLfixed___GENPT__
#define glGetFixedvOES_FORMAT FORMAT_void_GLenum_GLfixed___GENPT__
#define glGetFixedvOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetFixedvOES_NOT_VOID_WRAP(...) {}
#define glGetFloatIndexedvEXT_INDEX 770
#define glGetFloatIndexedvEXT_RETURN void
#define glGetFloatIndexedvEXT_ARG_NAMES target, index, data
#define glGetFloatIndexedvEXT_ARG_EXPAND GLenum target, GLuint index, GLfloat * data
#define glGetFloatIndexedvEXT_PACKED PACKED_void_GLenum_GLuint_GLfloat___GENPT__
#define glGetFloatIndexedvEXT_FORMAT FORMAT_void_GLenum_GLuint_GLfloat___GENPT__
#define glGetFloatIndexedvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetFloatIndexedvEXT_NOT_VOID_WRAP(...) {}
#define glGetFloati_v_INDEX 771
#define glGetFloati_v_RETURN void
#define glGetFloati_v_ARG_NAMES target, index, data
#define glGetFloati_v_ARG_EXPAND GLenum target, GLuint index, GLfloat * data
#define glGetFloati_v_PACKED PACKED_void_GLenum_GLuint_GLfloat___GENPT__
#define glGetFloati_v_FORMAT FORMAT_void_GLenum_GLuint_GLfloat___GENPT__
#define glGetFloati_v_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetFloati_v_NOT_VOID_WRAP(...) {}
#define glGetFloati_vEXT_INDEX 772
#define glGetFloati_vEXT_RETURN void
#define glGetFloati_vEXT_ARG_NAMES target, index, data
#define glGetFloati_vEXT_ARG_EXPAND GLenum target, GLuint index, GLfloat * data
#define glGetFloati_vEXT_PACKED PACKED_void_GLenum_GLuint_GLfloat___GENPT__
#define glGetFloati_vEXT_FORMAT FORMAT_void_GLenum_GLuint_GLfloat___GENPT__
#define glGetFloati_vEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetFloati_vEXT_NOT_VOID_WRAP(...) {}
#define glGetFloatv_INDEX 773
#define glGetFloatv_RETURN void
#define glGetFloatv_ARG_NAMES pname, params
#define glGetFloatv_ARG_EXPAND GLenum pname, GLfloat * params
#define glGetFloatv_PACKED PACKED_void_GLenum_GLfloat___GENPT__
#define glGetFloatv_FORMAT FORMAT_void_GLenum_GLfloat___GENPT__
#define glGetFloatv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetFloatv_NOT_VOID_WRAP(...) {}
#define glGetFogFuncSGIS_INDEX 774
#define glGetFogFuncSGIS_RETURN void
#define glGetFogFuncSGIS_ARG_NAMES points
#define glGetFogFuncSGIS_ARG_EXPAND GLfloat * points
#define glGetFogFuncSGIS_PACKED PACKED_void_GLfloat___GENPT__
#define glGetFogFuncSGIS_FORMAT FORMAT_void_GLfloat___GENPT__
#define glGetFogFuncSGIS_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetFogFuncSGIS_NOT_VOID_WRAP(...) {}
#define glGetFragDataIndex_INDEX 775
#define glGetFragDataIndex_RETURN GLint
#define glGetFragDataIndex_ARG_NAMES program, name
#define glGetFragDataIndex_ARG_EXPAND GLuint program, const GLchar * name
#define glGetFragDataIndex_PACKED PACKED_GLint_GLuint_const_GLchar___GENPT__
#define glGetFragDataIndex_FORMAT FORMAT_GLint_GLuint_const_GLchar___GENPT__
#define glGetFragDataIndex_VOID_ONLY_WRAP(...) {}
#define glGetFragDataIndex_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glGetFragDataLocation_INDEX 776
#define glGetFragDataLocation_RETURN GLint
#define glGetFragDataLocation_ARG_NAMES program, name
#define glGetFragDataLocation_ARG_EXPAND GLuint program, const GLchar * name
#define glGetFragDataLocation_PACKED PACKED_GLint_GLuint_const_GLchar___GENPT__
#define glGetFragDataLocation_FORMAT FORMAT_GLint_GLuint_const_GLchar___GENPT__
#define glGetFragDataLocation_VOID_ONLY_WRAP(...) {}
#define glGetFragDataLocation_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glGetFragDataLocationEXT_INDEX 777
#define glGetFragDataLocationEXT_RETURN GLint
#define glGetFragDataLocationEXT_ARG_NAMES program, name
#define glGetFragDataLocationEXT_ARG_EXPAND GLuint program, const GLchar * name
#define glGetFragDataLocationEXT_PACKED PACKED_GLint_GLuint_const_GLchar___GENPT__
#define glGetFragDataLocationEXT_FORMAT FORMAT_GLint_GLuint_const_GLchar___GENPT__
#define glGetFragDataLocationEXT_VOID_ONLY_WRAP(...) {}
#define glGetFragDataLocationEXT_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glGetFragmentLightfvSGIX_INDEX 778
#define glGetFragmentLightfvSGIX_RETURN void
#define glGetFragmentLightfvSGIX_ARG_NAMES light, pname, params
#define glGetFragmentLightfvSGIX_ARG_EXPAND GLenum light, GLenum pname, GLfloat * params
#define glGetFragmentLightfvSGIX_PACKED PACKED_void_GLenum_GLenum_GLfloat___GENPT__
#define glGetFragmentLightfvSGIX_FORMAT FORMAT_void_GLenum_GLenum_GLfloat___GENPT__
#define glGetFragmentLightfvSGIX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetFragmentLightfvSGIX_NOT_VOID_WRAP(...) {}
#define glGetFragmentLightivSGIX_INDEX 779
#define glGetFragmentLightivSGIX_RETURN void
#define glGetFragmentLightivSGIX_ARG_NAMES light, pname, params
#define glGetFragmentLightivSGIX_ARG_EXPAND GLenum light, GLenum pname, GLint * params
#define glGetFragmentLightivSGIX_PACKED PACKED_void_GLenum_GLenum_GLint___GENPT__
#define glGetFragmentLightivSGIX_FORMAT FORMAT_void_GLenum_GLenum_GLint___GENPT__
#define glGetFragmentLightivSGIX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetFragmentLightivSGIX_NOT_VOID_WRAP(...) {}
#define glGetFragmentMaterialfvSGIX_INDEX 780
#define glGetFragmentMaterialfvSGIX_RETURN void
#define glGetFragmentMaterialfvSGIX_ARG_NAMES face, pname, params
#define glGetFragmentMaterialfvSGIX_ARG_EXPAND GLenum face, GLenum pname, GLfloat * params
#define glGetFragmentMaterialfvSGIX_PACKED PACKED_void_GLenum_GLenum_GLfloat___GENPT__
#define glGetFragmentMaterialfvSGIX_FORMAT FORMAT_void_GLenum_GLenum_GLfloat___GENPT__
#define glGetFragmentMaterialfvSGIX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetFragmentMaterialfvSGIX_NOT_VOID_WRAP(...) {}
#define glGetFragmentMaterialivSGIX_INDEX 781
#define glGetFragmentMaterialivSGIX_RETURN void
#define glGetFragmentMaterialivSGIX_ARG_NAMES face, pname, params
#define glGetFragmentMaterialivSGIX_ARG_EXPAND GLenum face, GLenum pname, GLint * params
#define glGetFragmentMaterialivSGIX_PACKED PACKED_void_GLenum_GLenum_GLint___GENPT__
#define glGetFragmentMaterialivSGIX_FORMAT FORMAT_void_GLenum_GLenum_GLint___GENPT__
#define glGetFragmentMaterialivSGIX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetFragmentMaterialivSGIX_NOT_VOID_WRAP(...) {}
#define glGetFramebufferAttachmentParameteriv_INDEX 782
#define glGetFramebufferAttachmentParameteriv_RETURN void
#define glGetFramebufferAttachmentParameteriv_ARG_NAMES target, attachment, pname, params
#define glGetFramebufferAttachmentParameteriv_ARG_EXPAND GLenum target, GLenum attachment, GLenum pname, GLint * params
#define glGetFramebufferAttachmentParameteriv_PACKED PACKED_void_GLenum_GLenum_GLenum_GLint___GENPT__
#define glGetFramebufferAttachmentParameteriv_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLint___GENPT__
#define glGetFramebufferAttachmentParameteriv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetFramebufferAttachmentParameteriv_NOT_VOID_WRAP(...) {}
#define glGetFramebufferAttachmentParameterivEXT_INDEX 783
#define glGetFramebufferAttachmentParameterivEXT_RETURN void
#define glGetFramebufferAttachmentParameterivEXT_ARG_NAMES target, attachment, pname, params
#define glGetFramebufferAttachmentParameterivEXT_ARG_EXPAND GLenum target, GLenum attachment, GLenum pname, GLint * params
#define glGetFramebufferAttachmentParameterivEXT_PACKED PACKED_void_GLenum_GLenum_GLenum_GLint___GENPT__
#define glGetFramebufferAttachmentParameterivEXT_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLint___GENPT__
#define glGetFramebufferAttachmentParameterivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetFramebufferAttachmentParameterivEXT_NOT_VOID_WRAP(...) {}
#define glGetFramebufferParameteriv_INDEX 784
#define glGetFramebufferParameteriv_RETURN void
#define glGetFramebufferParameteriv_ARG_NAMES target, pname, params
#define glGetFramebufferParameteriv_ARG_EXPAND GLenum target, GLenum pname, GLint * params
#define glGetFramebufferParameteriv_PACKED PACKED_void_GLenum_GLenum_GLint___GENPT__
#define glGetFramebufferParameteriv_FORMAT FORMAT_void_GLenum_GLenum_GLint___GENPT__
#define glGetFramebufferParameteriv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetFramebufferParameteriv_NOT_VOID_WRAP(...) {}
#define glGetFramebufferParameterivEXT_INDEX 785
#define glGetFramebufferParameterivEXT_RETURN void
#define glGetFramebufferParameterivEXT_ARG_NAMES framebuffer, pname, params
#define glGetFramebufferParameterivEXT_ARG_EXPAND GLuint framebuffer, GLenum pname, GLint * params
#define glGetFramebufferParameterivEXT_PACKED PACKED_void_GLuint_GLenum_GLint___GENPT__
#define glGetFramebufferParameterivEXT_FORMAT FORMAT_void_GLuint_GLenum_GLint___GENPT__
#define glGetFramebufferParameterivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetFramebufferParameterivEXT_NOT_VOID_WRAP(...) {}
#define glGetGraphicsResetStatusARB_INDEX 786
#define glGetGraphicsResetStatusARB_RETURN GLenum
#define glGetGraphicsResetStatusARB_ARG_NAMES 
#define glGetGraphicsResetStatusARB_ARG_EXPAND 
#define glGetGraphicsResetStatusARB_PACKED PACKED_GLenum
#define glGetGraphicsResetStatusARB_FORMAT FORMAT_GLenum
#define glGetGraphicsResetStatusARB_VOID_ONLY_WRAP(...) {}
#define glGetGraphicsResetStatusARB_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glGetHandleARB_INDEX 787
#define glGetHandleARB_RETURN GLhandleARB
#define glGetHandleARB_ARG_NAMES pname
#define glGetHandleARB_ARG_EXPAND GLenum pname
#define glGetHandleARB_PACKED PACKED_GLhandleARB_GLenum
#define glGetHandleARB_FORMAT FORMAT_GLhandleARB_GLenum
#define glGetHandleARB_VOID_ONLY_WRAP(...) {}
#define glGetHandleARB_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glGetHistogram_INDEX 788
#define glGetHistogram_RETURN void
#define glGetHistogram_ARG_NAMES target, reset, format, type, values
#define glGetHistogram_ARG_EXPAND GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid * values
#define glGetHistogram_PACKED PACKED_void_GLenum_GLboolean_GLenum_GLenum_GLvoid___GENPT__
#define glGetHistogram_FORMAT FORMAT_void_GLenum_GLboolean_GLenum_GLenum_GLvoid___GENPT__
#define glGetHistogram_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetHistogram_NOT_VOID_WRAP(...) {}
#define glGetHistogramEXT_INDEX 789
#define glGetHistogramEXT_RETURN void
#define glGetHistogramEXT_ARG_NAMES target, reset, format, type, values
#define glGetHistogramEXT_ARG_EXPAND GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid * values
#define glGetHistogramEXT_PACKED PACKED_void_GLenum_GLboolean_GLenum_GLenum_GLvoid___GENPT__
#define glGetHistogramEXT_FORMAT FORMAT_void_GLenum_GLboolean_GLenum_GLenum_GLvoid___GENPT__
#define glGetHistogramEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetHistogramEXT_NOT_VOID_WRAP(...) {}
#define glGetHistogramParameterfv_INDEX 790
#define glGetHistogramParameterfv_RETURN void
#define glGetHistogramParameterfv_ARG_NAMES target, pname, params
#define glGetHistogramParameterfv_ARG_EXPAND GLenum target, GLenum pname, GLfloat * params
#define glGetHistogramParameterfv_PACKED PACKED_void_GLenum_GLenum_GLfloat___GENPT__
#define glGetHistogramParameterfv_FORMAT FORMAT_void_GLenum_GLenum_GLfloat___GENPT__
#define glGetHistogramParameterfv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetHistogramParameterfv_NOT_VOID_WRAP(...) {}
#define glGetHistogramParameterfvEXT_INDEX 791
#define glGetHistogramParameterfvEXT_RETURN void
#define glGetHistogramParameterfvEXT_ARG_NAMES target, pname, params
#define glGetHistogramParameterfvEXT_ARG_EXPAND GLenum target, GLenum pname, GLfloat * params
#define glGetHistogramParameterfvEXT_PACKED PACKED_void_GLenum_GLenum_GLfloat___GENPT__
#define glGetHistogramParameterfvEXT_FORMAT FORMAT_void_GLenum_GLenum_GLfloat___GENPT__
#define glGetHistogramParameterfvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetHistogramParameterfvEXT_NOT_VOID_WRAP(...) {}
#define glGetHistogramParameteriv_INDEX 792
#define glGetHistogramParameteriv_RETURN void
#define glGetHistogramParameteriv_ARG_NAMES target, pname, params
#define glGetHistogramParameteriv_ARG_EXPAND GLenum target, GLenum pname, GLint * params
#define glGetHistogramParameteriv_PACKED PACKED_void_GLenum_GLenum_GLint___GENPT__
#define glGetHistogramParameteriv_FORMAT FORMAT_void_GLenum_GLenum_GLint___GENPT__
#define glGetHistogramParameteriv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetHistogramParameteriv_NOT_VOID_WRAP(...) {}
#define glGetHistogramParameterivEXT_INDEX 793
#define glGetHistogramParameterivEXT_RETURN void
#define glGetHistogramParameterivEXT_ARG_NAMES target, pname, params
#define glGetHistogramParameterivEXT_ARG_EXPAND GLenum target, GLenum pname, GLint * params
#define glGetHistogramParameterivEXT_PACKED PACKED_void_GLenum_GLenum_GLint___GENPT__
#define glGetHistogramParameterivEXT_FORMAT FORMAT_void_GLenum_GLenum_GLint___GENPT__
#define glGetHistogramParameterivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetHistogramParameterivEXT_NOT_VOID_WRAP(...) {}
#define glGetHistogramParameterxvOES_INDEX 794
#define glGetHistogramParameterxvOES_RETURN void
#define glGetHistogramParameterxvOES_ARG_NAMES target, pname, params
#define glGetHistogramParameterxvOES_ARG_EXPAND GLenum target, GLenum pname, GLfixed * params
#define glGetHistogramParameterxvOES_PACKED PACKED_void_GLenum_GLenum_GLfixed___GENPT__
#define glGetHistogramParameterxvOES_FORMAT FORMAT_void_GLenum_GLenum_GLfixed___GENPT__
#define glGetHistogramParameterxvOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetHistogramParameterxvOES_NOT_VOID_WRAP(...) {}
#define glGetImageHandleNV_INDEX 795
#define glGetImageHandleNV_RETURN GLuint64
#define glGetImageHandleNV_ARG_NAMES texture, level, layered, layer, format
#define glGetImageHandleNV_ARG_EXPAND GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format
#define glGetImageHandleNV_PACKED PACKED_GLuint64_GLuint_GLint_GLboolean_GLint_GLenum
#define glGetImageHandleNV_FORMAT FORMAT_GLuint64_GLuint_GLint_GLboolean_GLint_GLenum
#define glGetImageHandleNV_VOID_ONLY_WRAP(...) {}
#define glGetImageHandleNV_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glGetImageTransformParameterfvHP_INDEX 796
#define glGetImageTransformParameterfvHP_RETURN void
#define glGetImageTransformParameterfvHP_ARG_NAMES target, pname, params
#define glGetImageTransformParameterfvHP_ARG_EXPAND GLenum target, GLenum pname, GLfloat * params
#define glGetImageTransformParameterfvHP_PACKED PACKED_void_GLenum_GLenum_GLfloat___GENPT__
#define glGetImageTransformParameterfvHP_FORMAT FORMAT_void_GLenum_GLenum_GLfloat___GENPT__
#define glGetImageTransformParameterfvHP_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetImageTransformParameterfvHP_NOT_VOID_WRAP(...) {}
#define glGetImageTransformParameterivHP_INDEX 797
#define glGetImageTransformParameterivHP_RETURN void
#define glGetImageTransformParameterivHP_ARG_NAMES target, pname, params
#define glGetImageTransformParameterivHP_ARG_EXPAND GLenum target, GLenum pname, GLint * params
#define glGetImageTransformParameterivHP_PACKED PACKED_void_GLenum_GLenum_GLint___GENPT__
#define glGetImageTransformParameterivHP_FORMAT FORMAT_void_GLenum_GLenum_GLint___GENPT__
#define glGetImageTransformParameterivHP_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetImageTransformParameterivHP_NOT_VOID_WRAP(...) {}
#define glGetInfoLogARB_INDEX 798
#define glGetInfoLogARB_RETURN void
#define glGetInfoLogARB_ARG_NAMES obj, maxLength, length, infoLog
#define glGetInfoLogARB_ARG_EXPAND GLhandleARB obj, GLsizei maxLength, GLsizei * length, GLcharARB * infoLog
#define glGetInfoLogARB_PACKED PACKED_void_GLhandleARB_GLsizei_GLsizei___GENPT___GLcharARB___GENPT__
#define glGetInfoLogARB_FORMAT FORMAT_void_GLhandleARB_GLsizei_GLsizei___GENPT___GLcharARB___GENPT__
#define glGetInfoLogARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetInfoLogARB_NOT_VOID_WRAP(...) {}
#define glGetInstrumentsSGIX_INDEX 799
#define glGetInstrumentsSGIX_RETURN GLint
#define glGetInstrumentsSGIX_ARG_NAMES 
#define glGetInstrumentsSGIX_ARG_EXPAND 
#define glGetInstrumentsSGIX_PACKED PACKED_GLint
#define glGetInstrumentsSGIX_FORMAT FORMAT_GLint
#define glGetInstrumentsSGIX_VOID_ONLY_WRAP(...) {}
#define glGetInstrumentsSGIX_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glGetInteger64i_v_INDEX 800
#define glGetInteger64i_v_RETURN void
#define glGetInteger64i_v_ARG_NAMES target, index, data
#define glGetInteger64i_v_ARG_EXPAND GLenum target, GLuint index, GLint64 * data
#define glGetInteger64i_v_PACKED PACKED_void_GLenum_GLuint_GLint64___GENPT__
#define glGetInteger64i_v_FORMAT FORMAT_void_GLenum_GLuint_GLint64___GENPT__
#define glGetInteger64i_v_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetInteger64i_v_NOT_VOID_WRAP(...) {}
#define glGetInteger64v_INDEX 801
#define glGetInteger64v_RETURN void
#define glGetInteger64v_ARG_NAMES pname, params
#define glGetInteger64v_ARG_EXPAND GLenum pname, GLint64 * params
#define glGetInteger64v_PACKED PACKED_void_GLenum_GLint64___GENPT__
#define glGetInteger64v_FORMAT FORMAT_void_GLenum_GLint64___GENPT__
#define glGetInteger64v_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetInteger64v_NOT_VOID_WRAP(...) {}
#define glGetIntegerIndexedvEXT_INDEX 802
#define glGetIntegerIndexedvEXT_RETURN void
#define glGetIntegerIndexedvEXT_ARG_NAMES target, index, data
#define glGetIntegerIndexedvEXT_ARG_EXPAND GLenum target, GLuint index, GLint * data
#define glGetIntegerIndexedvEXT_PACKED PACKED_void_GLenum_GLuint_GLint___GENPT__
#define glGetIntegerIndexedvEXT_FORMAT FORMAT_void_GLenum_GLuint_GLint___GENPT__
#define glGetIntegerIndexedvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetIntegerIndexedvEXT_NOT_VOID_WRAP(...) {}
#define glGetIntegeri_v_INDEX 803
#define glGetIntegeri_v_RETURN void
#define glGetIntegeri_v_ARG_NAMES target, index, data
#define glGetIntegeri_v_ARG_EXPAND GLenum target, GLuint index, GLint * data
#define glGetIntegeri_v_PACKED PACKED_void_GLenum_GLuint_GLint___GENPT__
#define glGetIntegeri_v_FORMAT FORMAT_void_GLenum_GLuint_GLint___GENPT__
#define glGetIntegeri_v_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetIntegeri_v_NOT_VOID_WRAP(...) {}
#define glGetIntegerui64i_vNV_INDEX 804
#define glGetIntegerui64i_vNV_RETURN void
#define glGetIntegerui64i_vNV_ARG_NAMES value, index, result
#define glGetIntegerui64i_vNV_ARG_EXPAND GLenum value, GLuint index, GLuint64EXT * result
#define glGetIntegerui64i_vNV_PACKED PACKED_void_GLenum_GLuint_GLuint64EXT___GENPT__
#define glGetIntegerui64i_vNV_FORMAT FORMAT_void_GLenum_GLuint_GLuint64EXT___GENPT__
#define glGetIntegerui64i_vNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetIntegerui64i_vNV_NOT_VOID_WRAP(...) {}
#define glGetIntegerui64vNV_INDEX 805
#define glGetIntegerui64vNV_RETURN void
#define glGetIntegerui64vNV_ARG_NAMES value, result
#define glGetIntegerui64vNV_ARG_EXPAND GLenum value, GLuint64EXT * result
#define glGetIntegerui64vNV_PACKED PACKED_void_GLenum_GLuint64EXT___GENPT__
#define glGetIntegerui64vNV_FORMAT FORMAT_void_GLenum_GLuint64EXT___GENPT__
#define glGetIntegerui64vNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetIntegerui64vNV_NOT_VOID_WRAP(...) {}
#define glGetIntegerv_INDEX 806
#define glGetIntegerv_RETURN void
#define glGetIntegerv_ARG_NAMES pname, params
#define glGetIntegerv_ARG_EXPAND GLenum pname, GLint * params
#define glGetIntegerv_PACKED PACKED_void_GLenum_GLint___GENPT__
#define glGetIntegerv_FORMAT FORMAT_void_GLenum_GLint___GENPT__
#define glGetIntegerv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetIntegerv_NOT_VOID_WRAP(...) {}
#define glGetInternalformati64v_INDEX 807
#define glGetInternalformati64v_RETURN void
#define glGetInternalformati64v_ARG_NAMES target, internalformat, pname, bufSize, params
#define glGetInternalformati64v_ARG_EXPAND GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 * params
#define glGetInternalformati64v_PACKED PACKED_void_GLenum_GLenum_GLenum_GLsizei_GLint64___GENPT__
#define glGetInternalformati64v_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLsizei_GLint64___GENPT__
#define glGetInternalformati64v_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetInternalformati64v_NOT_VOID_WRAP(...) {}
#define glGetInternalformativ_INDEX 808
#define glGetInternalformativ_RETURN void
#define glGetInternalformativ_ARG_NAMES target, internalformat, pname, bufSize, params
#define glGetInternalformativ_ARG_EXPAND GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint * params
#define glGetInternalformativ_PACKED PACKED_void_GLenum_GLenum_GLenum_GLsizei_GLint___GENPT__
#define glGetInternalformativ_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLsizei_GLint___GENPT__
#define glGetInternalformativ_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetInternalformativ_NOT_VOID_WRAP(...) {}
#define glGetInvariantBooleanvEXT_INDEX 809
#define glGetInvariantBooleanvEXT_RETURN void
#define glGetInvariantBooleanvEXT_ARG_NAMES id, value, data
#define glGetInvariantBooleanvEXT_ARG_EXPAND GLuint id, GLenum value, GLboolean * data
#define glGetInvariantBooleanvEXT_PACKED PACKED_void_GLuint_GLenum_GLboolean___GENPT__
#define glGetInvariantBooleanvEXT_FORMAT FORMAT_void_GLuint_GLenum_GLboolean___GENPT__
#define glGetInvariantBooleanvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetInvariantBooleanvEXT_NOT_VOID_WRAP(...) {}
#define glGetInvariantFloatvEXT_INDEX 810
#define glGetInvariantFloatvEXT_RETURN void
#define glGetInvariantFloatvEXT_ARG_NAMES id, value, data
#define glGetInvariantFloatvEXT_ARG_EXPAND GLuint id, GLenum value, GLfloat * data
#define glGetInvariantFloatvEXT_PACKED PACKED_void_GLuint_GLenum_GLfloat___GENPT__
#define glGetInvariantFloatvEXT_FORMAT FORMAT_void_GLuint_GLenum_GLfloat___GENPT__
#define glGetInvariantFloatvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetInvariantFloatvEXT_NOT_VOID_WRAP(...) {}
#define glGetInvariantIntegervEXT_INDEX 811
#define glGetInvariantIntegervEXT_RETURN void
#define glGetInvariantIntegervEXT_ARG_NAMES id, value, data
#define glGetInvariantIntegervEXT_ARG_EXPAND GLuint id, GLenum value, GLint * data
#define glGetInvariantIntegervEXT_PACKED PACKED_void_GLuint_GLenum_GLint___GENPT__
#define glGetInvariantIntegervEXT_FORMAT FORMAT_void_GLuint_GLenum_GLint___GENPT__
#define glGetInvariantIntegervEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetInvariantIntegervEXT_NOT_VOID_WRAP(...) {}
#define glGetLightfv_INDEX 812
#define glGetLightfv_RETURN void
#define glGetLightfv_ARG_NAMES light, pname, params
#define glGetLightfv_ARG_EXPAND GLenum light, GLenum pname, GLfloat * params
#define glGetLightfv_PACKED PACKED_void_GLenum_GLenum_GLfloat___GENPT__
#define glGetLightfv_FORMAT FORMAT_void_GLenum_GLenum_GLfloat___GENPT__
#define glGetLightfv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetLightfv_NOT_VOID_WRAP(...) {}
#define glGetLightiv_INDEX 813
#define glGetLightiv_RETURN void
#define glGetLightiv_ARG_NAMES light, pname, params
#define glGetLightiv_ARG_EXPAND GLenum light, GLenum pname, GLint * params
#define glGetLightiv_PACKED PACKED_void_GLenum_GLenum_GLint___GENPT__
#define glGetLightiv_FORMAT FORMAT_void_GLenum_GLenum_GLint___GENPT__
#define glGetLightiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetLightiv_NOT_VOID_WRAP(...) {}
#define glGetLightxOES_INDEX 814
#define glGetLightxOES_RETURN void
#define glGetLightxOES_ARG_NAMES light, pname, params
#define glGetLightxOES_ARG_EXPAND GLenum light, GLenum pname, GLfixed * params
#define glGetLightxOES_PACKED PACKED_void_GLenum_GLenum_GLfixed___GENPT__
#define glGetLightxOES_FORMAT FORMAT_void_GLenum_GLenum_GLfixed___GENPT__
#define glGetLightxOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetLightxOES_NOT_VOID_WRAP(...) {}
#define glGetLightxv_INDEX 815
#define glGetLightxv_RETURN void
#define glGetLightxv_ARG_NAMES light, pname, params
#define glGetLightxv_ARG_EXPAND GLenum light, GLenum pname, GLfixed * params
#define glGetLightxv_PACKED PACKED_void_GLenum_GLenum_GLfixed___GENPT__
#define glGetLightxv_FORMAT FORMAT_void_GLenum_GLenum_GLfixed___GENPT__
#define glGetLightxv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetLightxv_NOT_VOID_WRAP(...) {}
#define glGetListParameterfvSGIX_INDEX 816
#define glGetListParameterfvSGIX_RETURN void
#define glGetListParameterfvSGIX_ARG_NAMES list, pname, params
#define glGetListParameterfvSGIX_ARG_EXPAND GLuint list, GLenum pname, GLfloat * params
#define glGetListParameterfvSGIX_PACKED PACKED_void_GLuint_GLenum_GLfloat___GENPT__
#define glGetListParameterfvSGIX_FORMAT FORMAT_void_GLuint_GLenum_GLfloat___GENPT__
#define glGetListParameterfvSGIX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetListParameterfvSGIX_NOT_VOID_WRAP(...) {}
#define glGetListParameterivSGIX_INDEX 817
#define glGetListParameterivSGIX_RETURN void
#define glGetListParameterivSGIX_ARG_NAMES list, pname, params
#define glGetListParameterivSGIX_ARG_EXPAND GLuint list, GLenum pname, GLint * params
#define glGetListParameterivSGIX_PACKED PACKED_void_GLuint_GLenum_GLint___GENPT__
#define glGetListParameterivSGIX_FORMAT FORMAT_void_GLuint_GLenum_GLint___GENPT__
#define glGetListParameterivSGIX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetListParameterivSGIX_NOT_VOID_WRAP(...) {}
#define glGetLocalConstantBooleanvEXT_INDEX 818
#define glGetLocalConstantBooleanvEXT_RETURN void
#define glGetLocalConstantBooleanvEXT_ARG_NAMES id, value, data
#define glGetLocalConstantBooleanvEXT_ARG_EXPAND GLuint id, GLenum value, GLboolean * data
#define glGetLocalConstantBooleanvEXT_PACKED PACKED_void_GLuint_GLenum_GLboolean___GENPT__
#define glGetLocalConstantBooleanvEXT_FORMAT FORMAT_void_GLuint_GLenum_GLboolean___GENPT__
#define glGetLocalConstantBooleanvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetLocalConstantBooleanvEXT_NOT_VOID_WRAP(...) {}
#define glGetLocalConstantFloatvEXT_INDEX 819
#define glGetLocalConstantFloatvEXT_RETURN void
#define glGetLocalConstantFloatvEXT_ARG_NAMES id, value, data
#define glGetLocalConstantFloatvEXT_ARG_EXPAND GLuint id, GLenum value, GLfloat * data
#define glGetLocalConstantFloatvEXT_PACKED PACKED_void_GLuint_GLenum_GLfloat___GENPT__
#define glGetLocalConstantFloatvEXT_FORMAT FORMAT_void_GLuint_GLenum_GLfloat___GENPT__
#define glGetLocalConstantFloatvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetLocalConstantFloatvEXT_NOT_VOID_WRAP(...) {}
#define glGetLocalConstantIntegervEXT_INDEX 820
#define glGetLocalConstantIntegervEXT_RETURN void
#define glGetLocalConstantIntegervEXT_ARG_NAMES id, value, data
#define glGetLocalConstantIntegervEXT_ARG_EXPAND GLuint id, GLenum value, GLint * data
#define glGetLocalConstantIntegervEXT_PACKED PACKED_void_GLuint_GLenum_GLint___GENPT__
#define glGetLocalConstantIntegervEXT_FORMAT FORMAT_void_GLuint_GLenum_GLint___GENPT__
#define glGetLocalConstantIntegervEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetLocalConstantIntegervEXT_NOT_VOID_WRAP(...) {}
#define glGetMapAttribParameterfvNV_INDEX 821
#define glGetMapAttribParameterfvNV_RETURN void
#define glGetMapAttribParameterfvNV_ARG_NAMES target, index, pname, params
#define glGetMapAttribParameterfvNV_ARG_EXPAND GLenum target, GLuint index, GLenum pname, GLfloat * params
#define glGetMapAttribParameterfvNV_PACKED PACKED_void_GLenum_GLuint_GLenum_GLfloat___GENPT__
#define glGetMapAttribParameterfvNV_FORMAT FORMAT_void_GLenum_GLuint_GLenum_GLfloat___GENPT__
#define glGetMapAttribParameterfvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetMapAttribParameterfvNV_NOT_VOID_WRAP(...) {}
#define glGetMapAttribParameterivNV_INDEX 822
#define glGetMapAttribParameterivNV_RETURN void
#define glGetMapAttribParameterivNV_ARG_NAMES target, index, pname, params
#define glGetMapAttribParameterivNV_ARG_EXPAND GLenum target, GLuint index, GLenum pname, GLint * params
#define glGetMapAttribParameterivNV_PACKED PACKED_void_GLenum_GLuint_GLenum_GLint___GENPT__
#define glGetMapAttribParameterivNV_FORMAT FORMAT_void_GLenum_GLuint_GLenum_GLint___GENPT__
#define glGetMapAttribParameterivNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetMapAttribParameterivNV_NOT_VOID_WRAP(...) {}
#define glGetMapControlPointsNV_INDEX 823
#define glGetMapControlPointsNV_RETURN void
#define glGetMapControlPointsNV_ARG_NAMES target, index, type, ustride, vstride, packed, points
#define glGetMapControlPointsNV_ARG_EXPAND GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, GLvoid * points
#define glGetMapControlPointsNV_PACKED PACKED_void_GLenum_GLuint_GLenum_GLsizei_GLsizei_GLboolean_GLvoid___GENPT__
#define glGetMapControlPointsNV_FORMAT FORMAT_void_GLenum_GLuint_GLenum_GLsizei_GLsizei_GLboolean_GLvoid___GENPT__
#define glGetMapControlPointsNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetMapControlPointsNV_NOT_VOID_WRAP(...) {}
#define glGetMapParameterfvNV_INDEX 824
#define glGetMapParameterfvNV_RETURN void
#define glGetMapParameterfvNV_ARG_NAMES target, pname, params
#define glGetMapParameterfvNV_ARG_EXPAND GLenum target, GLenum pname, GLfloat * params
#define glGetMapParameterfvNV_PACKED PACKED_void_GLenum_GLenum_GLfloat___GENPT__
#define glGetMapParameterfvNV_FORMAT FORMAT_void_GLenum_GLenum_GLfloat___GENPT__
#define glGetMapParameterfvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetMapParameterfvNV_NOT_VOID_WRAP(...) {}
#define glGetMapParameterivNV_INDEX 825
#define glGetMapParameterivNV_RETURN void
#define glGetMapParameterivNV_ARG_NAMES target, pname, params
#define glGetMapParameterivNV_ARG_EXPAND GLenum target, GLenum pname, GLint * params
#define glGetMapParameterivNV_PACKED PACKED_void_GLenum_GLenum_GLint___GENPT__
#define glGetMapParameterivNV_FORMAT FORMAT_void_GLenum_GLenum_GLint___GENPT__
#define glGetMapParameterivNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetMapParameterivNV_NOT_VOID_WRAP(...) {}
#define glGetMapdv_INDEX 826
#define glGetMapdv_RETURN void
#define glGetMapdv_ARG_NAMES target, query, v
#define glGetMapdv_ARG_EXPAND GLenum target, GLenum query, GLdouble * v
#define glGetMapdv_PACKED PACKED_void_GLenum_GLenum_GLdouble___GENPT__
#define glGetMapdv_FORMAT FORMAT_void_GLenum_GLenum_GLdouble___GENPT__
#define glGetMapdv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetMapdv_NOT_VOID_WRAP(...) {}
#define glGetMapfv_INDEX 827
#define glGetMapfv_RETURN void
#define glGetMapfv_ARG_NAMES target, query, v
#define glGetMapfv_ARG_EXPAND GLenum target, GLenum query, GLfloat * v
#define glGetMapfv_PACKED PACKED_void_GLenum_GLenum_GLfloat___GENPT__
#define glGetMapfv_FORMAT FORMAT_void_GLenum_GLenum_GLfloat___GENPT__
#define glGetMapfv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetMapfv_NOT_VOID_WRAP(...) {}
#define glGetMapiv_INDEX 828
#define glGetMapiv_RETURN void
#define glGetMapiv_ARG_NAMES target, query, v
#define glGetMapiv_ARG_EXPAND GLenum target, GLenum query, GLint * v
#define glGetMapiv_PACKED PACKED_void_GLenum_GLenum_GLint___GENPT__
#define glGetMapiv_FORMAT FORMAT_void_GLenum_GLenum_GLint___GENPT__
#define glGetMapiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetMapiv_NOT_VOID_WRAP(...) {}
#define glGetMapxvOES_INDEX 829
#define glGetMapxvOES_RETURN void
#define glGetMapxvOES_ARG_NAMES target, query, v
#define glGetMapxvOES_ARG_EXPAND GLenum target, GLenum query, GLfixed * v
#define glGetMapxvOES_PACKED PACKED_void_GLenum_GLenum_GLfixed___GENPT__
#define glGetMapxvOES_FORMAT FORMAT_void_GLenum_GLenum_GLfixed___GENPT__
#define glGetMapxvOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetMapxvOES_NOT_VOID_WRAP(...) {}
#define glGetMaterialfv_INDEX 830
#define glGetMaterialfv_RETURN void
#define glGetMaterialfv_ARG_NAMES face, pname, params
#define glGetMaterialfv_ARG_EXPAND GLenum face, GLenum pname, GLfloat * params
#define glGetMaterialfv_PACKED PACKED_void_GLenum_GLenum_GLfloat___GENPT__
#define glGetMaterialfv_FORMAT FORMAT_void_GLenum_GLenum_GLfloat___GENPT__
#define glGetMaterialfv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetMaterialfv_NOT_VOID_WRAP(...) {}
#define glGetMaterialiv_INDEX 831
#define glGetMaterialiv_RETURN void
#define glGetMaterialiv_ARG_NAMES face, pname, params
#define glGetMaterialiv_ARG_EXPAND GLenum face, GLenum pname, GLint * params
#define glGetMaterialiv_PACKED PACKED_void_GLenum_GLenum_GLint___GENPT__
#define glGetMaterialiv_FORMAT FORMAT_void_GLenum_GLenum_GLint___GENPT__
#define glGetMaterialiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetMaterialiv_NOT_VOID_WRAP(...) {}
#define glGetMaterialxOES_INDEX 832
#define glGetMaterialxOES_RETURN void
#define glGetMaterialxOES_ARG_NAMES face, pname, param
#define glGetMaterialxOES_ARG_EXPAND GLenum face, GLenum pname, GLfixed param
#define glGetMaterialxOES_PACKED PACKED_void_GLenum_GLenum_GLfixed
#define glGetMaterialxOES_FORMAT FORMAT_void_GLenum_GLenum_GLfixed
#define glGetMaterialxOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetMaterialxOES_NOT_VOID_WRAP(...) {}
#define glGetMaterialxv_INDEX 833
#define glGetMaterialxv_RETURN void
#define glGetMaterialxv_ARG_NAMES face, pname, params
#define glGetMaterialxv_ARG_EXPAND GLenum face, GLenum pname, GLfixed * params
#define glGetMaterialxv_PACKED PACKED_void_GLenum_GLenum_GLfixed___GENPT__
#define glGetMaterialxv_FORMAT FORMAT_void_GLenum_GLenum_GLfixed___GENPT__
#define glGetMaterialxv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetMaterialxv_NOT_VOID_WRAP(...) {}
#define glGetMinmax_INDEX 834
#define glGetMinmax_RETURN void
#define glGetMinmax_ARG_NAMES target, reset, format, type, values
#define glGetMinmax_ARG_EXPAND GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid * values
#define glGetMinmax_PACKED PACKED_void_GLenum_GLboolean_GLenum_GLenum_GLvoid___GENPT__
#define glGetMinmax_FORMAT FORMAT_void_GLenum_GLboolean_GLenum_GLenum_GLvoid___GENPT__
#define glGetMinmax_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetMinmax_NOT_VOID_WRAP(...) {}
#define glGetMinmaxEXT_INDEX 835
#define glGetMinmaxEXT_RETURN void
#define glGetMinmaxEXT_ARG_NAMES target, reset, format, type, values
#define glGetMinmaxEXT_ARG_EXPAND GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid * values
#define glGetMinmaxEXT_PACKED PACKED_void_GLenum_GLboolean_GLenum_GLenum_GLvoid___GENPT__
#define glGetMinmaxEXT_FORMAT FORMAT_void_GLenum_GLboolean_GLenum_GLenum_GLvoid___GENPT__
#define glGetMinmaxEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetMinmaxEXT_NOT_VOID_WRAP(...) {}
#define glGetMinmaxParameterfv_INDEX 836
#define glGetMinmaxParameterfv_RETURN void
#define glGetMinmaxParameterfv_ARG_NAMES target, pname, params
#define glGetMinmaxParameterfv_ARG_EXPAND GLenum target, GLenum pname, GLfloat * params
#define glGetMinmaxParameterfv_PACKED PACKED_void_GLenum_GLenum_GLfloat___GENPT__
#define glGetMinmaxParameterfv_FORMAT FORMAT_void_GLenum_GLenum_GLfloat___GENPT__
#define glGetMinmaxParameterfv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetMinmaxParameterfv_NOT_VOID_WRAP(...) {}
#define glGetMinmaxParameterfvEXT_INDEX 837
#define glGetMinmaxParameterfvEXT_RETURN void
#define glGetMinmaxParameterfvEXT_ARG_NAMES target, pname, params
#define glGetMinmaxParameterfvEXT_ARG_EXPAND GLenum target, GLenum pname, GLfloat * params
#define glGetMinmaxParameterfvEXT_PACKED PACKED_void_GLenum_GLenum_GLfloat___GENPT__
#define glGetMinmaxParameterfvEXT_FORMAT FORMAT_void_GLenum_GLenum_GLfloat___GENPT__
#define glGetMinmaxParameterfvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetMinmaxParameterfvEXT_NOT_VOID_WRAP(...) {}
#define glGetMinmaxParameteriv_INDEX 838
#define glGetMinmaxParameteriv_RETURN void
#define glGetMinmaxParameteriv_ARG_NAMES target, pname, params
#define glGetMinmaxParameteriv_ARG_EXPAND GLenum target, GLenum pname, GLint * params
#define glGetMinmaxParameteriv_PACKED PACKED_void_GLenum_GLenum_GLint___GENPT__
#define glGetMinmaxParameteriv_FORMAT FORMAT_void_GLenum_GLenum_GLint___GENPT__
#define glGetMinmaxParameteriv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetMinmaxParameteriv_NOT_VOID_WRAP(...) {}
#define glGetMinmaxParameterivEXT_INDEX 839
#define glGetMinmaxParameterivEXT_RETURN void
#define glGetMinmaxParameterivEXT_ARG_NAMES target, pname, params
#define glGetMinmaxParameterivEXT_ARG_EXPAND GLenum target, GLenum pname, GLint * params
#define glGetMinmaxParameterivEXT_PACKED PACKED_void_GLenum_GLenum_GLint___GENPT__
#define glGetMinmaxParameterivEXT_FORMAT FORMAT_void_GLenum_GLenum_GLint___GENPT__
#define glGetMinmaxParameterivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetMinmaxParameterivEXT_NOT_VOID_WRAP(...) {}
#define glGetMultiTexEnvfvEXT_INDEX 840
#define glGetMultiTexEnvfvEXT_RETURN void
#define glGetMultiTexEnvfvEXT_ARG_NAMES texunit, target, pname, params
#define glGetMultiTexEnvfvEXT_ARG_EXPAND GLenum texunit, GLenum target, GLenum pname, GLfloat * params
#define glGetMultiTexEnvfvEXT_PACKED PACKED_void_GLenum_GLenum_GLenum_GLfloat___GENPT__
#define glGetMultiTexEnvfvEXT_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLfloat___GENPT__
#define glGetMultiTexEnvfvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetMultiTexEnvfvEXT_NOT_VOID_WRAP(...) {}
#define glGetMultiTexEnvivEXT_INDEX 841
#define glGetMultiTexEnvivEXT_RETURN void
#define glGetMultiTexEnvivEXT_ARG_NAMES texunit, target, pname, params
#define glGetMultiTexEnvivEXT_ARG_EXPAND GLenum texunit, GLenum target, GLenum pname, GLint * params
#define glGetMultiTexEnvivEXT_PACKED PACKED_void_GLenum_GLenum_GLenum_GLint___GENPT__
#define glGetMultiTexEnvivEXT_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLint___GENPT__
#define glGetMultiTexEnvivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetMultiTexEnvivEXT_NOT_VOID_WRAP(...) {}
#define glGetMultiTexGendvEXT_INDEX 842
#define glGetMultiTexGendvEXT_RETURN void
#define glGetMultiTexGendvEXT_ARG_NAMES texunit, coord, pname, params
#define glGetMultiTexGendvEXT_ARG_EXPAND GLenum texunit, GLenum coord, GLenum pname, GLdouble * params
#define glGetMultiTexGendvEXT_PACKED PACKED_void_GLenum_GLenum_GLenum_GLdouble___GENPT__
#define glGetMultiTexGendvEXT_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLdouble___GENPT__
#define glGetMultiTexGendvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetMultiTexGendvEXT_NOT_VOID_WRAP(...) {}
#define glGetMultiTexGenfvEXT_INDEX 843
#define glGetMultiTexGenfvEXT_RETURN void
#define glGetMultiTexGenfvEXT_ARG_NAMES texunit, coord, pname, params
#define glGetMultiTexGenfvEXT_ARG_EXPAND GLenum texunit, GLenum coord, GLenum pname, GLfloat * params
#define glGetMultiTexGenfvEXT_PACKED PACKED_void_GLenum_GLenum_GLenum_GLfloat___GENPT__
#define glGetMultiTexGenfvEXT_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLfloat___GENPT__
#define glGetMultiTexGenfvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetMultiTexGenfvEXT_NOT_VOID_WRAP(...) {}
#define glGetMultiTexGenivEXT_INDEX 844
#define glGetMultiTexGenivEXT_RETURN void
#define glGetMultiTexGenivEXT_ARG_NAMES texunit, coord, pname, params
#define glGetMultiTexGenivEXT_ARG_EXPAND GLenum texunit, GLenum coord, GLenum pname, GLint * params
#define glGetMultiTexGenivEXT_PACKED PACKED_void_GLenum_GLenum_GLenum_GLint___GENPT__
#define glGetMultiTexGenivEXT_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLint___GENPT__
#define glGetMultiTexGenivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetMultiTexGenivEXT_NOT_VOID_WRAP(...) {}
#define glGetMultiTexImageEXT_INDEX 845
#define glGetMultiTexImageEXT_RETURN void
#define glGetMultiTexImageEXT_ARG_NAMES texunit, target, level, format, type, pixels
#define glGetMultiTexImageEXT_ARG_EXPAND GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, GLvoid * pixels
#define glGetMultiTexImageEXT_PACKED PACKED_void_GLenum_GLenum_GLint_GLenum_GLenum_GLvoid___GENPT__
#define glGetMultiTexImageEXT_FORMAT FORMAT_void_GLenum_GLenum_GLint_GLenum_GLenum_GLvoid___GENPT__
#define glGetMultiTexImageEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetMultiTexImageEXT_NOT_VOID_WRAP(...) {}
#define glGetMultiTexLevelParameterfvEXT_INDEX 846
#define glGetMultiTexLevelParameterfvEXT_RETURN void
#define glGetMultiTexLevelParameterfvEXT_ARG_NAMES texunit, target, level, pname, params
#define glGetMultiTexLevelParameterfvEXT_ARG_EXPAND GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat * params
#define glGetMultiTexLevelParameterfvEXT_PACKED PACKED_void_GLenum_GLenum_GLint_GLenum_GLfloat___GENPT__
#define glGetMultiTexLevelParameterfvEXT_FORMAT FORMAT_void_GLenum_GLenum_GLint_GLenum_GLfloat___GENPT__
#define glGetMultiTexLevelParameterfvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetMultiTexLevelParameterfvEXT_NOT_VOID_WRAP(...) {}
#define glGetMultiTexLevelParameterivEXT_INDEX 847
#define glGetMultiTexLevelParameterivEXT_RETURN void
#define glGetMultiTexLevelParameterivEXT_ARG_NAMES texunit, target, level, pname, params
#define glGetMultiTexLevelParameterivEXT_ARG_EXPAND GLenum texunit, GLenum target, GLint level, GLenum pname, GLint * params
#define glGetMultiTexLevelParameterivEXT_PACKED PACKED_void_GLenum_GLenum_GLint_GLenum_GLint___GENPT__
#define glGetMultiTexLevelParameterivEXT_FORMAT FORMAT_void_GLenum_GLenum_GLint_GLenum_GLint___GENPT__
#define glGetMultiTexLevelParameterivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetMultiTexLevelParameterivEXT_NOT_VOID_WRAP(...) {}
#define glGetMultiTexParameterIivEXT_INDEX 848
#define glGetMultiTexParameterIivEXT_RETURN void
#define glGetMultiTexParameterIivEXT_ARG_NAMES texunit, target, pname, params
#define glGetMultiTexParameterIivEXT_ARG_EXPAND GLenum texunit, GLenum target, GLenum pname, GLint * params
#define glGetMultiTexParameterIivEXT_PACKED PACKED_void_GLenum_GLenum_GLenum_GLint___GENPT__
#define glGetMultiTexParameterIivEXT_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLint___GENPT__
#define glGetMultiTexParameterIivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetMultiTexParameterIivEXT_NOT_VOID_WRAP(...) {}
#define glGetMultiTexParameterIuivEXT_INDEX 849
#define glGetMultiTexParameterIuivEXT_RETURN void
#define glGetMultiTexParameterIuivEXT_ARG_NAMES texunit, target, pname, params
#define glGetMultiTexParameterIuivEXT_ARG_EXPAND GLenum texunit, GLenum target, GLenum pname, GLuint * params
#define glGetMultiTexParameterIuivEXT_PACKED PACKED_void_GLenum_GLenum_GLenum_GLuint___GENPT__
#define glGetMultiTexParameterIuivEXT_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLuint___GENPT__
#define glGetMultiTexParameterIuivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetMultiTexParameterIuivEXT_NOT_VOID_WRAP(...) {}
#define glGetMultiTexParameterfvEXT_INDEX 850
#define glGetMultiTexParameterfvEXT_RETURN void
#define glGetMultiTexParameterfvEXT_ARG_NAMES texunit, target, pname, params
#define glGetMultiTexParameterfvEXT_ARG_EXPAND GLenum texunit, GLenum target, GLenum pname, GLfloat * params
#define glGetMultiTexParameterfvEXT_PACKED PACKED_void_GLenum_GLenum_GLenum_GLfloat___GENPT__
#define glGetMultiTexParameterfvEXT_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLfloat___GENPT__
#define glGetMultiTexParameterfvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetMultiTexParameterfvEXT_NOT_VOID_WRAP(...) {}
#define glGetMultiTexParameterivEXT_INDEX 851
#define glGetMultiTexParameterivEXT_RETURN void
#define glGetMultiTexParameterivEXT_ARG_NAMES texunit, target, pname, params
#define glGetMultiTexParameterivEXT_ARG_EXPAND GLenum texunit, GLenum target, GLenum pname, GLint * params
#define glGetMultiTexParameterivEXT_PACKED PACKED_void_GLenum_GLenum_GLenum_GLint___GENPT__
#define glGetMultiTexParameterivEXT_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLint___GENPT__
#define glGetMultiTexParameterivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetMultiTexParameterivEXT_NOT_VOID_WRAP(...) {}
#define glGetMultisamplefv_INDEX 852
#define glGetMultisamplefv_RETURN void
#define glGetMultisamplefv_ARG_NAMES pname, index, val
#define glGetMultisamplefv_ARG_EXPAND GLenum pname, GLuint index, GLfloat * val
#define glGetMultisamplefv_PACKED PACKED_void_GLenum_GLuint_GLfloat___GENPT__
#define glGetMultisamplefv_FORMAT FORMAT_void_GLenum_GLuint_GLfloat___GENPT__
#define glGetMultisamplefv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetMultisamplefv_NOT_VOID_WRAP(...) {}
#define glGetMultisamplefvNV_INDEX 853
#define glGetMultisamplefvNV_RETURN void
#define glGetMultisamplefvNV_ARG_NAMES pname, index, val
#define glGetMultisamplefvNV_ARG_EXPAND GLenum pname, GLuint index, GLfloat * val
#define glGetMultisamplefvNV_PACKED PACKED_void_GLenum_GLuint_GLfloat___GENPT__
#define glGetMultisamplefvNV_FORMAT FORMAT_void_GLenum_GLuint_GLfloat___GENPT__
#define glGetMultisamplefvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetMultisamplefvNV_NOT_VOID_WRAP(...) {}
#define glGetNamedBufferParameterivEXT_INDEX 854
#define glGetNamedBufferParameterivEXT_RETURN void
#define glGetNamedBufferParameterivEXT_ARG_NAMES buffer, pname, params
#define glGetNamedBufferParameterivEXT_ARG_EXPAND GLuint buffer, GLenum pname, GLint * params
#define glGetNamedBufferParameterivEXT_PACKED PACKED_void_GLuint_GLenum_GLint___GENPT__
#define glGetNamedBufferParameterivEXT_FORMAT FORMAT_void_GLuint_GLenum_GLint___GENPT__
#define glGetNamedBufferParameterivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetNamedBufferParameterivEXT_NOT_VOID_WRAP(...) {}
#define glGetNamedBufferParameterui64vNV_INDEX 855
#define glGetNamedBufferParameterui64vNV_RETURN void
#define glGetNamedBufferParameterui64vNV_ARG_NAMES buffer, pname, params
#define glGetNamedBufferParameterui64vNV_ARG_EXPAND GLuint buffer, GLenum pname, GLuint64EXT * params
#define glGetNamedBufferParameterui64vNV_PACKED PACKED_void_GLuint_GLenum_GLuint64EXT___GENPT__
#define glGetNamedBufferParameterui64vNV_FORMAT FORMAT_void_GLuint_GLenum_GLuint64EXT___GENPT__
#define glGetNamedBufferParameterui64vNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetNamedBufferParameterui64vNV_NOT_VOID_WRAP(...) {}
#define glGetNamedBufferPointervEXT_INDEX 856
#define glGetNamedBufferPointervEXT_RETURN void
#define glGetNamedBufferPointervEXT_ARG_NAMES buffer, pname, params
#define glGetNamedBufferPointervEXT_ARG_EXPAND GLuint buffer, GLenum pname, GLvoid * params
#define glGetNamedBufferPointervEXT_PACKED PACKED_void_GLuint_GLenum_GLvoid___GENPT__
#define glGetNamedBufferPointervEXT_FORMAT FORMAT_void_GLuint_GLenum_GLvoid___GENPT__
#define glGetNamedBufferPointervEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetNamedBufferPointervEXT_NOT_VOID_WRAP(...) {}
#define glGetNamedBufferSubDataEXT_INDEX 857
#define glGetNamedBufferSubDataEXT_RETURN void
#define glGetNamedBufferSubDataEXT_ARG_NAMES buffer, offset, size, data
#define glGetNamedBufferSubDataEXT_ARG_EXPAND GLuint buffer, GLintptr offset, GLsizeiptr size, GLvoid * data
#define glGetNamedBufferSubDataEXT_PACKED PACKED_void_GLuint_GLintptr_GLsizeiptr_GLvoid___GENPT__
#define glGetNamedBufferSubDataEXT_FORMAT FORMAT_void_GLuint_GLintptr_GLsizeiptr_GLvoid___GENPT__
#define glGetNamedBufferSubDataEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetNamedBufferSubDataEXT_NOT_VOID_WRAP(...) {}
#define glGetNamedFramebufferAttachmentParameterivEXT_INDEX 858
#define glGetNamedFramebufferAttachmentParameterivEXT_RETURN void
#define glGetNamedFramebufferAttachmentParameterivEXT_ARG_NAMES framebuffer, attachment, pname, params
#define glGetNamedFramebufferAttachmentParameterivEXT_ARG_EXPAND GLuint framebuffer, GLenum attachment, GLenum pname, GLint * params
#define glGetNamedFramebufferAttachmentParameterivEXT_PACKED PACKED_void_GLuint_GLenum_GLenum_GLint___GENPT__
#define glGetNamedFramebufferAttachmentParameterivEXT_FORMAT FORMAT_void_GLuint_GLenum_GLenum_GLint___GENPT__
#define glGetNamedFramebufferAttachmentParameterivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetNamedFramebufferAttachmentParameterivEXT_NOT_VOID_WRAP(...) {}
#define glGetNamedFramebufferParameterivEXT_INDEX 859
#define glGetNamedFramebufferParameterivEXT_RETURN void
#define glGetNamedFramebufferParameterivEXT_ARG_NAMES framebuffer, pname, params
#define glGetNamedFramebufferParameterivEXT_ARG_EXPAND GLuint framebuffer, GLenum pname, GLint * params
#define glGetNamedFramebufferParameterivEXT_PACKED PACKED_void_GLuint_GLenum_GLint___GENPT__
#define glGetNamedFramebufferParameterivEXT_FORMAT FORMAT_void_GLuint_GLenum_GLint___GENPT__
#define glGetNamedFramebufferParameterivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetNamedFramebufferParameterivEXT_NOT_VOID_WRAP(...) {}
#define glGetNamedProgramLocalParameterIivEXT_INDEX 860
#define glGetNamedProgramLocalParameterIivEXT_RETURN void
#define glGetNamedProgramLocalParameterIivEXT_ARG_NAMES program, target, index, params
#define glGetNamedProgramLocalParameterIivEXT_ARG_EXPAND GLuint program, GLenum target, GLuint index, GLint * params
#define glGetNamedProgramLocalParameterIivEXT_PACKED PACKED_void_GLuint_GLenum_GLuint_GLint___GENPT__
#define glGetNamedProgramLocalParameterIivEXT_FORMAT FORMAT_void_GLuint_GLenum_GLuint_GLint___GENPT__
#define glGetNamedProgramLocalParameterIivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetNamedProgramLocalParameterIivEXT_NOT_VOID_WRAP(...) {}
#define glGetNamedProgramLocalParameterIuivEXT_INDEX 861
#define glGetNamedProgramLocalParameterIuivEXT_RETURN void
#define glGetNamedProgramLocalParameterIuivEXT_ARG_NAMES program, target, index, params
#define glGetNamedProgramLocalParameterIuivEXT_ARG_EXPAND GLuint program, GLenum target, GLuint index, GLuint * params
#define glGetNamedProgramLocalParameterIuivEXT_PACKED PACKED_void_GLuint_GLenum_GLuint_GLuint___GENPT__
#define glGetNamedProgramLocalParameterIuivEXT_FORMAT FORMAT_void_GLuint_GLenum_GLuint_GLuint___GENPT__
#define glGetNamedProgramLocalParameterIuivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetNamedProgramLocalParameterIuivEXT_NOT_VOID_WRAP(...) {}
#define glGetNamedProgramLocalParameterdvEXT_INDEX 862
#define glGetNamedProgramLocalParameterdvEXT_RETURN void
#define glGetNamedProgramLocalParameterdvEXT_ARG_NAMES program, target, index, params
#define glGetNamedProgramLocalParameterdvEXT_ARG_EXPAND GLuint program, GLenum target, GLuint index, GLdouble * params
#define glGetNamedProgramLocalParameterdvEXT_PACKED PACKED_void_GLuint_GLenum_GLuint_GLdouble___GENPT__
#define glGetNamedProgramLocalParameterdvEXT_FORMAT FORMAT_void_GLuint_GLenum_GLuint_GLdouble___GENPT__
#define glGetNamedProgramLocalParameterdvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetNamedProgramLocalParameterdvEXT_NOT_VOID_WRAP(...) {}
#define glGetNamedProgramLocalParameterfvEXT_INDEX 863
#define glGetNamedProgramLocalParameterfvEXT_RETURN void
#define glGetNamedProgramLocalParameterfvEXT_ARG_NAMES program, target, index, params
#define glGetNamedProgramLocalParameterfvEXT_ARG_EXPAND GLuint program, GLenum target, GLuint index, GLfloat * params
#define glGetNamedProgramLocalParameterfvEXT_PACKED PACKED_void_GLuint_GLenum_GLuint_GLfloat___GENPT__
#define glGetNamedProgramLocalParameterfvEXT_FORMAT FORMAT_void_GLuint_GLenum_GLuint_GLfloat___GENPT__
#define glGetNamedProgramLocalParameterfvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetNamedProgramLocalParameterfvEXT_NOT_VOID_WRAP(...) {}
#define glGetNamedProgramStringEXT_INDEX 864
#define glGetNamedProgramStringEXT_RETURN void
#define glGetNamedProgramStringEXT_ARG_NAMES program, target, pname, string
#define glGetNamedProgramStringEXT_ARG_EXPAND GLuint program, GLenum target, GLenum pname, GLvoid * string
#define glGetNamedProgramStringEXT_PACKED PACKED_void_GLuint_GLenum_GLenum_GLvoid___GENPT__
#define glGetNamedProgramStringEXT_FORMAT FORMAT_void_GLuint_GLenum_GLenum_GLvoid___GENPT__
#define glGetNamedProgramStringEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetNamedProgramStringEXT_NOT_VOID_WRAP(...) {}
#define glGetNamedProgramivEXT_INDEX 865
#define glGetNamedProgramivEXT_RETURN void
#define glGetNamedProgramivEXT_ARG_NAMES program, target, pname, params
#define glGetNamedProgramivEXT_ARG_EXPAND GLuint program, GLenum target, GLenum pname, GLint * params
#define glGetNamedProgramivEXT_PACKED PACKED_void_GLuint_GLenum_GLenum_GLint___GENPT__
#define glGetNamedProgramivEXT_FORMAT FORMAT_void_GLuint_GLenum_GLenum_GLint___GENPT__
#define glGetNamedProgramivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetNamedProgramivEXT_NOT_VOID_WRAP(...) {}
#define glGetNamedRenderbufferParameterivEXT_INDEX 866
#define glGetNamedRenderbufferParameterivEXT_RETURN void
#define glGetNamedRenderbufferParameterivEXT_ARG_NAMES renderbuffer, pname, params
#define glGetNamedRenderbufferParameterivEXT_ARG_EXPAND GLuint renderbuffer, GLenum pname, GLint * params
#define glGetNamedRenderbufferParameterivEXT_PACKED PACKED_void_GLuint_GLenum_GLint___GENPT__
#define glGetNamedRenderbufferParameterivEXT_FORMAT FORMAT_void_GLuint_GLenum_GLint___GENPT__
#define glGetNamedRenderbufferParameterivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetNamedRenderbufferParameterivEXT_NOT_VOID_WRAP(...) {}
#define glGetNamedStringARB_INDEX 867
#define glGetNamedStringARB_RETURN void
#define glGetNamedStringARB_ARG_NAMES namelen, name, bufSize, stringlen, string
#define glGetNamedStringARB_ARG_EXPAND GLint namelen, const GLchar * name, GLsizei bufSize, GLint * stringlen, GLchar * string
#define glGetNamedStringARB_PACKED PACKED_void_GLint_const_GLchar___GENPT___GLsizei_GLint___GENPT___GLchar___GENPT__
#define glGetNamedStringARB_FORMAT FORMAT_void_GLint_const_GLchar___GENPT___GLsizei_GLint___GENPT___GLchar___GENPT__
#define glGetNamedStringARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetNamedStringARB_NOT_VOID_WRAP(...) {}
#define glGetNamedStringivARB_INDEX 868
#define glGetNamedStringivARB_RETURN void
#define glGetNamedStringivARB_ARG_NAMES namelen, name, pname, params
#define glGetNamedStringivARB_ARG_EXPAND GLint namelen, const GLchar * name, GLenum pname, GLint * params
#define glGetNamedStringivARB_PACKED PACKED_void_GLint_const_GLchar___GENPT___GLenum_GLint___GENPT__
#define glGetNamedStringivARB_FORMAT FORMAT_void_GLint_const_GLchar___GENPT___GLenum_GLint___GENPT__
#define glGetNamedStringivARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetNamedStringivARB_NOT_VOID_WRAP(...) {}
#define glGetObjectBufferfvATI_INDEX 869
#define glGetObjectBufferfvATI_RETURN void
#define glGetObjectBufferfvATI_ARG_NAMES buffer, pname, params
#define glGetObjectBufferfvATI_ARG_EXPAND GLuint buffer, GLenum pname, GLfloat * params
#define glGetObjectBufferfvATI_PACKED PACKED_void_GLuint_GLenum_GLfloat___GENPT__
#define glGetObjectBufferfvATI_FORMAT FORMAT_void_GLuint_GLenum_GLfloat___GENPT__
#define glGetObjectBufferfvATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetObjectBufferfvATI_NOT_VOID_WRAP(...) {}
#define glGetObjectBufferivATI_INDEX 870
#define glGetObjectBufferivATI_RETURN void
#define glGetObjectBufferivATI_ARG_NAMES buffer, pname, params
#define glGetObjectBufferivATI_ARG_EXPAND GLuint buffer, GLenum pname, GLint * params
#define glGetObjectBufferivATI_PACKED PACKED_void_GLuint_GLenum_GLint___GENPT__
#define glGetObjectBufferivATI_FORMAT FORMAT_void_GLuint_GLenum_GLint___GENPT__
#define glGetObjectBufferivATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetObjectBufferivATI_NOT_VOID_WRAP(...) {}
#define glGetObjectLabel_INDEX 871
#define glGetObjectLabel_RETURN void
#define glGetObjectLabel_ARG_NAMES identifier, name, bufSize, length, label
#define glGetObjectLabel_ARG_EXPAND GLenum identifier, GLuint name, GLsizei bufSize, GLsizei * length, GLchar * label
#define glGetObjectLabel_PACKED PACKED_void_GLenum_GLuint_GLsizei_GLsizei___GENPT___GLchar___GENPT__
#define glGetObjectLabel_FORMAT FORMAT_void_GLenum_GLuint_GLsizei_GLsizei___GENPT___GLchar___GENPT__
#define glGetObjectLabel_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetObjectLabel_NOT_VOID_WRAP(...) {}
#define glGetObjectParameterfvARB_INDEX 872
#define glGetObjectParameterfvARB_RETURN void
#define glGetObjectParameterfvARB_ARG_NAMES obj, pname, params
#define glGetObjectParameterfvARB_ARG_EXPAND GLhandleARB obj, GLenum pname, GLfloat * params
#define glGetObjectParameterfvARB_PACKED PACKED_void_GLhandleARB_GLenum_GLfloat___GENPT__
#define glGetObjectParameterfvARB_FORMAT FORMAT_void_GLhandleARB_GLenum_GLfloat___GENPT__
#define glGetObjectParameterfvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetObjectParameterfvARB_NOT_VOID_WRAP(...) {}
#define glGetObjectParameterivAPPLE_INDEX 873
#define glGetObjectParameterivAPPLE_RETURN void
#define glGetObjectParameterivAPPLE_ARG_NAMES objectType, name, pname, params
#define glGetObjectParameterivAPPLE_ARG_EXPAND GLenum objectType, GLuint name, GLenum pname, GLint * params
#define glGetObjectParameterivAPPLE_PACKED PACKED_void_GLenum_GLuint_GLenum_GLint___GENPT__
#define glGetObjectParameterivAPPLE_FORMAT FORMAT_void_GLenum_GLuint_GLenum_GLint___GENPT__
#define glGetObjectParameterivAPPLE_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetObjectParameterivAPPLE_NOT_VOID_WRAP(...) {}
#define glGetObjectParameterivARB_INDEX 874
#define glGetObjectParameterivARB_RETURN void
#define glGetObjectParameterivARB_ARG_NAMES obj, pname, params
#define glGetObjectParameterivARB_ARG_EXPAND GLhandleARB obj, GLenum pname, GLint * params
#define glGetObjectParameterivARB_PACKED PACKED_void_GLhandleARB_GLenum_GLint___GENPT__
#define glGetObjectParameterivARB_FORMAT FORMAT_void_GLhandleARB_GLenum_GLint___GENPT__
#define glGetObjectParameterivARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetObjectParameterivARB_NOT_VOID_WRAP(...) {}
#define glGetObjectPtrLabel_INDEX 875
#define glGetObjectPtrLabel_RETURN void
#define glGetObjectPtrLabel_ARG_NAMES ptr, bufSize, length, label
#define glGetObjectPtrLabel_ARG_EXPAND const void * ptr, GLsizei bufSize, GLsizei * length, GLchar * label
#define glGetObjectPtrLabel_PACKED PACKED_void_const_void___GENPT___GLsizei_GLsizei___GENPT___GLchar___GENPT__
#define glGetObjectPtrLabel_FORMAT FORMAT_void_const_void___GENPT___GLsizei_GLsizei___GENPT___GLchar___GENPT__
#define glGetObjectPtrLabel_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetObjectPtrLabel_NOT_VOID_WRAP(...) {}
#define glGetOcclusionQueryivNV_INDEX 876
#define glGetOcclusionQueryivNV_RETURN void
#define glGetOcclusionQueryivNV_ARG_NAMES id, pname, params
#define glGetOcclusionQueryivNV_ARG_EXPAND GLuint id, GLenum pname, GLint * params
#define glGetOcclusionQueryivNV_PACKED PACKED_void_GLuint_GLenum_GLint___GENPT__
#define glGetOcclusionQueryivNV_FORMAT FORMAT_void_GLuint_GLenum_GLint___GENPT__
#define glGetOcclusionQueryivNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetOcclusionQueryivNV_NOT_VOID_WRAP(...) {}
#define glGetOcclusionQueryuivNV_INDEX 877
#define glGetOcclusionQueryuivNV_RETURN void
#define glGetOcclusionQueryuivNV_ARG_NAMES id, pname, params
#define glGetOcclusionQueryuivNV_ARG_EXPAND GLuint id, GLenum pname, GLuint * params
#define glGetOcclusionQueryuivNV_PACKED PACKED_void_GLuint_GLenum_GLuint___GENPT__
#define glGetOcclusionQueryuivNV_FORMAT FORMAT_void_GLuint_GLenum_GLuint___GENPT__
#define glGetOcclusionQueryuivNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetOcclusionQueryuivNV_NOT_VOID_WRAP(...) {}
#define glGetPathColorGenfvNV_INDEX 878
#define glGetPathColorGenfvNV_RETURN void
#define glGetPathColorGenfvNV_ARG_NAMES color, pname, value
#define glGetPathColorGenfvNV_ARG_EXPAND GLenum color, GLenum pname, GLfloat * value
#define glGetPathColorGenfvNV_PACKED PACKED_void_GLenum_GLenum_GLfloat___GENPT__
#define glGetPathColorGenfvNV_FORMAT FORMAT_void_GLenum_GLenum_GLfloat___GENPT__
#define glGetPathColorGenfvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetPathColorGenfvNV_NOT_VOID_WRAP(...) {}
#define glGetPathColorGenivNV_INDEX 879
#define glGetPathColorGenivNV_RETURN void
#define glGetPathColorGenivNV_ARG_NAMES color, pname, value
#define glGetPathColorGenivNV_ARG_EXPAND GLenum color, GLenum pname, GLint * value
#define glGetPathColorGenivNV_PACKED PACKED_void_GLenum_GLenum_GLint___GENPT__
#define glGetPathColorGenivNV_FORMAT FORMAT_void_GLenum_GLenum_GLint___GENPT__
#define glGetPathColorGenivNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetPathColorGenivNV_NOT_VOID_WRAP(...) {}
#define glGetPathCommandsNV_INDEX 880
#define glGetPathCommandsNV_RETURN void
#define glGetPathCommandsNV_ARG_NAMES path, commands
#define glGetPathCommandsNV_ARG_EXPAND GLuint path, GLubyte * commands
#define glGetPathCommandsNV_PACKED PACKED_void_GLuint_GLubyte___GENPT__
#define glGetPathCommandsNV_FORMAT FORMAT_void_GLuint_GLubyte___GENPT__
#define glGetPathCommandsNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetPathCommandsNV_NOT_VOID_WRAP(...) {}
#define glGetPathCoordsNV_INDEX 881
#define glGetPathCoordsNV_RETURN void
#define glGetPathCoordsNV_ARG_NAMES path, coords
#define glGetPathCoordsNV_ARG_EXPAND GLuint path, GLfloat * coords
#define glGetPathCoordsNV_PACKED PACKED_void_GLuint_GLfloat___GENPT__
#define glGetPathCoordsNV_FORMAT FORMAT_void_GLuint_GLfloat___GENPT__
#define glGetPathCoordsNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetPathCoordsNV_NOT_VOID_WRAP(...) {}
#define glGetPathDashArrayNV_INDEX 882
#define glGetPathDashArrayNV_RETURN void
#define glGetPathDashArrayNV_ARG_NAMES path, dashArray
#define glGetPathDashArrayNV_ARG_EXPAND GLuint path, GLfloat * dashArray
#define glGetPathDashArrayNV_PACKED PACKED_void_GLuint_GLfloat___GENPT__
#define glGetPathDashArrayNV_FORMAT FORMAT_void_GLuint_GLfloat___GENPT__
#define glGetPathDashArrayNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetPathDashArrayNV_NOT_VOID_WRAP(...) {}
#define glGetPathLengthNV_INDEX 883
#define glGetPathLengthNV_RETURN GLfloat
#define glGetPathLengthNV_ARG_NAMES path, startSegment, numSegments
#define glGetPathLengthNV_ARG_EXPAND GLuint path, GLsizei startSegment, GLsizei numSegments
#define glGetPathLengthNV_PACKED PACKED_GLfloat_GLuint_GLsizei_GLsizei
#define glGetPathLengthNV_FORMAT FORMAT_GLfloat_GLuint_GLsizei_GLsizei
#define glGetPathLengthNV_VOID_ONLY_WRAP(...) {}
#define glGetPathLengthNV_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glGetPathMetricRangeNV_INDEX 884
#define glGetPathMetricRangeNV_RETURN void
#define glGetPathMetricRangeNV_ARG_NAMES metricQueryMask, firstPathName, numPaths, stride, metrics
#define glGetPathMetricRangeNV_ARG_EXPAND GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat * metrics
#define glGetPathMetricRangeNV_PACKED PACKED_void_GLbitfield_GLuint_GLsizei_GLsizei_GLfloat___GENPT__
#define glGetPathMetricRangeNV_FORMAT FORMAT_void_GLbitfield_GLuint_GLsizei_GLsizei_GLfloat___GENPT__
#define glGetPathMetricRangeNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetPathMetricRangeNV_NOT_VOID_WRAP(...) {}
#define glGetPathMetricsNV_INDEX 885
#define glGetPathMetricsNV_RETURN void
#define glGetPathMetricsNV_ARG_NAMES metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics
#define glGetPathMetricsNV_ARG_EXPAND GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const GLvoid * paths, GLuint pathBase, GLsizei stride, GLfloat * metrics
#define glGetPathMetricsNV_PACKED PACKED_void_GLbitfield_GLsizei_GLenum_const_GLvoid___GENPT___GLuint_GLsizei_GLfloat___GENPT__
#define glGetPathMetricsNV_FORMAT FORMAT_void_GLbitfield_GLsizei_GLenum_const_GLvoid___GENPT___GLuint_GLsizei_GLfloat___GENPT__
#define glGetPathMetricsNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetPathMetricsNV_NOT_VOID_WRAP(...) {}
#define glGetPathParameterfvNV_INDEX 886
#define glGetPathParameterfvNV_RETURN void
#define glGetPathParameterfvNV_ARG_NAMES path, pname, value
#define glGetPathParameterfvNV_ARG_EXPAND GLuint path, GLenum pname, GLfloat * value
#define glGetPathParameterfvNV_PACKED PACKED_void_GLuint_GLenum_GLfloat___GENPT__
#define glGetPathParameterfvNV_FORMAT FORMAT_void_GLuint_GLenum_GLfloat___GENPT__
#define glGetPathParameterfvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetPathParameterfvNV_NOT_VOID_WRAP(...) {}
#define glGetPathParameterivNV_INDEX 887
#define glGetPathParameterivNV_RETURN void
#define glGetPathParameterivNV_ARG_NAMES path, pname, value
#define glGetPathParameterivNV_ARG_EXPAND GLuint path, GLenum pname, GLint * value
#define glGetPathParameterivNV_PACKED PACKED_void_GLuint_GLenum_GLint___GENPT__
#define glGetPathParameterivNV_FORMAT FORMAT_void_GLuint_GLenum_GLint___GENPT__
#define glGetPathParameterivNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetPathParameterivNV_NOT_VOID_WRAP(...) {}
#define glGetPathSpacingNV_INDEX 888
#define glGetPathSpacingNV_RETURN void
#define glGetPathSpacingNV_ARG_NAMES pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing
#define glGetPathSpacingNV_ARG_EXPAND GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const GLvoid * paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat * returnedSpacing
#define glGetPathSpacingNV_PACKED PACKED_void_GLenum_GLsizei_GLenum_const_GLvoid___GENPT___GLuint_GLfloat_GLfloat_GLenum_GLfloat___GENPT__
#define glGetPathSpacingNV_FORMAT FORMAT_void_GLenum_GLsizei_GLenum_const_GLvoid___GENPT___GLuint_GLfloat_GLfloat_GLenum_GLfloat___GENPT__
#define glGetPathSpacingNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetPathSpacingNV_NOT_VOID_WRAP(...) {}
#define glGetPathTexGenfvNV_INDEX 889
#define glGetPathTexGenfvNV_RETURN void
#define glGetPathTexGenfvNV_ARG_NAMES texCoordSet, pname, value
#define glGetPathTexGenfvNV_ARG_EXPAND GLenum texCoordSet, GLenum pname, GLfloat * value
#define glGetPathTexGenfvNV_PACKED PACKED_void_GLenum_GLenum_GLfloat___GENPT__
#define glGetPathTexGenfvNV_FORMAT FORMAT_void_GLenum_GLenum_GLfloat___GENPT__
#define glGetPathTexGenfvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetPathTexGenfvNV_NOT_VOID_WRAP(...) {}
#define glGetPathTexGenivNV_INDEX 890
#define glGetPathTexGenivNV_RETURN void
#define glGetPathTexGenivNV_ARG_NAMES texCoordSet, pname, value
#define glGetPathTexGenivNV_ARG_EXPAND GLenum texCoordSet, GLenum pname, GLint * value
#define glGetPathTexGenivNV_PACKED PACKED_void_GLenum_GLenum_GLint___GENPT__
#define glGetPathTexGenivNV_FORMAT FORMAT_void_GLenum_GLenum_GLint___GENPT__
#define glGetPathTexGenivNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetPathTexGenivNV_NOT_VOID_WRAP(...) {}
#define glGetPerfMonitorCounterDataAMD_INDEX 891
#define glGetPerfMonitorCounterDataAMD_RETURN void
#define glGetPerfMonitorCounterDataAMD_ARG_NAMES monitor, pname, dataSize, data, bytesWritten
#define glGetPerfMonitorCounterDataAMD_ARG_EXPAND GLuint monitor, GLenum pname, GLsizei dataSize, GLuint * data, GLint * bytesWritten
#define glGetPerfMonitorCounterDataAMD_PACKED PACKED_void_GLuint_GLenum_GLsizei_GLuint___GENPT___GLint___GENPT__
#define glGetPerfMonitorCounterDataAMD_FORMAT FORMAT_void_GLuint_GLenum_GLsizei_GLuint___GENPT___GLint___GENPT__
#define glGetPerfMonitorCounterDataAMD_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetPerfMonitorCounterDataAMD_NOT_VOID_WRAP(...) {}
#define glGetPerfMonitorCounterInfoAMD_INDEX 892
#define glGetPerfMonitorCounterInfoAMD_RETURN void
#define glGetPerfMonitorCounterInfoAMD_ARG_NAMES group, counter, pname, data
#define glGetPerfMonitorCounterInfoAMD_ARG_EXPAND GLuint group, GLuint counter, GLenum pname, GLvoid * data
#define glGetPerfMonitorCounterInfoAMD_PACKED PACKED_void_GLuint_GLuint_GLenum_GLvoid___GENPT__
#define glGetPerfMonitorCounterInfoAMD_FORMAT FORMAT_void_GLuint_GLuint_GLenum_GLvoid___GENPT__
#define glGetPerfMonitorCounterInfoAMD_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetPerfMonitorCounterInfoAMD_NOT_VOID_WRAP(...) {}
#define glGetPerfMonitorCounterStringAMD_INDEX 893
#define glGetPerfMonitorCounterStringAMD_RETURN void
#define glGetPerfMonitorCounterStringAMD_ARG_NAMES group, counter, bufSize, length, counterString
#define glGetPerfMonitorCounterStringAMD_ARG_EXPAND GLuint group, GLuint counter, GLsizei bufSize, GLsizei * length, GLchar * counterString
#define glGetPerfMonitorCounterStringAMD_PACKED PACKED_void_GLuint_GLuint_GLsizei_GLsizei___GENPT___GLchar___GENPT__
#define glGetPerfMonitorCounterStringAMD_FORMAT FORMAT_void_GLuint_GLuint_GLsizei_GLsizei___GENPT___GLchar___GENPT__
#define glGetPerfMonitorCounterStringAMD_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetPerfMonitorCounterStringAMD_NOT_VOID_WRAP(...) {}
#define glGetPerfMonitorCountersAMD_INDEX 894
#define glGetPerfMonitorCountersAMD_RETURN void
#define glGetPerfMonitorCountersAMD_ARG_NAMES group, numCounters, maxActiveCounters, counterSize, counters
#define glGetPerfMonitorCountersAMD_ARG_EXPAND GLuint group, GLint * numCounters, GLint * maxActiveCounters, GLsizei counterSize, GLuint * counters
#define glGetPerfMonitorCountersAMD_PACKED PACKED_void_GLuint_GLint___GENPT___GLint___GENPT___GLsizei_GLuint___GENPT__
#define glGetPerfMonitorCountersAMD_FORMAT FORMAT_void_GLuint_GLint___GENPT___GLint___GENPT___GLsizei_GLuint___GENPT__
#define glGetPerfMonitorCountersAMD_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetPerfMonitorCountersAMD_NOT_VOID_WRAP(...) {}
#define glGetPerfMonitorGroupStringAMD_INDEX 895
#define glGetPerfMonitorGroupStringAMD_RETURN void
#define glGetPerfMonitorGroupStringAMD_ARG_NAMES group, bufSize, length, groupString
#define glGetPerfMonitorGroupStringAMD_ARG_EXPAND GLuint group, GLsizei bufSize, GLsizei * length, GLchar * groupString
#define glGetPerfMonitorGroupStringAMD_PACKED PACKED_void_GLuint_GLsizei_GLsizei___GENPT___GLchar___GENPT__
#define glGetPerfMonitorGroupStringAMD_FORMAT FORMAT_void_GLuint_GLsizei_GLsizei___GENPT___GLchar___GENPT__
#define glGetPerfMonitorGroupStringAMD_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetPerfMonitorGroupStringAMD_NOT_VOID_WRAP(...) {}
#define glGetPerfMonitorGroupsAMD_INDEX 896
#define glGetPerfMonitorGroupsAMD_RETURN void
#define glGetPerfMonitorGroupsAMD_ARG_NAMES numGroups, groupsSize, groups
#define glGetPerfMonitorGroupsAMD_ARG_EXPAND GLint * numGroups, GLsizei groupsSize, GLuint * groups
#define glGetPerfMonitorGroupsAMD_PACKED PACKED_void_GLint___GENPT___GLsizei_GLuint___GENPT__
#define glGetPerfMonitorGroupsAMD_FORMAT FORMAT_void_GLint___GENPT___GLsizei_GLuint___GENPT__
#define glGetPerfMonitorGroupsAMD_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetPerfMonitorGroupsAMD_NOT_VOID_WRAP(...) {}
#define glGetPixelMapfv_INDEX 897
#define glGetPixelMapfv_RETURN void
#define glGetPixelMapfv_ARG_NAMES map, values
#define glGetPixelMapfv_ARG_EXPAND GLenum map, GLfloat * values
#define glGetPixelMapfv_PACKED PACKED_void_GLenum_GLfloat___GENPT__
#define glGetPixelMapfv_FORMAT FORMAT_void_GLenum_GLfloat___GENPT__
#define glGetPixelMapfv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetPixelMapfv_NOT_VOID_WRAP(...) {}
#define glGetPixelMapuiv_INDEX 898
#define glGetPixelMapuiv_RETURN void
#define glGetPixelMapuiv_ARG_NAMES map, values
#define glGetPixelMapuiv_ARG_EXPAND GLenum map, GLuint * values
#define glGetPixelMapuiv_PACKED PACKED_void_GLenum_GLuint___GENPT__
#define glGetPixelMapuiv_FORMAT FORMAT_void_GLenum_GLuint___GENPT__
#define glGetPixelMapuiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetPixelMapuiv_NOT_VOID_WRAP(...) {}
#define glGetPixelMapusv_INDEX 899
#define glGetPixelMapusv_RETURN void
#define glGetPixelMapusv_ARG_NAMES map, values
#define glGetPixelMapusv_ARG_EXPAND GLenum map, GLushort * values
#define glGetPixelMapusv_PACKED PACKED_void_GLenum_GLushort___GENPT__
#define glGetPixelMapusv_FORMAT FORMAT_void_GLenum_GLushort___GENPT__
#define glGetPixelMapusv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetPixelMapusv_NOT_VOID_WRAP(...) {}
#define glGetPixelMapxv_INDEX 900
#define glGetPixelMapxv_RETURN void
#define glGetPixelMapxv_ARG_NAMES map, size, values
#define glGetPixelMapxv_ARG_EXPAND GLenum map, GLint size, GLfixed * values
#define glGetPixelMapxv_PACKED PACKED_void_GLenum_GLint_GLfixed___GENPT__
#define glGetPixelMapxv_FORMAT FORMAT_void_GLenum_GLint_GLfixed___GENPT__
#define glGetPixelMapxv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetPixelMapxv_NOT_VOID_WRAP(...) {}
#define glGetPixelTexGenParameterfvSGIS_INDEX 901
#define glGetPixelTexGenParameterfvSGIS_RETURN void
#define glGetPixelTexGenParameterfvSGIS_ARG_NAMES pname, params
#define glGetPixelTexGenParameterfvSGIS_ARG_EXPAND GLenum pname, GLfloat * params
#define glGetPixelTexGenParameterfvSGIS_PACKED PACKED_void_GLenum_GLfloat___GENPT__
#define glGetPixelTexGenParameterfvSGIS_FORMAT FORMAT_void_GLenum_GLfloat___GENPT__
#define glGetPixelTexGenParameterfvSGIS_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetPixelTexGenParameterfvSGIS_NOT_VOID_WRAP(...) {}
#define glGetPixelTexGenParameterivSGIS_INDEX 902
#define glGetPixelTexGenParameterivSGIS_RETURN void
#define glGetPixelTexGenParameterivSGIS_ARG_NAMES pname, params
#define glGetPixelTexGenParameterivSGIS_ARG_EXPAND GLenum pname, GLint * params
#define glGetPixelTexGenParameterivSGIS_PACKED PACKED_void_GLenum_GLint___GENPT__
#define glGetPixelTexGenParameterivSGIS_FORMAT FORMAT_void_GLenum_GLint___GENPT__
#define glGetPixelTexGenParameterivSGIS_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetPixelTexGenParameterivSGIS_NOT_VOID_WRAP(...) {}
#define glGetPixelTransformParameterfvEXT_INDEX 903
#define glGetPixelTransformParameterfvEXT_RETURN void
#define glGetPixelTransformParameterfvEXT_ARG_NAMES target, pname, params
#define glGetPixelTransformParameterfvEXT_ARG_EXPAND GLenum target, GLenum pname, GLfloat * params
#define glGetPixelTransformParameterfvEXT_PACKED PACKED_void_GLenum_GLenum_GLfloat___GENPT__
#define glGetPixelTransformParameterfvEXT_FORMAT FORMAT_void_GLenum_GLenum_GLfloat___GENPT__
#define glGetPixelTransformParameterfvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetPixelTransformParameterfvEXT_NOT_VOID_WRAP(...) {}
#define glGetPixelTransformParameterivEXT_INDEX 904
#define glGetPixelTransformParameterivEXT_RETURN void
#define glGetPixelTransformParameterivEXT_ARG_NAMES target, pname, params
#define glGetPixelTransformParameterivEXT_ARG_EXPAND GLenum target, GLenum pname, GLint * params
#define glGetPixelTransformParameterivEXT_PACKED PACKED_void_GLenum_GLenum_GLint___GENPT__
#define glGetPixelTransformParameterivEXT_FORMAT FORMAT_void_GLenum_GLenum_GLint___GENPT__
#define glGetPixelTransformParameterivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetPixelTransformParameterivEXT_NOT_VOID_WRAP(...) {}
#define glGetPointerIndexedvEXT_INDEX 905
#define glGetPointerIndexedvEXT_RETURN void
#define glGetPointerIndexedvEXT_ARG_NAMES target, index, data
#define glGetPointerIndexedvEXT_ARG_EXPAND GLenum target, GLuint index, GLvoid * data
#define glGetPointerIndexedvEXT_PACKED PACKED_void_GLenum_GLuint_GLvoid___GENPT__
#define glGetPointerIndexedvEXT_FORMAT FORMAT_void_GLenum_GLuint_GLvoid___GENPT__
#define glGetPointerIndexedvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetPointerIndexedvEXT_NOT_VOID_WRAP(...) {}
#define glGetPointeri_vEXT_INDEX 906
#define glGetPointeri_vEXT_RETURN void
#define glGetPointeri_vEXT_ARG_NAMES target, index, data
#define glGetPointeri_vEXT_ARG_EXPAND GLenum target, GLuint index, GLvoid * data
#define glGetPointeri_vEXT_PACKED PACKED_void_GLenum_GLuint_GLvoid___GENPT__
#define glGetPointeri_vEXT_FORMAT FORMAT_void_GLenum_GLuint_GLvoid___GENPT__
#define glGetPointeri_vEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetPointeri_vEXT_NOT_VOID_WRAP(...) {}
#define glGetPointerv_INDEX 907
#define glGetPointerv_RETURN void
#define glGetPointerv_ARG_NAMES pname, params
#define glGetPointerv_ARG_EXPAND GLenum pname, GLvoid ** params
#define glGetPointerv_PACKED PACKED_void_GLenum_GLvoid___GENPT____GENPT__
#define glGetPointerv_FORMAT FORMAT_void_GLenum_GLvoid___GENPT____GENPT__
#define glGetPointerv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetPointerv_NOT_VOID_WRAP(...) {}
#define glGetPointervEXT_INDEX 908
#define glGetPointervEXT_RETURN void
#define glGetPointervEXT_ARG_NAMES pname, params
#define glGetPointervEXT_ARG_EXPAND GLenum pname, GLvoid * params
#define glGetPointervEXT_PACKED PACKED_void_GLenum_GLvoid___GENPT__
#define glGetPointervEXT_FORMAT FORMAT_void_GLenum_GLvoid___GENPT__
#define glGetPointervEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetPointervEXT_NOT_VOID_WRAP(...) {}
#define glGetPolygonStipple_INDEX 909
#define glGetPolygonStipple_RETURN void
#define glGetPolygonStipple_ARG_NAMES mask
#define glGetPolygonStipple_ARG_EXPAND GLubyte * mask
#define glGetPolygonStipple_PACKED PACKED_void_GLubyte___GENPT__
#define glGetPolygonStipple_FORMAT FORMAT_void_GLubyte___GENPT__
#define glGetPolygonStipple_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetPolygonStipple_NOT_VOID_WRAP(...) {}
#define glGetProgramBinary_INDEX 910
#define glGetProgramBinary_RETURN void
#define glGetProgramBinary_ARG_NAMES program, bufSize, length, binaryFormat, binary
#define glGetProgramBinary_ARG_EXPAND GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, GLvoid * binary
#define glGetProgramBinary_PACKED PACKED_void_GLuint_GLsizei_GLsizei___GENPT___GLenum___GENPT___GLvoid___GENPT__
#define glGetProgramBinary_FORMAT FORMAT_void_GLuint_GLsizei_GLsizei___GENPT___GLenum___GENPT___GLvoid___GENPT__
#define glGetProgramBinary_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetProgramBinary_NOT_VOID_WRAP(...) {}
#define glGetProgramEnvParameterIivNV_INDEX 911
#define glGetProgramEnvParameterIivNV_RETURN void
#define glGetProgramEnvParameterIivNV_ARG_NAMES target, index, params
#define glGetProgramEnvParameterIivNV_ARG_EXPAND GLenum target, GLuint index, GLint * params
#define glGetProgramEnvParameterIivNV_PACKED PACKED_void_GLenum_GLuint_GLint___GENPT__
#define glGetProgramEnvParameterIivNV_FORMAT FORMAT_void_GLenum_GLuint_GLint___GENPT__
#define glGetProgramEnvParameterIivNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetProgramEnvParameterIivNV_NOT_VOID_WRAP(...) {}
#define glGetProgramEnvParameterIuivNV_INDEX 912
#define glGetProgramEnvParameterIuivNV_RETURN void
#define glGetProgramEnvParameterIuivNV_ARG_NAMES target, index, params
#define glGetProgramEnvParameterIuivNV_ARG_EXPAND GLenum target, GLuint index, GLuint * params
#define glGetProgramEnvParameterIuivNV_PACKED PACKED_void_GLenum_GLuint_GLuint___GENPT__
#define glGetProgramEnvParameterIuivNV_FORMAT FORMAT_void_GLenum_GLuint_GLuint___GENPT__
#define glGetProgramEnvParameterIuivNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetProgramEnvParameterIuivNV_NOT_VOID_WRAP(...) {}
#define glGetProgramEnvParameterdvARB_INDEX 913
#define glGetProgramEnvParameterdvARB_RETURN void
#define glGetProgramEnvParameterdvARB_ARG_NAMES target, index, params
#define glGetProgramEnvParameterdvARB_ARG_EXPAND GLenum target, GLuint index, GLdouble * params
#define glGetProgramEnvParameterdvARB_PACKED PACKED_void_GLenum_GLuint_GLdouble___GENPT__
#define glGetProgramEnvParameterdvARB_FORMAT FORMAT_void_GLenum_GLuint_GLdouble___GENPT__
#define glGetProgramEnvParameterdvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetProgramEnvParameterdvARB_NOT_VOID_WRAP(...) {}
#define glGetProgramEnvParameterfvARB_INDEX 914
#define glGetProgramEnvParameterfvARB_RETURN void
#define glGetProgramEnvParameterfvARB_ARG_NAMES target, index, params
#define glGetProgramEnvParameterfvARB_ARG_EXPAND GLenum target, GLuint index, GLfloat * params
#define glGetProgramEnvParameterfvARB_PACKED PACKED_void_GLenum_GLuint_GLfloat___GENPT__
#define glGetProgramEnvParameterfvARB_FORMAT FORMAT_void_GLenum_GLuint_GLfloat___GENPT__
#define glGetProgramEnvParameterfvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetProgramEnvParameterfvARB_NOT_VOID_WRAP(...) {}
#define glGetProgramInfoLog_INDEX 915
#define glGetProgramInfoLog_RETURN void
#define glGetProgramInfoLog_ARG_NAMES program, bufSize, length, infoLog
#define glGetProgramInfoLog_ARG_EXPAND GLuint program, GLsizei bufSize, GLsizei * length, GLchar * infoLog
#define glGetProgramInfoLog_PACKED PACKED_void_GLuint_GLsizei_GLsizei___GENPT___GLchar___GENPT__
#define glGetProgramInfoLog_FORMAT FORMAT_void_GLuint_GLsizei_GLsizei___GENPT___GLchar___GENPT__
#define glGetProgramInfoLog_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetProgramInfoLog_NOT_VOID_WRAP(...) {}
#define glGetProgramInterfaceiv_INDEX 916
#define glGetProgramInterfaceiv_RETURN void
#define glGetProgramInterfaceiv_ARG_NAMES program, programInterface, pname, params
#define glGetProgramInterfaceiv_ARG_EXPAND GLuint program, GLenum programInterface, GLenum pname, GLint * params
#define glGetProgramInterfaceiv_PACKED PACKED_void_GLuint_GLenum_GLenum_GLint___GENPT__
#define glGetProgramInterfaceiv_FORMAT FORMAT_void_GLuint_GLenum_GLenum_GLint___GENPT__
#define glGetProgramInterfaceiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetProgramInterfaceiv_NOT_VOID_WRAP(...) {}
#define glGetProgramLocalParameterIivNV_INDEX 917
#define glGetProgramLocalParameterIivNV_RETURN void
#define glGetProgramLocalParameterIivNV_ARG_NAMES target, index, params
#define glGetProgramLocalParameterIivNV_ARG_EXPAND GLenum target, GLuint index, GLint * params
#define glGetProgramLocalParameterIivNV_PACKED PACKED_void_GLenum_GLuint_GLint___GENPT__
#define glGetProgramLocalParameterIivNV_FORMAT FORMAT_void_GLenum_GLuint_GLint___GENPT__
#define glGetProgramLocalParameterIivNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetProgramLocalParameterIivNV_NOT_VOID_WRAP(...) {}
#define glGetProgramLocalParameterIuivNV_INDEX 918
#define glGetProgramLocalParameterIuivNV_RETURN void
#define glGetProgramLocalParameterIuivNV_ARG_NAMES target, index, params
#define glGetProgramLocalParameterIuivNV_ARG_EXPAND GLenum target, GLuint index, GLuint * params
#define glGetProgramLocalParameterIuivNV_PACKED PACKED_void_GLenum_GLuint_GLuint___GENPT__
#define glGetProgramLocalParameterIuivNV_FORMAT FORMAT_void_GLenum_GLuint_GLuint___GENPT__
#define glGetProgramLocalParameterIuivNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetProgramLocalParameterIuivNV_NOT_VOID_WRAP(...) {}
#define glGetProgramLocalParameterdvARB_INDEX 919
#define glGetProgramLocalParameterdvARB_RETURN void
#define glGetProgramLocalParameterdvARB_ARG_NAMES target, index, params
#define glGetProgramLocalParameterdvARB_ARG_EXPAND GLenum target, GLuint index, GLdouble * params
#define glGetProgramLocalParameterdvARB_PACKED PACKED_void_GLenum_GLuint_GLdouble___GENPT__
#define glGetProgramLocalParameterdvARB_FORMAT FORMAT_void_GLenum_GLuint_GLdouble___GENPT__
#define glGetProgramLocalParameterdvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetProgramLocalParameterdvARB_NOT_VOID_WRAP(...) {}
#define glGetProgramLocalParameterfvARB_INDEX 920
#define glGetProgramLocalParameterfvARB_RETURN void
#define glGetProgramLocalParameterfvARB_ARG_NAMES target, index, params
#define glGetProgramLocalParameterfvARB_ARG_EXPAND GLenum target, GLuint index, GLfloat * params
#define glGetProgramLocalParameterfvARB_PACKED PACKED_void_GLenum_GLuint_GLfloat___GENPT__
#define glGetProgramLocalParameterfvARB_FORMAT FORMAT_void_GLenum_GLuint_GLfloat___GENPT__
#define glGetProgramLocalParameterfvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetProgramLocalParameterfvARB_NOT_VOID_WRAP(...) {}
#define glGetProgramNamedParameterdvNV_INDEX 921
#define glGetProgramNamedParameterdvNV_RETURN void
#define glGetProgramNamedParameterdvNV_ARG_NAMES id, len, name, params
#define glGetProgramNamedParameterdvNV_ARG_EXPAND GLuint id, GLsizei len, const GLubyte * name, GLdouble * params
#define glGetProgramNamedParameterdvNV_PACKED PACKED_void_GLuint_GLsizei_const_GLubyte___GENPT___GLdouble___GENPT__
#define glGetProgramNamedParameterdvNV_FORMAT FORMAT_void_GLuint_GLsizei_const_GLubyte___GENPT___GLdouble___GENPT__
#define glGetProgramNamedParameterdvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetProgramNamedParameterdvNV_NOT_VOID_WRAP(...) {}
#define glGetProgramNamedParameterfvNV_INDEX 922
#define glGetProgramNamedParameterfvNV_RETURN void
#define glGetProgramNamedParameterfvNV_ARG_NAMES id, len, name, params
#define glGetProgramNamedParameterfvNV_ARG_EXPAND GLuint id, GLsizei len, const GLubyte * name, GLfloat * params
#define glGetProgramNamedParameterfvNV_PACKED PACKED_void_GLuint_GLsizei_const_GLubyte___GENPT___GLfloat___GENPT__
#define glGetProgramNamedParameterfvNV_FORMAT FORMAT_void_GLuint_GLsizei_const_GLubyte___GENPT___GLfloat___GENPT__
#define glGetProgramNamedParameterfvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetProgramNamedParameterfvNV_NOT_VOID_WRAP(...) {}
#define glGetProgramParameterdvNV_INDEX 923
#define glGetProgramParameterdvNV_RETURN void
#define glGetProgramParameterdvNV_ARG_NAMES target, index, pname, params
#define glGetProgramParameterdvNV_ARG_EXPAND GLenum target, GLuint index, GLenum pname, GLdouble * params
#define glGetProgramParameterdvNV_PACKED PACKED_void_GLenum_GLuint_GLenum_GLdouble___GENPT__
#define glGetProgramParameterdvNV_FORMAT FORMAT_void_GLenum_GLuint_GLenum_GLdouble___GENPT__
#define glGetProgramParameterdvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetProgramParameterdvNV_NOT_VOID_WRAP(...) {}
#define glGetProgramParameterfvNV_INDEX 924
#define glGetProgramParameterfvNV_RETURN void
#define glGetProgramParameterfvNV_ARG_NAMES target, index, pname, params
#define glGetProgramParameterfvNV_ARG_EXPAND GLenum target, GLuint index, GLenum pname, GLfloat * params
#define glGetProgramParameterfvNV_PACKED PACKED_void_GLenum_GLuint_GLenum_GLfloat___GENPT__
#define glGetProgramParameterfvNV_FORMAT FORMAT_void_GLenum_GLuint_GLenum_GLfloat___GENPT__
#define glGetProgramParameterfvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetProgramParameterfvNV_NOT_VOID_WRAP(...) {}
#define glGetProgramPipelineInfoLog_INDEX 925
#define glGetProgramPipelineInfoLog_RETURN void
#define glGetProgramPipelineInfoLog_ARG_NAMES pipeline, bufSize, length, infoLog
#define glGetProgramPipelineInfoLog_ARG_EXPAND GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog
#define glGetProgramPipelineInfoLog_PACKED PACKED_void_GLuint_GLsizei_GLsizei___GENPT___GLchar___GENPT__
#define glGetProgramPipelineInfoLog_FORMAT FORMAT_void_GLuint_GLsizei_GLsizei___GENPT___GLchar___GENPT__
#define glGetProgramPipelineInfoLog_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetProgramPipelineInfoLog_NOT_VOID_WRAP(...) {}
#define glGetProgramPipelineiv_INDEX 926
#define glGetProgramPipelineiv_RETURN void
#define glGetProgramPipelineiv_ARG_NAMES pipeline, pname, params
#define glGetProgramPipelineiv_ARG_EXPAND GLuint pipeline, GLenum pname, GLint * params
#define glGetProgramPipelineiv_PACKED PACKED_void_GLuint_GLenum_GLint___GENPT__
#define glGetProgramPipelineiv_FORMAT FORMAT_void_GLuint_GLenum_GLint___GENPT__
#define glGetProgramPipelineiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetProgramPipelineiv_NOT_VOID_WRAP(...) {}
#define glGetProgramResourceIndex_INDEX 927
#define glGetProgramResourceIndex_RETURN GLuint
#define glGetProgramResourceIndex_ARG_NAMES program, programInterface, name
#define glGetProgramResourceIndex_ARG_EXPAND GLuint program, GLenum programInterface, const GLchar * name
#define glGetProgramResourceIndex_PACKED PACKED_GLuint_GLuint_GLenum_const_GLchar___GENPT__
#define glGetProgramResourceIndex_FORMAT FORMAT_GLuint_GLuint_GLenum_const_GLchar___GENPT__
#define glGetProgramResourceIndex_VOID_ONLY_WRAP(...) {}
#define glGetProgramResourceIndex_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glGetProgramResourceLocation_INDEX 928
#define glGetProgramResourceLocation_RETURN GLint
#define glGetProgramResourceLocation_ARG_NAMES program, programInterface, name
#define glGetProgramResourceLocation_ARG_EXPAND GLuint program, GLenum programInterface, const GLchar * name
#define glGetProgramResourceLocation_PACKED PACKED_GLint_GLuint_GLenum_const_GLchar___GENPT__
#define glGetProgramResourceLocation_FORMAT FORMAT_GLint_GLuint_GLenum_const_GLchar___GENPT__
#define glGetProgramResourceLocation_VOID_ONLY_WRAP(...) {}
#define glGetProgramResourceLocation_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glGetProgramResourceLocationIndex_INDEX 929
#define glGetProgramResourceLocationIndex_RETURN GLint
#define glGetProgramResourceLocationIndex_ARG_NAMES program, programInterface, name
#define glGetProgramResourceLocationIndex_ARG_EXPAND GLuint program, GLenum programInterface, const GLchar * name
#define glGetProgramResourceLocationIndex_PACKED PACKED_GLint_GLuint_GLenum_const_GLchar___GENPT__
#define glGetProgramResourceLocationIndex_FORMAT FORMAT_GLint_GLuint_GLenum_const_GLchar___GENPT__
#define glGetProgramResourceLocationIndex_VOID_ONLY_WRAP(...) {}
#define glGetProgramResourceLocationIndex_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glGetProgramResourceName_INDEX 930
#define glGetProgramResourceName_RETURN void
#define glGetProgramResourceName_ARG_NAMES program, programInterface, index, bufSize, length, name
#define glGetProgramResourceName_ARG_EXPAND GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name
#define glGetProgramResourceName_PACKED PACKED_void_GLuint_GLenum_GLuint_GLsizei_GLsizei___GENPT___GLchar___GENPT__
#define glGetProgramResourceName_FORMAT FORMAT_void_GLuint_GLenum_GLuint_GLsizei_GLsizei___GENPT___GLchar___GENPT__
#define glGetProgramResourceName_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetProgramResourceName_NOT_VOID_WRAP(...) {}
#define glGetProgramResourceiv_INDEX 931
#define glGetProgramResourceiv_RETURN void
#define glGetProgramResourceiv_ARG_NAMES program, programInterface, index, propCount, props, bufSize, length, params
#define glGetProgramResourceiv_ARG_EXPAND GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei bufSize, GLsizei * length, GLint * params
#define glGetProgramResourceiv_PACKED PACKED_void_GLuint_GLenum_GLuint_GLsizei_const_GLenum___GENPT___GLsizei_GLsizei___GENPT___GLint___GENPT__
#define glGetProgramResourceiv_FORMAT FORMAT_void_GLuint_GLenum_GLuint_GLsizei_const_GLenum___GENPT___GLsizei_GLsizei___GENPT___GLint___GENPT__
#define glGetProgramResourceiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetProgramResourceiv_NOT_VOID_WRAP(...) {}
#define glGetProgramStageiv_INDEX 932
#define glGetProgramStageiv_RETURN void
#define glGetProgramStageiv_ARG_NAMES program, shadertype, pname, values
#define glGetProgramStageiv_ARG_EXPAND GLuint program, GLenum shadertype, GLenum pname, GLint * values
#define glGetProgramStageiv_PACKED PACKED_void_GLuint_GLenum_GLenum_GLint___GENPT__
#define glGetProgramStageiv_FORMAT FORMAT_void_GLuint_GLenum_GLenum_GLint___GENPT__
#define glGetProgramStageiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetProgramStageiv_NOT_VOID_WRAP(...) {}
#define glGetProgramStringARB_INDEX 933
#define glGetProgramStringARB_RETURN void
#define glGetProgramStringARB_ARG_NAMES target, pname, string
#define glGetProgramStringARB_ARG_EXPAND GLenum target, GLenum pname, GLvoid * string
#define glGetProgramStringARB_PACKED PACKED_void_GLenum_GLenum_GLvoid___GENPT__
#define glGetProgramStringARB_FORMAT FORMAT_void_GLenum_GLenum_GLvoid___GENPT__
#define glGetProgramStringARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetProgramStringARB_NOT_VOID_WRAP(...) {}
#define glGetProgramStringNV_INDEX 934
#define glGetProgramStringNV_RETURN void
#define glGetProgramStringNV_ARG_NAMES id, pname, program
#define glGetProgramStringNV_ARG_EXPAND GLuint id, GLenum pname, GLubyte * program
#define glGetProgramStringNV_PACKED PACKED_void_GLuint_GLenum_GLubyte___GENPT__
#define glGetProgramStringNV_FORMAT FORMAT_void_GLuint_GLenum_GLubyte___GENPT__
#define glGetProgramStringNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetProgramStringNV_NOT_VOID_WRAP(...) {}
#define glGetProgramSubroutineParameteruivNV_INDEX 935
#define glGetProgramSubroutineParameteruivNV_RETURN void
#define glGetProgramSubroutineParameteruivNV_ARG_NAMES target, index, param
#define glGetProgramSubroutineParameteruivNV_ARG_EXPAND GLenum target, GLuint index, GLuint * param
#define glGetProgramSubroutineParameteruivNV_PACKED PACKED_void_GLenum_GLuint_GLuint___GENPT__
#define glGetProgramSubroutineParameteruivNV_FORMAT FORMAT_void_GLenum_GLuint_GLuint___GENPT__
#define glGetProgramSubroutineParameteruivNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetProgramSubroutineParameteruivNV_NOT_VOID_WRAP(...) {}
#define glGetProgramiv_INDEX 936
#define glGetProgramiv_RETURN void
#define glGetProgramiv_ARG_NAMES program, pname, params
#define glGetProgramiv_ARG_EXPAND GLuint program, GLenum pname, GLint * params
#define glGetProgramiv_PACKED PACKED_void_GLuint_GLenum_GLint___GENPT__
#define glGetProgramiv_FORMAT FORMAT_void_GLuint_GLenum_GLint___GENPT__
#define glGetProgramiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetProgramiv_NOT_VOID_WRAP(...) {}
#define glGetProgramivARB_INDEX 937
#define glGetProgramivARB_RETURN void
#define glGetProgramivARB_ARG_NAMES target, pname, params
#define glGetProgramivARB_ARG_EXPAND GLenum target, GLenum pname, GLint * params
#define glGetProgramivARB_PACKED PACKED_void_GLenum_GLenum_GLint___GENPT__
#define glGetProgramivARB_FORMAT FORMAT_void_GLenum_GLenum_GLint___GENPT__
#define glGetProgramivARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetProgramivARB_NOT_VOID_WRAP(...) {}
#define glGetProgramivNV_INDEX 938
#define glGetProgramivNV_RETURN void
#define glGetProgramivNV_ARG_NAMES id, pname, params
#define glGetProgramivNV_ARG_EXPAND GLuint id, GLenum pname, GLint * params
#define glGetProgramivNV_PACKED PACKED_void_GLuint_GLenum_GLint___GENPT__
#define glGetProgramivNV_FORMAT FORMAT_void_GLuint_GLenum_GLint___GENPT__
#define glGetProgramivNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetProgramivNV_NOT_VOID_WRAP(...) {}
#define glGetQueryIndexediv_INDEX 939
#define glGetQueryIndexediv_RETURN void
#define glGetQueryIndexediv_ARG_NAMES target, index, pname, params
#define glGetQueryIndexediv_ARG_EXPAND GLenum target, GLuint index, GLenum pname, GLint * params
#define glGetQueryIndexediv_PACKED PACKED_void_GLenum_GLuint_GLenum_GLint___GENPT__
#define glGetQueryIndexediv_FORMAT FORMAT_void_GLenum_GLuint_GLenum_GLint___GENPT__
#define glGetQueryIndexediv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetQueryIndexediv_NOT_VOID_WRAP(...) {}
#define glGetQueryObjecti64v_INDEX 940
#define glGetQueryObjecti64v_RETURN void
#define glGetQueryObjecti64v_ARG_NAMES id, pname, params
#define glGetQueryObjecti64v_ARG_EXPAND GLuint id, GLenum pname, GLint64 * params
#define glGetQueryObjecti64v_PACKED PACKED_void_GLuint_GLenum_GLint64___GENPT__
#define glGetQueryObjecti64v_FORMAT FORMAT_void_GLuint_GLenum_GLint64___GENPT__
#define glGetQueryObjecti64v_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetQueryObjecti64v_NOT_VOID_WRAP(...) {}
#define glGetQueryObjecti64vEXT_INDEX 941
#define glGetQueryObjecti64vEXT_RETURN void
#define glGetQueryObjecti64vEXT_ARG_NAMES id, pname, params
#define glGetQueryObjecti64vEXT_ARG_EXPAND GLuint id, GLenum pname, GLint64EXT * params
#define glGetQueryObjecti64vEXT_PACKED PACKED_void_GLuint_GLenum_GLint64EXT___GENPT__
#define glGetQueryObjecti64vEXT_FORMAT FORMAT_void_GLuint_GLenum_GLint64EXT___GENPT__
#define glGetQueryObjecti64vEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetQueryObjecti64vEXT_NOT_VOID_WRAP(...) {}
#define glGetQueryObjectiv_INDEX 942
#define glGetQueryObjectiv_RETURN void
#define glGetQueryObjectiv_ARG_NAMES id, pname, params
#define glGetQueryObjectiv_ARG_EXPAND GLuint id, GLenum pname, GLint * params
#define glGetQueryObjectiv_PACKED PACKED_void_GLuint_GLenum_GLint___GENPT__
#define glGetQueryObjectiv_FORMAT FORMAT_void_GLuint_GLenum_GLint___GENPT__
#define glGetQueryObjectiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetQueryObjectiv_NOT_VOID_WRAP(...) {}
#define glGetQueryObjectivARB_INDEX 943
#define glGetQueryObjectivARB_RETURN void
#define glGetQueryObjectivARB_ARG_NAMES id, pname, params
#define glGetQueryObjectivARB_ARG_EXPAND GLuint id, GLenum pname, GLint * params
#define glGetQueryObjectivARB_PACKED PACKED_void_GLuint_GLenum_GLint___GENPT__
#define glGetQueryObjectivARB_FORMAT FORMAT_void_GLuint_GLenum_GLint___GENPT__
#define glGetQueryObjectivARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetQueryObjectivARB_NOT_VOID_WRAP(...) {}
#define glGetQueryObjectui64v_INDEX 944
#define glGetQueryObjectui64v_RETURN void
#define glGetQueryObjectui64v_ARG_NAMES id, pname, params
#define glGetQueryObjectui64v_ARG_EXPAND GLuint id, GLenum pname, GLuint64 * params
#define glGetQueryObjectui64v_PACKED PACKED_void_GLuint_GLenum_GLuint64___GENPT__
#define glGetQueryObjectui64v_FORMAT FORMAT_void_GLuint_GLenum_GLuint64___GENPT__
#define glGetQueryObjectui64v_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetQueryObjectui64v_NOT_VOID_WRAP(...) {}
#define glGetQueryObjectui64vEXT_INDEX 945
#define glGetQueryObjectui64vEXT_RETURN void
#define glGetQueryObjectui64vEXT_ARG_NAMES id, pname, params
#define glGetQueryObjectui64vEXT_ARG_EXPAND GLuint id, GLenum pname, GLuint64EXT * params
#define glGetQueryObjectui64vEXT_PACKED PACKED_void_GLuint_GLenum_GLuint64EXT___GENPT__
#define glGetQueryObjectui64vEXT_FORMAT FORMAT_void_GLuint_GLenum_GLuint64EXT___GENPT__
#define glGetQueryObjectui64vEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetQueryObjectui64vEXT_NOT_VOID_WRAP(...) {}
#define glGetQueryObjectuiv_INDEX 946
#define glGetQueryObjectuiv_RETURN void
#define glGetQueryObjectuiv_ARG_NAMES id, pname, params
#define glGetQueryObjectuiv_ARG_EXPAND GLuint id, GLenum pname, GLuint * params
#define glGetQueryObjectuiv_PACKED PACKED_void_GLuint_GLenum_GLuint___GENPT__
#define glGetQueryObjectuiv_FORMAT FORMAT_void_GLuint_GLenum_GLuint___GENPT__
#define glGetQueryObjectuiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetQueryObjectuiv_NOT_VOID_WRAP(...) {}
#define glGetQueryObjectuivARB_INDEX 947
#define glGetQueryObjectuivARB_RETURN void
#define glGetQueryObjectuivARB_ARG_NAMES id, pname, params
#define glGetQueryObjectuivARB_ARG_EXPAND GLuint id, GLenum pname, GLuint * params
#define glGetQueryObjectuivARB_PACKED PACKED_void_GLuint_GLenum_GLuint___GENPT__
#define glGetQueryObjectuivARB_FORMAT FORMAT_void_GLuint_GLenum_GLuint___GENPT__
#define glGetQueryObjectuivARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetQueryObjectuivARB_NOT_VOID_WRAP(...) {}
#define glGetQueryiv_INDEX 948
#define glGetQueryiv_RETURN void
#define glGetQueryiv_ARG_NAMES target, pname, params
#define glGetQueryiv_ARG_EXPAND GLenum target, GLenum pname, GLint * params
#define glGetQueryiv_PACKED PACKED_void_GLenum_GLenum_GLint___GENPT__
#define glGetQueryiv_FORMAT FORMAT_void_GLenum_GLenum_GLint___GENPT__
#define glGetQueryiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetQueryiv_NOT_VOID_WRAP(...) {}
#define glGetQueryivARB_INDEX 949
#define glGetQueryivARB_RETURN void
#define glGetQueryivARB_ARG_NAMES target, pname, params
#define glGetQueryivARB_ARG_EXPAND GLenum target, GLenum pname, GLint * params
#define glGetQueryivARB_PACKED PACKED_void_GLenum_GLenum_GLint___GENPT__
#define glGetQueryivARB_FORMAT FORMAT_void_GLenum_GLenum_GLint___GENPT__
#define glGetQueryivARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetQueryivARB_NOT_VOID_WRAP(...) {}
#define glGetRenderbufferParameteriv_INDEX 950
#define glGetRenderbufferParameteriv_RETURN void
#define glGetRenderbufferParameteriv_ARG_NAMES target, pname, params
#define glGetRenderbufferParameteriv_ARG_EXPAND GLenum target, GLenum pname, GLint * params
#define glGetRenderbufferParameteriv_PACKED PACKED_void_GLenum_GLenum_GLint___GENPT__
#define glGetRenderbufferParameteriv_FORMAT FORMAT_void_GLenum_GLenum_GLint___GENPT__
#define glGetRenderbufferParameteriv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetRenderbufferParameteriv_NOT_VOID_WRAP(...) {}
#define glGetRenderbufferParameterivEXT_INDEX 951
#define glGetRenderbufferParameterivEXT_RETURN void
#define glGetRenderbufferParameterivEXT_ARG_NAMES target, pname, params
#define glGetRenderbufferParameterivEXT_ARG_EXPAND GLenum target, GLenum pname, GLint * params
#define glGetRenderbufferParameterivEXT_PACKED PACKED_void_GLenum_GLenum_GLint___GENPT__
#define glGetRenderbufferParameterivEXT_FORMAT FORMAT_void_GLenum_GLenum_GLint___GENPT__
#define glGetRenderbufferParameterivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetRenderbufferParameterivEXT_NOT_VOID_WRAP(...) {}
#define glGetSamplerParameterIiv_INDEX 952
#define glGetSamplerParameterIiv_RETURN void
#define glGetSamplerParameterIiv_ARG_NAMES sampler, pname, params
#define glGetSamplerParameterIiv_ARG_EXPAND GLuint sampler, GLenum pname, GLint * params
#define glGetSamplerParameterIiv_PACKED PACKED_void_GLuint_GLenum_GLint___GENPT__
#define glGetSamplerParameterIiv_FORMAT FORMAT_void_GLuint_GLenum_GLint___GENPT__
#define glGetSamplerParameterIiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetSamplerParameterIiv_NOT_VOID_WRAP(...) {}
#define glGetSamplerParameterIuiv_INDEX 953
#define glGetSamplerParameterIuiv_RETURN void
#define glGetSamplerParameterIuiv_ARG_NAMES sampler, pname, params
#define glGetSamplerParameterIuiv_ARG_EXPAND GLuint sampler, GLenum pname, GLuint * params
#define glGetSamplerParameterIuiv_PACKED PACKED_void_GLuint_GLenum_GLuint___GENPT__
#define glGetSamplerParameterIuiv_FORMAT FORMAT_void_GLuint_GLenum_GLuint___GENPT__
#define glGetSamplerParameterIuiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetSamplerParameterIuiv_NOT_VOID_WRAP(...) {}
#define glGetSamplerParameterfv_INDEX 954
#define glGetSamplerParameterfv_RETURN void
#define glGetSamplerParameterfv_ARG_NAMES sampler, pname, params
#define glGetSamplerParameterfv_ARG_EXPAND GLuint sampler, GLenum pname, GLfloat * params
#define glGetSamplerParameterfv_PACKED PACKED_void_GLuint_GLenum_GLfloat___GENPT__
#define glGetSamplerParameterfv_FORMAT FORMAT_void_GLuint_GLenum_GLfloat___GENPT__
#define glGetSamplerParameterfv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetSamplerParameterfv_NOT_VOID_WRAP(...) {}
#define glGetSamplerParameteriv_INDEX 955
#define glGetSamplerParameteriv_RETURN void
#define glGetSamplerParameteriv_ARG_NAMES sampler, pname, params
#define glGetSamplerParameteriv_ARG_EXPAND GLuint sampler, GLenum pname, GLint * params
#define glGetSamplerParameteriv_PACKED PACKED_void_GLuint_GLenum_GLint___GENPT__
#define glGetSamplerParameteriv_FORMAT FORMAT_void_GLuint_GLenum_GLint___GENPT__
#define glGetSamplerParameteriv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetSamplerParameteriv_NOT_VOID_WRAP(...) {}
#define glGetSeparableFilter_INDEX 956
#define glGetSeparableFilter_RETURN void
#define glGetSeparableFilter_ARG_NAMES target, format, type, row, column, span
#define glGetSeparableFilter_ARG_EXPAND GLenum target, GLenum format, GLenum type, GLvoid * row, GLvoid * column, GLvoid * span
#define glGetSeparableFilter_PACKED PACKED_void_GLenum_GLenum_GLenum_GLvoid___GENPT___GLvoid___GENPT___GLvoid___GENPT__
#define glGetSeparableFilter_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLvoid___GENPT___GLvoid___GENPT___GLvoid___GENPT__
#define glGetSeparableFilter_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetSeparableFilter_NOT_VOID_WRAP(...) {}
#define glGetSeparableFilterEXT_INDEX 957
#define glGetSeparableFilterEXT_RETURN void
#define glGetSeparableFilterEXT_ARG_NAMES target, format, type, row, column, span
#define glGetSeparableFilterEXT_ARG_EXPAND GLenum target, GLenum format, GLenum type, GLvoid * row, GLvoid * column, GLvoid * span
#define glGetSeparableFilterEXT_PACKED PACKED_void_GLenum_GLenum_GLenum_GLvoid___GENPT___GLvoid___GENPT___GLvoid___GENPT__
#define glGetSeparableFilterEXT_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLvoid___GENPT___GLvoid___GENPT___GLvoid___GENPT__
#define glGetSeparableFilterEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetSeparableFilterEXT_NOT_VOID_WRAP(...) {}
#define glGetShaderInfoLog_INDEX 958
#define glGetShaderInfoLog_RETURN void
#define glGetShaderInfoLog_ARG_NAMES shader, bufSize, length, infoLog
#define glGetShaderInfoLog_ARG_EXPAND GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * infoLog
#define glGetShaderInfoLog_PACKED PACKED_void_GLuint_GLsizei_GLsizei___GENPT___GLchar___GENPT__
#define glGetShaderInfoLog_FORMAT FORMAT_void_GLuint_GLsizei_GLsizei___GENPT___GLchar___GENPT__
#define glGetShaderInfoLog_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetShaderInfoLog_NOT_VOID_WRAP(...) {}
#define glGetShaderPrecisionFormat_INDEX 959
#define glGetShaderPrecisionFormat_RETURN void
#define glGetShaderPrecisionFormat_ARG_NAMES shadertype, precisiontype, range, precision
#define glGetShaderPrecisionFormat_ARG_EXPAND GLenum shadertype, GLenum precisiontype, GLint * range, GLint * precision
#define glGetShaderPrecisionFormat_PACKED PACKED_void_GLenum_GLenum_GLint___GENPT___GLint___GENPT__
#define glGetShaderPrecisionFormat_FORMAT FORMAT_void_GLenum_GLenum_GLint___GENPT___GLint___GENPT__
#define glGetShaderPrecisionFormat_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetShaderPrecisionFormat_NOT_VOID_WRAP(...) {}
#define glGetShaderSource_INDEX 960
#define glGetShaderSource_RETURN void
#define glGetShaderSource_ARG_NAMES shader, bufSize, length, source
#define glGetShaderSource_ARG_EXPAND GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * source
#define glGetShaderSource_PACKED PACKED_void_GLuint_GLsizei_GLsizei___GENPT___GLchar___GENPT__
#define glGetShaderSource_FORMAT FORMAT_void_GLuint_GLsizei_GLsizei___GENPT___GLchar___GENPT__
#define glGetShaderSource_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetShaderSource_NOT_VOID_WRAP(...) {}
#define glGetShaderSourceARB_INDEX 961
#define glGetShaderSourceARB_RETURN void
#define glGetShaderSourceARB_ARG_NAMES obj, maxLength, length, source
#define glGetShaderSourceARB_ARG_EXPAND GLhandleARB obj, GLsizei maxLength, GLsizei * length, GLcharARB * source
#define glGetShaderSourceARB_PACKED PACKED_void_GLhandleARB_GLsizei_GLsizei___GENPT___GLcharARB___GENPT__
#define glGetShaderSourceARB_FORMAT FORMAT_void_GLhandleARB_GLsizei_GLsizei___GENPT___GLcharARB___GENPT__
#define glGetShaderSourceARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetShaderSourceARB_NOT_VOID_WRAP(...) {}
#define glGetShaderiv_INDEX 962
#define glGetShaderiv_RETURN void
#define glGetShaderiv_ARG_NAMES shader, pname, params
#define glGetShaderiv_ARG_EXPAND GLuint shader, GLenum pname, GLint * params
#define glGetShaderiv_PACKED PACKED_void_GLuint_GLenum_GLint___GENPT__
#define glGetShaderiv_FORMAT FORMAT_void_GLuint_GLenum_GLint___GENPT__
#define glGetShaderiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetShaderiv_NOT_VOID_WRAP(...) {}
#define glGetSharpenTexFuncSGIS_INDEX 963
#define glGetSharpenTexFuncSGIS_RETURN void
#define glGetSharpenTexFuncSGIS_ARG_NAMES target, points
#define glGetSharpenTexFuncSGIS_ARG_EXPAND GLenum target, GLfloat * points
#define glGetSharpenTexFuncSGIS_PACKED PACKED_void_GLenum_GLfloat___GENPT__
#define glGetSharpenTexFuncSGIS_FORMAT FORMAT_void_GLenum_GLfloat___GENPT__
#define glGetSharpenTexFuncSGIS_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetSharpenTexFuncSGIS_NOT_VOID_WRAP(...) {}
#define glGetString_INDEX 964
#define glGetString_RETURN const GLubyte *
#define glGetString_ARG_NAMES name
#define glGetString_ARG_EXPAND GLenum name
#define glGetString_PACKED PACKED_const_GLubyte___GENPT___GLenum
#define glGetString_FORMAT FORMAT_const_GLubyte___GENPT___GLenum
#define glGetString_VOID_ONLY_WRAP(...) {}
#define glGetString_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glGetStringi_INDEX 965
#define glGetStringi_RETURN const GLubyte *
#define glGetStringi_ARG_NAMES name, index
#define glGetStringi_ARG_EXPAND GLenum name, GLuint index
#define glGetStringi_PACKED PACKED_const_GLubyte___GENPT___GLenum_GLuint
#define glGetStringi_FORMAT FORMAT_const_GLubyte___GENPT___GLenum_GLuint
#define glGetStringi_VOID_ONLY_WRAP(...) {}
#define glGetStringi_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glGetSubroutineIndex_INDEX 966
#define glGetSubroutineIndex_RETURN GLuint
#define glGetSubroutineIndex_ARG_NAMES program, shadertype, name
#define glGetSubroutineIndex_ARG_EXPAND GLuint program, GLenum shadertype, const GLchar * name
#define glGetSubroutineIndex_PACKED PACKED_GLuint_GLuint_GLenum_const_GLchar___GENPT__
#define glGetSubroutineIndex_FORMAT FORMAT_GLuint_GLuint_GLenum_const_GLchar___GENPT__
#define glGetSubroutineIndex_VOID_ONLY_WRAP(...) {}
#define glGetSubroutineIndex_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glGetSubroutineUniformLocation_INDEX 967
#define glGetSubroutineUniformLocation_RETURN GLint
#define glGetSubroutineUniformLocation_ARG_NAMES program, shadertype, name
#define glGetSubroutineUniformLocation_ARG_EXPAND GLuint program, GLenum shadertype, const GLchar * name
#define glGetSubroutineUniformLocation_PACKED PACKED_GLint_GLuint_GLenum_const_GLchar___GENPT__
#define glGetSubroutineUniformLocation_FORMAT FORMAT_GLint_GLuint_GLenum_const_GLchar___GENPT__
#define glGetSubroutineUniformLocation_VOID_ONLY_WRAP(...) {}
#define glGetSubroutineUniformLocation_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glGetSynciv_INDEX 968
#define glGetSynciv_RETURN void
#define glGetSynciv_ARG_NAMES sync, pname, bufSize, length, values
#define glGetSynciv_ARG_EXPAND GLsync sync, GLenum pname, GLsizei bufSize, GLsizei * length, GLint * values
#define glGetSynciv_PACKED PACKED_void_GLsync_GLenum_GLsizei_GLsizei___GENPT___GLint___GENPT__
#define glGetSynciv_FORMAT FORMAT_void_GLsync_GLenum_GLsizei_GLsizei___GENPT___GLint___GENPT__
#define glGetSynciv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetSynciv_NOT_VOID_WRAP(...) {}
#define glGetTexBumpParameterfvATI_INDEX 969
#define glGetTexBumpParameterfvATI_RETURN void
#define glGetTexBumpParameterfvATI_ARG_NAMES pname, param
#define glGetTexBumpParameterfvATI_ARG_EXPAND GLenum pname, GLfloat * param
#define glGetTexBumpParameterfvATI_PACKED PACKED_void_GLenum_GLfloat___GENPT__
#define glGetTexBumpParameterfvATI_FORMAT FORMAT_void_GLenum_GLfloat___GENPT__
#define glGetTexBumpParameterfvATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetTexBumpParameterfvATI_NOT_VOID_WRAP(...) {}
#define glGetTexBumpParameterivATI_INDEX 970
#define glGetTexBumpParameterivATI_RETURN void
#define glGetTexBumpParameterivATI_ARG_NAMES pname, param
#define glGetTexBumpParameterivATI_ARG_EXPAND GLenum pname, GLint * param
#define glGetTexBumpParameterivATI_PACKED PACKED_void_GLenum_GLint___GENPT__
#define glGetTexBumpParameterivATI_FORMAT FORMAT_void_GLenum_GLint___GENPT__
#define glGetTexBumpParameterivATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetTexBumpParameterivATI_NOT_VOID_WRAP(...) {}
#define glGetTexEnvfv_INDEX 971
#define glGetTexEnvfv_RETURN void
#define glGetTexEnvfv_ARG_NAMES target, pname, params
#define glGetTexEnvfv_ARG_EXPAND GLenum target, GLenum pname, GLfloat * params
#define glGetTexEnvfv_PACKED PACKED_void_GLenum_GLenum_GLfloat___GENPT__
#define glGetTexEnvfv_FORMAT FORMAT_void_GLenum_GLenum_GLfloat___GENPT__
#define glGetTexEnvfv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetTexEnvfv_NOT_VOID_WRAP(...) {}
#define glGetTexEnviv_INDEX 972
#define glGetTexEnviv_RETURN void
#define glGetTexEnviv_ARG_NAMES target, pname, params
#define glGetTexEnviv_ARG_EXPAND GLenum target, GLenum pname, GLint * params
#define glGetTexEnviv_PACKED PACKED_void_GLenum_GLenum_GLint___GENPT__
#define glGetTexEnviv_FORMAT FORMAT_void_GLenum_GLenum_GLint___GENPT__
#define glGetTexEnviv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetTexEnviv_NOT_VOID_WRAP(...) {}
#define glGetTexEnvxv_INDEX 973
#define glGetTexEnvxv_RETURN void
#define glGetTexEnvxv_ARG_NAMES target, pname, params
#define glGetTexEnvxv_ARG_EXPAND GLenum target, GLenum pname, GLfixed * params
#define glGetTexEnvxv_PACKED PACKED_void_GLenum_GLenum_GLfixed___GENPT__
#define glGetTexEnvxv_FORMAT FORMAT_void_GLenum_GLenum_GLfixed___GENPT__
#define glGetTexEnvxv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetTexEnvxv_NOT_VOID_WRAP(...) {}
#define glGetTexEnvxvOES_INDEX 974
#define glGetTexEnvxvOES_RETURN void
#define glGetTexEnvxvOES_ARG_NAMES target, pname, params
#define glGetTexEnvxvOES_ARG_EXPAND GLenum target, GLenum pname, GLfixed * params
#define glGetTexEnvxvOES_PACKED PACKED_void_GLenum_GLenum_GLfixed___GENPT__
#define glGetTexEnvxvOES_FORMAT FORMAT_void_GLenum_GLenum_GLfixed___GENPT__
#define glGetTexEnvxvOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetTexEnvxvOES_NOT_VOID_WRAP(...) {}
#define glGetTexFilterFuncSGIS_INDEX 975
#define glGetTexFilterFuncSGIS_RETURN void
#define glGetTexFilterFuncSGIS_ARG_NAMES target, filter, weights
#define glGetTexFilterFuncSGIS_ARG_EXPAND GLenum target, GLenum filter, GLfloat * weights
#define glGetTexFilterFuncSGIS_PACKED PACKED_void_GLenum_GLenum_GLfloat___GENPT__
#define glGetTexFilterFuncSGIS_FORMAT FORMAT_void_GLenum_GLenum_GLfloat___GENPT__
#define glGetTexFilterFuncSGIS_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetTexFilterFuncSGIS_NOT_VOID_WRAP(...) {}
#define glGetTexGendv_INDEX 976
#define glGetTexGendv_RETURN void
#define glGetTexGendv_ARG_NAMES coord, pname, params
#define glGetTexGendv_ARG_EXPAND GLenum coord, GLenum pname, GLdouble * params
#define glGetTexGendv_PACKED PACKED_void_GLenum_GLenum_GLdouble___GENPT__
#define glGetTexGendv_FORMAT FORMAT_void_GLenum_GLenum_GLdouble___GENPT__
#define glGetTexGendv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetTexGendv_NOT_VOID_WRAP(...) {}
#define glGetTexGenfv_INDEX 977
#define glGetTexGenfv_RETURN void
#define glGetTexGenfv_ARG_NAMES coord, pname, params
#define glGetTexGenfv_ARG_EXPAND GLenum coord, GLenum pname, GLfloat * params
#define glGetTexGenfv_PACKED PACKED_void_GLenum_GLenum_GLfloat___GENPT__
#define glGetTexGenfv_FORMAT FORMAT_void_GLenum_GLenum_GLfloat___GENPT__
#define glGetTexGenfv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetTexGenfv_NOT_VOID_WRAP(...) {}
#define glGetTexGeniv_INDEX 978
#define glGetTexGeniv_RETURN void
#define glGetTexGeniv_ARG_NAMES coord, pname, params
#define glGetTexGeniv_ARG_EXPAND GLenum coord, GLenum pname, GLint * params
#define glGetTexGeniv_PACKED PACKED_void_GLenum_GLenum_GLint___GENPT__
#define glGetTexGeniv_FORMAT FORMAT_void_GLenum_GLenum_GLint___GENPT__
#define glGetTexGeniv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetTexGeniv_NOT_VOID_WRAP(...) {}
#define glGetTexGenxvOES_INDEX 979
#define glGetTexGenxvOES_RETURN void
#define glGetTexGenxvOES_ARG_NAMES coord, pname, params
#define glGetTexGenxvOES_ARG_EXPAND GLenum coord, GLenum pname, GLfixed * params
#define glGetTexGenxvOES_PACKED PACKED_void_GLenum_GLenum_GLfixed___GENPT__
#define glGetTexGenxvOES_FORMAT FORMAT_void_GLenum_GLenum_GLfixed___GENPT__
#define glGetTexGenxvOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetTexGenxvOES_NOT_VOID_WRAP(...) {}
#define glGetTexImage_INDEX 980
#define glGetTexImage_RETURN void
#define glGetTexImage_ARG_NAMES target, level, format, type, pixels
#define glGetTexImage_ARG_EXPAND GLenum target, GLint level, GLenum format, GLenum type, GLvoid * pixels
#define glGetTexImage_PACKED PACKED_void_GLenum_GLint_GLenum_GLenum_GLvoid___GENPT__
#define glGetTexImage_FORMAT FORMAT_void_GLenum_GLint_GLenum_GLenum_GLvoid___GENPT__
#define glGetTexImage_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetTexImage_NOT_VOID_WRAP(...) {}
#define glGetTexLevelParameterfv_INDEX 981
#define glGetTexLevelParameterfv_RETURN void
#define glGetTexLevelParameterfv_ARG_NAMES target, level, pname, params
#define glGetTexLevelParameterfv_ARG_EXPAND GLenum target, GLint level, GLenum pname, GLfloat * params
#define glGetTexLevelParameterfv_PACKED PACKED_void_GLenum_GLint_GLenum_GLfloat___GENPT__
#define glGetTexLevelParameterfv_FORMAT FORMAT_void_GLenum_GLint_GLenum_GLfloat___GENPT__
#define glGetTexLevelParameterfv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetTexLevelParameterfv_NOT_VOID_WRAP(...) {}
#define glGetTexLevelParameteriv_INDEX 982
#define glGetTexLevelParameteriv_RETURN void
#define glGetTexLevelParameteriv_ARG_NAMES target, level, pname, params
#define glGetTexLevelParameteriv_ARG_EXPAND GLenum target, GLint level, GLenum pname, GLint * params
#define glGetTexLevelParameteriv_PACKED PACKED_void_GLenum_GLint_GLenum_GLint___GENPT__
#define glGetTexLevelParameteriv_FORMAT FORMAT_void_GLenum_GLint_GLenum_GLint___GENPT__
#define glGetTexLevelParameteriv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetTexLevelParameteriv_NOT_VOID_WRAP(...) {}
#define glGetTexLevelParameterxvOES_INDEX 983
#define glGetTexLevelParameterxvOES_RETURN void
#define glGetTexLevelParameterxvOES_ARG_NAMES target, level, pname, params
#define glGetTexLevelParameterxvOES_ARG_EXPAND GLenum target, GLint level, GLenum pname, GLfixed * params
#define glGetTexLevelParameterxvOES_PACKED PACKED_void_GLenum_GLint_GLenum_GLfixed___GENPT__
#define glGetTexLevelParameterxvOES_FORMAT FORMAT_void_GLenum_GLint_GLenum_GLfixed___GENPT__
#define glGetTexLevelParameterxvOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetTexLevelParameterxvOES_NOT_VOID_WRAP(...) {}
#define glGetTexParameterIiv_INDEX 984
#define glGetTexParameterIiv_RETURN void
#define glGetTexParameterIiv_ARG_NAMES target, pname, params
#define glGetTexParameterIiv_ARG_EXPAND GLenum target, GLenum pname, GLint * params
#define glGetTexParameterIiv_PACKED PACKED_void_GLenum_GLenum_GLint___GENPT__
#define glGetTexParameterIiv_FORMAT FORMAT_void_GLenum_GLenum_GLint___GENPT__
#define glGetTexParameterIiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetTexParameterIiv_NOT_VOID_WRAP(...) {}
#define glGetTexParameterIivEXT_INDEX 985
#define glGetTexParameterIivEXT_RETURN void
#define glGetTexParameterIivEXT_ARG_NAMES target, pname, params
#define glGetTexParameterIivEXT_ARG_EXPAND GLenum target, GLenum pname, GLint * params
#define glGetTexParameterIivEXT_PACKED PACKED_void_GLenum_GLenum_GLint___GENPT__
#define glGetTexParameterIivEXT_FORMAT FORMAT_void_GLenum_GLenum_GLint___GENPT__
#define glGetTexParameterIivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetTexParameterIivEXT_NOT_VOID_WRAP(...) {}
#define glGetTexParameterIuiv_INDEX 986
#define glGetTexParameterIuiv_RETURN void
#define glGetTexParameterIuiv_ARG_NAMES target, pname, params
#define glGetTexParameterIuiv_ARG_EXPAND GLenum target, GLenum pname, GLuint * params
#define glGetTexParameterIuiv_PACKED PACKED_void_GLenum_GLenum_GLuint___GENPT__
#define glGetTexParameterIuiv_FORMAT FORMAT_void_GLenum_GLenum_GLuint___GENPT__
#define glGetTexParameterIuiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetTexParameterIuiv_NOT_VOID_WRAP(...) {}
#define glGetTexParameterIuivEXT_INDEX 987
#define glGetTexParameterIuivEXT_RETURN void
#define glGetTexParameterIuivEXT_ARG_NAMES target, pname, params
#define glGetTexParameterIuivEXT_ARG_EXPAND GLenum target, GLenum pname, GLuint * params
#define glGetTexParameterIuivEXT_PACKED PACKED_void_GLenum_GLenum_GLuint___GENPT__
#define glGetTexParameterIuivEXT_FORMAT FORMAT_void_GLenum_GLenum_GLuint___GENPT__
#define glGetTexParameterIuivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetTexParameterIuivEXT_NOT_VOID_WRAP(...) {}
#define glGetTexParameterPointervAPPLE_INDEX 988
#define glGetTexParameterPointervAPPLE_RETURN void
#define glGetTexParameterPointervAPPLE_ARG_NAMES target, pname, params
#define glGetTexParameterPointervAPPLE_ARG_EXPAND GLenum target, GLenum pname, GLvoid * params
#define glGetTexParameterPointervAPPLE_PACKED PACKED_void_GLenum_GLenum_GLvoid___GENPT__
#define glGetTexParameterPointervAPPLE_FORMAT FORMAT_void_GLenum_GLenum_GLvoid___GENPT__
#define glGetTexParameterPointervAPPLE_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetTexParameterPointervAPPLE_NOT_VOID_WRAP(...) {}
#define glGetTexParameterfv_INDEX 989
#define glGetTexParameterfv_RETURN void
#define glGetTexParameterfv_ARG_NAMES target, pname, params
#define glGetTexParameterfv_ARG_EXPAND GLenum target, GLenum pname, GLfloat * params
#define glGetTexParameterfv_PACKED PACKED_void_GLenum_GLenum_GLfloat___GENPT__
#define glGetTexParameterfv_FORMAT FORMAT_void_GLenum_GLenum_GLfloat___GENPT__
#define glGetTexParameterfv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetTexParameterfv_NOT_VOID_WRAP(...) {}
#define glGetTexParameteriv_INDEX 990
#define glGetTexParameteriv_RETURN void
#define glGetTexParameteriv_ARG_NAMES target, pname, params
#define glGetTexParameteriv_ARG_EXPAND GLenum target, GLenum pname, GLint * params
#define glGetTexParameteriv_PACKED PACKED_void_GLenum_GLenum_GLint___GENPT__
#define glGetTexParameteriv_FORMAT FORMAT_void_GLenum_GLenum_GLint___GENPT__
#define glGetTexParameteriv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetTexParameteriv_NOT_VOID_WRAP(...) {}
#define glGetTexParameterxv_INDEX 991
#define glGetTexParameterxv_RETURN void
#define glGetTexParameterxv_ARG_NAMES target, pname, params
#define glGetTexParameterxv_ARG_EXPAND GLenum target, GLenum pname, GLfixed * params
#define glGetTexParameterxv_PACKED PACKED_void_GLenum_GLenum_GLfixed___GENPT__
#define glGetTexParameterxv_FORMAT FORMAT_void_GLenum_GLenum_GLfixed___GENPT__
#define glGetTexParameterxv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetTexParameterxv_NOT_VOID_WRAP(...) {}
#define glGetTexParameterxvOES_INDEX 992
#define glGetTexParameterxvOES_RETURN void
#define glGetTexParameterxvOES_ARG_NAMES target, pname, params
#define glGetTexParameterxvOES_ARG_EXPAND GLenum target, GLenum pname, GLfixed * params
#define glGetTexParameterxvOES_PACKED PACKED_void_GLenum_GLenum_GLfixed___GENPT__
#define glGetTexParameterxvOES_FORMAT FORMAT_void_GLenum_GLenum_GLfixed___GENPT__
#define glGetTexParameterxvOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetTexParameterxvOES_NOT_VOID_WRAP(...) {}
#define glGetTextureHandleNV_INDEX 993
#define glGetTextureHandleNV_RETURN GLuint64
#define glGetTextureHandleNV_ARG_NAMES texture
#define glGetTextureHandleNV_ARG_EXPAND GLuint texture
#define glGetTextureHandleNV_PACKED PACKED_GLuint64_GLuint
#define glGetTextureHandleNV_FORMAT FORMAT_GLuint64_GLuint
#define glGetTextureHandleNV_VOID_ONLY_WRAP(...) {}
#define glGetTextureHandleNV_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glGetTextureImageEXT_INDEX 994
#define glGetTextureImageEXT_RETURN void
#define glGetTextureImageEXT_ARG_NAMES texture, target, level, format, type, pixels
#define glGetTextureImageEXT_ARG_EXPAND GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, GLvoid * pixels
#define glGetTextureImageEXT_PACKED PACKED_void_GLuint_GLenum_GLint_GLenum_GLenum_GLvoid___GENPT__
#define glGetTextureImageEXT_FORMAT FORMAT_void_GLuint_GLenum_GLint_GLenum_GLenum_GLvoid___GENPT__
#define glGetTextureImageEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetTextureImageEXT_NOT_VOID_WRAP(...) {}
#define glGetTextureLevelParameterfvEXT_INDEX 995
#define glGetTextureLevelParameterfvEXT_RETURN void
#define glGetTextureLevelParameterfvEXT_ARG_NAMES texture, target, level, pname, params
#define glGetTextureLevelParameterfvEXT_ARG_EXPAND GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat * params
#define glGetTextureLevelParameterfvEXT_PACKED PACKED_void_GLuint_GLenum_GLint_GLenum_GLfloat___GENPT__
#define glGetTextureLevelParameterfvEXT_FORMAT FORMAT_void_GLuint_GLenum_GLint_GLenum_GLfloat___GENPT__
#define glGetTextureLevelParameterfvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetTextureLevelParameterfvEXT_NOT_VOID_WRAP(...) {}
#define glGetTextureLevelParameterivEXT_INDEX 996
#define glGetTextureLevelParameterivEXT_RETURN void
#define glGetTextureLevelParameterivEXT_ARG_NAMES texture, target, level, pname, params
#define glGetTextureLevelParameterivEXT_ARG_EXPAND GLuint texture, GLenum target, GLint level, GLenum pname, GLint * params
#define glGetTextureLevelParameterivEXT_PACKED PACKED_void_GLuint_GLenum_GLint_GLenum_GLint___GENPT__
#define glGetTextureLevelParameterivEXT_FORMAT FORMAT_void_GLuint_GLenum_GLint_GLenum_GLint___GENPT__
#define glGetTextureLevelParameterivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetTextureLevelParameterivEXT_NOT_VOID_WRAP(...) {}
#define glGetTextureParameterIivEXT_INDEX 997
#define glGetTextureParameterIivEXT_RETURN void
#define glGetTextureParameterIivEXT_ARG_NAMES texture, target, pname, params
#define glGetTextureParameterIivEXT_ARG_EXPAND GLuint texture, GLenum target, GLenum pname, GLint * params
#define glGetTextureParameterIivEXT_PACKED PACKED_void_GLuint_GLenum_GLenum_GLint___GENPT__
#define glGetTextureParameterIivEXT_FORMAT FORMAT_void_GLuint_GLenum_GLenum_GLint___GENPT__
#define glGetTextureParameterIivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetTextureParameterIivEXT_NOT_VOID_WRAP(...) {}
#define glGetTextureParameterIuivEXT_INDEX 998
#define glGetTextureParameterIuivEXT_RETURN void
#define glGetTextureParameterIuivEXT_ARG_NAMES texture, target, pname, params
#define glGetTextureParameterIuivEXT_ARG_EXPAND GLuint texture, GLenum target, GLenum pname, GLuint * params
#define glGetTextureParameterIuivEXT_PACKED PACKED_void_GLuint_GLenum_GLenum_GLuint___GENPT__
#define glGetTextureParameterIuivEXT_FORMAT FORMAT_void_GLuint_GLenum_GLenum_GLuint___GENPT__
#define glGetTextureParameterIuivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetTextureParameterIuivEXT_NOT_VOID_WRAP(...) {}
#define glGetTextureParameterfvEXT_INDEX 999
#define glGetTextureParameterfvEXT_RETURN void
#define glGetTextureParameterfvEXT_ARG_NAMES texture, target, pname, params
#define glGetTextureParameterfvEXT_ARG_EXPAND GLuint texture, GLenum target, GLenum pname, GLfloat * params
#define glGetTextureParameterfvEXT_PACKED PACKED_void_GLuint_GLenum_GLenum_GLfloat___GENPT__
#define glGetTextureParameterfvEXT_FORMAT FORMAT_void_GLuint_GLenum_GLenum_GLfloat___GENPT__
#define glGetTextureParameterfvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetTextureParameterfvEXT_NOT_VOID_WRAP(...) {}
#define glGetTextureParameterivEXT_INDEX 1000
#define glGetTextureParameterivEXT_RETURN void
#define glGetTextureParameterivEXT_ARG_NAMES texture, target, pname, params
#define glGetTextureParameterivEXT_ARG_EXPAND GLuint texture, GLenum target, GLenum pname, GLint * params
#define glGetTextureParameterivEXT_PACKED PACKED_void_GLuint_GLenum_GLenum_GLint___GENPT__
#define glGetTextureParameterivEXT_FORMAT FORMAT_void_GLuint_GLenum_GLenum_GLint___GENPT__
#define glGetTextureParameterivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetTextureParameterivEXT_NOT_VOID_WRAP(...) {}
#define glGetTextureSamplerHandleNV_INDEX 1001
#define glGetTextureSamplerHandleNV_RETURN GLuint64
#define glGetTextureSamplerHandleNV_ARG_NAMES texture, sampler
#define glGetTextureSamplerHandleNV_ARG_EXPAND GLuint texture, GLuint sampler
#define glGetTextureSamplerHandleNV_PACKED PACKED_GLuint64_GLuint_GLuint
#define glGetTextureSamplerHandleNV_FORMAT FORMAT_GLuint64_GLuint_GLuint
#define glGetTextureSamplerHandleNV_VOID_ONLY_WRAP(...) {}
#define glGetTextureSamplerHandleNV_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glGetTrackMatrixivNV_INDEX 1002
#define glGetTrackMatrixivNV_RETURN void
#define glGetTrackMatrixivNV_ARG_NAMES target, address, pname, params
#define glGetTrackMatrixivNV_ARG_EXPAND GLenum target, GLuint address, GLenum pname, GLint * params
#define glGetTrackMatrixivNV_PACKED PACKED_void_GLenum_GLuint_GLenum_GLint___GENPT__
#define glGetTrackMatrixivNV_FORMAT FORMAT_void_GLenum_GLuint_GLenum_GLint___GENPT__
#define glGetTrackMatrixivNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetTrackMatrixivNV_NOT_VOID_WRAP(...) {}
#define glGetTransformFeedbackVarying_INDEX 1003
#define glGetTransformFeedbackVarying_RETURN void
#define glGetTransformFeedbackVarying_ARG_NAMES program, index, bufSize, length, size, type, name
#define glGetTransformFeedbackVarying_ARG_EXPAND GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name
#define glGetTransformFeedbackVarying_PACKED PACKED_void_GLuint_GLuint_GLsizei_GLsizei___GENPT___GLsizei___GENPT___GLenum___GENPT___GLchar___GENPT__
#define glGetTransformFeedbackVarying_FORMAT FORMAT_void_GLuint_GLuint_GLsizei_GLsizei___GENPT___GLsizei___GENPT___GLenum___GENPT___GLchar___GENPT__
#define glGetTransformFeedbackVarying_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetTransformFeedbackVarying_NOT_VOID_WRAP(...) {}
#define glGetTransformFeedbackVaryingEXT_INDEX 1004
#define glGetTransformFeedbackVaryingEXT_RETURN void
#define glGetTransformFeedbackVaryingEXT_ARG_NAMES program, index, bufSize, length, size, type, name
#define glGetTransformFeedbackVaryingEXT_ARG_EXPAND GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name
#define glGetTransformFeedbackVaryingEXT_PACKED PACKED_void_GLuint_GLuint_GLsizei_GLsizei___GENPT___GLsizei___GENPT___GLenum___GENPT___GLchar___GENPT__
#define glGetTransformFeedbackVaryingEXT_FORMAT FORMAT_void_GLuint_GLuint_GLsizei_GLsizei___GENPT___GLsizei___GENPT___GLenum___GENPT___GLchar___GENPT__
#define glGetTransformFeedbackVaryingEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetTransformFeedbackVaryingEXT_NOT_VOID_WRAP(...) {}
#define glGetTransformFeedbackVaryingNV_INDEX 1005
#define glGetTransformFeedbackVaryingNV_RETURN void
#define glGetTransformFeedbackVaryingNV_ARG_NAMES program, index, location
#define glGetTransformFeedbackVaryingNV_ARG_EXPAND GLuint program, GLuint index, GLint * location
#define glGetTransformFeedbackVaryingNV_PACKED PACKED_void_GLuint_GLuint_GLint___GENPT__
#define glGetTransformFeedbackVaryingNV_FORMAT FORMAT_void_GLuint_GLuint_GLint___GENPT__
#define glGetTransformFeedbackVaryingNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetTransformFeedbackVaryingNV_NOT_VOID_WRAP(...) {}
#define glGetUniformBlockIndex_INDEX 1006
#define glGetUniformBlockIndex_RETURN GLuint
#define glGetUniformBlockIndex_ARG_NAMES program, uniformBlockName
#define glGetUniformBlockIndex_ARG_EXPAND GLuint program, const GLchar * uniformBlockName
#define glGetUniformBlockIndex_PACKED PACKED_GLuint_GLuint_const_GLchar___GENPT__
#define glGetUniformBlockIndex_FORMAT FORMAT_GLuint_GLuint_const_GLchar___GENPT__
#define glGetUniformBlockIndex_VOID_ONLY_WRAP(...) {}
#define glGetUniformBlockIndex_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glGetUniformBufferSizeEXT_INDEX 1007
#define glGetUniformBufferSizeEXT_RETURN GLint
#define glGetUniformBufferSizeEXT_ARG_NAMES program, location
#define glGetUniformBufferSizeEXT_ARG_EXPAND GLuint program, GLint location
#define glGetUniformBufferSizeEXT_PACKED PACKED_GLint_GLuint_GLint
#define glGetUniformBufferSizeEXT_FORMAT FORMAT_GLint_GLuint_GLint
#define glGetUniformBufferSizeEXT_VOID_ONLY_WRAP(...) {}
#define glGetUniformBufferSizeEXT_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glGetUniformIndices_INDEX 1008
#define glGetUniformIndices_RETURN void
#define glGetUniformIndices_ARG_NAMES program, uniformCount, uniformNames, uniformIndices
#define glGetUniformIndices_ARG_EXPAND GLuint program, GLsizei uniformCount, GLchar*const * uniformNames, GLuint * uniformIndices
#define glGetUniformIndices_PACKED PACKED_void_GLuint_GLsizei_GLchar__GENPT__const___GENPT___GLuint___GENPT__
#define glGetUniformIndices_FORMAT FORMAT_void_GLuint_GLsizei_GLchar__GENPT__const___GENPT___GLuint___GENPT__
#define glGetUniformIndices_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetUniformIndices_NOT_VOID_WRAP(...) {}
#define glGetUniformLocation_INDEX 1009
#define glGetUniformLocation_RETURN GLint
#define glGetUniformLocation_ARG_NAMES program, name
#define glGetUniformLocation_ARG_EXPAND GLuint program, const GLchar * name
#define glGetUniformLocation_PACKED PACKED_GLint_GLuint_const_GLchar___GENPT__
#define glGetUniformLocation_FORMAT FORMAT_GLint_GLuint_const_GLchar___GENPT__
#define glGetUniformLocation_VOID_ONLY_WRAP(...) {}
#define glGetUniformLocation_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glGetUniformLocationARB_INDEX 1010
#define glGetUniformLocationARB_RETURN GLint
#define glGetUniformLocationARB_ARG_NAMES programObj, name
#define glGetUniformLocationARB_ARG_EXPAND GLhandleARB programObj, const GLcharARB * name
#define glGetUniformLocationARB_PACKED PACKED_GLint_GLhandleARB_const_GLcharARB___GENPT__
#define glGetUniformLocationARB_FORMAT FORMAT_GLint_GLhandleARB_const_GLcharARB___GENPT__
#define glGetUniformLocationARB_VOID_ONLY_WRAP(...) {}
#define glGetUniformLocationARB_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glGetUniformOffsetEXT_INDEX 1011
#define glGetUniformOffsetEXT_RETURN GLintptr
#define glGetUniformOffsetEXT_ARG_NAMES program, location
#define glGetUniformOffsetEXT_ARG_EXPAND GLuint program, GLint location
#define glGetUniformOffsetEXT_PACKED PACKED_GLintptr_GLuint_GLint
#define glGetUniformOffsetEXT_FORMAT FORMAT_GLintptr_GLuint_GLint
#define glGetUniformOffsetEXT_VOID_ONLY_WRAP(...) {}
#define glGetUniformOffsetEXT_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glGetUniformSubroutineuiv_INDEX 1012
#define glGetUniformSubroutineuiv_RETURN void
#define glGetUniformSubroutineuiv_ARG_NAMES shadertype, location, params
#define glGetUniformSubroutineuiv_ARG_EXPAND GLenum shadertype, GLint location, GLuint * params
#define glGetUniformSubroutineuiv_PACKED PACKED_void_GLenum_GLint_GLuint___GENPT__
#define glGetUniformSubroutineuiv_FORMAT FORMAT_void_GLenum_GLint_GLuint___GENPT__
#define glGetUniformSubroutineuiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetUniformSubroutineuiv_NOT_VOID_WRAP(...) {}
#define glGetUniformdv_INDEX 1013
#define glGetUniformdv_RETURN void
#define glGetUniformdv_ARG_NAMES program, location, params
#define glGetUniformdv_ARG_EXPAND GLuint program, GLint location, GLdouble * params
#define glGetUniformdv_PACKED PACKED_void_GLuint_GLint_GLdouble___GENPT__
#define glGetUniformdv_FORMAT FORMAT_void_GLuint_GLint_GLdouble___GENPT__
#define glGetUniformdv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetUniformdv_NOT_VOID_WRAP(...) {}
#define glGetUniformfv_INDEX 1014
#define glGetUniformfv_RETURN void
#define glGetUniformfv_ARG_NAMES program, location, params
#define glGetUniformfv_ARG_EXPAND GLuint program, GLint location, GLfloat * params
#define glGetUniformfv_PACKED PACKED_void_GLuint_GLint_GLfloat___GENPT__
#define glGetUniformfv_FORMAT FORMAT_void_GLuint_GLint_GLfloat___GENPT__
#define glGetUniformfv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetUniformfv_NOT_VOID_WRAP(...) {}
#define glGetUniformfvARB_INDEX 1015
#define glGetUniformfvARB_RETURN void
#define glGetUniformfvARB_ARG_NAMES programObj, location, params
#define glGetUniformfvARB_ARG_EXPAND GLhandleARB programObj, GLint location, GLfloat * params
#define glGetUniformfvARB_PACKED PACKED_void_GLhandleARB_GLint_GLfloat___GENPT__
#define glGetUniformfvARB_FORMAT FORMAT_void_GLhandleARB_GLint_GLfloat___GENPT__
#define glGetUniformfvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetUniformfvARB_NOT_VOID_WRAP(...) {}
#define glGetUniformi64vNV_INDEX 1016
#define glGetUniformi64vNV_RETURN void
#define glGetUniformi64vNV_ARG_NAMES program, location, params
#define glGetUniformi64vNV_ARG_EXPAND GLuint program, GLint location, GLint64EXT * params
#define glGetUniformi64vNV_PACKED PACKED_void_GLuint_GLint_GLint64EXT___GENPT__
#define glGetUniformi64vNV_FORMAT FORMAT_void_GLuint_GLint_GLint64EXT___GENPT__
#define glGetUniformi64vNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetUniformi64vNV_NOT_VOID_WRAP(...) {}
#define glGetUniformiv_INDEX 1017
#define glGetUniformiv_RETURN void
#define glGetUniformiv_ARG_NAMES program, location, params
#define glGetUniformiv_ARG_EXPAND GLuint program, GLint location, GLint * params
#define glGetUniformiv_PACKED PACKED_void_GLuint_GLint_GLint___GENPT__
#define glGetUniformiv_FORMAT FORMAT_void_GLuint_GLint_GLint___GENPT__
#define glGetUniformiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetUniformiv_NOT_VOID_WRAP(...) {}
#define glGetUniformivARB_INDEX 1018
#define glGetUniformivARB_RETURN void
#define glGetUniformivARB_ARG_NAMES programObj, location, params
#define glGetUniformivARB_ARG_EXPAND GLhandleARB programObj, GLint location, GLint * params
#define glGetUniformivARB_PACKED PACKED_void_GLhandleARB_GLint_GLint___GENPT__
#define glGetUniformivARB_FORMAT FORMAT_void_GLhandleARB_GLint_GLint___GENPT__
#define glGetUniformivARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetUniformivARB_NOT_VOID_WRAP(...) {}
#define glGetUniformui64vNV_INDEX 1019
#define glGetUniformui64vNV_RETURN void
#define glGetUniformui64vNV_ARG_NAMES program, location, params
#define glGetUniformui64vNV_ARG_EXPAND GLuint program, GLint location, GLuint64EXT * params
#define glGetUniformui64vNV_PACKED PACKED_void_GLuint_GLint_GLuint64EXT___GENPT__
#define glGetUniformui64vNV_FORMAT FORMAT_void_GLuint_GLint_GLuint64EXT___GENPT__
#define glGetUniformui64vNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetUniformui64vNV_NOT_VOID_WRAP(...) {}
#define glGetUniformuiv_INDEX 1020
#define glGetUniformuiv_RETURN void
#define glGetUniformuiv_ARG_NAMES program, location, params
#define glGetUniformuiv_ARG_EXPAND GLuint program, GLint location, GLuint * params
#define glGetUniformuiv_PACKED PACKED_void_GLuint_GLint_GLuint___GENPT__
#define glGetUniformuiv_FORMAT FORMAT_void_GLuint_GLint_GLuint___GENPT__
#define glGetUniformuiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetUniformuiv_NOT_VOID_WRAP(...) {}
#define glGetUniformuivEXT_INDEX 1021
#define glGetUniformuivEXT_RETURN void
#define glGetUniformuivEXT_ARG_NAMES program, location, params
#define glGetUniformuivEXT_ARG_EXPAND GLuint program, GLint location, GLuint * params
#define glGetUniformuivEXT_PACKED PACKED_void_GLuint_GLint_GLuint___GENPT__
#define glGetUniformuivEXT_FORMAT FORMAT_void_GLuint_GLint_GLuint___GENPT__
#define glGetUniformuivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetUniformuivEXT_NOT_VOID_WRAP(...) {}
#define glGetVariantArrayObjectfvATI_INDEX 1022
#define glGetVariantArrayObjectfvATI_RETURN void
#define glGetVariantArrayObjectfvATI_ARG_NAMES id, pname, params
#define glGetVariantArrayObjectfvATI_ARG_EXPAND GLuint id, GLenum pname, GLfloat * params
#define glGetVariantArrayObjectfvATI_PACKED PACKED_void_GLuint_GLenum_GLfloat___GENPT__
#define glGetVariantArrayObjectfvATI_FORMAT FORMAT_void_GLuint_GLenum_GLfloat___GENPT__
#define glGetVariantArrayObjectfvATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetVariantArrayObjectfvATI_NOT_VOID_WRAP(...) {}
#define glGetVariantArrayObjectivATI_INDEX 1023
#define glGetVariantArrayObjectivATI_RETURN void
#define glGetVariantArrayObjectivATI_ARG_NAMES id, pname, params
#define glGetVariantArrayObjectivATI_ARG_EXPAND GLuint id, GLenum pname, GLint * params
#define glGetVariantArrayObjectivATI_PACKED PACKED_void_GLuint_GLenum_GLint___GENPT__
#define glGetVariantArrayObjectivATI_FORMAT FORMAT_void_GLuint_GLenum_GLint___GENPT__
#define glGetVariantArrayObjectivATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetVariantArrayObjectivATI_NOT_VOID_WRAP(...) {}
#define glGetVariantBooleanvEXT_INDEX 1024
#define glGetVariantBooleanvEXT_RETURN void
#define glGetVariantBooleanvEXT_ARG_NAMES id, value, data
#define glGetVariantBooleanvEXT_ARG_EXPAND GLuint id, GLenum value, GLboolean * data
#define glGetVariantBooleanvEXT_PACKED PACKED_void_GLuint_GLenum_GLboolean___GENPT__
#define glGetVariantBooleanvEXT_FORMAT FORMAT_void_GLuint_GLenum_GLboolean___GENPT__
#define glGetVariantBooleanvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetVariantBooleanvEXT_NOT_VOID_WRAP(...) {}
#define glGetVariantFloatvEXT_INDEX 1025
#define glGetVariantFloatvEXT_RETURN void
#define glGetVariantFloatvEXT_ARG_NAMES id, value, data
#define glGetVariantFloatvEXT_ARG_EXPAND GLuint id, GLenum value, GLfloat * data
#define glGetVariantFloatvEXT_PACKED PACKED_void_GLuint_GLenum_GLfloat___GENPT__
#define glGetVariantFloatvEXT_FORMAT FORMAT_void_GLuint_GLenum_GLfloat___GENPT__
#define glGetVariantFloatvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetVariantFloatvEXT_NOT_VOID_WRAP(...) {}
#define glGetVariantIntegervEXT_INDEX 1026
#define glGetVariantIntegervEXT_RETURN void
#define glGetVariantIntegervEXT_ARG_NAMES id, value, data
#define glGetVariantIntegervEXT_ARG_EXPAND GLuint id, GLenum value, GLint * data
#define glGetVariantIntegervEXT_PACKED PACKED_void_GLuint_GLenum_GLint___GENPT__
#define glGetVariantIntegervEXT_FORMAT FORMAT_void_GLuint_GLenum_GLint___GENPT__
#define glGetVariantIntegervEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetVariantIntegervEXT_NOT_VOID_WRAP(...) {}
#define glGetVariantPointervEXT_INDEX 1027
#define glGetVariantPointervEXT_RETURN void
#define glGetVariantPointervEXT_ARG_NAMES id, value, data
#define glGetVariantPointervEXT_ARG_EXPAND GLuint id, GLenum value, GLvoid * data
#define glGetVariantPointervEXT_PACKED PACKED_void_GLuint_GLenum_GLvoid___GENPT__
#define glGetVariantPointervEXT_FORMAT FORMAT_void_GLuint_GLenum_GLvoid___GENPT__
#define glGetVariantPointervEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetVariantPointervEXT_NOT_VOID_WRAP(...) {}
#define glGetVaryingLocationNV_INDEX 1028
#define glGetVaryingLocationNV_RETURN GLint
#define glGetVaryingLocationNV_ARG_NAMES program, name
#define glGetVaryingLocationNV_ARG_EXPAND GLuint program, const GLchar * name
#define glGetVaryingLocationNV_PACKED PACKED_GLint_GLuint_const_GLchar___GENPT__
#define glGetVaryingLocationNV_FORMAT FORMAT_GLint_GLuint_const_GLchar___GENPT__
#define glGetVaryingLocationNV_VOID_ONLY_WRAP(...) {}
#define glGetVaryingLocationNV_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glGetVertexArrayIntegeri_vEXT_INDEX 1029
#define glGetVertexArrayIntegeri_vEXT_RETURN void
#define glGetVertexArrayIntegeri_vEXT_ARG_NAMES vaobj, index, pname, param
#define glGetVertexArrayIntegeri_vEXT_ARG_EXPAND GLuint vaobj, GLuint index, GLenum pname, GLint * param
#define glGetVertexArrayIntegeri_vEXT_PACKED PACKED_void_GLuint_GLuint_GLenum_GLint___GENPT__
#define glGetVertexArrayIntegeri_vEXT_FORMAT FORMAT_void_GLuint_GLuint_GLenum_GLint___GENPT__
#define glGetVertexArrayIntegeri_vEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetVertexArrayIntegeri_vEXT_NOT_VOID_WRAP(...) {}
#define glGetVertexArrayIntegervEXT_INDEX 1030
#define glGetVertexArrayIntegervEXT_RETURN void
#define glGetVertexArrayIntegervEXT_ARG_NAMES vaobj, pname, param
#define glGetVertexArrayIntegervEXT_ARG_EXPAND GLuint vaobj, GLenum pname, GLint * param
#define glGetVertexArrayIntegervEXT_PACKED PACKED_void_GLuint_GLenum_GLint___GENPT__
#define glGetVertexArrayIntegervEXT_FORMAT FORMAT_void_GLuint_GLenum_GLint___GENPT__
#define glGetVertexArrayIntegervEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetVertexArrayIntegervEXT_NOT_VOID_WRAP(...) {}
#define glGetVertexArrayPointeri_vEXT_INDEX 1031
#define glGetVertexArrayPointeri_vEXT_RETURN void
#define glGetVertexArrayPointeri_vEXT_ARG_NAMES vaobj, index, pname, param
#define glGetVertexArrayPointeri_vEXT_ARG_EXPAND GLuint vaobj, GLuint index, GLenum pname, GLvoid * param
#define glGetVertexArrayPointeri_vEXT_PACKED PACKED_void_GLuint_GLuint_GLenum_GLvoid___GENPT__
#define glGetVertexArrayPointeri_vEXT_FORMAT FORMAT_void_GLuint_GLuint_GLenum_GLvoid___GENPT__
#define glGetVertexArrayPointeri_vEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetVertexArrayPointeri_vEXT_NOT_VOID_WRAP(...) {}
#define glGetVertexArrayPointervEXT_INDEX 1032
#define glGetVertexArrayPointervEXT_RETURN void
#define glGetVertexArrayPointervEXT_ARG_NAMES vaobj, pname, param
#define glGetVertexArrayPointervEXT_ARG_EXPAND GLuint vaobj, GLenum pname, GLvoid * param
#define glGetVertexArrayPointervEXT_PACKED PACKED_void_GLuint_GLenum_GLvoid___GENPT__
#define glGetVertexArrayPointervEXT_FORMAT FORMAT_void_GLuint_GLenum_GLvoid___GENPT__
#define glGetVertexArrayPointervEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetVertexArrayPointervEXT_NOT_VOID_WRAP(...) {}
#define glGetVertexAttribArrayObjectfvATI_INDEX 1033
#define glGetVertexAttribArrayObjectfvATI_RETURN void
#define glGetVertexAttribArrayObjectfvATI_ARG_NAMES index, pname, params
#define glGetVertexAttribArrayObjectfvATI_ARG_EXPAND GLuint index, GLenum pname, GLfloat * params
#define glGetVertexAttribArrayObjectfvATI_PACKED PACKED_void_GLuint_GLenum_GLfloat___GENPT__
#define glGetVertexAttribArrayObjectfvATI_FORMAT FORMAT_void_GLuint_GLenum_GLfloat___GENPT__
#define glGetVertexAttribArrayObjectfvATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetVertexAttribArrayObjectfvATI_NOT_VOID_WRAP(...) {}
#define glGetVertexAttribArrayObjectivATI_INDEX 1034
#define glGetVertexAttribArrayObjectivATI_RETURN void
#define glGetVertexAttribArrayObjectivATI_ARG_NAMES index, pname, params
#define glGetVertexAttribArrayObjectivATI_ARG_EXPAND GLuint index, GLenum pname, GLint * params
#define glGetVertexAttribArrayObjectivATI_PACKED PACKED_void_GLuint_GLenum_GLint___GENPT__
#define glGetVertexAttribArrayObjectivATI_FORMAT FORMAT_void_GLuint_GLenum_GLint___GENPT__
#define glGetVertexAttribArrayObjectivATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetVertexAttribArrayObjectivATI_NOT_VOID_WRAP(...) {}
#define glGetVertexAttribIiv_INDEX 1035
#define glGetVertexAttribIiv_RETURN void
#define glGetVertexAttribIiv_ARG_NAMES index, pname, params
#define glGetVertexAttribIiv_ARG_EXPAND GLuint index, GLenum pname, GLint * params
#define glGetVertexAttribIiv_PACKED PACKED_void_GLuint_GLenum_GLint___GENPT__
#define glGetVertexAttribIiv_FORMAT FORMAT_void_GLuint_GLenum_GLint___GENPT__
#define glGetVertexAttribIiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetVertexAttribIiv_NOT_VOID_WRAP(...) {}
#define glGetVertexAttribIivEXT_INDEX 1036
#define glGetVertexAttribIivEXT_RETURN void
#define glGetVertexAttribIivEXT_ARG_NAMES index, pname, params
#define glGetVertexAttribIivEXT_ARG_EXPAND GLuint index, GLenum pname, GLint * params
#define glGetVertexAttribIivEXT_PACKED PACKED_void_GLuint_GLenum_GLint___GENPT__
#define glGetVertexAttribIivEXT_FORMAT FORMAT_void_GLuint_GLenum_GLint___GENPT__
#define glGetVertexAttribIivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetVertexAttribIivEXT_NOT_VOID_WRAP(...) {}
#define glGetVertexAttribIuiv_INDEX 1037
#define glGetVertexAttribIuiv_RETURN void
#define glGetVertexAttribIuiv_ARG_NAMES index, pname, params
#define glGetVertexAttribIuiv_ARG_EXPAND GLuint index, GLenum pname, GLuint * params
#define glGetVertexAttribIuiv_PACKED PACKED_void_GLuint_GLenum_GLuint___GENPT__
#define glGetVertexAttribIuiv_FORMAT FORMAT_void_GLuint_GLenum_GLuint___GENPT__
#define glGetVertexAttribIuiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetVertexAttribIuiv_NOT_VOID_WRAP(...) {}
#define glGetVertexAttribIuivEXT_INDEX 1038
#define glGetVertexAttribIuivEXT_RETURN void
#define glGetVertexAttribIuivEXT_ARG_NAMES index, pname, params
#define glGetVertexAttribIuivEXT_ARG_EXPAND GLuint index, GLenum pname, GLuint * params
#define glGetVertexAttribIuivEXT_PACKED PACKED_void_GLuint_GLenum_GLuint___GENPT__
#define glGetVertexAttribIuivEXT_FORMAT FORMAT_void_GLuint_GLenum_GLuint___GENPT__
#define glGetVertexAttribIuivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetVertexAttribIuivEXT_NOT_VOID_WRAP(...) {}
#define glGetVertexAttribLdv_INDEX 1039
#define glGetVertexAttribLdv_RETURN void
#define glGetVertexAttribLdv_ARG_NAMES index, pname, params
#define glGetVertexAttribLdv_ARG_EXPAND GLuint index, GLenum pname, GLdouble * params
#define glGetVertexAttribLdv_PACKED PACKED_void_GLuint_GLenum_GLdouble___GENPT__
#define glGetVertexAttribLdv_FORMAT FORMAT_void_GLuint_GLenum_GLdouble___GENPT__
#define glGetVertexAttribLdv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetVertexAttribLdv_NOT_VOID_WRAP(...) {}
#define glGetVertexAttribLdvEXT_INDEX 1040
#define glGetVertexAttribLdvEXT_RETURN void
#define glGetVertexAttribLdvEXT_ARG_NAMES index, pname, params
#define glGetVertexAttribLdvEXT_ARG_EXPAND GLuint index, GLenum pname, GLdouble * params
#define glGetVertexAttribLdvEXT_PACKED PACKED_void_GLuint_GLenum_GLdouble___GENPT__
#define glGetVertexAttribLdvEXT_FORMAT FORMAT_void_GLuint_GLenum_GLdouble___GENPT__
#define glGetVertexAttribLdvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetVertexAttribLdvEXT_NOT_VOID_WRAP(...) {}
#define glGetVertexAttribLi64vNV_INDEX 1041
#define glGetVertexAttribLi64vNV_RETURN void
#define glGetVertexAttribLi64vNV_ARG_NAMES index, pname, params
#define glGetVertexAttribLi64vNV_ARG_EXPAND GLuint index, GLenum pname, GLint64EXT * params
#define glGetVertexAttribLi64vNV_PACKED PACKED_void_GLuint_GLenum_GLint64EXT___GENPT__
#define glGetVertexAttribLi64vNV_FORMAT FORMAT_void_GLuint_GLenum_GLint64EXT___GENPT__
#define glGetVertexAttribLi64vNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetVertexAttribLi64vNV_NOT_VOID_WRAP(...) {}
#define glGetVertexAttribLui64vNV_INDEX 1042
#define glGetVertexAttribLui64vNV_RETURN void
#define glGetVertexAttribLui64vNV_ARG_NAMES index, pname, params
#define glGetVertexAttribLui64vNV_ARG_EXPAND GLuint index, GLenum pname, GLuint64EXT * params
#define glGetVertexAttribLui64vNV_PACKED PACKED_void_GLuint_GLenum_GLuint64EXT___GENPT__
#define glGetVertexAttribLui64vNV_FORMAT FORMAT_void_GLuint_GLenum_GLuint64EXT___GENPT__
#define glGetVertexAttribLui64vNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetVertexAttribLui64vNV_NOT_VOID_WRAP(...) {}
#define glGetVertexAttribPointerv_INDEX 1043
#define glGetVertexAttribPointerv_RETURN void
#define glGetVertexAttribPointerv_ARG_NAMES index, pname, pointer
#define glGetVertexAttribPointerv_ARG_EXPAND GLuint index, GLenum pname, GLvoid * pointer
#define glGetVertexAttribPointerv_PACKED PACKED_void_GLuint_GLenum_GLvoid___GENPT__
#define glGetVertexAttribPointerv_FORMAT FORMAT_void_GLuint_GLenum_GLvoid___GENPT__
#define glGetVertexAttribPointerv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetVertexAttribPointerv_NOT_VOID_WRAP(...) {}
#define glGetVertexAttribPointervARB_INDEX 1044
#define glGetVertexAttribPointervARB_RETURN void
#define glGetVertexAttribPointervARB_ARG_NAMES index, pname, pointer
#define glGetVertexAttribPointervARB_ARG_EXPAND GLuint index, GLenum pname, GLvoid * pointer
#define glGetVertexAttribPointervARB_PACKED PACKED_void_GLuint_GLenum_GLvoid___GENPT__
#define glGetVertexAttribPointervARB_FORMAT FORMAT_void_GLuint_GLenum_GLvoid___GENPT__
#define glGetVertexAttribPointervARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetVertexAttribPointervARB_NOT_VOID_WRAP(...) {}
#define glGetVertexAttribPointervNV_INDEX 1045
#define glGetVertexAttribPointervNV_RETURN void
#define glGetVertexAttribPointervNV_ARG_NAMES index, pname, pointer
#define glGetVertexAttribPointervNV_ARG_EXPAND GLuint index, GLenum pname, GLvoid * pointer
#define glGetVertexAttribPointervNV_PACKED PACKED_void_GLuint_GLenum_GLvoid___GENPT__
#define glGetVertexAttribPointervNV_FORMAT FORMAT_void_GLuint_GLenum_GLvoid___GENPT__
#define glGetVertexAttribPointervNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetVertexAttribPointervNV_NOT_VOID_WRAP(...) {}
#define glGetVertexAttribdv_INDEX 1046
#define glGetVertexAttribdv_RETURN void
#define glGetVertexAttribdv_ARG_NAMES index, pname, params
#define glGetVertexAttribdv_ARG_EXPAND GLuint index, GLenum pname, GLdouble * params
#define glGetVertexAttribdv_PACKED PACKED_void_GLuint_GLenum_GLdouble___GENPT__
#define glGetVertexAttribdv_FORMAT FORMAT_void_GLuint_GLenum_GLdouble___GENPT__
#define glGetVertexAttribdv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetVertexAttribdv_NOT_VOID_WRAP(...) {}
#define glGetVertexAttribdvARB_INDEX 1047
#define glGetVertexAttribdvARB_RETURN void
#define glGetVertexAttribdvARB_ARG_NAMES index, pname, params
#define glGetVertexAttribdvARB_ARG_EXPAND GLuint index, GLenum pname, GLdouble * params
#define glGetVertexAttribdvARB_PACKED PACKED_void_GLuint_GLenum_GLdouble___GENPT__
#define glGetVertexAttribdvARB_FORMAT FORMAT_void_GLuint_GLenum_GLdouble___GENPT__
#define glGetVertexAttribdvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetVertexAttribdvARB_NOT_VOID_WRAP(...) {}
#define glGetVertexAttribdvNV_INDEX 1048
#define glGetVertexAttribdvNV_RETURN void
#define glGetVertexAttribdvNV_ARG_NAMES index, pname, params
#define glGetVertexAttribdvNV_ARG_EXPAND GLuint index, GLenum pname, GLdouble * params
#define glGetVertexAttribdvNV_PACKED PACKED_void_GLuint_GLenum_GLdouble___GENPT__
#define glGetVertexAttribdvNV_FORMAT FORMAT_void_GLuint_GLenum_GLdouble___GENPT__
#define glGetVertexAttribdvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetVertexAttribdvNV_NOT_VOID_WRAP(...) {}
#define glGetVertexAttribfv_INDEX 1049
#define glGetVertexAttribfv_RETURN void
#define glGetVertexAttribfv_ARG_NAMES index, pname, params
#define glGetVertexAttribfv_ARG_EXPAND GLuint index, GLenum pname, GLfloat * params
#define glGetVertexAttribfv_PACKED PACKED_void_GLuint_GLenum_GLfloat___GENPT__
#define glGetVertexAttribfv_FORMAT FORMAT_void_GLuint_GLenum_GLfloat___GENPT__
#define glGetVertexAttribfv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetVertexAttribfv_NOT_VOID_WRAP(...) {}
#define glGetVertexAttribfvARB_INDEX 1050
#define glGetVertexAttribfvARB_RETURN void
#define glGetVertexAttribfvARB_ARG_NAMES index, pname, params
#define glGetVertexAttribfvARB_ARG_EXPAND GLuint index, GLenum pname, GLfloat * params
#define glGetVertexAttribfvARB_PACKED PACKED_void_GLuint_GLenum_GLfloat___GENPT__
#define glGetVertexAttribfvARB_FORMAT FORMAT_void_GLuint_GLenum_GLfloat___GENPT__
#define glGetVertexAttribfvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetVertexAttribfvARB_NOT_VOID_WRAP(...) {}
#define glGetVertexAttribfvNV_INDEX 1051
#define glGetVertexAttribfvNV_RETURN void
#define glGetVertexAttribfvNV_ARG_NAMES index, pname, params
#define glGetVertexAttribfvNV_ARG_EXPAND GLuint index, GLenum pname, GLfloat * params
#define glGetVertexAttribfvNV_PACKED PACKED_void_GLuint_GLenum_GLfloat___GENPT__
#define glGetVertexAttribfvNV_FORMAT FORMAT_void_GLuint_GLenum_GLfloat___GENPT__
#define glGetVertexAttribfvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetVertexAttribfvNV_NOT_VOID_WRAP(...) {}
#define glGetVertexAttribiv_INDEX 1052
#define glGetVertexAttribiv_RETURN void
#define glGetVertexAttribiv_ARG_NAMES index, pname, params
#define glGetVertexAttribiv_ARG_EXPAND GLuint index, GLenum pname, GLint * params
#define glGetVertexAttribiv_PACKED PACKED_void_GLuint_GLenum_GLint___GENPT__
#define glGetVertexAttribiv_FORMAT FORMAT_void_GLuint_GLenum_GLint___GENPT__
#define glGetVertexAttribiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetVertexAttribiv_NOT_VOID_WRAP(...) {}
#define glGetVertexAttribivARB_INDEX 1053
#define glGetVertexAttribivARB_RETURN void
#define glGetVertexAttribivARB_ARG_NAMES index, pname, params
#define glGetVertexAttribivARB_ARG_EXPAND GLuint index, GLenum pname, GLint * params
#define glGetVertexAttribivARB_PACKED PACKED_void_GLuint_GLenum_GLint___GENPT__
#define glGetVertexAttribivARB_FORMAT FORMAT_void_GLuint_GLenum_GLint___GENPT__
#define glGetVertexAttribivARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetVertexAttribivARB_NOT_VOID_WRAP(...) {}
#define glGetVertexAttribivNV_INDEX 1054
#define glGetVertexAttribivNV_RETURN void
#define glGetVertexAttribivNV_ARG_NAMES index, pname, params
#define glGetVertexAttribivNV_ARG_EXPAND GLuint index, GLenum pname, GLint * params
#define glGetVertexAttribivNV_PACKED PACKED_void_GLuint_GLenum_GLint___GENPT__
#define glGetVertexAttribivNV_FORMAT FORMAT_void_GLuint_GLenum_GLint___GENPT__
#define glGetVertexAttribivNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetVertexAttribivNV_NOT_VOID_WRAP(...) {}
#define glGetVideoCaptureStreamdvNV_INDEX 1055
#define glGetVideoCaptureStreamdvNV_RETURN void
#define glGetVideoCaptureStreamdvNV_ARG_NAMES video_capture_slot, stream, pname, params
#define glGetVideoCaptureStreamdvNV_ARG_EXPAND GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble * params
#define glGetVideoCaptureStreamdvNV_PACKED PACKED_void_GLuint_GLuint_GLenum_GLdouble___GENPT__
#define glGetVideoCaptureStreamdvNV_FORMAT FORMAT_void_GLuint_GLuint_GLenum_GLdouble___GENPT__
#define glGetVideoCaptureStreamdvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetVideoCaptureStreamdvNV_NOT_VOID_WRAP(...) {}
#define glGetVideoCaptureStreamfvNV_INDEX 1056
#define glGetVideoCaptureStreamfvNV_RETURN void
#define glGetVideoCaptureStreamfvNV_ARG_NAMES video_capture_slot, stream, pname, params
#define glGetVideoCaptureStreamfvNV_ARG_EXPAND GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat * params
#define glGetVideoCaptureStreamfvNV_PACKED PACKED_void_GLuint_GLuint_GLenum_GLfloat___GENPT__
#define glGetVideoCaptureStreamfvNV_FORMAT FORMAT_void_GLuint_GLuint_GLenum_GLfloat___GENPT__
#define glGetVideoCaptureStreamfvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetVideoCaptureStreamfvNV_NOT_VOID_WRAP(...) {}
#define glGetVideoCaptureStreamivNV_INDEX 1057
#define glGetVideoCaptureStreamivNV_RETURN void
#define glGetVideoCaptureStreamivNV_ARG_NAMES video_capture_slot, stream, pname, params
#define glGetVideoCaptureStreamivNV_ARG_EXPAND GLuint video_capture_slot, GLuint stream, GLenum pname, GLint * params
#define glGetVideoCaptureStreamivNV_PACKED PACKED_void_GLuint_GLuint_GLenum_GLint___GENPT__
#define glGetVideoCaptureStreamivNV_FORMAT FORMAT_void_GLuint_GLuint_GLenum_GLint___GENPT__
#define glGetVideoCaptureStreamivNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetVideoCaptureStreamivNV_NOT_VOID_WRAP(...) {}
#define glGetVideoCaptureivNV_INDEX 1058
#define glGetVideoCaptureivNV_RETURN void
#define glGetVideoCaptureivNV_ARG_NAMES video_capture_slot, pname, params
#define glGetVideoCaptureivNV_ARG_EXPAND GLuint video_capture_slot, GLenum pname, GLint * params
#define glGetVideoCaptureivNV_PACKED PACKED_void_GLuint_GLenum_GLint___GENPT__
#define glGetVideoCaptureivNV_FORMAT FORMAT_void_GLuint_GLenum_GLint___GENPT__
#define glGetVideoCaptureivNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetVideoCaptureivNV_NOT_VOID_WRAP(...) {}
#define glGetVideoi64vNV_INDEX 1059
#define glGetVideoi64vNV_RETURN void
#define glGetVideoi64vNV_ARG_NAMES video_slot, pname, params
#define glGetVideoi64vNV_ARG_EXPAND GLuint video_slot, GLenum pname, GLint64EXT * params
#define glGetVideoi64vNV_PACKED PACKED_void_GLuint_GLenum_GLint64EXT___GENPT__
#define glGetVideoi64vNV_FORMAT FORMAT_void_GLuint_GLenum_GLint64EXT___GENPT__
#define glGetVideoi64vNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetVideoi64vNV_NOT_VOID_WRAP(...) {}
#define glGetVideoivNV_INDEX 1060
#define glGetVideoivNV_RETURN void
#define glGetVideoivNV_ARG_NAMES video_slot, pname, params
#define glGetVideoivNV_ARG_EXPAND GLuint video_slot, GLenum pname, GLint * params
#define glGetVideoivNV_PACKED PACKED_void_GLuint_GLenum_GLint___GENPT__
#define glGetVideoivNV_FORMAT FORMAT_void_GLuint_GLenum_GLint___GENPT__
#define glGetVideoivNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetVideoivNV_NOT_VOID_WRAP(...) {}
#define glGetVideoui64vNV_INDEX 1061
#define glGetVideoui64vNV_RETURN void
#define glGetVideoui64vNV_ARG_NAMES video_slot, pname, params
#define glGetVideoui64vNV_ARG_EXPAND GLuint video_slot, GLenum pname, GLuint64EXT * params
#define glGetVideoui64vNV_PACKED PACKED_void_GLuint_GLenum_GLuint64EXT___GENPT__
#define glGetVideoui64vNV_FORMAT FORMAT_void_GLuint_GLenum_GLuint64EXT___GENPT__
#define glGetVideoui64vNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetVideoui64vNV_NOT_VOID_WRAP(...) {}
#define glGetVideouivNV_INDEX 1062
#define glGetVideouivNV_RETURN void
#define glGetVideouivNV_ARG_NAMES video_slot, pname, params
#define glGetVideouivNV_ARG_EXPAND GLuint video_slot, GLenum pname, GLuint * params
#define glGetVideouivNV_PACKED PACKED_void_GLuint_GLenum_GLuint___GENPT__
#define glGetVideouivNV_FORMAT FORMAT_void_GLuint_GLenum_GLuint___GENPT__
#define glGetVideouivNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetVideouivNV_NOT_VOID_WRAP(...) {}
#define glGetnColorTableARB_INDEX 1063
#define glGetnColorTableARB_RETURN void
#define glGetnColorTableARB_ARG_NAMES target, format, type, bufSize, table
#define glGetnColorTableARB_ARG_EXPAND GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid * table
#define glGetnColorTableARB_PACKED PACKED_void_GLenum_GLenum_GLenum_GLsizei_GLvoid___GENPT__
#define glGetnColorTableARB_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLsizei_GLvoid___GENPT__
#define glGetnColorTableARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetnColorTableARB_NOT_VOID_WRAP(...) {}
#define glGetnCompressedTexImageARB_INDEX 1064
#define glGetnCompressedTexImageARB_RETURN void
#define glGetnCompressedTexImageARB_ARG_NAMES target, lod, bufSize, img
#define glGetnCompressedTexImageARB_ARG_EXPAND GLenum target, GLint lod, GLsizei bufSize, GLvoid * img
#define glGetnCompressedTexImageARB_PACKED PACKED_void_GLenum_GLint_GLsizei_GLvoid___GENPT__
#define glGetnCompressedTexImageARB_FORMAT FORMAT_void_GLenum_GLint_GLsizei_GLvoid___GENPT__
#define glGetnCompressedTexImageARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetnCompressedTexImageARB_NOT_VOID_WRAP(...) {}
#define glGetnConvolutionFilterARB_INDEX 1065
#define glGetnConvolutionFilterARB_RETURN void
#define glGetnConvolutionFilterARB_ARG_NAMES target, format, type, bufSize, image
#define glGetnConvolutionFilterARB_ARG_EXPAND GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid * image
#define glGetnConvolutionFilterARB_PACKED PACKED_void_GLenum_GLenum_GLenum_GLsizei_GLvoid___GENPT__
#define glGetnConvolutionFilterARB_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLsizei_GLvoid___GENPT__
#define glGetnConvolutionFilterARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetnConvolutionFilterARB_NOT_VOID_WRAP(...) {}
#define glGetnHistogramARB_INDEX 1066
#define glGetnHistogramARB_RETURN void
#define glGetnHistogramARB_ARG_NAMES target, reset, format, type, bufSize, values
#define glGetnHistogramARB_ARG_EXPAND GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid * values
#define glGetnHistogramARB_PACKED PACKED_void_GLenum_GLboolean_GLenum_GLenum_GLsizei_GLvoid___GENPT__
#define glGetnHistogramARB_FORMAT FORMAT_void_GLenum_GLboolean_GLenum_GLenum_GLsizei_GLvoid___GENPT__
#define glGetnHistogramARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetnHistogramARB_NOT_VOID_WRAP(...) {}
#define glGetnMapdvARB_INDEX 1067
#define glGetnMapdvARB_RETURN void
#define glGetnMapdvARB_ARG_NAMES target, query, bufSize, v
#define glGetnMapdvARB_ARG_EXPAND GLenum target, GLenum query, GLsizei bufSize, GLdouble * v
#define glGetnMapdvARB_PACKED PACKED_void_GLenum_GLenum_GLsizei_GLdouble___GENPT__
#define glGetnMapdvARB_FORMAT FORMAT_void_GLenum_GLenum_GLsizei_GLdouble___GENPT__
#define glGetnMapdvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetnMapdvARB_NOT_VOID_WRAP(...) {}
#define glGetnMapfvARB_INDEX 1068
#define glGetnMapfvARB_RETURN void
#define glGetnMapfvARB_ARG_NAMES target, query, bufSize, v
#define glGetnMapfvARB_ARG_EXPAND GLenum target, GLenum query, GLsizei bufSize, GLfloat * v
#define glGetnMapfvARB_PACKED PACKED_void_GLenum_GLenum_GLsizei_GLfloat___GENPT__
#define glGetnMapfvARB_FORMAT FORMAT_void_GLenum_GLenum_GLsizei_GLfloat___GENPT__
#define glGetnMapfvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetnMapfvARB_NOT_VOID_WRAP(...) {}
#define glGetnMapivARB_INDEX 1069
#define glGetnMapivARB_RETURN void
#define glGetnMapivARB_ARG_NAMES target, query, bufSize, v
#define glGetnMapivARB_ARG_EXPAND GLenum target, GLenum query, GLsizei bufSize, GLint * v
#define glGetnMapivARB_PACKED PACKED_void_GLenum_GLenum_GLsizei_GLint___GENPT__
#define glGetnMapivARB_FORMAT FORMAT_void_GLenum_GLenum_GLsizei_GLint___GENPT__
#define glGetnMapivARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetnMapivARB_NOT_VOID_WRAP(...) {}
#define glGetnMinmaxARB_INDEX 1070
#define glGetnMinmaxARB_RETURN void
#define glGetnMinmaxARB_ARG_NAMES target, reset, format, type, bufSize, values
#define glGetnMinmaxARB_ARG_EXPAND GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid * values
#define glGetnMinmaxARB_PACKED PACKED_void_GLenum_GLboolean_GLenum_GLenum_GLsizei_GLvoid___GENPT__
#define glGetnMinmaxARB_FORMAT FORMAT_void_GLenum_GLboolean_GLenum_GLenum_GLsizei_GLvoid___GENPT__
#define glGetnMinmaxARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetnMinmaxARB_NOT_VOID_WRAP(...) {}
#define glGetnPixelMapfvARB_INDEX 1071
#define glGetnPixelMapfvARB_RETURN void
#define glGetnPixelMapfvARB_ARG_NAMES map, bufSize, values
#define glGetnPixelMapfvARB_ARG_EXPAND GLenum map, GLsizei bufSize, GLfloat * values
#define glGetnPixelMapfvARB_PACKED PACKED_void_GLenum_GLsizei_GLfloat___GENPT__
#define glGetnPixelMapfvARB_FORMAT FORMAT_void_GLenum_GLsizei_GLfloat___GENPT__
#define glGetnPixelMapfvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetnPixelMapfvARB_NOT_VOID_WRAP(...) {}
#define glGetnPixelMapuivARB_INDEX 1072
#define glGetnPixelMapuivARB_RETURN void
#define glGetnPixelMapuivARB_ARG_NAMES map, bufSize, values
#define glGetnPixelMapuivARB_ARG_EXPAND GLenum map, GLsizei bufSize, GLuint * values
#define glGetnPixelMapuivARB_PACKED PACKED_void_GLenum_GLsizei_GLuint___GENPT__
#define glGetnPixelMapuivARB_FORMAT FORMAT_void_GLenum_GLsizei_GLuint___GENPT__
#define glGetnPixelMapuivARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetnPixelMapuivARB_NOT_VOID_WRAP(...) {}
#define glGetnPixelMapusvARB_INDEX 1073
#define glGetnPixelMapusvARB_RETURN void
#define glGetnPixelMapusvARB_ARG_NAMES map, bufSize, values
#define glGetnPixelMapusvARB_ARG_EXPAND GLenum map, GLsizei bufSize, GLushort * values
#define glGetnPixelMapusvARB_PACKED PACKED_void_GLenum_GLsizei_GLushort___GENPT__
#define glGetnPixelMapusvARB_FORMAT FORMAT_void_GLenum_GLsizei_GLushort___GENPT__
#define glGetnPixelMapusvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetnPixelMapusvARB_NOT_VOID_WRAP(...) {}
#define glGetnPolygonStippleARB_INDEX 1074
#define glGetnPolygonStippleARB_RETURN void
#define glGetnPolygonStippleARB_ARG_NAMES bufSize, pattern
#define glGetnPolygonStippleARB_ARG_EXPAND GLsizei bufSize, GLubyte * pattern
#define glGetnPolygonStippleARB_PACKED PACKED_void_GLsizei_GLubyte___GENPT__
#define glGetnPolygonStippleARB_FORMAT FORMAT_void_GLsizei_GLubyte___GENPT__
#define glGetnPolygonStippleARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetnPolygonStippleARB_NOT_VOID_WRAP(...) {}
#define glGetnSeparableFilterARB_INDEX 1075
#define glGetnSeparableFilterARB_RETURN void
#define glGetnSeparableFilterARB_ARG_NAMES target, format, type, rowBufSize, row, columnBufSize, column, span
#define glGetnSeparableFilterARB_ARG_EXPAND GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, GLvoid * row, GLsizei columnBufSize, GLvoid * column, GLvoid * span
#define glGetnSeparableFilterARB_PACKED PACKED_void_GLenum_GLenum_GLenum_GLsizei_GLvoid___GENPT___GLsizei_GLvoid___GENPT___GLvoid___GENPT__
#define glGetnSeparableFilterARB_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLsizei_GLvoid___GENPT___GLsizei_GLvoid___GENPT___GLvoid___GENPT__
#define glGetnSeparableFilterARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetnSeparableFilterARB_NOT_VOID_WRAP(...) {}
#define glGetnTexImageARB_INDEX 1076
#define glGetnTexImageARB_RETURN void
#define glGetnTexImageARB_ARG_NAMES target, level, format, type, bufSize, img
#define glGetnTexImageARB_ARG_EXPAND GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLvoid * img
#define glGetnTexImageARB_PACKED PACKED_void_GLenum_GLint_GLenum_GLenum_GLsizei_GLvoid___GENPT__
#define glGetnTexImageARB_FORMAT FORMAT_void_GLenum_GLint_GLenum_GLenum_GLsizei_GLvoid___GENPT__
#define glGetnTexImageARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetnTexImageARB_NOT_VOID_WRAP(...) {}
#define glGetnUniformdvARB_INDEX 1077
#define glGetnUniformdvARB_RETURN void
#define glGetnUniformdvARB_ARG_NAMES program, location, bufSize, params
#define glGetnUniformdvARB_ARG_EXPAND GLuint program, GLint location, GLsizei bufSize, GLdouble * params
#define glGetnUniformdvARB_PACKED PACKED_void_GLuint_GLint_GLsizei_GLdouble___GENPT__
#define glGetnUniformdvARB_FORMAT FORMAT_void_GLuint_GLint_GLsizei_GLdouble___GENPT__
#define glGetnUniformdvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetnUniformdvARB_NOT_VOID_WRAP(...) {}
#define glGetnUniformfvARB_INDEX 1078
#define glGetnUniformfvARB_RETURN void
#define glGetnUniformfvARB_ARG_NAMES program, location, bufSize, params
#define glGetnUniformfvARB_ARG_EXPAND GLuint program, GLint location, GLsizei bufSize, GLfloat * params
#define glGetnUniformfvARB_PACKED PACKED_void_GLuint_GLint_GLsizei_GLfloat___GENPT__
#define glGetnUniformfvARB_FORMAT FORMAT_void_GLuint_GLint_GLsizei_GLfloat___GENPT__
#define glGetnUniformfvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetnUniformfvARB_NOT_VOID_WRAP(...) {}
#define glGetnUniformivARB_INDEX 1079
#define glGetnUniformivARB_RETURN void
#define glGetnUniformivARB_ARG_NAMES program, location, bufSize, params
#define glGetnUniformivARB_ARG_EXPAND GLuint program, GLint location, GLsizei bufSize, GLint * params
#define glGetnUniformivARB_PACKED PACKED_void_GLuint_GLint_GLsizei_GLint___GENPT__
#define glGetnUniformivARB_FORMAT FORMAT_void_GLuint_GLint_GLsizei_GLint___GENPT__
#define glGetnUniformivARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetnUniformivARB_NOT_VOID_WRAP(...) {}
#define glGetnUniformuivARB_INDEX 1080
#define glGetnUniformuivARB_RETURN void
#define glGetnUniformuivARB_ARG_NAMES program, location, bufSize, params
#define glGetnUniformuivARB_ARG_EXPAND GLuint program, GLint location, GLsizei bufSize, GLuint * params
#define glGetnUniformuivARB_PACKED PACKED_void_GLuint_GLint_GLsizei_GLuint___GENPT__
#define glGetnUniformuivARB_FORMAT FORMAT_void_GLuint_GLint_GLsizei_GLuint___GENPT__
#define glGetnUniformuivARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGetnUniformuivARB_NOT_VOID_WRAP(...) {}
#define glGlobalAlphaFactorbSUN_INDEX 1081
#define glGlobalAlphaFactorbSUN_RETURN void
#define glGlobalAlphaFactorbSUN_ARG_NAMES factor
#define glGlobalAlphaFactorbSUN_ARG_EXPAND GLbyte factor
#define glGlobalAlphaFactorbSUN_PACKED PACKED_void_GLbyte
#define glGlobalAlphaFactorbSUN_FORMAT FORMAT_void_GLbyte
#define glGlobalAlphaFactorbSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGlobalAlphaFactorbSUN_NOT_VOID_WRAP(...) {}
#define glGlobalAlphaFactordSUN_INDEX 1082
#define glGlobalAlphaFactordSUN_RETURN void
#define glGlobalAlphaFactordSUN_ARG_NAMES factor
#define glGlobalAlphaFactordSUN_ARG_EXPAND GLdouble factor
#define glGlobalAlphaFactordSUN_PACKED PACKED_void_GLdouble
#define glGlobalAlphaFactordSUN_FORMAT FORMAT_void_GLdouble
#define glGlobalAlphaFactordSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGlobalAlphaFactordSUN_NOT_VOID_WRAP(...) {}
#define glGlobalAlphaFactorfSUN_INDEX 1083
#define glGlobalAlphaFactorfSUN_RETURN void
#define glGlobalAlphaFactorfSUN_ARG_NAMES factor
#define glGlobalAlphaFactorfSUN_ARG_EXPAND GLfloat factor
#define glGlobalAlphaFactorfSUN_PACKED PACKED_void_GLfloat
#define glGlobalAlphaFactorfSUN_FORMAT FORMAT_void_GLfloat
#define glGlobalAlphaFactorfSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGlobalAlphaFactorfSUN_NOT_VOID_WRAP(...) {}
#define glGlobalAlphaFactoriSUN_INDEX 1084
#define glGlobalAlphaFactoriSUN_RETURN void
#define glGlobalAlphaFactoriSUN_ARG_NAMES factor
#define glGlobalAlphaFactoriSUN_ARG_EXPAND GLint factor
#define glGlobalAlphaFactoriSUN_PACKED PACKED_void_GLint
#define glGlobalAlphaFactoriSUN_FORMAT FORMAT_void_GLint
#define glGlobalAlphaFactoriSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGlobalAlphaFactoriSUN_NOT_VOID_WRAP(...) {}
#define glGlobalAlphaFactorsSUN_INDEX 1085
#define glGlobalAlphaFactorsSUN_RETURN void
#define glGlobalAlphaFactorsSUN_ARG_NAMES factor
#define glGlobalAlphaFactorsSUN_ARG_EXPAND GLshort factor
#define glGlobalAlphaFactorsSUN_PACKED PACKED_void_GLshort
#define glGlobalAlphaFactorsSUN_FORMAT FORMAT_void_GLshort
#define glGlobalAlphaFactorsSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGlobalAlphaFactorsSUN_NOT_VOID_WRAP(...) {}
#define glGlobalAlphaFactorubSUN_INDEX 1086
#define glGlobalAlphaFactorubSUN_RETURN void
#define glGlobalAlphaFactorubSUN_ARG_NAMES factor
#define glGlobalAlphaFactorubSUN_ARG_EXPAND GLubyte factor
#define glGlobalAlphaFactorubSUN_PACKED PACKED_void_GLubyte
#define glGlobalAlphaFactorubSUN_FORMAT FORMAT_void_GLubyte
#define glGlobalAlphaFactorubSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGlobalAlphaFactorubSUN_NOT_VOID_WRAP(...) {}
#define glGlobalAlphaFactoruiSUN_INDEX 1087
#define glGlobalAlphaFactoruiSUN_RETURN void
#define glGlobalAlphaFactoruiSUN_ARG_NAMES factor
#define glGlobalAlphaFactoruiSUN_ARG_EXPAND GLuint factor
#define glGlobalAlphaFactoruiSUN_PACKED PACKED_void_GLuint
#define glGlobalAlphaFactoruiSUN_FORMAT FORMAT_void_GLuint
#define glGlobalAlphaFactoruiSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGlobalAlphaFactoruiSUN_NOT_VOID_WRAP(...) {}
#define glGlobalAlphaFactorusSUN_INDEX 1088
#define glGlobalAlphaFactorusSUN_RETURN void
#define glGlobalAlphaFactorusSUN_ARG_NAMES factor
#define glGlobalAlphaFactorusSUN_ARG_EXPAND GLushort factor
#define glGlobalAlphaFactorusSUN_PACKED PACKED_void_GLushort
#define glGlobalAlphaFactorusSUN_FORMAT FORMAT_void_GLushort
#define glGlobalAlphaFactorusSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glGlobalAlphaFactorusSUN_NOT_VOID_WRAP(...) {}
#define glHint_INDEX 1089
#define glHint_RETURN void
#define glHint_ARG_NAMES target, mode
#define glHint_ARG_EXPAND GLenum target, GLenum mode
#define glHint_PACKED PACKED_void_GLenum_GLenum
#define glHint_FORMAT FORMAT_void_GLenum_GLenum
#define glHint_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glHint_NOT_VOID_WRAP(...) {}
#define glHintPGI_INDEX 1090
#define glHintPGI_RETURN void
#define glHintPGI_ARG_NAMES target, mode
#define glHintPGI_ARG_EXPAND GLenum target, GLint mode
#define glHintPGI_PACKED PACKED_void_GLenum_GLint
#define glHintPGI_FORMAT FORMAT_void_GLenum_GLint
#define glHintPGI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glHintPGI_NOT_VOID_WRAP(...) {}
#define glHistogram_INDEX 1091
#define glHistogram_RETURN void
#define glHistogram_ARG_NAMES target, width, internalformat, sink
#define glHistogram_ARG_EXPAND GLenum target, GLsizei width, GLenum internalformat, GLboolean sink
#define glHistogram_PACKED PACKED_void_GLenum_GLsizei_GLenum_GLboolean
#define glHistogram_FORMAT FORMAT_void_GLenum_GLsizei_GLenum_GLboolean
#define glHistogram_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glHistogram_NOT_VOID_WRAP(...) {}
#define glHistogramEXT_INDEX 1092
#define glHistogramEXT_RETURN void
#define glHistogramEXT_ARG_NAMES target, width, internalformat, sink
#define glHistogramEXT_ARG_EXPAND GLenum target, GLsizei width, GLenum internalformat, GLboolean sink
#define glHistogramEXT_PACKED PACKED_void_GLenum_GLsizei_GLenum_GLboolean
#define glHistogramEXT_FORMAT FORMAT_void_GLenum_GLsizei_GLenum_GLboolean
#define glHistogramEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glHistogramEXT_NOT_VOID_WRAP(...) {}
#define glIglooInterfaceSGIX_INDEX 1093
#define glIglooInterfaceSGIX_RETURN void
#define glIglooInterfaceSGIX_ARG_NAMES pname, params
#define glIglooInterfaceSGIX_ARG_EXPAND GLenum pname, const GLvoid * params
#define glIglooInterfaceSGIX_PACKED PACKED_void_GLenum_const_GLvoid___GENPT__
#define glIglooInterfaceSGIX_FORMAT FORMAT_void_GLenum_const_GLvoid___GENPT__
#define glIglooInterfaceSGIX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glIglooInterfaceSGIX_NOT_VOID_WRAP(...) {}
#define glImageTransformParameterfHP_INDEX 1094
#define glImageTransformParameterfHP_RETURN void
#define glImageTransformParameterfHP_ARG_NAMES target, pname, param
#define glImageTransformParameterfHP_ARG_EXPAND GLenum target, GLenum pname, GLfloat param
#define glImageTransformParameterfHP_PACKED PACKED_void_GLenum_GLenum_GLfloat
#define glImageTransformParameterfHP_FORMAT FORMAT_void_GLenum_GLenum_GLfloat
#define glImageTransformParameterfHP_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glImageTransformParameterfHP_NOT_VOID_WRAP(...) {}
#define glImageTransformParameterfvHP_INDEX 1095
#define glImageTransformParameterfvHP_RETURN void
#define glImageTransformParameterfvHP_ARG_NAMES target, pname, params
#define glImageTransformParameterfvHP_ARG_EXPAND GLenum target, GLenum pname, const GLfloat * params
#define glImageTransformParameterfvHP_PACKED PACKED_void_GLenum_GLenum_const_GLfloat___GENPT__
#define glImageTransformParameterfvHP_FORMAT FORMAT_void_GLenum_GLenum_const_GLfloat___GENPT__
#define glImageTransformParameterfvHP_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glImageTransformParameterfvHP_NOT_VOID_WRAP(...) {}
#define glImageTransformParameteriHP_INDEX 1096
#define glImageTransformParameteriHP_RETURN void
#define glImageTransformParameteriHP_ARG_NAMES target, pname, param
#define glImageTransformParameteriHP_ARG_EXPAND GLenum target, GLenum pname, GLint param
#define glImageTransformParameteriHP_PACKED PACKED_void_GLenum_GLenum_GLint
#define glImageTransformParameteriHP_FORMAT FORMAT_void_GLenum_GLenum_GLint
#define glImageTransformParameteriHP_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glImageTransformParameteriHP_NOT_VOID_WRAP(...) {}
#define glImageTransformParameterivHP_INDEX 1097
#define glImageTransformParameterivHP_RETURN void
#define glImageTransformParameterivHP_ARG_NAMES target, pname, params
#define glImageTransformParameterivHP_ARG_EXPAND GLenum target, GLenum pname, const GLint * params
#define glImageTransformParameterivHP_PACKED PACKED_void_GLenum_GLenum_const_GLint___GENPT__
#define glImageTransformParameterivHP_FORMAT FORMAT_void_GLenum_GLenum_const_GLint___GENPT__
#define glImageTransformParameterivHP_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glImageTransformParameterivHP_NOT_VOID_WRAP(...) {}
#define glImportSyncEXT_INDEX 1098
#define glImportSyncEXT_RETURN GLsync
#define glImportSyncEXT_ARG_NAMES external_sync_type, external_sync, flags
#define glImportSyncEXT_ARG_EXPAND GLenum external_sync_type, GLintptr external_sync, GLbitfield flags
#define glImportSyncEXT_PACKED PACKED_GLsync_GLenum_GLintptr_GLbitfield
#define glImportSyncEXT_FORMAT FORMAT_GLsync_GLenum_GLintptr_GLbitfield
#define glImportSyncEXT_VOID_ONLY_WRAP(...) {}
#define glImportSyncEXT_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glIndexFormatNV_INDEX 1099
#define glIndexFormatNV_RETURN void
#define glIndexFormatNV_ARG_NAMES type, stride
#define glIndexFormatNV_ARG_EXPAND GLenum type, GLsizei stride
#define glIndexFormatNV_PACKED PACKED_void_GLenum_GLsizei
#define glIndexFormatNV_FORMAT FORMAT_void_GLenum_GLsizei
#define glIndexFormatNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glIndexFormatNV_NOT_VOID_WRAP(...) {}
#define glIndexFuncEXT_INDEX 1100
#define glIndexFuncEXT_RETURN void
#define glIndexFuncEXT_ARG_NAMES func, ref
#define glIndexFuncEXT_ARG_EXPAND GLenum func, GLclampf ref
#define glIndexFuncEXT_PACKED PACKED_void_GLenum_GLclampf
#define glIndexFuncEXT_FORMAT FORMAT_void_GLenum_GLclampf
#define glIndexFuncEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glIndexFuncEXT_NOT_VOID_WRAP(...) {}
#define glIndexMask_INDEX 1101
#define glIndexMask_RETURN void
#define glIndexMask_ARG_NAMES mask
#define glIndexMask_ARG_EXPAND GLuint mask
#define glIndexMask_PACKED PACKED_void_GLuint
#define glIndexMask_FORMAT FORMAT_void_GLuint
#define glIndexMask_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glIndexMask_NOT_VOID_WRAP(...) {}
#define glIndexMaterialEXT_INDEX 1102
#define glIndexMaterialEXT_RETURN void
#define glIndexMaterialEXT_ARG_NAMES face, mode
#define glIndexMaterialEXT_ARG_EXPAND GLenum face, GLenum mode
#define glIndexMaterialEXT_PACKED PACKED_void_GLenum_GLenum
#define glIndexMaterialEXT_FORMAT FORMAT_void_GLenum_GLenum
#define glIndexMaterialEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glIndexMaterialEXT_NOT_VOID_WRAP(...) {}
#define glIndexPointer_INDEX 1103
#define glIndexPointer_RETURN void
#define glIndexPointer_ARG_NAMES type, stride, pointer
#define glIndexPointer_ARG_EXPAND GLenum type, GLsizei stride, const GLvoid * pointer
#define glIndexPointer_PACKED PACKED_void_GLenum_GLsizei_const_GLvoid___GENPT__
#define glIndexPointer_FORMAT FORMAT_void_GLenum_GLsizei_const_GLvoid___GENPT__
#define glIndexPointer_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glIndexPointer_NOT_VOID_WRAP(...) {}
#define glIndexPointerEXT_INDEX 1104
#define glIndexPointerEXT_RETURN void
#define glIndexPointerEXT_ARG_NAMES type, stride, count, pointer
#define glIndexPointerEXT_ARG_EXPAND GLenum type, GLsizei stride, GLsizei count, const GLvoid * pointer
#define glIndexPointerEXT_PACKED PACKED_void_GLenum_GLsizei_GLsizei_const_GLvoid___GENPT__
#define glIndexPointerEXT_FORMAT FORMAT_void_GLenum_GLsizei_GLsizei_const_GLvoid___GENPT__
#define glIndexPointerEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glIndexPointerEXT_NOT_VOID_WRAP(...) {}
#define glIndexPointerListIBM_INDEX 1105
#define glIndexPointerListIBM_RETURN void
#define glIndexPointerListIBM_ARG_NAMES type, stride, pointer, ptrstride
#define glIndexPointerListIBM_ARG_EXPAND GLenum type, GLint stride, const GLvoid * pointer, GLint ptrstride
#define glIndexPointerListIBM_PACKED PACKED_void_GLenum_GLint_const_GLvoid___GENPT___GLint
#define glIndexPointerListIBM_FORMAT FORMAT_void_GLenum_GLint_const_GLvoid___GENPT___GLint
#define glIndexPointerListIBM_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glIndexPointerListIBM_NOT_VOID_WRAP(...) {}
#define glIndexd_INDEX 1106
#define glIndexd_RETURN void
#define glIndexd_ARG_NAMES c
#define glIndexd_ARG_EXPAND GLdouble c
#define glIndexd_PACKED PACKED_void_GLdouble
#define glIndexd_FORMAT FORMAT_void_GLdouble
#define glIndexd_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glIndexd_NOT_VOID_WRAP(...) {}
#define glIndexdv_INDEX 1107
#define glIndexdv_RETURN void
#define glIndexdv_ARG_NAMES c
#define glIndexdv_ARG_EXPAND const GLdouble * c
#define glIndexdv_PACKED PACKED_void_const_GLdouble___GENPT__
#define glIndexdv_FORMAT FORMAT_void_const_GLdouble___GENPT__
#define glIndexdv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glIndexdv_NOT_VOID_WRAP(...) {}
#define glIndexf_INDEX 1108
#define glIndexf_RETURN void
#define glIndexf_ARG_NAMES c
#define glIndexf_ARG_EXPAND GLfloat c
#define glIndexf_PACKED PACKED_void_GLfloat
#define glIndexf_FORMAT FORMAT_void_GLfloat
#define glIndexf_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glIndexf_NOT_VOID_WRAP(...) {}
#define glIndexfv_INDEX 1109
#define glIndexfv_RETURN void
#define glIndexfv_ARG_NAMES c
#define glIndexfv_ARG_EXPAND const GLfloat * c
#define glIndexfv_PACKED PACKED_void_const_GLfloat___GENPT__
#define glIndexfv_FORMAT FORMAT_void_const_GLfloat___GENPT__
#define glIndexfv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glIndexfv_NOT_VOID_WRAP(...) {}
#define glIndexi_INDEX 1110
#define glIndexi_RETURN void
#define glIndexi_ARG_NAMES c
#define glIndexi_ARG_EXPAND GLint c
#define glIndexi_PACKED PACKED_void_GLint
#define glIndexi_FORMAT FORMAT_void_GLint
#define glIndexi_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glIndexi_NOT_VOID_WRAP(...) {}
#define glIndexiv_INDEX 1111
#define glIndexiv_RETURN void
#define glIndexiv_ARG_NAMES c
#define glIndexiv_ARG_EXPAND const GLint * c
#define glIndexiv_PACKED PACKED_void_const_GLint___GENPT__
#define glIndexiv_FORMAT FORMAT_void_const_GLint___GENPT__
#define glIndexiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glIndexiv_NOT_VOID_WRAP(...) {}
#define glIndexs_INDEX 1112
#define glIndexs_RETURN void
#define glIndexs_ARG_NAMES c
#define glIndexs_ARG_EXPAND GLshort c
#define glIndexs_PACKED PACKED_void_GLshort
#define glIndexs_FORMAT FORMAT_void_GLshort
#define glIndexs_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glIndexs_NOT_VOID_WRAP(...) {}
#define glIndexsv_INDEX 1113
#define glIndexsv_RETURN void
#define glIndexsv_ARG_NAMES c
#define glIndexsv_ARG_EXPAND const GLshort * c
#define glIndexsv_PACKED PACKED_void_const_GLshort___GENPT__
#define glIndexsv_FORMAT FORMAT_void_const_GLshort___GENPT__
#define glIndexsv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glIndexsv_NOT_VOID_WRAP(...) {}
#define glIndexub_INDEX 1114
#define glIndexub_RETURN void
#define glIndexub_ARG_NAMES c
#define glIndexub_ARG_EXPAND GLubyte c
#define glIndexub_PACKED PACKED_void_GLubyte
#define glIndexub_FORMAT FORMAT_void_GLubyte
#define glIndexub_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glIndexub_NOT_VOID_WRAP(...) {}
#define glIndexubv_INDEX 1115
#define glIndexubv_RETURN void
#define glIndexubv_ARG_NAMES c
#define glIndexubv_ARG_EXPAND const GLubyte * c
#define glIndexubv_PACKED PACKED_void_const_GLubyte___GENPT__
#define glIndexubv_FORMAT FORMAT_void_const_GLubyte___GENPT__
#define glIndexubv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glIndexubv_NOT_VOID_WRAP(...) {}
#define glIndexxOES_INDEX 1116
#define glIndexxOES_RETURN void
#define glIndexxOES_ARG_NAMES component
#define glIndexxOES_ARG_EXPAND GLfixed component
#define glIndexxOES_PACKED PACKED_void_GLfixed
#define glIndexxOES_FORMAT FORMAT_void_GLfixed
#define glIndexxOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glIndexxOES_NOT_VOID_WRAP(...) {}
#define glIndexxvOES_INDEX 1117
#define glIndexxvOES_RETURN void
#define glIndexxvOES_ARG_NAMES component
#define glIndexxvOES_ARG_EXPAND const GLfixed * component
#define glIndexxvOES_PACKED PACKED_void_const_GLfixed___GENPT__
#define glIndexxvOES_FORMAT FORMAT_void_const_GLfixed___GENPT__
#define glIndexxvOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glIndexxvOES_NOT_VOID_WRAP(...) {}
#define glInitNames_INDEX 1118
#define glInitNames_RETURN void
#define glInitNames_ARG_NAMES 
#define glInitNames_ARG_EXPAND 
#define glInitNames_PACKED PACKED_void
#define glInitNames_FORMAT FORMAT_void
#define glInitNames_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glInitNames_NOT_VOID_WRAP(...) {}
#define glInsertComponentEXT_INDEX 1119
#define glInsertComponentEXT_RETURN void
#define glInsertComponentEXT_ARG_NAMES res, src, num
#define glInsertComponentEXT_ARG_EXPAND GLuint res, GLuint src, GLuint num
#define glInsertComponentEXT_PACKED PACKED_void_GLuint_GLuint_GLuint
#define glInsertComponentEXT_FORMAT FORMAT_void_GLuint_GLuint_GLuint
#define glInsertComponentEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glInsertComponentEXT_NOT_VOID_WRAP(...) {}
#define glInstrumentsBufferSGIX_INDEX 1120
#define glInstrumentsBufferSGIX_RETURN void
#define glInstrumentsBufferSGIX_ARG_NAMES size, buffer
#define glInstrumentsBufferSGIX_ARG_EXPAND GLsizei size, GLint * buffer
#define glInstrumentsBufferSGIX_PACKED PACKED_void_GLsizei_GLint___GENPT__
#define glInstrumentsBufferSGIX_FORMAT FORMAT_void_GLsizei_GLint___GENPT__
#define glInstrumentsBufferSGIX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glInstrumentsBufferSGIX_NOT_VOID_WRAP(...) {}
#define glInterleavedArrays_INDEX 1121
#define glInterleavedArrays_RETURN void
#define glInterleavedArrays_ARG_NAMES format, stride, pointer
#define glInterleavedArrays_ARG_EXPAND GLenum format, GLsizei stride, const GLvoid * pointer
#define glInterleavedArrays_PACKED PACKED_void_GLenum_GLsizei_const_GLvoid___GENPT__
#define glInterleavedArrays_FORMAT FORMAT_void_GLenum_GLsizei_const_GLvoid___GENPT__
#define glInterleavedArrays_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glInterleavedArrays_NOT_VOID_WRAP(...) {}
#define glInterpolatePathsNV_INDEX 1122
#define glInterpolatePathsNV_RETURN void
#define glInterpolatePathsNV_ARG_NAMES resultPath, pathA, pathB, weight
#define glInterpolatePathsNV_ARG_EXPAND GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight
#define glInterpolatePathsNV_PACKED PACKED_void_GLuint_GLuint_GLuint_GLfloat
#define glInterpolatePathsNV_FORMAT FORMAT_void_GLuint_GLuint_GLuint_GLfloat
#define glInterpolatePathsNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glInterpolatePathsNV_NOT_VOID_WRAP(...) {}
#define glInvalidateBufferData_INDEX 1123
#define glInvalidateBufferData_RETURN void
#define glInvalidateBufferData_ARG_NAMES buffer
#define glInvalidateBufferData_ARG_EXPAND GLuint buffer
#define glInvalidateBufferData_PACKED PACKED_void_GLuint
#define glInvalidateBufferData_FORMAT FORMAT_void_GLuint
#define glInvalidateBufferData_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glInvalidateBufferData_NOT_VOID_WRAP(...) {}
#define glInvalidateBufferSubData_INDEX 1124
#define glInvalidateBufferSubData_RETURN void
#define glInvalidateBufferSubData_ARG_NAMES buffer, offset, length
#define glInvalidateBufferSubData_ARG_EXPAND GLuint buffer, GLintptr offset, GLsizeiptr length
#define glInvalidateBufferSubData_PACKED PACKED_void_GLuint_GLintptr_GLsizeiptr
#define glInvalidateBufferSubData_FORMAT FORMAT_void_GLuint_GLintptr_GLsizeiptr
#define glInvalidateBufferSubData_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glInvalidateBufferSubData_NOT_VOID_WRAP(...) {}
#define glInvalidateFramebuffer_INDEX 1125
#define glInvalidateFramebuffer_RETURN void
#define glInvalidateFramebuffer_ARG_NAMES target, numAttachments, attachments
#define glInvalidateFramebuffer_ARG_EXPAND GLenum target, GLsizei numAttachments, const GLenum * attachments
#define glInvalidateFramebuffer_PACKED PACKED_void_GLenum_GLsizei_const_GLenum___GENPT__
#define glInvalidateFramebuffer_FORMAT FORMAT_void_GLenum_GLsizei_const_GLenum___GENPT__
#define glInvalidateFramebuffer_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glInvalidateFramebuffer_NOT_VOID_WRAP(...) {}
#define glInvalidateSubFramebuffer_INDEX 1126
#define glInvalidateSubFramebuffer_RETURN void
#define glInvalidateSubFramebuffer_ARG_NAMES target, numAttachments, attachments, x, y, width, height
#define glInvalidateSubFramebuffer_ARG_EXPAND GLenum target, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height
#define glInvalidateSubFramebuffer_PACKED PACKED_void_GLenum_GLsizei_const_GLenum___GENPT___GLint_GLint_GLsizei_GLsizei
#define glInvalidateSubFramebuffer_FORMAT FORMAT_void_GLenum_GLsizei_const_GLenum___GENPT___GLint_GLint_GLsizei_GLsizei
#define glInvalidateSubFramebuffer_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glInvalidateSubFramebuffer_NOT_VOID_WRAP(...) {}
#define glInvalidateTexImage_INDEX 1127
#define glInvalidateTexImage_RETURN void
#define glInvalidateTexImage_ARG_NAMES texture, level
#define glInvalidateTexImage_ARG_EXPAND GLuint texture, GLint level
#define glInvalidateTexImage_PACKED PACKED_void_GLuint_GLint
#define glInvalidateTexImage_FORMAT FORMAT_void_GLuint_GLint
#define glInvalidateTexImage_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glInvalidateTexImage_NOT_VOID_WRAP(...) {}
#define glInvalidateTexSubImage_INDEX 1128
#define glInvalidateTexSubImage_RETURN void
#define glInvalidateTexSubImage_ARG_NAMES texture, level, xoffset, yoffset, zoffset, width, height, depth
#define glInvalidateTexSubImage_ARG_EXPAND GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth
#define glInvalidateTexSubImage_PACKED PACKED_void_GLuint_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei
#define glInvalidateTexSubImage_FORMAT FORMAT_void_GLuint_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei
#define glInvalidateTexSubImage_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glInvalidateTexSubImage_NOT_VOID_WRAP(...) {}
#define glIsAsyncMarkerSGIX_INDEX 1129
#define glIsAsyncMarkerSGIX_RETURN GLboolean
#define glIsAsyncMarkerSGIX_ARG_NAMES marker
#define glIsAsyncMarkerSGIX_ARG_EXPAND GLuint marker
#define glIsAsyncMarkerSGIX_PACKED PACKED_GLboolean_GLuint
#define glIsAsyncMarkerSGIX_FORMAT FORMAT_GLboolean_GLuint
#define glIsAsyncMarkerSGIX_VOID_ONLY_WRAP(...) {}
#define glIsAsyncMarkerSGIX_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glIsBuffer_INDEX 1130
#define glIsBuffer_RETURN GLboolean
#define glIsBuffer_ARG_NAMES buffer
#define glIsBuffer_ARG_EXPAND GLuint buffer
#define glIsBuffer_PACKED PACKED_GLboolean_GLuint
#define glIsBuffer_FORMAT FORMAT_GLboolean_GLuint
#define glIsBuffer_VOID_ONLY_WRAP(...) {}
#define glIsBuffer_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glIsBufferARB_INDEX 1131
#define glIsBufferARB_RETURN GLboolean
#define glIsBufferARB_ARG_NAMES buffer
#define glIsBufferARB_ARG_EXPAND GLuint buffer
#define glIsBufferARB_PACKED PACKED_GLboolean_GLuint
#define glIsBufferARB_FORMAT FORMAT_GLboolean_GLuint
#define glIsBufferARB_VOID_ONLY_WRAP(...) {}
#define glIsBufferARB_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glIsBufferResidentNV_INDEX 1132
#define glIsBufferResidentNV_RETURN GLboolean
#define glIsBufferResidentNV_ARG_NAMES target
#define glIsBufferResidentNV_ARG_EXPAND GLenum target
#define glIsBufferResidentNV_PACKED PACKED_GLboolean_GLenum
#define glIsBufferResidentNV_FORMAT FORMAT_GLboolean_GLenum
#define glIsBufferResidentNV_VOID_ONLY_WRAP(...) {}
#define glIsBufferResidentNV_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glIsEnabled_INDEX 1133
#define glIsEnabled_RETURN GLboolean
#define glIsEnabled_ARG_NAMES cap
#define glIsEnabled_ARG_EXPAND GLenum cap
#define glIsEnabled_PACKED PACKED_GLboolean_GLenum
#define glIsEnabled_FORMAT FORMAT_GLboolean_GLenum
#define glIsEnabled_VOID_ONLY_WRAP(...) {}
#define glIsEnabled_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glIsEnabledIndexedEXT_INDEX 1134
#define glIsEnabledIndexedEXT_RETURN GLboolean
#define glIsEnabledIndexedEXT_ARG_NAMES target, index
#define glIsEnabledIndexedEXT_ARG_EXPAND GLenum target, GLuint index
#define glIsEnabledIndexedEXT_PACKED PACKED_GLboolean_GLenum_GLuint
#define glIsEnabledIndexedEXT_FORMAT FORMAT_GLboolean_GLenum_GLuint
#define glIsEnabledIndexedEXT_VOID_ONLY_WRAP(...) {}
#define glIsEnabledIndexedEXT_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glIsEnabledi_INDEX 1135
#define glIsEnabledi_RETURN GLboolean
#define glIsEnabledi_ARG_NAMES target, index
#define glIsEnabledi_ARG_EXPAND GLenum target, GLuint index
#define glIsEnabledi_PACKED PACKED_GLboolean_GLenum_GLuint
#define glIsEnabledi_FORMAT FORMAT_GLboolean_GLenum_GLuint
#define glIsEnabledi_VOID_ONLY_WRAP(...) {}
#define glIsEnabledi_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glIsFenceAPPLE_INDEX 1136
#define glIsFenceAPPLE_RETURN GLboolean
#define glIsFenceAPPLE_ARG_NAMES fence
#define glIsFenceAPPLE_ARG_EXPAND GLuint fence
#define glIsFenceAPPLE_PACKED PACKED_GLboolean_GLuint
#define glIsFenceAPPLE_FORMAT FORMAT_GLboolean_GLuint
#define glIsFenceAPPLE_VOID_ONLY_WRAP(...) {}
#define glIsFenceAPPLE_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glIsFenceNV_INDEX 1137
#define glIsFenceNV_RETURN GLboolean
#define glIsFenceNV_ARG_NAMES fence
#define glIsFenceNV_ARG_EXPAND GLuint fence
#define glIsFenceNV_PACKED PACKED_GLboolean_GLuint
#define glIsFenceNV_FORMAT FORMAT_GLboolean_GLuint
#define glIsFenceNV_VOID_ONLY_WRAP(...) {}
#define glIsFenceNV_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glIsFramebuffer_INDEX 1138
#define glIsFramebuffer_RETURN GLboolean
#define glIsFramebuffer_ARG_NAMES framebuffer
#define glIsFramebuffer_ARG_EXPAND GLuint framebuffer
#define glIsFramebuffer_PACKED PACKED_GLboolean_GLuint
#define glIsFramebuffer_FORMAT FORMAT_GLboolean_GLuint
#define glIsFramebuffer_VOID_ONLY_WRAP(...) {}
#define glIsFramebuffer_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glIsFramebufferEXT_INDEX 1139
#define glIsFramebufferEXT_RETURN GLboolean
#define glIsFramebufferEXT_ARG_NAMES framebuffer
#define glIsFramebufferEXT_ARG_EXPAND GLuint framebuffer
#define glIsFramebufferEXT_PACKED PACKED_GLboolean_GLuint
#define glIsFramebufferEXT_FORMAT FORMAT_GLboolean_GLuint
#define glIsFramebufferEXT_VOID_ONLY_WRAP(...) {}
#define glIsFramebufferEXT_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glIsImageHandleResidentNV_INDEX 1140
#define glIsImageHandleResidentNV_RETURN GLboolean
#define glIsImageHandleResidentNV_ARG_NAMES handle
#define glIsImageHandleResidentNV_ARG_EXPAND GLuint64 handle
#define glIsImageHandleResidentNV_PACKED PACKED_GLboolean_GLuint64
#define glIsImageHandleResidentNV_FORMAT FORMAT_GLboolean_GLuint64
#define glIsImageHandleResidentNV_VOID_ONLY_WRAP(...) {}
#define glIsImageHandleResidentNV_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glIsList_INDEX 1141
#define glIsList_RETURN GLboolean
#define glIsList_ARG_NAMES list
#define glIsList_ARG_EXPAND GLuint list
#define glIsList_PACKED PACKED_GLboolean_GLuint
#define glIsList_FORMAT FORMAT_GLboolean_GLuint
#define glIsList_VOID_ONLY_WRAP(...) {}
#define glIsList_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glIsNameAMD_INDEX 1142
#define glIsNameAMD_RETURN GLboolean
#define glIsNameAMD_ARG_NAMES identifier, name
#define glIsNameAMD_ARG_EXPAND GLenum identifier, GLuint name
#define glIsNameAMD_PACKED PACKED_GLboolean_GLenum_GLuint
#define glIsNameAMD_FORMAT FORMAT_GLboolean_GLenum_GLuint
#define glIsNameAMD_VOID_ONLY_WRAP(...) {}
#define glIsNameAMD_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glIsNamedBufferResidentNV_INDEX 1143
#define glIsNamedBufferResidentNV_RETURN GLboolean
#define glIsNamedBufferResidentNV_ARG_NAMES buffer
#define glIsNamedBufferResidentNV_ARG_EXPAND GLuint buffer
#define glIsNamedBufferResidentNV_PACKED PACKED_GLboolean_GLuint
#define glIsNamedBufferResidentNV_FORMAT FORMAT_GLboolean_GLuint
#define glIsNamedBufferResidentNV_VOID_ONLY_WRAP(...) {}
#define glIsNamedBufferResidentNV_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glIsNamedStringARB_INDEX 1144
#define glIsNamedStringARB_RETURN GLboolean
#define glIsNamedStringARB_ARG_NAMES namelen, name
#define glIsNamedStringARB_ARG_EXPAND GLint namelen, const GLchar * name
#define glIsNamedStringARB_PACKED PACKED_GLboolean_GLint_const_GLchar___GENPT__
#define glIsNamedStringARB_FORMAT FORMAT_GLboolean_GLint_const_GLchar___GENPT__
#define glIsNamedStringARB_VOID_ONLY_WRAP(...) {}
#define glIsNamedStringARB_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glIsObjectBufferATI_INDEX 1145
#define glIsObjectBufferATI_RETURN GLboolean
#define glIsObjectBufferATI_ARG_NAMES buffer
#define glIsObjectBufferATI_ARG_EXPAND GLuint buffer
#define glIsObjectBufferATI_PACKED PACKED_GLboolean_GLuint
#define glIsObjectBufferATI_FORMAT FORMAT_GLboolean_GLuint
#define glIsObjectBufferATI_VOID_ONLY_WRAP(...) {}
#define glIsObjectBufferATI_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glIsOcclusionQueryNV_INDEX 1146
#define glIsOcclusionQueryNV_RETURN GLboolean
#define glIsOcclusionQueryNV_ARG_NAMES id
#define glIsOcclusionQueryNV_ARG_EXPAND GLuint id
#define glIsOcclusionQueryNV_PACKED PACKED_GLboolean_GLuint
#define glIsOcclusionQueryNV_FORMAT FORMAT_GLboolean_GLuint
#define glIsOcclusionQueryNV_VOID_ONLY_WRAP(...) {}
#define glIsOcclusionQueryNV_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glIsPathNV_INDEX 1147
#define glIsPathNV_RETURN GLboolean
#define glIsPathNV_ARG_NAMES path
#define glIsPathNV_ARG_EXPAND GLuint path
#define glIsPathNV_PACKED PACKED_GLboolean_GLuint
#define glIsPathNV_FORMAT FORMAT_GLboolean_GLuint
#define glIsPathNV_VOID_ONLY_WRAP(...) {}
#define glIsPathNV_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glIsPointInFillPathNV_INDEX 1148
#define glIsPointInFillPathNV_RETURN GLboolean
#define glIsPointInFillPathNV_ARG_NAMES path, mask, x, y
#define glIsPointInFillPathNV_ARG_EXPAND GLuint path, GLuint mask, GLfloat x, GLfloat y
#define glIsPointInFillPathNV_PACKED PACKED_GLboolean_GLuint_GLuint_GLfloat_GLfloat
#define glIsPointInFillPathNV_FORMAT FORMAT_GLboolean_GLuint_GLuint_GLfloat_GLfloat
#define glIsPointInFillPathNV_VOID_ONLY_WRAP(...) {}
#define glIsPointInFillPathNV_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glIsPointInStrokePathNV_INDEX 1149
#define glIsPointInStrokePathNV_RETURN GLboolean
#define glIsPointInStrokePathNV_ARG_NAMES path, x, y
#define glIsPointInStrokePathNV_ARG_EXPAND GLuint path, GLfloat x, GLfloat y
#define glIsPointInStrokePathNV_PACKED PACKED_GLboolean_GLuint_GLfloat_GLfloat
#define glIsPointInStrokePathNV_FORMAT FORMAT_GLboolean_GLuint_GLfloat_GLfloat
#define glIsPointInStrokePathNV_VOID_ONLY_WRAP(...) {}
#define glIsPointInStrokePathNV_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glIsProgram_INDEX 1150
#define glIsProgram_RETURN GLboolean
#define glIsProgram_ARG_NAMES program
#define glIsProgram_ARG_EXPAND GLuint program
#define glIsProgram_PACKED PACKED_GLboolean_GLuint
#define glIsProgram_FORMAT FORMAT_GLboolean_GLuint
#define glIsProgram_VOID_ONLY_WRAP(...) {}
#define glIsProgram_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glIsProgramARB_INDEX 1151
#define glIsProgramARB_RETURN GLboolean
#define glIsProgramARB_ARG_NAMES program
#define glIsProgramARB_ARG_EXPAND GLuint program
#define glIsProgramARB_PACKED PACKED_GLboolean_GLuint
#define glIsProgramARB_FORMAT FORMAT_GLboolean_GLuint
#define glIsProgramARB_VOID_ONLY_WRAP(...) {}
#define glIsProgramARB_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glIsProgramNV_INDEX 1152
#define glIsProgramNV_RETURN GLboolean
#define glIsProgramNV_ARG_NAMES id
#define glIsProgramNV_ARG_EXPAND GLuint id
#define glIsProgramNV_PACKED PACKED_GLboolean_GLuint
#define glIsProgramNV_FORMAT FORMAT_GLboolean_GLuint
#define glIsProgramNV_VOID_ONLY_WRAP(...) {}
#define glIsProgramNV_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glIsProgramPipeline_INDEX 1153
#define glIsProgramPipeline_RETURN GLboolean
#define glIsProgramPipeline_ARG_NAMES pipeline
#define glIsProgramPipeline_ARG_EXPAND GLuint pipeline
#define glIsProgramPipeline_PACKED PACKED_GLboolean_GLuint
#define glIsProgramPipeline_FORMAT FORMAT_GLboolean_GLuint
#define glIsProgramPipeline_VOID_ONLY_WRAP(...) {}
#define glIsProgramPipeline_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glIsQuery_INDEX 1154
#define glIsQuery_RETURN GLboolean
#define glIsQuery_ARG_NAMES id
#define glIsQuery_ARG_EXPAND GLuint id
#define glIsQuery_PACKED PACKED_GLboolean_GLuint
#define glIsQuery_FORMAT FORMAT_GLboolean_GLuint
#define glIsQuery_VOID_ONLY_WRAP(...) {}
#define glIsQuery_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glIsQueryARB_INDEX 1155
#define glIsQueryARB_RETURN GLboolean
#define glIsQueryARB_ARG_NAMES id
#define glIsQueryARB_ARG_EXPAND GLuint id
#define glIsQueryARB_PACKED PACKED_GLboolean_GLuint
#define glIsQueryARB_FORMAT FORMAT_GLboolean_GLuint
#define glIsQueryARB_VOID_ONLY_WRAP(...) {}
#define glIsQueryARB_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glIsRenderbuffer_INDEX 1156
#define glIsRenderbuffer_RETURN GLboolean
#define glIsRenderbuffer_ARG_NAMES renderbuffer
#define glIsRenderbuffer_ARG_EXPAND GLuint renderbuffer
#define glIsRenderbuffer_PACKED PACKED_GLboolean_GLuint
#define glIsRenderbuffer_FORMAT FORMAT_GLboolean_GLuint
#define glIsRenderbuffer_VOID_ONLY_WRAP(...) {}
#define glIsRenderbuffer_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glIsRenderbufferEXT_INDEX 1157
#define glIsRenderbufferEXT_RETURN GLboolean
#define glIsRenderbufferEXT_ARG_NAMES renderbuffer
#define glIsRenderbufferEXT_ARG_EXPAND GLuint renderbuffer
#define glIsRenderbufferEXT_PACKED PACKED_GLboolean_GLuint
#define glIsRenderbufferEXT_FORMAT FORMAT_GLboolean_GLuint
#define glIsRenderbufferEXT_VOID_ONLY_WRAP(...) {}
#define glIsRenderbufferEXT_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glIsSampler_INDEX 1158
#define glIsSampler_RETURN GLboolean
#define glIsSampler_ARG_NAMES sampler
#define glIsSampler_ARG_EXPAND GLuint sampler
#define glIsSampler_PACKED PACKED_GLboolean_GLuint
#define glIsSampler_FORMAT FORMAT_GLboolean_GLuint
#define glIsSampler_VOID_ONLY_WRAP(...) {}
#define glIsSampler_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glIsShader_INDEX 1159
#define glIsShader_RETURN GLboolean
#define glIsShader_ARG_NAMES shader
#define glIsShader_ARG_EXPAND GLuint shader
#define glIsShader_PACKED PACKED_GLboolean_GLuint
#define glIsShader_FORMAT FORMAT_GLboolean_GLuint
#define glIsShader_VOID_ONLY_WRAP(...) {}
#define glIsShader_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glIsSync_INDEX 1160
#define glIsSync_RETURN GLboolean
#define glIsSync_ARG_NAMES sync
#define glIsSync_ARG_EXPAND GLsync sync
#define glIsSync_PACKED PACKED_GLboolean_GLsync
#define glIsSync_FORMAT FORMAT_GLboolean_GLsync
#define glIsSync_VOID_ONLY_WRAP(...) {}
#define glIsSync_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glIsTexture_INDEX 1161
#define glIsTexture_RETURN GLboolean
#define glIsTexture_ARG_NAMES texture
#define glIsTexture_ARG_EXPAND GLuint texture
#define glIsTexture_PACKED PACKED_GLboolean_GLuint
#define glIsTexture_FORMAT FORMAT_GLboolean_GLuint
#define glIsTexture_VOID_ONLY_WRAP(...) {}
#define glIsTexture_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glIsTextureEXT_INDEX 1162
#define glIsTextureEXT_RETURN GLboolean
#define glIsTextureEXT_ARG_NAMES texture
#define glIsTextureEXT_ARG_EXPAND GLuint texture
#define glIsTextureEXT_PACKED PACKED_GLboolean_GLuint
#define glIsTextureEXT_FORMAT FORMAT_GLboolean_GLuint
#define glIsTextureEXT_VOID_ONLY_WRAP(...) {}
#define glIsTextureEXT_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glIsTextureHandleResidentNV_INDEX 1163
#define glIsTextureHandleResidentNV_RETURN GLboolean
#define glIsTextureHandleResidentNV_ARG_NAMES handle
#define glIsTextureHandleResidentNV_ARG_EXPAND GLuint64 handle
#define glIsTextureHandleResidentNV_PACKED PACKED_GLboolean_GLuint64
#define glIsTextureHandleResidentNV_FORMAT FORMAT_GLboolean_GLuint64
#define glIsTextureHandleResidentNV_VOID_ONLY_WRAP(...) {}
#define glIsTextureHandleResidentNV_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glIsTransformFeedback_INDEX 1164
#define glIsTransformFeedback_RETURN GLboolean
#define glIsTransformFeedback_ARG_NAMES id
#define glIsTransformFeedback_ARG_EXPAND GLuint id
#define glIsTransformFeedback_PACKED PACKED_GLboolean_GLuint
#define glIsTransformFeedback_FORMAT FORMAT_GLboolean_GLuint
#define glIsTransformFeedback_VOID_ONLY_WRAP(...) {}
#define glIsTransformFeedback_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glIsTransformFeedbackNV_INDEX 1165
#define glIsTransformFeedbackNV_RETURN GLboolean
#define glIsTransformFeedbackNV_ARG_NAMES id
#define glIsTransformFeedbackNV_ARG_EXPAND GLuint id
#define glIsTransformFeedbackNV_PACKED PACKED_GLboolean_GLuint
#define glIsTransformFeedbackNV_FORMAT FORMAT_GLboolean_GLuint
#define glIsTransformFeedbackNV_VOID_ONLY_WRAP(...) {}
#define glIsTransformFeedbackNV_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glIsVariantEnabledEXT_INDEX 1166
#define glIsVariantEnabledEXT_RETURN GLboolean
#define glIsVariantEnabledEXT_ARG_NAMES id, cap
#define glIsVariantEnabledEXT_ARG_EXPAND GLuint id, GLenum cap
#define glIsVariantEnabledEXT_PACKED PACKED_GLboolean_GLuint_GLenum
#define glIsVariantEnabledEXT_FORMAT FORMAT_GLboolean_GLuint_GLenum
#define glIsVariantEnabledEXT_VOID_ONLY_WRAP(...) {}
#define glIsVariantEnabledEXT_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glIsVertexArray_INDEX 1167
#define glIsVertexArray_RETURN GLboolean
#define glIsVertexArray_ARG_NAMES array
#define glIsVertexArray_ARG_EXPAND GLuint array
#define glIsVertexArray_PACKED PACKED_GLboolean_GLuint
#define glIsVertexArray_FORMAT FORMAT_GLboolean_GLuint
#define glIsVertexArray_VOID_ONLY_WRAP(...) {}
#define glIsVertexArray_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glIsVertexArrayAPPLE_INDEX 1168
#define glIsVertexArrayAPPLE_RETURN GLboolean
#define glIsVertexArrayAPPLE_ARG_NAMES array
#define glIsVertexArrayAPPLE_ARG_EXPAND GLuint array
#define glIsVertexArrayAPPLE_PACKED PACKED_GLboolean_GLuint
#define glIsVertexArrayAPPLE_FORMAT FORMAT_GLboolean_GLuint
#define glIsVertexArrayAPPLE_VOID_ONLY_WRAP(...) {}
#define glIsVertexArrayAPPLE_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glIsVertexAttribEnabledAPPLE_INDEX 1169
#define glIsVertexAttribEnabledAPPLE_RETURN GLboolean
#define glIsVertexAttribEnabledAPPLE_ARG_NAMES index, pname
#define glIsVertexAttribEnabledAPPLE_ARG_EXPAND GLuint index, GLenum pname
#define glIsVertexAttribEnabledAPPLE_PACKED PACKED_GLboolean_GLuint_GLenum
#define glIsVertexAttribEnabledAPPLE_FORMAT FORMAT_GLboolean_GLuint_GLenum
#define glIsVertexAttribEnabledAPPLE_VOID_ONLY_WRAP(...) {}
#define glIsVertexAttribEnabledAPPLE_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glLightEnviSGIX_INDEX 1170
#define glLightEnviSGIX_RETURN void
#define glLightEnviSGIX_ARG_NAMES pname, param
#define glLightEnviSGIX_ARG_EXPAND GLenum pname, GLint param
#define glLightEnviSGIX_PACKED PACKED_void_GLenum_GLint
#define glLightEnviSGIX_FORMAT FORMAT_void_GLenum_GLint
#define glLightEnviSGIX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glLightEnviSGIX_NOT_VOID_WRAP(...) {}
#define glLightModelf_INDEX 1171
#define glLightModelf_RETURN void
#define glLightModelf_ARG_NAMES pname, param
#define glLightModelf_ARG_EXPAND GLenum pname, GLfloat param
#define glLightModelf_PACKED PACKED_void_GLenum_GLfloat
#define glLightModelf_FORMAT FORMAT_void_GLenum_GLfloat
#define glLightModelf_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glLightModelf_NOT_VOID_WRAP(...) {}
#define glLightModelfv_INDEX 1172
#define glLightModelfv_RETURN void
#define glLightModelfv_ARG_NAMES pname, params
#define glLightModelfv_ARG_EXPAND GLenum pname, const GLfloat * params
#define glLightModelfv_PACKED PACKED_void_GLenum_const_GLfloat___GENPT__
#define glLightModelfv_FORMAT FORMAT_void_GLenum_const_GLfloat___GENPT__
#define glLightModelfv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glLightModelfv_NOT_VOID_WRAP(...) {}
#define glLightModeli_INDEX 1173
#define glLightModeli_RETURN void
#define glLightModeli_ARG_NAMES pname, param
#define glLightModeli_ARG_EXPAND GLenum pname, GLint param
#define glLightModeli_PACKED PACKED_void_GLenum_GLint
#define glLightModeli_FORMAT FORMAT_void_GLenum_GLint
#define glLightModeli_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glLightModeli_NOT_VOID_WRAP(...) {}
#define glLightModeliv_INDEX 1174
#define glLightModeliv_RETURN void
#define glLightModeliv_ARG_NAMES pname, params
#define glLightModeliv_ARG_EXPAND GLenum pname, const GLint * params
#define glLightModeliv_PACKED PACKED_void_GLenum_const_GLint___GENPT__
#define glLightModeliv_FORMAT FORMAT_void_GLenum_const_GLint___GENPT__
#define glLightModeliv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glLightModeliv_NOT_VOID_WRAP(...) {}
#define glLightModelx_INDEX 1175
#define glLightModelx_RETURN void
#define glLightModelx_ARG_NAMES pname, param
#define glLightModelx_ARG_EXPAND GLenum pname, GLfixed param
#define glLightModelx_PACKED PACKED_void_GLenum_GLfixed
#define glLightModelx_FORMAT FORMAT_void_GLenum_GLfixed
#define glLightModelx_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glLightModelx_NOT_VOID_WRAP(...) {}
#define glLightModelxOES_INDEX 1176
#define glLightModelxOES_RETURN void
#define glLightModelxOES_ARG_NAMES pname, param
#define glLightModelxOES_ARG_EXPAND GLenum pname, GLfixed param
#define glLightModelxOES_PACKED PACKED_void_GLenum_GLfixed
#define glLightModelxOES_FORMAT FORMAT_void_GLenum_GLfixed
#define glLightModelxOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glLightModelxOES_NOT_VOID_WRAP(...) {}
#define glLightModelxv_INDEX 1177
#define glLightModelxv_RETURN void
#define glLightModelxv_ARG_NAMES pname, params
#define glLightModelxv_ARG_EXPAND GLenum pname, const GLfixed * params
#define glLightModelxv_PACKED PACKED_void_GLenum_const_GLfixed___GENPT__
#define glLightModelxv_FORMAT FORMAT_void_GLenum_const_GLfixed___GENPT__
#define glLightModelxv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glLightModelxv_NOT_VOID_WRAP(...) {}
#define glLightModelxvOES_INDEX 1178
#define glLightModelxvOES_RETURN void
#define glLightModelxvOES_ARG_NAMES pname, param
#define glLightModelxvOES_ARG_EXPAND GLenum pname, const GLfixed * param
#define glLightModelxvOES_PACKED PACKED_void_GLenum_const_GLfixed___GENPT__
#define glLightModelxvOES_FORMAT FORMAT_void_GLenum_const_GLfixed___GENPT__
#define glLightModelxvOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glLightModelxvOES_NOT_VOID_WRAP(...) {}
#define glLightf_INDEX 1179
#define glLightf_RETURN void
#define glLightf_ARG_NAMES light, pname, param
#define glLightf_ARG_EXPAND GLenum light, GLenum pname, GLfloat param
#define glLightf_PACKED PACKED_void_GLenum_GLenum_GLfloat
#define glLightf_FORMAT FORMAT_void_GLenum_GLenum_GLfloat
#define glLightf_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glLightf_NOT_VOID_WRAP(...) {}
#define glLightfv_INDEX 1180
#define glLightfv_RETURN void
#define glLightfv_ARG_NAMES light, pname, params
#define glLightfv_ARG_EXPAND GLenum light, GLenum pname, const GLfloat * params
#define glLightfv_PACKED PACKED_void_GLenum_GLenum_const_GLfloat___GENPT__
#define glLightfv_FORMAT FORMAT_void_GLenum_GLenum_const_GLfloat___GENPT__
#define glLightfv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glLightfv_NOT_VOID_WRAP(...) {}
#define glLighti_INDEX 1181
#define glLighti_RETURN void
#define glLighti_ARG_NAMES light, pname, param
#define glLighti_ARG_EXPAND GLenum light, GLenum pname, GLint param
#define glLighti_PACKED PACKED_void_GLenum_GLenum_GLint
#define glLighti_FORMAT FORMAT_void_GLenum_GLenum_GLint
#define glLighti_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glLighti_NOT_VOID_WRAP(...) {}
#define glLightiv_INDEX 1182
#define glLightiv_RETURN void
#define glLightiv_ARG_NAMES light, pname, params
#define glLightiv_ARG_EXPAND GLenum light, GLenum pname, const GLint * params
#define glLightiv_PACKED PACKED_void_GLenum_GLenum_const_GLint___GENPT__
#define glLightiv_FORMAT FORMAT_void_GLenum_GLenum_const_GLint___GENPT__
#define glLightiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glLightiv_NOT_VOID_WRAP(...) {}
#define glLightx_INDEX 1183
#define glLightx_RETURN void
#define glLightx_ARG_NAMES light, pname, param
#define glLightx_ARG_EXPAND GLenum light, GLenum pname, GLfixed param
#define glLightx_PACKED PACKED_void_GLenum_GLenum_GLfixed
#define glLightx_FORMAT FORMAT_void_GLenum_GLenum_GLfixed
#define glLightx_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glLightx_NOT_VOID_WRAP(...) {}
#define glLightxOES_INDEX 1184
#define glLightxOES_RETURN void
#define glLightxOES_ARG_NAMES light, pname, param
#define glLightxOES_ARG_EXPAND GLenum light, GLenum pname, GLfixed param
#define glLightxOES_PACKED PACKED_void_GLenum_GLenum_GLfixed
#define glLightxOES_FORMAT FORMAT_void_GLenum_GLenum_GLfixed
#define glLightxOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glLightxOES_NOT_VOID_WRAP(...) {}
#define glLightxv_INDEX 1185
#define glLightxv_RETURN void
#define glLightxv_ARG_NAMES light, pname, params
#define glLightxv_ARG_EXPAND GLenum light, GLenum pname, const GLfixed * params
#define glLightxv_PACKED PACKED_void_GLenum_GLenum_const_GLfixed___GENPT__
#define glLightxv_FORMAT FORMAT_void_GLenum_GLenum_const_GLfixed___GENPT__
#define glLightxv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glLightxv_NOT_VOID_WRAP(...) {}
#define glLightxvOES_INDEX 1186
#define glLightxvOES_RETURN void
#define glLightxvOES_ARG_NAMES light, pname, params
#define glLightxvOES_ARG_EXPAND GLenum light, GLenum pname, const GLfixed * params
#define glLightxvOES_PACKED PACKED_void_GLenum_GLenum_const_GLfixed___GENPT__
#define glLightxvOES_FORMAT FORMAT_void_GLenum_GLenum_const_GLfixed___GENPT__
#define glLightxvOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glLightxvOES_NOT_VOID_WRAP(...) {}
#define glLineStipple_INDEX 1187
#define glLineStipple_RETURN void
#define glLineStipple_ARG_NAMES factor, pattern
#define glLineStipple_ARG_EXPAND GLint factor, GLushort pattern
#define glLineStipple_PACKED PACKED_void_GLint_GLushort
#define glLineStipple_FORMAT FORMAT_void_GLint_GLushort
#define glLineStipple_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glLineStipple_NOT_VOID_WRAP(...) {}
#define glLineWidth_INDEX 1188
#define glLineWidth_RETURN void
#define glLineWidth_ARG_NAMES width
#define glLineWidth_ARG_EXPAND GLfloat width
#define glLineWidth_PACKED PACKED_void_GLfloat
#define glLineWidth_FORMAT FORMAT_void_GLfloat
#define glLineWidth_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glLineWidth_NOT_VOID_WRAP(...) {}
#define glLineWidthx_INDEX 1189
#define glLineWidthx_RETURN void
#define glLineWidthx_ARG_NAMES width
#define glLineWidthx_ARG_EXPAND GLfixed width
#define glLineWidthx_PACKED PACKED_void_GLfixed
#define glLineWidthx_FORMAT FORMAT_void_GLfixed
#define glLineWidthx_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glLineWidthx_NOT_VOID_WRAP(...) {}
#define glLineWidthxOES_INDEX 1190
#define glLineWidthxOES_RETURN void
#define glLineWidthxOES_ARG_NAMES width
#define glLineWidthxOES_ARG_EXPAND GLfixed width
#define glLineWidthxOES_PACKED PACKED_void_GLfixed
#define glLineWidthxOES_FORMAT FORMAT_void_GLfixed
#define glLineWidthxOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glLineWidthxOES_NOT_VOID_WRAP(...) {}
#define glLinkProgram_INDEX 1191
#define glLinkProgram_RETURN void
#define glLinkProgram_ARG_NAMES program
#define glLinkProgram_ARG_EXPAND GLuint program
#define glLinkProgram_PACKED PACKED_void_GLuint
#define glLinkProgram_FORMAT FORMAT_void_GLuint
#define glLinkProgram_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glLinkProgram_NOT_VOID_WRAP(...) {}
#define glLinkProgramARB_INDEX 1192
#define glLinkProgramARB_RETURN void
#define glLinkProgramARB_ARG_NAMES programObj
#define glLinkProgramARB_ARG_EXPAND GLhandleARB programObj
#define glLinkProgramARB_PACKED PACKED_void_GLhandleARB
#define glLinkProgramARB_FORMAT FORMAT_void_GLhandleARB
#define glLinkProgramARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glLinkProgramARB_NOT_VOID_WRAP(...) {}
#define glListBase_INDEX 1193
#define glListBase_RETURN void
#define glListBase_ARG_NAMES base
#define glListBase_ARG_EXPAND GLuint base
#define glListBase_PACKED PACKED_void_GLuint
#define glListBase_FORMAT FORMAT_void_GLuint
#define glListBase_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glListBase_NOT_VOID_WRAP(...) {}
#define glListParameterfSGIX_INDEX 1194
#define glListParameterfSGIX_RETURN void
#define glListParameterfSGIX_ARG_NAMES list, pname, param
#define glListParameterfSGIX_ARG_EXPAND GLuint list, GLenum pname, GLfloat param
#define glListParameterfSGIX_PACKED PACKED_void_GLuint_GLenum_GLfloat
#define glListParameterfSGIX_FORMAT FORMAT_void_GLuint_GLenum_GLfloat
#define glListParameterfSGIX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glListParameterfSGIX_NOT_VOID_WRAP(...) {}
#define glListParameterfvSGIX_INDEX 1195
#define glListParameterfvSGIX_RETURN void
#define glListParameterfvSGIX_ARG_NAMES list, pname, params
#define glListParameterfvSGIX_ARG_EXPAND GLuint list, GLenum pname, const GLfloat * params
#define glListParameterfvSGIX_PACKED PACKED_void_GLuint_GLenum_const_GLfloat___GENPT__
#define glListParameterfvSGIX_FORMAT FORMAT_void_GLuint_GLenum_const_GLfloat___GENPT__
#define glListParameterfvSGIX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glListParameterfvSGIX_NOT_VOID_WRAP(...) {}
#define glListParameteriSGIX_INDEX 1196
#define glListParameteriSGIX_RETURN void
#define glListParameteriSGIX_ARG_NAMES list, pname, param
#define glListParameteriSGIX_ARG_EXPAND GLuint list, GLenum pname, GLint param
#define glListParameteriSGIX_PACKED PACKED_void_GLuint_GLenum_GLint
#define glListParameteriSGIX_FORMAT FORMAT_void_GLuint_GLenum_GLint
#define glListParameteriSGIX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glListParameteriSGIX_NOT_VOID_WRAP(...) {}
#define glListParameterivSGIX_INDEX 1197
#define glListParameterivSGIX_RETURN void
#define glListParameterivSGIX_ARG_NAMES list, pname, params
#define glListParameterivSGIX_ARG_EXPAND GLuint list, GLenum pname, const GLint * params
#define glListParameterivSGIX_PACKED PACKED_void_GLuint_GLenum_const_GLint___GENPT__
#define glListParameterivSGIX_FORMAT FORMAT_void_GLuint_GLenum_const_GLint___GENPT__
#define glListParameterivSGIX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glListParameterivSGIX_NOT_VOID_WRAP(...) {}
#define glLoadIdentity_INDEX 1198
#define glLoadIdentity_RETURN void
#define glLoadIdentity_ARG_NAMES 
#define glLoadIdentity_ARG_EXPAND 
#define glLoadIdentity_PACKED PACKED_void
#define glLoadIdentity_FORMAT FORMAT_void
#define glLoadIdentity_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glLoadIdentity_NOT_VOID_WRAP(...) {}
#define glLoadIdentityDeformationMapSGIX_INDEX 1199
#define glLoadIdentityDeformationMapSGIX_RETURN void
#define glLoadIdentityDeformationMapSGIX_ARG_NAMES mask
#define glLoadIdentityDeformationMapSGIX_ARG_EXPAND GLbitfield mask
#define glLoadIdentityDeformationMapSGIX_PACKED PACKED_void_GLbitfield
#define glLoadIdentityDeformationMapSGIX_FORMAT FORMAT_void_GLbitfield
#define glLoadIdentityDeformationMapSGIX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glLoadIdentityDeformationMapSGIX_NOT_VOID_WRAP(...) {}
#define glLoadMatrixd_INDEX 1200
#define glLoadMatrixd_RETURN void
#define glLoadMatrixd_ARG_NAMES m
#define glLoadMatrixd_ARG_EXPAND const GLdouble * m
#define glLoadMatrixd_PACKED PACKED_void_const_GLdouble___GENPT__
#define glLoadMatrixd_FORMAT FORMAT_void_const_GLdouble___GENPT__
#define glLoadMatrixd_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glLoadMatrixd_NOT_VOID_WRAP(...) {}
#define glLoadMatrixf_INDEX 1201
#define glLoadMatrixf_RETURN void
#define glLoadMatrixf_ARG_NAMES m
#define glLoadMatrixf_ARG_EXPAND const GLfloat * m
#define glLoadMatrixf_PACKED PACKED_void_const_GLfloat___GENPT__
#define glLoadMatrixf_FORMAT FORMAT_void_const_GLfloat___GENPT__
#define glLoadMatrixf_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glLoadMatrixf_NOT_VOID_WRAP(...) {}
#define glLoadMatrixx_INDEX 1202
#define glLoadMatrixx_RETURN void
#define glLoadMatrixx_ARG_NAMES m
#define glLoadMatrixx_ARG_EXPAND const GLfixed * m
#define glLoadMatrixx_PACKED PACKED_void_const_GLfixed___GENPT__
#define glLoadMatrixx_FORMAT FORMAT_void_const_GLfixed___GENPT__
#define glLoadMatrixx_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glLoadMatrixx_NOT_VOID_WRAP(...) {}
#define glLoadMatrixxOES_INDEX 1203
#define glLoadMatrixxOES_RETURN void
#define glLoadMatrixxOES_ARG_NAMES m
#define glLoadMatrixxOES_ARG_EXPAND const GLfixed * m
#define glLoadMatrixxOES_PACKED PACKED_void_const_GLfixed___GENPT__
#define glLoadMatrixxOES_FORMAT FORMAT_void_const_GLfixed___GENPT__
#define glLoadMatrixxOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glLoadMatrixxOES_NOT_VOID_WRAP(...) {}
#define glLoadName_INDEX 1204
#define glLoadName_RETURN void
#define glLoadName_ARG_NAMES name
#define glLoadName_ARG_EXPAND GLuint name
#define glLoadName_PACKED PACKED_void_GLuint
#define glLoadName_FORMAT FORMAT_void_GLuint
#define glLoadName_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glLoadName_NOT_VOID_WRAP(...) {}
#define glLoadProgramNV_INDEX 1205
#define glLoadProgramNV_RETURN void
#define glLoadProgramNV_ARG_NAMES target, id, len, program
#define glLoadProgramNV_ARG_EXPAND GLenum target, GLuint id, GLsizei len, const GLubyte * program
#define glLoadProgramNV_PACKED PACKED_void_GLenum_GLuint_GLsizei_const_GLubyte___GENPT__
#define glLoadProgramNV_FORMAT FORMAT_void_GLenum_GLuint_GLsizei_const_GLubyte___GENPT__
#define glLoadProgramNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glLoadProgramNV_NOT_VOID_WRAP(...) {}
#define glLoadTransposeMatrixd_INDEX 1206
#define glLoadTransposeMatrixd_RETURN void
#define glLoadTransposeMatrixd_ARG_NAMES m
#define glLoadTransposeMatrixd_ARG_EXPAND const GLdouble * m
#define glLoadTransposeMatrixd_PACKED PACKED_void_const_GLdouble___GENPT__
#define glLoadTransposeMatrixd_FORMAT FORMAT_void_const_GLdouble___GENPT__
#define glLoadTransposeMatrixd_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glLoadTransposeMatrixd_NOT_VOID_WRAP(...) {}
#define glLoadTransposeMatrixdARB_INDEX 1207
#define glLoadTransposeMatrixdARB_RETURN void
#define glLoadTransposeMatrixdARB_ARG_NAMES m
#define glLoadTransposeMatrixdARB_ARG_EXPAND const GLdouble * m
#define glLoadTransposeMatrixdARB_PACKED PACKED_void_const_GLdouble___GENPT__
#define glLoadTransposeMatrixdARB_FORMAT FORMAT_void_const_GLdouble___GENPT__
#define glLoadTransposeMatrixdARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glLoadTransposeMatrixdARB_NOT_VOID_WRAP(...) {}
#define glLoadTransposeMatrixf_INDEX 1208
#define glLoadTransposeMatrixf_RETURN void
#define glLoadTransposeMatrixf_ARG_NAMES m
#define glLoadTransposeMatrixf_ARG_EXPAND const GLfloat * m
#define glLoadTransposeMatrixf_PACKED PACKED_void_const_GLfloat___GENPT__
#define glLoadTransposeMatrixf_FORMAT FORMAT_void_const_GLfloat___GENPT__
#define glLoadTransposeMatrixf_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glLoadTransposeMatrixf_NOT_VOID_WRAP(...) {}
#define glLoadTransposeMatrixfARB_INDEX 1209
#define glLoadTransposeMatrixfARB_RETURN void
#define glLoadTransposeMatrixfARB_ARG_NAMES m
#define glLoadTransposeMatrixfARB_ARG_EXPAND const GLfloat * m
#define glLoadTransposeMatrixfARB_PACKED PACKED_void_const_GLfloat___GENPT__
#define glLoadTransposeMatrixfARB_FORMAT FORMAT_void_const_GLfloat___GENPT__
#define glLoadTransposeMatrixfARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glLoadTransposeMatrixfARB_NOT_VOID_WRAP(...) {}
#define glLoadTransposeMatrixxOES_INDEX 1210
#define glLoadTransposeMatrixxOES_RETURN void
#define glLoadTransposeMatrixxOES_ARG_NAMES m
#define glLoadTransposeMatrixxOES_ARG_EXPAND const GLfixed * m
#define glLoadTransposeMatrixxOES_PACKED PACKED_void_const_GLfixed___GENPT__
#define glLoadTransposeMatrixxOES_FORMAT FORMAT_void_const_GLfixed___GENPT__
#define glLoadTransposeMatrixxOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glLoadTransposeMatrixxOES_NOT_VOID_WRAP(...) {}
#define glLockArraysEXT_INDEX 1211
#define glLockArraysEXT_RETURN void
#define glLockArraysEXT_ARG_NAMES first, count
#define glLockArraysEXT_ARG_EXPAND GLint first, GLsizei count
#define glLockArraysEXT_PACKED PACKED_void_GLint_GLsizei
#define glLockArraysEXT_FORMAT FORMAT_void_GLint_GLsizei
#define glLockArraysEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glLockArraysEXT_NOT_VOID_WRAP(...) {}
#define glLogicOp_INDEX 1212
#define glLogicOp_RETURN void
#define glLogicOp_ARG_NAMES opcode
#define glLogicOp_ARG_EXPAND GLenum opcode
#define glLogicOp_PACKED PACKED_void_GLenum
#define glLogicOp_FORMAT FORMAT_void_GLenum
#define glLogicOp_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glLogicOp_NOT_VOID_WRAP(...) {}
#define glMakeBufferNonResidentNV_INDEX 1213
#define glMakeBufferNonResidentNV_RETURN void
#define glMakeBufferNonResidentNV_ARG_NAMES target
#define glMakeBufferNonResidentNV_ARG_EXPAND GLenum target
#define glMakeBufferNonResidentNV_PACKED PACKED_void_GLenum
#define glMakeBufferNonResidentNV_FORMAT FORMAT_void_GLenum
#define glMakeBufferNonResidentNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMakeBufferNonResidentNV_NOT_VOID_WRAP(...) {}
#define glMakeBufferResidentNV_INDEX 1214
#define glMakeBufferResidentNV_RETURN void
#define glMakeBufferResidentNV_ARG_NAMES target, access
#define glMakeBufferResidentNV_ARG_EXPAND GLenum target, GLenum access
#define glMakeBufferResidentNV_PACKED PACKED_void_GLenum_GLenum
#define glMakeBufferResidentNV_FORMAT FORMAT_void_GLenum_GLenum
#define glMakeBufferResidentNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMakeBufferResidentNV_NOT_VOID_WRAP(...) {}
#define glMakeImageHandleNonResidentNV_INDEX 1215
#define glMakeImageHandleNonResidentNV_RETURN void
#define glMakeImageHandleNonResidentNV_ARG_NAMES handle
#define glMakeImageHandleNonResidentNV_ARG_EXPAND GLuint64 handle
#define glMakeImageHandleNonResidentNV_PACKED PACKED_void_GLuint64
#define glMakeImageHandleNonResidentNV_FORMAT FORMAT_void_GLuint64
#define glMakeImageHandleNonResidentNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMakeImageHandleNonResidentNV_NOT_VOID_WRAP(...) {}
#define glMakeImageHandleResidentNV_INDEX 1216
#define glMakeImageHandleResidentNV_RETURN void
#define glMakeImageHandleResidentNV_ARG_NAMES handle, access
#define glMakeImageHandleResidentNV_ARG_EXPAND GLuint64 handle, GLenum access
#define glMakeImageHandleResidentNV_PACKED PACKED_void_GLuint64_GLenum
#define glMakeImageHandleResidentNV_FORMAT FORMAT_void_GLuint64_GLenum
#define glMakeImageHandleResidentNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMakeImageHandleResidentNV_NOT_VOID_WRAP(...) {}
#define glMakeNamedBufferNonResidentNV_INDEX 1217
#define glMakeNamedBufferNonResidentNV_RETURN void
#define glMakeNamedBufferNonResidentNV_ARG_NAMES buffer
#define glMakeNamedBufferNonResidentNV_ARG_EXPAND GLuint buffer
#define glMakeNamedBufferNonResidentNV_PACKED PACKED_void_GLuint
#define glMakeNamedBufferNonResidentNV_FORMAT FORMAT_void_GLuint
#define glMakeNamedBufferNonResidentNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMakeNamedBufferNonResidentNV_NOT_VOID_WRAP(...) {}
#define glMakeNamedBufferResidentNV_INDEX 1218
#define glMakeNamedBufferResidentNV_RETURN void
#define glMakeNamedBufferResidentNV_ARG_NAMES buffer, access
#define glMakeNamedBufferResidentNV_ARG_EXPAND GLuint buffer, GLenum access
#define glMakeNamedBufferResidentNV_PACKED PACKED_void_GLuint_GLenum
#define glMakeNamedBufferResidentNV_FORMAT FORMAT_void_GLuint_GLenum
#define glMakeNamedBufferResidentNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMakeNamedBufferResidentNV_NOT_VOID_WRAP(...) {}
#define glMakeTextureHandleNonResidentNV_INDEX 1219
#define glMakeTextureHandleNonResidentNV_RETURN void
#define glMakeTextureHandleNonResidentNV_ARG_NAMES handle
#define glMakeTextureHandleNonResidentNV_ARG_EXPAND GLuint64 handle
#define glMakeTextureHandleNonResidentNV_PACKED PACKED_void_GLuint64
#define glMakeTextureHandleNonResidentNV_FORMAT FORMAT_void_GLuint64
#define glMakeTextureHandleNonResidentNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMakeTextureHandleNonResidentNV_NOT_VOID_WRAP(...) {}
#define glMakeTextureHandleResidentNV_INDEX 1220
#define glMakeTextureHandleResidentNV_RETURN void
#define glMakeTextureHandleResidentNV_ARG_NAMES handle
#define glMakeTextureHandleResidentNV_ARG_EXPAND GLuint64 handle
#define glMakeTextureHandleResidentNV_PACKED PACKED_void_GLuint64
#define glMakeTextureHandleResidentNV_FORMAT FORMAT_void_GLuint64
#define glMakeTextureHandleResidentNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMakeTextureHandleResidentNV_NOT_VOID_WRAP(...) {}
#define glMap1d_INDEX 1221
#define glMap1d_RETURN void
#define glMap1d_ARG_NAMES target, u1, u2, stride, order, points
#define glMap1d_ARG_EXPAND GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points
#define glMap1d_PACKED PACKED_void_GLenum_GLdouble_GLdouble_GLint_GLint_const_GLdouble___GENPT__
#define glMap1d_FORMAT FORMAT_void_GLenum_GLdouble_GLdouble_GLint_GLint_const_GLdouble___GENPT__
#define glMap1d_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMap1d_NOT_VOID_WRAP(...) {}
#define glMap1f_INDEX 1222
#define glMap1f_RETURN void
#define glMap1f_ARG_NAMES target, u1, u2, stride, order, points
#define glMap1f_ARG_EXPAND GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points
#define glMap1f_PACKED PACKED_void_GLenum_GLfloat_GLfloat_GLint_GLint_const_GLfloat___GENPT__
#define glMap1f_FORMAT FORMAT_void_GLenum_GLfloat_GLfloat_GLint_GLint_const_GLfloat___GENPT__
#define glMap1f_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMap1f_NOT_VOID_WRAP(...) {}
#define glMap1xOES_INDEX 1223
#define glMap1xOES_RETURN void
#define glMap1xOES_ARG_NAMES target, u1, u2, stride, order, points
#define glMap1xOES_ARG_EXPAND GLenum target, GLfixed u1, GLfixed u2, GLint stride, GLint order, GLfixed points
#define glMap1xOES_PACKED PACKED_void_GLenum_GLfixed_GLfixed_GLint_GLint_GLfixed
#define glMap1xOES_FORMAT FORMAT_void_GLenum_GLfixed_GLfixed_GLint_GLint_GLfixed
#define glMap1xOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMap1xOES_NOT_VOID_WRAP(...) {}
#define glMap2d_INDEX 1224
#define glMap2d_RETURN void
#define glMap2d_ARG_NAMES target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points
#define glMap2d_ARG_EXPAND GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points
#define glMap2d_PACKED PACKED_void_GLenum_GLdouble_GLdouble_GLint_GLint_GLdouble_GLdouble_GLint_GLint_const_GLdouble___GENPT__
#define glMap2d_FORMAT FORMAT_void_GLenum_GLdouble_GLdouble_GLint_GLint_GLdouble_GLdouble_GLint_GLint_const_GLdouble___GENPT__
#define glMap2d_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMap2d_NOT_VOID_WRAP(...) {}
#define glMap2f_INDEX 1225
#define glMap2f_RETURN void
#define glMap2f_ARG_NAMES target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points
#define glMap2f_ARG_EXPAND GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points
#define glMap2f_PACKED PACKED_void_GLenum_GLfloat_GLfloat_GLint_GLint_GLfloat_GLfloat_GLint_GLint_const_GLfloat___GENPT__
#define glMap2f_FORMAT FORMAT_void_GLenum_GLfloat_GLfloat_GLint_GLint_GLfloat_GLfloat_GLint_GLint_const_GLfloat___GENPT__
#define glMap2f_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMap2f_NOT_VOID_WRAP(...) {}
#define glMap2xOES_INDEX 1226
#define glMap2xOES_RETURN void
#define glMap2xOES_ARG_NAMES target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points
#define glMap2xOES_ARG_EXPAND GLenum target, GLfixed u1, GLfixed u2, GLint ustride, GLint uorder, GLfixed v1, GLfixed v2, GLint vstride, GLint vorder, GLfixed points
#define glMap2xOES_PACKED PACKED_void_GLenum_GLfixed_GLfixed_GLint_GLint_GLfixed_GLfixed_GLint_GLint_GLfixed
#define glMap2xOES_FORMAT FORMAT_void_GLenum_GLfixed_GLfixed_GLint_GLint_GLfixed_GLfixed_GLint_GLint_GLfixed
#define glMap2xOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMap2xOES_NOT_VOID_WRAP(...) {}
#define glMapBuffer_INDEX 1227
#define glMapBuffer_RETURN GLvoid *
#define glMapBuffer_ARG_NAMES target, access
#define glMapBuffer_ARG_EXPAND GLenum target, GLenum access
#define glMapBuffer_PACKED PACKED_GLvoid___GENPT___GLenum_GLenum
#define glMapBuffer_FORMAT FORMAT_GLvoid___GENPT___GLenum_GLenum
#define glMapBuffer_VOID_ONLY_WRAP(...) {}
#define glMapBuffer_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glMapBufferARB_INDEX 1228
#define glMapBufferARB_RETURN GLvoid *
#define glMapBufferARB_ARG_NAMES target, access
#define glMapBufferARB_ARG_EXPAND GLenum target, GLenum access
#define glMapBufferARB_PACKED PACKED_GLvoid___GENPT___GLenum_GLenum
#define glMapBufferARB_FORMAT FORMAT_GLvoid___GENPT___GLenum_GLenum
#define glMapBufferARB_VOID_ONLY_WRAP(...) {}
#define glMapBufferARB_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glMapBufferRange_INDEX 1229
#define glMapBufferRange_RETURN GLvoid *
#define glMapBufferRange_ARG_NAMES target, offset, length, access
#define glMapBufferRange_ARG_EXPAND GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access
#define glMapBufferRange_PACKED PACKED_GLvoid___GENPT___GLenum_GLintptr_GLsizeiptr_GLbitfield
#define glMapBufferRange_FORMAT FORMAT_GLvoid___GENPT___GLenum_GLintptr_GLsizeiptr_GLbitfield
#define glMapBufferRange_VOID_ONLY_WRAP(...) {}
#define glMapBufferRange_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glMapControlPointsNV_INDEX 1230
#define glMapControlPointsNV_RETURN void
#define glMapControlPointsNV_ARG_NAMES target, index, type, ustride, vstride, uorder, vorder, packed, points
#define glMapControlPointsNV_ARG_EXPAND GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const GLvoid * points
#define glMapControlPointsNV_PACKED PACKED_void_GLenum_GLuint_GLenum_GLsizei_GLsizei_GLint_GLint_GLboolean_const_GLvoid___GENPT__
#define glMapControlPointsNV_FORMAT FORMAT_void_GLenum_GLuint_GLenum_GLsizei_GLsizei_GLint_GLint_GLboolean_const_GLvoid___GENPT__
#define glMapControlPointsNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMapControlPointsNV_NOT_VOID_WRAP(...) {}
#define glMapGrid1d_INDEX 1231
#define glMapGrid1d_RETURN void
#define glMapGrid1d_ARG_NAMES un, u1, u2
#define glMapGrid1d_ARG_EXPAND GLint un, GLdouble u1, GLdouble u2
#define glMapGrid1d_PACKED PACKED_void_GLint_GLdouble_GLdouble
#define glMapGrid1d_FORMAT FORMAT_void_GLint_GLdouble_GLdouble
#define glMapGrid1d_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMapGrid1d_NOT_VOID_WRAP(...) {}
#define glMapGrid1f_INDEX 1232
#define glMapGrid1f_RETURN void
#define glMapGrid1f_ARG_NAMES un, u1, u2
#define glMapGrid1f_ARG_EXPAND GLint un, GLfloat u1, GLfloat u2
#define glMapGrid1f_PACKED PACKED_void_GLint_GLfloat_GLfloat
#define glMapGrid1f_FORMAT FORMAT_void_GLint_GLfloat_GLfloat
#define glMapGrid1f_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMapGrid1f_NOT_VOID_WRAP(...) {}
#define glMapGrid1xOES_INDEX 1233
#define glMapGrid1xOES_RETURN void
#define glMapGrid1xOES_ARG_NAMES n, u1, u2
#define glMapGrid1xOES_ARG_EXPAND GLint n, GLfixed u1, GLfixed u2
#define glMapGrid1xOES_PACKED PACKED_void_GLint_GLfixed_GLfixed
#define glMapGrid1xOES_FORMAT FORMAT_void_GLint_GLfixed_GLfixed
#define glMapGrid1xOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMapGrid1xOES_NOT_VOID_WRAP(...) {}
#define glMapGrid2d_INDEX 1234
#define glMapGrid2d_RETURN void
#define glMapGrid2d_ARG_NAMES un, u1, u2, vn, v1, v2
#define glMapGrid2d_ARG_EXPAND GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2
#define glMapGrid2d_PACKED PACKED_void_GLint_GLdouble_GLdouble_GLint_GLdouble_GLdouble
#define glMapGrid2d_FORMAT FORMAT_void_GLint_GLdouble_GLdouble_GLint_GLdouble_GLdouble
#define glMapGrid2d_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMapGrid2d_NOT_VOID_WRAP(...) {}
#define glMapGrid2f_INDEX 1235
#define glMapGrid2f_RETURN void
#define glMapGrid2f_ARG_NAMES un, u1, u2, vn, v1, v2
#define glMapGrid2f_ARG_EXPAND GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2
#define glMapGrid2f_PACKED PACKED_void_GLint_GLfloat_GLfloat_GLint_GLfloat_GLfloat
#define glMapGrid2f_FORMAT FORMAT_void_GLint_GLfloat_GLfloat_GLint_GLfloat_GLfloat
#define glMapGrid2f_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMapGrid2f_NOT_VOID_WRAP(...) {}
#define glMapGrid2xOES_INDEX 1236
#define glMapGrid2xOES_RETURN void
#define glMapGrid2xOES_ARG_NAMES n, u1, u2, v1, v2
#define glMapGrid2xOES_ARG_EXPAND GLint n, GLfixed u1, GLfixed u2, GLfixed v1, GLfixed v2
#define glMapGrid2xOES_PACKED PACKED_void_GLint_GLfixed_GLfixed_GLfixed_GLfixed
#define glMapGrid2xOES_FORMAT FORMAT_void_GLint_GLfixed_GLfixed_GLfixed_GLfixed
#define glMapGrid2xOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMapGrid2xOES_NOT_VOID_WRAP(...) {}
#define glMapNamedBufferEXT_INDEX 1237
#define glMapNamedBufferEXT_RETURN GLvoid *
#define glMapNamedBufferEXT_ARG_NAMES buffer, access
#define glMapNamedBufferEXT_ARG_EXPAND GLuint buffer, GLenum access
#define glMapNamedBufferEXT_PACKED PACKED_GLvoid___GENPT___GLuint_GLenum
#define glMapNamedBufferEXT_FORMAT FORMAT_GLvoid___GENPT___GLuint_GLenum
#define glMapNamedBufferEXT_VOID_ONLY_WRAP(...) {}
#define glMapNamedBufferEXT_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glMapNamedBufferRangeEXT_INDEX 1238
#define glMapNamedBufferRangeEXT_RETURN GLvoid *
#define glMapNamedBufferRangeEXT_ARG_NAMES buffer, offset, length, access
#define glMapNamedBufferRangeEXT_ARG_EXPAND GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access
#define glMapNamedBufferRangeEXT_PACKED PACKED_GLvoid___GENPT___GLuint_GLintptr_GLsizeiptr_GLbitfield
#define glMapNamedBufferRangeEXT_FORMAT FORMAT_GLvoid___GENPT___GLuint_GLintptr_GLsizeiptr_GLbitfield
#define glMapNamedBufferRangeEXT_VOID_ONLY_WRAP(...) {}
#define glMapNamedBufferRangeEXT_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glMapObjectBufferATI_INDEX 1239
#define glMapObjectBufferATI_RETURN GLvoid *
#define glMapObjectBufferATI_ARG_NAMES buffer
#define glMapObjectBufferATI_ARG_EXPAND GLuint buffer
#define glMapObjectBufferATI_PACKED PACKED_GLvoid___GENPT___GLuint
#define glMapObjectBufferATI_FORMAT FORMAT_GLvoid___GENPT___GLuint
#define glMapObjectBufferATI_VOID_ONLY_WRAP(...) {}
#define glMapObjectBufferATI_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glMapParameterfvNV_INDEX 1240
#define glMapParameterfvNV_RETURN void
#define glMapParameterfvNV_ARG_NAMES target, pname, params
#define glMapParameterfvNV_ARG_EXPAND GLenum target, GLenum pname, const GLfloat * params
#define glMapParameterfvNV_PACKED PACKED_void_GLenum_GLenum_const_GLfloat___GENPT__
#define glMapParameterfvNV_FORMAT FORMAT_void_GLenum_GLenum_const_GLfloat___GENPT__
#define glMapParameterfvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMapParameterfvNV_NOT_VOID_WRAP(...) {}
#define glMapParameterivNV_INDEX 1241
#define glMapParameterivNV_RETURN void
#define glMapParameterivNV_ARG_NAMES target, pname, params
#define glMapParameterivNV_ARG_EXPAND GLenum target, GLenum pname, const GLint * params
#define glMapParameterivNV_PACKED PACKED_void_GLenum_GLenum_const_GLint___GENPT__
#define glMapParameterivNV_FORMAT FORMAT_void_GLenum_GLenum_const_GLint___GENPT__
#define glMapParameterivNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMapParameterivNV_NOT_VOID_WRAP(...) {}
#define glMapTexture2DINTEL_INDEX 1242
#define glMapTexture2DINTEL_RETURN GLvoid *
#define glMapTexture2DINTEL_ARG_NAMES texture, level, access, stride, layout
#define glMapTexture2DINTEL_ARG_EXPAND GLuint texture, GLint level, GLbitfield access, const GLint * stride, const GLenum * layout
#define glMapTexture2DINTEL_PACKED PACKED_GLvoid___GENPT___GLuint_GLint_GLbitfield_const_GLint___GENPT___const_GLenum___GENPT__
#define glMapTexture2DINTEL_FORMAT FORMAT_GLvoid___GENPT___GLuint_GLint_GLbitfield_const_GLint___GENPT___const_GLenum___GENPT__
#define glMapTexture2DINTEL_VOID_ONLY_WRAP(...) {}
#define glMapTexture2DINTEL_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glMapVertexAttrib1dAPPLE_INDEX 1243
#define glMapVertexAttrib1dAPPLE_RETURN void
#define glMapVertexAttrib1dAPPLE_ARG_NAMES index, size, u1, u2, stride, order, points
#define glMapVertexAttrib1dAPPLE_ARG_EXPAND GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points
#define glMapVertexAttrib1dAPPLE_PACKED PACKED_void_GLuint_GLuint_GLdouble_GLdouble_GLint_GLint_const_GLdouble___GENPT__
#define glMapVertexAttrib1dAPPLE_FORMAT FORMAT_void_GLuint_GLuint_GLdouble_GLdouble_GLint_GLint_const_GLdouble___GENPT__
#define glMapVertexAttrib1dAPPLE_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMapVertexAttrib1dAPPLE_NOT_VOID_WRAP(...) {}
#define glMapVertexAttrib1fAPPLE_INDEX 1244
#define glMapVertexAttrib1fAPPLE_RETURN void
#define glMapVertexAttrib1fAPPLE_ARG_NAMES index, size, u1, u2, stride, order, points
#define glMapVertexAttrib1fAPPLE_ARG_EXPAND GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points
#define glMapVertexAttrib1fAPPLE_PACKED PACKED_void_GLuint_GLuint_GLfloat_GLfloat_GLint_GLint_const_GLfloat___GENPT__
#define glMapVertexAttrib1fAPPLE_FORMAT FORMAT_void_GLuint_GLuint_GLfloat_GLfloat_GLint_GLint_const_GLfloat___GENPT__
#define glMapVertexAttrib1fAPPLE_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMapVertexAttrib1fAPPLE_NOT_VOID_WRAP(...) {}
#define glMapVertexAttrib2dAPPLE_INDEX 1245
#define glMapVertexAttrib2dAPPLE_RETURN void
#define glMapVertexAttrib2dAPPLE_ARG_NAMES index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points
#define glMapVertexAttrib2dAPPLE_ARG_EXPAND GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points
#define glMapVertexAttrib2dAPPLE_PACKED PACKED_void_GLuint_GLuint_GLdouble_GLdouble_GLint_GLint_GLdouble_GLdouble_GLint_GLint_const_GLdouble___GENPT__
#define glMapVertexAttrib2dAPPLE_FORMAT FORMAT_void_GLuint_GLuint_GLdouble_GLdouble_GLint_GLint_GLdouble_GLdouble_GLint_GLint_const_GLdouble___GENPT__
#define glMapVertexAttrib2dAPPLE_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMapVertexAttrib2dAPPLE_NOT_VOID_WRAP(...) {}
#define glMapVertexAttrib2fAPPLE_INDEX 1246
#define glMapVertexAttrib2fAPPLE_RETURN void
#define glMapVertexAttrib2fAPPLE_ARG_NAMES index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points
#define glMapVertexAttrib2fAPPLE_ARG_EXPAND GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points
#define glMapVertexAttrib2fAPPLE_PACKED PACKED_void_GLuint_GLuint_GLfloat_GLfloat_GLint_GLint_GLfloat_GLfloat_GLint_GLint_const_GLfloat___GENPT__
#define glMapVertexAttrib2fAPPLE_FORMAT FORMAT_void_GLuint_GLuint_GLfloat_GLfloat_GLint_GLint_GLfloat_GLfloat_GLint_GLint_const_GLfloat___GENPT__
#define glMapVertexAttrib2fAPPLE_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMapVertexAttrib2fAPPLE_NOT_VOID_WRAP(...) {}
#define glMaterialf_INDEX 1247
#define glMaterialf_RETURN void
#define glMaterialf_ARG_NAMES face, pname, param
#define glMaterialf_ARG_EXPAND GLenum face, GLenum pname, GLfloat param
#define glMaterialf_PACKED PACKED_void_GLenum_GLenum_GLfloat
#define glMaterialf_FORMAT FORMAT_void_GLenum_GLenum_GLfloat
#define glMaterialf_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMaterialf_NOT_VOID_WRAP(...) {}
#define glMaterialfv_INDEX 1248
#define glMaterialfv_RETURN void
#define glMaterialfv_ARG_NAMES face, pname, params
#define glMaterialfv_ARG_EXPAND GLenum face, GLenum pname, const GLfloat * params
#define glMaterialfv_PACKED PACKED_void_GLenum_GLenum_const_GLfloat___GENPT__
#define glMaterialfv_FORMAT FORMAT_void_GLenum_GLenum_const_GLfloat___GENPT__
#define glMaterialfv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMaterialfv_NOT_VOID_WRAP(...) {}
#define glMateriali_INDEX 1249
#define glMateriali_RETURN void
#define glMateriali_ARG_NAMES face, pname, param
#define glMateriali_ARG_EXPAND GLenum face, GLenum pname, GLint param
#define glMateriali_PACKED PACKED_void_GLenum_GLenum_GLint
#define glMateriali_FORMAT FORMAT_void_GLenum_GLenum_GLint
#define glMateriali_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMateriali_NOT_VOID_WRAP(...) {}
#define glMaterialiv_INDEX 1250
#define glMaterialiv_RETURN void
#define glMaterialiv_ARG_NAMES face, pname, params
#define glMaterialiv_ARG_EXPAND GLenum face, GLenum pname, const GLint * params
#define glMaterialiv_PACKED PACKED_void_GLenum_GLenum_const_GLint___GENPT__
#define glMaterialiv_FORMAT FORMAT_void_GLenum_GLenum_const_GLint___GENPT__
#define glMaterialiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMaterialiv_NOT_VOID_WRAP(...) {}
#define glMaterialx_INDEX 1251
#define glMaterialx_RETURN void
#define glMaterialx_ARG_NAMES face, pname, param
#define glMaterialx_ARG_EXPAND GLenum face, GLenum pname, GLfixed param
#define glMaterialx_PACKED PACKED_void_GLenum_GLenum_GLfixed
#define glMaterialx_FORMAT FORMAT_void_GLenum_GLenum_GLfixed
#define glMaterialx_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMaterialx_NOT_VOID_WRAP(...) {}
#define glMaterialxOES_INDEX 1252
#define glMaterialxOES_RETURN void
#define glMaterialxOES_ARG_NAMES face, pname, param
#define glMaterialxOES_ARG_EXPAND GLenum face, GLenum pname, GLfixed param
#define glMaterialxOES_PACKED PACKED_void_GLenum_GLenum_GLfixed
#define glMaterialxOES_FORMAT FORMAT_void_GLenum_GLenum_GLfixed
#define glMaterialxOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMaterialxOES_NOT_VOID_WRAP(...) {}
#define glMaterialxv_INDEX 1253
#define glMaterialxv_RETURN void
#define glMaterialxv_ARG_NAMES face, pname, params
#define glMaterialxv_ARG_EXPAND GLenum face, GLenum pname, const GLfixed * params
#define glMaterialxv_PACKED PACKED_void_GLenum_GLenum_const_GLfixed___GENPT__
#define glMaterialxv_FORMAT FORMAT_void_GLenum_GLenum_const_GLfixed___GENPT__
#define glMaterialxv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMaterialxv_NOT_VOID_WRAP(...) {}
#define glMaterialxvOES_INDEX 1254
#define glMaterialxvOES_RETURN void
#define glMaterialxvOES_ARG_NAMES face, pname, param
#define glMaterialxvOES_ARG_EXPAND GLenum face, GLenum pname, const GLfixed * param
#define glMaterialxvOES_PACKED PACKED_void_GLenum_GLenum_const_GLfixed___GENPT__
#define glMaterialxvOES_FORMAT FORMAT_void_GLenum_GLenum_const_GLfixed___GENPT__
#define glMaterialxvOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMaterialxvOES_NOT_VOID_WRAP(...) {}
#define glMatrixFrustumEXT_INDEX 1255
#define glMatrixFrustumEXT_RETURN void
#define glMatrixFrustumEXT_ARG_NAMES mode, left, right, bottom, top, zNear, zFar
#define glMatrixFrustumEXT_ARG_EXPAND GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar
#define glMatrixFrustumEXT_PACKED PACKED_void_GLenum_GLdouble_GLdouble_GLdouble_GLdouble_GLdouble_GLdouble
#define glMatrixFrustumEXT_FORMAT FORMAT_void_GLenum_GLdouble_GLdouble_GLdouble_GLdouble_GLdouble_GLdouble
#define glMatrixFrustumEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMatrixFrustumEXT_NOT_VOID_WRAP(...) {}
#define glMatrixIndexPointerARB_INDEX 1256
#define glMatrixIndexPointerARB_RETURN void
#define glMatrixIndexPointerARB_ARG_NAMES size, type, stride, pointer
#define glMatrixIndexPointerARB_ARG_EXPAND GLint size, GLenum type, GLsizei stride, const GLvoid * pointer
#define glMatrixIndexPointerARB_PACKED PACKED_void_GLint_GLenum_GLsizei_const_GLvoid___GENPT__
#define glMatrixIndexPointerARB_FORMAT FORMAT_void_GLint_GLenum_GLsizei_const_GLvoid___GENPT__
#define glMatrixIndexPointerARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMatrixIndexPointerARB_NOT_VOID_WRAP(...) {}
#define glMatrixIndexubvARB_INDEX 1257
#define glMatrixIndexubvARB_RETURN void
#define glMatrixIndexubvARB_ARG_NAMES size, indices
#define glMatrixIndexubvARB_ARG_EXPAND GLint size, const GLubyte * indices
#define glMatrixIndexubvARB_PACKED PACKED_void_GLint_const_GLubyte___GENPT__
#define glMatrixIndexubvARB_FORMAT FORMAT_void_GLint_const_GLubyte___GENPT__
#define glMatrixIndexubvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMatrixIndexubvARB_NOT_VOID_WRAP(...) {}
#define glMatrixIndexuivARB_INDEX 1258
#define glMatrixIndexuivARB_RETURN void
#define glMatrixIndexuivARB_ARG_NAMES size, indices
#define glMatrixIndexuivARB_ARG_EXPAND GLint size, const GLuint * indices
#define glMatrixIndexuivARB_PACKED PACKED_void_GLint_const_GLuint___GENPT__
#define glMatrixIndexuivARB_FORMAT FORMAT_void_GLint_const_GLuint___GENPT__
#define glMatrixIndexuivARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMatrixIndexuivARB_NOT_VOID_WRAP(...) {}
#define glMatrixIndexusvARB_INDEX 1259
#define glMatrixIndexusvARB_RETURN void
#define glMatrixIndexusvARB_ARG_NAMES size, indices
#define glMatrixIndexusvARB_ARG_EXPAND GLint size, const GLushort * indices
#define glMatrixIndexusvARB_PACKED PACKED_void_GLint_const_GLushort___GENPT__
#define glMatrixIndexusvARB_FORMAT FORMAT_void_GLint_const_GLushort___GENPT__
#define glMatrixIndexusvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMatrixIndexusvARB_NOT_VOID_WRAP(...) {}
#define glMatrixLoadIdentityEXT_INDEX 1260
#define glMatrixLoadIdentityEXT_RETURN void
#define glMatrixLoadIdentityEXT_ARG_NAMES mode
#define glMatrixLoadIdentityEXT_ARG_EXPAND GLenum mode
#define glMatrixLoadIdentityEXT_PACKED PACKED_void_GLenum
#define glMatrixLoadIdentityEXT_FORMAT FORMAT_void_GLenum
#define glMatrixLoadIdentityEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMatrixLoadIdentityEXT_NOT_VOID_WRAP(...) {}
#define glMatrixLoadTransposedEXT_INDEX 1261
#define glMatrixLoadTransposedEXT_RETURN void
#define glMatrixLoadTransposedEXT_ARG_NAMES mode, m
#define glMatrixLoadTransposedEXT_ARG_EXPAND GLenum mode, const GLdouble * m
#define glMatrixLoadTransposedEXT_PACKED PACKED_void_GLenum_const_GLdouble___GENPT__
#define glMatrixLoadTransposedEXT_FORMAT FORMAT_void_GLenum_const_GLdouble___GENPT__
#define glMatrixLoadTransposedEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMatrixLoadTransposedEXT_NOT_VOID_WRAP(...) {}
#define glMatrixLoadTransposefEXT_INDEX 1262
#define glMatrixLoadTransposefEXT_RETURN void
#define glMatrixLoadTransposefEXT_ARG_NAMES mode, m
#define glMatrixLoadTransposefEXT_ARG_EXPAND GLenum mode, const GLfloat * m
#define glMatrixLoadTransposefEXT_PACKED PACKED_void_GLenum_const_GLfloat___GENPT__
#define glMatrixLoadTransposefEXT_FORMAT FORMAT_void_GLenum_const_GLfloat___GENPT__
#define glMatrixLoadTransposefEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMatrixLoadTransposefEXT_NOT_VOID_WRAP(...) {}
#define glMatrixLoaddEXT_INDEX 1263
#define glMatrixLoaddEXT_RETURN void
#define glMatrixLoaddEXT_ARG_NAMES mode, m
#define glMatrixLoaddEXT_ARG_EXPAND GLenum mode, const GLdouble * m
#define glMatrixLoaddEXT_PACKED PACKED_void_GLenum_const_GLdouble___GENPT__
#define glMatrixLoaddEXT_FORMAT FORMAT_void_GLenum_const_GLdouble___GENPT__
#define glMatrixLoaddEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMatrixLoaddEXT_NOT_VOID_WRAP(...) {}
#define glMatrixLoadfEXT_INDEX 1264
#define glMatrixLoadfEXT_RETURN void
#define glMatrixLoadfEXT_ARG_NAMES mode, m
#define glMatrixLoadfEXT_ARG_EXPAND GLenum mode, const GLfloat * m
#define glMatrixLoadfEXT_PACKED PACKED_void_GLenum_const_GLfloat___GENPT__
#define glMatrixLoadfEXT_FORMAT FORMAT_void_GLenum_const_GLfloat___GENPT__
#define glMatrixLoadfEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMatrixLoadfEXT_NOT_VOID_WRAP(...) {}
#define glMatrixMode_INDEX 1265
#define glMatrixMode_RETURN void
#define glMatrixMode_ARG_NAMES mode
#define glMatrixMode_ARG_EXPAND GLenum mode
#define glMatrixMode_PACKED PACKED_void_GLenum
#define glMatrixMode_FORMAT FORMAT_void_GLenum
#define glMatrixMode_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMatrixMode_NOT_VOID_WRAP(...) {}
#define glMatrixMultTransposedEXT_INDEX 1266
#define glMatrixMultTransposedEXT_RETURN void
#define glMatrixMultTransposedEXT_ARG_NAMES mode, m
#define glMatrixMultTransposedEXT_ARG_EXPAND GLenum mode, const GLdouble * m
#define glMatrixMultTransposedEXT_PACKED PACKED_void_GLenum_const_GLdouble___GENPT__
#define glMatrixMultTransposedEXT_FORMAT FORMAT_void_GLenum_const_GLdouble___GENPT__
#define glMatrixMultTransposedEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMatrixMultTransposedEXT_NOT_VOID_WRAP(...) {}
#define glMatrixMultTransposefEXT_INDEX 1267
#define glMatrixMultTransposefEXT_RETURN void
#define glMatrixMultTransposefEXT_ARG_NAMES mode, m
#define glMatrixMultTransposefEXT_ARG_EXPAND GLenum mode, const GLfloat * m
#define glMatrixMultTransposefEXT_PACKED PACKED_void_GLenum_const_GLfloat___GENPT__
#define glMatrixMultTransposefEXT_FORMAT FORMAT_void_GLenum_const_GLfloat___GENPT__
#define glMatrixMultTransposefEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMatrixMultTransposefEXT_NOT_VOID_WRAP(...) {}
#define glMatrixMultdEXT_INDEX 1268
#define glMatrixMultdEXT_RETURN void
#define glMatrixMultdEXT_ARG_NAMES mode, m
#define glMatrixMultdEXT_ARG_EXPAND GLenum mode, const GLdouble * m
#define glMatrixMultdEXT_PACKED PACKED_void_GLenum_const_GLdouble___GENPT__
#define glMatrixMultdEXT_FORMAT FORMAT_void_GLenum_const_GLdouble___GENPT__
#define glMatrixMultdEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMatrixMultdEXT_NOT_VOID_WRAP(...) {}
#define glMatrixMultfEXT_INDEX 1269
#define glMatrixMultfEXT_RETURN void
#define glMatrixMultfEXT_ARG_NAMES mode, m
#define glMatrixMultfEXT_ARG_EXPAND GLenum mode, const GLfloat * m
#define glMatrixMultfEXT_PACKED PACKED_void_GLenum_const_GLfloat___GENPT__
#define glMatrixMultfEXT_FORMAT FORMAT_void_GLenum_const_GLfloat___GENPT__
#define glMatrixMultfEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMatrixMultfEXT_NOT_VOID_WRAP(...) {}
#define glMatrixOrthoEXT_INDEX 1270
#define glMatrixOrthoEXT_RETURN void
#define glMatrixOrthoEXT_ARG_NAMES mode, left, right, bottom, top, zNear, zFar
#define glMatrixOrthoEXT_ARG_EXPAND GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar
#define glMatrixOrthoEXT_PACKED PACKED_void_GLenum_GLdouble_GLdouble_GLdouble_GLdouble_GLdouble_GLdouble
#define glMatrixOrthoEXT_FORMAT FORMAT_void_GLenum_GLdouble_GLdouble_GLdouble_GLdouble_GLdouble_GLdouble
#define glMatrixOrthoEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMatrixOrthoEXT_NOT_VOID_WRAP(...) {}
#define glMatrixPopEXT_INDEX 1271
#define glMatrixPopEXT_RETURN void
#define glMatrixPopEXT_ARG_NAMES mode
#define glMatrixPopEXT_ARG_EXPAND GLenum mode
#define glMatrixPopEXT_PACKED PACKED_void_GLenum
#define glMatrixPopEXT_FORMAT FORMAT_void_GLenum
#define glMatrixPopEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMatrixPopEXT_NOT_VOID_WRAP(...) {}
#define glMatrixPushEXT_INDEX 1272
#define glMatrixPushEXT_RETURN void
#define glMatrixPushEXT_ARG_NAMES mode
#define glMatrixPushEXT_ARG_EXPAND GLenum mode
#define glMatrixPushEXT_PACKED PACKED_void_GLenum
#define glMatrixPushEXT_FORMAT FORMAT_void_GLenum
#define glMatrixPushEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMatrixPushEXT_NOT_VOID_WRAP(...) {}
#define glMatrixRotatedEXT_INDEX 1273
#define glMatrixRotatedEXT_RETURN void
#define glMatrixRotatedEXT_ARG_NAMES mode, angle, x, y, z
#define glMatrixRotatedEXT_ARG_EXPAND GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z
#define glMatrixRotatedEXT_PACKED PACKED_void_GLenum_GLdouble_GLdouble_GLdouble_GLdouble
#define glMatrixRotatedEXT_FORMAT FORMAT_void_GLenum_GLdouble_GLdouble_GLdouble_GLdouble
#define glMatrixRotatedEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMatrixRotatedEXT_NOT_VOID_WRAP(...) {}
#define glMatrixRotatefEXT_INDEX 1274
#define glMatrixRotatefEXT_RETURN void
#define glMatrixRotatefEXT_ARG_NAMES mode, angle, x, y, z
#define glMatrixRotatefEXT_ARG_EXPAND GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z
#define glMatrixRotatefEXT_PACKED PACKED_void_GLenum_GLfloat_GLfloat_GLfloat_GLfloat
#define glMatrixRotatefEXT_FORMAT FORMAT_void_GLenum_GLfloat_GLfloat_GLfloat_GLfloat
#define glMatrixRotatefEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMatrixRotatefEXT_NOT_VOID_WRAP(...) {}
#define glMatrixScaledEXT_INDEX 1275
#define glMatrixScaledEXT_RETURN void
#define glMatrixScaledEXT_ARG_NAMES mode, x, y, z
#define glMatrixScaledEXT_ARG_EXPAND GLenum mode, GLdouble x, GLdouble y, GLdouble z
#define glMatrixScaledEXT_PACKED PACKED_void_GLenum_GLdouble_GLdouble_GLdouble
#define glMatrixScaledEXT_FORMAT FORMAT_void_GLenum_GLdouble_GLdouble_GLdouble
#define glMatrixScaledEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMatrixScaledEXT_NOT_VOID_WRAP(...) {}
#define glMatrixScalefEXT_INDEX 1276
#define glMatrixScalefEXT_RETURN void
#define glMatrixScalefEXT_ARG_NAMES mode, x, y, z
#define glMatrixScalefEXT_ARG_EXPAND GLenum mode, GLfloat x, GLfloat y, GLfloat z
#define glMatrixScalefEXT_PACKED PACKED_void_GLenum_GLfloat_GLfloat_GLfloat
#define glMatrixScalefEXT_FORMAT FORMAT_void_GLenum_GLfloat_GLfloat_GLfloat
#define glMatrixScalefEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMatrixScalefEXT_NOT_VOID_WRAP(...) {}
#define glMatrixTranslatedEXT_INDEX 1277
#define glMatrixTranslatedEXT_RETURN void
#define glMatrixTranslatedEXT_ARG_NAMES mode, x, y, z
#define glMatrixTranslatedEXT_ARG_EXPAND GLenum mode, GLdouble x, GLdouble y, GLdouble z
#define glMatrixTranslatedEXT_PACKED PACKED_void_GLenum_GLdouble_GLdouble_GLdouble
#define glMatrixTranslatedEXT_FORMAT FORMAT_void_GLenum_GLdouble_GLdouble_GLdouble
#define glMatrixTranslatedEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMatrixTranslatedEXT_NOT_VOID_WRAP(...) {}
#define glMatrixTranslatefEXT_INDEX 1278
#define glMatrixTranslatefEXT_RETURN void
#define glMatrixTranslatefEXT_ARG_NAMES mode, x, y, z
#define glMatrixTranslatefEXT_ARG_EXPAND GLenum mode, GLfloat x, GLfloat y, GLfloat z
#define glMatrixTranslatefEXT_PACKED PACKED_void_GLenum_GLfloat_GLfloat_GLfloat
#define glMatrixTranslatefEXT_FORMAT FORMAT_void_GLenum_GLfloat_GLfloat_GLfloat
#define glMatrixTranslatefEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMatrixTranslatefEXT_NOT_VOID_WRAP(...) {}
#define glMemoryBarrier_INDEX 1279
#define glMemoryBarrier_RETURN void
#define glMemoryBarrier_ARG_NAMES barriers
#define glMemoryBarrier_ARG_EXPAND GLbitfield barriers
#define glMemoryBarrier_PACKED PACKED_void_GLbitfield
#define glMemoryBarrier_FORMAT FORMAT_void_GLbitfield
#define glMemoryBarrier_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMemoryBarrier_NOT_VOID_WRAP(...) {}
#define glMemoryBarrierEXT_INDEX 1280
#define glMemoryBarrierEXT_RETURN void
#define glMemoryBarrierEXT_ARG_NAMES barriers
#define glMemoryBarrierEXT_ARG_EXPAND GLbitfield barriers
#define glMemoryBarrierEXT_PACKED PACKED_void_GLbitfield
#define glMemoryBarrierEXT_FORMAT FORMAT_void_GLbitfield
#define glMemoryBarrierEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMemoryBarrierEXT_NOT_VOID_WRAP(...) {}
#define glMinSampleShading_INDEX 1281
#define glMinSampleShading_RETURN void
#define glMinSampleShading_ARG_NAMES value
#define glMinSampleShading_ARG_EXPAND GLfloat value
#define glMinSampleShading_PACKED PACKED_void_GLfloat
#define glMinSampleShading_FORMAT FORMAT_void_GLfloat
#define glMinSampleShading_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMinSampleShading_NOT_VOID_WRAP(...) {}
#define glMinSampleShadingARB_INDEX 1282
#define glMinSampleShadingARB_RETURN void
#define glMinSampleShadingARB_ARG_NAMES value
#define glMinSampleShadingARB_ARG_EXPAND GLfloat value
#define glMinSampleShadingARB_PACKED PACKED_void_GLfloat
#define glMinSampleShadingARB_FORMAT FORMAT_void_GLfloat
#define glMinSampleShadingARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMinSampleShadingARB_NOT_VOID_WRAP(...) {}
#define glMinmax_INDEX 1283
#define glMinmax_RETURN void
#define glMinmax_ARG_NAMES target, internalformat, sink
#define glMinmax_ARG_EXPAND GLenum target, GLenum internalformat, GLboolean sink
#define glMinmax_PACKED PACKED_void_GLenum_GLenum_GLboolean
#define glMinmax_FORMAT FORMAT_void_GLenum_GLenum_GLboolean
#define glMinmax_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMinmax_NOT_VOID_WRAP(...) {}
#define glMinmaxEXT_INDEX 1284
#define glMinmaxEXT_RETURN void
#define glMinmaxEXT_ARG_NAMES target, internalformat, sink
#define glMinmaxEXT_ARG_EXPAND GLenum target, GLenum internalformat, GLboolean sink
#define glMinmaxEXT_PACKED PACKED_void_GLenum_GLenum_GLboolean
#define glMinmaxEXT_FORMAT FORMAT_void_GLenum_GLenum_GLboolean
#define glMinmaxEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMinmaxEXT_NOT_VOID_WRAP(...) {}
#define glMultMatrixd_INDEX 1285
#define glMultMatrixd_RETURN void
#define glMultMatrixd_ARG_NAMES m
#define glMultMatrixd_ARG_EXPAND const GLdouble * m
#define glMultMatrixd_PACKED PACKED_void_const_GLdouble___GENPT__
#define glMultMatrixd_FORMAT FORMAT_void_const_GLdouble___GENPT__
#define glMultMatrixd_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultMatrixd_NOT_VOID_WRAP(...) {}
#define glMultMatrixf_INDEX 1286
#define glMultMatrixf_RETURN void
#define glMultMatrixf_ARG_NAMES m
#define glMultMatrixf_ARG_EXPAND const GLfloat * m
#define glMultMatrixf_PACKED PACKED_void_const_GLfloat___GENPT__
#define glMultMatrixf_FORMAT FORMAT_void_const_GLfloat___GENPT__
#define glMultMatrixf_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultMatrixf_NOT_VOID_WRAP(...) {}
#define glMultMatrixx_INDEX 1287
#define glMultMatrixx_RETURN void
#define glMultMatrixx_ARG_NAMES m
#define glMultMatrixx_ARG_EXPAND const GLfixed * m
#define glMultMatrixx_PACKED PACKED_void_const_GLfixed___GENPT__
#define glMultMatrixx_FORMAT FORMAT_void_const_GLfixed___GENPT__
#define glMultMatrixx_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultMatrixx_NOT_VOID_WRAP(...) {}
#define glMultMatrixxOES_INDEX 1288
#define glMultMatrixxOES_RETURN void
#define glMultMatrixxOES_ARG_NAMES m
#define glMultMatrixxOES_ARG_EXPAND const GLfixed * m
#define glMultMatrixxOES_PACKED PACKED_void_const_GLfixed___GENPT__
#define glMultMatrixxOES_FORMAT FORMAT_void_const_GLfixed___GENPT__
#define glMultMatrixxOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultMatrixxOES_NOT_VOID_WRAP(...) {}
#define glMultTransposeMatrixd_INDEX 1289
#define glMultTransposeMatrixd_RETURN void
#define glMultTransposeMatrixd_ARG_NAMES m
#define glMultTransposeMatrixd_ARG_EXPAND const GLdouble * m
#define glMultTransposeMatrixd_PACKED PACKED_void_const_GLdouble___GENPT__
#define glMultTransposeMatrixd_FORMAT FORMAT_void_const_GLdouble___GENPT__
#define glMultTransposeMatrixd_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultTransposeMatrixd_NOT_VOID_WRAP(...) {}
#define glMultTransposeMatrixdARB_INDEX 1290
#define glMultTransposeMatrixdARB_RETURN void
#define glMultTransposeMatrixdARB_ARG_NAMES m
#define glMultTransposeMatrixdARB_ARG_EXPAND const GLdouble * m
#define glMultTransposeMatrixdARB_PACKED PACKED_void_const_GLdouble___GENPT__
#define glMultTransposeMatrixdARB_FORMAT FORMAT_void_const_GLdouble___GENPT__
#define glMultTransposeMatrixdARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultTransposeMatrixdARB_NOT_VOID_WRAP(...) {}
#define glMultTransposeMatrixf_INDEX 1291
#define glMultTransposeMatrixf_RETURN void
#define glMultTransposeMatrixf_ARG_NAMES m
#define glMultTransposeMatrixf_ARG_EXPAND const GLfloat * m
#define glMultTransposeMatrixf_PACKED PACKED_void_const_GLfloat___GENPT__
#define glMultTransposeMatrixf_FORMAT FORMAT_void_const_GLfloat___GENPT__
#define glMultTransposeMatrixf_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultTransposeMatrixf_NOT_VOID_WRAP(...) {}
#define glMultTransposeMatrixfARB_INDEX 1292
#define glMultTransposeMatrixfARB_RETURN void
#define glMultTransposeMatrixfARB_ARG_NAMES m
#define glMultTransposeMatrixfARB_ARG_EXPAND const GLfloat * m
#define glMultTransposeMatrixfARB_PACKED PACKED_void_const_GLfloat___GENPT__
#define glMultTransposeMatrixfARB_FORMAT FORMAT_void_const_GLfloat___GENPT__
#define glMultTransposeMatrixfARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultTransposeMatrixfARB_NOT_VOID_WRAP(...) {}
#define glMultTransposeMatrixxOES_INDEX 1293
#define glMultTransposeMatrixxOES_RETURN void
#define glMultTransposeMatrixxOES_ARG_NAMES m
#define glMultTransposeMatrixxOES_ARG_EXPAND const GLfixed * m
#define glMultTransposeMatrixxOES_PACKED PACKED_void_const_GLfixed___GENPT__
#define glMultTransposeMatrixxOES_FORMAT FORMAT_void_const_GLfixed___GENPT__
#define glMultTransposeMatrixxOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultTransposeMatrixxOES_NOT_VOID_WRAP(...) {}
#define glMultiDrawArrays_INDEX 1294
#define glMultiDrawArrays_RETURN void
#define glMultiDrawArrays_ARG_NAMES mode, first, count, drawcount
#define glMultiDrawArrays_ARG_EXPAND GLenum mode, const GLint * first, const GLsizei * count, GLsizei drawcount
#define glMultiDrawArrays_PACKED PACKED_void_GLenum_const_GLint___GENPT___const_GLsizei___GENPT___GLsizei
#define glMultiDrawArrays_FORMAT FORMAT_void_GLenum_const_GLint___GENPT___const_GLsizei___GENPT___GLsizei
#define glMultiDrawArrays_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiDrawArrays_NOT_VOID_WRAP(...) {}
#define glMultiDrawArraysEXT_INDEX 1295
#define glMultiDrawArraysEXT_RETURN void
#define glMultiDrawArraysEXT_ARG_NAMES mode, first, count, primcount
#define glMultiDrawArraysEXT_ARG_EXPAND GLenum mode, const GLint * first, const GLsizei * count, GLsizei primcount
#define glMultiDrawArraysEXT_PACKED PACKED_void_GLenum_const_GLint___GENPT___const_GLsizei___GENPT___GLsizei
#define glMultiDrawArraysEXT_FORMAT FORMAT_void_GLenum_const_GLint___GENPT___const_GLsizei___GENPT___GLsizei
#define glMultiDrawArraysEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiDrawArraysEXT_NOT_VOID_WRAP(...) {}
#define glMultiDrawArraysIndirect_INDEX 1296
#define glMultiDrawArraysIndirect_RETURN void
#define glMultiDrawArraysIndirect_ARG_NAMES mode, indirect, drawcount, stride
#define glMultiDrawArraysIndirect_ARG_EXPAND GLenum mode, const void * indirect, GLsizei drawcount, GLsizei stride
#define glMultiDrawArraysIndirect_PACKED PACKED_void_GLenum_const_void___GENPT___GLsizei_GLsizei
#define glMultiDrawArraysIndirect_FORMAT FORMAT_void_GLenum_const_void___GENPT___GLsizei_GLsizei
#define glMultiDrawArraysIndirect_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiDrawArraysIndirect_NOT_VOID_WRAP(...) {}
#define glMultiDrawArraysIndirectAMD_INDEX 1297
#define glMultiDrawArraysIndirectAMD_RETURN void
#define glMultiDrawArraysIndirectAMD_ARG_NAMES mode, indirect, primcount, stride
#define glMultiDrawArraysIndirectAMD_ARG_EXPAND GLenum mode, const GLvoid * indirect, GLsizei primcount, GLsizei stride
#define glMultiDrawArraysIndirectAMD_PACKED PACKED_void_GLenum_const_GLvoid___GENPT___GLsizei_GLsizei
#define glMultiDrawArraysIndirectAMD_FORMAT FORMAT_void_GLenum_const_GLvoid___GENPT___GLsizei_GLsizei
#define glMultiDrawArraysIndirectAMD_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiDrawArraysIndirectAMD_NOT_VOID_WRAP(...) {}
#define glMultiDrawElementArrayAPPLE_INDEX 1298
#define glMultiDrawElementArrayAPPLE_RETURN void
#define glMultiDrawElementArrayAPPLE_ARG_NAMES mode, first, count, primcount
#define glMultiDrawElementArrayAPPLE_ARG_EXPAND GLenum mode, const GLint * first, const GLsizei * count, GLsizei primcount
#define glMultiDrawElementArrayAPPLE_PACKED PACKED_void_GLenum_const_GLint___GENPT___const_GLsizei___GENPT___GLsizei
#define glMultiDrawElementArrayAPPLE_FORMAT FORMAT_void_GLenum_const_GLint___GENPT___const_GLsizei___GENPT___GLsizei
#define glMultiDrawElementArrayAPPLE_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiDrawElementArrayAPPLE_NOT_VOID_WRAP(...) {}
#define glMultiDrawElements_INDEX 1299
#define glMultiDrawElements_RETURN void
#define glMultiDrawElements_ARG_NAMES mode, count, type, indices, drawcount
#define glMultiDrawElements_ARG_EXPAND GLenum mode, const GLsizei * count, GLenum type, GLvoid*const * indices, GLsizei drawcount
#define glMultiDrawElements_PACKED PACKED_void_GLenum_const_GLsizei___GENPT___GLenum_GLvoid__GENPT__const___GENPT___GLsizei
#define glMultiDrawElements_FORMAT FORMAT_void_GLenum_const_GLsizei___GENPT___GLenum_GLvoid__GENPT__const___GENPT___GLsizei
#define glMultiDrawElements_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiDrawElements_NOT_VOID_WRAP(...) {}
#define glMultiDrawElementsBaseVertex_INDEX 1300
#define glMultiDrawElementsBaseVertex_RETURN void
#define glMultiDrawElementsBaseVertex_ARG_NAMES mode, count, type, indices, drawcount, basevertex
#define glMultiDrawElementsBaseVertex_ARG_EXPAND GLenum mode, const GLsizei * count, GLenum type, GLvoid*const * indices, GLsizei drawcount, const GLint * basevertex
#define glMultiDrawElementsBaseVertex_PACKED PACKED_void_GLenum_const_GLsizei___GENPT___GLenum_GLvoid__GENPT__const___GENPT___GLsizei_const_GLint___GENPT__
#define glMultiDrawElementsBaseVertex_FORMAT FORMAT_void_GLenum_const_GLsizei___GENPT___GLenum_GLvoid__GENPT__const___GENPT___GLsizei_const_GLint___GENPT__
#define glMultiDrawElementsBaseVertex_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiDrawElementsBaseVertex_NOT_VOID_WRAP(...) {}
#define glMultiDrawElementsEXT_INDEX 1301
#define glMultiDrawElementsEXT_RETURN void
#define glMultiDrawElementsEXT_ARG_NAMES mode, count, type, indices, primcount
#define glMultiDrawElementsEXT_ARG_EXPAND GLenum mode, const GLsizei * count, GLenum type, const GLvoid * indices, GLsizei primcount
#define glMultiDrawElementsEXT_PACKED PACKED_void_GLenum_const_GLsizei___GENPT___GLenum_const_GLvoid___GENPT___GLsizei
#define glMultiDrawElementsEXT_FORMAT FORMAT_void_GLenum_const_GLsizei___GENPT___GLenum_const_GLvoid___GENPT___GLsizei
#define glMultiDrawElementsEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiDrawElementsEXT_NOT_VOID_WRAP(...) {}
#define glMultiDrawElementsIndirect_INDEX 1302
#define glMultiDrawElementsIndirect_RETURN void
#define glMultiDrawElementsIndirect_ARG_NAMES mode, type, indirect, drawcount, stride
#define glMultiDrawElementsIndirect_ARG_EXPAND GLenum mode, GLenum type, const void * indirect, GLsizei drawcount, GLsizei stride
#define glMultiDrawElementsIndirect_PACKED PACKED_void_GLenum_GLenum_const_void___GENPT___GLsizei_GLsizei
#define glMultiDrawElementsIndirect_FORMAT FORMAT_void_GLenum_GLenum_const_void___GENPT___GLsizei_GLsizei
#define glMultiDrawElementsIndirect_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiDrawElementsIndirect_NOT_VOID_WRAP(...) {}
#define glMultiDrawElementsIndirectAMD_INDEX 1303
#define glMultiDrawElementsIndirectAMD_RETURN void
#define glMultiDrawElementsIndirectAMD_ARG_NAMES mode, type, indirect, primcount, stride
#define glMultiDrawElementsIndirectAMD_ARG_EXPAND GLenum mode, GLenum type, const GLvoid * indirect, GLsizei primcount, GLsizei stride
#define glMultiDrawElementsIndirectAMD_PACKED PACKED_void_GLenum_GLenum_const_GLvoid___GENPT___GLsizei_GLsizei
#define glMultiDrawElementsIndirectAMD_FORMAT FORMAT_void_GLenum_GLenum_const_GLvoid___GENPT___GLsizei_GLsizei
#define glMultiDrawElementsIndirectAMD_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiDrawElementsIndirectAMD_NOT_VOID_WRAP(...) {}
#define glMultiDrawRangeElementArrayAPPLE_INDEX 1304
#define glMultiDrawRangeElementArrayAPPLE_RETURN void
#define glMultiDrawRangeElementArrayAPPLE_ARG_NAMES mode, start, end, first, count, primcount
#define glMultiDrawRangeElementArrayAPPLE_ARG_EXPAND GLenum mode, GLuint start, GLuint end, const GLint * first, const GLsizei * count, GLsizei primcount
#define glMultiDrawRangeElementArrayAPPLE_PACKED PACKED_void_GLenum_GLuint_GLuint_const_GLint___GENPT___const_GLsizei___GENPT___GLsizei
#define glMultiDrawRangeElementArrayAPPLE_FORMAT FORMAT_void_GLenum_GLuint_GLuint_const_GLint___GENPT___const_GLsizei___GENPT___GLsizei
#define glMultiDrawRangeElementArrayAPPLE_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiDrawRangeElementArrayAPPLE_NOT_VOID_WRAP(...) {}
#define glMultiModeDrawArraysIBM_INDEX 1305
#define glMultiModeDrawArraysIBM_RETURN void
#define glMultiModeDrawArraysIBM_ARG_NAMES mode, first, count, primcount, modestride
#define glMultiModeDrawArraysIBM_ARG_EXPAND const GLenum * mode, const GLint * first, const GLsizei * count, GLsizei primcount, GLint modestride
#define glMultiModeDrawArraysIBM_PACKED PACKED_void_const_GLenum___GENPT___const_GLint___GENPT___const_GLsizei___GENPT___GLsizei_GLint
#define glMultiModeDrawArraysIBM_FORMAT FORMAT_void_const_GLenum___GENPT___const_GLint___GENPT___const_GLsizei___GENPT___GLsizei_GLint
#define glMultiModeDrawArraysIBM_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiModeDrawArraysIBM_NOT_VOID_WRAP(...) {}
#define glMultiModeDrawElementsIBM_INDEX 1306
#define glMultiModeDrawElementsIBM_RETURN void
#define glMultiModeDrawElementsIBM_ARG_NAMES mode, count, type, indices, primcount, modestride
#define glMultiModeDrawElementsIBM_ARG_EXPAND const GLenum * mode, const GLsizei * count, GLenum type, GLvoid*const * indices, GLsizei primcount, GLint modestride
#define glMultiModeDrawElementsIBM_PACKED PACKED_void_const_GLenum___GENPT___const_GLsizei___GENPT___GLenum_GLvoid__GENPT__const___GENPT___GLsizei_GLint
#define glMultiModeDrawElementsIBM_FORMAT FORMAT_void_const_GLenum___GENPT___const_GLsizei___GENPT___GLenum_GLvoid__GENPT__const___GENPT___GLsizei_GLint
#define glMultiModeDrawElementsIBM_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiModeDrawElementsIBM_NOT_VOID_WRAP(...) {}
#define glMultiTexBufferEXT_INDEX 1307
#define glMultiTexBufferEXT_RETURN void
#define glMultiTexBufferEXT_ARG_NAMES texunit, target, internalformat, buffer
#define glMultiTexBufferEXT_ARG_EXPAND GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer
#define glMultiTexBufferEXT_PACKED PACKED_void_GLenum_GLenum_GLenum_GLuint
#define glMultiTexBufferEXT_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLuint
#define glMultiTexBufferEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexBufferEXT_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord1bOES_INDEX 1308
#define glMultiTexCoord1bOES_RETURN void
#define glMultiTexCoord1bOES_ARG_NAMES texture, s
#define glMultiTexCoord1bOES_ARG_EXPAND GLenum texture, GLbyte s
#define glMultiTexCoord1bOES_PACKED PACKED_void_GLenum_GLbyte
#define glMultiTexCoord1bOES_FORMAT FORMAT_void_GLenum_GLbyte
#define glMultiTexCoord1bOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord1bOES_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord1bvOES_INDEX 1309
#define glMultiTexCoord1bvOES_RETURN void
#define glMultiTexCoord1bvOES_ARG_NAMES texture, coords
#define glMultiTexCoord1bvOES_ARG_EXPAND GLenum texture, const GLbyte * coords
#define glMultiTexCoord1bvOES_PACKED PACKED_void_GLenum_const_GLbyte___GENPT__
#define glMultiTexCoord1bvOES_FORMAT FORMAT_void_GLenum_const_GLbyte___GENPT__
#define glMultiTexCoord1bvOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord1bvOES_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord1d_INDEX 1310
#define glMultiTexCoord1d_RETURN void
#define glMultiTexCoord1d_ARG_NAMES target, s
#define glMultiTexCoord1d_ARG_EXPAND GLenum target, GLdouble s
#define glMultiTexCoord1d_PACKED PACKED_void_GLenum_GLdouble
#define glMultiTexCoord1d_FORMAT FORMAT_void_GLenum_GLdouble
#define glMultiTexCoord1d_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord1d_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord1dARB_INDEX 1311
#define glMultiTexCoord1dARB_RETURN void
#define glMultiTexCoord1dARB_ARG_NAMES target, s
#define glMultiTexCoord1dARB_ARG_EXPAND GLenum target, GLdouble s
#define glMultiTexCoord1dARB_PACKED PACKED_void_GLenum_GLdouble
#define glMultiTexCoord1dARB_FORMAT FORMAT_void_GLenum_GLdouble
#define glMultiTexCoord1dARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord1dARB_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord1dv_INDEX 1312
#define glMultiTexCoord1dv_RETURN void
#define glMultiTexCoord1dv_ARG_NAMES target, v
#define glMultiTexCoord1dv_ARG_EXPAND GLenum target, const GLdouble * v
#define glMultiTexCoord1dv_PACKED PACKED_void_GLenum_const_GLdouble___GENPT__
#define glMultiTexCoord1dv_FORMAT FORMAT_void_GLenum_const_GLdouble___GENPT__
#define glMultiTexCoord1dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord1dv_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord1dvARB_INDEX 1313
#define glMultiTexCoord1dvARB_RETURN void
#define glMultiTexCoord1dvARB_ARG_NAMES target, v
#define glMultiTexCoord1dvARB_ARG_EXPAND GLenum target, const GLdouble * v
#define glMultiTexCoord1dvARB_PACKED PACKED_void_GLenum_const_GLdouble___GENPT__
#define glMultiTexCoord1dvARB_FORMAT FORMAT_void_GLenum_const_GLdouble___GENPT__
#define glMultiTexCoord1dvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord1dvARB_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord1f_INDEX 1314
#define glMultiTexCoord1f_RETURN void
#define glMultiTexCoord1f_ARG_NAMES target, s
#define glMultiTexCoord1f_ARG_EXPAND GLenum target, GLfloat s
#define glMultiTexCoord1f_PACKED PACKED_void_GLenum_GLfloat
#define glMultiTexCoord1f_FORMAT FORMAT_void_GLenum_GLfloat
#define glMultiTexCoord1f_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord1f_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord1fARB_INDEX 1315
#define glMultiTexCoord1fARB_RETURN void
#define glMultiTexCoord1fARB_ARG_NAMES target, s
#define glMultiTexCoord1fARB_ARG_EXPAND GLenum target, GLfloat s
#define glMultiTexCoord1fARB_PACKED PACKED_void_GLenum_GLfloat
#define glMultiTexCoord1fARB_FORMAT FORMAT_void_GLenum_GLfloat
#define glMultiTexCoord1fARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord1fARB_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord1fv_INDEX 1316
#define glMultiTexCoord1fv_RETURN void
#define glMultiTexCoord1fv_ARG_NAMES target, v
#define glMultiTexCoord1fv_ARG_EXPAND GLenum target, const GLfloat * v
#define glMultiTexCoord1fv_PACKED PACKED_void_GLenum_const_GLfloat___GENPT__
#define glMultiTexCoord1fv_FORMAT FORMAT_void_GLenum_const_GLfloat___GENPT__
#define glMultiTexCoord1fv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord1fv_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord1fvARB_INDEX 1317
#define glMultiTexCoord1fvARB_RETURN void
#define glMultiTexCoord1fvARB_ARG_NAMES target, v
#define glMultiTexCoord1fvARB_ARG_EXPAND GLenum target, const GLfloat * v
#define glMultiTexCoord1fvARB_PACKED PACKED_void_GLenum_const_GLfloat___GENPT__
#define glMultiTexCoord1fvARB_FORMAT FORMAT_void_GLenum_const_GLfloat___GENPT__
#define glMultiTexCoord1fvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord1fvARB_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord1hNV_INDEX 1318
#define glMultiTexCoord1hNV_RETURN void
#define glMultiTexCoord1hNV_ARG_NAMES target, s
#define glMultiTexCoord1hNV_ARG_EXPAND GLenum target, GLhalfNV s
#define glMultiTexCoord1hNV_PACKED PACKED_void_GLenum_GLhalfNV
#define glMultiTexCoord1hNV_FORMAT FORMAT_void_GLenum_GLhalfNV
#define glMultiTexCoord1hNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord1hNV_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord1hvNV_INDEX 1319
#define glMultiTexCoord1hvNV_RETURN void
#define glMultiTexCoord1hvNV_ARG_NAMES target, v
#define glMultiTexCoord1hvNV_ARG_EXPAND GLenum target, const GLhalfNV * v
#define glMultiTexCoord1hvNV_PACKED PACKED_void_GLenum_const_GLhalfNV___GENPT__
#define glMultiTexCoord1hvNV_FORMAT FORMAT_void_GLenum_const_GLhalfNV___GENPT__
#define glMultiTexCoord1hvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord1hvNV_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord1i_INDEX 1320
#define glMultiTexCoord1i_RETURN void
#define glMultiTexCoord1i_ARG_NAMES target, s
#define glMultiTexCoord1i_ARG_EXPAND GLenum target, GLint s
#define glMultiTexCoord1i_PACKED PACKED_void_GLenum_GLint
#define glMultiTexCoord1i_FORMAT FORMAT_void_GLenum_GLint
#define glMultiTexCoord1i_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord1i_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord1iARB_INDEX 1321
#define glMultiTexCoord1iARB_RETURN void
#define glMultiTexCoord1iARB_ARG_NAMES target, s
#define glMultiTexCoord1iARB_ARG_EXPAND GLenum target, GLint s
#define glMultiTexCoord1iARB_PACKED PACKED_void_GLenum_GLint
#define glMultiTexCoord1iARB_FORMAT FORMAT_void_GLenum_GLint
#define glMultiTexCoord1iARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord1iARB_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord1iv_INDEX 1322
#define glMultiTexCoord1iv_RETURN void
#define glMultiTexCoord1iv_ARG_NAMES target, v
#define glMultiTexCoord1iv_ARG_EXPAND GLenum target, const GLint * v
#define glMultiTexCoord1iv_PACKED PACKED_void_GLenum_const_GLint___GENPT__
#define glMultiTexCoord1iv_FORMAT FORMAT_void_GLenum_const_GLint___GENPT__
#define glMultiTexCoord1iv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord1iv_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord1ivARB_INDEX 1323
#define glMultiTexCoord1ivARB_RETURN void
#define glMultiTexCoord1ivARB_ARG_NAMES target, v
#define glMultiTexCoord1ivARB_ARG_EXPAND GLenum target, const GLint * v
#define glMultiTexCoord1ivARB_PACKED PACKED_void_GLenum_const_GLint___GENPT__
#define glMultiTexCoord1ivARB_FORMAT FORMAT_void_GLenum_const_GLint___GENPT__
#define glMultiTexCoord1ivARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord1ivARB_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord1s_INDEX 1324
#define glMultiTexCoord1s_RETURN void
#define glMultiTexCoord1s_ARG_NAMES target, s
#define glMultiTexCoord1s_ARG_EXPAND GLenum target, GLshort s
#define glMultiTexCoord1s_PACKED PACKED_void_GLenum_GLshort
#define glMultiTexCoord1s_FORMAT FORMAT_void_GLenum_GLshort
#define glMultiTexCoord1s_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord1s_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord1sARB_INDEX 1325
#define glMultiTexCoord1sARB_RETURN void
#define glMultiTexCoord1sARB_ARG_NAMES target, s
#define glMultiTexCoord1sARB_ARG_EXPAND GLenum target, GLshort s
#define glMultiTexCoord1sARB_PACKED PACKED_void_GLenum_GLshort
#define glMultiTexCoord1sARB_FORMAT FORMAT_void_GLenum_GLshort
#define glMultiTexCoord1sARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord1sARB_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord1sv_INDEX 1326
#define glMultiTexCoord1sv_RETURN void
#define glMultiTexCoord1sv_ARG_NAMES target, v
#define glMultiTexCoord1sv_ARG_EXPAND GLenum target, const GLshort * v
#define glMultiTexCoord1sv_PACKED PACKED_void_GLenum_const_GLshort___GENPT__
#define glMultiTexCoord1sv_FORMAT FORMAT_void_GLenum_const_GLshort___GENPT__
#define glMultiTexCoord1sv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord1sv_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord1svARB_INDEX 1327
#define glMultiTexCoord1svARB_RETURN void
#define glMultiTexCoord1svARB_ARG_NAMES target, v
#define glMultiTexCoord1svARB_ARG_EXPAND GLenum target, const GLshort * v
#define glMultiTexCoord1svARB_PACKED PACKED_void_GLenum_const_GLshort___GENPT__
#define glMultiTexCoord1svARB_FORMAT FORMAT_void_GLenum_const_GLshort___GENPT__
#define glMultiTexCoord1svARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord1svARB_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord1xOES_INDEX 1328
#define glMultiTexCoord1xOES_RETURN void
#define glMultiTexCoord1xOES_ARG_NAMES texture, s
#define glMultiTexCoord1xOES_ARG_EXPAND GLenum texture, GLfixed s
#define glMultiTexCoord1xOES_PACKED PACKED_void_GLenum_GLfixed
#define glMultiTexCoord1xOES_FORMAT FORMAT_void_GLenum_GLfixed
#define glMultiTexCoord1xOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord1xOES_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord1xvOES_INDEX 1329
#define glMultiTexCoord1xvOES_RETURN void
#define glMultiTexCoord1xvOES_ARG_NAMES texture, coords
#define glMultiTexCoord1xvOES_ARG_EXPAND GLenum texture, const GLfixed * coords
#define glMultiTexCoord1xvOES_PACKED PACKED_void_GLenum_const_GLfixed___GENPT__
#define glMultiTexCoord1xvOES_FORMAT FORMAT_void_GLenum_const_GLfixed___GENPT__
#define glMultiTexCoord1xvOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord1xvOES_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord2bOES_INDEX 1330
#define glMultiTexCoord2bOES_RETURN void
#define glMultiTexCoord2bOES_ARG_NAMES texture, s, t
#define glMultiTexCoord2bOES_ARG_EXPAND GLenum texture, GLbyte s, GLbyte t
#define glMultiTexCoord2bOES_PACKED PACKED_void_GLenum_GLbyte_GLbyte
#define glMultiTexCoord2bOES_FORMAT FORMAT_void_GLenum_GLbyte_GLbyte
#define glMultiTexCoord2bOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord2bOES_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord2bvOES_INDEX 1331
#define glMultiTexCoord2bvOES_RETURN void
#define glMultiTexCoord2bvOES_ARG_NAMES texture, coords
#define glMultiTexCoord2bvOES_ARG_EXPAND GLenum texture, const GLbyte * coords
#define glMultiTexCoord2bvOES_PACKED PACKED_void_GLenum_const_GLbyte___GENPT__
#define glMultiTexCoord2bvOES_FORMAT FORMAT_void_GLenum_const_GLbyte___GENPT__
#define glMultiTexCoord2bvOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord2bvOES_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord2d_INDEX 1332
#define glMultiTexCoord2d_RETURN void
#define glMultiTexCoord2d_ARG_NAMES target, s, t
#define glMultiTexCoord2d_ARG_EXPAND GLenum target, GLdouble s, GLdouble t
#define glMultiTexCoord2d_PACKED PACKED_void_GLenum_GLdouble_GLdouble
#define glMultiTexCoord2d_FORMAT FORMAT_void_GLenum_GLdouble_GLdouble
#define glMultiTexCoord2d_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord2d_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord2dARB_INDEX 1333
#define glMultiTexCoord2dARB_RETURN void
#define glMultiTexCoord2dARB_ARG_NAMES target, s, t
#define glMultiTexCoord2dARB_ARG_EXPAND GLenum target, GLdouble s, GLdouble t
#define glMultiTexCoord2dARB_PACKED PACKED_void_GLenum_GLdouble_GLdouble
#define glMultiTexCoord2dARB_FORMAT FORMAT_void_GLenum_GLdouble_GLdouble
#define glMultiTexCoord2dARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord2dARB_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord2dv_INDEX 1334
#define glMultiTexCoord2dv_RETURN void
#define glMultiTexCoord2dv_ARG_NAMES target, v
#define glMultiTexCoord2dv_ARG_EXPAND GLenum target, const GLdouble * v
#define glMultiTexCoord2dv_PACKED PACKED_void_GLenum_const_GLdouble___GENPT__
#define glMultiTexCoord2dv_FORMAT FORMAT_void_GLenum_const_GLdouble___GENPT__
#define glMultiTexCoord2dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord2dv_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord2dvARB_INDEX 1335
#define glMultiTexCoord2dvARB_RETURN void
#define glMultiTexCoord2dvARB_ARG_NAMES target, v
#define glMultiTexCoord2dvARB_ARG_EXPAND GLenum target, const GLdouble * v
#define glMultiTexCoord2dvARB_PACKED PACKED_void_GLenum_const_GLdouble___GENPT__
#define glMultiTexCoord2dvARB_FORMAT FORMAT_void_GLenum_const_GLdouble___GENPT__
#define glMultiTexCoord2dvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord2dvARB_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord2f_INDEX 1336
#define glMultiTexCoord2f_RETURN void
#define glMultiTexCoord2f_ARG_NAMES target, s, t
#define glMultiTexCoord2f_ARG_EXPAND GLenum target, GLfloat s, GLfloat t
#define glMultiTexCoord2f_PACKED PACKED_void_GLenum_GLfloat_GLfloat
#define glMultiTexCoord2f_FORMAT FORMAT_void_GLenum_GLfloat_GLfloat
#define glMultiTexCoord2f_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord2f_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord2fARB_INDEX 1337
#define glMultiTexCoord2fARB_RETURN void
#define glMultiTexCoord2fARB_ARG_NAMES target, s, t
#define glMultiTexCoord2fARB_ARG_EXPAND GLenum target, GLfloat s, GLfloat t
#define glMultiTexCoord2fARB_PACKED PACKED_void_GLenum_GLfloat_GLfloat
#define glMultiTexCoord2fARB_FORMAT FORMAT_void_GLenum_GLfloat_GLfloat
#define glMultiTexCoord2fARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord2fARB_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord2fv_INDEX 1338
#define glMultiTexCoord2fv_RETURN void
#define glMultiTexCoord2fv_ARG_NAMES target, v
#define glMultiTexCoord2fv_ARG_EXPAND GLenum target, const GLfloat * v
#define glMultiTexCoord2fv_PACKED PACKED_void_GLenum_const_GLfloat___GENPT__
#define glMultiTexCoord2fv_FORMAT FORMAT_void_GLenum_const_GLfloat___GENPT__
#define glMultiTexCoord2fv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord2fv_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord2fvARB_INDEX 1339
#define glMultiTexCoord2fvARB_RETURN void
#define glMultiTexCoord2fvARB_ARG_NAMES target, v
#define glMultiTexCoord2fvARB_ARG_EXPAND GLenum target, const GLfloat * v
#define glMultiTexCoord2fvARB_PACKED PACKED_void_GLenum_const_GLfloat___GENPT__
#define glMultiTexCoord2fvARB_FORMAT FORMAT_void_GLenum_const_GLfloat___GENPT__
#define glMultiTexCoord2fvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord2fvARB_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord2hNV_INDEX 1340
#define glMultiTexCoord2hNV_RETURN void
#define glMultiTexCoord2hNV_ARG_NAMES target, s, t
#define glMultiTexCoord2hNV_ARG_EXPAND GLenum target, GLhalfNV s, GLhalfNV t
#define glMultiTexCoord2hNV_PACKED PACKED_void_GLenum_GLhalfNV_GLhalfNV
#define glMultiTexCoord2hNV_FORMAT FORMAT_void_GLenum_GLhalfNV_GLhalfNV
#define glMultiTexCoord2hNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord2hNV_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord2hvNV_INDEX 1341
#define glMultiTexCoord2hvNV_RETURN void
#define glMultiTexCoord2hvNV_ARG_NAMES target, v
#define glMultiTexCoord2hvNV_ARG_EXPAND GLenum target, const GLhalfNV * v
#define glMultiTexCoord2hvNV_PACKED PACKED_void_GLenum_const_GLhalfNV___GENPT__
#define glMultiTexCoord2hvNV_FORMAT FORMAT_void_GLenum_const_GLhalfNV___GENPT__
#define glMultiTexCoord2hvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord2hvNV_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord2i_INDEX 1342
#define glMultiTexCoord2i_RETURN void
#define glMultiTexCoord2i_ARG_NAMES target, s, t
#define glMultiTexCoord2i_ARG_EXPAND GLenum target, GLint s, GLint t
#define glMultiTexCoord2i_PACKED PACKED_void_GLenum_GLint_GLint
#define glMultiTexCoord2i_FORMAT FORMAT_void_GLenum_GLint_GLint
#define glMultiTexCoord2i_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord2i_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord2iARB_INDEX 1343
#define glMultiTexCoord2iARB_RETURN void
#define glMultiTexCoord2iARB_ARG_NAMES target, s, t
#define glMultiTexCoord2iARB_ARG_EXPAND GLenum target, GLint s, GLint t
#define glMultiTexCoord2iARB_PACKED PACKED_void_GLenum_GLint_GLint
#define glMultiTexCoord2iARB_FORMAT FORMAT_void_GLenum_GLint_GLint
#define glMultiTexCoord2iARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord2iARB_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord2iv_INDEX 1344
#define glMultiTexCoord2iv_RETURN void
#define glMultiTexCoord2iv_ARG_NAMES target, v
#define glMultiTexCoord2iv_ARG_EXPAND GLenum target, const GLint * v
#define glMultiTexCoord2iv_PACKED PACKED_void_GLenum_const_GLint___GENPT__
#define glMultiTexCoord2iv_FORMAT FORMAT_void_GLenum_const_GLint___GENPT__
#define glMultiTexCoord2iv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord2iv_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord2ivARB_INDEX 1345
#define glMultiTexCoord2ivARB_RETURN void
#define glMultiTexCoord2ivARB_ARG_NAMES target, v
#define glMultiTexCoord2ivARB_ARG_EXPAND GLenum target, const GLint * v
#define glMultiTexCoord2ivARB_PACKED PACKED_void_GLenum_const_GLint___GENPT__
#define glMultiTexCoord2ivARB_FORMAT FORMAT_void_GLenum_const_GLint___GENPT__
#define glMultiTexCoord2ivARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord2ivARB_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord2s_INDEX 1346
#define glMultiTexCoord2s_RETURN void
#define glMultiTexCoord2s_ARG_NAMES target, s, t
#define glMultiTexCoord2s_ARG_EXPAND GLenum target, GLshort s, GLshort t
#define glMultiTexCoord2s_PACKED PACKED_void_GLenum_GLshort_GLshort
#define glMultiTexCoord2s_FORMAT FORMAT_void_GLenum_GLshort_GLshort
#define glMultiTexCoord2s_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord2s_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord2sARB_INDEX 1347
#define glMultiTexCoord2sARB_RETURN void
#define glMultiTexCoord2sARB_ARG_NAMES target, s, t
#define glMultiTexCoord2sARB_ARG_EXPAND GLenum target, GLshort s, GLshort t
#define glMultiTexCoord2sARB_PACKED PACKED_void_GLenum_GLshort_GLshort
#define glMultiTexCoord2sARB_FORMAT FORMAT_void_GLenum_GLshort_GLshort
#define glMultiTexCoord2sARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord2sARB_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord2sv_INDEX 1348
#define glMultiTexCoord2sv_RETURN void
#define glMultiTexCoord2sv_ARG_NAMES target, v
#define glMultiTexCoord2sv_ARG_EXPAND GLenum target, const GLshort * v
#define glMultiTexCoord2sv_PACKED PACKED_void_GLenum_const_GLshort___GENPT__
#define glMultiTexCoord2sv_FORMAT FORMAT_void_GLenum_const_GLshort___GENPT__
#define glMultiTexCoord2sv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord2sv_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord2svARB_INDEX 1349
#define glMultiTexCoord2svARB_RETURN void
#define glMultiTexCoord2svARB_ARG_NAMES target, v
#define glMultiTexCoord2svARB_ARG_EXPAND GLenum target, const GLshort * v
#define glMultiTexCoord2svARB_PACKED PACKED_void_GLenum_const_GLshort___GENPT__
#define glMultiTexCoord2svARB_FORMAT FORMAT_void_GLenum_const_GLshort___GENPT__
#define glMultiTexCoord2svARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord2svARB_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord2xOES_INDEX 1350
#define glMultiTexCoord2xOES_RETURN void
#define glMultiTexCoord2xOES_ARG_NAMES texture, s, t
#define glMultiTexCoord2xOES_ARG_EXPAND GLenum texture, GLfixed s, GLfixed t
#define glMultiTexCoord2xOES_PACKED PACKED_void_GLenum_GLfixed_GLfixed
#define glMultiTexCoord2xOES_FORMAT FORMAT_void_GLenum_GLfixed_GLfixed
#define glMultiTexCoord2xOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord2xOES_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord2xvOES_INDEX 1351
#define glMultiTexCoord2xvOES_RETURN void
#define glMultiTexCoord2xvOES_ARG_NAMES texture, coords
#define glMultiTexCoord2xvOES_ARG_EXPAND GLenum texture, const GLfixed * coords
#define glMultiTexCoord2xvOES_PACKED PACKED_void_GLenum_const_GLfixed___GENPT__
#define glMultiTexCoord2xvOES_FORMAT FORMAT_void_GLenum_const_GLfixed___GENPT__
#define glMultiTexCoord2xvOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord2xvOES_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord3bOES_INDEX 1352
#define glMultiTexCoord3bOES_RETURN void
#define glMultiTexCoord3bOES_ARG_NAMES texture, s, t, r
#define glMultiTexCoord3bOES_ARG_EXPAND GLenum texture, GLbyte s, GLbyte t, GLbyte r
#define glMultiTexCoord3bOES_PACKED PACKED_void_GLenum_GLbyte_GLbyte_GLbyte
#define glMultiTexCoord3bOES_FORMAT FORMAT_void_GLenum_GLbyte_GLbyte_GLbyte
#define glMultiTexCoord3bOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord3bOES_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord3bvOES_INDEX 1353
#define glMultiTexCoord3bvOES_RETURN void
#define glMultiTexCoord3bvOES_ARG_NAMES texture, coords
#define glMultiTexCoord3bvOES_ARG_EXPAND GLenum texture, const GLbyte * coords
#define glMultiTexCoord3bvOES_PACKED PACKED_void_GLenum_const_GLbyte___GENPT__
#define glMultiTexCoord3bvOES_FORMAT FORMAT_void_GLenum_const_GLbyte___GENPT__
#define glMultiTexCoord3bvOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord3bvOES_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord3d_INDEX 1354
#define glMultiTexCoord3d_RETURN void
#define glMultiTexCoord3d_ARG_NAMES target, s, t, r
#define glMultiTexCoord3d_ARG_EXPAND GLenum target, GLdouble s, GLdouble t, GLdouble r
#define glMultiTexCoord3d_PACKED PACKED_void_GLenum_GLdouble_GLdouble_GLdouble
#define glMultiTexCoord3d_FORMAT FORMAT_void_GLenum_GLdouble_GLdouble_GLdouble
#define glMultiTexCoord3d_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord3d_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord3dARB_INDEX 1355
#define glMultiTexCoord3dARB_RETURN void
#define glMultiTexCoord3dARB_ARG_NAMES target, s, t, r
#define glMultiTexCoord3dARB_ARG_EXPAND GLenum target, GLdouble s, GLdouble t, GLdouble r
#define glMultiTexCoord3dARB_PACKED PACKED_void_GLenum_GLdouble_GLdouble_GLdouble
#define glMultiTexCoord3dARB_FORMAT FORMAT_void_GLenum_GLdouble_GLdouble_GLdouble
#define glMultiTexCoord3dARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord3dARB_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord3dv_INDEX 1356
#define glMultiTexCoord3dv_RETURN void
#define glMultiTexCoord3dv_ARG_NAMES target, v
#define glMultiTexCoord3dv_ARG_EXPAND GLenum target, const GLdouble * v
#define glMultiTexCoord3dv_PACKED PACKED_void_GLenum_const_GLdouble___GENPT__
#define glMultiTexCoord3dv_FORMAT FORMAT_void_GLenum_const_GLdouble___GENPT__
#define glMultiTexCoord3dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord3dv_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord3dvARB_INDEX 1357
#define glMultiTexCoord3dvARB_RETURN void
#define glMultiTexCoord3dvARB_ARG_NAMES target, v
#define glMultiTexCoord3dvARB_ARG_EXPAND GLenum target, const GLdouble * v
#define glMultiTexCoord3dvARB_PACKED PACKED_void_GLenum_const_GLdouble___GENPT__
#define glMultiTexCoord3dvARB_FORMAT FORMAT_void_GLenum_const_GLdouble___GENPT__
#define glMultiTexCoord3dvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord3dvARB_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord3f_INDEX 1358
#define glMultiTexCoord3f_RETURN void
#define glMultiTexCoord3f_ARG_NAMES target, s, t, r
#define glMultiTexCoord3f_ARG_EXPAND GLenum target, GLfloat s, GLfloat t, GLfloat r
#define glMultiTexCoord3f_PACKED PACKED_void_GLenum_GLfloat_GLfloat_GLfloat
#define glMultiTexCoord3f_FORMAT FORMAT_void_GLenum_GLfloat_GLfloat_GLfloat
#define glMultiTexCoord3f_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord3f_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord3fARB_INDEX 1359
#define glMultiTexCoord3fARB_RETURN void
#define glMultiTexCoord3fARB_ARG_NAMES target, s, t, r
#define glMultiTexCoord3fARB_ARG_EXPAND GLenum target, GLfloat s, GLfloat t, GLfloat r
#define glMultiTexCoord3fARB_PACKED PACKED_void_GLenum_GLfloat_GLfloat_GLfloat
#define glMultiTexCoord3fARB_FORMAT FORMAT_void_GLenum_GLfloat_GLfloat_GLfloat
#define glMultiTexCoord3fARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord3fARB_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord3fv_INDEX 1360
#define glMultiTexCoord3fv_RETURN void
#define glMultiTexCoord3fv_ARG_NAMES target, v
#define glMultiTexCoord3fv_ARG_EXPAND GLenum target, const GLfloat * v
#define glMultiTexCoord3fv_PACKED PACKED_void_GLenum_const_GLfloat___GENPT__
#define glMultiTexCoord3fv_FORMAT FORMAT_void_GLenum_const_GLfloat___GENPT__
#define glMultiTexCoord3fv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord3fv_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord3fvARB_INDEX 1361
#define glMultiTexCoord3fvARB_RETURN void
#define glMultiTexCoord3fvARB_ARG_NAMES target, v
#define glMultiTexCoord3fvARB_ARG_EXPAND GLenum target, const GLfloat * v
#define glMultiTexCoord3fvARB_PACKED PACKED_void_GLenum_const_GLfloat___GENPT__
#define glMultiTexCoord3fvARB_FORMAT FORMAT_void_GLenum_const_GLfloat___GENPT__
#define glMultiTexCoord3fvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord3fvARB_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord3hNV_INDEX 1362
#define glMultiTexCoord3hNV_RETURN void
#define glMultiTexCoord3hNV_ARG_NAMES target, s, t, r
#define glMultiTexCoord3hNV_ARG_EXPAND GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r
#define glMultiTexCoord3hNV_PACKED PACKED_void_GLenum_GLhalfNV_GLhalfNV_GLhalfNV
#define glMultiTexCoord3hNV_FORMAT FORMAT_void_GLenum_GLhalfNV_GLhalfNV_GLhalfNV
#define glMultiTexCoord3hNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord3hNV_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord3hvNV_INDEX 1363
#define glMultiTexCoord3hvNV_RETURN void
#define glMultiTexCoord3hvNV_ARG_NAMES target, v
#define glMultiTexCoord3hvNV_ARG_EXPAND GLenum target, const GLhalfNV * v
#define glMultiTexCoord3hvNV_PACKED PACKED_void_GLenum_const_GLhalfNV___GENPT__
#define glMultiTexCoord3hvNV_FORMAT FORMAT_void_GLenum_const_GLhalfNV___GENPT__
#define glMultiTexCoord3hvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord3hvNV_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord3i_INDEX 1364
#define glMultiTexCoord3i_RETURN void
#define glMultiTexCoord3i_ARG_NAMES target, s, t, r
#define glMultiTexCoord3i_ARG_EXPAND GLenum target, GLint s, GLint t, GLint r
#define glMultiTexCoord3i_PACKED PACKED_void_GLenum_GLint_GLint_GLint
#define glMultiTexCoord3i_FORMAT FORMAT_void_GLenum_GLint_GLint_GLint
#define glMultiTexCoord3i_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord3i_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord3iARB_INDEX 1365
#define glMultiTexCoord3iARB_RETURN void
#define glMultiTexCoord3iARB_ARG_NAMES target, s, t, r
#define glMultiTexCoord3iARB_ARG_EXPAND GLenum target, GLint s, GLint t, GLint r
#define glMultiTexCoord3iARB_PACKED PACKED_void_GLenum_GLint_GLint_GLint
#define glMultiTexCoord3iARB_FORMAT FORMAT_void_GLenum_GLint_GLint_GLint
#define glMultiTexCoord3iARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord3iARB_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord3iv_INDEX 1366
#define glMultiTexCoord3iv_RETURN void
#define glMultiTexCoord3iv_ARG_NAMES target, v
#define glMultiTexCoord3iv_ARG_EXPAND GLenum target, const GLint * v
#define glMultiTexCoord3iv_PACKED PACKED_void_GLenum_const_GLint___GENPT__
#define glMultiTexCoord3iv_FORMAT FORMAT_void_GLenum_const_GLint___GENPT__
#define glMultiTexCoord3iv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord3iv_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord3ivARB_INDEX 1367
#define glMultiTexCoord3ivARB_RETURN void
#define glMultiTexCoord3ivARB_ARG_NAMES target, v
#define glMultiTexCoord3ivARB_ARG_EXPAND GLenum target, const GLint * v
#define glMultiTexCoord3ivARB_PACKED PACKED_void_GLenum_const_GLint___GENPT__
#define glMultiTexCoord3ivARB_FORMAT FORMAT_void_GLenum_const_GLint___GENPT__
#define glMultiTexCoord3ivARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord3ivARB_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord3s_INDEX 1368
#define glMultiTexCoord3s_RETURN void
#define glMultiTexCoord3s_ARG_NAMES target, s, t, r
#define glMultiTexCoord3s_ARG_EXPAND GLenum target, GLshort s, GLshort t, GLshort r
#define glMultiTexCoord3s_PACKED PACKED_void_GLenum_GLshort_GLshort_GLshort
#define glMultiTexCoord3s_FORMAT FORMAT_void_GLenum_GLshort_GLshort_GLshort
#define glMultiTexCoord3s_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord3s_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord3sARB_INDEX 1369
#define glMultiTexCoord3sARB_RETURN void
#define glMultiTexCoord3sARB_ARG_NAMES target, s, t, r
#define glMultiTexCoord3sARB_ARG_EXPAND GLenum target, GLshort s, GLshort t, GLshort r
#define glMultiTexCoord3sARB_PACKED PACKED_void_GLenum_GLshort_GLshort_GLshort
#define glMultiTexCoord3sARB_FORMAT FORMAT_void_GLenum_GLshort_GLshort_GLshort
#define glMultiTexCoord3sARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord3sARB_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord3sv_INDEX 1370
#define glMultiTexCoord3sv_RETURN void
#define glMultiTexCoord3sv_ARG_NAMES target, v
#define glMultiTexCoord3sv_ARG_EXPAND GLenum target, const GLshort * v
#define glMultiTexCoord3sv_PACKED PACKED_void_GLenum_const_GLshort___GENPT__
#define glMultiTexCoord3sv_FORMAT FORMAT_void_GLenum_const_GLshort___GENPT__
#define glMultiTexCoord3sv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord3sv_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord3svARB_INDEX 1371
#define glMultiTexCoord3svARB_RETURN void
#define glMultiTexCoord3svARB_ARG_NAMES target, v
#define glMultiTexCoord3svARB_ARG_EXPAND GLenum target, const GLshort * v
#define glMultiTexCoord3svARB_PACKED PACKED_void_GLenum_const_GLshort___GENPT__
#define glMultiTexCoord3svARB_FORMAT FORMAT_void_GLenum_const_GLshort___GENPT__
#define glMultiTexCoord3svARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord3svARB_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord3xOES_INDEX 1372
#define glMultiTexCoord3xOES_RETURN void
#define glMultiTexCoord3xOES_ARG_NAMES texture, s, t, r
#define glMultiTexCoord3xOES_ARG_EXPAND GLenum texture, GLfixed s, GLfixed t, GLfixed r
#define glMultiTexCoord3xOES_PACKED PACKED_void_GLenum_GLfixed_GLfixed_GLfixed
#define glMultiTexCoord3xOES_FORMAT FORMAT_void_GLenum_GLfixed_GLfixed_GLfixed
#define glMultiTexCoord3xOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord3xOES_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord3xvOES_INDEX 1373
#define glMultiTexCoord3xvOES_RETURN void
#define glMultiTexCoord3xvOES_ARG_NAMES texture, coords
#define glMultiTexCoord3xvOES_ARG_EXPAND GLenum texture, const GLfixed * coords
#define glMultiTexCoord3xvOES_PACKED PACKED_void_GLenum_const_GLfixed___GENPT__
#define glMultiTexCoord3xvOES_FORMAT FORMAT_void_GLenum_const_GLfixed___GENPT__
#define glMultiTexCoord3xvOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord3xvOES_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord4bOES_INDEX 1374
#define glMultiTexCoord4bOES_RETURN void
#define glMultiTexCoord4bOES_ARG_NAMES texture, s, t, r, q
#define glMultiTexCoord4bOES_ARG_EXPAND GLenum texture, GLbyte s, GLbyte t, GLbyte r, GLbyte q
#define glMultiTexCoord4bOES_PACKED PACKED_void_GLenum_GLbyte_GLbyte_GLbyte_GLbyte
#define glMultiTexCoord4bOES_FORMAT FORMAT_void_GLenum_GLbyte_GLbyte_GLbyte_GLbyte
#define glMultiTexCoord4bOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord4bOES_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord4bvOES_INDEX 1375
#define glMultiTexCoord4bvOES_RETURN void
#define glMultiTexCoord4bvOES_ARG_NAMES texture, coords
#define glMultiTexCoord4bvOES_ARG_EXPAND GLenum texture, const GLbyte * coords
#define glMultiTexCoord4bvOES_PACKED PACKED_void_GLenum_const_GLbyte___GENPT__
#define glMultiTexCoord4bvOES_FORMAT FORMAT_void_GLenum_const_GLbyte___GENPT__
#define glMultiTexCoord4bvOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord4bvOES_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord4d_INDEX 1376
#define glMultiTexCoord4d_RETURN void
#define glMultiTexCoord4d_ARG_NAMES target, s, t, r, q
#define glMultiTexCoord4d_ARG_EXPAND GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q
#define glMultiTexCoord4d_PACKED PACKED_void_GLenum_GLdouble_GLdouble_GLdouble_GLdouble
#define glMultiTexCoord4d_FORMAT FORMAT_void_GLenum_GLdouble_GLdouble_GLdouble_GLdouble
#define glMultiTexCoord4d_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord4d_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord4dARB_INDEX 1377
#define glMultiTexCoord4dARB_RETURN void
#define glMultiTexCoord4dARB_ARG_NAMES target, s, t, r, q
#define glMultiTexCoord4dARB_ARG_EXPAND GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q
#define glMultiTexCoord4dARB_PACKED PACKED_void_GLenum_GLdouble_GLdouble_GLdouble_GLdouble
#define glMultiTexCoord4dARB_FORMAT FORMAT_void_GLenum_GLdouble_GLdouble_GLdouble_GLdouble
#define glMultiTexCoord4dARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord4dARB_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord4dv_INDEX 1378
#define glMultiTexCoord4dv_RETURN void
#define glMultiTexCoord4dv_ARG_NAMES target, v
#define glMultiTexCoord4dv_ARG_EXPAND GLenum target, const GLdouble * v
#define glMultiTexCoord4dv_PACKED PACKED_void_GLenum_const_GLdouble___GENPT__
#define glMultiTexCoord4dv_FORMAT FORMAT_void_GLenum_const_GLdouble___GENPT__
#define glMultiTexCoord4dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord4dv_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord4dvARB_INDEX 1379
#define glMultiTexCoord4dvARB_RETURN void
#define glMultiTexCoord4dvARB_ARG_NAMES target, v
#define glMultiTexCoord4dvARB_ARG_EXPAND GLenum target, const GLdouble * v
#define glMultiTexCoord4dvARB_PACKED PACKED_void_GLenum_const_GLdouble___GENPT__
#define glMultiTexCoord4dvARB_FORMAT FORMAT_void_GLenum_const_GLdouble___GENPT__
#define glMultiTexCoord4dvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord4dvARB_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord4f_INDEX 1380
#define glMultiTexCoord4f_RETURN void
#define glMultiTexCoord4f_ARG_NAMES target, s, t, r, q
#define glMultiTexCoord4f_ARG_EXPAND GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q
#define glMultiTexCoord4f_PACKED PACKED_void_GLenum_GLfloat_GLfloat_GLfloat_GLfloat
#define glMultiTexCoord4f_FORMAT FORMAT_void_GLenum_GLfloat_GLfloat_GLfloat_GLfloat
#define glMultiTexCoord4f_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord4f_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord4fARB_INDEX 1381
#define glMultiTexCoord4fARB_RETURN void
#define glMultiTexCoord4fARB_ARG_NAMES target, s, t, r, q
#define glMultiTexCoord4fARB_ARG_EXPAND GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q
#define glMultiTexCoord4fARB_PACKED PACKED_void_GLenum_GLfloat_GLfloat_GLfloat_GLfloat
#define glMultiTexCoord4fARB_FORMAT FORMAT_void_GLenum_GLfloat_GLfloat_GLfloat_GLfloat
#define glMultiTexCoord4fARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord4fARB_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord4fv_INDEX 1382
#define glMultiTexCoord4fv_RETURN void
#define glMultiTexCoord4fv_ARG_NAMES target, v
#define glMultiTexCoord4fv_ARG_EXPAND GLenum target, const GLfloat * v
#define glMultiTexCoord4fv_PACKED PACKED_void_GLenum_const_GLfloat___GENPT__
#define glMultiTexCoord4fv_FORMAT FORMAT_void_GLenum_const_GLfloat___GENPT__
#define glMultiTexCoord4fv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord4fv_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord4fvARB_INDEX 1383
#define glMultiTexCoord4fvARB_RETURN void
#define glMultiTexCoord4fvARB_ARG_NAMES target, v
#define glMultiTexCoord4fvARB_ARG_EXPAND GLenum target, const GLfloat * v
#define glMultiTexCoord4fvARB_PACKED PACKED_void_GLenum_const_GLfloat___GENPT__
#define glMultiTexCoord4fvARB_FORMAT FORMAT_void_GLenum_const_GLfloat___GENPT__
#define glMultiTexCoord4fvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord4fvARB_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord4hNV_INDEX 1384
#define glMultiTexCoord4hNV_RETURN void
#define glMultiTexCoord4hNV_ARG_NAMES target, s, t, r, q
#define glMultiTexCoord4hNV_ARG_EXPAND GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q
#define glMultiTexCoord4hNV_PACKED PACKED_void_GLenum_GLhalfNV_GLhalfNV_GLhalfNV_GLhalfNV
#define glMultiTexCoord4hNV_FORMAT FORMAT_void_GLenum_GLhalfNV_GLhalfNV_GLhalfNV_GLhalfNV
#define glMultiTexCoord4hNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord4hNV_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord4hvNV_INDEX 1385
#define glMultiTexCoord4hvNV_RETURN void
#define glMultiTexCoord4hvNV_ARG_NAMES target, v
#define glMultiTexCoord4hvNV_ARG_EXPAND GLenum target, const GLhalfNV * v
#define glMultiTexCoord4hvNV_PACKED PACKED_void_GLenum_const_GLhalfNV___GENPT__
#define glMultiTexCoord4hvNV_FORMAT FORMAT_void_GLenum_const_GLhalfNV___GENPT__
#define glMultiTexCoord4hvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord4hvNV_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord4i_INDEX 1386
#define glMultiTexCoord4i_RETURN void
#define glMultiTexCoord4i_ARG_NAMES target, s, t, r, q
#define glMultiTexCoord4i_ARG_EXPAND GLenum target, GLint s, GLint t, GLint r, GLint q
#define glMultiTexCoord4i_PACKED PACKED_void_GLenum_GLint_GLint_GLint_GLint
#define glMultiTexCoord4i_FORMAT FORMAT_void_GLenum_GLint_GLint_GLint_GLint
#define glMultiTexCoord4i_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord4i_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord4iARB_INDEX 1387
#define glMultiTexCoord4iARB_RETURN void
#define glMultiTexCoord4iARB_ARG_NAMES target, s, t, r, q
#define glMultiTexCoord4iARB_ARG_EXPAND GLenum target, GLint s, GLint t, GLint r, GLint q
#define glMultiTexCoord4iARB_PACKED PACKED_void_GLenum_GLint_GLint_GLint_GLint
#define glMultiTexCoord4iARB_FORMAT FORMAT_void_GLenum_GLint_GLint_GLint_GLint
#define glMultiTexCoord4iARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord4iARB_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord4iv_INDEX 1388
#define glMultiTexCoord4iv_RETURN void
#define glMultiTexCoord4iv_ARG_NAMES target, v
#define glMultiTexCoord4iv_ARG_EXPAND GLenum target, const GLint * v
#define glMultiTexCoord4iv_PACKED PACKED_void_GLenum_const_GLint___GENPT__
#define glMultiTexCoord4iv_FORMAT FORMAT_void_GLenum_const_GLint___GENPT__
#define glMultiTexCoord4iv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord4iv_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord4ivARB_INDEX 1389
#define glMultiTexCoord4ivARB_RETURN void
#define glMultiTexCoord4ivARB_ARG_NAMES target, v
#define glMultiTexCoord4ivARB_ARG_EXPAND GLenum target, const GLint * v
#define glMultiTexCoord4ivARB_PACKED PACKED_void_GLenum_const_GLint___GENPT__
#define glMultiTexCoord4ivARB_FORMAT FORMAT_void_GLenum_const_GLint___GENPT__
#define glMultiTexCoord4ivARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord4ivARB_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord4s_INDEX 1390
#define glMultiTexCoord4s_RETURN void
#define glMultiTexCoord4s_ARG_NAMES target, s, t, r, q
#define glMultiTexCoord4s_ARG_EXPAND GLenum target, GLshort s, GLshort t, GLshort r, GLshort q
#define glMultiTexCoord4s_PACKED PACKED_void_GLenum_GLshort_GLshort_GLshort_GLshort
#define glMultiTexCoord4s_FORMAT FORMAT_void_GLenum_GLshort_GLshort_GLshort_GLshort
#define glMultiTexCoord4s_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord4s_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord4sARB_INDEX 1391
#define glMultiTexCoord4sARB_RETURN void
#define glMultiTexCoord4sARB_ARG_NAMES target, s, t, r, q
#define glMultiTexCoord4sARB_ARG_EXPAND GLenum target, GLshort s, GLshort t, GLshort r, GLshort q
#define glMultiTexCoord4sARB_PACKED PACKED_void_GLenum_GLshort_GLshort_GLshort_GLshort
#define glMultiTexCoord4sARB_FORMAT FORMAT_void_GLenum_GLshort_GLshort_GLshort_GLshort
#define glMultiTexCoord4sARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord4sARB_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord4sv_INDEX 1392
#define glMultiTexCoord4sv_RETURN void
#define glMultiTexCoord4sv_ARG_NAMES target, v
#define glMultiTexCoord4sv_ARG_EXPAND GLenum target, const GLshort * v
#define glMultiTexCoord4sv_PACKED PACKED_void_GLenum_const_GLshort___GENPT__
#define glMultiTexCoord4sv_FORMAT FORMAT_void_GLenum_const_GLshort___GENPT__
#define glMultiTexCoord4sv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord4sv_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord4svARB_INDEX 1393
#define glMultiTexCoord4svARB_RETURN void
#define glMultiTexCoord4svARB_ARG_NAMES target, v
#define glMultiTexCoord4svARB_ARG_EXPAND GLenum target, const GLshort * v
#define glMultiTexCoord4svARB_PACKED PACKED_void_GLenum_const_GLshort___GENPT__
#define glMultiTexCoord4svARB_FORMAT FORMAT_void_GLenum_const_GLshort___GENPT__
#define glMultiTexCoord4svARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord4svARB_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord4x_INDEX 1394
#define glMultiTexCoord4x_RETURN void
#define glMultiTexCoord4x_ARG_NAMES target, s, t, r, q
#define glMultiTexCoord4x_ARG_EXPAND GLenum target, GLfixed s, GLfixed t, GLfixed r, GLfixed q
#define glMultiTexCoord4x_PACKED PACKED_void_GLenum_GLfixed_GLfixed_GLfixed_GLfixed
#define glMultiTexCoord4x_FORMAT FORMAT_void_GLenum_GLfixed_GLfixed_GLfixed_GLfixed
#define glMultiTexCoord4x_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord4x_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord4xOES_INDEX 1395
#define glMultiTexCoord4xOES_RETURN void
#define glMultiTexCoord4xOES_ARG_NAMES texture, s, t, r, q
#define glMultiTexCoord4xOES_ARG_EXPAND GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q
#define glMultiTexCoord4xOES_PACKED PACKED_void_GLenum_GLfixed_GLfixed_GLfixed_GLfixed
#define glMultiTexCoord4xOES_FORMAT FORMAT_void_GLenum_GLfixed_GLfixed_GLfixed_GLfixed
#define glMultiTexCoord4xOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord4xOES_NOT_VOID_WRAP(...) {}
#define glMultiTexCoord4xvOES_INDEX 1396
#define glMultiTexCoord4xvOES_RETURN void
#define glMultiTexCoord4xvOES_ARG_NAMES texture, coords
#define glMultiTexCoord4xvOES_ARG_EXPAND GLenum texture, const GLfixed * coords
#define glMultiTexCoord4xvOES_PACKED PACKED_void_GLenum_const_GLfixed___GENPT__
#define glMultiTexCoord4xvOES_FORMAT FORMAT_void_GLenum_const_GLfixed___GENPT__
#define glMultiTexCoord4xvOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoord4xvOES_NOT_VOID_WRAP(...) {}
#define glMultiTexCoordP1ui_INDEX 1397
#define glMultiTexCoordP1ui_RETURN void
#define glMultiTexCoordP1ui_ARG_NAMES texture, type, coords
#define glMultiTexCoordP1ui_ARG_EXPAND GLenum texture, GLenum type, GLuint coords
#define glMultiTexCoordP1ui_PACKED PACKED_void_GLenum_GLenum_GLuint
#define glMultiTexCoordP1ui_FORMAT FORMAT_void_GLenum_GLenum_GLuint
#define glMultiTexCoordP1ui_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoordP1ui_NOT_VOID_WRAP(...) {}
#define glMultiTexCoordP1uiv_INDEX 1398
#define glMultiTexCoordP1uiv_RETURN void
#define glMultiTexCoordP1uiv_ARG_NAMES texture, type, coords
#define glMultiTexCoordP1uiv_ARG_EXPAND GLenum texture, GLenum type, const GLuint * coords
#define glMultiTexCoordP1uiv_PACKED PACKED_void_GLenum_GLenum_const_GLuint___GENPT__
#define glMultiTexCoordP1uiv_FORMAT FORMAT_void_GLenum_GLenum_const_GLuint___GENPT__
#define glMultiTexCoordP1uiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoordP1uiv_NOT_VOID_WRAP(...) {}
#define glMultiTexCoordP2ui_INDEX 1399
#define glMultiTexCoordP2ui_RETURN void
#define glMultiTexCoordP2ui_ARG_NAMES texture, type, coords
#define glMultiTexCoordP2ui_ARG_EXPAND GLenum texture, GLenum type, GLuint coords
#define glMultiTexCoordP2ui_PACKED PACKED_void_GLenum_GLenum_GLuint
#define glMultiTexCoordP2ui_FORMAT FORMAT_void_GLenum_GLenum_GLuint
#define glMultiTexCoordP2ui_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoordP2ui_NOT_VOID_WRAP(...) {}
#define glMultiTexCoordP2uiv_INDEX 1400
#define glMultiTexCoordP2uiv_RETURN void
#define glMultiTexCoordP2uiv_ARG_NAMES texture, type, coords
#define glMultiTexCoordP2uiv_ARG_EXPAND GLenum texture, GLenum type, const GLuint * coords
#define glMultiTexCoordP2uiv_PACKED PACKED_void_GLenum_GLenum_const_GLuint___GENPT__
#define glMultiTexCoordP2uiv_FORMAT FORMAT_void_GLenum_GLenum_const_GLuint___GENPT__
#define glMultiTexCoordP2uiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoordP2uiv_NOT_VOID_WRAP(...) {}
#define glMultiTexCoordP3ui_INDEX 1401
#define glMultiTexCoordP3ui_RETURN void
#define glMultiTexCoordP3ui_ARG_NAMES texture, type, coords
#define glMultiTexCoordP3ui_ARG_EXPAND GLenum texture, GLenum type, GLuint coords
#define glMultiTexCoordP3ui_PACKED PACKED_void_GLenum_GLenum_GLuint
#define glMultiTexCoordP3ui_FORMAT FORMAT_void_GLenum_GLenum_GLuint
#define glMultiTexCoordP3ui_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoordP3ui_NOT_VOID_WRAP(...) {}
#define glMultiTexCoordP3uiv_INDEX 1402
#define glMultiTexCoordP3uiv_RETURN void
#define glMultiTexCoordP3uiv_ARG_NAMES texture, type, coords
#define glMultiTexCoordP3uiv_ARG_EXPAND GLenum texture, GLenum type, const GLuint * coords
#define glMultiTexCoordP3uiv_PACKED PACKED_void_GLenum_GLenum_const_GLuint___GENPT__
#define glMultiTexCoordP3uiv_FORMAT FORMAT_void_GLenum_GLenum_const_GLuint___GENPT__
#define glMultiTexCoordP3uiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoordP3uiv_NOT_VOID_WRAP(...) {}
#define glMultiTexCoordP4ui_INDEX 1403
#define glMultiTexCoordP4ui_RETURN void
#define glMultiTexCoordP4ui_ARG_NAMES texture, type, coords
#define glMultiTexCoordP4ui_ARG_EXPAND GLenum texture, GLenum type, GLuint coords
#define glMultiTexCoordP4ui_PACKED PACKED_void_GLenum_GLenum_GLuint
#define glMultiTexCoordP4ui_FORMAT FORMAT_void_GLenum_GLenum_GLuint
#define glMultiTexCoordP4ui_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoordP4ui_NOT_VOID_WRAP(...) {}
#define glMultiTexCoordP4uiv_INDEX 1404
#define glMultiTexCoordP4uiv_RETURN void
#define glMultiTexCoordP4uiv_ARG_NAMES texture, type, coords
#define glMultiTexCoordP4uiv_ARG_EXPAND GLenum texture, GLenum type, const GLuint * coords
#define glMultiTexCoordP4uiv_PACKED PACKED_void_GLenum_GLenum_const_GLuint___GENPT__
#define glMultiTexCoordP4uiv_FORMAT FORMAT_void_GLenum_GLenum_const_GLuint___GENPT__
#define glMultiTexCoordP4uiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoordP4uiv_NOT_VOID_WRAP(...) {}
#define glMultiTexCoordPointerEXT_INDEX 1405
#define glMultiTexCoordPointerEXT_RETURN void
#define glMultiTexCoordPointerEXT_ARG_NAMES texunit, size, type, stride, pointer
#define glMultiTexCoordPointerEXT_ARG_EXPAND GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLvoid * pointer
#define glMultiTexCoordPointerEXT_PACKED PACKED_void_GLenum_GLint_GLenum_GLsizei_const_GLvoid___GENPT__
#define glMultiTexCoordPointerEXT_FORMAT FORMAT_void_GLenum_GLint_GLenum_GLsizei_const_GLvoid___GENPT__
#define glMultiTexCoordPointerEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexCoordPointerEXT_NOT_VOID_WRAP(...) {}
#define glMultiTexEnvfEXT_INDEX 1406
#define glMultiTexEnvfEXT_RETURN void
#define glMultiTexEnvfEXT_ARG_NAMES texunit, target, pname, param
#define glMultiTexEnvfEXT_ARG_EXPAND GLenum texunit, GLenum target, GLenum pname, GLfloat param
#define glMultiTexEnvfEXT_PACKED PACKED_void_GLenum_GLenum_GLenum_GLfloat
#define glMultiTexEnvfEXT_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLfloat
#define glMultiTexEnvfEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexEnvfEXT_NOT_VOID_WRAP(...) {}
#define glMultiTexEnvfvEXT_INDEX 1407
#define glMultiTexEnvfvEXT_RETURN void
#define glMultiTexEnvfvEXT_ARG_NAMES texunit, target, pname, params
#define glMultiTexEnvfvEXT_ARG_EXPAND GLenum texunit, GLenum target, GLenum pname, const GLfloat * params
#define glMultiTexEnvfvEXT_PACKED PACKED_void_GLenum_GLenum_GLenum_const_GLfloat___GENPT__
#define glMultiTexEnvfvEXT_FORMAT FORMAT_void_GLenum_GLenum_GLenum_const_GLfloat___GENPT__
#define glMultiTexEnvfvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexEnvfvEXT_NOT_VOID_WRAP(...) {}
#define glMultiTexEnviEXT_INDEX 1408
#define glMultiTexEnviEXT_RETURN void
#define glMultiTexEnviEXT_ARG_NAMES texunit, target, pname, param
#define glMultiTexEnviEXT_ARG_EXPAND GLenum texunit, GLenum target, GLenum pname, GLint param
#define glMultiTexEnviEXT_PACKED PACKED_void_GLenum_GLenum_GLenum_GLint
#define glMultiTexEnviEXT_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLint
#define glMultiTexEnviEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexEnviEXT_NOT_VOID_WRAP(...) {}
#define glMultiTexEnvivEXT_INDEX 1409
#define glMultiTexEnvivEXT_RETURN void
#define glMultiTexEnvivEXT_ARG_NAMES texunit, target, pname, params
#define glMultiTexEnvivEXT_ARG_EXPAND GLenum texunit, GLenum target, GLenum pname, const GLint * params
#define glMultiTexEnvivEXT_PACKED PACKED_void_GLenum_GLenum_GLenum_const_GLint___GENPT__
#define glMultiTexEnvivEXT_FORMAT FORMAT_void_GLenum_GLenum_GLenum_const_GLint___GENPT__
#define glMultiTexEnvivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexEnvivEXT_NOT_VOID_WRAP(...) {}
#define glMultiTexGendEXT_INDEX 1410
#define glMultiTexGendEXT_RETURN void
#define glMultiTexGendEXT_ARG_NAMES texunit, coord, pname, param
#define glMultiTexGendEXT_ARG_EXPAND GLenum texunit, GLenum coord, GLenum pname, GLdouble param
#define glMultiTexGendEXT_PACKED PACKED_void_GLenum_GLenum_GLenum_GLdouble
#define glMultiTexGendEXT_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLdouble
#define glMultiTexGendEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexGendEXT_NOT_VOID_WRAP(...) {}
#define glMultiTexGendvEXT_INDEX 1411
#define glMultiTexGendvEXT_RETURN void
#define glMultiTexGendvEXT_ARG_NAMES texunit, coord, pname, params
#define glMultiTexGendvEXT_ARG_EXPAND GLenum texunit, GLenum coord, GLenum pname, const GLdouble * params
#define glMultiTexGendvEXT_PACKED PACKED_void_GLenum_GLenum_GLenum_const_GLdouble___GENPT__
#define glMultiTexGendvEXT_FORMAT FORMAT_void_GLenum_GLenum_GLenum_const_GLdouble___GENPT__
#define glMultiTexGendvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexGendvEXT_NOT_VOID_WRAP(...) {}
#define glMultiTexGenfEXT_INDEX 1412
#define glMultiTexGenfEXT_RETURN void
#define glMultiTexGenfEXT_ARG_NAMES texunit, coord, pname, param
#define glMultiTexGenfEXT_ARG_EXPAND GLenum texunit, GLenum coord, GLenum pname, GLfloat param
#define glMultiTexGenfEXT_PACKED PACKED_void_GLenum_GLenum_GLenum_GLfloat
#define glMultiTexGenfEXT_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLfloat
#define glMultiTexGenfEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexGenfEXT_NOT_VOID_WRAP(...) {}
#define glMultiTexGenfvEXT_INDEX 1413
#define glMultiTexGenfvEXT_RETURN void
#define glMultiTexGenfvEXT_ARG_NAMES texunit, coord, pname, params
#define glMultiTexGenfvEXT_ARG_EXPAND GLenum texunit, GLenum coord, GLenum pname, const GLfloat * params
#define glMultiTexGenfvEXT_PACKED PACKED_void_GLenum_GLenum_GLenum_const_GLfloat___GENPT__
#define glMultiTexGenfvEXT_FORMAT FORMAT_void_GLenum_GLenum_GLenum_const_GLfloat___GENPT__
#define glMultiTexGenfvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexGenfvEXT_NOT_VOID_WRAP(...) {}
#define glMultiTexGeniEXT_INDEX 1414
#define glMultiTexGeniEXT_RETURN void
#define glMultiTexGeniEXT_ARG_NAMES texunit, coord, pname, param
#define glMultiTexGeniEXT_ARG_EXPAND GLenum texunit, GLenum coord, GLenum pname, GLint param
#define glMultiTexGeniEXT_PACKED PACKED_void_GLenum_GLenum_GLenum_GLint
#define glMultiTexGeniEXT_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLint
#define glMultiTexGeniEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexGeniEXT_NOT_VOID_WRAP(...) {}
#define glMultiTexGenivEXT_INDEX 1415
#define glMultiTexGenivEXT_RETURN void
#define glMultiTexGenivEXT_ARG_NAMES texunit, coord, pname, params
#define glMultiTexGenivEXT_ARG_EXPAND GLenum texunit, GLenum coord, GLenum pname, const GLint * params
#define glMultiTexGenivEXT_PACKED PACKED_void_GLenum_GLenum_GLenum_const_GLint___GENPT__
#define glMultiTexGenivEXT_FORMAT FORMAT_void_GLenum_GLenum_GLenum_const_GLint___GENPT__
#define glMultiTexGenivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexGenivEXT_NOT_VOID_WRAP(...) {}
#define glMultiTexImage1DEXT_INDEX 1416
#define glMultiTexImage1DEXT_RETURN void
#define glMultiTexImage1DEXT_ARG_NAMES texunit, target, level, internalformat, width, border, format, type, pixels
#define glMultiTexImage1DEXT_ARG_EXPAND GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid * pixels
#define glMultiTexImage1DEXT_PACKED PACKED_void_GLenum_GLenum_GLint_GLenum_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__
#define glMultiTexImage1DEXT_FORMAT FORMAT_void_GLenum_GLenum_GLint_GLenum_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__
#define glMultiTexImage1DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexImage1DEXT_NOT_VOID_WRAP(...) {}
#define glMultiTexImage2DEXT_INDEX 1417
#define glMultiTexImage2DEXT_RETURN void
#define glMultiTexImage2DEXT_ARG_NAMES texunit, target, level, internalformat, width, height, border, format, type, pixels
#define glMultiTexImage2DEXT_ARG_EXPAND GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid * pixels
#define glMultiTexImage2DEXT_PACKED PACKED_void_GLenum_GLenum_GLint_GLenum_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__
#define glMultiTexImage2DEXT_FORMAT FORMAT_void_GLenum_GLenum_GLint_GLenum_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__
#define glMultiTexImage2DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexImage2DEXT_NOT_VOID_WRAP(...) {}
#define glMultiTexImage3DEXT_INDEX 1418
#define glMultiTexImage3DEXT_RETURN void
#define glMultiTexImage3DEXT_ARG_NAMES texunit, target, level, internalformat, width, height, depth, border, format, type, pixels
#define glMultiTexImage3DEXT_ARG_EXPAND GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid * pixels
#define glMultiTexImage3DEXT_PACKED PACKED_void_GLenum_GLenum_GLint_GLenum_GLsizei_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__
#define glMultiTexImage3DEXT_FORMAT FORMAT_void_GLenum_GLenum_GLint_GLenum_GLsizei_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__
#define glMultiTexImage3DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexImage3DEXT_NOT_VOID_WRAP(...) {}
#define glMultiTexParameterIivEXT_INDEX 1419
#define glMultiTexParameterIivEXT_RETURN void
#define glMultiTexParameterIivEXT_ARG_NAMES texunit, target, pname, params
#define glMultiTexParameterIivEXT_ARG_EXPAND GLenum texunit, GLenum target, GLenum pname, const GLint * params
#define glMultiTexParameterIivEXT_PACKED PACKED_void_GLenum_GLenum_GLenum_const_GLint___GENPT__
#define glMultiTexParameterIivEXT_FORMAT FORMAT_void_GLenum_GLenum_GLenum_const_GLint___GENPT__
#define glMultiTexParameterIivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexParameterIivEXT_NOT_VOID_WRAP(...) {}
#define glMultiTexParameterIuivEXT_INDEX 1420
#define glMultiTexParameterIuivEXT_RETURN void
#define glMultiTexParameterIuivEXT_ARG_NAMES texunit, target, pname, params
#define glMultiTexParameterIuivEXT_ARG_EXPAND GLenum texunit, GLenum target, GLenum pname, const GLuint * params
#define glMultiTexParameterIuivEXT_PACKED PACKED_void_GLenum_GLenum_GLenum_const_GLuint___GENPT__
#define glMultiTexParameterIuivEXT_FORMAT FORMAT_void_GLenum_GLenum_GLenum_const_GLuint___GENPT__
#define glMultiTexParameterIuivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexParameterIuivEXT_NOT_VOID_WRAP(...) {}
#define glMultiTexParameterfEXT_INDEX 1421
#define glMultiTexParameterfEXT_RETURN void
#define glMultiTexParameterfEXT_ARG_NAMES texunit, target, pname, param
#define glMultiTexParameterfEXT_ARG_EXPAND GLenum texunit, GLenum target, GLenum pname, GLfloat param
#define glMultiTexParameterfEXT_PACKED PACKED_void_GLenum_GLenum_GLenum_GLfloat
#define glMultiTexParameterfEXT_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLfloat
#define glMultiTexParameterfEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexParameterfEXT_NOT_VOID_WRAP(...) {}
#define glMultiTexParameterfvEXT_INDEX 1422
#define glMultiTexParameterfvEXT_RETURN void
#define glMultiTexParameterfvEXT_ARG_NAMES texunit, target, pname, params
#define glMultiTexParameterfvEXT_ARG_EXPAND GLenum texunit, GLenum target, GLenum pname, const GLfloat * params
#define glMultiTexParameterfvEXT_PACKED PACKED_void_GLenum_GLenum_GLenum_const_GLfloat___GENPT__
#define glMultiTexParameterfvEXT_FORMAT FORMAT_void_GLenum_GLenum_GLenum_const_GLfloat___GENPT__
#define glMultiTexParameterfvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexParameterfvEXT_NOT_VOID_WRAP(...) {}
#define glMultiTexParameteriEXT_INDEX 1423
#define glMultiTexParameteriEXT_RETURN void
#define glMultiTexParameteriEXT_ARG_NAMES texunit, target, pname, param
#define glMultiTexParameteriEXT_ARG_EXPAND GLenum texunit, GLenum target, GLenum pname, GLint param
#define glMultiTexParameteriEXT_PACKED PACKED_void_GLenum_GLenum_GLenum_GLint
#define glMultiTexParameteriEXT_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLint
#define glMultiTexParameteriEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexParameteriEXT_NOT_VOID_WRAP(...) {}
#define glMultiTexParameterivEXT_INDEX 1424
#define glMultiTexParameterivEXT_RETURN void
#define glMultiTexParameterivEXT_ARG_NAMES texunit, target, pname, params
#define glMultiTexParameterivEXT_ARG_EXPAND GLenum texunit, GLenum target, GLenum pname, const GLint * params
#define glMultiTexParameterivEXT_PACKED PACKED_void_GLenum_GLenum_GLenum_const_GLint___GENPT__
#define glMultiTexParameterivEXT_FORMAT FORMAT_void_GLenum_GLenum_GLenum_const_GLint___GENPT__
#define glMultiTexParameterivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexParameterivEXT_NOT_VOID_WRAP(...) {}
#define glMultiTexRenderbufferEXT_INDEX 1425
#define glMultiTexRenderbufferEXT_RETURN void
#define glMultiTexRenderbufferEXT_ARG_NAMES texunit, target, renderbuffer
#define glMultiTexRenderbufferEXT_ARG_EXPAND GLenum texunit, GLenum target, GLuint renderbuffer
#define glMultiTexRenderbufferEXT_PACKED PACKED_void_GLenum_GLenum_GLuint
#define glMultiTexRenderbufferEXT_FORMAT FORMAT_void_GLenum_GLenum_GLuint
#define glMultiTexRenderbufferEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexRenderbufferEXT_NOT_VOID_WRAP(...) {}
#define glMultiTexSubImage1DEXT_INDEX 1426
#define glMultiTexSubImage1DEXT_RETURN void
#define glMultiTexSubImage1DEXT_ARG_NAMES texunit, target, level, xoffset, width, format, type, pixels
#define glMultiTexSubImage1DEXT_ARG_EXPAND GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid * pixels
#define glMultiTexSubImage1DEXT_PACKED PACKED_void_GLenum_GLenum_GLint_GLint_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__
#define glMultiTexSubImage1DEXT_FORMAT FORMAT_void_GLenum_GLenum_GLint_GLint_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__
#define glMultiTexSubImage1DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexSubImage1DEXT_NOT_VOID_WRAP(...) {}
#define glMultiTexSubImage2DEXT_INDEX 1427
#define glMultiTexSubImage2DEXT_RETURN void
#define glMultiTexSubImage2DEXT_ARG_NAMES texunit, target, level, xoffset, yoffset, width, height, format, type, pixels
#define glMultiTexSubImage2DEXT_ARG_EXPAND GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * pixels
#define glMultiTexSubImage2DEXT_PACKED PACKED_void_GLenum_GLenum_GLint_GLint_GLint_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__
#define glMultiTexSubImage2DEXT_FORMAT FORMAT_void_GLenum_GLenum_GLint_GLint_GLint_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__
#define glMultiTexSubImage2DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexSubImage2DEXT_NOT_VOID_WRAP(...) {}
#define glMultiTexSubImage3DEXT_INDEX 1428
#define glMultiTexSubImage3DEXT_RETURN void
#define glMultiTexSubImage3DEXT_ARG_NAMES texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels
#define glMultiTexSubImage3DEXT_ARG_EXPAND GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid * pixels
#define glMultiTexSubImage3DEXT_PACKED PACKED_void_GLenum_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__
#define glMultiTexSubImage3DEXT_FORMAT FORMAT_void_GLenum_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__
#define glMultiTexSubImage3DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glMultiTexSubImage3DEXT_NOT_VOID_WRAP(...) {}
#define glNamedBufferDataEXT_INDEX 1429
#define glNamedBufferDataEXT_RETURN void
#define glNamedBufferDataEXT_ARG_NAMES buffer, size, data, usage
#define glNamedBufferDataEXT_ARG_EXPAND GLuint buffer, GLsizeiptr size, const GLvoid * data, GLenum usage
#define glNamedBufferDataEXT_PACKED PACKED_void_GLuint_GLsizeiptr_const_GLvoid___GENPT___GLenum
#define glNamedBufferDataEXT_FORMAT FORMAT_void_GLuint_GLsizeiptr_const_GLvoid___GENPT___GLenum
#define glNamedBufferDataEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNamedBufferDataEXT_NOT_VOID_WRAP(...) {}
#define glNamedBufferSubDataEXT_INDEX 1430
#define glNamedBufferSubDataEXT_RETURN void
#define glNamedBufferSubDataEXT_ARG_NAMES buffer, offset, size, data
#define glNamedBufferSubDataEXT_ARG_EXPAND GLuint buffer, GLintptr offset, GLsizeiptr size, const GLvoid * data
#define glNamedBufferSubDataEXT_PACKED PACKED_void_GLuint_GLintptr_GLsizeiptr_const_GLvoid___GENPT__
#define glNamedBufferSubDataEXT_FORMAT FORMAT_void_GLuint_GLintptr_GLsizeiptr_const_GLvoid___GENPT__
#define glNamedBufferSubDataEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNamedBufferSubDataEXT_NOT_VOID_WRAP(...) {}
#define glNamedCopyBufferSubDataEXT_INDEX 1431
#define glNamedCopyBufferSubDataEXT_RETURN void
#define glNamedCopyBufferSubDataEXT_ARG_NAMES readBuffer, writeBuffer, readOffset, writeOffset, size
#define glNamedCopyBufferSubDataEXT_ARG_EXPAND GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size
#define glNamedCopyBufferSubDataEXT_PACKED PACKED_void_GLuint_GLuint_GLintptr_GLintptr_GLsizeiptr
#define glNamedCopyBufferSubDataEXT_FORMAT FORMAT_void_GLuint_GLuint_GLintptr_GLintptr_GLsizeiptr
#define glNamedCopyBufferSubDataEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNamedCopyBufferSubDataEXT_NOT_VOID_WRAP(...) {}
#define glNamedFramebufferParameteriEXT_INDEX 1432
#define glNamedFramebufferParameteriEXT_RETURN void
#define glNamedFramebufferParameteriEXT_ARG_NAMES framebuffer, pname, param
#define glNamedFramebufferParameteriEXT_ARG_EXPAND GLuint framebuffer, GLenum pname, GLint param
#define glNamedFramebufferParameteriEXT_PACKED PACKED_void_GLuint_GLenum_GLint
#define glNamedFramebufferParameteriEXT_FORMAT FORMAT_void_GLuint_GLenum_GLint
#define glNamedFramebufferParameteriEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNamedFramebufferParameteriEXT_NOT_VOID_WRAP(...) {}
#define glNamedFramebufferRenderbufferEXT_INDEX 1433
#define glNamedFramebufferRenderbufferEXT_RETURN void
#define glNamedFramebufferRenderbufferEXT_ARG_NAMES framebuffer, attachment, renderbuffertarget, renderbuffer
#define glNamedFramebufferRenderbufferEXT_ARG_EXPAND GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer
#define glNamedFramebufferRenderbufferEXT_PACKED PACKED_void_GLuint_GLenum_GLenum_GLuint
#define glNamedFramebufferRenderbufferEXT_FORMAT FORMAT_void_GLuint_GLenum_GLenum_GLuint
#define glNamedFramebufferRenderbufferEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNamedFramebufferRenderbufferEXT_NOT_VOID_WRAP(...) {}
#define glNamedFramebufferTexture1DEXT_INDEX 1434
#define glNamedFramebufferTexture1DEXT_RETURN void
#define glNamedFramebufferTexture1DEXT_ARG_NAMES framebuffer, attachment, textarget, texture, level
#define glNamedFramebufferTexture1DEXT_ARG_EXPAND GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level
#define glNamedFramebufferTexture1DEXT_PACKED PACKED_void_GLuint_GLenum_GLenum_GLuint_GLint
#define glNamedFramebufferTexture1DEXT_FORMAT FORMAT_void_GLuint_GLenum_GLenum_GLuint_GLint
#define glNamedFramebufferTexture1DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNamedFramebufferTexture1DEXT_NOT_VOID_WRAP(...) {}
#define glNamedFramebufferTexture2DEXT_INDEX 1435
#define glNamedFramebufferTexture2DEXT_RETURN void
#define glNamedFramebufferTexture2DEXT_ARG_NAMES framebuffer, attachment, textarget, texture, level
#define glNamedFramebufferTexture2DEXT_ARG_EXPAND GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level
#define glNamedFramebufferTexture2DEXT_PACKED PACKED_void_GLuint_GLenum_GLenum_GLuint_GLint
#define glNamedFramebufferTexture2DEXT_FORMAT FORMAT_void_GLuint_GLenum_GLenum_GLuint_GLint
#define glNamedFramebufferTexture2DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNamedFramebufferTexture2DEXT_NOT_VOID_WRAP(...) {}
#define glNamedFramebufferTexture3DEXT_INDEX 1436
#define glNamedFramebufferTexture3DEXT_RETURN void
#define glNamedFramebufferTexture3DEXT_ARG_NAMES framebuffer, attachment, textarget, texture, level, zoffset
#define glNamedFramebufferTexture3DEXT_ARG_EXPAND GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset
#define glNamedFramebufferTexture3DEXT_PACKED PACKED_void_GLuint_GLenum_GLenum_GLuint_GLint_GLint
#define glNamedFramebufferTexture3DEXT_FORMAT FORMAT_void_GLuint_GLenum_GLenum_GLuint_GLint_GLint
#define glNamedFramebufferTexture3DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNamedFramebufferTexture3DEXT_NOT_VOID_WRAP(...) {}
#define glNamedFramebufferTextureEXT_INDEX 1437
#define glNamedFramebufferTextureEXT_RETURN void
#define glNamedFramebufferTextureEXT_ARG_NAMES framebuffer, attachment, texture, level
#define glNamedFramebufferTextureEXT_ARG_EXPAND GLuint framebuffer, GLenum attachment, GLuint texture, GLint level
#define glNamedFramebufferTextureEXT_PACKED PACKED_void_GLuint_GLenum_GLuint_GLint
#define glNamedFramebufferTextureEXT_FORMAT FORMAT_void_GLuint_GLenum_GLuint_GLint
#define glNamedFramebufferTextureEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNamedFramebufferTextureEXT_NOT_VOID_WRAP(...) {}
#define glNamedFramebufferTextureFaceEXT_INDEX 1438
#define glNamedFramebufferTextureFaceEXT_RETURN void
#define glNamedFramebufferTextureFaceEXT_ARG_NAMES framebuffer, attachment, texture, level, face
#define glNamedFramebufferTextureFaceEXT_ARG_EXPAND GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face
#define glNamedFramebufferTextureFaceEXT_PACKED PACKED_void_GLuint_GLenum_GLuint_GLint_GLenum
#define glNamedFramebufferTextureFaceEXT_FORMAT FORMAT_void_GLuint_GLenum_GLuint_GLint_GLenum
#define glNamedFramebufferTextureFaceEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNamedFramebufferTextureFaceEXT_NOT_VOID_WRAP(...) {}
#define glNamedFramebufferTextureLayerEXT_INDEX 1439
#define glNamedFramebufferTextureLayerEXT_RETURN void
#define glNamedFramebufferTextureLayerEXT_ARG_NAMES framebuffer, attachment, texture, level, layer
#define glNamedFramebufferTextureLayerEXT_ARG_EXPAND GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer
#define glNamedFramebufferTextureLayerEXT_PACKED PACKED_void_GLuint_GLenum_GLuint_GLint_GLint
#define glNamedFramebufferTextureLayerEXT_FORMAT FORMAT_void_GLuint_GLenum_GLuint_GLint_GLint
#define glNamedFramebufferTextureLayerEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNamedFramebufferTextureLayerEXT_NOT_VOID_WRAP(...) {}
#define glNamedProgramLocalParameter4dEXT_INDEX 1440
#define glNamedProgramLocalParameter4dEXT_RETURN void
#define glNamedProgramLocalParameter4dEXT_ARG_NAMES program, target, index, x, y, z, w
#define glNamedProgramLocalParameter4dEXT_ARG_EXPAND GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w
#define glNamedProgramLocalParameter4dEXT_PACKED PACKED_void_GLuint_GLenum_GLuint_GLdouble_GLdouble_GLdouble_GLdouble
#define glNamedProgramLocalParameter4dEXT_FORMAT FORMAT_void_GLuint_GLenum_GLuint_GLdouble_GLdouble_GLdouble_GLdouble
#define glNamedProgramLocalParameter4dEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNamedProgramLocalParameter4dEXT_NOT_VOID_WRAP(...) {}
#define glNamedProgramLocalParameter4dvEXT_INDEX 1441
#define glNamedProgramLocalParameter4dvEXT_RETURN void
#define glNamedProgramLocalParameter4dvEXT_ARG_NAMES program, target, index, params
#define glNamedProgramLocalParameter4dvEXT_ARG_EXPAND GLuint program, GLenum target, GLuint index, const GLdouble * params
#define glNamedProgramLocalParameter4dvEXT_PACKED PACKED_void_GLuint_GLenum_GLuint_const_GLdouble___GENPT__
#define glNamedProgramLocalParameter4dvEXT_FORMAT FORMAT_void_GLuint_GLenum_GLuint_const_GLdouble___GENPT__
#define glNamedProgramLocalParameter4dvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNamedProgramLocalParameter4dvEXT_NOT_VOID_WRAP(...) {}
#define glNamedProgramLocalParameter4fEXT_INDEX 1442
#define glNamedProgramLocalParameter4fEXT_RETURN void
#define glNamedProgramLocalParameter4fEXT_ARG_NAMES program, target, index, x, y, z, w
#define glNamedProgramLocalParameter4fEXT_ARG_EXPAND GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w
#define glNamedProgramLocalParameter4fEXT_PACKED PACKED_void_GLuint_GLenum_GLuint_GLfloat_GLfloat_GLfloat_GLfloat
#define glNamedProgramLocalParameter4fEXT_FORMAT FORMAT_void_GLuint_GLenum_GLuint_GLfloat_GLfloat_GLfloat_GLfloat
#define glNamedProgramLocalParameter4fEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNamedProgramLocalParameter4fEXT_NOT_VOID_WRAP(...) {}
#define glNamedProgramLocalParameter4fvEXT_INDEX 1443
#define glNamedProgramLocalParameter4fvEXT_RETURN void
#define glNamedProgramLocalParameter4fvEXT_ARG_NAMES program, target, index, params
#define glNamedProgramLocalParameter4fvEXT_ARG_EXPAND GLuint program, GLenum target, GLuint index, const GLfloat * params
#define glNamedProgramLocalParameter4fvEXT_PACKED PACKED_void_GLuint_GLenum_GLuint_const_GLfloat___GENPT__
#define glNamedProgramLocalParameter4fvEXT_FORMAT FORMAT_void_GLuint_GLenum_GLuint_const_GLfloat___GENPT__
#define glNamedProgramLocalParameter4fvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNamedProgramLocalParameter4fvEXT_NOT_VOID_WRAP(...) {}
#define glNamedProgramLocalParameterI4iEXT_INDEX 1444
#define glNamedProgramLocalParameterI4iEXT_RETURN void
#define glNamedProgramLocalParameterI4iEXT_ARG_NAMES program, target, index, x, y, z, w
#define glNamedProgramLocalParameterI4iEXT_ARG_EXPAND GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w
#define glNamedProgramLocalParameterI4iEXT_PACKED PACKED_void_GLuint_GLenum_GLuint_GLint_GLint_GLint_GLint
#define glNamedProgramLocalParameterI4iEXT_FORMAT FORMAT_void_GLuint_GLenum_GLuint_GLint_GLint_GLint_GLint
#define glNamedProgramLocalParameterI4iEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNamedProgramLocalParameterI4iEXT_NOT_VOID_WRAP(...) {}
#define glNamedProgramLocalParameterI4ivEXT_INDEX 1445
#define glNamedProgramLocalParameterI4ivEXT_RETURN void
#define glNamedProgramLocalParameterI4ivEXT_ARG_NAMES program, target, index, params
#define glNamedProgramLocalParameterI4ivEXT_ARG_EXPAND GLuint program, GLenum target, GLuint index, const GLint * params
#define glNamedProgramLocalParameterI4ivEXT_PACKED PACKED_void_GLuint_GLenum_GLuint_const_GLint___GENPT__
#define glNamedProgramLocalParameterI4ivEXT_FORMAT FORMAT_void_GLuint_GLenum_GLuint_const_GLint___GENPT__
#define glNamedProgramLocalParameterI4ivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNamedProgramLocalParameterI4ivEXT_NOT_VOID_WRAP(...) {}
#define glNamedProgramLocalParameterI4uiEXT_INDEX 1446
#define glNamedProgramLocalParameterI4uiEXT_RETURN void
#define glNamedProgramLocalParameterI4uiEXT_ARG_NAMES program, target, index, x, y, z, w
#define glNamedProgramLocalParameterI4uiEXT_ARG_EXPAND GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w
#define glNamedProgramLocalParameterI4uiEXT_PACKED PACKED_void_GLuint_GLenum_GLuint_GLuint_GLuint_GLuint_GLuint
#define glNamedProgramLocalParameterI4uiEXT_FORMAT FORMAT_void_GLuint_GLenum_GLuint_GLuint_GLuint_GLuint_GLuint
#define glNamedProgramLocalParameterI4uiEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNamedProgramLocalParameterI4uiEXT_NOT_VOID_WRAP(...) {}
#define glNamedProgramLocalParameterI4uivEXT_INDEX 1447
#define glNamedProgramLocalParameterI4uivEXT_RETURN void
#define glNamedProgramLocalParameterI4uivEXT_ARG_NAMES program, target, index, params
#define glNamedProgramLocalParameterI4uivEXT_ARG_EXPAND GLuint program, GLenum target, GLuint index, const GLuint * params
#define glNamedProgramLocalParameterI4uivEXT_PACKED PACKED_void_GLuint_GLenum_GLuint_const_GLuint___GENPT__
#define glNamedProgramLocalParameterI4uivEXT_FORMAT FORMAT_void_GLuint_GLenum_GLuint_const_GLuint___GENPT__
#define glNamedProgramLocalParameterI4uivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNamedProgramLocalParameterI4uivEXT_NOT_VOID_WRAP(...) {}
#define glNamedProgramLocalParameters4fvEXT_INDEX 1448
#define glNamedProgramLocalParameters4fvEXT_RETURN void
#define glNamedProgramLocalParameters4fvEXT_ARG_NAMES program, target, index, count, params
#define glNamedProgramLocalParameters4fvEXT_ARG_EXPAND GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat * params
#define glNamedProgramLocalParameters4fvEXT_PACKED PACKED_void_GLuint_GLenum_GLuint_GLsizei_const_GLfloat___GENPT__
#define glNamedProgramLocalParameters4fvEXT_FORMAT FORMAT_void_GLuint_GLenum_GLuint_GLsizei_const_GLfloat___GENPT__
#define glNamedProgramLocalParameters4fvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNamedProgramLocalParameters4fvEXT_NOT_VOID_WRAP(...) {}
#define glNamedProgramLocalParametersI4ivEXT_INDEX 1449
#define glNamedProgramLocalParametersI4ivEXT_RETURN void
#define glNamedProgramLocalParametersI4ivEXT_ARG_NAMES program, target, index, count, params
#define glNamedProgramLocalParametersI4ivEXT_ARG_EXPAND GLuint program, GLenum target, GLuint index, GLsizei count, const GLint * params
#define glNamedProgramLocalParametersI4ivEXT_PACKED PACKED_void_GLuint_GLenum_GLuint_GLsizei_const_GLint___GENPT__
#define glNamedProgramLocalParametersI4ivEXT_FORMAT FORMAT_void_GLuint_GLenum_GLuint_GLsizei_const_GLint___GENPT__
#define glNamedProgramLocalParametersI4ivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNamedProgramLocalParametersI4ivEXT_NOT_VOID_WRAP(...) {}
#define glNamedProgramLocalParametersI4uivEXT_INDEX 1450
#define glNamedProgramLocalParametersI4uivEXT_RETURN void
#define glNamedProgramLocalParametersI4uivEXT_ARG_NAMES program, target, index, count, params
#define glNamedProgramLocalParametersI4uivEXT_ARG_EXPAND GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint * params
#define glNamedProgramLocalParametersI4uivEXT_PACKED PACKED_void_GLuint_GLenum_GLuint_GLsizei_const_GLuint___GENPT__
#define glNamedProgramLocalParametersI4uivEXT_FORMAT FORMAT_void_GLuint_GLenum_GLuint_GLsizei_const_GLuint___GENPT__
#define glNamedProgramLocalParametersI4uivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNamedProgramLocalParametersI4uivEXT_NOT_VOID_WRAP(...) {}
#define glNamedProgramStringEXT_INDEX 1451
#define glNamedProgramStringEXT_RETURN void
#define glNamedProgramStringEXT_ARG_NAMES program, target, format, len, string
#define glNamedProgramStringEXT_ARG_EXPAND GLuint program, GLenum target, GLenum format, GLsizei len, const GLvoid * string
#define glNamedProgramStringEXT_PACKED PACKED_void_GLuint_GLenum_GLenum_GLsizei_const_GLvoid___GENPT__
#define glNamedProgramStringEXT_FORMAT FORMAT_void_GLuint_GLenum_GLenum_GLsizei_const_GLvoid___GENPT__
#define glNamedProgramStringEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNamedProgramStringEXT_NOT_VOID_WRAP(...) {}
#define glNamedRenderbufferStorageEXT_INDEX 1452
#define glNamedRenderbufferStorageEXT_RETURN void
#define glNamedRenderbufferStorageEXT_ARG_NAMES renderbuffer, internalformat, width, height
#define glNamedRenderbufferStorageEXT_ARG_EXPAND GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height
#define glNamedRenderbufferStorageEXT_PACKED PACKED_void_GLuint_GLenum_GLsizei_GLsizei
#define glNamedRenderbufferStorageEXT_FORMAT FORMAT_void_GLuint_GLenum_GLsizei_GLsizei
#define glNamedRenderbufferStorageEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNamedRenderbufferStorageEXT_NOT_VOID_WRAP(...) {}
#define glNamedRenderbufferStorageMultisampleCoverageEXT_INDEX 1453
#define glNamedRenderbufferStorageMultisampleCoverageEXT_RETURN void
#define glNamedRenderbufferStorageMultisampleCoverageEXT_ARG_NAMES renderbuffer, coverageSamples, colorSamples, internalformat, width, height
#define glNamedRenderbufferStorageMultisampleCoverageEXT_ARG_EXPAND GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height
#define glNamedRenderbufferStorageMultisampleCoverageEXT_PACKED PACKED_void_GLuint_GLsizei_GLsizei_GLenum_GLsizei_GLsizei
#define glNamedRenderbufferStorageMultisampleCoverageEXT_FORMAT FORMAT_void_GLuint_GLsizei_GLsizei_GLenum_GLsizei_GLsizei
#define glNamedRenderbufferStorageMultisampleCoverageEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNamedRenderbufferStorageMultisampleCoverageEXT_NOT_VOID_WRAP(...) {}
#define glNamedRenderbufferStorageMultisampleEXT_INDEX 1454
#define glNamedRenderbufferStorageMultisampleEXT_RETURN void
#define glNamedRenderbufferStorageMultisampleEXT_ARG_NAMES renderbuffer, samples, internalformat, width, height
#define glNamedRenderbufferStorageMultisampleEXT_ARG_EXPAND GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height
#define glNamedRenderbufferStorageMultisampleEXT_PACKED PACKED_void_GLuint_GLsizei_GLenum_GLsizei_GLsizei
#define glNamedRenderbufferStorageMultisampleEXT_FORMAT FORMAT_void_GLuint_GLsizei_GLenum_GLsizei_GLsizei
#define glNamedRenderbufferStorageMultisampleEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNamedRenderbufferStorageMultisampleEXT_NOT_VOID_WRAP(...) {}
#define glNamedStringARB_INDEX 1455
#define glNamedStringARB_RETURN void
#define glNamedStringARB_ARG_NAMES type, namelen, name, stringlen, string
#define glNamedStringARB_ARG_EXPAND GLenum type, GLint namelen, const GLchar * name, GLint stringlen, const GLchar * string
#define glNamedStringARB_PACKED PACKED_void_GLenum_GLint_const_GLchar___GENPT___GLint_const_GLchar___GENPT__
#define glNamedStringARB_FORMAT FORMAT_void_GLenum_GLint_const_GLchar___GENPT___GLint_const_GLchar___GENPT__
#define glNamedStringARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNamedStringARB_NOT_VOID_WRAP(...) {}
#define glNewList_INDEX 1456
#define glNewList_RETURN void
#define glNewList_ARG_NAMES list, mode
#define glNewList_ARG_EXPAND GLuint list, GLenum mode
#define glNewList_PACKED PACKED_void_GLuint_GLenum
#define glNewList_FORMAT FORMAT_void_GLuint_GLenum
#define glNewList_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNewList_NOT_VOID_WRAP(...) {}
#define glNewObjectBufferATI_INDEX 1457
#define glNewObjectBufferATI_RETURN GLuint
#define glNewObjectBufferATI_ARG_NAMES size, pointer, usage
#define glNewObjectBufferATI_ARG_EXPAND GLsizei size, const GLvoid * pointer, GLenum usage
#define glNewObjectBufferATI_PACKED PACKED_GLuint_GLsizei_const_GLvoid___GENPT___GLenum
#define glNewObjectBufferATI_FORMAT FORMAT_GLuint_GLsizei_const_GLvoid___GENPT___GLenum
#define glNewObjectBufferATI_VOID_ONLY_WRAP(...) {}
#define glNewObjectBufferATI_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glNormal3b_INDEX 1458
#define glNormal3b_RETURN void
#define glNormal3b_ARG_NAMES nx, ny, nz
#define glNormal3b_ARG_EXPAND GLbyte nx, GLbyte ny, GLbyte nz
#define glNormal3b_PACKED PACKED_void_GLbyte_GLbyte_GLbyte
#define glNormal3b_FORMAT FORMAT_void_GLbyte_GLbyte_GLbyte
#define glNormal3b_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNormal3b_NOT_VOID_WRAP(...) {}
#define glNormal3bv_INDEX 1459
#define glNormal3bv_RETURN void
#define glNormal3bv_ARG_NAMES v
#define glNormal3bv_ARG_EXPAND const GLbyte * v
#define glNormal3bv_PACKED PACKED_void_const_GLbyte___GENPT__
#define glNormal3bv_FORMAT FORMAT_void_const_GLbyte___GENPT__
#define glNormal3bv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNormal3bv_NOT_VOID_WRAP(...) {}
#define glNormal3d_INDEX 1460
#define glNormal3d_RETURN void
#define glNormal3d_ARG_NAMES nx, ny, nz
#define glNormal3d_ARG_EXPAND GLdouble nx, GLdouble ny, GLdouble nz
#define glNormal3d_PACKED PACKED_void_GLdouble_GLdouble_GLdouble
#define glNormal3d_FORMAT FORMAT_void_GLdouble_GLdouble_GLdouble
#define glNormal3d_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNormal3d_NOT_VOID_WRAP(...) {}
#define glNormal3dv_INDEX 1461
#define glNormal3dv_RETURN void
#define glNormal3dv_ARG_NAMES v
#define glNormal3dv_ARG_EXPAND const GLdouble * v
#define glNormal3dv_PACKED PACKED_void_const_GLdouble___GENPT__
#define glNormal3dv_FORMAT FORMAT_void_const_GLdouble___GENPT__
#define glNormal3dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNormal3dv_NOT_VOID_WRAP(...) {}
#define glNormal3f_INDEX 1462
#define glNormal3f_RETURN void
#define glNormal3f_ARG_NAMES nx, ny, nz
#define glNormal3f_ARG_EXPAND GLfloat nx, GLfloat ny, GLfloat nz
#define glNormal3f_PACKED PACKED_void_GLfloat_GLfloat_GLfloat
#define glNormal3f_FORMAT FORMAT_void_GLfloat_GLfloat_GLfloat
#define glNormal3f_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNormal3f_NOT_VOID_WRAP(...) {}
#define glNormal3fVertex3fSUN_INDEX 1463
#define glNormal3fVertex3fSUN_RETURN void
#define glNormal3fVertex3fSUN_ARG_NAMES nx, ny, nz, x, y, z
#define glNormal3fVertex3fSUN_ARG_EXPAND GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z
#define glNormal3fVertex3fSUN_PACKED PACKED_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat
#define glNormal3fVertex3fSUN_FORMAT FORMAT_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat
#define glNormal3fVertex3fSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNormal3fVertex3fSUN_NOT_VOID_WRAP(...) {}
#define glNormal3fVertex3fvSUN_INDEX 1464
#define glNormal3fVertex3fvSUN_RETURN void
#define glNormal3fVertex3fvSUN_ARG_NAMES n, v
#define glNormal3fVertex3fvSUN_ARG_EXPAND const GLfloat * n, const GLfloat * v
#define glNormal3fVertex3fvSUN_PACKED PACKED_void_const_GLfloat___GENPT___const_GLfloat___GENPT__
#define glNormal3fVertex3fvSUN_FORMAT FORMAT_void_const_GLfloat___GENPT___const_GLfloat___GENPT__
#define glNormal3fVertex3fvSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNormal3fVertex3fvSUN_NOT_VOID_WRAP(...) {}
#define glNormal3fv_INDEX 1465
#define glNormal3fv_RETURN void
#define glNormal3fv_ARG_NAMES v
#define glNormal3fv_ARG_EXPAND const GLfloat * v
#define glNormal3fv_PACKED PACKED_void_const_GLfloat___GENPT__
#define glNormal3fv_FORMAT FORMAT_void_const_GLfloat___GENPT__
#define glNormal3fv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNormal3fv_NOT_VOID_WRAP(...) {}
#define glNormal3hNV_INDEX 1466
#define glNormal3hNV_RETURN void
#define glNormal3hNV_ARG_NAMES nx, ny, nz
#define glNormal3hNV_ARG_EXPAND GLhalfNV nx, GLhalfNV ny, GLhalfNV nz
#define glNormal3hNV_PACKED PACKED_void_GLhalfNV_GLhalfNV_GLhalfNV
#define glNormal3hNV_FORMAT FORMAT_void_GLhalfNV_GLhalfNV_GLhalfNV
#define glNormal3hNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNormal3hNV_NOT_VOID_WRAP(...) {}
#define glNormal3hvNV_INDEX 1467
#define glNormal3hvNV_RETURN void
#define glNormal3hvNV_ARG_NAMES v
#define glNormal3hvNV_ARG_EXPAND const GLhalfNV * v
#define glNormal3hvNV_PACKED PACKED_void_const_GLhalfNV___GENPT__
#define glNormal3hvNV_FORMAT FORMAT_void_const_GLhalfNV___GENPT__
#define glNormal3hvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNormal3hvNV_NOT_VOID_WRAP(...) {}
#define glNormal3i_INDEX 1468
#define glNormal3i_RETURN void
#define glNormal3i_ARG_NAMES nx, ny, nz
#define glNormal3i_ARG_EXPAND GLint nx, GLint ny, GLint nz
#define glNormal3i_PACKED PACKED_void_GLint_GLint_GLint
#define glNormal3i_FORMAT FORMAT_void_GLint_GLint_GLint
#define glNormal3i_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNormal3i_NOT_VOID_WRAP(...) {}
#define glNormal3iv_INDEX 1469
#define glNormal3iv_RETURN void
#define glNormal3iv_ARG_NAMES v
#define glNormal3iv_ARG_EXPAND const GLint * v
#define glNormal3iv_PACKED PACKED_void_const_GLint___GENPT__
#define glNormal3iv_FORMAT FORMAT_void_const_GLint___GENPT__
#define glNormal3iv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNormal3iv_NOT_VOID_WRAP(...) {}
#define glNormal3s_INDEX 1470
#define glNormal3s_RETURN void
#define glNormal3s_ARG_NAMES nx, ny, nz
#define glNormal3s_ARG_EXPAND GLshort nx, GLshort ny, GLshort nz
#define glNormal3s_PACKED PACKED_void_GLshort_GLshort_GLshort
#define glNormal3s_FORMAT FORMAT_void_GLshort_GLshort_GLshort
#define glNormal3s_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNormal3s_NOT_VOID_WRAP(...) {}
#define glNormal3sv_INDEX 1471
#define glNormal3sv_RETURN void
#define glNormal3sv_ARG_NAMES v
#define glNormal3sv_ARG_EXPAND const GLshort * v
#define glNormal3sv_PACKED PACKED_void_const_GLshort___GENPT__
#define glNormal3sv_FORMAT FORMAT_void_const_GLshort___GENPT__
#define glNormal3sv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNormal3sv_NOT_VOID_WRAP(...) {}
#define glNormal3x_INDEX 1472
#define glNormal3x_RETURN void
#define glNormal3x_ARG_NAMES nx, ny, nz
#define glNormal3x_ARG_EXPAND GLfixed nx, GLfixed ny, GLfixed nz
#define glNormal3x_PACKED PACKED_void_GLfixed_GLfixed_GLfixed
#define glNormal3x_FORMAT FORMAT_void_GLfixed_GLfixed_GLfixed
#define glNormal3x_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNormal3x_NOT_VOID_WRAP(...) {}
#define glNormal3xOES_INDEX 1473
#define glNormal3xOES_RETURN void
#define glNormal3xOES_ARG_NAMES nx, ny, nz
#define glNormal3xOES_ARG_EXPAND GLfixed nx, GLfixed ny, GLfixed nz
#define glNormal3xOES_PACKED PACKED_void_GLfixed_GLfixed_GLfixed
#define glNormal3xOES_FORMAT FORMAT_void_GLfixed_GLfixed_GLfixed
#define glNormal3xOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNormal3xOES_NOT_VOID_WRAP(...) {}
#define glNormal3xvOES_INDEX 1474
#define glNormal3xvOES_RETURN void
#define glNormal3xvOES_ARG_NAMES coords
#define glNormal3xvOES_ARG_EXPAND const GLfixed * coords
#define glNormal3xvOES_PACKED PACKED_void_const_GLfixed___GENPT__
#define glNormal3xvOES_FORMAT FORMAT_void_const_GLfixed___GENPT__
#define glNormal3xvOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNormal3xvOES_NOT_VOID_WRAP(...) {}
#define glNormalFormatNV_INDEX 1475
#define glNormalFormatNV_RETURN void
#define glNormalFormatNV_ARG_NAMES type, stride
#define glNormalFormatNV_ARG_EXPAND GLenum type, GLsizei stride
#define glNormalFormatNV_PACKED PACKED_void_GLenum_GLsizei
#define glNormalFormatNV_FORMAT FORMAT_void_GLenum_GLsizei
#define glNormalFormatNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNormalFormatNV_NOT_VOID_WRAP(...) {}
#define glNormalP3ui_INDEX 1476
#define glNormalP3ui_RETURN void
#define glNormalP3ui_ARG_NAMES type, coords
#define glNormalP3ui_ARG_EXPAND GLenum type, GLuint coords
#define glNormalP3ui_PACKED PACKED_void_GLenum_GLuint
#define glNormalP3ui_FORMAT FORMAT_void_GLenum_GLuint
#define glNormalP3ui_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNormalP3ui_NOT_VOID_WRAP(...) {}
#define glNormalP3uiv_INDEX 1477
#define glNormalP3uiv_RETURN void
#define glNormalP3uiv_ARG_NAMES type, coords
#define glNormalP3uiv_ARG_EXPAND GLenum type, const GLuint * coords
#define glNormalP3uiv_PACKED PACKED_void_GLenum_const_GLuint___GENPT__
#define glNormalP3uiv_FORMAT FORMAT_void_GLenum_const_GLuint___GENPT__
#define glNormalP3uiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNormalP3uiv_NOT_VOID_WRAP(...) {}
#define glNormalPointer_INDEX 1478
#define glNormalPointer_RETURN void
#define glNormalPointer_ARG_NAMES type, stride, pointer
#define glNormalPointer_ARG_EXPAND GLenum type, GLsizei stride, const GLvoid * pointer
#define glNormalPointer_PACKED PACKED_void_GLenum_GLsizei_const_GLvoid___GENPT__
#define glNormalPointer_FORMAT FORMAT_void_GLenum_GLsizei_const_GLvoid___GENPT__
#define glNormalPointer_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNormalPointer_NOT_VOID_WRAP(...) {}
#define glNormalPointerEXT_INDEX 1479
#define glNormalPointerEXT_RETURN void
#define glNormalPointerEXT_ARG_NAMES type, stride, count, pointer
#define glNormalPointerEXT_ARG_EXPAND GLenum type, GLsizei stride, GLsizei count, const GLvoid * pointer
#define glNormalPointerEXT_PACKED PACKED_void_GLenum_GLsizei_GLsizei_const_GLvoid___GENPT__
#define glNormalPointerEXT_FORMAT FORMAT_void_GLenum_GLsizei_GLsizei_const_GLvoid___GENPT__
#define glNormalPointerEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNormalPointerEXT_NOT_VOID_WRAP(...) {}
#define glNormalPointerListIBM_INDEX 1480
#define glNormalPointerListIBM_RETURN void
#define glNormalPointerListIBM_ARG_NAMES type, stride, pointer, ptrstride
#define glNormalPointerListIBM_ARG_EXPAND GLenum type, GLint stride, const GLvoid * pointer, GLint ptrstride
#define glNormalPointerListIBM_PACKED PACKED_void_GLenum_GLint_const_GLvoid___GENPT___GLint
#define glNormalPointerListIBM_FORMAT FORMAT_void_GLenum_GLint_const_GLvoid___GENPT___GLint
#define glNormalPointerListIBM_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNormalPointerListIBM_NOT_VOID_WRAP(...) {}
#define glNormalPointervINTEL_INDEX 1481
#define glNormalPointervINTEL_RETURN void
#define glNormalPointervINTEL_ARG_NAMES type, pointer
#define glNormalPointervINTEL_ARG_EXPAND GLenum type, const GLvoid * pointer
#define glNormalPointervINTEL_PACKED PACKED_void_GLenum_const_GLvoid___GENPT__
#define glNormalPointervINTEL_FORMAT FORMAT_void_GLenum_const_GLvoid___GENPT__
#define glNormalPointervINTEL_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNormalPointervINTEL_NOT_VOID_WRAP(...) {}
#define glNormalStream3bATI_INDEX 1482
#define glNormalStream3bATI_RETURN void
#define glNormalStream3bATI_ARG_NAMES stream, nx, ny, nz
#define glNormalStream3bATI_ARG_EXPAND GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz
#define glNormalStream3bATI_PACKED PACKED_void_GLenum_GLbyte_GLbyte_GLbyte
#define glNormalStream3bATI_FORMAT FORMAT_void_GLenum_GLbyte_GLbyte_GLbyte
#define glNormalStream3bATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNormalStream3bATI_NOT_VOID_WRAP(...) {}
#define glNormalStream3bvATI_INDEX 1483
#define glNormalStream3bvATI_RETURN void
#define glNormalStream3bvATI_ARG_NAMES stream, coords
#define glNormalStream3bvATI_ARG_EXPAND GLenum stream, const GLbyte * coords
#define glNormalStream3bvATI_PACKED PACKED_void_GLenum_const_GLbyte___GENPT__
#define glNormalStream3bvATI_FORMAT FORMAT_void_GLenum_const_GLbyte___GENPT__
#define glNormalStream3bvATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNormalStream3bvATI_NOT_VOID_WRAP(...) {}
#define glNormalStream3dATI_INDEX 1484
#define glNormalStream3dATI_RETURN void
#define glNormalStream3dATI_ARG_NAMES stream, nx, ny, nz
#define glNormalStream3dATI_ARG_EXPAND GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz
#define glNormalStream3dATI_PACKED PACKED_void_GLenum_GLdouble_GLdouble_GLdouble
#define glNormalStream3dATI_FORMAT FORMAT_void_GLenum_GLdouble_GLdouble_GLdouble
#define glNormalStream3dATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNormalStream3dATI_NOT_VOID_WRAP(...) {}
#define glNormalStream3dvATI_INDEX 1485
#define glNormalStream3dvATI_RETURN void
#define glNormalStream3dvATI_ARG_NAMES stream, coords
#define glNormalStream3dvATI_ARG_EXPAND GLenum stream, const GLdouble * coords
#define glNormalStream3dvATI_PACKED PACKED_void_GLenum_const_GLdouble___GENPT__
#define glNormalStream3dvATI_FORMAT FORMAT_void_GLenum_const_GLdouble___GENPT__
#define glNormalStream3dvATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNormalStream3dvATI_NOT_VOID_WRAP(...) {}
#define glNormalStream3fATI_INDEX 1486
#define glNormalStream3fATI_RETURN void
#define glNormalStream3fATI_ARG_NAMES stream, nx, ny, nz
#define glNormalStream3fATI_ARG_EXPAND GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz
#define glNormalStream3fATI_PACKED PACKED_void_GLenum_GLfloat_GLfloat_GLfloat
#define glNormalStream3fATI_FORMAT FORMAT_void_GLenum_GLfloat_GLfloat_GLfloat
#define glNormalStream3fATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNormalStream3fATI_NOT_VOID_WRAP(...) {}
#define glNormalStream3fvATI_INDEX 1487
#define glNormalStream3fvATI_RETURN void
#define glNormalStream3fvATI_ARG_NAMES stream, coords
#define glNormalStream3fvATI_ARG_EXPAND GLenum stream, const GLfloat * coords
#define glNormalStream3fvATI_PACKED PACKED_void_GLenum_const_GLfloat___GENPT__
#define glNormalStream3fvATI_FORMAT FORMAT_void_GLenum_const_GLfloat___GENPT__
#define glNormalStream3fvATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNormalStream3fvATI_NOT_VOID_WRAP(...) {}
#define glNormalStream3iATI_INDEX 1488
#define glNormalStream3iATI_RETURN void
#define glNormalStream3iATI_ARG_NAMES stream, nx, ny, nz
#define glNormalStream3iATI_ARG_EXPAND GLenum stream, GLint nx, GLint ny, GLint nz
#define glNormalStream3iATI_PACKED PACKED_void_GLenum_GLint_GLint_GLint
#define glNormalStream3iATI_FORMAT FORMAT_void_GLenum_GLint_GLint_GLint
#define glNormalStream3iATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNormalStream3iATI_NOT_VOID_WRAP(...) {}
#define glNormalStream3ivATI_INDEX 1489
#define glNormalStream3ivATI_RETURN void
#define glNormalStream3ivATI_ARG_NAMES stream, coords
#define glNormalStream3ivATI_ARG_EXPAND GLenum stream, const GLint * coords
#define glNormalStream3ivATI_PACKED PACKED_void_GLenum_const_GLint___GENPT__
#define glNormalStream3ivATI_FORMAT FORMAT_void_GLenum_const_GLint___GENPT__
#define glNormalStream3ivATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNormalStream3ivATI_NOT_VOID_WRAP(...) {}
#define glNormalStream3sATI_INDEX 1490
#define glNormalStream3sATI_RETURN void
#define glNormalStream3sATI_ARG_NAMES stream, nx, ny, nz
#define glNormalStream3sATI_ARG_EXPAND GLenum stream, GLshort nx, GLshort ny, GLshort nz
#define glNormalStream3sATI_PACKED PACKED_void_GLenum_GLshort_GLshort_GLshort
#define glNormalStream3sATI_FORMAT FORMAT_void_GLenum_GLshort_GLshort_GLshort
#define glNormalStream3sATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNormalStream3sATI_NOT_VOID_WRAP(...) {}
#define glNormalStream3svATI_INDEX 1491
#define glNormalStream3svATI_RETURN void
#define glNormalStream3svATI_ARG_NAMES stream, coords
#define glNormalStream3svATI_ARG_EXPAND GLenum stream, const GLshort * coords
#define glNormalStream3svATI_PACKED PACKED_void_GLenum_const_GLshort___GENPT__
#define glNormalStream3svATI_FORMAT FORMAT_void_GLenum_const_GLshort___GENPT__
#define glNormalStream3svATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glNormalStream3svATI_NOT_VOID_WRAP(...) {}
#define glObjectLabel_INDEX 1492
#define glObjectLabel_RETURN void
#define glObjectLabel_ARG_NAMES identifier, name, length, label
#define glObjectLabel_ARG_EXPAND GLenum identifier, GLuint name, GLsizei length, const GLchar * label
#define glObjectLabel_PACKED PACKED_void_GLenum_GLuint_GLsizei_const_GLchar___GENPT__
#define glObjectLabel_FORMAT FORMAT_void_GLenum_GLuint_GLsizei_const_GLchar___GENPT__
#define glObjectLabel_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glObjectLabel_NOT_VOID_WRAP(...) {}
#define glObjectPtrLabel_INDEX 1493
#define glObjectPtrLabel_RETURN void
#define glObjectPtrLabel_ARG_NAMES ptr, length, label
#define glObjectPtrLabel_ARG_EXPAND const void * ptr, GLsizei length, const GLchar * label
#define glObjectPtrLabel_PACKED PACKED_void_const_void___GENPT___GLsizei_const_GLchar___GENPT__
#define glObjectPtrLabel_FORMAT FORMAT_void_const_void___GENPT___GLsizei_const_GLchar___GENPT__
#define glObjectPtrLabel_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glObjectPtrLabel_NOT_VOID_WRAP(...) {}
#define glObjectPurgeableAPPLE_INDEX 1494
#define glObjectPurgeableAPPLE_RETURN GLenum
#define glObjectPurgeableAPPLE_ARG_NAMES objectType, name, option
#define glObjectPurgeableAPPLE_ARG_EXPAND GLenum objectType, GLuint name, GLenum option
#define glObjectPurgeableAPPLE_PACKED PACKED_GLenum_GLenum_GLuint_GLenum
#define glObjectPurgeableAPPLE_FORMAT FORMAT_GLenum_GLenum_GLuint_GLenum
#define glObjectPurgeableAPPLE_VOID_ONLY_WRAP(...) {}
#define glObjectPurgeableAPPLE_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glObjectUnpurgeableAPPLE_INDEX 1495
#define glObjectUnpurgeableAPPLE_RETURN GLenum
#define glObjectUnpurgeableAPPLE_ARG_NAMES objectType, name, option
#define glObjectUnpurgeableAPPLE_ARG_EXPAND GLenum objectType, GLuint name, GLenum option
#define glObjectUnpurgeableAPPLE_PACKED PACKED_GLenum_GLenum_GLuint_GLenum
#define glObjectUnpurgeableAPPLE_FORMAT FORMAT_GLenum_GLenum_GLuint_GLenum
#define glObjectUnpurgeableAPPLE_VOID_ONLY_WRAP(...) {}
#define glObjectUnpurgeableAPPLE_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glOrtho_INDEX 1496
#define glOrtho_RETURN void
#define glOrtho_ARG_NAMES left, right, bottom, top, zNear, zFar
#define glOrtho_ARG_EXPAND GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar
#define glOrtho_PACKED PACKED_void_GLdouble_GLdouble_GLdouble_GLdouble_GLdouble_GLdouble
#define glOrtho_FORMAT FORMAT_void_GLdouble_GLdouble_GLdouble_GLdouble_GLdouble_GLdouble
#define glOrtho_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glOrtho_NOT_VOID_WRAP(...) {}
#define glOrthof_INDEX 1497
#define glOrthof_RETURN void
#define glOrthof_ARG_NAMES left, right, bottom, top, near, far
#define glOrthof_ARG_EXPAND GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat near, GLfloat far
#define glOrthof_PACKED PACKED_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat
#define glOrthof_FORMAT FORMAT_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat
#define glOrthof_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glOrthof_NOT_VOID_WRAP(...) {}
#define glOrthofOES_INDEX 1498
#define glOrthofOES_RETURN void
#define glOrthofOES_ARG_NAMES l, r, b, t, n, f
#define glOrthofOES_ARG_EXPAND GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f
#define glOrthofOES_PACKED PACKED_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat
#define glOrthofOES_FORMAT FORMAT_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat
#define glOrthofOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glOrthofOES_NOT_VOID_WRAP(...) {}
#define glOrthox_INDEX 1499
#define glOrthox_RETURN void
#define glOrthox_ARG_NAMES left, right, bottom, top, near, far
#define glOrthox_ARG_EXPAND GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed near, GLfixed far
#define glOrthox_PACKED PACKED_void_GLfixed_GLfixed_GLfixed_GLfixed_GLfixed_GLfixed
#define glOrthox_FORMAT FORMAT_void_GLfixed_GLfixed_GLfixed_GLfixed_GLfixed_GLfixed
#define glOrthox_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glOrthox_NOT_VOID_WRAP(...) {}
#define glOrthoxOES_INDEX 1500
#define glOrthoxOES_RETURN void
#define glOrthoxOES_ARG_NAMES l, r, b, t, n, f
#define glOrthoxOES_ARG_EXPAND GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f
#define glOrthoxOES_PACKED PACKED_void_GLfixed_GLfixed_GLfixed_GLfixed_GLfixed_GLfixed
#define glOrthoxOES_FORMAT FORMAT_void_GLfixed_GLfixed_GLfixed_GLfixed_GLfixed_GLfixed
#define glOrthoxOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glOrthoxOES_NOT_VOID_WRAP(...) {}
#define glPNTrianglesfATI_INDEX 1501
#define glPNTrianglesfATI_RETURN void
#define glPNTrianglesfATI_ARG_NAMES pname, param
#define glPNTrianglesfATI_ARG_EXPAND GLenum pname, GLfloat param
#define glPNTrianglesfATI_PACKED PACKED_void_GLenum_GLfloat
#define glPNTrianglesfATI_FORMAT FORMAT_void_GLenum_GLfloat
#define glPNTrianglesfATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPNTrianglesfATI_NOT_VOID_WRAP(...) {}
#define glPNTrianglesiATI_INDEX 1502
#define glPNTrianglesiATI_RETURN void
#define glPNTrianglesiATI_ARG_NAMES pname, param
#define glPNTrianglesiATI_ARG_EXPAND GLenum pname, GLint param
#define glPNTrianglesiATI_PACKED PACKED_void_GLenum_GLint
#define glPNTrianglesiATI_FORMAT FORMAT_void_GLenum_GLint
#define glPNTrianglesiATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPNTrianglesiATI_NOT_VOID_WRAP(...) {}
#define glPassTexCoordATI_INDEX 1503
#define glPassTexCoordATI_RETURN void
#define glPassTexCoordATI_ARG_NAMES dst, coord, swizzle
#define glPassTexCoordATI_ARG_EXPAND GLuint dst, GLuint coord, GLenum swizzle
#define glPassTexCoordATI_PACKED PACKED_void_GLuint_GLuint_GLenum
#define glPassTexCoordATI_FORMAT FORMAT_void_GLuint_GLuint_GLenum
#define glPassTexCoordATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPassTexCoordATI_NOT_VOID_WRAP(...) {}
#define glPassThrough_INDEX 1504
#define glPassThrough_RETURN void
#define glPassThrough_ARG_NAMES token
#define glPassThrough_ARG_EXPAND GLfloat token
#define glPassThrough_PACKED PACKED_void_GLfloat
#define glPassThrough_FORMAT FORMAT_void_GLfloat
#define glPassThrough_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPassThrough_NOT_VOID_WRAP(...) {}
#define glPassThroughxOES_INDEX 1505
#define glPassThroughxOES_RETURN void
#define glPassThroughxOES_ARG_NAMES token
#define glPassThroughxOES_ARG_EXPAND GLfixed token
#define glPassThroughxOES_PACKED PACKED_void_GLfixed
#define glPassThroughxOES_FORMAT FORMAT_void_GLfixed
#define glPassThroughxOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPassThroughxOES_NOT_VOID_WRAP(...) {}
#define glPatchParameterfv_INDEX 1506
#define glPatchParameterfv_RETURN void
#define glPatchParameterfv_ARG_NAMES pname, values
#define glPatchParameterfv_ARG_EXPAND GLenum pname, const GLfloat * values
#define glPatchParameterfv_PACKED PACKED_void_GLenum_const_GLfloat___GENPT__
#define glPatchParameterfv_FORMAT FORMAT_void_GLenum_const_GLfloat___GENPT__
#define glPatchParameterfv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPatchParameterfv_NOT_VOID_WRAP(...) {}
#define glPatchParameteri_INDEX 1507
#define glPatchParameteri_RETURN void
#define glPatchParameteri_ARG_NAMES pname, value
#define glPatchParameteri_ARG_EXPAND GLenum pname, GLint value
#define glPatchParameteri_PACKED PACKED_void_GLenum_GLint
#define glPatchParameteri_FORMAT FORMAT_void_GLenum_GLint
#define glPatchParameteri_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPatchParameteri_NOT_VOID_WRAP(...) {}
#define glPathColorGenNV_INDEX 1508
#define glPathColorGenNV_RETURN void
#define glPathColorGenNV_ARG_NAMES color, genMode, colorFormat, coeffs
#define glPathColorGenNV_ARG_EXPAND GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat * coeffs
#define glPathColorGenNV_PACKED PACKED_void_GLenum_GLenum_GLenum_const_GLfloat___GENPT__
#define glPathColorGenNV_FORMAT FORMAT_void_GLenum_GLenum_GLenum_const_GLfloat___GENPT__
#define glPathColorGenNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPathColorGenNV_NOT_VOID_WRAP(...) {}
#define glPathCommandsNV_INDEX 1509
#define glPathCommandsNV_RETURN void
#define glPathCommandsNV_ARG_NAMES path, numCommands, commands, numCoords, coordType, coords
#define glPathCommandsNV_ARG_EXPAND GLuint path, GLsizei numCommands, const GLubyte * commands, GLsizei numCoords, GLenum coordType, const GLvoid * coords
#define glPathCommandsNV_PACKED PACKED_void_GLuint_GLsizei_const_GLubyte___GENPT___GLsizei_GLenum_const_GLvoid___GENPT__
#define glPathCommandsNV_FORMAT FORMAT_void_GLuint_GLsizei_const_GLubyte___GENPT___GLsizei_GLenum_const_GLvoid___GENPT__
#define glPathCommandsNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPathCommandsNV_NOT_VOID_WRAP(...) {}
#define glPathCoordsNV_INDEX 1510
#define glPathCoordsNV_RETURN void
#define glPathCoordsNV_ARG_NAMES path, numCoords, coordType, coords
#define glPathCoordsNV_ARG_EXPAND GLuint path, GLsizei numCoords, GLenum coordType, const GLvoid * coords
#define glPathCoordsNV_PACKED PACKED_void_GLuint_GLsizei_GLenum_const_GLvoid___GENPT__
#define glPathCoordsNV_FORMAT FORMAT_void_GLuint_GLsizei_GLenum_const_GLvoid___GENPT__
#define glPathCoordsNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPathCoordsNV_NOT_VOID_WRAP(...) {}
#define glPathCoverDepthFuncNV_INDEX 1511
#define glPathCoverDepthFuncNV_RETURN void
#define glPathCoverDepthFuncNV_ARG_NAMES func
#define glPathCoverDepthFuncNV_ARG_EXPAND GLenum func
#define glPathCoverDepthFuncNV_PACKED PACKED_void_GLenum
#define glPathCoverDepthFuncNV_FORMAT FORMAT_void_GLenum
#define glPathCoverDepthFuncNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPathCoverDepthFuncNV_NOT_VOID_WRAP(...) {}
#define glPathDashArrayNV_INDEX 1512
#define glPathDashArrayNV_RETURN void
#define glPathDashArrayNV_ARG_NAMES path, dashCount, dashArray
#define glPathDashArrayNV_ARG_EXPAND GLuint path, GLsizei dashCount, const GLfloat * dashArray
#define glPathDashArrayNV_PACKED PACKED_void_GLuint_GLsizei_const_GLfloat___GENPT__
#define glPathDashArrayNV_FORMAT FORMAT_void_GLuint_GLsizei_const_GLfloat___GENPT__
#define glPathDashArrayNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPathDashArrayNV_NOT_VOID_WRAP(...) {}
#define glPathFogGenNV_INDEX 1513
#define glPathFogGenNV_RETURN void
#define glPathFogGenNV_ARG_NAMES genMode
#define glPathFogGenNV_ARG_EXPAND GLenum genMode
#define glPathFogGenNV_PACKED PACKED_void_GLenum
#define glPathFogGenNV_FORMAT FORMAT_void_GLenum
#define glPathFogGenNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPathFogGenNV_NOT_VOID_WRAP(...) {}
#define glPathGlyphRangeNV_INDEX 1514
#define glPathGlyphRangeNV_RETURN void
#define glPathGlyphRangeNV_ARG_NAMES firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale
#define glPathGlyphRangeNV_ARG_EXPAND GLuint firstPathName, GLenum fontTarget, const GLvoid * fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale
#define glPathGlyphRangeNV_PACKED PACKED_void_GLuint_GLenum_const_GLvoid___GENPT___GLbitfield_GLuint_GLsizei_GLenum_GLuint_GLfloat
#define glPathGlyphRangeNV_FORMAT FORMAT_void_GLuint_GLenum_const_GLvoid___GENPT___GLbitfield_GLuint_GLsizei_GLenum_GLuint_GLfloat
#define glPathGlyphRangeNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPathGlyphRangeNV_NOT_VOID_WRAP(...) {}
#define glPathGlyphsNV_INDEX 1515
#define glPathGlyphsNV_RETURN void
#define glPathGlyphsNV_ARG_NAMES firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale
#define glPathGlyphsNV_ARG_EXPAND GLuint firstPathName, GLenum fontTarget, const GLvoid * fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const GLvoid * charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale
#define glPathGlyphsNV_PACKED PACKED_void_GLuint_GLenum_const_GLvoid___GENPT___GLbitfield_GLsizei_GLenum_const_GLvoid___GENPT___GLenum_GLuint_GLfloat
#define glPathGlyphsNV_FORMAT FORMAT_void_GLuint_GLenum_const_GLvoid___GENPT___GLbitfield_GLsizei_GLenum_const_GLvoid___GENPT___GLenum_GLuint_GLfloat
#define glPathGlyphsNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPathGlyphsNV_NOT_VOID_WRAP(...) {}
#define glPathParameterfNV_INDEX 1516
#define glPathParameterfNV_RETURN void
#define glPathParameterfNV_ARG_NAMES path, pname, value
#define glPathParameterfNV_ARG_EXPAND GLuint path, GLenum pname, GLfloat value
#define glPathParameterfNV_PACKED PACKED_void_GLuint_GLenum_GLfloat
#define glPathParameterfNV_FORMAT FORMAT_void_GLuint_GLenum_GLfloat
#define glPathParameterfNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPathParameterfNV_NOT_VOID_WRAP(...) {}
#define glPathParameterfvNV_INDEX 1517
#define glPathParameterfvNV_RETURN void
#define glPathParameterfvNV_ARG_NAMES path, pname, value
#define glPathParameterfvNV_ARG_EXPAND GLuint path, GLenum pname, const GLfloat * value
#define glPathParameterfvNV_PACKED PACKED_void_GLuint_GLenum_const_GLfloat___GENPT__
#define glPathParameterfvNV_FORMAT FORMAT_void_GLuint_GLenum_const_GLfloat___GENPT__
#define glPathParameterfvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPathParameterfvNV_NOT_VOID_WRAP(...) {}
#define glPathParameteriNV_INDEX 1518
#define glPathParameteriNV_RETURN void
#define glPathParameteriNV_ARG_NAMES path, pname, value
#define glPathParameteriNV_ARG_EXPAND GLuint path, GLenum pname, GLint value
#define glPathParameteriNV_PACKED PACKED_void_GLuint_GLenum_GLint
#define glPathParameteriNV_FORMAT FORMAT_void_GLuint_GLenum_GLint
#define glPathParameteriNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPathParameteriNV_NOT_VOID_WRAP(...) {}
#define glPathParameterivNV_INDEX 1519
#define glPathParameterivNV_RETURN void
#define glPathParameterivNV_ARG_NAMES path, pname, value
#define glPathParameterivNV_ARG_EXPAND GLuint path, GLenum pname, const GLint * value
#define glPathParameterivNV_PACKED PACKED_void_GLuint_GLenum_const_GLint___GENPT__
#define glPathParameterivNV_FORMAT FORMAT_void_GLuint_GLenum_const_GLint___GENPT__
#define glPathParameterivNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPathParameterivNV_NOT_VOID_WRAP(...) {}
#define glPathStencilDepthOffsetNV_INDEX 1520
#define glPathStencilDepthOffsetNV_RETURN void
#define glPathStencilDepthOffsetNV_ARG_NAMES factor, units
#define glPathStencilDepthOffsetNV_ARG_EXPAND GLfloat factor, GLfloat units
#define glPathStencilDepthOffsetNV_PACKED PACKED_void_GLfloat_GLfloat
#define glPathStencilDepthOffsetNV_FORMAT FORMAT_void_GLfloat_GLfloat
#define glPathStencilDepthOffsetNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPathStencilDepthOffsetNV_NOT_VOID_WRAP(...) {}
#define glPathStencilFuncNV_INDEX 1521
#define glPathStencilFuncNV_RETURN void
#define glPathStencilFuncNV_ARG_NAMES func, ref, mask
#define glPathStencilFuncNV_ARG_EXPAND GLenum func, GLint ref, GLuint mask
#define glPathStencilFuncNV_PACKED PACKED_void_GLenum_GLint_GLuint
#define glPathStencilFuncNV_FORMAT FORMAT_void_GLenum_GLint_GLuint
#define glPathStencilFuncNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPathStencilFuncNV_NOT_VOID_WRAP(...) {}
#define glPathStringNV_INDEX 1522
#define glPathStringNV_RETURN void
#define glPathStringNV_ARG_NAMES path, format, length, pathString
#define glPathStringNV_ARG_EXPAND GLuint path, GLenum format, GLsizei length, const GLvoid * pathString
#define glPathStringNV_PACKED PACKED_void_GLuint_GLenum_GLsizei_const_GLvoid___GENPT__
#define glPathStringNV_FORMAT FORMAT_void_GLuint_GLenum_GLsizei_const_GLvoid___GENPT__
#define glPathStringNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPathStringNV_NOT_VOID_WRAP(...) {}
#define glPathSubCommandsNV_INDEX 1523
#define glPathSubCommandsNV_RETURN void
#define glPathSubCommandsNV_ARG_NAMES path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords
#define glPathSubCommandsNV_ARG_EXPAND GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte * commands, GLsizei numCoords, GLenum coordType, const GLvoid * coords
#define glPathSubCommandsNV_PACKED PACKED_void_GLuint_GLsizei_GLsizei_GLsizei_const_GLubyte___GENPT___GLsizei_GLenum_const_GLvoid___GENPT__
#define glPathSubCommandsNV_FORMAT FORMAT_void_GLuint_GLsizei_GLsizei_GLsizei_const_GLubyte___GENPT___GLsizei_GLenum_const_GLvoid___GENPT__
#define glPathSubCommandsNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPathSubCommandsNV_NOT_VOID_WRAP(...) {}
#define glPathSubCoordsNV_INDEX 1524
#define glPathSubCoordsNV_RETURN void
#define glPathSubCoordsNV_ARG_NAMES path, coordStart, numCoords, coordType, coords
#define glPathSubCoordsNV_ARG_EXPAND GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const GLvoid * coords
#define glPathSubCoordsNV_PACKED PACKED_void_GLuint_GLsizei_GLsizei_GLenum_const_GLvoid___GENPT__
#define glPathSubCoordsNV_FORMAT FORMAT_void_GLuint_GLsizei_GLsizei_GLenum_const_GLvoid___GENPT__
#define glPathSubCoordsNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPathSubCoordsNV_NOT_VOID_WRAP(...) {}
#define glPathTexGenNV_INDEX 1525
#define glPathTexGenNV_RETURN void
#define glPathTexGenNV_ARG_NAMES texCoordSet, genMode, components, coeffs
#define glPathTexGenNV_ARG_EXPAND GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat * coeffs
#define glPathTexGenNV_PACKED PACKED_void_GLenum_GLenum_GLint_const_GLfloat___GENPT__
#define glPathTexGenNV_FORMAT FORMAT_void_GLenum_GLenum_GLint_const_GLfloat___GENPT__
#define glPathTexGenNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPathTexGenNV_NOT_VOID_WRAP(...) {}
#define glPauseTransformFeedback_INDEX 1526
#define glPauseTransformFeedback_RETURN void
#define glPauseTransformFeedback_ARG_NAMES 
#define glPauseTransformFeedback_ARG_EXPAND 
#define glPauseTransformFeedback_PACKED PACKED_void
#define glPauseTransformFeedback_FORMAT FORMAT_void
#define glPauseTransformFeedback_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPauseTransformFeedback_NOT_VOID_WRAP(...) {}
#define glPauseTransformFeedbackNV_INDEX 1527
#define glPauseTransformFeedbackNV_RETURN void
#define glPauseTransformFeedbackNV_ARG_NAMES 
#define glPauseTransformFeedbackNV_ARG_EXPAND 
#define glPauseTransformFeedbackNV_PACKED PACKED_void
#define glPauseTransformFeedbackNV_FORMAT FORMAT_void
#define glPauseTransformFeedbackNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPauseTransformFeedbackNV_NOT_VOID_WRAP(...) {}
#define glPixelDataRangeNV_INDEX 1528
#define glPixelDataRangeNV_RETURN void
#define glPixelDataRangeNV_ARG_NAMES target, length, pointer
#define glPixelDataRangeNV_ARG_EXPAND GLenum target, GLsizei length, const GLvoid * pointer
#define glPixelDataRangeNV_PACKED PACKED_void_GLenum_GLsizei_const_GLvoid___GENPT__
#define glPixelDataRangeNV_FORMAT FORMAT_void_GLenum_GLsizei_const_GLvoid___GENPT__
#define glPixelDataRangeNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPixelDataRangeNV_NOT_VOID_WRAP(...) {}
#define glPixelMapfv_INDEX 1529
#define glPixelMapfv_RETURN void
#define glPixelMapfv_ARG_NAMES map, mapsize, values
#define glPixelMapfv_ARG_EXPAND GLenum map, GLsizei mapsize, const GLfloat * values
#define glPixelMapfv_PACKED PACKED_void_GLenum_GLsizei_const_GLfloat___GENPT__
#define glPixelMapfv_FORMAT FORMAT_void_GLenum_GLsizei_const_GLfloat___GENPT__
#define glPixelMapfv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPixelMapfv_NOT_VOID_WRAP(...) {}
#define glPixelMapuiv_INDEX 1530
#define glPixelMapuiv_RETURN void
#define glPixelMapuiv_ARG_NAMES map, mapsize, values
#define glPixelMapuiv_ARG_EXPAND GLenum map, GLsizei mapsize, const GLuint * values
#define glPixelMapuiv_PACKED PACKED_void_GLenum_GLsizei_const_GLuint___GENPT__
#define glPixelMapuiv_FORMAT FORMAT_void_GLenum_GLsizei_const_GLuint___GENPT__
#define glPixelMapuiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPixelMapuiv_NOT_VOID_WRAP(...) {}
#define glPixelMapusv_INDEX 1531
#define glPixelMapusv_RETURN void
#define glPixelMapusv_ARG_NAMES map, mapsize, values
#define glPixelMapusv_ARG_EXPAND GLenum map, GLsizei mapsize, const GLushort * values
#define glPixelMapusv_PACKED PACKED_void_GLenum_GLsizei_const_GLushort___GENPT__
#define glPixelMapusv_FORMAT FORMAT_void_GLenum_GLsizei_const_GLushort___GENPT__
#define glPixelMapusv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPixelMapusv_NOT_VOID_WRAP(...) {}
#define glPixelMapx_INDEX 1532
#define glPixelMapx_RETURN void
#define glPixelMapx_ARG_NAMES map, size, values
#define glPixelMapx_ARG_EXPAND GLenum map, GLint size, const GLfixed * values
#define glPixelMapx_PACKED PACKED_void_GLenum_GLint_const_GLfixed___GENPT__
#define glPixelMapx_FORMAT FORMAT_void_GLenum_GLint_const_GLfixed___GENPT__
#define glPixelMapx_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPixelMapx_NOT_VOID_WRAP(...) {}
#define glPixelStoref_INDEX 1533
#define glPixelStoref_RETURN void
#define glPixelStoref_ARG_NAMES pname, param
#define glPixelStoref_ARG_EXPAND GLenum pname, GLfloat param
#define glPixelStoref_PACKED PACKED_void_GLenum_GLfloat
#define glPixelStoref_FORMAT FORMAT_void_GLenum_GLfloat
#define glPixelStoref_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPixelStoref_NOT_VOID_WRAP(...) {}
#define glPixelStorei_INDEX 1534
#define glPixelStorei_RETURN void
#define glPixelStorei_ARG_NAMES pname, param
#define glPixelStorei_ARG_EXPAND GLenum pname, GLint param
#define glPixelStorei_PACKED PACKED_void_GLenum_GLint
#define glPixelStorei_FORMAT FORMAT_void_GLenum_GLint
#define glPixelStorei_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPixelStorei_NOT_VOID_WRAP(...) {}
#define glPixelStorex_INDEX 1535
#define glPixelStorex_RETURN void
#define glPixelStorex_ARG_NAMES pname, param
#define glPixelStorex_ARG_EXPAND GLenum pname, GLfixed param
#define glPixelStorex_PACKED PACKED_void_GLenum_GLfixed
#define glPixelStorex_FORMAT FORMAT_void_GLenum_GLfixed
#define glPixelStorex_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPixelStorex_NOT_VOID_WRAP(...) {}
#define glPixelTexGenParameterfSGIS_INDEX 1536
#define glPixelTexGenParameterfSGIS_RETURN void
#define glPixelTexGenParameterfSGIS_ARG_NAMES pname, param
#define glPixelTexGenParameterfSGIS_ARG_EXPAND GLenum pname, GLfloat param
#define glPixelTexGenParameterfSGIS_PACKED PACKED_void_GLenum_GLfloat
#define glPixelTexGenParameterfSGIS_FORMAT FORMAT_void_GLenum_GLfloat
#define glPixelTexGenParameterfSGIS_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPixelTexGenParameterfSGIS_NOT_VOID_WRAP(...) {}
#define glPixelTexGenParameterfvSGIS_INDEX 1537
#define glPixelTexGenParameterfvSGIS_RETURN void
#define glPixelTexGenParameterfvSGIS_ARG_NAMES pname, params
#define glPixelTexGenParameterfvSGIS_ARG_EXPAND GLenum pname, const GLfloat * params
#define glPixelTexGenParameterfvSGIS_PACKED PACKED_void_GLenum_const_GLfloat___GENPT__
#define glPixelTexGenParameterfvSGIS_FORMAT FORMAT_void_GLenum_const_GLfloat___GENPT__
#define glPixelTexGenParameterfvSGIS_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPixelTexGenParameterfvSGIS_NOT_VOID_WRAP(...) {}
#define glPixelTexGenParameteriSGIS_INDEX 1538
#define glPixelTexGenParameteriSGIS_RETURN void
#define glPixelTexGenParameteriSGIS_ARG_NAMES pname, param
#define glPixelTexGenParameteriSGIS_ARG_EXPAND GLenum pname, GLint param
#define glPixelTexGenParameteriSGIS_PACKED PACKED_void_GLenum_GLint
#define glPixelTexGenParameteriSGIS_FORMAT FORMAT_void_GLenum_GLint
#define glPixelTexGenParameteriSGIS_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPixelTexGenParameteriSGIS_NOT_VOID_WRAP(...) {}
#define glPixelTexGenParameterivSGIS_INDEX 1539
#define glPixelTexGenParameterivSGIS_RETURN void
#define glPixelTexGenParameterivSGIS_ARG_NAMES pname, params
#define glPixelTexGenParameterivSGIS_ARG_EXPAND GLenum pname, const GLint * params
#define glPixelTexGenParameterivSGIS_PACKED PACKED_void_GLenum_const_GLint___GENPT__
#define glPixelTexGenParameterivSGIS_FORMAT FORMAT_void_GLenum_const_GLint___GENPT__
#define glPixelTexGenParameterivSGIS_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPixelTexGenParameterivSGIS_NOT_VOID_WRAP(...) {}
#define glPixelTexGenSGIX_INDEX 1540
#define glPixelTexGenSGIX_RETURN void
#define glPixelTexGenSGIX_ARG_NAMES mode
#define glPixelTexGenSGIX_ARG_EXPAND GLenum mode
#define glPixelTexGenSGIX_PACKED PACKED_void_GLenum
#define glPixelTexGenSGIX_FORMAT FORMAT_void_GLenum
#define glPixelTexGenSGIX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPixelTexGenSGIX_NOT_VOID_WRAP(...) {}
#define glPixelTransferf_INDEX 1541
#define glPixelTransferf_RETURN void
#define glPixelTransferf_ARG_NAMES pname, param
#define glPixelTransferf_ARG_EXPAND GLenum pname, GLfloat param
#define glPixelTransferf_PACKED PACKED_void_GLenum_GLfloat
#define glPixelTransferf_FORMAT FORMAT_void_GLenum_GLfloat
#define glPixelTransferf_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPixelTransferf_NOT_VOID_WRAP(...) {}
#define glPixelTransferi_INDEX 1542
#define glPixelTransferi_RETURN void
#define glPixelTransferi_ARG_NAMES pname, param
#define glPixelTransferi_ARG_EXPAND GLenum pname, GLint param
#define glPixelTransferi_PACKED PACKED_void_GLenum_GLint
#define glPixelTransferi_FORMAT FORMAT_void_GLenum_GLint
#define glPixelTransferi_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPixelTransferi_NOT_VOID_WRAP(...) {}
#define glPixelTransferxOES_INDEX 1543
#define glPixelTransferxOES_RETURN void
#define glPixelTransferxOES_ARG_NAMES pname, param
#define glPixelTransferxOES_ARG_EXPAND GLenum pname, GLfixed param
#define glPixelTransferxOES_PACKED PACKED_void_GLenum_GLfixed
#define glPixelTransferxOES_FORMAT FORMAT_void_GLenum_GLfixed
#define glPixelTransferxOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPixelTransferxOES_NOT_VOID_WRAP(...) {}
#define glPixelTransformParameterfEXT_INDEX 1544
#define glPixelTransformParameterfEXT_RETURN void
#define glPixelTransformParameterfEXT_ARG_NAMES target, pname, param
#define glPixelTransformParameterfEXT_ARG_EXPAND GLenum target, GLenum pname, GLfloat param
#define glPixelTransformParameterfEXT_PACKED PACKED_void_GLenum_GLenum_GLfloat
#define glPixelTransformParameterfEXT_FORMAT FORMAT_void_GLenum_GLenum_GLfloat
#define glPixelTransformParameterfEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPixelTransformParameterfEXT_NOT_VOID_WRAP(...) {}
#define glPixelTransformParameterfvEXT_INDEX 1545
#define glPixelTransformParameterfvEXT_RETURN void
#define glPixelTransformParameterfvEXT_ARG_NAMES target, pname, params
#define glPixelTransformParameterfvEXT_ARG_EXPAND GLenum target, GLenum pname, const GLfloat * params
#define glPixelTransformParameterfvEXT_PACKED PACKED_void_GLenum_GLenum_const_GLfloat___GENPT__
#define glPixelTransformParameterfvEXT_FORMAT FORMAT_void_GLenum_GLenum_const_GLfloat___GENPT__
#define glPixelTransformParameterfvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPixelTransformParameterfvEXT_NOT_VOID_WRAP(...) {}
#define glPixelTransformParameteriEXT_INDEX 1546
#define glPixelTransformParameteriEXT_RETURN void
#define glPixelTransformParameteriEXT_ARG_NAMES target, pname, param
#define glPixelTransformParameteriEXT_ARG_EXPAND GLenum target, GLenum pname, GLint param
#define glPixelTransformParameteriEXT_PACKED PACKED_void_GLenum_GLenum_GLint
#define glPixelTransformParameteriEXT_FORMAT FORMAT_void_GLenum_GLenum_GLint
#define glPixelTransformParameteriEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPixelTransformParameteriEXT_NOT_VOID_WRAP(...) {}
#define glPixelTransformParameterivEXT_INDEX 1547
#define glPixelTransformParameterivEXT_RETURN void
#define glPixelTransformParameterivEXT_ARG_NAMES target, pname, params
#define glPixelTransformParameterivEXT_ARG_EXPAND GLenum target, GLenum pname, const GLint * params
#define glPixelTransformParameterivEXT_PACKED PACKED_void_GLenum_GLenum_const_GLint___GENPT__
#define glPixelTransformParameterivEXT_FORMAT FORMAT_void_GLenum_GLenum_const_GLint___GENPT__
#define glPixelTransformParameterivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPixelTransformParameterivEXT_NOT_VOID_WRAP(...) {}
#define glPixelZoom_INDEX 1548
#define glPixelZoom_RETURN void
#define glPixelZoom_ARG_NAMES xfactor, yfactor
#define glPixelZoom_ARG_EXPAND GLfloat xfactor, GLfloat yfactor
#define glPixelZoom_PACKED PACKED_void_GLfloat_GLfloat
#define glPixelZoom_FORMAT FORMAT_void_GLfloat_GLfloat
#define glPixelZoom_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPixelZoom_NOT_VOID_WRAP(...) {}
#define glPixelZoomxOES_INDEX 1549
#define glPixelZoomxOES_RETURN void
#define glPixelZoomxOES_ARG_NAMES xfactor, yfactor
#define glPixelZoomxOES_ARG_EXPAND GLfixed xfactor, GLfixed yfactor
#define glPixelZoomxOES_PACKED PACKED_void_GLfixed_GLfixed
#define glPixelZoomxOES_FORMAT FORMAT_void_GLfixed_GLfixed
#define glPixelZoomxOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPixelZoomxOES_NOT_VOID_WRAP(...) {}
#define glPointAlongPathNV_INDEX 1550
#define glPointAlongPathNV_RETURN GLboolean
#define glPointAlongPathNV_ARG_NAMES path, startSegment, numSegments, distance, x, y, tangentX, tangentY
#define glPointAlongPathNV_ARG_EXPAND GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat * x, GLfloat * y, GLfloat * tangentX, GLfloat * tangentY
#define glPointAlongPathNV_PACKED PACKED_GLboolean_GLuint_GLsizei_GLsizei_GLfloat_GLfloat___GENPT___GLfloat___GENPT___GLfloat___GENPT___GLfloat___GENPT__
#define glPointAlongPathNV_FORMAT FORMAT_GLboolean_GLuint_GLsizei_GLsizei_GLfloat_GLfloat___GENPT___GLfloat___GENPT___GLfloat___GENPT___GLfloat___GENPT__
#define glPointAlongPathNV_VOID_ONLY_WRAP(...) {}
#define glPointAlongPathNV_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glPointParameterf_INDEX 1551
#define glPointParameterf_RETURN void
#define glPointParameterf_ARG_NAMES pname, param
#define glPointParameterf_ARG_EXPAND GLenum pname, GLfloat param
#define glPointParameterf_PACKED PACKED_void_GLenum_GLfloat
#define glPointParameterf_FORMAT FORMAT_void_GLenum_GLfloat
#define glPointParameterf_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPointParameterf_NOT_VOID_WRAP(...) {}
#define glPointParameterfARB_INDEX 1552
#define glPointParameterfARB_RETURN void
#define glPointParameterfARB_ARG_NAMES pname, param
#define glPointParameterfARB_ARG_EXPAND GLenum pname, GLfloat param
#define glPointParameterfARB_PACKED PACKED_void_GLenum_GLfloat
#define glPointParameterfARB_FORMAT FORMAT_void_GLenum_GLfloat
#define glPointParameterfARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPointParameterfARB_NOT_VOID_WRAP(...) {}
#define glPointParameterfEXT_INDEX 1553
#define glPointParameterfEXT_RETURN void
#define glPointParameterfEXT_ARG_NAMES pname, param
#define glPointParameterfEXT_ARG_EXPAND GLenum pname, GLfloat param
#define glPointParameterfEXT_PACKED PACKED_void_GLenum_GLfloat
#define glPointParameterfEXT_FORMAT FORMAT_void_GLenum_GLfloat
#define glPointParameterfEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPointParameterfEXT_NOT_VOID_WRAP(...) {}
#define glPointParameterfSGIS_INDEX 1554
#define glPointParameterfSGIS_RETURN void
#define glPointParameterfSGIS_ARG_NAMES pname, param
#define glPointParameterfSGIS_ARG_EXPAND GLenum pname, GLfloat param
#define glPointParameterfSGIS_PACKED PACKED_void_GLenum_GLfloat
#define glPointParameterfSGIS_FORMAT FORMAT_void_GLenum_GLfloat
#define glPointParameterfSGIS_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPointParameterfSGIS_NOT_VOID_WRAP(...) {}
#define glPointParameterfv_INDEX 1555
#define glPointParameterfv_RETURN void
#define glPointParameterfv_ARG_NAMES pname, params
#define glPointParameterfv_ARG_EXPAND GLenum pname, const GLfloat * params
#define glPointParameterfv_PACKED PACKED_void_GLenum_const_GLfloat___GENPT__
#define glPointParameterfv_FORMAT FORMAT_void_GLenum_const_GLfloat___GENPT__
#define glPointParameterfv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPointParameterfv_NOT_VOID_WRAP(...) {}
#define glPointParameterfvARB_INDEX 1556
#define glPointParameterfvARB_RETURN void
#define glPointParameterfvARB_ARG_NAMES pname, params
#define glPointParameterfvARB_ARG_EXPAND GLenum pname, const GLfloat * params
#define glPointParameterfvARB_PACKED PACKED_void_GLenum_const_GLfloat___GENPT__
#define glPointParameterfvARB_FORMAT FORMAT_void_GLenum_const_GLfloat___GENPT__
#define glPointParameterfvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPointParameterfvARB_NOT_VOID_WRAP(...) {}
#define glPointParameterfvEXT_INDEX 1557
#define glPointParameterfvEXT_RETURN void
#define glPointParameterfvEXT_ARG_NAMES pname, params
#define glPointParameterfvEXT_ARG_EXPAND GLenum pname, const GLfloat * params
#define glPointParameterfvEXT_PACKED PACKED_void_GLenum_const_GLfloat___GENPT__
#define glPointParameterfvEXT_FORMAT FORMAT_void_GLenum_const_GLfloat___GENPT__
#define glPointParameterfvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPointParameterfvEXT_NOT_VOID_WRAP(...) {}
#define glPointParameterfvSGIS_INDEX 1558
#define glPointParameterfvSGIS_RETURN void
#define glPointParameterfvSGIS_ARG_NAMES pname, params
#define glPointParameterfvSGIS_ARG_EXPAND GLenum pname, const GLfloat * params
#define glPointParameterfvSGIS_PACKED PACKED_void_GLenum_const_GLfloat___GENPT__
#define glPointParameterfvSGIS_FORMAT FORMAT_void_GLenum_const_GLfloat___GENPT__
#define glPointParameterfvSGIS_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPointParameterfvSGIS_NOT_VOID_WRAP(...) {}
#define glPointParameteri_INDEX 1559
#define glPointParameteri_RETURN void
#define glPointParameteri_ARG_NAMES pname, param
#define glPointParameteri_ARG_EXPAND GLenum pname, GLint param
#define glPointParameteri_PACKED PACKED_void_GLenum_GLint
#define glPointParameteri_FORMAT FORMAT_void_GLenum_GLint
#define glPointParameteri_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPointParameteri_NOT_VOID_WRAP(...) {}
#define glPointParameteriNV_INDEX 1560
#define glPointParameteriNV_RETURN void
#define glPointParameteriNV_ARG_NAMES pname, param
#define glPointParameteriNV_ARG_EXPAND GLenum pname, GLint param
#define glPointParameteriNV_PACKED PACKED_void_GLenum_GLint
#define glPointParameteriNV_FORMAT FORMAT_void_GLenum_GLint
#define glPointParameteriNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPointParameteriNV_NOT_VOID_WRAP(...) {}
#define glPointParameteriv_INDEX 1561
#define glPointParameteriv_RETURN void
#define glPointParameteriv_ARG_NAMES pname, params
#define glPointParameteriv_ARG_EXPAND GLenum pname, const GLint * params
#define glPointParameteriv_PACKED PACKED_void_GLenum_const_GLint___GENPT__
#define glPointParameteriv_FORMAT FORMAT_void_GLenum_const_GLint___GENPT__
#define glPointParameteriv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPointParameteriv_NOT_VOID_WRAP(...) {}
#define glPointParameterivNV_INDEX 1562
#define glPointParameterivNV_RETURN void
#define glPointParameterivNV_ARG_NAMES pname, params
#define glPointParameterivNV_ARG_EXPAND GLenum pname, const GLint * params
#define glPointParameterivNV_PACKED PACKED_void_GLenum_const_GLint___GENPT__
#define glPointParameterivNV_FORMAT FORMAT_void_GLenum_const_GLint___GENPT__
#define glPointParameterivNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPointParameterivNV_NOT_VOID_WRAP(...) {}
#define glPointParameterx_INDEX 1563
#define glPointParameterx_RETURN void
#define glPointParameterx_ARG_NAMES pname, param
#define glPointParameterx_ARG_EXPAND GLenum pname, GLfixed param
#define glPointParameterx_PACKED PACKED_void_GLenum_GLfixed
#define glPointParameterx_FORMAT FORMAT_void_GLenum_GLfixed
#define glPointParameterx_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPointParameterx_NOT_VOID_WRAP(...) {}
#define glPointParameterxv_INDEX 1564
#define glPointParameterxv_RETURN void
#define glPointParameterxv_ARG_NAMES pname, params
#define glPointParameterxv_ARG_EXPAND GLenum pname, const GLfixed * params
#define glPointParameterxv_PACKED PACKED_void_GLenum_const_GLfixed___GENPT__
#define glPointParameterxv_FORMAT FORMAT_void_GLenum_const_GLfixed___GENPT__
#define glPointParameterxv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPointParameterxv_NOT_VOID_WRAP(...) {}
#define glPointParameterxvOES_INDEX 1565
#define glPointParameterxvOES_RETURN void
#define glPointParameterxvOES_ARG_NAMES pname, params
#define glPointParameterxvOES_ARG_EXPAND GLenum pname, const GLfixed * params
#define glPointParameterxvOES_PACKED PACKED_void_GLenum_const_GLfixed___GENPT__
#define glPointParameterxvOES_FORMAT FORMAT_void_GLenum_const_GLfixed___GENPT__
#define glPointParameterxvOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPointParameterxvOES_NOT_VOID_WRAP(...) {}
#define glPointSize_INDEX 1566
#define glPointSize_RETURN void
#define glPointSize_ARG_NAMES size
#define glPointSize_ARG_EXPAND GLfloat size
#define glPointSize_PACKED PACKED_void_GLfloat
#define glPointSize_FORMAT FORMAT_void_GLfloat
#define glPointSize_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPointSize_NOT_VOID_WRAP(...) {}
#define glPointSizePointerOES_INDEX 1567
#define glPointSizePointerOES_RETURN void
#define glPointSizePointerOES_ARG_NAMES type, stride, pointer
#define glPointSizePointerOES_ARG_EXPAND GLenum type, GLsizei stride, const GLvoid * pointer
#define glPointSizePointerOES_PACKED PACKED_void_GLenum_GLsizei_const_GLvoid___GENPT__
#define glPointSizePointerOES_FORMAT FORMAT_void_GLenum_GLsizei_const_GLvoid___GENPT__
#define glPointSizePointerOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPointSizePointerOES_NOT_VOID_WRAP(...) {}
#define glPointSizex_INDEX 1568
#define glPointSizex_RETURN void
#define glPointSizex_ARG_NAMES size
#define glPointSizex_ARG_EXPAND GLfixed size
#define glPointSizex_PACKED PACKED_void_GLfixed
#define glPointSizex_FORMAT FORMAT_void_GLfixed
#define glPointSizex_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPointSizex_NOT_VOID_WRAP(...) {}
#define glPointSizexOES_INDEX 1569
#define glPointSizexOES_RETURN void
#define glPointSizexOES_ARG_NAMES size
#define glPointSizexOES_ARG_EXPAND GLfixed size
#define glPointSizexOES_PACKED PACKED_void_GLfixed
#define glPointSizexOES_FORMAT FORMAT_void_GLfixed
#define glPointSizexOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPointSizexOES_NOT_VOID_WRAP(...) {}
#define glPollAsyncSGIX_INDEX 1570
#define glPollAsyncSGIX_RETURN GLint
#define glPollAsyncSGIX_ARG_NAMES markerp
#define glPollAsyncSGIX_ARG_EXPAND GLuint * markerp
#define glPollAsyncSGIX_PACKED PACKED_GLint_GLuint___GENPT__
#define glPollAsyncSGIX_FORMAT FORMAT_GLint_GLuint___GENPT__
#define glPollAsyncSGIX_VOID_ONLY_WRAP(...) {}
#define glPollAsyncSGIX_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glPollInstrumentsSGIX_INDEX 1571
#define glPollInstrumentsSGIX_RETURN GLint
#define glPollInstrumentsSGIX_ARG_NAMES marker_p
#define glPollInstrumentsSGIX_ARG_EXPAND GLint * marker_p
#define glPollInstrumentsSGIX_PACKED PACKED_GLint_GLint___GENPT__
#define glPollInstrumentsSGIX_FORMAT FORMAT_GLint_GLint___GENPT__
#define glPollInstrumentsSGIX_VOID_ONLY_WRAP(...) {}
#define glPollInstrumentsSGIX_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glPolygonMode_INDEX 1572
#define glPolygonMode_RETURN void
#define glPolygonMode_ARG_NAMES face, mode
#define glPolygonMode_ARG_EXPAND GLenum face, GLenum mode
#define glPolygonMode_PACKED PACKED_void_GLenum_GLenum
#define glPolygonMode_FORMAT FORMAT_void_GLenum_GLenum
#define glPolygonMode_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPolygonMode_NOT_VOID_WRAP(...) {}
#define glPolygonOffset_INDEX 1573
#define glPolygonOffset_RETURN void
#define glPolygonOffset_ARG_NAMES factor, units
#define glPolygonOffset_ARG_EXPAND GLfloat factor, GLfloat units
#define glPolygonOffset_PACKED PACKED_void_GLfloat_GLfloat
#define glPolygonOffset_FORMAT FORMAT_void_GLfloat_GLfloat
#define glPolygonOffset_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPolygonOffset_NOT_VOID_WRAP(...) {}
#define glPolygonOffsetEXT_INDEX 1574
#define glPolygonOffsetEXT_RETURN void
#define glPolygonOffsetEXT_ARG_NAMES factor, bias
#define glPolygonOffsetEXT_ARG_EXPAND GLfloat factor, GLfloat bias
#define glPolygonOffsetEXT_PACKED PACKED_void_GLfloat_GLfloat
#define glPolygonOffsetEXT_FORMAT FORMAT_void_GLfloat_GLfloat
#define glPolygonOffsetEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPolygonOffsetEXT_NOT_VOID_WRAP(...) {}
#define glPolygonOffsetx_INDEX 1575
#define glPolygonOffsetx_RETURN void
#define glPolygonOffsetx_ARG_NAMES factor, units
#define glPolygonOffsetx_ARG_EXPAND GLfixed factor, GLfixed units
#define glPolygonOffsetx_PACKED PACKED_void_GLfixed_GLfixed
#define glPolygonOffsetx_FORMAT FORMAT_void_GLfixed_GLfixed
#define glPolygonOffsetx_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPolygonOffsetx_NOT_VOID_WRAP(...) {}
#define glPolygonOffsetxOES_INDEX 1576
#define glPolygonOffsetxOES_RETURN void
#define glPolygonOffsetxOES_ARG_NAMES factor, units
#define glPolygonOffsetxOES_ARG_EXPAND GLfixed factor, GLfixed units
#define glPolygonOffsetxOES_PACKED PACKED_void_GLfixed_GLfixed
#define glPolygonOffsetxOES_FORMAT FORMAT_void_GLfixed_GLfixed
#define glPolygonOffsetxOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPolygonOffsetxOES_NOT_VOID_WRAP(...) {}
#define glPolygonStipple_INDEX 1577
#define glPolygonStipple_RETURN void
#define glPolygonStipple_ARG_NAMES mask
#define glPolygonStipple_ARG_EXPAND const GLubyte * mask
#define glPolygonStipple_PACKED PACKED_void_const_GLubyte___GENPT__
#define glPolygonStipple_FORMAT FORMAT_void_const_GLubyte___GENPT__
#define glPolygonStipple_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPolygonStipple_NOT_VOID_WRAP(...) {}
#define glPopAttrib_INDEX 1578
#define glPopAttrib_RETURN void
#define glPopAttrib_ARG_NAMES 
#define glPopAttrib_ARG_EXPAND 
#define glPopAttrib_PACKED PACKED_void
#define glPopAttrib_FORMAT FORMAT_void
#define glPopAttrib_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPopAttrib_NOT_VOID_WRAP(...) {}
#define glPopClientAttrib_INDEX 1579
#define glPopClientAttrib_RETURN void
#define glPopClientAttrib_ARG_NAMES 
#define glPopClientAttrib_ARG_EXPAND 
#define glPopClientAttrib_PACKED PACKED_void
#define glPopClientAttrib_FORMAT FORMAT_void
#define glPopClientAttrib_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPopClientAttrib_NOT_VOID_WRAP(...) {}
#define glPopDebugGroup_INDEX 1580
#define glPopDebugGroup_RETURN void
#define glPopDebugGroup_ARG_NAMES 
#define glPopDebugGroup_ARG_EXPAND 
#define glPopDebugGroup_PACKED PACKED_void
#define glPopDebugGroup_FORMAT FORMAT_void
#define glPopDebugGroup_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPopDebugGroup_NOT_VOID_WRAP(...) {}
#define glPopMatrix_INDEX 1581
#define glPopMatrix_RETURN void
#define glPopMatrix_ARG_NAMES 
#define glPopMatrix_ARG_EXPAND 
#define glPopMatrix_PACKED PACKED_void
#define glPopMatrix_FORMAT FORMAT_void
#define glPopMatrix_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPopMatrix_NOT_VOID_WRAP(...) {}
#define glPopName_INDEX 1582
#define glPopName_RETURN void
#define glPopName_ARG_NAMES 
#define glPopName_ARG_EXPAND 
#define glPopName_PACKED PACKED_void
#define glPopName_FORMAT FORMAT_void
#define glPopName_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPopName_NOT_VOID_WRAP(...) {}
#define glPresentFrameDualFillNV_INDEX 1583
#define glPresentFrameDualFillNV_RETURN void
#define glPresentFrameDualFillNV_ARG_NAMES video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3
#define glPresentFrameDualFillNV_ARG_EXPAND GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3
#define glPresentFrameDualFillNV_PACKED PACKED_void_GLuint_GLuint64EXT_GLuint_GLuint_GLenum_GLenum_GLuint_GLenum_GLuint_GLenum_GLuint_GLenum_GLuint
#define glPresentFrameDualFillNV_FORMAT FORMAT_void_GLuint_GLuint64EXT_GLuint_GLuint_GLenum_GLenum_GLuint_GLenum_GLuint_GLenum_GLuint_GLenum_GLuint
#define glPresentFrameDualFillNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPresentFrameDualFillNV_NOT_VOID_WRAP(...) {}
#define glPresentFrameKeyedNV_INDEX 1584
#define glPresentFrameKeyedNV_RETURN void
#define glPresentFrameKeyedNV_ARG_NAMES video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1
#define glPresentFrameKeyedNV_ARG_EXPAND GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1
#define glPresentFrameKeyedNV_PACKED PACKED_void_GLuint_GLuint64EXT_GLuint_GLuint_GLenum_GLenum_GLuint_GLuint_GLenum_GLuint_GLuint
#define glPresentFrameKeyedNV_FORMAT FORMAT_void_GLuint_GLuint64EXT_GLuint_GLuint_GLenum_GLenum_GLuint_GLuint_GLenum_GLuint_GLuint
#define glPresentFrameKeyedNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPresentFrameKeyedNV_NOT_VOID_WRAP(...) {}
#define glPrimitiveRestartIndex_INDEX 1585
#define glPrimitiveRestartIndex_RETURN void
#define glPrimitiveRestartIndex_ARG_NAMES index
#define glPrimitiveRestartIndex_ARG_EXPAND GLuint index
#define glPrimitiveRestartIndex_PACKED PACKED_void_GLuint
#define glPrimitiveRestartIndex_FORMAT FORMAT_void_GLuint
#define glPrimitiveRestartIndex_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPrimitiveRestartIndex_NOT_VOID_WRAP(...) {}
#define glPrimitiveRestartIndexNV_INDEX 1586
#define glPrimitiveRestartIndexNV_RETURN void
#define glPrimitiveRestartIndexNV_ARG_NAMES index
#define glPrimitiveRestartIndexNV_ARG_EXPAND GLuint index
#define glPrimitiveRestartIndexNV_PACKED PACKED_void_GLuint
#define glPrimitiveRestartIndexNV_FORMAT FORMAT_void_GLuint
#define glPrimitiveRestartIndexNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPrimitiveRestartIndexNV_NOT_VOID_WRAP(...) {}
#define glPrimitiveRestartNV_INDEX 1587
#define glPrimitiveRestartNV_RETURN void
#define glPrimitiveRestartNV_ARG_NAMES 
#define glPrimitiveRestartNV_ARG_EXPAND 
#define glPrimitiveRestartNV_PACKED PACKED_void
#define glPrimitiveRestartNV_FORMAT FORMAT_void
#define glPrimitiveRestartNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPrimitiveRestartNV_NOT_VOID_WRAP(...) {}
#define glPrioritizeTextures_INDEX 1588
#define glPrioritizeTextures_RETURN void
#define glPrioritizeTextures_ARG_NAMES n, textures, priorities
#define glPrioritizeTextures_ARG_EXPAND GLsizei n, const GLuint * textures, const GLfloat * priorities
#define glPrioritizeTextures_PACKED PACKED_void_GLsizei_const_GLuint___GENPT___const_GLfloat___GENPT__
#define glPrioritizeTextures_FORMAT FORMAT_void_GLsizei_const_GLuint___GENPT___const_GLfloat___GENPT__
#define glPrioritizeTextures_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPrioritizeTextures_NOT_VOID_WRAP(...) {}
#define glPrioritizeTexturesEXT_INDEX 1589
#define glPrioritizeTexturesEXT_RETURN void
#define glPrioritizeTexturesEXT_ARG_NAMES n, textures, priorities
#define glPrioritizeTexturesEXT_ARG_EXPAND GLsizei n, const GLuint * textures, const GLclampf * priorities
#define glPrioritizeTexturesEXT_PACKED PACKED_void_GLsizei_const_GLuint___GENPT___const_GLclampf___GENPT__
#define glPrioritizeTexturesEXT_FORMAT FORMAT_void_GLsizei_const_GLuint___GENPT___const_GLclampf___GENPT__
#define glPrioritizeTexturesEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPrioritizeTexturesEXT_NOT_VOID_WRAP(...) {}
#define glPrioritizeTexturesxOES_INDEX 1590
#define glPrioritizeTexturesxOES_RETURN void
#define glPrioritizeTexturesxOES_ARG_NAMES n, textures, priorities
#define glPrioritizeTexturesxOES_ARG_EXPAND GLsizei n, const GLuint * textures, const GLfixed * priorities
#define glPrioritizeTexturesxOES_PACKED PACKED_void_GLsizei_const_GLuint___GENPT___const_GLfixed___GENPT__
#define glPrioritizeTexturesxOES_FORMAT FORMAT_void_GLsizei_const_GLuint___GENPT___const_GLfixed___GENPT__
#define glPrioritizeTexturesxOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPrioritizeTexturesxOES_NOT_VOID_WRAP(...) {}
#define glProgramBinary_INDEX 1591
#define glProgramBinary_RETURN void
#define glProgramBinary_ARG_NAMES program, binaryFormat, binary, length
#define glProgramBinary_ARG_EXPAND GLuint program, GLenum binaryFormat, const GLvoid * binary, GLsizei length
#define glProgramBinary_PACKED PACKED_void_GLuint_GLenum_const_GLvoid___GENPT___GLsizei
#define glProgramBinary_FORMAT FORMAT_void_GLuint_GLenum_const_GLvoid___GENPT___GLsizei
#define glProgramBinary_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramBinary_NOT_VOID_WRAP(...) {}
#define glProgramBufferParametersIivNV_INDEX 1592
#define glProgramBufferParametersIivNV_RETURN void
#define glProgramBufferParametersIivNV_ARG_NAMES target, bindingIndex, wordIndex, count, params
#define glProgramBufferParametersIivNV_ARG_EXPAND GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLint * params
#define glProgramBufferParametersIivNV_PACKED PACKED_void_GLenum_GLuint_GLuint_GLsizei_const_GLint___GENPT__
#define glProgramBufferParametersIivNV_FORMAT FORMAT_void_GLenum_GLuint_GLuint_GLsizei_const_GLint___GENPT__
#define glProgramBufferParametersIivNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramBufferParametersIivNV_NOT_VOID_WRAP(...) {}
#define glProgramBufferParametersIuivNV_INDEX 1593
#define glProgramBufferParametersIuivNV_RETURN void
#define glProgramBufferParametersIuivNV_ARG_NAMES target, bindingIndex, wordIndex, count, params
#define glProgramBufferParametersIuivNV_ARG_EXPAND GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLuint * params
#define glProgramBufferParametersIuivNV_PACKED PACKED_void_GLenum_GLuint_GLuint_GLsizei_const_GLuint___GENPT__
#define glProgramBufferParametersIuivNV_FORMAT FORMAT_void_GLenum_GLuint_GLuint_GLsizei_const_GLuint___GENPT__
#define glProgramBufferParametersIuivNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramBufferParametersIuivNV_NOT_VOID_WRAP(...) {}
#define glProgramBufferParametersfvNV_INDEX 1594
#define glProgramBufferParametersfvNV_RETURN void
#define glProgramBufferParametersfvNV_ARG_NAMES target, bindingIndex, wordIndex, count, params
#define glProgramBufferParametersfvNV_ARG_EXPAND GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLfloat * params
#define glProgramBufferParametersfvNV_PACKED PACKED_void_GLenum_GLuint_GLuint_GLsizei_const_GLfloat___GENPT__
#define glProgramBufferParametersfvNV_FORMAT FORMAT_void_GLenum_GLuint_GLuint_GLsizei_const_GLfloat___GENPT__
#define glProgramBufferParametersfvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramBufferParametersfvNV_NOT_VOID_WRAP(...) {}
#define glProgramEnvParameter4dARB_INDEX 1595
#define glProgramEnvParameter4dARB_RETURN void
#define glProgramEnvParameter4dARB_ARG_NAMES target, index, x, y, z, w
#define glProgramEnvParameter4dARB_ARG_EXPAND GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w
#define glProgramEnvParameter4dARB_PACKED PACKED_void_GLenum_GLuint_GLdouble_GLdouble_GLdouble_GLdouble
#define glProgramEnvParameter4dARB_FORMAT FORMAT_void_GLenum_GLuint_GLdouble_GLdouble_GLdouble_GLdouble
#define glProgramEnvParameter4dARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramEnvParameter4dARB_NOT_VOID_WRAP(...) {}
#define glProgramEnvParameter4dvARB_INDEX 1596
#define glProgramEnvParameter4dvARB_RETURN void
#define glProgramEnvParameter4dvARB_ARG_NAMES target, index, params
#define glProgramEnvParameter4dvARB_ARG_EXPAND GLenum target, GLuint index, const GLdouble * params
#define glProgramEnvParameter4dvARB_PACKED PACKED_void_GLenum_GLuint_const_GLdouble___GENPT__
#define glProgramEnvParameter4dvARB_FORMAT FORMAT_void_GLenum_GLuint_const_GLdouble___GENPT__
#define glProgramEnvParameter4dvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramEnvParameter4dvARB_NOT_VOID_WRAP(...) {}
#define glProgramEnvParameter4fARB_INDEX 1597
#define glProgramEnvParameter4fARB_RETURN void
#define glProgramEnvParameter4fARB_ARG_NAMES target, index, x, y, z, w
#define glProgramEnvParameter4fARB_ARG_EXPAND GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w
#define glProgramEnvParameter4fARB_PACKED PACKED_void_GLenum_GLuint_GLfloat_GLfloat_GLfloat_GLfloat
#define glProgramEnvParameter4fARB_FORMAT FORMAT_void_GLenum_GLuint_GLfloat_GLfloat_GLfloat_GLfloat
#define glProgramEnvParameter4fARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramEnvParameter4fARB_NOT_VOID_WRAP(...) {}
#define glProgramEnvParameter4fvARB_INDEX 1598
#define glProgramEnvParameter4fvARB_RETURN void
#define glProgramEnvParameter4fvARB_ARG_NAMES target, index, params
#define glProgramEnvParameter4fvARB_ARG_EXPAND GLenum target, GLuint index, const GLfloat * params
#define glProgramEnvParameter4fvARB_PACKED PACKED_void_GLenum_GLuint_const_GLfloat___GENPT__
#define glProgramEnvParameter4fvARB_FORMAT FORMAT_void_GLenum_GLuint_const_GLfloat___GENPT__
#define glProgramEnvParameter4fvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramEnvParameter4fvARB_NOT_VOID_WRAP(...) {}
#define glProgramEnvParameterI4iNV_INDEX 1599
#define glProgramEnvParameterI4iNV_RETURN void
#define glProgramEnvParameterI4iNV_ARG_NAMES target, index, x, y, z, w
#define glProgramEnvParameterI4iNV_ARG_EXPAND GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w
#define glProgramEnvParameterI4iNV_PACKED PACKED_void_GLenum_GLuint_GLint_GLint_GLint_GLint
#define glProgramEnvParameterI4iNV_FORMAT FORMAT_void_GLenum_GLuint_GLint_GLint_GLint_GLint
#define glProgramEnvParameterI4iNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramEnvParameterI4iNV_NOT_VOID_WRAP(...) {}
#define glProgramEnvParameterI4ivNV_INDEX 1600
#define glProgramEnvParameterI4ivNV_RETURN void
#define glProgramEnvParameterI4ivNV_ARG_NAMES target, index, params
#define glProgramEnvParameterI4ivNV_ARG_EXPAND GLenum target, GLuint index, const GLint * params
#define glProgramEnvParameterI4ivNV_PACKED PACKED_void_GLenum_GLuint_const_GLint___GENPT__
#define glProgramEnvParameterI4ivNV_FORMAT FORMAT_void_GLenum_GLuint_const_GLint___GENPT__
#define glProgramEnvParameterI4ivNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramEnvParameterI4ivNV_NOT_VOID_WRAP(...) {}
#define glProgramEnvParameterI4uiNV_INDEX 1601
#define glProgramEnvParameterI4uiNV_RETURN void
#define glProgramEnvParameterI4uiNV_ARG_NAMES target, index, x, y, z, w
#define glProgramEnvParameterI4uiNV_ARG_EXPAND GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w
#define glProgramEnvParameterI4uiNV_PACKED PACKED_void_GLenum_GLuint_GLuint_GLuint_GLuint_GLuint
#define glProgramEnvParameterI4uiNV_FORMAT FORMAT_void_GLenum_GLuint_GLuint_GLuint_GLuint_GLuint
#define glProgramEnvParameterI4uiNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramEnvParameterI4uiNV_NOT_VOID_WRAP(...) {}
#define glProgramEnvParameterI4uivNV_INDEX 1602
#define glProgramEnvParameterI4uivNV_RETURN void
#define glProgramEnvParameterI4uivNV_ARG_NAMES target, index, params
#define glProgramEnvParameterI4uivNV_ARG_EXPAND GLenum target, GLuint index, const GLuint * params
#define glProgramEnvParameterI4uivNV_PACKED PACKED_void_GLenum_GLuint_const_GLuint___GENPT__
#define glProgramEnvParameterI4uivNV_FORMAT FORMAT_void_GLenum_GLuint_const_GLuint___GENPT__
#define glProgramEnvParameterI4uivNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramEnvParameterI4uivNV_NOT_VOID_WRAP(...) {}
#define glProgramEnvParameters4fvEXT_INDEX 1603
#define glProgramEnvParameters4fvEXT_RETURN void
#define glProgramEnvParameters4fvEXT_ARG_NAMES target, index, count, params
#define glProgramEnvParameters4fvEXT_ARG_EXPAND GLenum target, GLuint index, GLsizei count, const GLfloat * params
#define glProgramEnvParameters4fvEXT_PACKED PACKED_void_GLenum_GLuint_GLsizei_const_GLfloat___GENPT__
#define glProgramEnvParameters4fvEXT_FORMAT FORMAT_void_GLenum_GLuint_GLsizei_const_GLfloat___GENPT__
#define glProgramEnvParameters4fvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramEnvParameters4fvEXT_NOT_VOID_WRAP(...) {}
#define glProgramEnvParametersI4ivNV_INDEX 1604
#define glProgramEnvParametersI4ivNV_RETURN void
#define glProgramEnvParametersI4ivNV_ARG_NAMES target, index, count, params
#define glProgramEnvParametersI4ivNV_ARG_EXPAND GLenum target, GLuint index, GLsizei count, const GLint * params
#define glProgramEnvParametersI4ivNV_PACKED PACKED_void_GLenum_GLuint_GLsizei_const_GLint___GENPT__
#define glProgramEnvParametersI4ivNV_FORMAT FORMAT_void_GLenum_GLuint_GLsizei_const_GLint___GENPT__
#define glProgramEnvParametersI4ivNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramEnvParametersI4ivNV_NOT_VOID_WRAP(...) {}
#define glProgramEnvParametersI4uivNV_INDEX 1605
#define glProgramEnvParametersI4uivNV_RETURN void
#define glProgramEnvParametersI4uivNV_ARG_NAMES target, index, count, params
#define glProgramEnvParametersI4uivNV_ARG_EXPAND GLenum target, GLuint index, GLsizei count, const GLuint * params
#define glProgramEnvParametersI4uivNV_PACKED PACKED_void_GLenum_GLuint_GLsizei_const_GLuint___GENPT__
#define glProgramEnvParametersI4uivNV_FORMAT FORMAT_void_GLenum_GLuint_GLsizei_const_GLuint___GENPT__
#define glProgramEnvParametersI4uivNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramEnvParametersI4uivNV_NOT_VOID_WRAP(...) {}
#define glProgramLocalParameter4dARB_INDEX 1606
#define glProgramLocalParameter4dARB_RETURN void
#define glProgramLocalParameter4dARB_ARG_NAMES target, index, x, y, z, w
#define glProgramLocalParameter4dARB_ARG_EXPAND GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w
#define glProgramLocalParameter4dARB_PACKED PACKED_void_GLenum_GLuint_GLdouble_GLdouble_GLdouble_GLdouble
#define glProgramLocalParameter4dARB_FORMAT FORMAT_void_GLenum_GLuint_GLdouble_GLdouble_GLdouble_GLdouble
#define glProgramLocalParameter4dARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramLocalParameter4dARB_NOT_VOID_WRAP(...) {}
#define glProgramLocalParameter4dvARB_INDEX 1607
#define glProgramLocalParameter4dvARB_RETURN void
#define glProgramLocalParameter4dvARB_ARG_NAMES target, index, params
#define glProgramLocalParameter4dvARB_ARG_EXPAND GLenum target, GLuint index, const GLdouble * params
#define glProgramLocalParameter4dvARB_PACKED PACKED_void_GLenum_GLuint_const_GLdouble___GENPT__
#define glProgramLocalParameter4dvARB_FORMAT FORMAT_void_GLenum_GLuint_const_GLdouble___GENPT__
#define glProgramLocalParameter4dvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramLocalParameter4dvARB_NOT_VOID_WRAP(...) {}
#define glProgramLocalParameter4fARB_INDEX 1608
#define glProgramLocalParameter4fARB_RETURN void
#define glProgramLocalParameter4fARB_ARG_NAMES target, index, x, y, z, w
#define glProgramLocalParameter4fARB_ARG_EXPAND GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w
#define glProgramLocalParameter4fARB_PACKED PACKED_void_GLenum_GLuint_GLfloat_GLfloat_GLfloat_GLfloat
#define glProgramLocalParameter4fARB_FORMAT FORMAT_void_GLenum_GLuint_GLfloat_GLfloat_GLfloat_GLfloat
#define glProgramLocalParameter4fARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramLocalParameter4fARB_NOT_VOID_WRAP(...) {}
#define glProgramLocalParameter4fvARB_INDEX 1609
#define glProgramLocalParameter4fvARB_RETURN void
#define glProgramLocalParameter4fvARB_ARG_NAMES target, index, params
#define glProgramLocalParameter4fvARB_ARG_EXPAND GLenum target, GLuint index, const GLfloat * params
#define glProgramLocalParameter4fvARB_PACKED PACKED_void_GLenum_GLuint_const_GLfloat___GENPT__
#define glProgramLocalParameter4fvARB_FORMAT FORMAT_void_GLenum_GLuint_const_GLfloat___GENPT__
#define glProgramLocalParameter4fvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramLocalParameter4fvARB_NOT_VOID_WRAP(...) {}
#define glProgramLocalParameterI4iNV_INDEX 1610
#define glProgramLocalParameterI4iNV_RETURN void
#define glProgramLocalParameterI4iNV_ARG_NAMES target, index, x, y, z, w
#define glProgramLocalParameterI4iNV_ARG_EXPAND GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w
#define glProgramLocalParameterI4iNV_PACKED PACKED_void_GLenum_GLuint_GLint_GLint_GLint_GLint
#define glProgramLocalParameterI4iNV_FORMAT FORMAT_void_GLenum_GLuint_GLint_GLint_GLint_GLint
#define glProgramLocalParameterI4iNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramLocalParameterI4iNV_NOT_VOID_WRAP(...) {}
#define glProgramLocalParameterI4ivNV_INDEX 1611
#define glProgramLocalParameterI4ivNV_RETURN void
#define glProgramLocalParameterI4ivNV_ARG_NAMES target, index, params
#define glProgramLocalParameterI4ivNV_ARG_EXPAND GLenum target, GLuint index, const GLint * params
#define glProgramLocalParameterI4ivNV_PACKED PACKED_void_GLenum_GLuint_const_GLint___GENPT__
#define glProgramLocalParameterI4ivNV_FORMAT FORMAT_void_GLenum_GLuint_const_GLint___GENPT__
#define glProgramLocalParameterI4ivNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramLocalParameterI4ivNV_NOT_VOID_WRAP(...) {}
#define glProgramLocalParameterI4uiNV_INDEX 1612
#define glProgramLocalParameterI4uiNV_RETURN void
#define glProgramLocalParameterI4uiNV_ARG_NAMES target, index, x, y, z, w
#define glProgramLocalParameterI4uiNV_ARG_EXPAND GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w
#define glProgramLocalParameterI4uiNV_PACKED PACKED_void_GLenum_GLuint_GLuint_GLuint_GLuint_GLuint
#define glProgramLocalParameterI4uiNV_FORMAT FORMAT_void_GLenum_GLuint_GLuint_GLuint_GLuint_GLuint
#define glProgramLocalParameterI4uiNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramLocalParameterI4uiNV_NOT_VOID_WRAP(...) {}
#define glProgramLocalParameterI4uivNV_INDEX 1613
#define glProgramLocalParameterI4uivNV_RETURN void
#define glProgramLocalParameterI4uivNV_ARG_NAMES target, index, params
#define glProgramLocalParameterI4uivNV_ARG_EXPAND GLenum target, GLuint index, const GLuint * params
#define glProgramLocalParameterI4uivNV_PACKED PACKED_void_GLenum_GLuint_const_GLuint___GENPT__
#define glProgramLocalParameterI4uivNV_FORMAT FORMAT_void_GLenum_GLuint_const_GLuint___GENPT__
#define glProgramLocalParameterI4uivNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramLocalParameterI4uivNV_NOT_VOID_WRAP(...) {}
#define glProgramLocalParameters4fvEXT_INDEX 1614
#define glProgramLocalParameters4fvEXT_RETURN void
#define glProgramLocalParameters4fvEXT_ARG_NAMES target, index, count, params
#define glProgramLocalParameters4fvEXT_ARG_EXPAND GLenum target, GLuint index, GLsizei count, const GLfloat * params
#define glProgramLocalParameters4fvEXT_PACKED PACKED_void_GLenum_GLuint_GLsizei_const_GLfloat___GENPT__
#define glProgramLocalParameters4fvEXT_FORMAT FORMAT_void_GLenum_GLuint_GLsizei_const_GLfloat___GENPT__
#define glProgramLocalParameters4fvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramLocalParameters4fvEXT_NOT_VOID_WRAP(...) {}
#define glProgramLocalParametersI4ivNV_INDEX 1615
#define glProgramLocalParametersI4ivNV_RETURN void
#define glProgramLocalParametersI4ivNV_ARG_NAMES target, index, count, params
#define glProgramLocalParametersI4ivNV_ARG_EXPAND GLenum target, GLuint index, GLsizei count, const GLint * params
#define glProgramLocalParametersI4ivNV_PACKED PACKED_void_GLenum_GLuint_GLsizei_const_GLint___GENPT__
#define glProgramLocalParametersI4ivNV_FORMAT FORMAT_void_GLenum_GLuint_GLsizei_const_GLint___GENPT__
#define glProgramLocalParametersI4ivNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramLocalParametersI4ivNV_NOT_VOID_WRAP(...) {}
#define glProgramLocalParametersI4uivNV_INDEX 1616
#define glProgramLocalParametersI4uivNV_RETURN void
#define glProgramLocalParametersI4uivNV_ARG_NAMES target, index, count, params
#define glProgramLocalParametersI4uivNV_ARG_EXPAND GLenum target, GLuint index, GLsizei count, const GLuint * params
#define glProgramLocalParametersI4uivNV_PACKED PACKED_void_GLenum_GLuint_GLsizei_const_GLuint___GENPT__
#define glProgramLocalParametersI4uivNV_FORMAT FORMAT_void_GLenum_GLuint_GLsizei_const_GLuint___GENPT__
#define glProgramLocalParametersI4uivNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramLocalParametersI4uivNV_NOT_VOID_WRAP(...) {}
#define glProgramNamedParameter4dNV_INDEX 1617
#define glProgramNamedParameter4dNV_RETURN void
#define glProgramNamedParameter4dNV_ARG_NAMES id, len, name, x, y, z, w
#define glProgramNamedParameter4dNV_ARG_EXPAND GLuint id, GLsizei len, const GLubyte * name, GLdouble x, GLdouble y, GLdouble z, GLdouble w
#define glProgramNamedParameter4dNV_PACKED PACKED_void_GLuint_GLsizei_const_GLubyte___GENPT___GLdouble_GLdouble_GLdouble_GLdouble
#define glProgramNamedParameter4dNV_FORMAT FORMAT_void_GLuint_GLsizei_const_GLubyte___GENPT___GLdouble_GLdouble_GLdouble_GLdouble
#define glProgramNamedParameter4dNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramNamedParameter4dNV_NOT_VOID_WRAP(...) {}
#define glProgramNamedParameter4dvNV_INDEX 1618
#define glProgramNamedParameter4dvNV_RETURN void
#define glProgramNamedParameter4dvNV_ARG_NAMES id, len, name, v
#define glProgramNamedParameter4dvNV_ARG_EXPAND GLuint id, GLsizei len, const GLubyte * name, const GLdouble * v
#define glProgramNamedParameter4dvNV_PACKED PACKED_void_GLuint_GLsizei_const_GLubyte___GENPT___const_GLdouble___GENPT__
#define glProgramNamedParameter4dvNV_FORMAT FORMAT_void_GLuint_GLsizei_const_GLubyte___GENPT___const_GLdouble___GENPT__
#define glProgramNamedParameter4dvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramNamedParameter4dvNV_NOT_VOID_WRAP(...) {}
#define glProgramNamedParameter4fNV_INDEX 1619
#define glProgramNamedParameter4fNV_RETURN void
#define glProgramNamedParameter4fNV_ARG_NAMES id, len, name, x, y, z, w
#define glProgramNamedParameter4fNV_ARG_EXPAND GLuint id, GLsizei len, const GLubyte * name, GLfloat x, GLfloat y, GLfloat z, GLfloat w
#define glProgramNamedParameter4fNV_PACKED PACKED_void_GLuint_GLsizei_const_GLubyte___GENPT___GLfloat_GLfloat_GLfloat_GLfloat
#define glProgramNamedParameter4fNV_FORMAT FORMAT_void_GLuint_GLsizei_const_GLubyte___GENPT___GLfloat_GLfloat_GLfloat_GLfloat
#define glProgramNamedParameter4fNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramNamedParameter4fNV_NOT_VOID_WRAP(...) {}
#define glProgramNamedParameter4fvNV_INDEX 1620
#define glProgramNamedParameter4fvNV_RETURN void
#define glProgramNamedParameter4fvNV_ARG_NAMES id, len, name, v
#define glProgramNamedParameter4fvNV_ARG_EXPAND GLuint id, GLsizei len, const GLubyte * name, const GLfloat * v
#define glProgramNamedParameter4fvNV_PACKED PACKED_void_GLuint_GLsizei_const_GLubyte___GENPT___const_GLfloat___GENPT__
#define glProgramNamedParameter4fvNV_FORMAT FORMAT_void_GLuint_GLsizei_const_GLubyte___GENPT___const_GLfloat___GENPT__
#define glProgramNamedParameter4fvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramNamedParameter4fvNV_NOT_VOID_WRAP(...) {}
#define glProgramParameter4dNV_INDEX 1621
#define glProgramParameter4dNV_RETURN void
#define glProgramParameter4dNV_ARG_NAMES target, index, x, y, z, w
#define glProgramParameter4dNV_ARG_EXPAND GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w
#define glProgramParameter4dNV_PACKED PACKED_void_GLenum_GLuint_GLdouble_GLdouble_GLdouble_GLdouble
#define glProgramParameter4dNV_FORMAT FORMAT_void_GLenum_GLuint_GLdouble_GLdouble_GLdouble_GLdouble
#define glProgramParameter4dNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramParameter4dNV_NOT_VOID_WRAP(...) {}
#define glProgramParameter4dvNV_INDEX 1622
#define glProgramParameter4dvNV_RETURN void
#define glProgramParameter4dvNV_ARG_NAMES target, index, v
#define glProgramParameter4dvNV_ARG_EXPAND GLenum target, GLuint index, const GLdouble * v
#define glProgramParameter4dvNV_PACKED PACKED_void_GLenum_GLuint_const_GLdouble___GENPT__
#define glProgramParameter4dvNV_FORMAT FORMAT_void_GLenum_GLuint_const_GLdouble___GENPT__
#define glProgramParameter4dvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramParameter4dvNV_NOT_VOID_WRAP(...) {}
#define glProgramParameter4fNV_INDEX 1623
#define glProgramParameter4fNV_RETURN void
#define glProgramParameter4fNV_ARG_NAMES target, index, x, y, z, w
#define glProgramParameter4fNV_ARG_EXPAND GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w
#define glProgramParameter4fNV_PACKED PACKED_void_GLenum_GLuint_GLfloat_GLfloat_GLfloat_GLfloat
#define glProgramParameter4fNV_FORMAT FORMAT_void_GLenum_GLuint_GLfloat_GLfloat_GLfloat_GLfloat
#define glProgramParameter4fNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramParameter4fNV_NOT_VOID_WRAP(...) {}
#define glProgramParameter4fvNV_INDEX 1624
#define glProgramParameter4fvNV_RETURN void
#define glProgramParameter4fvNV_ARG_NAMES target, index, v
#define glProgramParameter4fvNV_ARG_EXPAND GLenum target, GLuint index, const GLfloat * v
#define glProgramParameter4fvNV_PACKED PACKED_void_GLenum_GLuint_const_GLfloat___GENPT__
#define glProgramParameter4fvNV_FORMAT FORMAT_void_GLenum_GLuint_const_GLfloat___GENPT__
#define glProgramParameter4fvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramParameter4fvNV_NOT_VOID_WRAP(...) {}
#define glProgramParameteri_INDEX 1625
#define glProgramParameteri_RETURN void
#define glProgramParameteri_ARG_NAMES program, pname, value
#define glProgramParameteri_ARG_EXPAND GLuint program, GLenum pname, GLint value
#define glProgramParameteri_PACKED PACKED_void_GLuint_GLenum_GLint
#define glProgramParameteri_FORMAT FORMAT_void_GLuint_GLenum_GLint
#define glProgramParameteri_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramParameteri_NOT_VOID_WRAP(...) {}
#define glProgramParameteriARB_INDEX 1626
#define glProgramParameteriARB_RETURN void
#define glProgramParameteriARB_ARG_NAMES program, pname, value
#define glProgramParameteriARB_ARG_EXPAND GLuint program, GLenum pname, GLint value
#define glProgramParameteriARB_PACKED PACKED_void_GLuint_GLenum_GLint
#define glProgramParameteriARB_FORMAT FORMAT_void_GLuint_GLenum_GLint
#define glProgramParameteriARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramParameteriARB_NOT_VOID_WRAP(...) {}
#define glProgramParameteriEXT_INDEX 1627
#define glProgramParameteriEXT_RETURN void
#define glProgramParameteriEXT_ARG_NAMES program, pname, value
#define glProgramParameteriEXT_ARG_EXPAND GLuint program, GLenum pname, GLint value
#define glProgramParameteriEXT_PACKED PACKED_void_GLuint_GLenum_GLint
#define glProgramParameteriEXT_FORMAT FORMAT_void_GLuint_GLenum_GLint
#define glProgramParameteriEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramParameteriEXT_NOT_VOID_WRAP(...) {}
#define glProgramParameters4dvNV_INDEX 1628
#define glProgramParameters4dvNV_RETURN void
#define glProgramParameters4dvNV_ARG_NAMES target, index, count, v
#define glProgramParameters4dvNV_ARG_EXPAND GLenum target, GLuint index, GLsizei count, const GLdouble * v
#define glProgramParameters4dvNV_PACKED PACKED_void_GLenum_GLuint_GLsizei_const_GLdouble___GENPT__
#define glProgramParameters4dvNV_FORMAT FORMAT_void_GLenum_GLuint_GLsizei_const_GLdouble___GENPT__
#define glProgramParameters4dvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramParameters4dvNV_NOT_VOID_WRAP(...) {}
#define glProgramParameters4fvNV_INDEX 1629
#define glProgramParameters4fvNV_RETURN void
#define glProgramParameters4fvNV_ARG_NAMES target, index, count, v
#define glProgramParameters4fvNV_ARG_EXPAND GLenum target, GLuint index, GLsizei count, const GLfloat * v
#define glProgramParameters4fvNV_PACKED PACKED_void_GLenum_GLuint_GLsizei_const_GLfloat___GENPT__
#define glProgramParameters4fvNV_FORMAT FORMAT_void_GLenum_GLuint_GLsizei_const_GLfloat___GENPT__
#define glProgramParameters4fvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramParameters4fvNV_NOT_VOID_WRAP(...) {}
#define glProgramStringARB_INDEX 1630
#define glProgramStringARB_RETURN void
#define glProgramStringARB_ARG_NAMES target, format, len, string
#define glProgramStringARB_ARG_EXPAND GLenum target, GLenum format, GLsizei len, const GLvoid * string
#define glProgramStringARB_PACKED PACKED_void_GLenum_GLenum_GLsizei_const_GLvoid___GENPT__
#define glProgramStringARB_FORMAT FORMAT_void_GLenum_GLenum_GLsizei_const_GLvoid___GENPT__
#define glProgramStringARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramStringARB_NOT_VOID_WRAP(...) {}
#define glProgramSubroutineParametersuivNV_INDEX 1631
#define glProgramSubroutineParametersuivNV_RETURN void
#define glProgramSubroutineParametersuivNV_ARG_NAMES target, count, params
#define glProgramSubroutineParametersuivNV_ARG_EXPAND GLenum target, GLsizei count, const GLuint * params
#define glProgramSubroutineParametersuivNV_PACKED PACKED_void_GLenum_GLsizei_const_GLuint___GENPT__
#define glProgramSubroutineParametersuivNV_FORMAT FORMAT_void_GLenum_GLsizei_const_GLuint___GENPT__
#define glProgramSubroutineParametersuivNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramSubroutineParametersuivNV_NOT_VOID_WRAP(...) {}
#define glProgramUniform1d_INDEX 1632
#define glProgramUniform1d_RETURN void
#define glProgramUniform1d_ARG_NAMES program, location, v0
#define glProgramUniform1d_ARG_EXPAND GLuint program, GLint location, GLdouble v0
#define glProgramUniform1d_PACKED PACKED_void_GLuint_GLint_GLdouble
#define glProgramUniform1d_FORMAT FORMAT_void_GLuint_GLint_GLdouble
#define glProgramUniform1d_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform1d_NOT_VOID_WRAP(...) {}
#define glProgramUniform1dEXT_INDEX 1633
#define glProgramUniform1dEXT_RETURN void
#define glProgramUniform1dEXT_ARG_NAMES program, location, x
#define glProgramUniform1dEXT_ARG_EXPAND GLuint program, GLint location, GLdouble x
#define glProgramUniform1dEXT_PACKED PACKED_void_GLuint_GLint_GLdouble
#define glProgramUniform1dEXT_FORMAT FORMAT_void_GLuint_GLint_GLdouble
#define glProgramUniform1dEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform1dEXT_NOT_VOID_WRAP(...) {}
#define glProgramUniform1dv_INDEX 1634
#define glProgramUniform1dv_RETURN void
#define glProgramUniform1dv_ARG_NAMES program, location, count, value
#define glProgramUniform1dv_ARG_EXPAND GLuint program, GLint location, GLsizei count, const GLdouble * value
#define glProgramUniform1dv_PACKED PACKED_void_GLuint_GLint_GLsizei_const_GLdouble___GENPT__
#define glProgramUniform1dv_FORMAT FORMAT_void_GLuint_GLint_GLsizei_const_GLdouble___GENPT__
#define glProgramUniform1dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform1dv_NOT_VOID_WRAP(...) {}
#define glProgramUniform1dvEXT_INDEX 1635
#define glProgramUniform1dvEXT_RETURN void
#define glProgramUniform1dvEXT_ARG_NAMES program, location, count, value
#define glProgramUniform1dvEXT_ARG_EXPAND GLuint program, GLint location, GLsizei count, const GLdouble * value
#define glProgramUniform1dvEXT_PACKED PACKED_void_GLuint_GLint_GLsizei_const_GLdouble___GENPT__
#define glProgramUniform1dvEXT_FORMAT FORMAT_void_GLuint_GLint_GLsizei_const_GLdouble___GENPT__
#define glProgramUniform1dvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform1dvEXT_NOT_VOID_WRAP(...) {}
#define glProgramUniform1f_INDEX 1636
#define glProgramUniform1f_RETURN void
#define glProgramUniform1f_ARG_NAMES program, location, v0
#define glProgramUniform1f_ARG_EXPAND GLuint program, GLint location, GLfloat v0
#define glProgramUniform1f_PACKED PACKED_void_GLuint_GLint_GLfloat
#define glProgramUniform1f_FORMAT FORMAT_void_GLuint_GLint_GLfloat
#define glProgramUniform1f_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform1f_NOT_VOID_WRAP(...) {}
#define glProgramUniform1fEXT_INDEX 1637
#define glProgramUniform1fEXT_RETURN void
#define glProgramUniform1fEXT_ARG_NAMES program, location, v0
#define glProgramUniform1fEXT_ARG_EXPAND GLuint program, GLint location, GLfloat v0
#define glProgramUniform1fEXT_PACKED PACKED_void_GLuint_GLint_GLfloat
#define glProgramUniform1fEXT_FORMAT FORMAT_void_GLuint_GLint_GLfloat
#define glProgramUniform1fEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform1fEXT_NOT_VOID_WRAP(...) {}
#define glProgramUniform1fv_INDEX 1638
#define glProgramUniform1fv_RETURN void
#define glProgramUniform1fv_ARG_NAMES program, location, count, value
#define glProgramUniform1fv_ARG_EXPAND GLuint program, GLint location, GLsizei count, const GLfloat * value
#define glProgramUniform1fv_PACKED PACKED_void_GLuint_GLint_GLsizei_const_GLfloat___GENPT__
#define glProgramUniform1fv_FORMAT FORMAT_void_GLuint_GLint_GLsizei_const_GLfloat___GENPT__
#define glProgramUniform1fv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform1fv_NOT_VOID_WRAP(...) {}
#define glProgramUniform1fvEXT_INDEX 1639
#define glProgramUniform1fvEXT_RETURN void
#define glProgramUniform1fvEXT_ARG_NAMES program, location, count, value
#define glProgramUniform1fvEXT_ARG_EXPAND GLuint program, GLint location, GLsizei count, const GLfloat * value
#define glProgramUniform1fvEXT_PACKED PACKED_void_GLuint_GLint_GLsizei_const_GLfloat___GENPT__
#define glProgramUniform1fvEXT_FORMAT FORMAT_void_GLuint_GLint_GLsizei_const_GLfloat___GENPT__
#define glProgramUniform1fvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform1fvEXT_NOT_VOID_WRAP(...) {}
#define glProgramUniform1i_INDEX 1640
#define glProgramUniform1i_RETURN void
#define glProgramUniform1i_ARG_NAMES program, location, v0
#define glProgramUniform1i_ARG_EXPAND GLuint program, GLint location, GLint v0
#define glProgramUniform1i_PACKED PACKED_void_GLuint_GLint_GLint
#define glProgramUniform1i_FORMAT FORMAT_void_GLuint_GLint_GLint
#define glProgramUniform1i_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform1i_NOT_VOID_WRAP(...) {}
#define glProgramUniform1i64NV_INDEX 1641
#define glProgramUniform1i64NV_RETURN void
#define glProgramUniform1i64NV_ARG_NAMES program, location, x
#define glProgramUniform1i64NV_ARG_EXPAND GLuint program, GLint location, GLint64EXT x
#define glProgramUniform1i64NV_PACKED PACKED_void_GLuint_GLint_GLint64EXT
#define glProgramUniform1i64NV_FORMAT FORMAT_void_GLuint_GLint_GLint64EXT
#define glProgramUniform1i64NV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform1i64NV_NOT_VOID_WRAP(...) {}
#define glProgramUniform1i64vNV_INDEX 1642
#define glProgramUniform1i64vNV_RETURN void
#define glProgramUniform1i64vNV_ARG_NAMES program, location, count, value
#define glProgramUniform1i64vNV_ARG_EXPAND GLuint program, GLint location, GLsizei count, const GLint64EXT * value
#define glProgramUniform1i64vNV_PACKED PACKED_void_GLuint_GLint_GLsizei_const_GLint64EXT___GENPT__
#define glProgramUniform1i64vNV_FORMAT FORMAT_void_GLuint_GLint_GLsizei_const_GLint64EXT___GENPT__
#define glProgramUniform1i64vNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform1i64vNV_NOT_VOID_WRAP(...) {}
#define glProgramUniform1iEXT_INDEX 1643
#define glProgramUniform1iEXT_RETURN void
#define glProgramUniform1iEXT_ARG_NAMES program, location, v0
#define glProgramUniform1iEXT_ARG_EXPAND GLuint program, GLint location, GLint v0
#define glProgramUniform1iEXT_PACKED PACKED_void_GLuint_GLint_GLint
#define glProgramUniform1iEXT_FORMAT FORMAT_void_GLuint_GLint_GLint
#define glProgramUniform1iEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform1iEXT_NOT_VOID_WRAP(...) {}
#define glProgramUniform1iv_INDEX 1644
#define glProgramUniform1iv_RETURN void
#define glProgramUniform1iv_ARG_NAMES program, location, count, value
#define glProgramUniform1iv_ARG_EXPAND GLuint program, GLint location, GLsizei count, const GLint * value
#define glProgramUniform1iv_PACKED PACKED_void_GLuint_GLint_GLsizei_const_GLint___GENPT__
#define glProgramUniform1iv_FORMAT FORMAT_void_GLuint_GLint_GLsizei_const_GLint___GENPT__
#define glProgramUniform1iv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform1iv_NOT_VOID_WRAP(...) {}
#define glProgramUniform1ivEXT_INDEX 1645
#define glProgramUniform1ivEXT_RETURN void
#define glProgramUniform1ivEXT_ARG_NAMES program, location, count, value
#define glProgramUniform1ivEXT_ARG_EXPAND GLuint program, GLint location, GLsizei count, const GLint * value
#define glProgramUniform1ivEXT_PACKED PACKED_void_GLuint_GLint_GLsizei_const_GLint___GENPT__
#define glProgramUniform1ivEXT_FORMAT FORMAT_void_GLuint_GLint_GLsizei_const_GLint___GENPT__
#define glProgramUniform1ivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform1ivEXT_NOT_VOID_WRAP(...) {}
#define glProgramUniform1ui_INDEX 1646
#define glProgramUniform1ui_RETURN void
#define glProgramUniform1ui_ARG_NAMES program, location, v0
#define glProgramUniform1ui_ARG_EXPAND GLuint program, GLint location, GLuint v0
#define glProgramUniform1ui_PACKED PACKED_void_GLuint_GLint_GLuint
#define glProgramUniform1ui_FORMAT FORMAT_void_GLuint_GLint_GLuint
#define glProgramUniform1ui_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform1ui_NOT_VOID_WRAP(...) {}
#define glProgramUniform1ui64NV_INDEX 1647
#define glProgramUniform1ui64NV_RETURN void
#define glProgramUniform1ui64NV_ARG_NAMES program, location, x
#define glProgramUniform1ui64NV_ARG_EXPAND GLuint program, GLint location, GLuint64EXT x
#define glProgramUniform1ui64NV_PACKED PACKED_void_GLuint_GLint_GLuint64EXT
#define glProgramUniform1ui64NV_FORMAT FORMAT_void_GLuint_GLint_GLuint64EXT
#define glProgramUniform1ui64NV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform1ui64NV_NOT_VOID_WRAP(...) {}
#define glProgramUniform1ui64vNV_INDEX 1648
#define glProgramUniform1ui64vNV_RETURN void
#define glProgramUniform1ui64vNV_ARG_NAMES program, location, count, value
#define glProgramUniform1ui64vNV_ARG_EXPAND GLuint program, GLint location, GLsizei count, const GLuint64EXT * value
#define glProgramUniform1ui64vNV_PACKED PACKED_void_GLuint_GLint_GLsizei_const_GLuint64EXT___GENPT__
#define glProgramUniform1ui64vNV_FORMAT FORMAT_void_GLuint_GLint_GLsizei_const_GLuint64EXT___GENPT__
#define glProgramUniform1ui64vNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform1ui64vNV_NOT_VOID_WRAP(...) {}
#define glProgramUniform1uiEXT_INDEX 1649
#define glProgramUniform1uiEXT_RETURN void
#define glProgramUniform1uiEXT_ARG_NAMES program, location, v0
#define glProgramUniform1uiEXT_ARG_EXPAND GLuint program, GLint location, GLuint v0
#define glProgramUniform1uiEXT_PACKED PACKED_void_GLuint_GLint_GLuint
#define glProgramUniform1uiEXT_FORMAT FORMAT_void_GLuint_GLint_GLuint
#define glProgramUniform1uiEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform1uiEXT_NOT_VOID_WRAP(...) {}
#define glProgramUniform1uiv_INDEX 1650
#define glProgramUniform1uiv_RETURN void
#define glProgramUniform1uiv_ARG_NAMES program, location, count, value
#define glProgramUniform1uiv_ARG_EXPAND GLuint program, GLint location, GLsizei count, const GLuint * value
#define glProgramUniform1uiv_PACKED PACKED_void_GLuint_GLint_GLsizei_const_GLuint___GENPT__
#define glProgramUniform1uiv_FORMAT FORMAT_void_GLuint_GLint_GLsizei_const_GLuint___GENPT__
#define glProgramUniform1uiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform1uiv_NOT_VOID_WRAP(...) {}
#define glProgramUniform1uivEXT_INDEX 1651
#define glProgramUniform1uivEXT_RETURN void
#define glProgramUniform1uivEXT_ARG_NAMES program, location, count, value
#define glProgramUniform1uivEXT_ARG_EXPAND GLuint program, GLint location, GLsizei count, const GLuint * value
#define glProgramUniform1uivEXT_PACKED PACKED_void_GLuint_GLint_GLsizei_const_GLuint___GENPT__
#define glProgramUniform1uivEXT_FORMAT FORMAT_void_GLuint_GLint_GLsizei_const_GLuint___GENPT__
#define glProgramUniform1uivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform1uivEXT_NOT_VOID_WRAP(...) {}
#define glProgramUniform2d_INDEX 1652
#define glProgramUniform2d_RETURN void
#define glProgramUniform2d_ARG_NAMES program, location, v0, v1
#define glProgramUniform2d_ARG_EXPAND GLuint program, GLint location, GLdouble v0, GLdouble v1
#define glProgramUniform2d_PACKED PACKED_void_GLuint_GLint_GLdouble_GLdouble
#define glProgramUniform2d_FORMAT FORMAT_void_GLuint_GLint_GLdouble_GLdouble
#define glProgramUniform2d_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform2d_NOT_VOID_WRAP(...) {}
#define glProgramUniform2dEXT_INDEX 1653
#define glProgramUniform2dEXT_RETURN void
#define glProgramUniform2dEXT_ARG_NAMES program, location, x, y
#define glProgramUniform2dEXT_ARG_EXPAND GLuint program, GLint location, GLdouble x, GLdouble y
#define glProgramUniform2dEXT_PACKED PACKED_void_GLuint_GLint_GLdouble_GLdouble
#define glProgramUniform2dEXT_FORMAT FORMAT_void_GLuint_GLint_GLdouble_GLdouble
#define glProgramUniform2dEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform2dEXT_NOT_VOID_WRAP(...) {}
#define glProgramUniform2dv_INDEX 1654
#define glProgramUniform2dv_RETURN void
#define glProgramUniform2dv_ARG_NAMES program, location, count, value
#define glProgramUniform2dv_ARG_EXPAND GLuint program, GLint location, GLsizei count, const GLdouble * value
#define glProgramUniform2dv_PACKED PACKED_void_GLuint_GLint_GLsizei_const_GLdouble___GENPT__
#define glProgramUniform2dv_FORMAT FORMAT_void_GLuint_GLint_GLsizei_const_GLdouble___GENPT__
#define glProgramUniform2dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform2dv_NOT_VOID_WRAP(...) {}
#define glProgramUniform2dvEXT_INDEX 1655
#define glProgramUniform2dvEXT_RETURN void
#define glProgramUniform2dvEXT_ARG_NAMES program, location, count, value
#define glProgramUniform2dvEXT_ARG_EXPAND GLuint program, GLint location, GLsizei count, const GLdouble * value
#define glProgramUniform2dvEXT_PACKED PACKED_void_GLuint_GLint_GLsizei_const_GLdouble___GENPT__
#define glProgramUniform2dvEXT_FORMAT FORMAT_void_GLuint_GLint_GLsizei_const_GLdouble___GENPT__
#define glProgramUniform2dvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform2dvEXT_NOT_VOID_WRAP(...) {}
#define glProgramUniform2f_INDEX 1656
#define glProgramUniform2f_RETURN void
#define glProgramUniform2f_ARG_NAMES program, location, v0, v1
#define glProgramUniform2f_ARG_EXPAND GLuint program, GLint location, GLfloat v0, GLfloat v1
#define glProgramUniform2f_PACKED PACKED_void_GLuint_GLint_GLfloat_GLfloat
#define glProgramUniform2f_FORMAT FORMAT_void_GLuint_GLint_GLfloat_GLfloat
#define glProgramUniform2f_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform2f_NOT_VOID_WRAP(...) {}
#define glProgramUniform2fEXT_INDEX 1657
#define glProgramUniform2fEXT_RETURN void
#define glProgramUniform2fEXT_ARG_NAMES program, location, v0, v1
#define glProgramUniform2fEXT_ARG_EXPAND GLuint program, GLint location, GLfloat v0, GLfloat v1
#define glProgramUniform2fEXT_PACKED PACKED_void_GLuint_GLint_GLfloat_GLfloat
#define glProgramUniform2fEXT_FORMAT FORMAT_void_GLuint_GLint_GLfloat_GLfloat
#define glProgramUniform2fEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform2fEXT_NOT_VOID_WRAP(...) {}
#define glProgramUniform2fv_INDEX 1658
#define glProgramUniform2fv_RETURN void
#define glProgramUniform2fv_ARG_NAMES program, location, count, value
#define glProgramUniform2fv_ARG_EXPAND GLuint program, GLint location, GLsizei count, const GLfloat * value
#define glProgramUniform2fv_PACKED PACKED_void_GLuint_GLint_GLsizei_const_GLfloat___GENPT__
#define glProgramUniform2fv_FORMAT FORMAT_void_GLuint_GLint_GLsizei_const_GLfloat___GENPT__
#define glProgramUniform2fv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform2fv_NOT_VOID_WRAP(...) {}
#define glProgramUniform2fvEXT_INDEX 1659
#define glProgramUniform2fvEXT_RETURN void
#define glProgramUniform2fvEXT_ARG_NAMES program, location, count, value
#define glProgramUniform2fvEXT_ARG_EXPAND GLuint program, GLint location, GLsizei count, const GLfloat * value
#define glProgramUniform2fvEXT_PACKED PACKED_void_GLuint_GLint_GLsizei_const_GLfloat___GENPT__
#define glProgramUniform2fvEXT_FORMAT FORMAT_void_GLuint_GLint_GLsizei_const_GLfloat___GENPT__
#define glProgramUniform2fvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform2fvEXT_NOT_VOID_WRAP(...) {}
#define glProgramUniform2i_INDEX 1660
#define glProgramUniform2i_RETURN void
#define glProgramUniform2i_ARG_NAMES program, location, v0, v1
#define glProgramUniform2i_ARG_EXPAND GLuint program, GLint location, GLint v0, GLint v1
#define glProgramUniform2i_PACKED PACKED_void_GLuint_GLint_GLint_GLint
#define glProgramUniform2i_FORMAT FORMAT_void_GLuint_GLint_GLint_GLint
#define glProgramUniform2i_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform2i_NOT_VOID_WRAP(...) {}
#define glProgramUniform2i64NV_INDEX 1661
#define glProgramUniform2i64NV_RETURN void
#define glProgramUniform2i64NV_ARG_NAMES program, location, x, y
#define glProgramUniform2i64NV_ARG_EXPAND GLuint program, GLint location, GLint64EXT x, GLint64EXT y
#define glProgramUniform2i64NV_PACKED PACKED_void_GLuint_GLint_GLint64EXT_GLint64EXT
#define glProgramUniform2i64NV_FORMAT FORMAT_void_GLuint_GLint_GLint64EXT_GLint64EXT
#define glProgramUniform2i64NV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform2i64NV_NOT_VOID_WRAP(...) {}
#define glProgramUniform2i64vNV_INDEX 1662
#define glProgramUniform2i64vNV_RETURN void
#define glProgramUniform2i64vNV_ARG_NAMES program, location, count, value
#define glProgramUniform2i64vNV_ARG_EXPAND GLuint program, GLint location, GLsizei count, const GLint64EXT * value
#define glProgramUniform2i64vNV_PACKED PACKED_void_GLuint_GLint_GLsizei_const_GLint64EXT___GENPT__
#define glProgramUniform2i64vNV_FORMAT FORMAT_void_GLuint_GLint_GLsizei_const_GLint64EXT___GENPT__
#define glProgramUniform2i64vNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform2i64vNV_NOT_VOID_WRAP(...) {}
#define glProgramUniform2iEXT_INDEX 1663
#define glProgramUniform2iEXT_RETURN void
#define glProgramUniform2iEXT_ARG_NAMES program, location, v0, v1
#define glProgramUniform2iEXT_ARG_EXPAND GLuint program, GLint location, GLint v0, GLint v1
#define glProgramUniform2iEXT_PACKED PACKED_void_GLuint_GLint_GLint_GLint
#define glProgramUniform2iEXT_FORMAT FORMAT_void_GLuint_GLint_GLint_GLint
#define glProgramUniform2iEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform2iEXT_NOT_VOID_WRAP(...) {}
#define glProgramUniform2iv_INDEX 1664
#define glProgramUniform2iv_RETURN void
#define glProgramUniform2iv_ARG_NAMES program, location, count, value
#define glProgramUniform2iv_ARG_EXPAND GLuint program, GLint location, GLsizei count, const GLint * value
#define glProgramUniform2iv_PACKED PACKED_void_GLuint_GLint_GLsizei_const_GLint___GENPT__
#define glProgramUniform2iv_FORMAT FORMAT_void_GLuint_GLint_GLsizei_const_GLint___GENPT__
#define glProgramUniform2iv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform2iv_NOT_VOID_WRAP(...) {}
#define glProgramUniform2ivEXT_INDEX 1665
#define glProgramUniform2ivEXT_RETURN void
#define glProgramUniform2ivEXT_ARG_NAMES program, location, count, value
#define glProgramUniform2ivEXT_ARG_EXPAND GLuint program, GLint location, GLsizei count, const GLint * value
#define glProgramUniform2ivEXT_PACKED PACKED_void_GLuint_GLint_GLsizei_const_GLint___GENPT__
#define glProgramUniform2ivEXT_FORMAT FORMAT_void_GLuint_GLint_GLsizei_const_GLint___GENPT__
#define glProgramUniform2ivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform2ivEXT_NOT_VOID_WRAP(...) {}
#define glProgramUniform2ui_INDEX 1666
#define glProgramUniform2ui_RETURN void
#define glProgramUniform2ui_ARG_NAMES program, location, v0, v1
#define glProgramUniform2ui_ARG_EXPAND GLuint program, GLint location, GLuint v0, GLuint v1
#define glProgramUniform2ui_PACKED PACKED_void_GLuint_GLint_GLuint_GLuint
#define glProgramUniform2ui_FORMAT FORMAT_void_GLuint_GLint_GLuint_GLuint
#define glProgramUniform2ui_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform2ui_NOT_VOID_WRAP(...) {}
#define glProgramUniform2ui64NV_INDEX 1667
#define glProgramUniform2ui64NV_RETURN void
#define glProgramUniform2ui64NV_ARG_NAMES program, location, x, y
#define glProgramUniform2ui64NV_ARG_EXPAND GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y
#define glProgramUniform2ui64NV_PACKED PACKED_void_GLuint_GLint_GLuint64EXT_GLuint64EXT
#define glProgramUniform2ui64NV_FORMAT FORMAT_void_GLuint_GLint_GLuint64EXT_GLuint64EXT
#define glProgramUniform2ui64NV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform2ui64NV_NOT_VOID_WRAP(...) {}
#define glProgramUniform2ui64vNV_INDEX 1668
#define glProgramUniform2ui64vNV_RETURN void
#define glProgramUniform2ui64vNV_ARG_NAMES program, location, count, value
#define glProgramUniform2ui64vNV_ARG_EXPAND GLuint program, GLint location, GLsizei count, const GLuint64EXT * value
#define glProgramUniform2ui64vNV_PACKED PACKED_void_GLuint_GLint_GLsizei_const_GLuint64EXT___GENPT__
#define glProgramUniform2ui64vNV_FORMAT FORMAT_void_GLuint_GLint_GLsizei_const_GLuint64EXT___GENPT__
#define glProgramUniform2ui64vNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform2ui64vNV_NOT_VOID_WRAP(...) {}
#define glProgramUniform2uiEXT_INDEX 1669
#define glProgramUniform2uiEXT_RETURN void
#define glProgramUniform2uiEXT_ARG_NAMES program, location, v0, v1
#define glProgramUniform2uiEXT_ARG_EXPAND GLuint program, GLint location, GLuint v0, GLuint v1
#define glProgramUniform2uiEXT_PACKED PACKED_void_GLuint_GLint_GLuint_GLuint
#define glProgramUniform2uiEXT_FORMAT FORMAT_void_GLuint_GLint_GLuint_GLuint
#define glProgramUniform2uiEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform2uiEXT_NOT_VOID_WRAP(...) {}
#define glProgramUniform2uiv_INDEX 1670
#define glProgramUniform2uiv_RETURN void
#define glProgramUniform2uiv_ARG_NAMES program, location, count, value
#define glProgramUniform2uiv_ARG_EXPAND GLuint program, GLint location, GLsizei count, const GLuint * value
#define glProgramUniform2uiv_PACKED PACKED_void_GLuint_GLint_GLsizei_const_GLuint___GENPT__
#define glProgramUniform2uiv_FORMAT FORMAT_void_GLuint_GLint_GLsizei_const_GLuint___GENPT__
#define glProgramUniform2uiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform2uiv_NOT_VOID_WRAP(...) {}
#define glProgramUniform2uivEXT_INDEX 1671
#define glProgramUniform2uivEXT_RETURN void
#define glProgramUniform2uivEXT_ARG_NAMES program, location, count, value
#define glProgramUniform2uivEXT_ARG_EXPAND GLuint program, GLint location, GLsizei count, const GLuint * value
#define glProgramUniform2uivEXT_PACKED PACKED_void_GLuint_GLint_GLsizei_const_GLuint___GENPT__
#define glProgramUniform2uivEXT_FORMAT FORMAT_void_GLuint_GLint_GLsizei_const_GLuint___GENPT__
#define glProgramUniform2uivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform2uivEXT_NOT_VOID_WRAP(...) {}
#define glProgramUniform3d_INDEX 1672
#define glProgramUniform3d_RETURN void
#define glProgramUniform3d_ARG_NAMES program, location, v0, v1, v2
#define glProgramUniform3d_ARG_EXPAND GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2
#define glProgramUniform3d_PACKED PACKED_void_GLuint_GLint_GLdouble_GLdouble_GLdouble
#define glProgramUniform3d_FORMAT FORMAT_void_GLuint_GLint_GLdouble_GLdouble_GLdouble
#define glProgramUniform3d_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform3d_NOT_VOID_WRAP(...) {}
#define glProgramUniform3dEXT_INDEX 1673
#define glProgramUniform3dEXT_RETURN void
#define glProgramUniform3dEXT_ARG_NAMES program, location, x, y, z
#define glProgramUniform3dEXT_ARG_EXPAND GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z
#define glProgramUniform3dEXT_PACKED PACKED_void_GLuint_GLint_GLdouble_GLdouble_GLdouble
#define glProgramUniform3dEXT_FORMAT FORMAT_void_GLuint_GLint_GLdouble_GLdouble_GLdouble
#define glProgramUniform3dEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform3dEXT_NOT_VOID_WRAP(...) {}
#define glProgramUniform3dv_INDEX 1674
#define glProgramUniform3dv_RETURN void
#define glProgramUniform3dv_ARG_NAMES program, location, count, value
#define glProgramUniform3dv_ARG_EXPAND GLuint program, GLint location, GLsizei count, const GLdouble * value
#define glProgramUniform3dv_PACKED PACKED_void_GLuint_GLint_GLsizei_const_GLdouble___GENPT__
#define glProgramUniform3dv_FORMAT FORMAT_void_GLuint_GLint_GLsizei_const_GLdouble___GENPT__
#define glProgramUniform3dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform3dv_NOT_VOID_WRAP(...) {}
#define glProgramUniform3dvEXT_INDEX 1675
#define glProgramUniform3dvEXT_RETURN void
#define glProgramUniform3dvEXT_ARG_NAMES program, location, count, value
#define glProgramUniform3dvEXT_ARG_EXPAND GLuint program, GLint location, GLsizei count, const GLdouble * value
#define glProgramUniform3dvEXT_PACKED PACKED_void_GLuint_GLint_GLsizei_const_GLdouble___GENPT__
#define glProgramUniform3dvEXT_FORMAT FORMAT_void_GLuint_GLint_GLsizei_const_GLdouble___GENPT__
#define glProgramUniform3dvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform3dvEXT_NOT_VOID_WRAP(...) {}
#define glProgramUniform3f_INDEX 1676
#define glProgramUniform3f_RETURN void
#define glProgramUniform3f_ARG_NAMES program, location, v0, v1, v2
#define glProgramUniform3f_ARG_EXPAND GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2
#define glProgramUniform3f_PACKED PACKED_void_GLuint_GLint_GLfloat_GLfloat_GLfloat
#define glProgramUniform3f_FORMAT FORMAT_void_GLuint_GLint_GLfloat_GLfloat_GLfloat
#define glProgramUniform3f_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform3f_NOT_VOID_WRAP(...) {}
#define glProgramUniform3fEXT_INDEX 1677
#define glProgramUniform3fEXT_RETURN void
#define glProgramUniform3fEXT_ARG_NAMES program, location, v0, v1, v2
#define glProgramUniform3fEXT_ARG_EXPAND GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2
#define glProgramUniform3fEXT_PACKED PACKED_void_GLuint_GLint_GLfloat_GLfloat_GLfloat
#define glProgramUniform3fEXT_FORMAT FORMAT_void_GLuint_GLint_GLfloat_GLfloat_GLfloat
#define glProgramUniform3fEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform3fEXT_NOT_VOID_WRAP(...) {}
#define glProgramUniform3fv_INDEX 1678
#define glProgramUniform3fv_RETURN void
#define glProgramUniform3fv_ARG_NAMES program, location, count, value
#define glProgramUniform3fv_ARG_EXPAND GLuint program, GLint location, GLsizei count, const GLfloat * value
#define glProgramUniform3fv_PACKED PACKED_void_GLuint_GLint_GLsizei_const_GLfloat___GENPT__
#define glProgramUniform3fv_FORMAT FORMAT_void_GLuint_GLint_GLsizei_const_GLfloat___GENPT__
#define glProgramUniform3fv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform3fv_NOT_VOID_WRAP(...) {}
#define glProgramUniform3fvEXT_INDEX 1679
#define glProgramUniform3fvEXT_RETURN void
#define glProgramUniform3fvEXT_ARG_NAMES program, location, count, value
#define glProgramUniform3fvEXT_ARG_EXPAND GLuint program, GLint location, GLsizei count, const GLfloat * value
#define glProgramUniform3fvEXT_PACKED PACKED_void_GLuint_GLint_GLsizei_const_GLfloat___GENPT__
#define glProgramUniform3fvEXT_FORMAT FORMAT_void_GLuint_GLint_GLsizei_const_GLfloat___GENPT__
#define glProgramUniform3fvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform3fvEXT_NOT_VOID_WRAP(...) {}
#define glProgramUniform3i_INDEX 1680
#define glProgramUniform3i_RETURN void
#define glProgramUniform3i_ARG_NAMES program, location, v0, v1, v2
#define glProgramUniform3i_ARG_EXPAND GLuint program, GLint location, GLint v0, GLint v1, GLint v2
#define glProgramUniform3i_PACKED PACKED_void_GLuint_GLint_GLint_GLint_GLint
#define glProgramUniform3i_FORMAT FORMAT_void_GLuint_GLint_GLint_GLint_GLint
#define glProgramUniform3i_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform3i_NOT_VOID_WRAP(...) {}
#define glProgramUniform3i64NV_INDEX 1681
#define glProgramUniform3i64NV_RETURN void
#define glProgramUniform3i64NV_ARG_NAMES program, location, x, y, z
#define glProgramUniform3i64NV_ARG_EXPAND GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z
#define glProgramUniform3i64NV_PACKED PACKED_void_GLuint_GLint_GLint64EXT_GLint64EXT_GLint64EXT
#define glProgramUniform3i64NV_FORMAT FORMAT_void_GLuint_GLint_GLint64EXT_GLint64EXT_GLint64EXT
#define glProgramUniform3i64NV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform3i64NV_NOT_VOID_WRAP(...) {}
#define glProgramUniform3i64vNV_INDEX 1682
#define glProgramUniform3i64vNV_RETURN void
#define glProgramUniform3i64vNV_ARG_NAMES program, location, count, value
#define glProgramUniform3i64vNV_ARG_EXPAND GLuint program, GLint location, GLsizei count, const GLint64EXT * value
#define glProgramUniform3i64vNV_PACKED PACKED_void_GLuint_GLint_GLsizei_const_GLint64EXT___GENPT__
#define glProgramUniform3i64vNV_FORMAT FORMAT_void_GLuint_GLint_GLsizei_const_GLint64EXT___GENPT__
#define glProgramUniform3i64vNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform3i64vNV_NOT_VOID_WRAP(...) {}
#define glProgramUniform3iEXT_INDEX 1683
#define glProgramUniform3iEXT_RETURN void
#define glProgramUniform3iEXT_ARG_NAMES program, location, v0, v1, v2
#define glProgramUniform3iEXT_ARG_EXPAND GLuint program, GLint location, GLint v0, GLint v1, GLint v2
#define glProgramUniform3iEXT_PACKED PACKED_void_GLuint_GLint_GLint_GLint_GLint
#define glProgramUniform3iEXT_FORMAT FORMAT_void_GLuint_GLint_GLint_GLint_GLint
#define glProgramUniform3iEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform3iEXT_NOT_VOID_WRAP(...) {}
#define glProgramUniform3iv_INDEX 1684
#define glProgramUniform3iv_RETURN void
#define glProgramUniform3iv_ARG_NAMES program, location, count, value
#define glProgramUniform3iv_ARG_EXPAND GLuint program, GLint location, GLsizei count, const GLint * value
#define glProgramUniform3iv_PACKED PACKED_void_GLuint_GLint_GLsizei_const_GLint___GENPT__
#define glProgramUniform3iv_FORMAT FORMAT_void_GLuint_GLint_GLsizei_const_GLint___GENPT__
#define glProgramUniform3iv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform3iv_NOT_VOID_WRAP(...) {}
#define glProgramUniform3ivEXT_INDEX 1685
#define glProgramUniform3ivEXT_RETURN void
#define glProgramUniform3ivEXT_ARG_NAMES program, location, count, value
#define glProgramUniform3ivEXT_ARG_EXPAND GLuint program, GLint location, GLsizei count, const GLint * value
#define glProgramUniform3ivEXT_PACKED PACKED_void_GLuint_GLint_GLsizei_const_GLint___GENPT__
#define glProgramUniform3ivEXT_FORMAT FORMAT_void_GLuint_GLint_GLsizei_const_GLint___GENPT__
#define glProgramUniform3ivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform3ivEXT_NOT_VOID_WRAP(...) {}
#define glProgramUniform3ui_INDEX 1686
#define glProgramUniform3ui_RETURN void
#define glProgramUniform3ui_ARG_NAMES program, location, v0, v1, v2
#define glProgramUniform3ui_ARG_EXPAND GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2
#define glProgramUniform3ui_PACKED PACKED_void_GLuint_GLint_GLuint_GLuint_GLuint
#define glProgramUniform3ui_FORMAT FORMAT_void_GLuint_GLint_GLuint_GLuint_GLuint
#define glProgramUniform3ui_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform3ui_NOT_VOID_WRAP(...) {}
#define glProgramUniform3ui64NV_INDEX 1687
#define glProgramUniform3ui64NV_RETURN void
#define glProgramUniform3ui64NV_ARG_NAMES program, location, x, y, z
#define glProgramUniform3ui64NV_ARG_EXPAND GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z
#define glProgramUniform3ui64NV_PACKED PACKED_void_GLuint_GLint_GLuint64EXT_GLuint64EXT_GLuint64EXT
#define glProgramUniform3ui64NV_FORMAT FORMAT_void_GLuint_GLint_GLuint64EXT_GLuint64EXT_GLuint64EXT
#define glProgramUniform3ui64NV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform3ui64NV_NOT_VOID_WRAP(...) {}
#define glProgramUniform3ui64vNV_INDEX 1688
#define glProgramUniform3ui64vNV_RETURN void
#define glProgramUniform3ui64vNV_ARG_NAMES program, location, count, value
#define glProgramUniform3ui64vNV_ARG_EXPAND GLuint program, GLint location, GLsizei count, const GLuint64EXT * value
#define glProgramUniform3ui64vNV_PACKED PACKED_void_GLuint_GLint_GLsizei_const_GLuint64EXT___GENPT__
#define glProgramUniform3ui64vNV_FORMAT FORMAT_void_GLuint_GLint_GLsizei_const_GLuint64EXT___GENPT__
#define glProgramUniform3ui64vNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform3ui64vNV_NOT_VOID_WRAP(...) {}
#define glProgramUniform3uiEXT_INDEX 1689
#define glProgramUniform3uiEXT_RETURN void
#define glProgramUniform3uiEXT_ARG_NAMES program, location, v0, v1, v2
#define glProgramUniform3uiEXT_ARG_EXPAND GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2
#define glProgramUniform3uiEXT_PACKED PACKED_void_GLuint_GLint_GLuint_GLuint_GLuint
#define glProgramUniform3uiEXT_FORMAT FORMAT_void_GLuint_GLint_GLuint_GLuint_GLuint
#define glProgramUniform3uiEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform3uiEXT_NOT_VOID_WRAP(...) {}
#define glProgramUniform3uiv_INDEX 1690
#define glProgramUniform3uiv_RETURN void
#define glProgramUniform3uiv_ARG_NAMES program, location, count, value
#define glProgramUniform3uiv_ARG_EXPAND GLuint program, GLint location, GLsizei count, const GLuint * value
#define glProgramUniform3uiv_PACKED PACKED_void_GLuint_GLint_GLsizei_const_GLuint___GENPT__
#define glProgramUniform3uiv_FORMAT FORMAT_void_GLuint_GLint_GLsizei_const_GLuint___GENPT__
#define glProgramUniform3uiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform3uiv_NOT_VOID_WRAP(...) {}
#define glProgramUniform3uivEXT_INDEX 1691
#define glProgramUniform3uivEXT_RETURN void
#define glProgramUniform3uivEXT_ARG_NAMES program, location, count, value
#define glProgramUniform3uivEXT_ARG_EXPAND GLuint program, GLint location, GLsizei count, const GLuint * value
#define glProgramUniform3uivEXT_PACKED PACKED_void_GLuint_GLint_GLsizei_const_GLuint___GENPT__
#define glProgramUniform3uivEXT_FORMAT FORMAT_void_GLuint_GLint_GLsizei_const_GLuint___GENPT__
#define glProgramUniform3uivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform3uivEXT_NOT_VOID_WRAP(...) {}
#define glProgramUniform4d_INDEX 1692
#define glProgramUniform4d_RETURN void
#define glProgramUniform4d_ARG_NAMES program, location, v0, v1, v2, v3
#define glProgramUniform4d_ARG_EXPAND GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3
#define glProgramUniform4d_PACKED PACKED_void_GLuint_GLint_GLdouble_GLdouble_GLdouble_GLdouble
#define glProgramUniform4d_FORMAT FORMAT_void_GLuint_GLint_GLdouble_GLdouble_GLdouble_GLdouble
#define glProgramUniform4d_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform4d_NOT_VOID_WRAP(...) {}
#define glProgramUniform4dEXT_INDEX 1693
#define glProgramUniform4dEXT_RETURN void
#define glProgramUniform4dEXT_ARG_NAMES program, location, x, y, z, w
#define glProgramUniform4dEXT_ARG_EXPAND GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w
#define glProgramUniform4dEXT_PACKED PACKED_void_GLuint_GLint_GLdouble_GLdouble_GLdouble_GLdouble
#define glProgramUniform4dEXT_FORMAT FORMAT_void_GLuint_GLint_GLdouble_GLdouble_GLdouble_GLdouble
#define glProgramUniform4dEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform4dEXT_NOT_VOID_WRAP(...) {}
#define glProgramUniform4dv_INDEX 1694
#define glProgramUniform4dv_RETURN void
#define glProgramUniform4dv_ARG_NAMES program, location, count, value
#define glProgramUniform4dv_ARG_EXPAND GLuint program, GLint location, GLsizei count, const GLdouble * value
#define glProgramUniform4dv_PACKED PACKED_void_GLuint_GLint_GLsizei_const_GLdouble___GENPT__
#define glProgramUniform4dv_FORMAT FORMAT_void_GLuint_GLint_GLsizei_const_GLdouble___GENPT__
#define glProgramUniform4dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform4dv_NOT_VOID_WRAP(...) {}
#define glProgramUniform4dvEXT_INDEX 1695
#define glProgramUniform4dvEXT_RETURN void
#define glProgramUniform4dvEXT_ARG_NAMES program, location, count, value
#define glProgramUniform4dvEXT_ARG_EXPAND GLuint program, GLint location, GLsizei count, const GLdouble * value
#define glProgramUniform4dvEXT_PACKED PACKED_void_GLuint_GLint_GLsizei_const_GLdouble___GENPT__
#define glProgramUniform4dvEXT_FORMAT FORMAT_void_GLuint_GLint_GLsizei_const_GLdouble___GENPT__
#define glProgramUniform4dvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform4dvEXT_NOT_VOID_WRAP(...) {}
#define glProgramUniform4f_INDEX 1696
#define glProgramUniform4f_RETURN void
#define glProgramUniform4f_ARG_NAMES program, location, v0, v1, v2, v3
#define glProgramUniform4f_ARG_EXPAND GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3
#define glProgramUniform4f_PACKED PACKED_void_GLuint_GLint_GLfloat_GLfloat_GLfloat_GLfloat
#define glProgramUniform4f_FORMAT FORMAT_void_GLuint_GLint_GLfloat_GLfloat_GLfloat_GLfloat
#define glProgramUniform4f_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform4f_NOT_VOID_WRAP(...) {}
#define glProgramUniform4fEXT_INDEX 1697
#define glProgramUniform4fEXT_RETURN void
#define glProgramUniform4fEXT_ARG_NAMES program, location, v0, v1, v2, v3
#define glProgramUniform4fEXT_ARG_EXPAND GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3
#define glProgramUniform4fEXT_PACKED PACKED_void_GLuint_GLint_GLfloat_GLfloat_GLfloat_GLfloat
#define glProgramUniform4fEXT_FORMAT FORMAT_void_GLuint_GLint_GLfloat_GLfloat_GLfloat_GLfloat
#define glProgramUniform4fEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform4fEXT_NOT_VOID_WRAP(...) {}
#define glProgramUniform4fv_INDEX 1698
#define glProgramUniform4fv_RETURN void
#define glProgramUniform4fv_ARG_NAMES program, location, count, value
#define glProgramUniform4fv_ARG_EXPAND GLuint program, GLint location, GLsizei count, const GLfloat * value
#define glProgramUniform4fv_PACKED PACKED_void_GLuint_GLint_GLsizei_const_GLfloat___GENPT__
#define glProgramUniform4fv_FORMAT FORMAT_void_GLuint_GLint_GLsizei_const_GLfloat___GENPT__
#define glProgramUniform4fv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform4fv_NOT_VOID_WRAP(...) {}
#define glProgramUniform4fvEXT_INDEX 1699
#define glProgramUniform4fvEXT_RETURN void
#define glProgramUniform4fvEXT_ARG_NAMES program, location, count, value
#define glProgramUniform4fvEXT_ARG_EXPAND GLuint program, GLint location, GLsizei count, const GLfloat * value
#define glProgramUniform4fvEXT_PACKED PACKED_void_GLuint_GLint_GLsizei_const_GLfloat___GENPT__
#define glProgramUniform4fvEXT_FORMAT FORMAT_void_GLuint_GLint_GLsizei_const_GLfloat___GENPT__
#define glProgramUniform4fvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform4fvEXT_NOT_VOID_WRAP(...) {}
#define glProgramUniform4i_INDEX 1700
#define glProgramUniform4i_RETURN void
#define glProgramUniform4i_ARG_NAMES program, location, v0, v1, v2, v3
#define glProgramUniform4i_ARG_EXPAND GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3
#define glProgramUniform4i_PACKED PACKED_void_GLuint_GLint_GLint_GLint_GLint_GLint
#define glProgramUniform4i_FORMAT FORMAT_void_GLuint_GLint_GLint_GLint_GLint_GLint
#define glProgramUniform4i_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform4i_NOT_VOID_WRAP(...) {}
#define glProgramUniform4i64NV_INDEX 1701
#define glProgramUniform4i64NV_RETURN void
#define glProgramUniform4i64NV_ARG_NAMES program, location, x, y, z, w
#define glProgramUniform4i64NV_ARG_EXPAND GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w
#define glProgramUniform4i64NV_PACKED PACKED_void_GLuint_GLint_GLint64EXT_GLint64EXT_GLint64EXT_GLint64EXT
#define glProgramUniform4i64NV_FORMAT FORMAT_void_GLuint_GLint_GLint64EXT_GLint64EXT_GLint64EXT_GLint64EXT
#define glProgramUniform4i64NV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform4i64NV_NOT_VOID_WRAP(...) {}
#define glProgramUniform4i64vNV_INDEX 1702
#define glProgramUniform4i64vNV_RETURN void
#define glProgramUniform4i64vNV_ARG_NAMES program, location, count, value
#define glProgramUniform4i64vNV_ARG_EXPAND GLuint program, GLint location, GLsizei count, const GLint64EXT * value
#define glProgramUniform4i64vNV_PACKED PACKED_void_GLuint_GLint_GLsizei_const_GLint64EXT___GENPT__
#define glProgramUniform4i64vNV_FORMAT FORMAT_void_GLuint_GLint_GLsizei_const_GLint64EXT___GENPT__
#define glProgramUniform4i64vNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform4i64vNV_NOT_VOID_WRAP(...) {}
#define glProgramUniform4iEXT_INDEX 1703
#define glProgramUniform4iEXT_RETURN void
#define glProgramUniform4iEXT_ARG_NAMES program, location, v0, v1, v2, v3
#define glProgramUniform4iEXT_ARG_EXPAND GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3
#define glProgramUniform4iEXT_PACKED PACKED_void_GLuint_GLint_GLint_GLint_GLint_GLint
#define glProgramUniform4iEXT_FORMAT FORMAT_void_GLuint_GLint_GLint_GLint_GLint_GLint
#define glProgramUniform4iEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform4iEXT_NOT_VOID_WRAP(...) {}
#define glProgramUniform4iv_INDEX 1704
#define glProgramUniform4iv_RETURN void
#define glProgramUniform4iv_ARG_NAMES program, location, count, value
#define glProgramUniform4iv_ARG_EXPAND GLuint program, GLint location, GLsizei count, const GLint * value
#define glProgramUniform4iv_PACKED PACKED_void_GLuint_GLint_GLsizei_const_GLint___GENPT__
#define glProgramUniform4iv_FORMAT FORMAT_void_GLuint_GLint_GLsizei_const_GLint___GENPT__
#define glProgramUniform4iv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform4iv_NOT_VOID_WRAP(...) {}
#define glProgramUniform4ivEXT_INDEX 1705
#define glProgramUniform4ivEXT_RETURN void
#define glProgramUniform4ivEXT_ARG_NAMES program, location, count, value
#define glProgramUniform4ivEXT_ARG_EXPAND GLuint program, GLint location, GLsizei count, const GLint * value
#define glProgramUniform4ivEXT_PACKED PACKED_void_GLuint_GLint_GLsizei_const_GLint___GENPT__
#define glProgramUniform4ivEXT_FORMAT FORMAT_void_GLuint_GLint_GLsizei_const_GLint___GENPT__
#define glProgramUniform4ivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform4ivEXT_NOT_VOID_WRAP(...) {}
#define glProgramUniform4ui_INDEX 1706
#define glProgramUniform4ui_RETURN void
#define glProgramUniform4ui_ARG_NAMES program, location, v0, v1, v2, v3
#define glProgramUniform4ui_ARG_EXPAND GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3
#define glProgramUniform4ui_PACKED PACKED_void_GLuint_GLint_GLuint_GLuint_GLuint_GLuint
#define glProgramUniform4ui_FORMAT FORMAT_void_GLuint_GLint_GLuint_GLuint_GLuint_GLuint
#define glProgramUniform4ui_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform4ui_NOT_VOID_WRAP(...) {}
#define glProgramUniform4ui64NV_INDEX 1707
#define glProgramUniform4ui64NV_RETURN void
#define glProgramUniform4ui64NV_ARG_NAMES program, location, x, y, z, w
#define glProgramUniform4ui64NV_ARG_EXPAND GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w
#define glProgramUniform4ui64NV_PACKED PACKED_void_GLuint_GLint_GLuint64EXT_GLuint64EXT_GLuint64EXT_GLuint64EXT
#define glProgramUniform4ui64NV_FORMAT FORMAT_void_GLuint_GLint_GLuint64EXT_GLuint64EXT_GLuint64EXT_GLuint64EXT
#define glProgramUniform4ui64NV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform4ui64NV_NOT_VOID_WRAP(...) {}
#define glProgramUniform4ui64vNV_INDEX 1708
#define glProgramUniform4ui64vNV_RETURN void
#define glProgramUniform4ui64vNV_ARG_NAMES program, location, count, value
#define glProgramUniform4ui64vNV_ARG_EXPAND GLuint program, GLint location, GLsizei count, const GLuint64EXT * value
#define glProgramUniform4ui64vNV_PACKED PACKED_void_GLuint_GLint_GLsizei_const_GLuint64EXT___GENPT__
#define glProgramUniform4ui64vNV_FORMAT FORMAT_void_GLuint_GLint_GLsizei_const_GLuint64EXT___GENPT__
#define glProgramUniform4ui64vNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform4ui64vNV_NOT_VOID_WRAP(...) {}
#define glProgramUniform4uiEXT_INDEX 1709
#define glProgramUniform4uiEXT_RETURN void
#define glProgramUniform4uiEXT_ARG_NAMES program, location, v0, v1, v2, v3
#define glProgramUniform4uiEXT_ARG_EXPAND GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3
#define glProgramUniform4uiEXT_PACKED PACKED_void_GLuint_GLint_GLuint_GLuint_GLuint_GLuint
#define glProgramUniform4uiEXT_FORMAT FORMAT_void_GLuint_GLint_GLuint_GLuint_GLuint_GLuint
#define glProgramUniform4uiEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform4uiEXT_NOT_VOID_WRAP(...) {}
#define glProgramUniform4uiv_INDEX 1710
#define glProgramUniform4uiv_RETURN void
#define glProgramUniform4uiv_ARG_NAMES program, location, count, value
#define glProgramUniform4uiv_ARG_EXPAND GLuint program, GLint location, GLsizei count, const GLuint * value
#define glProgramUniform4uiv_PACKED PACKED_void_GLuint_GLint_GLsizei_const_GLuint___GENPT__
#define glProgramUniform4uiv_FORMAT FORMAT_void_GLuint_GLint_GLsizei_const_GLuint___GENPT__
#define glProgramUniform4uiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform4uiv_NOT_VOID_WRAP(...) {}
#define glProgramUniform4uivEXT_INDEX 1711
#define glProgramUniform4uivEXT_RETURN void
#define glProgramUniform4uivEXT_ARG_NAMES program, location, count, value
#define glProgramUniform4uivEXT_ARG_EXPAND GLuint program, GLint location, GLsizei count, const GLuint * value
#define glProgramUniform4uivEXT_PACKED PACKED_void_GLuint_GLint_GLsizei_const_GLuint___GENPT__
#define glProgramUniform4uivEXT_FORMAT FORMAT_void_GLuint_GLint_GLsizei_const_GLuint___GENPT__
#define glProgramUniform4uivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniform4uivEXT_NOT_VOID_WRAP(...) {}
#define glProgramUniformHandleui64NV_INDEX 1712
#define glProgramUniformHandleui64NV_RETURN void
#define glProgramUniformHandleui64NV_ARG_NAMES program, location, value
#define glProgramUniformHandleui64NV_ARG_EXPAND GLuint program, GLint location, GLuint64 value
#define glProgramUniformHandleui64NV_PACKED PACKED_void_GLuint_GLint_GLuint64
#define glProgramUniformHandleui64NV_FORMAT FORMAT_void_GLuint_GLint_GLuint64
#define glProgramUniformHandleui64NV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniformHandleui64NV_NOT_VOID_WRAP(...) {}
#define glProgramUniformHandleui64vNV_INDEX 1713
#define glProgramUniformHandleui64vNV_RETURN void
#define glProgramUniformHandleui64vNV_ARG_NAMES program, location, count, values
#define glProgramUniformHandleui64vNV_ARG_EXPAND GLuint program, GLint location, GLsizei count, const GLuint64 * values
#define glProgramUniformHandleui64vNV_PACKED PACKED_void_GLuint_GLint_GLsizei_const_GLuint64___GENPT__
#define glProgramUniformHandleui64vNV_FORMAT FORMAT_void_GLuint_GLint_GLsizei_const_GLuint64___GENPT__
#define glProgramUniformHandleui64vNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniformHandleui64vNV_NOT_VOID_WRAP(...) {}
#define glProgramUniformMatrix2dv_INDEX 1714
#define glProgramUniformMatrix2dv_RETURN void
#define glProgramUniformMatrix2dv_ARG_NAMES program, location, count, transpose, value
#define glProgramUniformMatrix2dv_ARG_EXPAND GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value
#define glProgramUniformMatrix2dv_PACKED PACKED_void_GLuint_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__
#define glProgramUniformMatrix2dv_FORMAT FORMAT_void_GLuint_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__
#define glProgramUniformMatrix2dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniformMatrix2dv_NOT_VOID_WRAP(...) {}
#define glProgramUniformMatrix2dvEXT_INDEX 1715
#define glProgramUniformMatrix2dvEXT_RETURN void
#define glProgramUniformMatrix2dvEXT_ARG_NAMES program, location, count, transpose, value
#define glProgramUniformMatrix2dvEXT_ARG_EXPAND GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value
#define glProgramUniformMatrix2dvEXT_PACKED PACKED_void_GLuint_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__
#define glProgramUniformMatrix2dvEXT_FORMAT FORMAT_void_GLuint_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__
#define glProgramUniformMatrix2dvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniformMatrix2dvEXT_NOT_VOID_WRAP(...) {}
#define glProgramUniformMatrix2fv_INDEX 1716
#define glProgramUniformMatrix2fv_RETURN void
#define glProgramUniformMatrix2fv_ARG_NAMES program, location, count, transpose, value
#define glProgramUniformMatrix2fv_ARG_EXPAND GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value
#define glProgramUniformMatrix2fv_PACKED PACKED_void_GLuint_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glProgramUniformMatrix2fv_FORMAT FORMAT_void_GLuint_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glProgramUniformMatrix2fv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniformMatrix2fv_NOT_VOID_WRAP(...) {}
#define glProgramUniformMatrix2fvEXT_INDEX 1717
#define glProgramUniformMatrix2fvEXT_RETURN void
#define glProgramUniformMatrix2fvEXT_ARG_NAMES program, location, count, transpose, value
#define glProgramUniformMatrix2fvEXT_ARG_EXPAND GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value
#define glProgramUniformMatrix2fvEXT_PACKED PACKED_void_GLuint_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glProgramUniformMatrix2fvEXT_FORMAT FORMAT_void_GLuint_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glProgramUniformMatrix2fvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniformMatrix2fvEXT_NOT_VOID_WRAP(...) {}
#define glProgramUniformMatrix2x3dv_INDEX 1718
#define glProgramUniformMatrix2x3dv_RETURN void
#define glProgramUniformMatrix2x3dv_ARG_NAMES program, location, count, transpose, value
#define glProgramUniformMatrix2x3dv_ARG_EXPAND GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value
#define glProgramUniformMatrix2x3dv_PACKED PACKED_void_GLuint_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__
#define glProgramUniformMatrix2x3dv_FORMAT FORMAT_void_GLuint_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__
#define glProgramUniformMatrix2x3dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniformMatrix2x3dv_NOT_VOID_WRAP(...) {}
#define glProgramUniformMatrix2x3dvEXT_INDEX 1719
#define glProgramUniformMatrix2x3dvEXT_RETURN void
#define glProgramUniformMatrix2x3dvEXT_ARG_NAMES program, location, count, transpose, value
#define glProgramUniformMatrix2x3dvEXT_ARG_EXPAND GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value
#define glProgramUniformMatrix2x3dvEXT_PACKED PACKED_void_GLuint_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__
#define glProgramUniformMatrix2x3dvEXT_FORMAT FORMAT_void_GLuint_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__
#define glProgramUniformMatrix2x3dvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniformMatrix2x3dvEXT_NOT_VOID_WRAP(...) {}
#define glProgramUniformMatrix2x3fv_INDEX 1720
#define glProgramUniformMatrix2x3fv_RETURN void
#define glProgramUniformMatrix2x3fv_ARG_NAMES program, location, count, transpose, value
#define glProgramUniformMatrix2x3fv_ARG_EXPAND GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value
#define glProgramUniformMatrix2x3fv_PACKED PACKED_void_GLuint_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glProgramUniformMatrix2x3fv_FORMAT FORMAT_void_GLuint_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glProgramUniformMatrix2x3fv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniformMatrix2x3fv_NOT_VOID_WRAP(...) {}
#define glProgramUniformMatrix2x3fvEXT_INDEX 1721
#define glProgramUniformMatrix2x3fvEXT_RETURN void
#define glProgramUniformMatrix2x3fvEXT_ARG_NAMES program, location, count, transpose, value
#define glProgramUniformMatrix2x3fvEXT_ARG_EXPAND GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value
#define glProgramUniformMatrix2x3fvEXT_PACKED PACKED_void_GLuint_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glProgramUniformMatrix2x3fvEXT_FORMAT FORMAT_void_GLuint_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glProgramUniformMatrix2x3fvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniformMatrix2x3fvEXT_NOT_VOID_WRAP(...) {}
#define glProgramUniformMatrix2x4dv_INDEX 1722
#define glProgramUniformMatrix2x4dv_RETURN void
#define glProgramUniformMatrix2x4dv_ARG_NAMES program, location, count, transpose, value
#define glProgramUniformMatrix2x4dv_ARG_EXPAND GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value
#define glProgramUniformMatrix2x4dv_PACKED PACKED_void_GLuint_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__
#define glProgramUniformMatrix2x4dv_FORMAT FORMAT_void_GLuint_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__
#define glProgramUniformMatrix2x4dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniformMatrix2x4dv_NOT_VOID_WRAP(...) {}
#define glProgramUniformMatrix2x4dvEXT_INDEX 1723
#define glProgramUniformMatrix2x4dvEXT_RETURN void
#define glProgramUniformMatrix2x4dvEXT_ARG_NAMES program, location, count, transpose, value
#define glProgramUniformMatrix2x4dvEXT_ARG_EXPAND GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value
#define glProgramUniformMatrix2x4dvEXT_PACKED PACKED_void_GLuint_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__
#define glProgramUniformMatrix2x4dvEXT_FORMAT FORMAT_void_GLuint_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__
#define glProgramUniformMatrix2x4dvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniformMatrix2x4dvEXT_NOT_VOID_WRAP(...) {}
#define glProgramUniformMatrix2x4fv_INDEX 1724
#define glProgramUniformMatrix2x4fv_RETURN void
#define glProgramUniformMatrix2x4fv_ARG_NAMES program, location, count, transpose, value
#define glProgramUniformMatrix2x4fv_ARG_EXPAND GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value
#define glProgramUniformMatrix2x4fv_PACKED PACKED_void_GLuint_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glProgramUniformMatrix2x4fv_FORMAT FORMAT_void_GLuint_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glProgramUniformMatrix2x4fv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniformMatrix2x4fv_NOT_VOID_WRAP(...) {}
#define glProgramUniformMatrix2x4fvEXT_INDEX 1725
#define glProgramUniformMatrix2x4fvEXT_RETURN void
#define glProgramUniformMatrix2x4fvEXT_ARG_NAMES program, location, count, transpose, value
#define glProgramUniformMatrix2x4fvEXT_ARG_EXPAND GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value
#define glProgramUniformMatrix2x4fvEXT_PACKED PACKED_void_GLuint_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glProgramUniformMatrix2x4fvEXT_FORMAT FORMAT_void_GLuint_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glProgramUniformMatrix2x4fvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniformMatrix2x4fvEXT_NOT_VOID_WRAP(...) {}
#define glProgramUniformMatrix3dv_INDEX 1726
#define glProgramUniformMatrix3dv_RETURN void
#define glProgramUniformMatrix3dv_ARG_NAMES program, location, count, transpose, value
#define glProgramUniformMatrix3dv_ARG_EXPAND GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value
#define glProgramUniformMatrix3dv_PACKED PACKED_void_GLuint_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__
#define glProgramUniformMatrix3dv_FORMAT FORMAT_void_GLuint_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__
#define glProgramUniformMatrix3dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniformMatrix3dv_NOT_VOID_WRAP(...) {}
#define glProgramUniformMatrix3dvEXT_INDEX 1727
#define glProgramUniformMatrix3dvEXT_RETURN void
#define glProgramUniformMatrix3dvEXT_ARG_NAMES program, location, count, transpose, value
#define glProgramUniformMatrix3dvEXT_ARG_EXPAND GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value
#define glProgramUniformMatrix3dvEXT_PACKED PACKED_void_GLuint_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__
#define glProgramUniformMatrix3dvEXT_FORMAT FORMAT_void_GLuint_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__
#define glProgramUniformMatrix3dvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniformMatrix3dvEXT_NOT_VOID_WRAP(...) {}
#define glProgramUniformMatrix3fv_INDEX 1728
#define glProgramUniformMatrix3fv_RETURN void
#define glProgramUniformMatrix3fv_ARG_NAMES program, location, count, transpose, value
#define glProgramUniformMatrix3fv_ARG_EXPAND GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value
#define glProgramUniformMatrix3fv_PACKED PACKED_void_GLuint_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glProgramUniformMatrix3fv_FORMAT FORMAT_void_GLuint_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glProgramUniformMatrix3fv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniformMatrix3fv_NOT_VOID_WRAP(...) {}
#define glProgramUniformMatrix3fvEXT_INDEX 1729
#define glProgramUniformMatrix3fvEXT_RETURN void
#define glProgramUniformMatrix3fvEXT_ARG_NAMES program, location, count, transpose, value
#define glProgramUniformMatrix3fvEXT_ARG_EXPAND GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value
#define glProgramUniformMatrix3fvEXT_PACKED PACKED_void_GLuint_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glProgramUniformMatrix3fvEXT_FORMAT FORMAT_void_GLuint_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glProgramUniformMatrix3fvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniformMatrix3fvEXT_NOT_VOID_WRAP(...) {}
#define glProgramUniformMatrix3x2dv_INDEX 1730
#define glProgramUniformMatrix3x2dv_RETURN void
#define glProgramUniformMatrix3x2dv_ARG_NAMES program, location, count, transpose, value
#define glProgramUniformMatrix3x2dv_ARG_EXPAND GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value
#define glProgramUniformMatrix3x2dv_PACKED PACKED_void_GLuint_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__
#define glProgramUniformMatrix3x2dv_FORMAT FORMAT_void_GLuint_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__
#define glProgramUniformMatrix3x2dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniformMatrix3x2dv_NOT_VOID_WRAP(...) {}
#define glProgramUniformMatrix3x2dvEXT_INDEX 1731
#define glProgramUniformMatrix3x2dvEXT_RETURN void
#define glProgramUniformMatrix3x2dvEXT_ARG_NAMES program, location, count, transpose, value
#define glProgramUniformMatrix3x2dvEXT_ARG_EXPAND GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value
#define glProgramUniformMatrix3x2dvEXT_PACKED PACKED_void_GLuint_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__
#define glProgramUniformMatrix3x2dvEXT_FORMAT FORMAT_void_GLuint_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__
#define glProgramUniformMatrix3x2dvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniformMatrix3x2dvEXT_NOT_VOID_WRAP(...) {}
#define glProgramUniformMatrix3x2fv_INDEX 1732
#define glProgramUniformMatrix3x2fv_RETURN void
#define glProgramUniformMatrix3x2fv_ARG_NAMES program, location, count, transpose, value
#define glProgramUniformMatrix3x2fv_ARG_EXPAND GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value
#define glProgramUniformMatrix3x2fv_PACKED PACKED_void_GLuint_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glProgramUniformMatrix3x2fv_FORMAT FORMAT_void_GLuint_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glProgramUniformMatrix3x2fv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniformMatrix3x2fv_NOT_VOID_WRAP(...) {}
#define glProgramUniformMatrix3x2fvEXT_INDEX 1733
#define glProgramUniformMatrix3x2fvEXT_RETURN void
#define glProgramUniformMatrix3x2fvEXT_ARG_NAMES program, location, count, transpose, value
#define glProgramUniformMatrix3x2fvEXT_ARG_EXPAND GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value
#define glProgramUniformMatrix3x2fvEXT_PACKED PACKED_void_GLuint_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glProgramUniformMatrix3x2fvEXT_FORMAT FORMAT_void_GLuint_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glProgramUniformMatrix3x2fvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniformMatrix3x2fvEXT_NOT_VOID_WRAP(...) {}
#define glProgramUniformMatrix3x4dv_INDEX 1734
#define glProgramUniformMatrix3x4dv_RETURN void
#define glProgramUniformMatrix3x4dv_ARG_NAMES program, location, count, transpose, value
#define glProgramUniformMatrix3x4dv_ARG_EXPAND GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value
#define glProgramUniformMatrix3x4dv_PACKED PACKED_void_GLuint_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__
#define glProgramUniformMatrix3x4dv_FORMAT FORMAT_void_GLuint_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__
#define glProgramUniformMatrix3x4dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniformMatrix3x4dv_NOT_VOID_WRAP(...) {}
#define glProgramUniformMatrix3x4dvEXT_INDEX 1735
#define glProgramUniformMatrix3x4dvEXT_RETURN void
#define glProgramUniformMatrix3x4dvEXT_ARG_NAMES program, location, count, transpose, value
#define glProgramUniformMatrix3x4dvEXT_ARG_EXPAND GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value
#define glProgramUniformMatrix3x4dvEXT_PACKED PACKED_void_GLuint_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__
#define glProgramUniformMatrix3x4dvEXT_FORMAT FORMAT_void_GLuint_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__
#define glProgramUniformMatrix3x4dvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniformMatrix3x4dvEXT_NOT_VOID_WRAP(...) {}
#define glProgramUniformMatrix3x4fv_INDEX 1736
#define glProgramUniformMatrix3x4fv_RETURN void
#define glProgramUniformMatrix3x4fv_ARG_NAMES program, location, count, transpose, value
#define glProgramUniformMatrix3x4fv_ARG_EXPAND GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value
#define glProgramUniformMatrix3x4fv_PACKED PACKED_void_GLuint_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glProgramUniformMatrix3x4fv_FORMAT FORMAT_void_GLuint_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glProgramUniformMatrix3x4fv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniformMatrix3x4fv_NOT_VOID_WRAP(...) {}
#define glProgramUniformMatrix3x4fvEXT_INDEX 1737
#define glProgramUniformMatrix3x4fvEXT_RETURN void
#define glProgramUniformMatrix3x4fvEXT_ARG_NAMES program, location, count, transpose, value
#define glProgramUniformMatrix3x4fvEXT_ARG_EXPAND GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value
#define glProgramUniformMatrix3x4fvEXT_PACKED PACKED_void_GLuint_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glProgramUniformMatrix3x4fvEXT_FORMAT FORMAT_void_GLuint_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glProgramUniformMatrix3x4fvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniformMatrix3x4fvEXT_NOT_VOID_WRAP(...) {}
#define glProgramUniformMatrix4dv_INDEX 1738
#define glProgramUniformMatrix4dv_RETURN void
#define glProgramUniformMatrix4dv_ARG_NAMES program, location, count, transpose, value
#define glProgramUniformMatrix4dv_ARG_EXPAND GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value
#define glProgramUniformMatrix4dv_PACKED PACKED_void_GLuint_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__
#define glProgramUniformMatrix4dv_FORMAT FORMAT_void_GLuint_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__
#define glProgramUniformMatrix4dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniformMatrix4dv_NOT_VOID_WRAP(...) {}
#define glProgramUniformMatrix4dvEXT_INDEX 1739
#define glProgramUniformMatrix4dvEXT_RETURN void
#define glProgramUniformMatrix4dvEXT_ARG_NAMES program, location, count, transpose, value
#define glProgramUniformMatrix4dvEXT_ARG_EXPAND GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value
#define glProgramUniformMatrix4dvEXT_PACKED PACKED_void_GLuint_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__
#define glProgramUniformMatrix4dvEXT_FORMAT FORMAT_void_GLuint_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__
#define glProgramUniformMatrix4dvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniformMatrix4dvEXT_NOT_VOID_WRAP(...) {}
#define glProgramUniformMatrix4fv_INDEX 1740
#define glProgramUniformMatrix4fv_RETURN void
#define glProgramUniformMatrix4fv_ARG_NAMES program, location, count, transpose, value
#define glProgramUniformMatrix4fv_ARG_EXPAND GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value
#define glProgramUniformMatrix4fv_PACKED PACKED_void_GLuint_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glProgramUniformMatrix4fv_FORMAT FORMAT_void_GLuint_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glProgramUniformMatrix4fv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniformMatrix4fv_NOT_VOID_WRAP(...) {}
#define glProgramUniformMatrix4fvEXT_INDEX 1741
#define glProgramUniformMatrix4fvEXT_RETURN void
#define glProgramUniformMatrix4fvEXT_ARG_NAMES program, location, count, transpose, value
#define glProgramUniformMatrix4fvEXT_ARG_EXPAND GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value
#define glProgramUniformMatrix4fvEXT_PACKED PACKED_void_GLuint_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glProgramUniformMatrix4fvEXT_FORMAT FORMAT_void_GLuint_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glProgramUniformMatrix4fvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniformMatrix4fvEXT_NOT_VOID_WRAP(...) {}
#define glProgramUniformMatrix4x2dv_INDEX 1742
#define glProgramUniformMatrix4x2dv_RETURN void
#define glProgramUniformMatrix4x2dv_ARG_NAMES program, location, count, transpose, value
#define glProgramUniformMatrix4x2dv_ARG_EXPAND GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value
#define glProgramUniformMatrix4x2dv_PACKED PACKED_void_GLuint_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__
#define glProgramUniformMatrix4x2dv_FORMAT FORMAT_void_GLuint_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__
#define glProgramUniformMatrix4x2dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniformMatrix4x2dv_NOT_VOID_WRAP(...) {}
#define glProgramUniformMatrix4x2dvEXT_INDEX 1743
#define glProgramUniformMatrix4x2dvEXT_RETURN void
#define glProgramUniformMatrix4x2dvEXT_ARG_NAMES program, location, count, transpose, value
#define glProgramUniformMatrix4x2dvEXT_ARG_EXPAND GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value
#define glProgramUniformMatrix4x2dvEXT_PACKED PACKED_void_GLuint_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__
#define glProgramUniformMatrix4x2dvEXT_FORMAT FORMAT_void_GLuint_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__
#define glProgramUniformMatrix4x2dvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniformMatrix4x2dvEXT_NOT_VOID_WRAP(...) {}
#define glProgramUniformMatrix4x2fv_INDEX 1744
#define glProgramUniformMatrix4x2fv_RETURN void
#define glProgramUniformMatrix4x2fv_ARG_NAMES program, location, count, transpose, value
#define glProgramUniformMatrix4x2fv_ARG_EXPAND GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value
#define glProgramUniformMatrix4x2fv_PACKED PACKED_void_GLuint_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glProgramUniformMatrix4x2fv_FORMAT FORMAT_void_GLuint_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glProgramUniformMatrix4x2fv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniformMatrix4x2fv_NOT_VOID_WRAP(...) {}
#define glProgramUniformMatrix4x2fvEXT_INDEX 1745
#define glProgramUniformMatrix4x2fvEXT_RETURN void
#define glProgramUniformMatrix4x2fvEXT_ARG_NAMES program, location, count, transpose, value
#define glProgramUniformMatrix4x2fvEXT_ARG_EXPAND GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value
#define glProgramUniformMatrix4x2fvEXT_PACKED PACKED_void_GLuint_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glProgramUniformMatrix4x2fvEXT_FORMAT FORMAT_void_GLuint_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glProgramUniformMatrix4x2fvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniformMatrix4x2fvEXT_NOT_VOID_WRAP(...) {}
#define glProgramUniformMatrix4x3dv_INDEX 1746
#define glProgramUniformMatrix4x3dv_RETURN void
#define glProgramUniformMatrix4x3dv_ARG_NAMES program, location, count, transpose, value
#define glProgramUniformMatrix4x3dv_ARG_EXPAND GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value
#define glProgramUniformMatrix4x3dv_PACKED PACKED_void_GLuint_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__
#define glProgramUniformMatrix4x3dv_FORMAT FORMAT_void_GLuint_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__
#define glProgramUniformMatrix4x3dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniformMatrix4x3dv_NOT_VOID_WRAP(...) {}
#define glProgramUniformMatrix4x3dvEXT_INDEX 1747
#define glProgramUniformMatrix4x3dvEXT_RETURN void
#define glProgramUniformMatrix4x3dvEXT_ARG_NAMES program, location, count, transpose, value
#define glProgramUniformMatrix4x3dvEXT_ARG_EXPAND GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value
#define glProgramUniformMatrix4x3dvEXT_PACKED PACKED_void_GLuint_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__
#define glProgramUniformMatrix4x3dvEXT_FORMAT FORMAT_void_GLuint_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__
#define glProgramUniformMatrix4x3dvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniformMatrix4x3dvEXT_NOT_VOID_WRAP(...) {}
#define glProgramUniformMatrix4x3fv_INDEX 1748
#define glProgramUniformMatrix4x3fv_RETURN void
#define glProgramUniformMatrix4x3fv_ARG_NAMES program, location, count, transpose, value
#define glProgramUniformMatrix4x3fv_ARG_EXPAND GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value
#define glProgramUniformMatrix4x3fv_PACKED PACKED_void_GLuint_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glProgramUniformMatrix4x3fv_FORMAT FORMAT_void_GLuint_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glProgramUniformMatrix4x3fv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniformMatrix4x3fv_NOT_VOID_WRAP(...) {}
#define glProgramUniformMatrix4x3fvEXT_INDEX 1749
#define glProgramUniformMatrix4x3fvEXT_RETURN void
#define glProgramUniformMatrix4x3fvEXT_ARG_NAMES program, location, count, transpose, value
#define glProgramUniformMatrix4x3fvEXT_ARG_EXPAND GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value
#define glProgramUniformMatrix4x3fvEXT_PACKED PACKED_void_GLuint_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glProgramUniformMatrix4x3fvEXT_FORMAT FORMAT_void_GLuint_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glProgramUniformMatrix4x3fvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniformMatrix4x3fvEXT_NOT_VOID_WRAP(...) {}
#define glProgramUniformui64NV_INDEX 1750
#define glProgramUniformui64NV_RETURN void
#define glProgramUniformui64NV_ARG_NAMES program, location, value
#define glProgramUniformui64NV_ARG_EXPAND GLuint program, GLint location, GLuint64EXT value
#define glProgramUniformui64NV_PACKED PACKED_void_GLuint_GLint_GLuint64EXT
#define glProgramUniformui64NV_FORMAT FORMAT_void_GLuint_GLint_GLuint64EXT
#define glProgramUniformui64NV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniformui64NV_NOT_VOID_WRAP(...) {}
#define glProgramUniformui64vNV_INDEX 1751
#define glProgramUniformui64vNV_RETURN void
#define glProgramUniformui64vNV_ARG_NAMES program, location, count, value
#define glProgramUniformui64vNV_ARG_EXPAND GLuint program, GLint location, GLsizei count, const GLuint64EXT * value
#define glProgramUniformui64vNV_PACKED PACKED_void_GLuint_GLint_GLsizei_const_GLuint64EXT___GENPT__
#define glProgramUniformui64vNV_FORMAT FORMAT_void_GLuint_GLint_GLsizei_const_GLuint64EXT___GENPT__
#define glProgramUniformui64vNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramUniformui64vNV_NOT_VOID_WRAP(...) {}
#define glProgramVertexLimitNV_INDEX 1752
#define glProgramVertexLimitNV_RETURN void
#define glProgramVertexLimitNV_ARG_NAMES target, limit
#define glProgramVertexLimitNV_ARG_EXPAND GLenum target, GLint limit
#define glProgramVertexLimitNV_PACKED PACKED_void_GLenum_GLint
#define glProgramVertexLimitNV_FORMAT FORMAT_void_GLenum_GLint
#define glProgramVertexLimitNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProgramVertexLimitNV_NOT_VOID_WRAP(...) {}
#define glProvokingVertex_INDEX 1753
#define glProvokingVertex_RETURN void
#define glProvokingVertex_ARG_NAMES mode
#define glProvokingVertex_ARG_EXPAND GLenum mode
#define glProvokingVertex_PACKED PACKED_void_GLenum
#define glProvokingVertex_FORMAT FORMAT_void_GLenum
#define glProvokingVertex_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProvokingVertex_NOT_VOID_WRAP(...) {}
#define glProvokingVertexEXT_INDEX 1754
#define glProvokingVertexEXT_RETURN void
#define glProvokingVertexEXT_ARG_NAMES mode
#define glProvokingVertexEXT_ARG_EXPAND GLenum mode
#define glProvokingVertexEXT_PACKED PACKED_void_GLenum
#define glProvokingVertexEXT_FORMAT FORMAT_void_GLenum
#define glProvokingVertexEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glProvokingVertexEXT_NOT_VOID_WRAP(...) {}
#define glPushAttrib_INDEX 1755
#define glPushAttrib_RETURN void
#define glPushAttrib_ARG_NAMES mask
#define glPushAttrib_ARG_EXPAND GLbitfield mask
#define glPushAttrib_PACKED PACKED_void_GLbitfield
#define glPushAttrib_FORMAT FORMAT_void_GLbitfield
#define glPushAttrib_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPushAttrib_NOT_VOID_WRAP(...) {}
#define glPushClientAttrib_INDEX 1756
#define glPushClientAttrib_RETURN void
#define glPushClientAttrib_ARG_NAMES mask
#define glPushClientAttrib_ARG_EXPAND GLbitfield mask
#define glPushClientAttrib_PACKED PACKED_void_GLbitfield
#define glPushClientAttrib_FORMAT FORMAT_void_GLbitfield
#define glPushClientAttrib_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPushClientAttrib_NOT_VOID_WRAP(...) {}
#define glPushClientAttribDefaultEXT_INDEX 1757
#define glPushClientAttribDefaultEXT_RETURN void
#define glPushClientAttribDefaultEXT_ARG_NAMES mask
#define glPushClientAttribDefaultEXT_ARG_EXPAND GLbitfield mask
#define glPushClientAttribDefaultEXT_PACKED PACKED_void_GLbitfield
#define glPushClientAttribDefaultEXT_FORMAT FORMAT_void_GLbitfield
#define glPushClientAttribDefaultEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPushClientAttribDefaultEXT_NOT_VOID_WRAP(...) {}
#define glPushDebugGroup_INDEX 1758
#define glPushDebugGroup_RETURN void
#define glPushDebugGroup_ARG_NAMES source, id, length, message
#define glPushDebugGroup_ARG_EXPAND GLenum source, GLuint id, GLsizei length, const GLchar * message
#define glPushDebugGroup_PACKED PACKED_void_GLenum_GLuint_GLsizei_const_GLchar___GENPT__
#define glPushDebugGroup_FORMAT FORMAT_void_GLenum_GLuint_GLsizei_const_GLchar___GENPT__
#define glPushDebugGroup_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPushDebugGroup_NOT_VOID_WRAP(...) {}
#define glPushMatrix_INDEX 1759
#define glPushMatrix_RETURN void
#define glPushMatrix_ARG_NAMES 
#define glPushMatrix_ARG_EXPAND 
#define glPushMatrix_PACKED PACKED_void
#define glPushMatrix_FORMAT FORMAT_void
#define glPushMatrix_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPushMatrix_NOT_VOID_WRAP(...) {}
#define glPushName_INDEX 1760
#define glPushName_RETURN void
#define glPushName_ARG_NAMES name
#define glPushName_ARG_EXPAND GLuint name
#define glPushName_PACKED PACKED_void_GLuint
#define glPushName_FORMAT FORMAT_void_GLuint
#define glPushName_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glPushName_NOT_VOID_WRAP(...) {}
#define glQueryCounter_INDEX 1761
#define glQueryCounter_RETURN void
#define glQueryCounter_ARG_NAMES id, target
#define glQueryCounter_ARG_EXPAND GLuint id, GLenum target
#define glQueryCounter_PACKED PACKED_void_GLuint_GLenum
#define glQueryCounter_FORMAT FORMAT_void_GLuint_GLenum
#define glQueryCounter_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glQueryCounter_NOT_VOID_WRAP(...) {}
#define glQueryMatrixxOES_INDEX 1762
#define glQueryMatrixxOES_RETURN GLbitfield
#define glQueryMatrixxOES_ARG_NAMES mantissa, exponent
#define glQueryMatrixxOES_ARG_EXPAND GLfixed * mantissa, GLint * exponent
#define glQueryMatrixxOES_PACKED PACKED_GLbitfield_GLfixed___GENPT___GLint___GENPT__
#define glQueryMatrixxOES_FORMAT FORMAT_GLbitfield_GLfixed___GENPT___GLint___GENPT__
#define glQueryMatrixxOES_VOID_ONLY_WRAP(...) {}
#define glQueryMatrixxOES_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glRasterPos2d_INDEX 1763
#define glRasterPos2d_RETURN void
#define glRasterPos2d_ARG_NAMES x, y
#define glRasterPos2d_ARG_EXPAND GLdouble x, GLdouble y
#define glRasterPos2d_PACKED PACKED_void_GLdouble_GLdouble
#define glRasterPos2d_FORMAT FORMAT_void_GLdouble_GLdouble
#define glRasterPos2d_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glRasterPos2d_NOT_VOID_WRAP(...) {}
#define glRasterPos2dv_INDEX 1764
#define glRasterPos2dv_RETURN void
#define glRasterPos2dv_ARG_NAMES v
#define glRasterPos2dv_ARG_EXPAND const GLdouble * v
#define glRasterPos2dv_PACKED PACKED_void_const_GLdouble___GENPT__
#define glRasterPos2dv_FORMAT FORMAT_void_const_GLdouble___GENPT__
#define glRasterPos2dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glRasterPos2dv_NOT_VOID_WRAP(...) {}
#define glRasterPos2f_INDEX 1765
#define glRasterPos2f_RETURN void
#define glRasterPos2f_ARG_NAMES x, y
#define glRasterPos2f_ARG_EXPAND GLfloat x, GLfloat y
#define glRasterPos2f_PACKED PACKED_void_GLfloat_GLfloat
#define glRasterPos2f_FORMAT FORMAT_void_GLfloat_GLfloat
#define glRasterPos2f_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glRasterPos2f_NOT_VOID_WRAP(...) {}
#define glRasterPos2fv_INDEX 1766
#define glRasterPos2fv_RETURN void
#define glRasterPos2fv_ARG_NAMES v
#define glRasterPos2fv_ARG_EXPAND const GLfloat * v
#define glRasterPos2fv_PACKED PACKED_void_const_GLfloat___GENPT__
#define glRasterPos2fv_FORMAT FORMAT_void_const_GLfloat___GENPT__
#define glRasterPos2fv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glRasterPos2fv_NOT_VOID_WRAP(...) {}
#define glRasterPos2i_INDEX 1767
#define glRasterPos2i_RETURN void
#define glRasterPos2i_ARG_NAMES x, y
#define glRasterPos2i_ARG_EXPAND GLint x, GLint y
#define glRasterPos2i_PACKED PACKED_void_GLint_GLint
#define glRasterPos2i_FORMAT FORMAT_void_GLint_GLint
#define glRasterPos2i_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glRasterPos2i_NOT_VOID_WRAP(...) {}
#define glRasterPos2iv_INDEX 1768
#define glRasterPos2iv_RETURN void
#define glRasterPos2iv_ARG_NAMES v
#define glRasterPos2iv_ARG_EXPAND const GLint * v
#define glRasterPos2iv_PACKED PACKED_void_const_GLint___GENPT__
#define glRasterPos2iv_FORMAT FORMAT_void_const_GLint___GENPT__
#define glRasterPos2iv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glRasterPos2iv_NOT_VOID_WRAP(...) {}
#define glRasterPos2s_INDEX 1769
#define glRasterPos2s_RETURN void
#define glRasterPos2s_ARG_NAMES x, y
#define glRasterPos2s_ARG_EXPAND GLshort x, GLshort y
#define glRasterPos2s_PACKED PACKED_void_GLshort_GLshort
#define glRasterPos2s_FORMAT FORMAT_void_GLshort_GLshort
#define glRasterPos2s_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glRasterPos2s_NOT_VOID_WRAP(...) {}
#define glRasterPos2sv_INDEX 1770
#define glRasterPos2sv_RETURN void
#define glRasterPos2sv_ARG_NAMES v
#define glRasterPos2sv_ARG_EXPAND const GLshort * v
#define glRasterPos2sv_PACKED PACKED_void_const_GLshort___GENPT__
#define glRasterPos2sv_FORMAT FORMAT_void_const_GLshort___GENPT__
#define glRasterPos2sv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glRasterPos2sv_NOT_VOID_WRAP(...) {}
#define glRasterPos2xOES_INDEX 1771
#define glRasterPos2xOES_RETURN void
#define glRasterPos2xOES_ARG_NAMES x, y
#define glRasterPos2xOES_ARG_EXPAND GLfixed x, GLfixed y
#define glRasterPos2xOES_PACKED PACKED_void_GLfixed_GLfixed
#define glRasterPos2xOES_FORMAT FORMAT_void_GLfixed_GLfixed
#define glRasterPos2xOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glRasterPos2xOES_NOT_VOID_WRAP(...) {}
#define glRasterPos2xvOES_INDEX 1772
#define glRasterPos2xvOES_RETURN void
#define glRasterPos2xvOES_ARG_NAMES coords
#define glRasterPos2xvOES_ARG_EXPAND const GLfixed * coords
#define glRasterPos2xvOES_PACKED PACKED_void_const_GLfixed___GENPT__
#define glRasterPos2xvOES_FORMAT FORMAT_void_const_GLfixed___GENPT__
#define glRasterPos2xvOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glRasterPos2xvOES_NOT_VOID_WRAP(...) {}
#define glRasterPos3d_INDEX 1773
#define glRasterPos3d_RETURN void
#define glRasterPos3d_ARG_NAMES x, y, z
#define glRasterPos3d_ARG_EXPAND GLdouble x, GLdouble y, GLdouble z
#define glRasterPos3d_PACKED PACKED_void_GLdouble_GLdouble_GLdouble
#define glRasterPos3d_FORMAT FORMAT_void_GLdouble_GLdouble_GLdouble
#define glRasterPos3d_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glRasterPos3d_NOT_VOID_WRAP(...) {}
#define glRasterPos3dv_INDEX 1774
#define glRasterPos3dv_RETURN void
#define glRasterPos3dv_ARG_NAMES v
#define glRasterPos3dv_ARG_EXPAND const GLdouble * v
#define glRasterPos3dv_PACKED PACKED_void_const_GLdouble___GENPT__
#define glRasterPos3dv_FORMAT FORMAT_void_const_GLdouble___GENPT__
#define glRasterPos3dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glRasterPos3dv_NOT_VOID_WRAP(...) {}
#define glRasterPos3f_INDEX 1775
#define glRasterPos3f_RETURN void
#define glRasterPos3f_ARG_NAMES x, y, z
#define glRasterPos3f_ARG_EXPAND GLfloat x, GLfloat y, GLfloat z
#define glRasterPos3f_PACKED PACKED_void_GLfloat_GLfloat_GLfloat
#define glRasterPos3f_FORMAT FORMAT_void_GLfloat_GLfloat_GLfloat
#define glRasterPos3f_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glRasterPos3f_NOT_VOID_WRAP(...) {}
#define glRasterPos3fv_INDEX 1776
#define glRasterPos3fv_RETURN void
#define glRasterPos3fv_ARG_NAMES v
#define glRasterPos3fv_ARG_EXPAND const GLfloat * v
#define glRasterPos3fv_PACKED PACKED_void_const_GLfloat___GENPT__
#define glRasterPos3fv_FORMAT FORMAT_void_const_GLfloat___GENPT__
#define glRasterPos3fv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glRasterPos3fv_NOT_VOID_WRAP(...) {}
#define glRasterPos3i_INDEX 1777
#define glRasterPos3i_RETURN void
#define glRasterPos3i_ARG_NAMES x, y, z
#define glRasterPos3i_ARG_EXPAND GLint x, GLint y, GLint z
#define glRasterPos3i_PACKED PACKED_void_GLint_GLint_GLint
#define glRasterPos3i_FORMAT FORMAT_void_GLint_GLint_GLint
#define glRasterPos3i_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glRasterPos3i_NOT_VOID_WRAP(...) {}
#define glRasterPos3iv_INDEX 1778
#define glRasterPos3iv_RETURN void
#define glRasterPos3iv_ARG_NAMES v
#define glRasterPos3iv_ARG_EXPAND const GLint * v
#define glRasterPos3iv_PACKED PACKED_void_const_GLint___GENPT__
#define glRasterPos3iv_FORMAT FORMAT_void_const_GLint___GENPT__
#define glRasterPos3iv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glRasterPos3iv_NOT_VOID_WRAP(...) {}
#define glRasterPos3s_INDEX 1779
#define glRasterPos3s_RETURN void
#define glRasterPos3s_ARG_NAMES x, y, z
#define glRasterPos3s_ARG_EXPAND GLshort x, GLshort y, GLshort z
#define glRasterPos3s_PACKED PACKED_void_GLshort_GLshort_GLshort
#define glRasterPos3s_FORMAT FORMAT_void_GLshort_GLshort_GLshort
#define glRasterPos3s_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glRasterPos3s_NOT_VOID_WRAP(...) {}
#define glRasterPos3sv_INDEX 1780
#define glRasterPos3sv_RETURN void
#define glRasterPos3sv_ARG_NAMES v
#define glRasterPos3sv_ARG_EXPAND const GLshort * v
#define glRasterPos3sv_PACKED PACKED_void_const_GLshort___GENPT__
#define glRasterPos3sv_FORMAT FORMAT_void_const_GLshort___GENPT__
#define glRasterPos3sv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glRasterPos3sv_NOT_VOID_WRAP(...) {}
#define glRasterPos3xOES_INDEX 1781
#define glRasterPos3xOES_RETURN void
#define glRasterPos3xOES_ARG_NAMES x, y, z
#define glRasterPos3xOES_ARG_EXPAND GLfixed x, GLfixed y, GLfixed z
#define glRasterPos3xOES_PACKED PACKED_void_GLfixed_GLfixed_GLfixed
#define glRasterPos3xOES_FORMAT FORMAT_void_GLfixed_GLfixed_GLfixed
#define glRasterPos3xOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glRasterPos3xOES_NOT_VOID_WRAP(...) {}
#define glRasterPos3xvOES_INDEX 1782
#define glRasterPos3xvOES_RETURN void
#define glRasterPos3xvOES_ARG_NAMES coords
#define glRasterPos3xvOES_ARG_EXPAND const GLfixed * coords
#define glRasterPos3xvOES_PACKED PACKED_void_const_GLfixed___GENPT__
#define glRasterPos3xvOES_FORMAT FORMAT_void_const_GLfixed___GENPT__
#define glRasterPos3xvOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glRasterPos3xvOES_NOT_VOID_WRAP(...) {}
#define glRasterPos4d_INDEX 1783
#define glRasterPos4d_RETURN void
#define glRasterPos4d_ARG_NAMES x, y, z, w
#define glRasterPos4d_ARG_EXPAND GLdouble x, GLdouble y, GLdouble z, GLdouble w
#define glRasterPos4d_PACKED PACKED_void_GLdouble_GLdouble_GLdouble_GLdouble
#define glRasterPos4d_FORMAT FORMAT_void_GLdouble_GLdouble_GLdouble_GLdouble
#define glRasterPos4d_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glRasterPos4d_NOT_VOID_WRAP(...) {}
#define glRasterPos4dv_INDEX 1784
#define glRasterPos4dv_RETURN void
#define glRasterPos4dv_ARG_NAMES v
#define glRasterPos4dv_ARG_EXPAND const GLdouble * v
#define glRasterPos4dv_PACKED PACKED_void_const_GLdouble___GENPT__
#define glRasterPos4dv_FORMAT FORMAT_void_const_GLdouble___GENPT__
#define glRasterPos4dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glRasterPos4dv_NOT_VOID_WRAP(...) {}
#define glRasterPos4f_INDEX 1785
#define glRasterPos4f_RETURN void
#define glRasterPos4f_ARG_NAMES x, y, z, w
#define glRasterPos4f_ARG_EXPAND GLfloat x, GLfloat y, GLfloat z, GLfloat w
#define glRasterPos4f_PACKED PACKED_void_GLfloat_GLfloat_GLfloat_GLfloat
#define glRasterPos4f_FORMAT FORMAT_void_GLfloat_GLfloat_GLfloat_GLfloat
#define glRasterPos4f_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glRasterPos4f_NOT_VOID_WRAP(...) {}
#define glRasterPos4fv_INDEX 1786
#define glRasterPos4fv_RETURN void
#define glRasterPos4fv_ARG_NAMES v
#define glRasterPos4fv_ARG_EXPAND const GLfloat * v
#define glRasterPos4fv_PACKED PACKED_void_const_GLfloat___GENPT__
#define glRasterPos4fv_FORMAT FORMAT_void_const_GLfloat___GENPT__
#define glRasterPos4fv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glRasterPos4fv_NOT_VOID_WRAP(...) {}
#define glRasterPos4i_INDEX 1787
#define glRasterPos4i_RETURN void
#define glRasterPos4i_ARG_NAMES x, y, z, w
#define glRasterPos4i_ARG_EXPAND GLint x, GLint y, GLint z, GLint w
#define glRasterPos4i_PACKED PACKED_void_GLint_GLint_GLint_GLint
#define glRasterPos4i_FORMAT FORMAT_void_GLint_GLint_GLint_GLint
#define glRasterPos4i_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glRasterPos4i_NOT_VOID_WRAP(...) {}
#define glRasterPos4iv_INDEX 1788
#define glRasterPos4iv_RETURN void
#define glRasterPos4iv_ARG_NAMES v
#define glRasterPos4iv_ARG_EXPAND const GLint * v
#define glRasterPos4iv_PACKED PACKED_void_const_GLint___GENPT__
#define glRasterPos4iv_FORMAT FORMAT_void_const_GLint___GENPT__
#define glRasterPos4iv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glRasterPos4iv_NOT_VOID_WRAP(...) {}
#define glRasterPos4s_INDEX 1789
#define glRasterPos4s_RETURN void
#define glRasterPos4s_ARG_NAMES x, y, z, w
#define glRasterPos4s_ARG_EXPAND GLshort x, GLshort y, GLshort z, GLshort w
#define glRasterPos4s_PACKED PACKED_void_GLshort_GLshort_GLshort_GLshort
#define glRasterPos4s_FORMAT FORMAT_void_GLshort_GLshort_GLshort_GLshort
#define glRasterPos4s_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glRasterPos4s_NOT_VOID_WRAP(...) {}
#define glRasterPos4sv_INDEX 1790
#define glRasterPos4sv_RETURN void
#define glRasterPos4sv_ARG_NAMES v
#define glRasterPos4sv_ARG_EXPAND const GLshort * v
#define glRasterPos4sv_PACKED PACKED_void_const_GLshort___GENPT__
#define glRasterPos4sv_FORMAT FORMAT_void_const_GLshort___GENPT__
#define glRasterPos4sv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glRasterPos4sv_NOT_VOID_WRAP(...) {}
#define glRasterPos4xOES_INDEX 1791
#define glRasterPos4xOES_RETURN void
#define glRasterPos4xOES_ARG_NAMES x, y, z, w
#define glRasterPos4xOES_ARG_EXPAND GLfixed x, GLfixed y, GLfixed z, GLfixed w
#define glRasterPos4xOES_PACKED PACKED_void_GLfixed_GLfixed_GLfixed_GLfixed
#define glRasterPos4xOES_FORMAT FORMAT_void_GLfixed_GLfixed_GLfixed_GLfixed
#define glRasterPos4xOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glRasterPos4xOES_NOT_VOID_WRAP(...) {}
#define glRasterPos4xvOES_INDEX 1792
#define glRasterPos4xvOES_RETURN void
#define glRasterPos4xvOES_ARG_NAMES coords
#define glRasterPos4xvOES_ARG_EXPAND const GLfixed * coords
#define glRasterPos4xvOES_PACKED PACKED_void_const_GLfixed___GENPT__
#define glRasterPos4xvOES_FORMAT FORMAT_void_const_GLfixed___GENPT__
#define glRasterPos4xvOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glRasterPos4xvOES_NOT_VOID_WRAP(...) {}
#define glReadBuffer_INDEX 1793
#define glReadBuffer_RETURN void
#define glReadBuffer_ARG_NAMES mode
#define glReadBuffer_ARG_EXPAND GLenum mode
#define glReadBuffer_PACKED PACKED_void_GLenum
#define glReadBuffer_FORMAT FORMAT_void_GLenum
#define glReadBuffer_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glReadBuffer_NOT_VOID_WRAP(...) {}
#define glReadInstrumentsSGIX_INDEX 1794
#define glReadInstrumentsSGIX_RETURN void
#define glReadInstrumentsSGIX_ARG_NAMES marker
#define glReadInstrumentsSGIX_ARG_EXPAND GLint marker
#define glReadInstrumentsSGIX_PACKED PACKED_void_GLint
#define glReadInstrumentsSGIX_FORMAT FORMAT_void_GLint
#define glReadInstrumentsSGIX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glReadInstrumentsSGIX_NOT_VOID_WRAP(...) {}
#define glReadPixels_INDEX 1795
#define glReadPixels_RETURN void
#define glReadPixels_ARG_NAMES x, y, width, height, format, type, pixels
#define glReadPixels_ARG_EXPAND GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid * pixels
#define glReadPixels_PACKED PACKED_void_GLint_GLint_GLsizei_GLsizei_GLenum_GLenum_GLvoid___GENPT__
#define glReadPixels_FORMAT FORMAT_void_GLint_GLint_GLsizei_GLsizei_GLenum_GLenum_GLvoid___GENPT__
#define glReadPixels_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glReadPixels_NOT_VOID_WRAP(...) {}
#define glReadnPixelsARB_INDEX 1796
#define glReadnPixelsARB_RETURN void
#define glReadnPixelsARB_ARG_NAMES x, y, width, height, format, type, bufSize, data
#define glReadnPixelsARB_ARG_EXPAND GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, GLvoid * data
#define glReadnPixelsARB_PACKED PACKED_void_GLint_GLint_GLsizei_GLsizei_GLenum_GLenum_GLsizei_GLvoid___GENPT__
#define glReadnPixelsARB_FORMAT FORMAT_void_GLint_GLint_GLsizei_GLsizei_GLenum_GLenum_GLsizei_GLvoid___GENPT__
#define glReadnPixelsARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glReadnPixelsARB_NOT_VOID_WRAP(...) {}
#define glRectd_INDEX 1797
#define glRectd_RETURN void
#define glRectd_ARG_NAMES x1, y1, x2, y2
#define glRectd_ARG_EXPAND GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2
#define glRectd_PACKED PACKED_void_GLdouble_GLdouble_GLdouble_GLdouble
#define glRectd_FORMAT FORMAT_void_GLdouble_GLdouble_GLdouble_GLdouble
#define glRectd_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glRectd_NOT_VOID_WRAP(...) {}
#define glRectdv_INDEX 1798
#define glRectdv_RETURN void
#define glRectdv_ARG_NAMES v1, v2
#define glRectdv_ARG_EXPAND const GLdouble * v1, const GLdouble * v2
#define glRectdv_PACKED PACKED_void_const_GLdouble___GENPT___const_GLdouble___GENPT__
#define glRectdv_FORMAT FORMAT_void_const_GLdouble___GENPT___const_GLdouble___GENPT__
#define glRectdv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glRectdv_NOT_VOID_WRAP(...) {}
#define glRectf_INDEX 1799
#define glRectf_RETURN void
#define glRectf_ARG_NAMES x1, y1, x2, y2
#define glRectf_ARG_EXPAND GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2
#define glRectf_PACKED PACKED_void_GLfloat_GLfloat_GLfloat_GLfloat
#define glRectf_FORMAT FORMAT_void_GLfloat_GLfloat_GLfloat_GLfloat
#define glRectf_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glRectf_NOT_VOID_WRAP(...) {}
#define glRectfv_INDEX 1800
#define glRectfv_RETURN void
#define glRectfv_ARG_NAMES v1, v2
#define glRectfv_ARG_EXPAND const GLfloat * v1, const GLfloat * v2
#define glRectfv_PACKED PACKED_void_const_GLfloat___GENPT___const_GLfloat___GENPT__
#define glRectfv_FORMAT FORMAT_void_const_GLfloat___GENPT___const_GLfloat___GENPT__
#define glRectfv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glRectfv_NOT_VOID_WRAP(...) {}
#define glRecti_INDEX 1801
#define glRecti_RETURN void
#define glRecti_ARG_NAMES x1, y1, x2, y2
#define glRecti_ARG_EXPAND GLint x1, GLint y1, GLint x2, GLint y2
#define glRecti_PACKED PACKED_void_GLint_GLint_GLint_GLint
#define glRecti_FORMAT FORMAT_void_GLint_GLint_GLint_GLint
#define glRecti_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glRecti_NOT_VOID_WRAP(...) {}
#define glRectiv_INDEX 1802
#define glRectiv_RETURN void
#define glRectiv_ARG_NAMES v1, v2
#define glRectiv_ARG_EXPAND const GLint * v1, const GLint * v2
#define glRectiv_PACKED PACKED_void_const_GLint___GENPT___const_GLint___GENPT__
#define glRectiv_FORMAT FORMAT_void_const_GLint___GENPT___const_GLint___GENPT__
#define glRectiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glRectiv_NOT_VOID_WRAP(...) {}
#define glRects_INDEX 1803
#define glRects_RETURN void
#define glRects_ARG_NAMES x1, y1, x2, y2
#define glRects_ARG_EXPAND GLshort x1, GLshort y1, GLshort x2, GLshort y2
#define glRects_PACKED PACKED_void_GLshort_GLshort_GLshort_GLshort
#define glRects_FORMAT FORMAT_void_GLshort_GLshort_GLshort_GLshort
#define glRects_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glRects_NOT_VOID_WRAP(...) {}
#define glRectsv_INDEX 1804
#define glRectsv_RETURN void
#define glRectsv_ARG_NAMES v1, v2
#define glRectsv_ARG_EXPAND const GLshort * v1, const GLshort * v2
#define glRectsv_PACKED PACKED_void_const_GLshort___GENPT___const_GLshort___GENPT__
#define glRectsv_FORMAT FORMAT_void_const_GLshort___GENPT___const_GLshort___GENPT__
#define glRectsv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glRectsv_NOT_VOID_WRAP(...) {}
#define glRectxOES_INDEX 1805
#define glRectxOES_RETURN void
#define glRectxOES_ARG_NAMES x1, y1, x2, y2
#define glRectxOES_ARG_EXPAND GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2
#define glRectxOES_PACKED PACKED_void_GLfixed_GLfixed_GLfixed_GLfixed
#define glRectxOES_FORMAT FORMAT_void_GLfixed_GLfixed_GLfixed_GLfixed
#define glRectxOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glRectxOES_NOT_VOID_WRAP(...) {}
#define glRectxvOES_INDEX 1806
#define glRectxvOES_RETURN void
#define glRectxvOES_ARG_NAMES v1, v2
#define glRectxvOES_ARG_EXPAND const GLfixed * v1, const GLfixed * v2
#define glRectxvOES_PACKED PACKED_void_const_GLfixed___GENPT___const_GLfixed___GENPT__
#define glRectxvOES_FORMAT FORMAT_void_const_GLfixed___GENPT___const_GLfixed___GENPT__
#define glRectxvOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glRectxvOES_NOT_VOID_WRAP(...) {}
#define glReferencePlaneSGIX_INDEX 1807
#define glReferencePlaneSGIX_RETURN void
#define glReferencePlaneSGIX_ARG_NAMES equation
#define glReferencePlaneSGIX_ARG_EXPAND const GLdouble * equation
#define glReferencePlaneSGIX_PACKED PACKED_void_const_GLdouble___GENPT__
#define glReferencePlaneSGIX_FORMAT FORMAT_void_const_GLdouble___GENPT__
#define glReferencePlaneSGIX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glReferencePlaneSGIX_NOT_VOID_WRAP(...) {}
#define glReleaseShaderCompiler_INDEX 1808
#define glReleaseShaderCompiler_RETURN void
#define glReleaseShaderCompiler_ARG_NAMES 
#define glReleaseShaderCompiler_ARG_EXPAND 
#define glReleaseShaderCompiler_PACKED PACKED_void
#define glReleaseShaderCompiler_FORMAT FORMAT_void
#define glReleaseShaderCompiler_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glReleaseShaderCompiler_NOT_VOID_WRAP(...) {}
#define glRenderMode_INDEX 1809
#define glRenderMode_RETURN GLint
#define glRenderMode_ARG_NAMES mode
#define glRenderMode_ARG_EXPAND GLenum mode
#define glRenderMode_PACKED PACKED_GLint_GLenum
#define glRenderMode_FORMAT FORMAT_GLint_GLenum
#define glRenderMode_VOID_ONLY_WRAP(...) {}
#define glRenderMode_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glRenderbufferStorage_INDEX 1810
#define glRenderbufferStorage_RETURN void
#define glRenderbufferStorage_ARG_NAMES target, internalformat, width, height
#define glRenderbufferStorage_ARG_EXPAND GLenum target, GLenum internalformat, GLsizei width, GLsizei height
#define glRenderbufferStorage_PACKED PACKED_void_GLenum_GLenum_GLsizei_GLsizei
#define glRenderbufferStorage_FORMAT FORMAT_void_GLenum_GLenum_GLsizei_GLsizei
#define glRenderbufferStorage_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glRenderbufferStorage_NOT_VOID_WRAP(...) {}
#define glRenderbufferStorageEXT_INDEX 1811
#define glRenderbufferStorageEXT_RETURN void
#define glRenderbufferStorageEXT_ARG_NAMES target, internalformat, width, height
#define glRenderbufferStorageEXT_ARG_EXPAND GLenum target, GLenum internalformat, GLsizei width, GLsizei height
#define glRenderbufferStorageEXT_PACKED PACKED_void_GLenum_GLenum_GLsizei_GLsizei
#define glRenderbufferStorageEXT_FORMAT FORMAT_void_GLenum_GLenum_GLsizei_GLsizei
#define glRenderbufferStorageEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glRenderbufferStorageEXT_NOT_VOID_WRAP(...) {}
#define glRenderbufferStorageMultisample_INDEX 1812
#define glRenderbufferStorageMultisample_RETURN void
#define glRenderbufferStorageMultisample_ARG_NAMES target, samples, internalformat, width, height
#define glRenderbufferStorageMultisample_ARG_EXPAND GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height
#define glRenderbufferStorageMultisample_PACKED PACKED_void_GLenum_GLsizei_GLenum_GLsizei_GLsizei
#define glRenderbufferStorageMultisample_FORMAT FORMAT_void_GLenum_GLsizei_GLenum_GLsizei_GLsizei
#define glRenderbufferStorageMultisample_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glRenderbufferStorageMultisample_NOT_VOID_WRAP(...) {}
#define glRenderbufferStorageMultisampleCoverageNV_INDEX 1813
#define glRenderbufferStorageMultisampleCoverageNV_RETURN void
#define glRenderbufferStorageMultisampleCoverageNV_ARG_NAMES target, coverageSamples, colorSamples, internalformat, width, height
#define glRenderbufferStorageMultisampleCoverageNV_ARG_EXPAND GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height
#define glRenderbufferStorageMultisampleCoverageNV_PACKED PACKED_void_GLenum_GLsizei_GLsizei_GLenum_GLsizei_GLsizei
#define glRenderbufferStorageMultisampleCoverageNV_FORMAT FORMAT_void_GLenum_GLsizei_GLsizei_GLenum_GLsizei_GLsizei
#define glRenderbufferStorageMultisampleCoverageNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glRenderbufferStorageMultisampleCoverageNV_NOT_VOID_WRAP(...) {}
#define glRenderbufferStorageMultisampleEXT_INDEX 1814
#define glRenderbufferStorageMultisampleEXT_RETURN void
#define glRenderbufferStorageMultisampleEXT_ARG_NAMES target, samples, internalformat, width, height
#define glRenderbufferStorageMultisampleEXT_ARG_EXPAND GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height
#define glRenderbufferStorageMultisampleEXT_PACKED PACKED_void_GLenum_GLsizei_GLenum_GLsizei_GLsizei
#define glRenderbufferStorageMultisampleEXT_FORMAT FORMAT_void_GLenum_GLsizei_GLenum_GLsizei_GLsizei
#define glRenderbufferStorageMultisampleEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glRenderbufferStorageMultisampleEXT_NOT_VOID_WRAP(...) {}
#define glReplacementCodePointerSUN_INDEX 1815
#define glReplacementCodePointerSUN_RETURN void
#define glReplacementCodePointerSUN_ARG_NAMES type, stride, pointer
#define glReplacementCodePointerSUN_ARG_EXPAND GLenum type, GLsizei stride, const GLvoid * pointer
#define glReplacementCodePointerSUN_PACKED PACKED_void_GLenum_GLsizei_const_GLvoid___GENPT__
#define glReplacementCodePointerSUN_FORMAT FORMAT_void_GLenum_GLsizei_const_GLvoid___GENPT__
#define glReplacementCodePointerSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glReplacementCodePointerSUN_NOT_VOID_WRAP(...) {}
#define glReplacementCodeubSUN_INDEX 1816
#define glReplacementCodeubSUN_RETURN void
#define glReplacementCodeubSUN_ARG_NAMES code
#define glReplacementCodeubSUN_ARG_EXPAND GLubyte code
#define glReplacementCodeubSUN_PACKED PACKED_void_GLubyte
#define glReplacementCodeubSUN_FORMAT FORMAT_void_GLubyte
#define glReplacementCodeubSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glReplacementCodeubSUN_NOT_VOID_WRAP(...) {}
#define glReplacementCodeubvSUN_INDEX 1817
#define glReplacementCodeubvSUN_RETURN void
#define glReplacementCodeubvSUN_ARG_NAMES code
#define glReplacementCodeubvSUN_ARG_EXPAND const GLubyte * code
#define glReplacementCodeubvSUN_PACKED PACKED_void_const_GLubyte___GENPT__
#define glReplacementCodeubvSUN_FORMAT FORMAT_void_const_GLubyte___GENPT__
#define glReplacementCodeubvSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glReplacementCodeubvSUN_NOT_VOID_WRAP(...) {}
#define glReplacementCodeuiColor3fVertex3fSUN_INDEX 1818
#define glReplacementCodeuiColor3fVertex3fSUN_RETURN void
#define glReplacementCodeuiColor3fVertex3fSUN_ARG_NAMES rc, r, g, b, x, y, z
#define glReplacementCodeuiColor3fVertex3fSUN_ARG_EXPAND GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z
#define glReplacementCodeuiColor3fVertex3fSUN_PACKED PACKED_void_GLuint_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat
#define glReplacementCodeuiColor3fVertex3fSUN_FORMAT FORMAT_void_GLuint_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat
#define glReplacementCodeuiColor3fVertex3fSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glReplacementCodeuiColor3fVertex3fSUN_NOT_VOID_WRAP(...) {}
#define glReplacementCodeuiColor3fVertex3fvSUN_INDEX 1819
#define glReplacementCodeuiColor3fVertex3fvSUN_RETURN void
#define glReplacementCodeuiColor3fVertex3fvSUN_ARG_NAMES rc, c, v
#define glReplacementCodeuiColor3fVertex3fvSUN_ARG_EXPAND const GLuint * rc, const GLfloat * c, const GLfloat * v
#define glReplacementCodeuiColor3fVertex3fvSUN_PACKED PACKED_void_const_GLuint___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT__
#define glReplacementCodeuiColor3fVertex3fvSUN_FORMAT FORMAT_void_const_GLuint___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT__
#define glReplacementCodeuiColor3fVertex3fvSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glReplacementCodeuiColor3fVertex3fvSUN_NOT_VOID_WRAP(...) {}
#define glReplacementCodeuiColor4fNormal3fVertex3fSUN_INDEX 1820
#define glReplacementCodeuiColor4fNormal3fVertex3fSUN_RETURN void
#define glReplacementCodeuiColor4fNormal3fVertex3fSUN_ARG_NAMES rc, r, g, b, a, nx, ny, nz, x, y, z
#define glReplacementCodeuiColor4fNormal3fVertex3fSUN_ARG_EXPAND GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z
#define glReplacementCodeuiColor4fNormal3fVertex3fSUN_PACKED PACKED_void_GLuint_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat
#define glReplacementCodeuiColor4fNormal3fVertex3fSUN_FORMAT FORMAT_void_GLuint_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat
#define glReplacementCodeuiColor4fNormal3fVertex3fSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glReplacementCodeuiColor4fNormal3fVertex3fSUN_NOT_VOID_WRAP(...) {}
#define glReplacementCodeuiColor4fNormal3fVertex3fvSUN_INDEX 1821
#define glReplacementCodeuiColor4fNormal3fVertex3fvSUN_RETURN void
#define glReplacementCodeuiColor4fNormal3fVertex3fvSUN_ARG_NAMES rc, c, n, v
#define glReplacementCodeuiColor4fNormal3fVertex3fvSUN_ARG_EXPAND const GLuint * rc, const GLfloat * c, const GLfloat * n, const GLfloat * v
#define glReplacementCodeuiColor4fNormal3fVertex3fvSUN_PACKED PACKED_void_const_GLuint___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT__
#define glReplacementCodeuiColor4fNormal3fVertex3fvSUN_FORMAT FORMAT_void_const_GLuint___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT__
#define glReplacementCodeuiColor4fNormal3fVertex3fvSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glReplacementCodeuiColor4fNormal3fVertex3fvSUN_NOT_VOID_WRAP(...) {}
#define glReplacementCodeuiColor4ubVertex3fSUN_INDEX 1822
#define glReplacementCodeuiColor4ubVertex3fSUN_RETURN void
#define glReplacementCodeuiColor4ubVertex3fSUN_ARG_NAMES rc, r, g, b, a, x, y, z
#define glReplacementCodeuiColor4ubVertex3fSUN_ARG_EXPAND GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z
#define glReplacementCodeuiColor4ubVertex3fSUN_PACKED PACKED_void_GLuint_GLubyte_GLubyte_GLubyte_GLubyte_GLfloat_GLfloat_GLfloat
#define glReplacementCodeuiColor4ubVertex3fSUN_FORMAT FORMAT_void_GLuint_GLubyte_GLubyte_GLubyte_GLubyte_GLfloat_GLfloat_GLfloat
#define glReplacementCodeuiColor4ubVertex3fSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glReplacementCodeuiColor4ubVertex3fSUN_NOT_VOID_WRAP(...) {}
#define glReplacementCodeuiColor4ubVertex3fvSUN_INDEX 1823
#define glReplacementCodeuiColor4ubVertex3fvSUN_RETURN void
#define glReplacementCodeuiColor4ubVertex3fvSUN_ARG_NAMES rc, c, v
#define glReplacementCodeuiColor4ubVertex3fvSUN_ARG_EXPAND const GLuint * rc, const GLubyte * c, const GLfloat * v
#define glReplacementCodeuiColor4ubVertex3fvSUN_PACKED PACKED_void_const_GLuint___GENPT___const_GLubyte___GENPT___const_GLfloat___GENPT__
#define glReplacementCodeuiColor4ubVertex3fvSUN_FORMAT FORMAT_void_const_GLuint___GENPT___const_GLubyte___GENPT___const_GLfloat___GENPT__
#define glReplacementCodeuiColor4ubVertex3fvSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glReplacementCodeuiColor4ubVertex3fvSUN_NOT_VOID_WRAP(...) {}
#define glReplacementCodeuiNormal3fVertex3fSUN_INDEX 1824
#define glReplacementCodeuiNormal3fVertex3fSUN_RETURN void
#define glReplacementCodeuiNormal3fVertex3fSUN_ARG_NAMES rc, nx, ny, nz, x, y, z
#define glReplacementCodeuiNormal3fVertex3fSUN_ARG_EXPAND GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z
#define glReplacementCodeuiNormal3fVertex3fSUN_PACKED PACKED_void_GLuint_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat
#define glReplacementCodeuiNormal3fVertex3fSUN_FORMAT FORMAT_void_GLuint_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat
#define glReplacementCodeuiNormal3fVertex3fSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glReplacementCodeuiNormal3fVertex3fSUN_NOT_VOID_WRAP(...) {}
#define glReplacementCodeuiNormal3fVertex3fvSUN_INDEX 1825
#define glReplacementCodeuiNormal3fVertex3fvSUN_RETURN void
#define glReplacementCodeuiNormal3fVertex3fvSUN_ARG_NAMES rc, n, v
#define glReplacementCodeuiNormal3fVertex3fvSUN_ARG_EXPAND const GLuint * rc, const GLfloat * n, const GLfloat * v
#define glReplacementCodeuiNormal3fVertex3fvSUN_PACKED PACKED_void_const_GLuint___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT__
#define glReplacementCodeuiNormal3fVertex3fvSUN_FORMAT FORMAT_void_const_GLuint___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT__
#define glReplacementCodeuiNormal3fVertex3fvSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glReplacementCodeuiNormal3fVertex3fvSUN_NOT_VOID_WRAP(...) {}
#define glReplacementCodeuiSUN_INDEX 1826
#define glReplacementCodeuiSUN_RETURN void
#define glReplacementCodeuiSUN_ARG_NAMES code
#define glReplacementCodeuiSUN_ARG_EXPAND GLuint code
#define glReplacementCodeuiSUN_PACKED PACKED_void_GLuint
#define glReplacementCodeuiSUN_FORMAT FORMAT_void_GLuint
#define glReplacementCodeuiSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glReplacementCodeuiSUN_NOT_VOID_WRAP(...) {}
#define glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_INDEX 1827
#define glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_RETURN void
#define glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_ARG_NAMES rc, s, t, r, g, b, a, nx, ny, nz, x, y, z
#define glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_ARG_EXPAND GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z
#define glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_PACKED PACKED_void_GLuint_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat
#define glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_FORMAT FORMAT_void_GLuint_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat
#define glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_NOT_VOID_WRAP(...) {}
#define glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_INDEX 1828
#define glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_RETURN void
#define glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_ARG_NAMES rc, tc, c, n, v
#define glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_ARG_EXPAND const GLuint * rc, const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v
#define glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_PACKED PACKED_void_const_GLuint___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT__
#define glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_FORMAT FORMAT_void_const_GLuint___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT__
#define glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_NOT_VOID_WRAP(...) {}
#define glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_INDEX 1829
#define glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_RETURN void
#define glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_ARG_NAMES rc, s, t, nx, ny, nz, x, y, z
#define glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_ARG_EXPAND GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z
#define glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_PACKED PACKED_void_GLuint_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat
#define glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_FORMAT FORMAT_void_GLuint_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat
#define glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_NOT_VOID_WRAP(...) {}
#define glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_INDEX 1830
#define glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_RETURN void
#define glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_ARG_NAMES rc, tc, n, v
#define glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_ARG_EXPAND const GLuint * rc, const GLfloat * tc, const GLfloat * n, const GLfloat * v
#define glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_PACKED PACKED_void_const_GLuint___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT__
#define glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_FORMAT FORMAT_void_const_GLuint___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT__
#define glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_NOT_VOID_WRAP(...) {}
#define glReplacementCodeuiTexCoord2fVertex3fSUN_INDEX 1831
#define glReplacementCodeuiTexCoord2fVertex3fSUN_RETURN void
#define glReplacementCodeuiTexCoord2fVertex3fSUN_ARG_NAMES rc, s, t, x, y, z
#define glReplacementCodeuiTexCoord2fVertex3fSUN_ARG_EXPAND GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z
#define glReplacementCodeuiTexCoord2fVertex3fSUN_PACKED PACKED_void_GLuint_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat
#define glReplacementCodeuiTexCoord2fVertex3fSUN_FORMAT FORMAT_void_GLuint_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat
#define glReplacementCodeuiTexCoord2fVertex3fSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glReplacementCodeuiTexCoord2fVertex3fSUN_NOT_VOID_WRAP(...) {}
#define glReplacementCodeuiTexCoord2fVertex3fvSUN_INDEX 1832
#define glReplacementCodeuiTexCoord2fVertex3fvSUN_RETURN void
#define glReplacementCodeuiTexCoord2fVertex3fvSUN_ARG_NAMES rc, tc, v
#define glReplacementCodeuiTexCoord2fVertex3fvSUN_ARG_EXPAND const GLuint * rc, const GLfloat * tc, const GLfloat * v
#define glReplacementCodeuiTexCoord2fVertex3fvSUN_PACKED PACKED_void_const_GLuint___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT__
#define glReplacementCodeuiTexCoord2fVertex3fvSUN_FORMAT FORMAT_void_const_GLuint___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT__
#define glReplacementCodeuiTexCoord2fVertex3fvSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glReplacementCodeuiTexCoord2fVertex3fvSUN_NOT_VOID_WRAP(...) {}
#define glReplacementCodeuiVertex3fSUN_INDEX 1833
#define glReplacementCodeuiVertex3fSUN_RETURN void
#define glReplacementCodeuiVertex3fSUN_ARG_NAMES rc, x, y, z
#define glReplacementCodeuiVertex3fSUN_ARG_EXPAND GLuint rc, GLfloat x, GLfloat y, GLfloat z
#define glReplacementCodeuiVertex3fSUN_PACKED PACKED_void_GLuint_GLfloat_GLfloat_GLfloat
#define glReplacementCodeuiVertex3fSUN_FORMAT FORMAT_void_GLuint_GLfloat_GLfloat_GLfloat
#define glReplacementCodeuiVertex3fSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glReplacementCodeuiVertex3fSUN_NOT_VOID_WRAP(...) {}
#define glReplacementCodeuiVertex3fvSUN_INDEX 1834
#define glReplacementCodeuiVertex3fvSUN_RETURN void
#define glReplacementCodeuiVertex3fvSUN_ARG_NAMES rc, v
#define glReplacementCodeuiVertex3fvSUN_ARG_EXPAND const GLuint * rc, const GLfloat * v
#define glReplacementCodeuiVertex3fvSUN_PACKED PACKED_void_const_GLuint___GENPT___const_GLfloat___GENPT__
#define glReplacementCodeuiVertex3fvSUN_FORMAT FORMAT_void_const_GLuint___GENPT___const_GLfloat___GENPT__
#define glReplacementCodeuiVertex3fvSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glReplacementCodeuiVertex3fvSUN_NOT_VOID_WRAP(...) {}
#define glReplacementCodeuivSUN_INDEX 1835
#define glReplacementCodeuivSUN_RETURN void
#define glReplacementCodeuivSUN_ARG_NAMES code
#define glReplacementCodeuivSUN_ARG_EXPAND const GLuint * code
#define glReplacementCodeuivSUN_PACKED PACKED_void_const_GLuint___GENPT__
#define glReplacementCodeuivSUN_FORMAT FORMAT_void_const_GLuint___GENPT__
#define glReplacementCodeuivSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glReplacementCodeuivSUN_NOT_VOID_WRAP(...) {}
#define glReplacementCodeusSUN_INDEX 1836
#define glReplacementCodeusSUN_RETURN void
#define glReplacementCodeusSUN_ARG_NAMES code
#define glReplacementCodeusSUN_ARG_EXPAND GLushort code
#define glReplacementCodeusSUN_PACKED PACKED_void_GLushort
#define glReplacementCodeusSUN_FORMAT FORMAT_void_GLushort
#define glReplacementCodeusSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glReplacementCodeusSUN_NOT_VOID_WRAP(...) {}
#define glReplacementCodeusvSUN_INDEX 1837
#define glReplacementCodeusvSUN_RETURN void
#define glReplacementCodeusvSUN_ARG_NAMES code
#define glReplacementCodeusvSUN_ARG_EXPAND const GLushort * code
#define glReplacementCodeusvSUN_PACKED PACKED_void_const_GLushort___GENPT__
#define glReplacementCodeusvSUN_FORMAT FORMAT_void_const_GLushort___GENPT__
#define glReplacementCodeusvSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glReplacementCodeusvSUN_NOT_VOID_WRAP(...) {}
#define glRequestResidentProgramsNV_INDEX 1838
#define glRequestResidentProgramsNV_RETURN void
#define glRequestResidentProgramsNV_ARG_NAMES n, programs
#define glRequestResidentProgramsNV_ARG_EXPAND GLsizei n, const GLuint * programs
#define glRequestResidentProgramsNV_PACKED PACKED_void_GLsizei_const_GLuint___GENPT__
#define glRequestResidentProgramsNV_FORMAT FORMAT_void_GLsizei_const_GLuint___GENPT__
#define glRequestResidentProgramsNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glRequestResidentProgramsNV_NOT_VOID_WRAP(...) {}
#define glResetHistogram_INDEX 1839
#define glResetHistogram_RETURN void
#define glResetHistogram_ARG_NAMES target
#define glResetHistogram_ARG_EXPAND GLenum target
#define glResetHistogram_PACKED PACKED_void_GLenum
#define glResetHistogram_FORMAT FORMAT_void_GLenum
#define glResetHistogram_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glResetHistogram_NOT_VOID_WRAP(...) {}
#define glResetHistogramEXT_INDEX 1840
#define glResetHistogramEXT_RETURN void
#define glResetHistogramEXT_ARG_NAMES target
#define glResetHistogramEXT_ARG_EXPAND GLenum target
#define glResetHistogramEXT_PACKED PACKED_void_GLenum
#define glResetHistogramEXT_FORMAT FORMAT_void_GLenum
#define glResetHistogramEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glResetHistogramEXT_NOT_VOID_WRAP(...) {}
#define glResetMinmax_INDEX 1841
#define glResetMinmax_RETURN void
#define glResetMinmax_ARG_NAMES target
#define glResetMinmax_ARG_EXPAND GLenum target
#define glResetMinmax_PACKED PACKED_void_GLenum
#define glResetMinmax_FORMAT FORMAT_void_GLenum
#define glResetMinmax_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glResetMinmax_NOT_VOID_WRAP(...) {}
#define glResetMinmaxEXT_INDEX 1842
#define glResetMinmaxEXT_RETURN void
#define glResetMinmaxEXT_ARG_NAMES target
#define glResetMinmaxEXT_ARG_EXPAND GLenum target
#define glResetMinmaxEXT_PACKED PACKED_void_GLenum
#define glResetMinmaxEXT_FORMAT FORMAT_void_GLenum
#define glResetMinmaxEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glResetMinmaxEXT_NOT_VOID_WRAP(...) {}
#define glResizeBuffersMESA_INDEX 1843
#define glResizeBuffersMESA_RETURN void
#define glResizeBuffersMESA_ARG_NAMES 
#define glResizeBuffersMESA_ARG_EXPAND 
#define glResizeBuffersMESA_PACKED PACKED_void
#define glResizeBuffersMESA_FORMAT FORMAT_void
#define glResizeBuffersMESA_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glResizeBuffersMESA_NOT_VOID_WRAP(...) {}
#define glResumeTransformFeedback_INDEX 1844
#define glResumeTransformFeedback_RETURN void
#define glResumeTransformFeedback_ARG_NAMES 
#define glResumeTransformFeedback_ARG_EXPAND 
#define glResumeTransformFeedback_PACKED PACKED_void
#define glResumeTransformFeedback_FORMAT FORMAT_void
#define glResumeTransformFeedback_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glResumeTransformFeedback_NOT_VOID_WRAP(...) {}
#define glResumeTransformFeedbackNV_INDEX 1845
#define glResumeTransformFeedbackNV_RETURN void
#define glResumeTransformFeedbackNV_ARG_NAMES 
#define glResumeTransformFeedbackNV_ARG_EXPAND 
#define glResumeTransformFeedbackNV_PACKED PACKED_void
#define glResumeTransformFeedbackNV_FORMAT FORMAT_void
#define glResumeTransformFeedbackNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glResumeTransformFeedbackNV_NOT_VOID_WRAP(...) {}
#define glRotated_INDEX 1846
#define glRotated_RETURN void
#define glRotated_ARG_NAMES angle, x, y, z
#define glRotated_ARG_EXPAND GLdouble angle, GLdouble x, GLdouble y, GLdouble z
#define glRotated_PACKED PACKED_void_GLdouble_GLdouble_GLdouble_GLdouble
#define glRotated_FORMAT FORMAT_void_GLdouble_GLdouble_GLdouble_GLdouble
#define glRotated_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glRotated_NOT_VOID_WRAP(...) {}
#define glRotatef_INDEX 1847
#define glRotatef_RETURN void
#define glRotatef_ARG_NAMES angle, x, y, z
#define glRotatef_ARG_EXPAND GLfloat angle, GLfloat x, GLfloat y, GLfloat z
#define glRotatef_PACKED PACKED_void_GLfloat_GLfloat_GLfloat_GLfloat
#define glRotatef_FORMAT FORMAT_void_GLfloat_GLfloat_GLfloat_GLfloat
#define glRotatef_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glRotatef_NOT_VOID_WRAP(...) {}
#define glRotatex_INDEX 1848
#define glRotatex_RETURN void
#define glRotatex_ARG_NAMES angle, x, y, z
#define glRotatex_ARG_EXPAND GLfixed angle, GLfixed x, GLfixed y, GLfixed z
#define glRotatex_PACKED PACKED_void_GLfixed_GLfixed_GLfixed_GLfixed
#define glRotatex_FORMAT FORMAT_void_GLfixed_GLfixed_GLfixed_GLfixed
#define glRotatex_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glRotatex_NOT_VOID_WRAP(...) {}
#define glRotatexOES_INDEX 1849
#define glRotatexOES_RETURN void
#define glRotatexOES_ARG_NAMES angle, x, y, z
#define glRotatexOES_ARG_EXPAND GLfixed angle, GLfixed x, GLfixed y, GLfixed z
#define glRotatexOES_PACKED PACKED_void_GLfixed_GLfixed_GLfixed_GLfixed
#define glRotatexOES_FORMAT FORMAT_void_GLfixed_GLfixed_GLfixed_GLfixed
#define glRotatexOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glRotatexOES_NOT_VOID_WRAP(...) {}
#define glSampleCoverage_INDEX 1850
#define glSampleCoverage_RETURN void
#define glSampleCoverage_ARG_NAMES value, invert
#define glSampleCoverage_ARG_EXPAND GLclampf value, GLboolean invert
#define glSampleCoverage_PACKED PACKED_void_GLclampf_GLboolean
#define glSampleCoverage_FORMAT FORMAT_void_GLclampf_GLboolean
#define glSampleCoverage_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSampleCoverage_NOT_VOID_WRAP(...) {}
#define glSampleCoverageARB_INDEX 1851
#define glSampleCoverageARB_RETURN void
#define glSampleCoverageARB_ARG_NAMES value, invert
#define glSampleCoverageARB_ARG_EXPAND GLfloat value, GLboolean invert
#define glSampleCoverageARB_PACKED PACKED_void_GLfloat_GLboolean
#define glSampleCoverageARB_FORMAT FORMAT_void_GLfloat_GLboolean
#define glSampleCoverageARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSampleCoverageARB_NOT_VOID_WRAP(...) {}
#define glSampleCoverageOES_INDEX 1852
#define glSampleCoverageOES_RETURN void
#define glSampleCoverageOES_ARG_NAMES value, invert
#define glSampleCoverageOES_ARG_EXPAND GLfixed value, GLboolean invert
#define glSampleCoverageOES_PACKED PACKED_void_GLfixed_GLboolean
#define glSampleCoverageOES_FORMAT FORMAT_void_GLfixed_GLboolean
#define glSampleCoverageOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSampleCoverageOES_NOT_VOID_WRAP(...) {}
#define glSampleCoveragex_INDEX 1853
#define glSampleCoveragex_RETURN void
#define glSampleCoveragex_ARG_NAMES value, invert
#define glSampleCoveragex_ARG_EXPAND GLclampx value, GLboolean invert
#define glSampleCoveragex_PACKED PACKED_void_GLclampx_GLboolean
#define glSampleCoveragex_FORMAT FORMAT_void_GLclampx_GLboolean
#define glSampleCoveragex_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSampleCoveragex_NOT_VOID_WRAP(...) {}
#define glSampleMapATI_INDEX 1854
#define glSampleMapATI_RETURN void
#define glSampleMapATI_ARG_NAMES dst, interp, swizzle
#define glSampleMapATI_ARG_EXPAND GLuint dst, GLuint interp, GLenum swizzle
#define glSampleMapATI_PACKED PACKED_void_GLuint_GLuint_GLenum
#define glSampleMapATI_FORMAT FORMAT_void_GLuint_GLuint_GLenum
#define glSampleMapATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSampleMapATI_NOT_VOID_WRAP(...) {}
#define glSampleMaskEXT_INDEX 1855
#define glSampleMaskEXT_RETURN void
#define glSampleMaskEXT_ARG_NAMES value, invert
#define glSampleMaskEXT_ARG_EXPAND GLclampf value, GLboolean invert
#define glSampleMaskEXT_PACKED PACKED_void_GLclampf_GLboolean
#define glSampleMaskEXT_FORMAT FORMAT_void_GLclampf_GLboolean
#define glSampleMaskEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSampleMaskEXT_NOT_VOID_WRAP(...) {}
#define glSampleMaskIndexedNV_INDEX 1856
#define glSampleMaskIndexedNV_RETURN void
#define glSampleMaskIndexedNV_ARG_NAMES index, mask
#define glSampleMaskIndexedNV_ARG_EXPAND GLuint index, GLbitfield mask
#define glSampleMaskIndexedNV_PACKED PACKED_void_GLuint_GLbitfield
#define glSampleMaskIndexedNV_FORMAT FORMAT_void_GLuint_GLbitfield
#define glSampleMaskIndexedNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSampleMaskIndexedNV_NOT_VOID_WRAP(...) {}
#define glSampleMaskSGIS_INDEX 1857
#define glSampleMaskSGIS_RETURN void
#define glSampleMaskSGIS_ARG_NAMES value, invert
#define glSampleMaskSGIS_ARG_EXPAND GLclampf value, GLboolean invert
#define glSampleMaskSGIS_PACKED PACKED_void_GLclampf_GLboolean
#define glSampleMaskSGIS_FORMAT FORMAT_void_GLclampf_GLboolean
#define glSampleMaskSGIS_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSampleMaskSGIS_NOT_VOID_WRAP(...) {}
#define glSampleMaski_INDEX 1858
#define glSampleMaski_RETURN void
#define glSampleMaski_ARG_NAMES index, mask
#define glSampleMaski_ARG_EXPAND GLuint index, GLbitfield mask
#define glSampleMaski_PACKED PACKED_void_GLuint_GLbitfield
#define glSampleMaski_FORMAT FORMAT_void_GLuint_GLbitfield
#define glSampleMaski_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSampleMaski_NOT_VOID_WRAP(...) {}
#define glSamplePatternEXT_INDEX 1859
#define glSamplePatternEXT_RETURN void
#define glSamplePatternEXT_ARG_NAMES pattern
#define glSamplePatternEXT_ARG_EXPAND GLenum pattern
#define glSamplePatternEXT_PACKED PACKED_void_GLenum
#define glSamplePatternEXT_FORMAT FORMAT_void_GLenum
#define glSamplePatternEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSamplePatternEXT_NOT_VOID_WRAP(...) {}
#define glSamplePatternSGIS_INDEX 1860
#define glSamplePatternSGIS_RETURN void
#define glSamplePatternSGIS_ARG_NAMES pattern
#define glSamplePatternSGIS_ARG_EXPAND GLenum pattern
#define glSamplePatternSGIS_PACKED PACKED_void_GLenum
#define glSamplePatternSGIS_FORMAT FORMAT_void_GLenum
#define glSamplePatternSGIS_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSamplePatternSGIS_NOT_VOID_WRAP(...) {}
#define glSamplerParameterIiv_INDEX 1861
#define glSamplerParameterIiv_RETURN void
#define glSamplerParameterIiv_ARG_NAMES sampler, pname, param
#define glSamplerParameterIiv_ARG_EXPAND GLuint sampler, GLenum pname, const GLint * param
#define glSamplerParameterIiv_PACKED PACKED_void_GLuint_GLenum_const_GLint___GENPT__
#define glSamplerParameterIiv_FORMAT FORMAT_void_GLuint_GLenum_const_GLint___GENPT__
#define glSamplerParameterIiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSamplerParameterIiv_NOT_VOID_WRAP(...) {}
#define glSamplerParameterIuiv_INDEX 1862
#define glSamplerParameterIuiv_RETURN void
#define glSamplerParameterIuiv_ARG_NAMES sampler, pname, param
#define glSamplerParameterIuiv_ARG_EXPAND GLuint sampler, GLenum pname, const GLuint * param
#define glSamplerParameterIuiv_PACKED PACKED_void_GLuint_GLenum_const_GLuint___GENPT__
#define glSamplerParameterIuiv_FORMAT FORMAT_void_GLuint_GLenum_const_GLuint___GENPT__
#define glSamplerParameterIuiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSamplerParameterIuiv_NOT_VOID_WRAP(...) {}
#define glSamplerParameterf_INDEX 1863
#define glSamplerParameterf_RETURN void
#define glSamplerParameterf_ARG_NAMES sampler, pname, param
#define glSamplerParameterf_ARG_EXPAND GLuint sampler, GLenum pname, GLfloat param
#define glSamplerParameterf_PACKED PACKED_void_GLuint_GLenum_GLfloat
#define glSamplerParameterf_FORMAT FORMAT_void_GLuint_GLenum_GLfloat
#define glSamplerParameterf_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSamplerParameterf_NOT_VOID_WRAP(...) {}
#define glSamplerParameterfv_INDEX 1864
#define glSamplerParameterfv_RETURN void
#define glSamplerParameterfv_ARG_NAMES sampler, pname, param
#define glSamplerParameterfv_ARG_EXPAND GLuint sampler, GLenum pname, const GLfloat * param
#define glSamplerParameterfv_PACKED PACKED_void_GLuint_GLenum_const_GLfloat___GENPT__
#define glSamplerParameterfv_FORMAT FORMAT_void_GLuint_GLenum_const_GLfloat___GENPT__
#define glSamplerParameterfv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSamplerParameterfv_NOT_VOID_WRAP(...) {}
#define glSamplerParameteri_INDEX 1865
#define glSamplerParameteri_RETURN void
#define glSamplerParameteri_ARG_NAMES sampler, pname, param
#define glSamplerParameteri_ARG_EXPAND GLuint sampler, GLenum pname, GLint param
#define glSamplerParameteri_PACKED PACKED_void_GLuint_GLenum_GLint
#define glSamplerParameteri_FORMAT FORMAT_void_GLuint_GLenum_GLint
#define glSamplerParameteri_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSamplerParameteri_NOT_VOID_WRAP(...) {}
#define glSamplerParameteriv_INDEX 1866
#define glSamplerParameteriv_RETURN void
#define glSamplerParameteriv_ARG_NAMES sampler, pname, param
#define glSamplerParameteriv_ARG_EXPAND GLuint sampler, GLenum pname, const GLint * param
#define glSamplerParameteriv_PACKED PACKED_void_GLuint_GLenum_const_GLint___GENPT__
#define glSamplerParameteriv_FORMAT FORMAT_void_GLuint_GLenum_const_GLint___GENPT__
#define glSamplerParameteriv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSamplerParameteriv_NOT_VOID_WRAP(...) {}
#define glScaled_INDEX 1867
#define glScaled_RETURN void
#define glScaled_ARG_NAMES x, y, z
#define glScaled_ARG_EXPAND GLdouble x, GLdouble y, GLdouble z
#define glScaled_PACKED PACKED_void_GLdouble_GLdouble_GLdouble
#define glScaled_FORMAT FORMAT_void_GLdouble_GLdouble_GLdouble
#define glScaled_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glScaled_NOT_VOID_WRAP(...) {}
#define glScalef_INDEX 1868
#define glScalef_RETURN void
#define glScalef_ARG_NAMES x, y, z
#define glScalef_ARG_EXPAND GLfloat x, GLfloat y, GLfloat z
#define glScalef_PACKED PACKED_void_GLfloat_GLfloat_GLfloat
#define glScalef_FORMAT FORMAT_void_GLfloat_GLfloat_GLfloat
#define glScalef_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glScalef_NOT_VOID_WRAP(...) {}
#define glScalex_INDEX 1869
#define glScalex_RETURN void
#define glScalex_ARG_NAMES x, y, z
#define glScalex_ARG_EXPAND GLfixed x, GLfixed y, GLfixed z
#define glScalex_PACKED PACKED_void_GLfixed_GLfixed_GLfixed
#define glScalex_FORMAT FORMAT_void_GLfixed_GLfixed_GLfixed
#define glScalex_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glScalex_NOT_VOID_WRAP(...) {}
#define glScalexOES_INDEX 1870
#define glScalexOES_RETURN void
#define glScalexOES_ARG_NAMES x, y, z
#define glScalexOES_ARG_EXPAND GLfixed x, GLfixed y, GLfixed z
#define glScalexOES_PACKED PACKED_void_GLfixed_GLfixed_GLfixed
#define glScalexOES_FORMAT FORMAT_void_GLfixed_GLfixed_GLfixed
#define glScalexOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glScalexOES_NOT_VOID_WRAP(...) {}
#define glScissor_INDEX 1871
#define glScissor_RETURN void
#define glScissor_ARG_NAMES x, y, width, height
#define glScissor_ARG_EXPAND GLint x, GLint y, GLsizei width, GLsizei height
#define glScissor_PACKED PACKED_void_GLint_GLint_GLsizei_GLsizei
#define glScissor_FORMAT FORMAT_void_GLint_GLint_GLsizei_GLsizei
#define glScissor_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glScissor_NOT_VOID_WRAP(...) {}
#define glScissorArrayv_INDEX 1872
#define glScissorArrayv_RETURN void
#define glScissorArrayv_ARG_NAMES first, count, v
#define glScissorArrayv_ARG_EXPAND GLuint first, GLsizei count, const GLint * v
#define glScissorArrayv_PACKED PACKED_void_GLuint_GLsizei_const_GLint___GENPT__
#define glScissorArrayv_FORMAT FORMAT_void_GLuint_GLsizei_const_GLint___GENPT__
#define glScissorArrayv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glScissorArrayv_NOT_VOID_WRAP(...) {}
#define glScissorIndexed_INDEX 1873
#define glScissorIndexed_RETURN void
#define glScissorIndexed_ARG_NAMES index, left, bottom, width, height
#define glScissorIndexed_ARG_EXPAND GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height
#define glScissorIndexed_PACKED PACKED_void_GLuint_GLint_GLint_GLsizei_GLsizei
#define glScissorIndexed_FORMAT FORMAT_void_GLuint_GLint_GLint_GLsizei_GLsizei
#define glScissorIndexed_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glScissorIndexed_NOT_VOID_WRAP(...) {}
#define glScissorIndexedv_INDEX 1874
#define glScissorIndexedv_RETURN void
#define glScissorIndexedv_ARG_NAMES index, v
#define glScissorIndexedv_ARG_EXPAND GLuint index, const GLint * v
#define glScissorIndexedv_PACKED PACKED_void_GLuint_const_GLint___GENPT__
#define glScissorIndexedv_FORMAT FORMAT_void_GLuint_const_GLint___GENPT__
#define glScissorIndexedv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glScissorIndexedv_NOT_VOID_WRAP(...) {}
#define glSecondaryColor3b_INDEX 1875
#define glSecondaryColor3b_RETURN void
#define glSecondaryColor3b_ARG_NAMES red, green, blue
#define glSecondaryColor3b_ARG_EXPAND GLbyte red, GLbyte green, GLbyte blue
#define glSecondaryColor3b_PACKED PACKED_void_GLbyte_GLbyte_GLbyte
#define glSecondaryColor3b_FORMAT FORMAT_void_GLbyte_GLbyte_GLbyte
#define glSecondaryColor3b_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSecondaryColor3b_NOT_VOID_WRAP(...) {}
#define glSecondaryColor3bEXT_INDEX 1876
#define glSecondaryColor3bEXT_RETURN void
#define glSecondaryColor3bEXT_ARG_NAMES red, green, blue
#define glSecondaryColor3bEXT_ARG_EXPAND GLbyte red, GLbyte green, GLbyte blue
#define glSecondaryColor3bEXT_PACKED PACKED_void_GLbyte_GLbyte_GLbyte
#define glSecondaryColor3bEXT_FORMAT FORMAT_void_GLbyte_GLbyte_GLbyte
#define glSecondaryColor3bEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSecondaryColor3bEXT_NOT_VOID_WRAP(...) {}
#define glSecondaryColor3bv_INDEX 1877
#define glSecondaryColor3bv_RETURN void
#define glSecondaryColor3bv_ARG_NAMES v
#define glSecondaryColor3bv_ARG_EXPAND const GLbyte * v
#define glSecondaryColor3bv_PACKED PACKED_void_const_GLbyte___GENPT__
#define glSecondaryColor3bv_FORMAT FORMAT_void_const_GLbyte___GENPT__
#define glSecondaryColor3bv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSecondaryColor3bv_NOT_VOID_WRAP(...) {}
#define glSecondaryColor3bvEXT_INDEX 1878
#define glSecondaryColor3bvEXT_RETURN void
#define glSecondaryColor3bvEXT_ARG_NAMES v
#define glSecondaryColor3bvEXT_ARG_EXPAND const GLbyte * v
#define glSecondaryColor3bvEXT_PACKED PACKED_void_const_GLbyte___GENPT__
#define glSecondaryColor3bvEXT_FORMAT FORMAT_void_const_GLbyte___GENPT__
#define glSecondaryColor3bvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSecondaryColor3bvEXT_NOT_VOID_WRAP(...) {}
#define glSecondaryColor3d_INDEX 1879
#define glSecondaryColor3d_RETURN void
#define glSecondaryColor3d_ARG_NAMES red, green, blue
#define glSecondaryColor3d_ARG_EXPAND GLdouble red, GLdouble green, GLdouble blue
#define glSecondaryColor3d_PACKED PACKED_void_GLdouble_GLdouble_GLdouble
#define glSecondaryColor3d_FORMAT FORMAT_void_GLdouble_GLdouble_GLdouble
#define glSecondaryColor3d_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSecondaryColor3d_NOT_VOID_WRAP(...) {}
#define glSecondaryColor3dEXT_INDEX 1880
#define glSecondaryColor3dEXT_RETURN void
#define glSecondaryColor3dEXT_ARG_NAMES red, green, blue
#define glSecondaryColor3dEXT_ARG_EXPAND GLdouble red, GLdouble green, GLdouble blue
#define glSecondaryColor3dEXT_PACKED PACKED_void_GLdouble_GLdouble_GLdouble
#define glSecondaryColor3dEXT_FORMAT FORMAT_void_GLdouble_GLdouble_GLdouble
#define glSecondaryColor3dEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSecondaryColor3dEXT_NOT_VOID_WRAP(...) {}
#define glSecondaryColor3dv_INDEX 1881
#define glSecondaryColor3dv_RETURN void
#define glSecondaryColor3dv_ARG_NAMES v
#define glSecondaryColor3dv_ARG_EXPAND const GLdouble * v
#define glSecondaryColor3dv_PACKED PACKED_void_const_GLdouble___GENPT__
#define glSecondaryColor3dv_FORMAT FORMAT_void_const_GLdouble___GENPT__
#define glSecondaryColor3dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSecondaryColor3dv_NOT_VOID_WRAP(...) {}
#define glSecondaryColor3dvEXT_INDEX 1882
#define glSecondaryColor3dvEXT_RETURN void
#define glSecondaryColor3dvEXT_ARG_NAMES v
#define glSecondaryColor3dvEXT_ARG_EXPAND const GLdouble * v
#define glSecondaryColor3dvEXT_PACKED PACKED_void_const_GLdouble___GENPT__
#define glSecondaryColor3dvEXT_FORMAT FORMAT_void_const_GLdouble___GENPT__
#define glSecondaryColor3dvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSecondaryColor3dvEXT_NOT_VOID_WRAP(...) {}
#define glSecondaryColor3f_INDEX 1883
#define glSecondaryColor3f_RETURN void
#define glSecondaryColor3f_ARG_NAMES red, green, blue
#define glSecondaryColor3f_ARG_EXPAND GLfloat red, GLfloat green, GLfloat blue
#define glSecondaryColor3f_PACKED PACKED_void_GLfloat_GLfloat_GLfloat
#define glSecondaryColor3f_FORMAT FORMAT_void_GLfloat_GLfloat_GLfloat
#define glSecondaryColor3f_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSecondaryColor3f_NOT_VOID_WRAP(...) {}
#define glSecondaryColor3fEXT_INDEX 1884
#define glSecondaryColor3fEXT_RETURN void
#define glSecondaryColor3fEXT_ARG_NAMES red, green, blue
#define glSecondaryColor3fEXT_ARG_EXPAND GLfloat red, GLfloat green, GLfloat blue
#define glSecondaryColor3fEXT_PACKED PACKED_void_GLfloat_GLfloat_GLfloat
#define glSecondaryColor3fEXT_FORMAT FORMAT_void_GLfloat_GLfloat_GLfloat
#define glSecondaryColor3fEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSecondaryColor3fEXT_NOT_VOID_WRAP(...) {}
#define glSecondaryColor3fv_INDEX 1885
#define glSecondaryColor3fv_RETURN void
#define glSecondaryColor3fv_ARG_NAMES v
#define glSecondaryColor3fv_ARG_EXPAND const GLfloat * v
#define glSecondaryColor3fv_PACKED PACKED_void_const_GLfloat___GENPT__
#define glSecondaryColor3fv_FORMAT FORMAT_void_const_GLfloat___GENPT__
#define glSecondaryColor3fv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSecondaryColor3fv_NOT_VOID_WRAP(...) {}
#define glSecondaryColor3fvEXT_INDEX 1886
#define glSecondaryColor3fvEXT_RETURN void
#define glSecondaryColor3fvEXT_ARG_NAMES v
#define glSecondaryColor3fvEXT_ARG_EXPAND const GLfloat * v
#define glSecondaryColor3fvEXT_PACKED PACKED_void_const_GLfloat___GENPT__
#define glSecondaryColor3fvEXT_FORMAT FORMAT_void_const_GLfloat___GENPT__
#define glSecondaryColor3fvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSecondaryColor3fvEXT_NOT_VOID_WRAP(...) {}
#define glSecondaryColor3hNV_INDEX 1887
#define glSecondaryColor3hNV_RETURN void
#define glSecondaryColor3hNV_ARG_NAMES red, green, blue
#define glSecondaryColor3hNV_ARG_EXPAND GLhalfNV red, GLhalfNV green, GLhalfNV blue
#define glSecondaryColor3hNV_PACKED PACKED_void_GLhalfNV_GLhalfNV_GLhalfNV
#define glSecondaryColor3hNV_FORMAT FORMAT_void_GLhalfNV_GLhalfNV_GLhalfNV
#define glSecondaryColor3hNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSecondaryColor3hNV_NOT_VOID_WRAP(...) {}
#define glSecondaryColor3hvNV_INDEX 1888
#define glSecondaryColor3hvNV_RETURN void
#define glSecondaryColor3hvNV_ARG_NAMES v
#define glSecondaryColor3hvNV_ARG_EXPAND const GLhalfNV * v
#define glSecondaryColor3hvNV_PACKED PACKED_void_const_GLhalfNV___GENPT__
#define glSecondaryColor3hvNV_FORMAT FORMAT_void_const_GLhalfNV___GENPT__
#define glSecondaryColor3hvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSecondaryColor3hvNV_NOT_VOID_WRAP(...) {}
#define glSecondaryColor3i_INDEX 1889
#define glSecondaryColor3i_RETURN void
#define glSecondaryColor3i_ARG_NAMES red, green, blue
#define glSecondaryColor3i_ARG_EXPAND GLint red, GLint green, GLint blue
#define glSecondaryColor3i_PACKED PACKED_void_GLint_GLint_GLint
#define glSecondaryColor3i_FORMAT FORMAT_void_GLint_GLint_GLint
#define glSecondaryColor3i_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSecondaryColor3i_NOT_VOID_WRAP(...) {}
#define glSecondaryColor3iEXT_INDEX 1890
#define glSecondaryColor3iEXT_RETURN void
#define glSecondaryColor3iEXT_ARG_NAMES red, green, blue
#define glSecondaryColor3iEXT_ARG_EXPAND GLint red, GLint green, GLint blue
#define glSecondaryColor3iEXT_PACKED PACKED_void_GLint_GLint_GLint
#define glSecondaryColor3iEXT_FORMAT FORMAT_void_GLint_GLint_GLint
#define glSecondaryColor3iEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSecondaryColor3iEXT_NOT_VOID_WRAP(...) {}
#define glSecondaryColor3iv_INDEX 1891
#define glSecondaryColor3iv_RETURN void
#define glSecondaryColor3iv_ARG_NAMES v
#define glSecondaryColor3iv_ARG_EXPAND const GLint * v
#define glSecondaryColor3iv_PACKED PACKED_void_const_GLint___GENPT__
#define glSecondaryColor3iv_FORMAT FORMAT_void_const_GLint___GENPT__
#define glSecondaryColor3iv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSecondaryColor3iv_NOT_VOID_WRAP(...) {}
#define glSecondaryColor3ivEXT_INDEX 1892
#define glSecondaryColor3ivEXT_RETURN void
#define glSecondaryColor3ivEXT_ARG_NAMES v
#define glSecondaryColor3ivEXT_ARG_EXPAND const GLint * v
#define glSecondaryColor3ivEXT_PACKED PACKED_void_const_GLint___GENPT__
#define glSecondaryColor3ivEXT_FORMAT FORMAT_void_const_GLint___GENPT__
#define glSecondaryColor3ivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSecondaryColor3ivEXT_NOT_VOID_WRAP(...) {}
#define glSecondaryColor3s_INDEX 1893
#define glSecondaryColor3s_RETURN void
#define glSecondaryColor3s_ARG_NAMES red, green, blue
#define glSecondaryColor3s_ARG_EXPAND GLshort red, GLshort green, GLshort blue
#define glSecondaryColor3s_PACKED PACKED_void_GLshort_GLshort_GLshort
#define glSecondaryColor3s_FORMAT FORMAT_void_GLshort_GLshort_GLshort
#define glSecondaryColor3s_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSecondaryColor3s_NOT_VOID_WRAP(...) {}
#define glSecondaryColor3sEXT_INDEX 1894
#define glSecondaryColor3sEXT_RETURN void
#define glSecondaryColor3sEXT_ARG_NAMES red, green, blue
#define glSecondaryColor3sEXT_ARG_EXPAND GLshort red, GLshort green, GLshort blue
#define glSecondaryColor3sEXT_PACKED PACKED_void_GLshort_GLshort_GLshort
#define glSecondaryColor3sEXT_FORMAT FORMAT_void_GLshort_GLshort_GLshort
#define glSecondaryColor3sEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSecondaryColor3sEXT_NOT_VOID_WRAP(...) {}
#define glSecondaryColor3sv_INDEX 1895
#define glSecondaryColor3sv_RETURN void
#define glSecondaryColor3sv_ARG_NAMES v
#define glSecondaryColor3sv_ARG_EXPAND const GLshort * v
#define glSecondaryColor3sv_PACKED PACKED_void_const_GLshort___GENPT__
#define glSecondaryColor3sv_FORMAT FORMAT_void_const_GLshort___GENPT__
#define glSecondaryColor3sv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSecondaryColor3sv_NOT_VOID_WRAP(...) {}
#define glSecondaryColor3svEXT_INDEX 1896
#define glSecondaryColor3svEXT_RETURN void
#define glSecondaryColor3svEXT_ARG_NAMES v
#define glSecondaryColor3svEXT_ARG_EXPAND const GLshort * v
#define glSecondaryColor3svEXT_PACKED PACKED_void_const_GLshort___GENPT__
#define glSecondaryColor3svEXT_FORMAT FORMAT_void_const_GLshort___GENPT__
#define glSecondaryColor3svEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSecondaryColor3svEXT_NOT_VOID_WRAP(...) {}
#define glSecondaryColor3ub_INDEX 1897
#define glSecondaryColor3ub_RETURN void
#define glSecondaryColor3ub_ARG_NAMES red, green, blue
#define glSecondaryColor3ub_ARG_EXPAND GLubyte red, GLubyte green, GLubyte blue
#define glSecondaryColor3ub_PACKED PACKED_void_GLubyte_GLubyte_GLubyte
#define glSecondaryColor3ub_FORMAT FORMAT_void_GLubyte_GLubyte_GLubyte
#define glSecondaryColor3ub_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSecondaryColor3ub_NOT_VOID_WRAP(...) {}
#define glSecondaryColor3ubEXT_INDEX 1898
#define glSecondaryColor3ubEXT_RETURN void
#define glSecondaryColor3ubEXT_ARG_NAMES red, green, blue
#define glSecondaryColor3ubEXT_ARG_EXPAND GLubyte red, GLubyte green, GLubyte blue
#define glSecondaryColor3ubEXT_PACKED PACKED_void_GLubyte_GLubyte_GLubyte
#define glSecondaryColor3ubEXT_FORMAT FORMAT_void_GLubyte_GLubyte_GLubyte
#define glSecondaryColor3ubEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSecondaryColor3ubEXT_NOT_VOID_WRAP(...) {}
#define glSecondaryColor3ubv_INDEX 1899
#define glSecondaryColor3ubv_RETURN void
#define glSecondaryColor3ubv_ARG_NAMES v
#define glSecondaryColor3ubv_ARG_EXPAND const GLubyte * v
#define glSecondaryColor3ubv_PACKED PACKED_void_const_GLubyte___GENPT__
#define glSecondaryColor3ubv_FORMAT FORMAT_void_const_GLubyte___GENPT__
#define glSecondaryColor3ubv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSecondaryColor3ubv_NOT_VOID_WRAP(...) {}
#define glSecondaryColor3ubvEXT_INDEX 1900
#define glSecondaryColor3ubvEXT_RETURN void
#define glSecondaryColor3ubvEXT_ARG_NAMES v
#define glSecondaryColor3ubvEXT_ARG_EXPAND const GLubyte * v
#define glSecondaryColor3ubvEXT_PACKED PACKED_void_const_GLubyte___GENPT__
#define glSecondaryColor3ubvEXT_FORMAT FORMAT_void_const_GLubyte___GENPT__
#define glSecondaryColor3ubvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSecondaryColor3ubvEXT_NOT_VOID_WRAP(...) {}
#define glSecondaryColor3ui_INDEX 1901
#define glSecondaryColor3ui_RETURN void
#define glSecondaryColor3ui_ARG_NAMES red, green, blue
#define glSecondaryColor3ui_ARG_EXPAND GLuint red, GLuint green, GLuint blue
#define glSecondaryColor3ui_PACKED PACKED_void_GLuint_GLuint_GLuint
#define glSecondaryColor3ui_FORMAT FORMAT_void_GLuint_GLuint_GLuint
#define glSecondaryColor3ui_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSecondaryColor3ui_NOT_VOID_WRAP(...) {}
#define glSecondaryColor3uiEXT_INDEX 1902
#define glSecondaryColor3uiEXT_RETURN void
#define glSecondaryColor3uiEXT_ARG_NAMES red, green, blue
#define glSecondaryColor3uiEXT_ARG_EXPAND GLuint red, GLuint green, GLuint blue
#define glSecondaryColor3uiEXT_PACKED PACKED_void_GLuint_GLuint_GLuint
#define glSecondaryColor3uiEXT_FORMAT FORMAT_void_GLuint_GLuint_GLuint
#define glSecondaryColor3uiEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSecondaryColor3uiEXT_NOT_VOID_WRAP(...) {}
#define glSecondaryColor3uiv_INDEX 1903
#define glSecondaryColor3uiv_RETURN void
#define glSecondaryColor3uiv_ARG_NAMES v
#define glSecondaryColor3uiv_ARG_EXPAND const GLuint * v
#define glSecondaryColor3uiv_PACKED PACKED_void_const_GLuint___GENPT__
#define glSecondaryColor3uiv_FORMAT FORMAT_void_const_GLuint___GENPT__
#define glSecondaryColor3uiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSecondaryColor3uiv_NOT_VOID_WRAP(...) {}
#define glSecondaryColor3uivEXT_INDEX 1904
#define glSecondaryColor3uivEXT_RETURN void
#define glSecondaryColor3uivEXT_ARG_NAMES v
#define glSecondaryColor3uivEXT_ARG_EXPAND const GLuint * v
#define glSecondaryColor3uivEXT_PACKED PACKED_void_const_GLuint___GENPT__
#define glSecondaryColor3uivEXT_FORMAT FORMAT_void_const_GLuint___GENPT__
#define glSecondaryColor3uivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSecondaryColor3uivEXT_NOT_VOID_WRAP(...) {}
#define glSecondaryColor3us_INDEX 1905
#define glSecondaryColor3us_RETURN void
#define glSecondaryColor3us_ARG_NAMES red, green, blue
#define glSecondaryColor3us_ARG_EXPAND GLushort red, GLushort green, GLushort blue
#define glSecondaryColor3us_PACKED PACKED_void_GLushort_GLushort_GLushort
#define glSecondaryColor3us_FORMAT FORMAT_void_GLushort_GLushort_GLushort
#define glSecondaryColor3us_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSecondaryColor3us_NOT_VOID_WRAP(...) {}
#define glSecondaryColor3usEXT_INDEX 1906
#define glSecondaryColor3usEXT_RETURN void
#define glSecondaryColor3usEXT_ARG_NAMES red, green, blue
#define glSecondaryColor3usEXT_ARG_EXPAND GLushort red, GLushort green, GLushort blue
#define glSecondaryColor3usEXT_PACKED PACKED_void_GLushort_GLushort_GLushort
#define glSecondaryColor3usEXT_FORMAT FORMAT_void_GLushort_GLushort_GLushort
#define glSecondaryColor3usEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSecondaryColor3usEXT_NOT_VOID_WRAP(...) {}
#define glSecondaryColor3usv_INDEX 1907
#define glSecondaryColor3usv_RETURN void
#define glSecondaryColor3usv_ARG_NAMES v
#define glSecondaryColor3usv_ARG_EXPAND const GLushort * v
#define glSecondaryColor3usv_PACKED PACKED_void_const_GLushort___GENPT__
#define glSecondaryColor3usv_FORMAT FORMAT_void_const_GLushort___GENPT__
#define glSecondaryColor3usv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSecondaryColor3usv_NOT_VOID_WRAP(...) {}
#define glSecondaryColor3usvEXT_INDEX 1908
#define glSecondaryColor3usvEXT_RETURN void
#define glSecondaryColor3usvEXT_ARG_NAMES v
#define glSecondaryColor3usvEXT_ARG_EXPAND const GLushort * v
#define glSecondaryColor3usvEXT_PACKED PACKED_void_const_GLushort___GENPT__
#define glSecondaryColor3usvEXT_FORMAT FORMAT_void_const_GLushort___GENPT__
#define glSecondaryColor3usvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSecondaryColor3usvEXT_NOT_VOID_WRAP(...) {}
#define glSecondaryColorFormatNV_INDEX 1909
#define glSecondaryColorFormatNV_RETURN void
#define glSecondaryColorFormatNV_ARG_NAMES size, type, stride
#define glSecondaryColorFormatNV_ARG_EXPAND GLint size, GLenum type, GLsizei stride
#define glSecondaryColorFormatNV_PACKED PACKED_void_GLint_GLenum_GLsizei
#define glSecondaryColorFormatNV_FORMAT FORMAT_void_GLint_GLenum_GLsizei
#define glSecondaryColorFormatNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSecondaryColorFormatNV_NOT_VOID_WRAP(...) {}
#define glSecondaryColorP3ui_INDEX 1910
#define glSecondaryColorP3ui_RETURN void
#define glSecondaryColorP3ui_ARG_NAMES type, color
#define glSecondaryColorP3ui_ARG_EXPAND GLenum type, GLuint color
#define glSecondaryColorP3ui_PACKED PACKED_void_GLenum_GLuint
#define glSecondaryColorP3ui_FORMAT FORMAT_void_GLenum_GLuint
#define glSecondaryColorP3ui_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSecondaryColorP3ui_NOT_VOID_WRAP(...) {}
#define glSecondaryColorP3uiv_INDEX 1911
#define glSecondaryColorP3uiv_RETURN void
#define glSecondaryColorP3uiv_ARG_NAMES type, color
#define glSecondaryColorP3uiv_ARG_EXPAND GLenum type, const GLuint * color
#define glSecondaryColorP3uiv_PACKED PACKED_void_GLenum_const_GLuint___GENPT__
#define glSecondaryColorP3uiv_FORMAT FORMAT_void_GLenum_const_GLuint___GENPT__
#define glSecondaryColorP3uiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSecondaryColorP3uiv_NOT_VOID_WRAP(...) {}
#define glSecondaryColorPointer_INDEX 1912
#define glSecondaryColorPointer_RETURN void
#define glSecondaryColorPointer_ARG_NAMES size, type, stride, pointer
#define glSecondaryColorPointer_ARG_EXPAND GLint size, GLenum type, GLsizei stride, const GLvoid * pointer
#define glSecondaryColorPointer_PACKED PACKED_void_GLint_GLenum_GLsizei_const_GLvoid___GENPT__
#define glSecondaryColorPointer_FORMAT FORMAT_void_GLint_GLenum_GLsizei_const_GLvoid___GENPT__
#define glSecondaryColorPointer_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSecondaryColorPointer_NOT_VOID_WRAP(...) {}
#define glSecondaryColorPointerEXT_INDEX 1913
#define glSecondaryColorPointerEXT_RETURN void
#define glSecondaryColorPointerEXT_ARG_NAMES size, type, stride, pointer
#define glSecondaryColorPointerEXT_ARG_EXPAND GLint size, GLenum type, GLsizei stride, const GLvoid * pointer
#define glSecondaryColorPointerEXT_PACKED PACKED_void_GLint_GLenum_GLsizei_const_GLvoid___GENPT__
#define glSecondaryColorPointerEXT_FORMAT FORMAT_void_GLint_GLenum_GLsizei_const_GLvoid___GENPT__
#define glSecondaryColorPointerEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSecondaryColorPointerEXT_NOT_VOID_WRAP(...) {}
#define glSecondaryColorPointerListIBM_INDEX 1914
#define glSecondaryColorPointerListIBM_RETURN void
#define glSecondaryColorPointerListIBM_ARG_NAMES size, type, stride, pointer, ptrstride
#define glSecondaryColorPointerListIBM_ARG_EXPAND GLint size, GLenum type, GLint stride, const GLvoid * pointer, GLint ptrstride
#define glSecondaryColorPointerListIBM_PACKED PACKED_void_GLint_GLenum_GLint_const_GLvoid___GENPT___GLint
#define glSecondaryColorPointerListIBM_FORMAT FORMAT_void_GLint_GLenum_GLint_const_GLvoid___GENPT___GLint
#define glSecondaryColorPointerListIBM_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSecondaryColorPointerListIBM_NOT_VOID_WRAP(...) {}
#define glSelectBuffer_INDEX 1915
#define glSelectBuffer_RETURN void
#define glSelectBuffer_ARG_NAMES size, buffer
#define glSelectBuffer_ARG_EXPAND GLsizei size, GLuint * buffer
#define glSelectBuffer_PACKED PACKED_void_GLsizei_GLuint___GENPT__
#define glSelectBuffer_FORMAT FORMAT_void_GLsizei_GLuint___GENPT__
#define glSelectBuffer_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSelectBuffer_NOT_VOID_WRAP(...) {}
#define glSelectPerfMonitorCountersAMD_INDEX 1916
#define glSelectPerfMonitorCountersAMD_RETURN void
#define glSelectPerfMonitorCountersAMD_ARG_NAMES monitor, enable, group, numCounters, counterList
#define glSelectPerfMonitorCountersAMD_ARG_EXPAND GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint * counterList
#define glSelectPerfMonitorCountersAMD_PACKED PACKED_void_GLuint_GLboolean_GLuint_GLint_GLuint___GENPT__
#define glSelectPerfMonitorCountersAMD_FORMAT FORMAT_void_GLuint_GLboolean_GLuint_GLint_GLuint___GENPT__
#define glSelectPerfMonitorCountersAMD_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSelectPerfMonitorCountersAMD_NOT_VOID_WRAP(...) {}
#define glSeparableFilter2D_INDEX 1917
#define glSeparableFilter2D_RETURN void
#define glSeparableFilter2D_ARG_NAMES target, internalformat, width, height, format, type, row, column
#define glSeparableFilter2D_ARG_EXPAND GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * row, const GLvoid * column
#define glSeparableFilter2D_PACKED PACKED_void_GLenum_GLenum_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT___const_GLvoid___GENPT__
#define glSeparableFilter2D_FORMAT FORMAT_void_GLenum_GLenum_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT___const_GLvoid___GENPT__
#define glSeparableFilter2D_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSeparableFilter2D_NOT_VOID_WRAP(...) {}
#define glSeparableFilter2DEXT_INDEX 1918
#define glSeparableFilter2DEXT_RETURN void
#define glSeparableFilter2DEXT_ARG_NAMES target, internalformat, width, height, format, type, row, column
#define glSeparableFilter2DEXT_ARG_EXPAND GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * row, const GLvoid * column
#define glSeparableFilter2DEXT_PACKED PACKED_void_GLenum_GLenum_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT___const_GLvoid___GENPT__
#define glSeparableFilter2DEXT_FORMAT FORMAT_void_GLenum_GLenum_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT___const_GLvoid___GENPT__
#define glSeparableFilter2DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSeparableFilter2DEXT_NOT_VOID_WRAP(...) {}
#define glSetFenceAPPLE_INDEX 1919
#define glSetFenceAPPLE_RETURN void
#define glSetFenceAPPLE_ARG_NAMES fence
#define glSetFenceAPPLE_ARG_EXPAND GLuint fence
#define glSetFenceAPPLE_PACKED PACKED_void_GLuint
#define glSetFenceAPPLE_FORMAT FORMAT_void_GLuint
#define glSetFenceAPPLE_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSetFenceAPPLE_NOT_VOID_WRAP(...) {}
#define glSetFenceNV_INDEX 1920
#define glSetFenceNV_RETURN void
#define glSetFenceNV_ARG_NAMES fence, condition
#define glSetFenceNV_ARG_EXPAND GLuint fence, GLenum condition
#define glSetFenceNV_PACKED PACKED_void_GLuint_GLenum
#define glSetFenceNV_FORMAT FORMAT_void_GLuint_GLenum
#define glSetFenceNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSetFenceNV_NOT_VOID_WRAP(...) {}
#define glSetFragmentShaderConstantATI_INDEX 1921
#define glSetFragmentShaderConstantATI_RETURN void
#define glSetFragmentShaderConstantATI_ARG_NAMES dst, value
#define glSetFragmentShaderConstantATI_ARG_EXPAND GLuint dst, const GLfloat * value
#define glSetFragmentShaderConstantATI_PACKED PACKED_void_GLuint_const_GLfloat___GENPT__
#define glSetFragmentShaderConstantATI_FORMAT FORMAT_void_GLuint_const_GLfloat___GENPT__
#define glSetFragmentShaderConstantATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSetFragmentShaderConstantATI_NOT_VOID_WRAP(...) {}
#define glSetInvariantEXT_INDEX 1922
#define glSetInvariantEXT_RETURN void
#define glSetInvariantEXT_ARG_NAMES id, type, addr
#define glSetInvariantEXT_ARG_EXPAND GLuint id, GLenum type, const GLvoid * addr
#define glSetInvariantEXT_PACKED PACKED_void_GLuint_GLenum_const_GLvoid___GENPT__
#define glSetInvariantEXT_FORMAT FORMAT_void_GLuint_GLenum_const_GLvoid___GENPT__
#define glSetInvariantEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSetInvariantEXT_NOT_VOID_WRAP(...) {}
#define glSetLocalConstantEXT_INDEX 1923
#define glSetLocalConstantEXT_RETURN void
#define glSetLocalConstantEXT_ARG_NAMES id, type, addr
#define glSetLocalConstantEXT_ARG_EXPAND GLuint id, GLenum type, const GLvoid * addr
#define glSetLocalConstantEXT_PACKED PACKED_void_GLuint_GLenum_const_GLvoid___GENPT__
#define glSetLocalConstantEXT_FORMAT FORMAT_void_GLuint_GLenum_const_GLvoid___GENPT__
#define glSetLocalConstantEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSetLocalConstantEXT_NOT_VOID_WRAP(...) {}
#define glSetMultisamplefvAMD_INDEX 1924
#define glSetMultisamplefvAMD_RETURN void
#define glSetMultisamplefvAMD_ARG_NAMES pname, index, val
#define glSetMultisamplefvAMD_ARG_EXPAND GLenum pname, GLuint index, const GLfloat * val
#define glSetMultisamplefvAMD_PACKED PACKED_void_GLenum_GLuint_const_GLfloat___GENPT__
#define glSetMultisamplefvAMD_FORMAT FORMAT_void_GLenum_GLuint_const_GLfloat___GENPT__
#define glSetMultisamplefvAMD_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSetMultisamplefvAMD_NOT_VOID_WRAP(...) {}
#define glShadeModel_INDEX 1925
#define glShadeModel_RETURN void
#define glShadeModel_ARG_NAMES mode
#define glShadeModel_ARG_EXPAND GLenum mode
#define glShadeModel_PACKED PACKED_void_GLenum
#define glShadeModel_FORMAT FORMAT_void_GLenum
#define glShadeModel_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glShadeModel_NOT_VOID_WRAP(...) {}
#define glShaderBinary_INDEX 1926
#define glShaderBinary_RETURN void
#define glShaderBinary_ARG_NAMES count, shaders, binaryformat, binary, length
#define glShaderBinary_ARG_EXPAND GLsizei count, const GLuint * shaders, GLenum binaryformat, const GLvoid * binary, GLsizei length
#define glShaderBinary_PACKED PACKED_void_GLsizei_const_GLuint___GENPT___GLenum_const_GLvoid___GENPT___GLsizei
#define glShaderBinary_FORMAT FORMAT_void_GLsizei_const_GLuint___GENPT___GLenum_const_GLvoid___GENPT___GLsizei
#define glShaderBinary_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glShaderBinary_NOT_VOID_WRAP(...) {}
#define glShaderOp1EXT_INDEX 1927
#define glShaderOp1EXT_RETURN void
#define glShaderOp1EXT_ARG_NAMES op, res, arg1
#define glShaderOp1EXT_ARG_EXPAND GLenum op, GLuint res, GLuint arg1
#define glShaderOp1EXT_PACKED PACKED_void_GLenum_GLuint_GLuint
#define glShaderOp1EXT_FORMAT FORMAT_void_GLenum_GLuint_GLuint
#define glShaderOp1EXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glShaderOp1EXT_NOT_VOID_WRAP(...) {}
#define glShaderOp2EXT_INDEX 1928
#define glShaderOp2EXT_RETURN void
#define glShaderOp2EXT_ARG_NAMES op, res, arg1, arg2
#define glShaderOp2EXT_ARG_EXPAND GLenum op, GLuint res, GLuint arg1, GLuint arg2
#define glShaderOp2EXT_PACKED PACKED_void_GLenum_GLuint_GLuint_GLuint
#define glShaderOp2EXT_FORMAT FORMAT_void_GLenum_GLuint_GLuint_GLuint
#define glShaderOp2EXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glShaderOp2EXT_NOT_VOID_WRAP(...) {}
#define glShaderOp3EXT_INDEX 1929
#define glShaderOp3EXT_RETURN void
#define glShaderOp3EXT_ARG_NAMES op, res, arg1, arg2, arg3
#define glShaderOp3EXT_ARG_EXPAND GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3
#define glShaderOp3EXT_PACKED PACKED_void_GLenum_GLuint_GLuint_GLuint_GLuint
#define glShaderOp3EXT_FORMAT FORMAT_void_GLenum_GLuint_GLuint_GLuint_GLuint
#define glShaderOp3EXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glShaderOp3EXT_NOT_VOID_WRAP(...) {}
#define glShaderSource_INDEX 1930
#define glShaderSource_RETURN void
#define glShaderSource_ARG_NAMES shader, count, string, length
#define glShaderSource_ARG_EXPAND GLuint shader, GLsizei count, GLchar*const * string, const GLint * length
#define glShaderSource_PACKED PACKED_void_GLuint_GLsizei_GLchar__GENPT__const___GENPT___const_GLint___GENPT__
#define glShaderSource_FORMAT FORMAT_void_GLuint_GLsizei_GLchar__GENPT__const___GENPT___const_GLint___GENPT__
#define glShaderSource_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glShaderSource_NOT_VOID_WRAP(...) {}
#define glShaderSourceARB_INDEX 1931
#define glShaderSourceARB_RETURN void
#define glShaderSourceARB_ARG_NAMES shaderObj, count, string, length
#define glShaderSourceARB_ARG_EXPAND GLhandleARB shaderObj, GLsizei count, const GLcharARB * string, const GLint * length
#define glShaderSourceARB_PACKED PACKED_void_GLhandleARB_GLsizei_const_GLcharARB___GENPT___const_GLint___GENPT__
#define glShaderSourceARB_FORMAT FORMAT_void_GLhandleARB_GLsizei_const_GLcharARB___GENPT___const_GLint___GENPT__
#define glShaderSourceARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glShaderSourceARB_NOT_VOID_WRAP(...) {}
#define glShaderStorageBlockBinding_INDEX 1932
#define glShaderStorageBlockBinding_RETURN void
#define glShaderStorageBlockBinding_ARG_NAMES program, storageBlockIndex, storageBlockBinding
#define glShaderStorageBlockBinding_ARG_EXPAND GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding
#define glShaderStorageBlockBinding_PACKED PACKED_void_GLuint_GLuint_GLuint
#define glShaderStorageBlockBinding_FORMAT FORMAT_void_GLuint_GLuint_GLuint
#define glShaderStorageBlockBinding_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glShaderStorageBlockBinding_NOT_VOID_WRAP(...) {}
#define glSharpenTexFuncSGIS_INDEX 1933
#define glSharpenTexFuncSGIS_RETURN void
#define glSharpenTexFuncSGIS_ARG_NAMES target, n, points
#define glSharpenTexFuncSGIS_ARG_EXPAND GLenum target, GLsizei n, const GLfloat * points
#define glSharpenTexFuncSGIS_PACKED PACKED_void_GLenum_GLsizei_const_GLfloat___GENPT__
#define glSharpenTexFuncSGIS_FORMAT FORMAT_void_GLenum_GLsizei_const_GLfloat___GENPT__
#define glSharpenTexFuncSGIS_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSharpenTexFuncSGIS_NOT_VOID_WRAP(...) {}
#define glSpriteParameterfSGIX_INDEX 1934
#define glSpriteParameterfSGIX_RETURN void
#define glSpriteParameterfSGIX_ARG_NAMES pname, param
#define glSpriteParameterfSGIX_ARG_EXPAND GLenum pname, GLfloat param
#define glSpriteParameterfSGIX_PACKED PACKED_void_GLenum_GLfloat
#define glSpriteParameterfSGIX_FORMAT FORMAT_void_GLenum_GLfloat
#define glSpriteParameterfSGIX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSpriteParameterfSGIX_NOT_VOID_WRAP(...) {}
#define glSpriteParameterfvSGIX_INDEX 1935
#define glSpriteParameterfvSGIX_RETURN void
#define glSpriteParameterfvSGIX_ARG_NAMES pname, params
#define glSpriteParameterfvSGIX_ARG_EXPAND GLenum pname, const GLfloat * params
#define glSpriteParameterfvSGIX_PACKED PACKED_void_GLenum_const_GLfloat___GENPT__
#define glSpriteParameterfvSGIX_FORMAT FORMAT_void_GLenum_const_GLfloat___GENPT__
#define glSpriteParameterfvSGIX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSpriteParameterfvSGIX_NOT_VOID_WRAP(...) {}
#define glSpriteParameteriSGIX_INDEX 1936
#define glSpriteParameteriSGIX_RETURN void
#define glSpriteParameteriSGIX_ARG_NAMES pname, param
#define glSpriteParameteriSGIX_ARG_EXPAND GLenum pname, GLint param
#define glSpriteParameteriSGIX_PACKED PACKED_void_GLenum_GLint
#define glSpriteParameteriSGIX_FORMAT FORMAT_void_GLenum_GLint
#define glSpriteParameteriSGIX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSpriteParameteriSGIX_NOT_VOID_WRAP(...) {}
#define glSpriteParameterivSGIX_INDEX 1937
#define glSpriteParameterivSGIX_RETURN void
#define glSpriteParameterivSGIX_ARG_NAMES pname, params
#define glSpriteParameterivSGIX_ARG_EXPAND GLenum pname, const GLint * params
#define glSpriteParameterivSGIX_PACKED PACKED_void_GLenum_const_GLint___GENPT__
#define glSpriteParameterivSGIX_FORMAT FORMAT_void_GLenum_const_GLint___GENPT__
#define glSpriteParameterivSGIX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSpriteParameterivSGIX_NOT_VOID_WRAP(...) {}
#define glStartInstrumentsSGIX_INDEX 1938
#define glStartInstrumentsSGIX_RETURN void
#define glStartInstrumentsSGIX_ARG_NAMES 
#define glStartInstrumentsSGIX_ARG_EXPAND 
#define glStartInstrumentsSGIX_PACKED PACKED_void
#define glStartInstrumentsSGIX_FORMAT FORMAT_void
#define glStartInstrumentsSGIX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glStartInstrumentsSGIX_NOT_VOID_WRAP(...) {}
#define glStencilClearTagEXT_INDEX 1939
#define glStencilClearTagEXT_RETURN void
#define glStencilClearTagEXT_ARG_NAMES stencilTagBits, stencilClearTag
#define glStencilClearTagEXT_ARG_EXPAND GLsizei stencilTagBits, GLuint stencilClearTag
#define glStencilClearTagEXT_PACKED PACKED_void_GLsizei_GLuint
#define glStencilClearTagEXT_FORMAT FORMAT_void_GLsizei_GLuint
#define glStencilClearTagEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glStencilClearTagEXT_NOT_VOID_WRAP(...) {}
#define glStencilFillPathInstancedNV_INDEX 1940
#define glStencilFillPathInstancedNV_RETURN void
#define glStencilFillPathInstancedNV_ARG_NAMES numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues
#define glStencilFillPathInstancedNV_ARG_EXPAND GLsizei numPaths, GLenum pathNameType, const GLvoid * paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat * transformValues
#define glStencilFillPathInstancedNV_PACKED PACKED_void_GLsizei_GLenum_const_GLvoid___GENPT___GLuint_GLenum_GLuint_GLenum_const_GLfloat___GENPT__
#define glStencilFillPathInstancedNV_FORMAT FORMAT_void_GLsizei_GLenum_const_GLvoid___GENPT___GLuint_GLenum_GLuint_GLenum_const_GLfloat___GENPT__
#define glStencilFillPathInstancedNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glStencilFillPathInstancedNV_NOT_VOID_WRAP(...) {}
#define glStencilFillPathNV_INDEX 1941
#define glStencilFillPathNV_RETURN void
#define glStencilFillPathNV_ARG_NAMES path, fillMode, mask
#define glStencilFillPathNV_ARG_EXPAND GLuint path, GLenum fillMode, GLuint mask
#define glStencilFillPathNV_PACKED PACKED_void_GLuint_GLenum_GLuint
#define glStencilFillPathNV_FORMAT FORMAT_void_GLuint_GLenum_GLuint
#define glStencilFillPathNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glStencilFillPathNV_NOT_VOID_WRAP(...) {}
#define glStencilFunc_INDEX 1942
#define glStencilFunc_RETURN void
#define glStencilFunc_ARG_NAMES func, ref, mask
#define glStencilFunc_ARG_EXPAND GLenum func, GLint ref, GLuint mask
#define glStencilFunc_PACKED PACKED_void_GLenum_GLint_GLuint
#define glStencilFunc_FORMAT FORMAT_void_GLenum_GLint_GLuint
#define glStencilFunc_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glStencilFunc_NOT_VOID_WRAP(...) {}
#define glStencilFuncSeparate_INDEX 1943
#define glStencilFuncSeparate_RETURN void
#define glStencilFuncSeparate_ARG_NAMES face, func, ref, mask
#define glStencilFuncSeparate_ARG_EXPAND GLenum face, GLenum func, GLint ref, GLuint mask
#define glStencilFuncSeparate_PACKED PACKED_void_GLenum_GLenum_GLint_GLuint
#define glStencilFuncSeparate_FORMAT FORMAT_void_GLenum_GLenum_GLint_GLuint
#define glStencilFuncSeparate_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glStencilFuncSeparate_NOT_VOID_WRAP(...) {}
#define glStencilFuncSeparateATI_INDEX 1944
#define glStencilFuncSeparateATI_RETURN void
#define glStencilFuncSeparateATI_ARG_NAMES frontfunc, backfunc, ref, mask
#define glStencilFuncSeparateATI_ARG_EXPAND GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask
#define glStencilFuncSeparateATI_PACKED PACKED_void_GLenum_GLenum_GLint_GLuint
#define glStencilFuncSeparateATI_FORMAT FORMAT_void_GLenum_GLenum_GLint_GLuint
#define glStencilFuncSeparateATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glStencilFuncSeparateATI_NOT_VOID_WRAP(...) {}
#define glStencilMask_INDEX 1945
#define glStencilMask_RETURN void
#define glStencilMask_ARG_NAMES mask
#define glStencilMask_ARG_EXPAND GLuint mask
#define glStencilMask_PACKED PACKED_void_GLuint
#define glStencilMask_FORMAT FORMAT_void_GLuint
#define glStencilMask_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glStencilMask_NOT_VOID_WRAP(...) {}
#define glStencilMaskSeparate_INDEX 1946
#define glStencilMaskSeparate_RETURN void
#define glStencilMaskSeparate_ARG_NAMES face, mask
#define glStencilMaskSeparate_ARG_EXPAND GLenum face, GLuint mask
#define glStencilMaskSeparate_PACKED PACKED_void_GLenum_GLuint
#define glStencilMaskSeparate_FORMAT FORMAT_void_GLenum_GLuint
#define glStencilMaskSeparate_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glStencilMaskSeparate_NOT_VOID_WRAP(...) {}
#define glStencilOp_INDEX 1947
#define glStencilOp_RETURN void
#define glStencilOp_ARG_NAMES fail, zfail, zpass
#define glStencilOp_ARG_EXPAND GLenum fail, GLenum zfail, GLenum zpass
#define glStencilOp_PACKED PACKED_void_GLenum_GLenum_GLenum
#define glStencilOp_FORMAT FORMAT_void_GLenum_GLenum_GLenum
#define glStencilOp_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glStencilOp_NOT_VOID_WRAP(...) {}
#define glStencilOpSeparate_INDEX 1948
#define glStencilOpSeparate_RETURN void
#define glStencilOpSeparate_ARG_NAMES face, sfail, dpfail, dppass
#define glStencilOpSeparate_ARG_EXPAND GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass
#define glStencilOpSeparate_PACKED PACKED_void_GLenum_GLenum_GLenum_GLenum
#define glStencilOpSeparate_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLenum
#define glStencilOpSeparate_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glStencilOpSeparate_NOT_VOID_WRAP(...) {}
#define glStencilOpSeparateATI_INDEX 1949
#define glStencilOpSeparateATI_RETURN void
#define glStencilOpSeparateATI_ARG_NAMES face, sfail, dpfail, dppass
#define glStencilOpSeparateATI_ARG_EXPAND GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass
#define glStencilOpSeparateATI_PACKED PACKED_void_GLenum_GLenum_GLenum_GLenum
#define glStencilOpSeparateATI_FORMAT FORMAT_void_GLenum_GLenum_GLenum_GLenum
#define glStencilOpSeparateATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glStencilOpSeparateATI_NOT_VOID_WRAP(...) {}
#define glStencilOpValueAMD_INDEX 1950
#define glStencilOpValueAMD_RETURN void
#define glStencilOpValueAMD_ARG_NAMES face, value
#define glStencilOpValueAMD_ARG_EXPAND GLenum face, GLuint value
#define glStencilOpValueAMD_PACKED PACKED_void_GLenum_GLuint
#define glStencilOpValueAMD_FORMAT FORMAT_void_GLenum_GLuint
#define glStencilOpValueAMD_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glStencilOpValueAMD_NOT_VOID_WRAP(...) {}
#define glStencilStrokePathInstancedNV_INDEX 1951
#define glStencilStrokePathInstancedNV_RETURN void
#define glStencilStrokePathInstancedNV_ARG_NAMES numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues
#define glStencilStrokePathInstancedNV_ARG_EXPAND GLsizei numPaths, GLenum pathNameType, const GLvoid * paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat * transformValues
#define glStencilStrokePathInstancedNV_PACKED PACKED_void_GLsizei_GLenum_const_GLvoid___GENPT___GLuint_GLint_GLuint_GLenum_const_GLfloat___GENPT__
#define glStencilStrokePathInstancedNV_FORMAT FORMAT_void_GLsizei_GLenum_const_GLvoid___GENPT___GLuint_GLint_GLuint_GLenum_const_GLfloat___GENPT__
#define glStencilStrokePathInstancedNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glStencilStrokePathInstancedNV_NOT_VOID_WRAP(...) {}
#define glStencilStrokePathNV_INDEX 1952
#define glStencilStrokePathNV_RETURN void
#define glStencilStrokePathNV_ARG_NAMES path, reference, mask
#define glStencilStrokePathNV_ARG_EXPAND GLuint path, GLint reference, GLuint mask
#define glStencilStrokePathNV_PACKED PACKED_void_GLuint_GLint_GLuint
#define glStencilStrokePathNV_FORMAT FORMAT_void_GLuint_GLint_GLuint
#define glStencilStrokePathNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glStencilStrokePathNV_NOT_VOID_WRAP(...) {}
#define glStopInstrumentsSGIX_INDEX 1953
#define glStopInstrumentsSGIX_RETURN void
#define glStopInstrumentsSGIX_ARG_NAMES marker
#define glStopInstrumentsSGIX_ARG_EXPAND GLint marker
#define glStopInstrumentsSGIX_PACKED PACKED_void_GLint
#define glStopInstrumentsSGIX_FORMAT FORMAT_void_GLint
#define glStopInstrumentsSGIX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glStopInstrumentsSGIX_NOT_VOID_WRAP(...) {}
#define glStringMarkerGREMEDY_INDEX 1954
#define glStringMarkerGREMEDY_RETURN void
#define glStringMarkerGREMEDY_ARG_NAMES len, string
#define glStringMarkerGREMEDY_ARG_EXPAND GLsizei len, const GLvoid * string
#define glStringMarkerGREMEDY_PACKED PACKED_void_GLsizei_const_GLvoid___GENPT__
#define glStringMarkerGREMEDY_FORMAT FORMAT_void_GLsizei_const_GLvoid___GENPT__
#define glStringMarkerGREMEDY_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glStringMarkerGREMEDY_NOT_VOID_WRAP(...) {}
#define glSwizzleEXT_INDEX 1955
#define glSwizzleEXT_RETURN void
#define glSwizzleEXT_ARG_NAMES res, in, outX, outY, outZ, outW
#define glSwizzleEXT_ARG_EXPAND GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW
#define glSwizzleEXT_PACKED PACKED_void_GLuint_GLuint_GLenum_GLenum_GLenum_GLenum
#define glSwizzleEXT_FORMAT FORMAT_void_GLuint_GLuint_GLenum_GLenum_GLenum_GLenum
#define glSwizzleEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSwizzleEXT_NOT_VOID_WRAP(...) {}
#define glSyncTextureINTEL_INDEX 1956
#define glSyncTextureINTEL_RETURN void
#define glSyncTextureINTEL_ARG_NAMES texture
#define glSyncTextureINTEL_ARG_EXPAND GLuint texture
#define glSyncTextureINTEL_PACKED PACKED_void_GLuint
#define glSyncTextureINTEL_FORMAT FORMAT_void_GLuint
#define glSyncTextureINTEL_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glSyncTextureINTEL_NOT_VOID_WRAP(...) {}
#define glTagSampleBufferSGIX_INDEX 1957
#define glTagSampleBufferSGIX_RETURN void
#define glTagSampleBufferSGIX_ARG_NAMES 
#define glTagSampleBufferSGIX_ARG_EXPAND 
#define glTagSampleBufferSGIX_PACKED PACKED_void
#define glTagSampleBufferSGIX_FORMAT FORMAT_void
#define glTagSampleBufferSGIX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTagSampleBufferSGIX_NOT_VOID_WRAP(...) {}
#define glTangent3bEXT_INDEX 1958
#define glTangent3bEXT_RETURN void
#define glTangent3bEXT_ARG_NAMES tx, ty, tz
#define glTangent3bEXT_ARG_EXPAND GLbyte tx, GLbyte ty, GLbyte tz
#define glTangent3bEXT_PACKED PACKED_void_GLbyte_GLbyte_GLbyte
#define glTangent3bEXT_FORMAT FORMAT_void_GLbyte_GLbyte_GLbyte
#define glTangent3bEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTangent3bEXT_NOT_VOID_WRAP(...) {}
#define glTangent3bvEXT_INDEX 1959
#define glTangent3bvEXT_RETURN void
#define glTangent3bvEXT_ARG_NAMES v
#define glTangent3bvEXT_ARG_EXPAND const GLbyte * v
#define glTangent3bvEXT_PACKED PACKED_void_const_GLbyte___GENPT__
#define glTangent3bvEXT_FORMAT FORMAT_void_const_GLbyte___GENPT__
#define glTangent3bvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTangent3bvEXT_NOT_VOID_WRAP(...) {}
#define glTangent3dEXT_INDEX 1960
#define glTangent3dEXT_RETURN void
#define glTangent3dEXT_ARG_NAMES tx, ty, tz
#define glTangent3dEXT_ARG_EXPAND GLdouble tx, GLdouble ty, GLdouble tz
#define glTangent3dEXT_PACKED PACKED_void_GLdouble_GLdouble_GLdouble
#define glTangent3dEXT_FORMAT FORMAT_void_GLdouble_GLdouble_GLdouble
#define glTangent3dEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTangent3dEXT_NOT_VOID_WRAP(...) {}
#define glTangent3dvEXT_INDEX 1961
#define glTangent3dvEXT_RETURN void
#define glTangent3dvEXT_ARG_NAMES v
#define glTangent3dvEXT_ARG_EXPAND const GLdouble * v
#define glTangent3dvEXT_PACKED PACKED_void_const_GLdouble___GENPT__
#define glTangent3dvEXT_FORMAT FORMAT_void_const_GLdouble___GENPT__
#define glTangent3dvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTangent3dvEXT_NOT_VOID_WRAP(...) {}
#define glTangent3fEXT_INDEX 1962
#define glTangent3fEXT_RETURN void
#define glTangent3fEXT_ARG_NAMES tx, ty, tz
#define glTangent3fEXT_ARG_EXPAND GLfloat tx, GLfloat ty, GLfloat tz
#define glTangent3fEXT_PACKED PACKED_void_GLfloat_GLfloat_GLfloat
#define glTangent3fEXT_FORMAT FORMAT_void_GLfloat_GLfloat_GLfloat
#define glTangent3fEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTangent3fEXT_NOT_VOID_WRAP(...) {}
#define glTangent3fvEXT_INDEX 1963
#define glTangent3fvEXT_RETURN void
#define glTangent3fvEXT_ARG_NAMES v
#define glTangent3fvEXT_ARG_EXPAND const GLfloat * v
#define glTangent3fvEXT_PACKED PACKED_void_const_GLfloat___GENPT__
#define glTangent3fvEXT_FORMAT FORMAT_void_const_GLfloat___GENPT__
#define glTangent3fvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTangent3fvEXT_NOT_VOID_WRAP(...) {}
#define glTangent3iEXT_INDEX 1964
#define glTangent3iEXT_RETURN void
#define glTangent3iEXT_ARG_NAMES tx, ty, tz
#define glTangent3iEXT_ARG_EXPAND GLint tx, GLint ty, GLint tz
#define glTangent3iEXT_PACKED PACKED_void_GLint_GLint_GLint
#define glTangent3iEXT_FORMAT FORMAT_void_GLint_GLint_GLint
#define glTangent3iEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTangent3iEXT_NOT_VOID_WRAP(...) {}
#define glTangent3ivEXT_INDEX 1965
#define glTangent3ivEXT_RETURN void
#define glTangent3ivEXT_ARG_NAMES v
#define glTangent3ivEXT_ARG_EXPAND const GLint * v
#define glTangent3ivEXT_PACKED PACKED_void_const_GLint___GENPT__
#define glTangent3ivEXT_FORMAT FORMAT_void_const_GLint___GENPT__
#define glTangent3ivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTangent3ivEXT_NOT_VOID_WRAP(...) {}
#define glTangent3sEXT_INDEX 1966
#define glTangent3sEXT_RETURN void
#define glTangent3sEXT_ARG_NAMES tx, ty, tz
#define glTangent3sEXT_ARG_EXPAND GLshort tx, GLshort ty, GLshort tz
#define glTangent3sEXT_PACKED PACKED_void_GLshort_GLshort_GLshort
#define glTangent3sEXT_FORMAT FORMAT_void_GLshort_GLshort_GLshort
#define glTangent3sEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTangent3sEXT_NOT_VOID_WRAP(...) {}
#define glTangent3svEXT_INDEX 1967
#define glTangent3svEXT_RETURN void
#define glTangent3svEXT_ARG_NAMES v
#define glTangent3svEXT_ARG_EXPAND const GLshort * v
#define glTangent3svEXT_PACKED PACKED_void_const_GLshort___GENPT__
#define glTangent3svEXT_FORMAT FORMAT_void_const_GLshort___GENPT__
#define glTangent3svEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTangent3svEXT_NOT_VOID_WRAP(...) {}
#define glTangentPointerEXT_INDEX 1968
#define glTangentPointerEXT_RETURN void
#define glTangentPointerEXT_ARG_NAMES type, stride, pointer
#define glTangentPointerEXT_ARG_EXPAND GLenum type, GLsizei stride, const GLvoid * pointer
#define glTangentPointerEXT_PACKED PACKED_void_GLenum_GLsizei_const_GLvoid___GENPT__
#define glTangentPointerEXT_FORMAT FORMAT_void_GLenum_GLsizei_const_GLvoid___GENPT__
#define glTangentPointerEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTangentPointerEXT_NOT_VOID_WRAP(...) {}
#define glTbufferMask3DFX_INDEX 1969
#define glTbufferMask3DFX_RETURN void
#define glTbufferMask3DFX_ARG_NAMES mask
#define glTbufferMask3DFX_ARG_EXPAND GLuint mask
#define glTbufferMask3DFX_PACKED PACKED_void_GLuint
#define glTbufferMask3DFX_FORMAT FORMAT_void_GLuint
#define glTbufferMask3DFX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTbufferMask3DFX_NOT_VOID_WRAP(...) {}
#define glTessellationFactorAMD_INDEX 1970
#define glTessellationFactorAMD_RETURN void
#define glTessellationFactorAMD_ARG_NAMES factor
#define glTessellationFactorAMD_ARG_EXPAND GLfloat factor
#define glTessellationFactorAMD_PACKED PACKED_void_GLfloat
#define glTessellationFactorAMD_FORMAT FORMAT_void_GLfloat
#define glTessellationFactorAMD_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTessellationFactorAMD_NOT_VOID_WRAP(...) {}
#define glTessellationModeAMD_INDEX 1971
#define glTessellationModeAMD_RETURN void
#define glTessellationModeAMD_ARG_NAMES mode
#define glTessellationModeAMD_ARG_EXPAND GLenum mode
#define glTessellationModeAMD_PACKED PACKED_void_GLenum
#define glTessellationModeAMD_FORMAT FORMAT_void_GLenum
#define glTessellationModeAMD_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTessellationModeAMD_NOT_VOID_WRAP(...) {}
#define glTestFenceAPPLE_INDEX 1972
#define glTestFenceAPPLE_RETURN GLboolean
#define glTestFenceAPPLE_ARG_NAMES fence
#define glTestFenceAPPLE_ARG_EXPAND GLuint fence
#define glTestFenceAPPLE_PACKED PACKED_GLboolean_GLuint
#define glTestFenceAPPLE_FORMAT FORMAT_GLboolean_GLuint
#define glTestFenceAPPLE_VOID_ONLY_WRAP(...) {}
#define glTestFenceAPPLE_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glTestFenceNV_INDEX 1973
#define glTestFenceNV_RETURN GLboolean
#define glTestFenceNV_ARG_NAMES fence
#define glTestFenceNV_ARG_EXPAND GLuint fence
#define glTestFenceNV_PACKED PACKED_GLboolean_GLuint
#define glTestFenceNV_FORMAT FORMAT_GLboolean_GLuint
#define glTestFenceNV_VOID_ONLY_WRAP(...) {}
#define glTestFenceNV_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glTestObjectAPPLE_INDEX 1974
#define glTestObjectAPPLE_RETURN GLboolean
#define glTestObjectAPPLE_ARG_NAMES object, name
#define glTestObjectAPPLE_ARG_EXPAND GLenum object, GLuint name
#define glTestObjectAPPLE_PACKED PACKED_GLboolean_GLenum_GLuint
#define glTestObjectAPPLE_FORMAT FORMAT_GLboolean_GLenum_GLuint
#define glTestObjectAPPLE_VOID_ONLY_WRAP(...) {}
#define glTestObjectAPPLE_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glTexBuffer_INDEX 1975
#define glTexBuffer_RETURN void
#define glTexBuffer_ARG_NAMES target, internalformat, buffer
#define glTexBuffer_ARG_EXPAND GLenum target, GLenum internalformat, GLuint buffer
#define glTexBuffer_PACKED PACKED_void_GLenum_GLenum_GLuint
#define glTexBuffer_FORMAT FORMAT_void_GLenum_GLenum_GLuint
#define glTexBuffer_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexBuffer_NOT_VOID_WRAP(...) {}
#define glTexBufferARB_INDEX 1976
#define glTexBufferARB_RETURN void
#define glTexBufferARB_ARG_NAMES target, internalformat, buffer
#define glTexBufferARB_ARG_EXPAND GLenum target, GLenum internalformat, GLuint buffer
#define glTexBufferARB_PACKED PACKED_void_GLenum_GLenum_GLuint
#define glTexBufferARB_FORMAT FORMAT_void_GLenum_GLenum_GLuint
#define glTexBufferARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexBufferARB_NOT_VOID_WRAP(...) {}
#define glTexBufferEXT_INDEX 1977
#define glTexBufferEXT_RETURN void
#define glTexBufferEXT_ARG_NAMES target, internalformat, buffer
#define glTexBufferEXT_ARG_EXPAND GLenum target, GLenum internalformat, GLuint buffer
#define glTexBufferEXT_PACKED PACKED_void_GLenum_GLenum_GLuint
#define glTexBufferEXT_FORMAT FORMAT_void_GLenum_GLenum_GLuint
#define glTexBufferEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexBufferEXT_NOT_VOID_WRAP(...) {}
#define glTexBufferRange_INDEX 1978
#define glTexBufferRange_RETURN void
#define glTexBufferRange_ARG_NAMES target, internalformat, buffer, offset, size
#define glTexBufferRange_ARG_EXPAND GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size
#define glTexBufferRange_PACKED PACKED_void_GLenum_GLenum_GLuint_GLintptr_GLsizeiptr
#define glTexBufferRange_FORMAT FORMAT_void_GLenum_GLenum_GLuint_GLintptr_GLsizeiptr
#define glTexBufferRange_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexBufferRange_NOT_VOID_WRAP(...) {}
#define glTexBumpParameterfvATI_INDEX 1979
#define glTexBumpParameterfvATI_RETURN void
#define glTexBumpParameterfvATI_ARG_NAMES pname, param
#define glTexBumpParameterfvATI_ARG_EXPAND GLenum pname, const GLfloat * param
#define glTexBumpParameterfvATI_PACKED PACKED_void_GLenum_const_GLfloat___GENPT__
#define glTexBumpParameterfvATI_FORMAT FORMAT_void_GLenum_const_GLfloat___GENPT__
#define glTexBumpParameterfvATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexBumpParameterfvATI_NOT_VOID_WRAP(...) {}
#define glTexBumpParameterivATI_INDEX 1980
#define glTexBumpParameterivATI_RETURN void
#define glTexBumpParameterivATI_ARG_NAMES pname, param
#define glTexBumpParameterivATI_ARG_EXPAND GLenum pname, const GLint * param
#define glTexBumpParameterivATI_PACKED PACKED_void_GLenum_const_GLint___GENPT__
#define glTexBumpParameterivATI_FORMAT FORMAT_void_GLenum_const_GLint___GENPT__
#define glTexBumpParameterivATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexBumpParameterivATI_NOT_VOID_WRAP(...) {}
#define glTexCoord1bOES_INDEX 1981
#define glTexCoord1bOES_RETURN void
#define glTexCoord1bOES_ARG_NAMES s
#define glTexCoord1bOES_ARG_EXPAND GLbyte s
#define glTexCoord1bOES_PACKED PACKED_void_GLbyte
#define glTexCoord1bOES_FORMAT FORMAT_void_GLbyte
#define glTexCoord1bOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord1bOES_NOT_VOID_WRAP(...) {}
#define glTexCoord1bvOES_INDEX 1982
#define glTexCoord1bvOES_RETURN void
#define glTexCoord1bvOES_ARG_NAMES coords
#define glTexCoord1bvOES_ARG_EXPAND const GLbyte * coords
#define glTexCoord1bvOES_PACKED PACKED_void_const_GLbyte___GENPT__
#define glTexCoord1bvOES_FORMAT FORMAT_void_const_GLbyte___GENPT__
#define glTexCoord1bvOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord1bvOES_NOT_VOID_WRAP(...) {}
#define glTexCoord1d_INDEX 1983
#define glTexCoord1d_RETURN void
#define glTexCoord1d_ARG_NAMES s
#define glTexCoord1d_ARG_EXPAND GLdouble s
#define glTexCoord1d_PACKED PACKED_void_GLdouble
#define glTexCoord1d_FORMAT FORMAT_void_GLdouble
#define glTexCoord1d_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord1d_NOT_VOID_WRAP(...) {}
#define glTexCoord1dv_INDEX 1984
#define glTexCoord1dv_RETURN void
#define glTexCoord1dv_ARG_NAMES v
#define glTexCoord1dv_ARG_EXPAND const GLdouble * v
#define glTexCoord1dv_PACKED PACKED_void_const_GLdouble___GENPT__
#define glTexCoord1dv_FORMAT FORMAT_void_const_GLdouble___GENPT__
#define glTexCoord1dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord1dv_NOT_VOID_WRAP(...) {}
#define glTexCoord1f_INDEX 1985
#define glTexCoord1f_RETURN void
#define glTexCoord1f_ARG_NAMES s
#define glTexCoord1f_ARG_EXPAND GLfloat s
#define glTexCoord1f_PACKED PACKED_void_GLfloat
#define glTexCoord1f_FORMAT FORMAT_void_GLfloat
#define glTexCoord1f_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord1f_NOT_VOID_WRAP(...) {}
#define glTexCoord1fv_INDEX 1986
#define glTexCoord1fv_RETURN void
#define glTexCoord1fv_ARG_NAMES v
#define glTexCoord1fv_ARG_EXPAND const GLfloat * v
#define glTexCoord1fv_PACKED PACKED_void_const_GLfloat___GENPT__
#define glTexCoord1fv_FORMAT FORMAT_void_const_GLfloat___GENPT__
#define glTexCoord1fv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord1fv_NOT_VOID_WRAP(...) {}
#define glTexCoord1hNV_INDEX 1987
#define glTexCoord1hNV_RETURN void
#define glTexCoord1hNV_ARG_NAMES s
#define glTexCoord1hNV_ARG_EXPAND GLhalfNV s
#define glTexCoord1hNV_PACKED PACKED_void_GLhalfNV
#define glTexCoord1hNV_FORMAT FORMAT_void_GLhalfNV
#define glTexCoord1hNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord1hNV_NOT_VOID_WRAP(...) {}
#define glTexCoord1hvNV_INDEX 1988
#define glTexCoord1hvNV_RETURN void
#define glTexCoord1hvNV_ARG_NAMES v
#define glTexCoord1hvNV_ARG_EXPAND const GLhalfNV * v
#define glTexCoord1hvNV_PACKED PACKED_void_const_GLhalfNV___GENPT__
#define glTexCoord1hvNV_FORMAT FORMAT_void_const_GLhalfNV___GENPT__
#define glTexCoord1hvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord1hvNV_NOT_VOID_WRAP(...) {}
#define glTexCoord1i_INDEX 1989
#define glTexCoord1i_RETURN void
#define glTexCoord1i_ARG_NAMES s
#define glTexCoord1i_ARG_EXPAND GLint s
#define glTexCoord1i_PACKED PACKED_void_GLint
#define glTexCoord1i_FORMAT FORMAT_void_GLint
#define glTexCoord1i_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord1i_NOT_VOID_WRAP(...) {}
#define glTexCoord1iv_INDEX 1990
#define glTexCoord1iv_RETURN void
#define glTexCoord1iv_ARG_NAMES v
#define glTexCoord1iv_ARG_EXPAND const GLint * v
#define glTexCoord1iv_PACKED PACKED_void_const_GLint___GENPT__
#define glTexCoord1iv_FORMAT FORMAT_void_const_GLint___GENPT__
#define glTexCoord1iv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord1iv_NOT_VOID_WRAP(...) {}
#define glTexCoord1s_INDEX 1991
#define glTexCoord1s_RETURN void
#define glTexCoord1s_ARG_NAMES s
#define glTexCoord1s_ARG_EXPAND GLshort s
#define glTexCoord1s_PACKED PACKED_void_GLshort
#define glTexCoord1s_FORMAT FORMAT_void_GLshort
#define glTexCoord1s_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord1s_NOT_VOID_WRAP(...) {}
#define glTexCoord1sv_INDEX 1992
#define glTexCoord1sv_RETURN void
#define glTexCoord1sv_ARG_NAMES v
#define glTexCoord1sv_ARG_EXPAND const GLshort * v
#define glTexCoord1sv_PACKED PACKED_void_const_GLshort___GENPT__
#define glTexCoord1sv_FORMAT FORMAT_void_const_GLshort___GENPT__
#define glTexCoord1sv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord1sv_NOT_VOID_WRAP(...) {}
#define glTexCoord1xOES_INDEX 1993
#define glTexCoord1xOES_RETURN void
#define glTexCoord1xOES_ARG_NAMES s
#define glTexCoord1xOES_ARG_EXPAND GLfixed s
#define glTexCoord1xOES_PACKED PACKED_void_GLfixed
#define glTexCoord1xOES_FORMAT FORMAT_void_GLfixed
#define glTexCoord1xOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord1xOES_NOT_VOID_WRAP(...) {}
#define glTexCoord1xvOES_INDEX 1994
#define glTexCoord1xvOES_RETURN void
#define glTexCoord1xvOES_ARG_NAMES coords
#define glTexCoord1xvOES_ARG_EXPAND const GLfixed * coords
#define glTexCoord1xvOES_PACKED PACKED_void_const_GLfixed___GENPT__
#define glTexCoord1xvOES_FORMAT FORMAT_void_const_GLfixed___GENPT__
#define glTexCoord1xvOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord1xvOES_NOT_VOID_WRAP(...) {}
#define glTexCoord2bOES_INDEX 1995
#define glTexCoord2bOES_RETURN void
#define glTexCoord2bOES_ARG_NAMES s, t
#define glTexCoord2bOES_ARG_EXPAND GLbyte s, GLbyte t
#define glTexCoord2bOES_PACKED PACKED_void_GLbyte_GLbyte
#define glTexCoord2bOES_FORMAT FORMAT_void_GLbyte_GLbyte
#define glTexCoord2bOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord2bOES_NOT_VOID_WRAP(...) {}
#define glTexCoord2bvOES_INDEX 1996
#define glTexCoord2bvOES_RETURN void
#define glTexCoord2bvOES_ARG_NAMES coords
#define glTexCoord2bvOES_ARG_EXPAND const GLbyte * coords
#define glTexCoord2bvOES_PACKED PACKED_void_const_GLbyte___GENPT__
#define glTexCoord2bvOES_FORMAT FORMAT_void_const_GLbyte___GENPT__
#define glTexCoord2bvOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord2bvOES_NOT_VOID_WRAP(...) {}
#define glTexCoord2d_INDEX 1997
#define glTexCoord2d_RETURN void
#define glTexCoord2d_ARG_NAMES s, t
#define glTexCoord2d_ARG_EXPAND GLdouble s, GLdouble t
#define glTexCoord2d_PACKED PACKED_void_GLdouble_GLdouble
#define glTexCoord2d_FORMAT FORMAT_void_GLdouble_GLdouble
#define glTexCoord2d_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord2d_NOT_VOID_WRAP(...) {}
#define glTexCoord2dv_INDEX 1998
#define glTexCoord2dv_RETURN void
#define glTexCoord2dv_ARG_NAMES v
#define glTexCoord2dv_ARG_EXPAND const GLdouble * v
#define glTexCoord2dv_PACKED PACKED_void_const_GLdouble___GENPT__
#define glTexCoord2dv_FORMAT FORMAT_void_const_GLdouble___GENPT__
#define glTexCoord2dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord2dv_NOT_VOID_WRAP(...) {}
#define glTexCoord2f_INDEX 1999
#define glTexCoord2f_RETURN void
#define glTexCoord2f_ARG_NAMES s, t
#define glTexCoord2f_ARG_EXPAND GLfloat s, GLfloat t
#define glTexCoord2f_PACKED PACKED_void_GLfloat_GLfloat
#define glTexCoord2f_FORMAT FORMAT_void_GLfloat_GLfloat
#define glTexCoord2f_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord2f_NOT_VOID_WRAP(...) {}
#define glTexCoord2fColor3fVertex3fSUN_INDEX 2000
#define glTexCoord2fColor3fVertex3fSUN_RETURN void
#define glTexCoord2fColor3fVertex3fSUN_ARG_NAMES s, t, r, g, b, x, y, z
#define glTexCoord2fColor3fVertex3fSUN_ARG_EXPAND GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z
#define glTexCoord2fColor3fVertex3fSUN_PACKED PACKED_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat
#define glTexCoord2fColor3fVertex3fSUN_FORMAT FORMAT_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat
#define glTexCoord2fColor3fVertex3fSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord2fColor3fVertex3fSUN_NOT_VOID_WRAP(...) {}
#define glTexCoord2fColor3fVertex3fvSUN_INDEX 2001
#define glTexCoord2fColor3fVertex3fvSUN_RETURN void
#define glTexCoord2fColor3fVertex3fvSUN_ARG_NAMES tc, c, v
#define glTexCoord2fColor3fVertex3fvSUN_ARG_EXPAND const GLfloat * tc, const GLfloat * c, const GLfloat * v
#define glTexCoord2fColor3fVertex3fvSUN_PACKED PACKED_void_const_GLfloat___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT__
#define glTexCoord2fColor3fVertex3fvSUN_FORMAT FORMAT_void_const_GLfloat___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT__
#define glTexCoord2fColor3fVertex3fvSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord2fColor3fVertex3fvSUN_NOT_VOID_WRAP(...) {}
#define glTexCoord2fColor4fNormal3fVertex3fSUN_INDEX 2002
#define glTexCoord2fColor4fNormal3fVertex3fSUN_RETURN void
#define glTexCoord2fColor4fNormal3fVertex3fSUN_ARG_NAMES s, t, r, g, b, a, nx, ny, nz, x, y, z
#define glTexCoord2fColor4fNormal3fVertex3fSUN_ARG_EXPAND GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z
#define glTexCoord2fColor4fNormal3fVertex3fSUN_PACKED PACKED_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat
#define glTexCoord2fColor4fNormal3fVertex3fSUN_FORMAT FORMAT_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat
#define glTexCoord2fColor4fNormal3fVertex3fSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord2fColor4fNormal3fVertex3fSUN_NOT_VOID_WRAP(...) {}
#define glTexCoord2fColor4fNormal3fVertex3fvSUN_INDEX 2003
#define glTexCoord2fColor4fNormal3fVertex3fvSUN_RETURN void
#define glTexCoord2fColor4fNormal3fVertex3fvSUN_ARG_NAMES tc, c, n, v
#define glTexCoord2fColor4fNormal3fVertex3fvSUN_ARG_EXPAND const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v
#define glTexCoord2fColor4fNormal3fVertex3fvSUN_PACKED PACKED_void_const_GLfloat___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT__
#define glTexCoord2fColor4fNormal3fVertex3fvSUN_FORMAT FORMAT_void_const_GLfloat___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT__
#define glTexCoord2fColor4fNormal3fVertex3fvSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord2fColor4fNormal3fVertex3fvSUN_NOT_VOID_WRAP(...) {}
#define glTexCoord2fColor4ubVertex3fSUN_INDEX 2004
#define glTexCoord2fColor4ubVertex3fSUN_RETURN void
#define glTexCoord2fColor4ubVertex3fSUN_ARG_NAMES s, t, r, g, b, a, x, y, z
#define glTexCoord2fColor4ubVertex3fSUN_ARG_EXPAND GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z
#define glTexCoord2fColor4ubVertex3fSUN_PACKED PACKED_void_GLfloat_GLfloat_GLubyte_GLubyte_GLubyte_GLubyte_GLfloat_GLfloat_GLfloat
#define glTexCoord2fColor4ubVertex3fSUN_FORMAT FORMAT_void_GLfloat_GLfloat_GLubyte_GLubyte_GLubyte_GLubyte_GLfloat_GLfloat_GLfloat
#define glTexCoord2fColor4ubVertex3fSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord2fColor4ubVertex3fSUN_NOT_VOID_WRAP(...) {}
#define glTexCoord2fColor4ubVertex3fvSUN_INDEX 2005
#define glTexCoord2fColor4ubVertex3fvSUN_RETURN void
#define glTexCoord2fColor4ubVertex3fvSUN_ARG_NAMES tc, c, v
#define glTexCoord2fColor4ubVertex3fvSUN_ARG_EXPAND const GLfloat * tc, const GLubyte * c, const GLfloat * v
#define glTexCoord2fColor4ubVertex3fvSUN_PACKED PACKED_void_const_GLfloat___GENPT___const_GLubyte___GENPT___const_GLfloat___GENPT__
#define glTexCoord2fColor4ubVertex3fvSUN_FORMAT FORMAT_void_const_GLfloat___GENPT___const_GLubyte___GENPT___const_GLfloat___GENPT__
#define glTexCoord2fColor4ubVertex3fvSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord2fColor4ubVertex3fvSUN_NOT_VOID_WRAP(...) {}
#define glTexCoord2fNormal3fVertex3fSUN_INDEX 2006
#define glTexCoord2fNormal3fVertex3fSUN_RETURN void
#define glTexCoord2fNormal3fVertex3fSUN_ARG_NAMES s, t, nx, ny, nz, x, y, z
#define glTexCoord2fNormal3fVertex3fSUN_ARG_EXPAND GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z
#define glTexCoord2fNormal3fVertex3fSUN_PACKED PACKED_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat
#define glTexCoord2fNormal3fVertex3fSUN_FORMAT FORMAT_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat
#define glTexCoord2fNormal3fVertex3fSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord2fNormal3fVertex3fSUN_NOT_VOID_WRAP(...) {}
#define glTexCoord2fNormal3fVertex3fvSUN_INDEX 2007
#define glTexCoord2fNormal3fVertex3fvSUN_RETURN void
#define glTexCoord2fNormal3fVertex3fvSUN_ARG_NAMES tc, n, v
#define glTexCoord2fNormal3fVertex3fvSUN_ARG_EXPAND const GLfloat * tc, const GLfloat * n, const GLfloat * v
#define glTexCoord2fNormal3fVertex3fvSUN_PACKED PACKED_void_const_GLfloat___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT__
#define glTexCoord2fNormal3fVertex3fvSUN_FORMAT FORMAT_void_const_GLfloat___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT__
#define glTexCoord2fNormal3fVertex3fvSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord2fNormal3fVertex3fvSUN_NOT_VOID_WRAP(...) {}
#define glTexCoord2fVertex3fSUN_INDEX 2008
#define glTexCoord2fVertex3fSUN_RETURN void
#define glTexCoord2fVertex3fSUN_ARG_NAMES s, t, x, y, z
#define glTexCoord2fVertex3fSUN_ARG_EXPAND GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z
#define glTexCoord2fVertex3fSUN_PACKED PACKED_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat
#define glTexCoord2fVertex3fSUN_FORMAT FORMAT_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat
#define glTexCoord2fVertex3fSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord2fVertex3fSUN_NOT_VOID_WRAP(...) {}
#define glTexCoord2fVertex3fvSUN_INDEX 2009
#define glTexCoord2fVertex3fvSUN_RETURN void
#define glTexCoord2fVertex3fvSUN_ARG_NAMES tc, v
#define glTexCoord2fVertex3fvSUN_ARG_EXPAND const GLfloat * tc, const GLfloat * v
#define glTexCoord2fVertex3fvSUN_PACKED PACKED_void_const_GLfloat___GENPT___const_GLfloat___GENPT__
#define glTexCoord2fVertex3fvSUN_FORMAT FORMAT_void_const_GLfloat___GENPT___const_GLfloat___GENPT__
#define glTexCoord2fVertex3fvSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord2fVertex3fvSUN_NOT_VOID_WRAP(...) {}
#define glTexCoord2fv_INDEX 2010
#define glTexCoord2fv_RETURN void
#define glTexCoord2fv_ARG_NAMES v
#define glTexCoord2fv_ARG_EXPAND const GLfloat * v
#define glTexCoord2fv_PACKED PACKED_void_const_GLfloat___GENPT__
#define glTexCoord2fv_FORMAT FORMAT_void_const_GLfloat___GENPT__
#define glTexCoord2fv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord2fv_NOT_VOID_WRAP(...) {}
#define glTexCoord2hNV_INDEX 2011
#define glTexCoord2hNV_RETURN void
#define glTexCoord2hNV_ARG_NAMES s, t
#define glTexCoord2hNV_ARG_EXPAND GLhalfNV s, GLhalfNV t
#define glTexCoord2hNV_PACKED PACKED_void_GLhalfNV_GLhalfNV
#define glTexCoord2hNV_FORMAT FORMAT_void_GLhalfNV_GLhalfNV
#define glTexCoord2hNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord2hNV_NOT_VOID_WRAP(...) {}
#define glTexCoord2hvNV_INDEX 2012
#define glTexCoord2hvNV_RETURN void
#define glTexCoord2hvNV_ARG_NAMES v
#define glTexCoord2hvNV_ARG_EXPAND const GLhalfNV * v
#define glTexCoord2hvNV_PACKED PACKED_void_const_GLhalfNV___GENPT__
#define glTexCoord2hvNV_FORMAT FORMAT_void_const_GLhalfNV___GENPT__
#define glTexCoord2hvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord2hvNV_NOT_VOID_WRAP(...) {}
#define glTexCoord2i_INDEX 2013
#define glTexCoord2i_RETURN void
#define glTexCoord2i_ARG_NAMES s, t
#define glTexCoord2i_ARG_EXPAND GLint s, GLint t
#define glTexCoord2i_PACKED PACKED_void_GLint_GLint
#define glTexCoord2i_FORMAT FORMAT_void_GLint_GLint
#define glTexCoord2i_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord2i_NOT_VOID_WRAP(...) {}
#define glTexCoord2iv_INDEX 2014
#define glTexCoord2iv_RETURN void
#define glTexCoord2iv_ARG_NAMES v
#define glTexCoord2iv_ARG_EXPAND const GLint * v
#define glTexCoord2iv_PACKED PACKED_void_const_GLint___GENPT__
#define glTexCoord2iv_FORMAT FORMAT_void_const_GLint___GENPT__
#define glTexCoord2iv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord2iv_NOT_VOID_WRAP(...) {}
#define glTexCoord2s_INDEX 2015
#define glTexCoord2s_RETURN void
#define glTexCoord2s_ARG_NAMES s, t
#define glTexCoord2s_ARG_EXPAND GLshort s, GLshort t
#define glTexCoord2s_PACKED PACKED_void_GLshort_GLshort
#define glTexCoord2s_FORMAT FORMAT_void_GLshort_GLshort
#define glTexCoord2s_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord2s_NOT_VOID_WRAP(...) {}
#define glTexCoord2sv_INDEX 2016
#define glTexCoord2sv_RETURN void
#define glTexCoord2sv_ARG_NAMES v
#define glTexCoord2sv_ARG_EXPAND const GLshort * v
#define glTexCoord2sv_PACKED PACKED_void_const_GLshort___GENPT__
#define glTexCoord2sv_FORMAT FORMAT_void_const_GLshort___GENPT__
#define glTexCoord2sv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord2sv_NOT_VOID_WRAP(...) {}
#define glTexCoord2xOES_INDEX 2017
#define glTexCoord2xOES_RETURN void
#define glTexCoord2xOES_ARG_NAMES s, t
#define glTexCoord2xOES_ARG_EXPAND GLfixed s, GLfixed t
#define glTexCoord2xOES_PACKED PACKED_void_GLfixed_GLfixed
#define glTexCoord2xOES_FORMAT FORMAT_void_GLfixed_GLfixed
#define glTexCoord2xOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord2xOES_NOT_VOID_WRAP(...) {}
#define glTexCoord2xvOES_INDEX 2018
#define glTexCoord2xvOES_RETURN void
#define glTexCoord2xvOES_ARG_NAMES coords
#define glTexCoord2xvOES_ARG_EXPAND const GLfixed * coords
#define glTexCoord2xvOES_PACKED PACKED_void_const_GLfixed___GENPT__
#define glTexCoord2xvOES_FORMAT FORMAT_void_const_GLfixed___GENPT__
#define glTexCoord2xvOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord2xvOES_NOT_VOID_WRAP(...) {}
#define glTexCoord3bOES_INDEX 2019
#define glTexCoord3bOES_RETURN void
#define glTexCoord3bOES_ARG_NAMES s, t, r
#define glTexCoord3bOES_ARG_EXPAND GLbyte s, GLbyte t, GLbyte r
#define glTexCoord3bOES_PACKED PACKED_void_GLbyte_GLbyte_GLbyte
#define glTexCoord3bOES_FORMAT FORMAT_void_GLbyte_GLbyte_GLbyte
#define glTexCoord3bOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord3bOES_NOT_VOID_WRAP(...) {}
#define glTexCoord3bvOES_INDEX 2020
#define glTexCoord3bvOES_RETURN void
#define glTexCoord3bvOES_ARG_NAMES coords
#define glTexCoord3bvOES_ARG_EXPAND const GLbyte * coords
#define glTexCoord3bvOES_PACKED PACKED_void_const_GLbyte___GENPT__
#define glTexCoord3bvOES_FORMAT FORMAT_void_const_GLbyte___GENPT__
#define glTexCoord3bvOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord3bvOES_NOT_VOID_WRAP(...) {}
#define glTexCoord3d_INDEX 2021
#define glTexCoord3d_RETURN void
#define glTexCoord3d_ARG_NAMES s, t, r
#define glTexCoord3d_ARG_EXPAND GLdouble s, GLdouble t, GLdouble r
#define glTexCoord3d_PACKED PACKED_void_GLdouble_GLdouble_GLdouble
#define glTexCoord3d_FORMAT FORMAT_void_GLdouble_GLdouble_GLdouble
#define glTexCoord3d_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord3d_NOT_VOID_WRAP(...) {}
#define glTexCoord3dv_INDEX 2022
#define glTexCoord3dv_RETURN void
#define glTexCoord3dv_ARG_NAMES v
#define glTexCoord3dv_ARG_EXPAND const GLdouble * v
#define glTexCoord3dv_PACKED PACKED_void_const_GLdouble___GENPT__
#define glTexCoord3dv_FORMAT FORMAT_void_const_GLdouble___GENPT__
#define glTexCoord3dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord3dv_NOT_VOID_WRAP(...) {}
#define glTexCoord3f_INDEX 2023
#define glTexCoord3f_RETURN void
#define glTexCoord3f_ARG_NAMES s, t, r
#define glTexCoord3f_ARG_EXPAND GLfloat s, GLfloat t, GLfloat r
#define glTexCoord3f_PACKED PACKED_void_GLfloat_GLfloat_GLfloat
#define glTexCoord3f_FORMAT FORMAT_void_GLfloat_GLfloat_GLfloat
#define glTexCoord3f_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord3f_NOT_VOID_WRAP(...) {}
#define glTexCoord3fv_INDEX 2024
#define glTexCoord3fv_RETURN void
#define glTexCoord3fv_ARG_NAMES v
#define glTexCoord3fv_ARG_EXPAND const GLfloat * v
#define glTexCoord3fv_PACKED PACKED_void_const_GLfloat___GENPT__
#define glTexCoord3fv_FORMAT FORMAT_void_const_GLfloat___GENPT__
#define glTexCoord3fv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord3fv_NOT_VOID_WRAP(...) {}
#define glTexCoord3hNV_INDEX 2025
#define glTexCoord3hNV_RETURN void
#define glTexCoord3hNV_ARG_NAMES s, t, r
#define glTexCoord3hNV_ARG_EXPAND GLhalfNV s, GLhalfNV t, GLhalfNV r
#define glTexCoord3hNV_PACKED PACKED_void_GLhalfNV_GLhalfNV_GLhalfNV
#define glTexCoord3hNV_FORMAT FORMAT_void_GLhalfNV_GLhalfNV_GLhalfNV
#define glTexCoord3hNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord3hNV_NOT_VOID_WRAP(...) {}
#define glTexCoord3hvNV_INDEX 2026
#define glTexCoord3hvNV_RETURN void
#define glTexCoord3hvNV_ARG_NAMES v
#define glTexCoord3hvNV_ARG_EXPAND const GLhalfNV * v
#define glTexCoord3hvNV_PACKED PACKED_void_const_GLhalfNV___GENPT__
#define glTexCoord3hvNV_FORMAT FORMAT_void_const_GLhalfNV___GENPT__
#define glTexCoord3hvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord3hvNV_NOT_VOID_WRAP(...) {}
#define glTexCoord3i_INDEX 2027
#define glTexCoord3i_RETURN void
#define glTexCoord3i_ARG_NAMES s, t, r
#define glTexCoord3i_ARG_EXPAND GLint s, GLint t, GLint r
#define glTexCoord3i_PACKED PACKED_void_GLint_GLint_GLint
#define glTexCoord3i_FORMAT FORMAT_void_GLint_GLint_GLint
#define glTexCoord3i_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord3i_NOT_VOID_WRAP(...) {}
#define glTexCoord3iv_INDEX 2028
#define glTexCoord3iv_RETURN void
#define glTexCoord3iv_ARG_NAMES v
#define glTexCoord3iv_ARG_EXPAND const GLint * v
#define glTexCoord3iv_PACKED PACKED_void_const_GLint___GENPT__
#define glTexCoord3iv_FORMAT FORMAT_void_const_GLint___GENPT__
#define glTexCoord3iv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord3iv_NOT_VOID_WRAP(...) {}
#define glTexCoord3s_INDEX 2029
#define glTexCoord3s_RETURN void
#define glTexCoord3s_ARG_NAMES s, t, r
#define glTexCoord3s_ARG_EXPAND GLshort s, GLshort t, GLshort r
#define glTexCoord3s_PACKED PACKED_void_GLshort_GLshort_GLshort
#define glTexCoord3s_FORMAT FORMAT_void_GLshort_GLshort_GLshort
#define glTexCoord3s_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord3s_NOT_VOID_WRAP(...) {}
#define glTexCoord3sv_INDEX 2030
#define glTexCoord3sv_RETURN void
#define glTexCoord3sv_ARG_NAMES v
#define glTexCoord3sv_ARG_EXPAND const GLshort * v
#define glTexCoord3sv_PACKED PACKED_void_const_GLshort___GENPT__
#define glTexCoord3sv_FORMAT FORMAT_void_const_GLshort___GENPT__
#define glTexCoord3sv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord3sv_NOT_VOID_WRAP(...) {}
#define glTexCoord3xOES_INDEX 2031
#define glTexCoord3xOES_RETURN void
#define glTexCoord3xOES_ARG_NAMES s, t, r
#define glTexCoord3xOES_ARG_EXPAND GLfixed s, GLfixed t, GLfixed r
#define glTexCoord3xOES_PACKED PACKED_void_GLfixed_GLfixed_GLfixed
#define glTexCoord3xOES_FORMAT FORMAT_void_GLfixed_GLfixed_GLfixed
#define glTexCoord3xOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord3xOES_NOT_VOID_WRAP(...) {}
#define glTexCoord3xvOES_INDEX 2032
#define glTexCoord3xvOES_RETURN void
#define glTexCoord3xvOES_ARG_NAMES coords
#define glTexCoord3xvOES_ARG_EXPAND const GLfixed * coords
#define glTexCoord3xvOES_PACKED PACKED_void_const_GLfixed___GENPT__
#define glTexCoord3xvOES_FORMAT FORMAT_void_const_GLfixed___GENPT__
#define glTexCoord3xvOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord3xvOES_NOT_VOID_WRAP(...) {}
#define glTexCoord4bOES_INDEX 2033
#define glTexCoord4bOES_RETURN void
#define glTexCoord4bOES_ARG_NAMES s, t, r, q
#define glTexCoord4bOES_ARG_EXPAND GLbyte s, GLbyte t, GLbyte r, GLbyte q
#define glTexCoord4bOES_PACKED PACKED_void_GLbyte_GLbyte_GLbyte_GLbyte
#define glTexCoord4bOES_FORMAT FORMAT_void_GLbyte_GLbyte_GLbyte_GLbyte
#define glTexCoord4bOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord4bOES_NOT_VOID_WRAP(...) {}
#define glTexCoord4bvOES_INDEX 2034
#define glTexCoord4bvOES_RETURN void
#define glTexCoord4bvOES_ARG_NAMES coords
#define glTexCoord4bvOES_ARG_EXPAND const GLbyte * coords
#define glTexCoord4bvOES_PACKED PACKED_void_const_GLbyte___GENPT__
#define glTexCoord4bvOES_FORMAT FORMAT_void_const_GLbyte___GENPT__
#define glTexCoord4bvOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord4bvOES_NOT_VOID_WRAP(...) {}
#define glTexCoord4d_INDEX 2035
#define glTexCoord4d_RETURN void
#define glTexCoord4d_ARG_NAMES s, t, r, q
#define glTexCoord4d_ARG_EXPAND GLdouble s, GLdouble t, GLdouble r, GLdouble q
#define glTexCoord4d_PACKED PACKED_void_GLdouble_GLdouble_GLdouble_GLdouble
#define glTexCoord4d_FORMAT FORMAT_void_GLdouble_GLdouble_GLdouble_GLdouble
#define glTexCoord4d_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord4d_NOT_VOID_WRAP(...) {}
#define glTexCoord4dv_INDEX 2036
#define glTexCoord4dv_RETURN void
#define glTexCoord4dv_ARG_NAMES v
#define glTexCoord4dv_ARG_EXPAND const GLdouble * v
#define glTexCoord4dv_PACKED PACKED_void_const_GLdouble___GENPT__
#define glTexCoord4dv_FORMAT FORMAT_void_const_GLdouble___GENPT__
#define glTexCoord4dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord4dv_NOT_VOID_WRAP(...) {}
#define glTexCoord4f_INDEX 2037
#define glTexCoord4f_RETURN void
#define glTexCoord4f_ARG_NAMES s, t, r, q
#define glTexCoord4f_ARG_EXPAND GLfloat s, GLfloat t, GLfloat r, GLfloat q
#define glTexCoord4f_PACKED PACKED_void_GLfloat_GLfloat_GLfloat_GLfloat
#define glTexCoord4f_FORMAT FORMAT_void_GLfloat_GLfloat_GLfloat_GLfloat
#define glTexCoord4f_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord4f_NOT_VOID_WRAP(...) {}
#define glTexCoord4fColor4fNormal3fVertex4fSUN_INDEX 2038
#define glTexCoord4fColor4fNormal3fVertex4fSUN_RETURN void
#define glTexCoord4fColor4fNormal3fVertex4fSUN_ARG_NAMES s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w
#define glTexCoord4fColor4fNormal3fVertex4fSUN_ARG_EXPAND GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w
#define glTexCoord4fColor4fNormal3fVertex4fSUN_PACKED PACKED_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat
#define glTexCoord4fColor4fNormal3fVertex4fSUN_FORMAT FORMAT_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat
#define glTexCoord4fColor4fNormal3fVertex4fSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord4fColor4fNormal3fVertex4fSUN_NOT_VOID_WRAP(...) {}
#define glTexCoord4fColor4fNormal3fVertex4fvSUN_INDEX 2039
#define glTexCoord4fColor4fNormal3fVertex4fvSUN_RETURN void
#define glTexCoord4fColor4fNormal3fVertex4fvSUN_ARG_NAMES tc, c, n, v
#define glTexCoord4fColor4fNormal3fVertex4fvSUN_ARG_EXPAND const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v
#define glTexCoord4fColor4fNormal3fVertex4fvSUN_PACKED PACKED_void_const_GLfloat___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT__
#define glTexCoord4fColor4fNormal3fVertex4fvSUN_FORMAT FORMAT_void_const_GLfloat___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT___const_GLfloat___GENPT__
#define glTexCoord4fColor4fNormal3fVertex4fvSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord4fColor4fNormal3fVertex4fvSUN_NOT_VOID_WRAP(...) {}
#define glTexCoord4fVertex4fSUN_INDEX 2040
#define glTexCoord4fVertex4fSUN_RETURN void
#define glTexCoord4fVertex4fSUN_ARG_NAMES s, t, p, q, x, y, z, w
#define glTexCoord4fVertex4fSUN_ARG_EXPAND GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w
#define glTexCoord4fVertex4fSUN_PACKED PACKED_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat
#define glTexCoord4fVertex4fSUN_FORMAT FORMAT_void_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat_GLfloat
#define glTexCoord4fVertex4fSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord4fVertex4fSUN_NOT_VOID_WRAP(...) {}
#define glTexCoord4fVertex4fvSUN_INDEX 2041
#define glTexCoord4fVertex4fvSUN_RETURN void
#define glTexCoord4fVertex4fvSUN_ARG_NAMES tc, v
#define glTexCoord4fVertex4fvSUN_ARG_EXPAND const GLfloat * tc, const GLfloat * v
#define glTexCoord4fVertex4fvSUN_PACKED PACKED_void_const_GLfloat___GENPT___const_GLfloat___GENPT__
#define glTexCoord4fVertex4fvSUN_FORMAT FORMAT_void_const_GLfloat___GENPT___const_GLfloat___GENPT__
#define glTexCoord4fVertex4fvSUN_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord4fVertex4fvSUN_NOT_VOID_WRAP(...) {}
#define glTexCoord4fv_INDEX 2042
#define glTexCoord4fv_RETURN void
#define glTexCoord4fv_ARG_NAMES v
#define glTexCoord4fv_ARG_EXPAND const GLfloat * v
#define glTexCoord4fv_PACKED PACKED_void_const_GLfloat___GENPT__
#define glTexCoord4fv_FORMAT FORMAT_void_const_GLfloat___GENPT__
#define glTexCoord4fv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord4fv_NOT_VOID_WRAP(...) {}
#define glTexCoord4hNV_INDEX 2043
#define glTexCoord4hNV_RETURN void
#define glTexCoord4hNV_ARG_NAMES s, t, r, q
#define glTexCoord4hNV_ARG_EXPAND GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q
#define glTexCoord4hNV_PACKED PACKED_void_GLhalfNV_GLhalfNV_GLhalfNV_GLhalfNV
#define glTexCoord4hNV_FORMAT FORMAT_void_GLhalfNV_GLhalfNV_GLhalfNV_GLhalfNV
#define glTexCoord4hNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord4hNV_NOT_VOID_WRAP(...) {}
#define glTexCoord4hvNV_INDEX 2044
#define glTexCoord4hvNV_RETURN void
#define glTexCoord4hvNV_ARG_NAMES v
#define glTexCoord4hvNV_ARG_EXPAND const GLhalfNV * v
#define glTexCoord4hvNV_PACKED PACKED_void_const_GLhalfNV___GENPT__
#define glTexCoord4hvNV_FORMAT FORMAT_void_const_GLhalfNV___GENPT__
#define glTexCoord4hvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord4hvNV_NOT_VOID_WRAP(...) {}
#define glTexCoord4i_INDEX 2045
#define glTexCoord4i_RETURN void
#define glTexCoord4i_ARG_NAMES s, t, r, q
#define glTexCoord4i_ARG_EXPAND GLint s, GLint t, GLint r, GLint q
#define glTexCoord4i_PACKED PACKED_void_GLint_GLint_GLint_GLint
#define glTexCoord4i_FORMAT FORMAT_void_GLint_GLint_GLint_GLint
#define glTexCoord4i_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord4i_NOT_VOID_WRAP(...) {}
#define glTexCoord4iv_INDEX 2046
#define glTexCoord4iv_RETURN void
#define glTexCoord4iv_ARG_NAMES v
#define glTexCoord4iv_ARG_EXPAND const GLint * v
#define glTexCoord4iv_PACKED PACKED_void_const_GLint___GENPT__
#define glTexCoord4iv_FORMAT FORMAT_void_const_GLint___GENPT__
#define glTexCoord4iv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord4iv_NOT_VOID_WRAP(...) {}
#define glTexCoord4s_INDEX 2047
#define glTexCoord4s_RETURN void
#define glTexCoord4s_ARG_NAMES s, t, r, q
#define glTexCoord4s_ARG_EXPAND GLshort s, GLshort t, GLshort r, GLshort q
#define glTexCoord4s_PACKED PACKED_void_GLshort_GLshort_GLshort_GLshort
#define glTexCoord4s_FORMAT FORMAT_void_GLshort_GLshort_GLshort_GLshort
#define glTexCoord4s_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord4s_NOT_VOID_WRAP(...) {}
#define glTexCoord4sv_INDEX 2048
#define glTexCoord4sv_RETURN void
#define glTexCoord4sv_ARG_NAMES v
#define glTexCoord4sv_ARG_EXPAND const GLshort * v
#define glTexCoord4sv_PACKED PACKED_void_const_GLshort___GENPT__
#define glTexCoord4sv_FORMAT FORMAT_void_const_GLshort___GENPT__
#define glTexCoord4sv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord4sv_NOT_VOID_WRAP(...) {}
#define glTexCoord4xOES_INDEX 2049
#define glTexCoord4xOES_RETURN void
#define glTexCoord4xOES_ARG_NAMES s, t, r, q
#define glTexCoord4xOES_ARG_EXPAND GLfixed s, GLfixed t, GLfixed r, GLfixed q
#define glTexCoord4xOES_PACKED PACKED_void_GLfixed_GLfixed_GLfixed_GLfixed
#define glTexCoord4xOES_FORMAT FORMAT_void_GLfixed_GLfixed_GLfixed_GLfixed
#define glTexCoord4xOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord4xOES_NOT_VOID_WRAP(...) {}
#define glTexCoord4xvOES_INDEX 2050
#define glTexCoord4xvOES_RETURN void
#define glTexCoord4xvOES_ARG_NAMES coords
#define glTexCoord4xvOES_ARG_EXPAND const GLfixed * coords
#define glTexCoord4xvOES_PACKED PACKED_void_const_GLfixed___GENPT__
#define glTexCoord4xvOES_FORMAT FORMAT_void_const_GLfixed___GENPT__
#define glTexCoord4xvOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoord4xvOES_NOT_VOID_WRAP(...) {}
#define glTexCoordFormatNV_INDEX 2051
#define glTexCoordFormatNV_RETURN void
#define glTexCoordFormatNV_ARG_NAMES size, type, stride
#define glTexCoordFormatNV_ARG_EXPAND GLint size, GLenum type, GLsizei stride
#define glTexCoordFormatNV_PACKED PACKED_void_GLint_GLenum_GLsizei
#define glTexCoordFormatNV_FORMAT FORMAT_void_GLint_GLenum_GLsizei
#define glTexCoordFormatNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoordFormatNV_NOT_VOID_WRAP(...) {}
#define glTexCoordP1ui_INDEX 2052
#define glTexCoordP1ui_RETURN void
#define glTexCoordP1ui_ARG_NAMES type, coords
#define glTexCoordP1ui_ARG_EXPAND GLenum type, GLuint coords
#define glTexCoordP1ui_PACKED PACKED_void_GLenum_GLuint
#define glTexCoordP1ui_FORMAT FORMAT_void_GLenum_GLuint
#define glTexCoordP1ui_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoordP1ui_NOT_VOID_WRAP(...) {}
#define glTexCoordP1uiv_INDEX 2053
#define glTexCoordP1uiv_RETURN void
#define glTexCoordP1uiv_ARG_NAMES type, coords
#define glTexCoordP1uiv_ARG_EXPAND GLenum type, const GLuint * coords
#define glTexCoordP1uiv_PACKED PACKED_void_GLenum_const_GLuint___GENPT__
#define glTexCoordP1uiv_FORMAT FORMAT_void_GLenum_const_GLuint___GENPT__
#define glTexCoordP1uiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoordP1uiv_NOT_VOID_WRAP(...) {}
#define glTexCoordP2ui_INDEX 2054
#define glTexCoordP2ui_RETURN void
#define glTexCoordP2ui_ARG_NAMES type, coords
#define glTexCoordP2ui_ARG_EXPAND GLenum type, GLuint coords
#define glTexCoordP2ui_PACKED PACKED_void_GLenum_GLuint
#define glTexCoordP2ui_FORMAT FORMAT_void_GLenum_GLuint
#define glTexCoordP2ui_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoordP2ui_NOT_VOID_WRAP(...) {}
#define glTexCoordP2uiv_INDEX 2055
#define glTexCoordP2uiv_RETURN void
#define glTexCoordP2uiv_ARG_NAMES type, coords
#define glTexCoordP2uiv_ARG_EXPAND GLenum type, const GLuint * coords
#define glTexCoordP2uiv_PACKED PACKED_void_GLenum_const_GLuint___GENPT__
#define glTexCoordP2uiv_FORMAT FORMAT_void_GLenum_const_GLuint___GENPT__
#define glTexCoordP2uiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoordP2uiv_NOT_VOID_WRAP(...) {}
#define glTexCoordP3ui_INDEX 2056
#define glTexCoordP3ui_RETURN void
#define glTexCoordP3ui_ARG_NAMES type, coords
#define glTexCoordP3ui_ARG_EXPAND GLenum type, GLuint coords
#define glTexCoordP3ui_PACKED PACKED_void_GLenum_GLuint
#define glTexCoordP3ui_FORMAT FORMAT_void_GLenum_GLuint
#define glTexCoordP3ui_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoordP3ui_NOT_VOID_WRAP(...) {}
#define glTexCoordP3uiv_INDEX 2057
#define glTexCoordP3uiv_RETURN void
#define glTexCoordP3uiv_ARG_NAMES type, coords
#define glTexCoordP3uiv_ARG_EXPAND GLenum type, const GLuint * coords
#define glTexCoordP3uiv_PACKED PACKED_void_GLenum_const_GLuint___GENPT__
#define glTexCoordP3uiv_FORMAT FORMAT_void_GLenum_const_GLuint___GENPT__
#define glTexCoordP3uiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoordP3uiv_NOT_VOID_WRAP(...) {}
#define glTexCoordP4ui_INDEX 2058
#define glTexCoordP4ui_RETURN void
#define glTexCoordP4ui_ARG_NAMES type, coords
#define glTexCoordP4ui_ARG_EXPAND GLenum type, GLuint coords
#define glTexCoordP4ui_PACKED PACKED_void_GLenum_GLuint
#define glTexCoordP4ui_FORMAT FORMAT_void_GLenum_GLuint
#define glTexCoordP4ui_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoordP4ui_NOT_VOID_WRAP(...) {}
#define glTexCoordP4uiv_INDEX 2059
#define glTexCoordP4uiv_RETURN void
#define glTexCoordP4uiv_ARG_NAMES type, coords
#define glTexCoordP4uiv_ARG_EXPAND GLenum type, const GLuint * coords
#define glTexCoordP4uiv_PACKED PACKED_void_GLenum_const_GLuint___GENPT__
#define glTexCoordP4uiv_FORMAT FORMAT_void_GLenum_const_GLuint___GENPT__
#define glTexCoordP4uiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoordP4uiv_NOT_VOID_WRAP(...) {}
#define glTexCoordPointer_INDEX 2060
#define glTexCoordPointer_RETURN void
#define glTexCoordPointer_ARG_NAMES size, type, stride, pointer
#define glTexCoordPointer_ARG_EXPAND GLint size, GLenum type, GLsizei stride, const GLvoid * pointer
#define glTexCoordPointer_PACKED PACKED_void_GLint_GLenum_GLsizei_const_GLvoid___GENPT__
#define glTexCoordPointer_FORMAT FORMAT_void_GLint_GLenum_GLsizei_const_GLvoid___GENPT__
#define glTexCoordPointer_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoordPointer_NOT_VOID_WRAP(...) {}
#define glTexCoordPointerEXT_INDEX 2061
#define glTexCoordPointerEXT_RETURN void
#define glTexCoordPointerEXT_ARG_NAMES size, type, stride, count, pointer
#define glTexCoordPointerEXT_ARG_EXPAND GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid * pointer
#define glTexCoordPointerEXT_PACKED PACKED_void_GLint_GLenum_GLsizei_GLsizei_const_GLvoid___GENPT__
#define glTexCoordPointerEXT_FORMAT FORMAT_void_GLint_GLenum_GLsizei_GLsizei_const_GLvoid___GENPT__
#define glTexCoordPointerEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoordPointerEXT_NOT_VOID_WRAP(...) {}
#define glTexCoordPointerListIBM_INDEX 2062
#define glTexCoordPointerListIBM_RETURN void
#define glTexCoordPointerListIBM_ARG_NAMES size, type, stride, pointer, ptrstride
#define glTexCoordPointerListIBM_ARG_EXPAND GLint size, GLenum type, GLint stride, const GLvoid * pointer, GLint ptrstride
#define glTexCoordPointerListIBM_PACKED PACKED_void_GLint_GLenum_GLint_const_GLvoid___GENPT___GLint
#define glTexCoordPointerListIBM_FORMAT FORMAT_void_GLint_GLenum_GLint_const_GLvoid___GENPT___GLint
#define glTexCoordPointerListIBM_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoordPointerListIBM_NOT_VOID_WRAP(...) {}
#define glTexCoordPointervINTEL_INDEX 2063
#define glTexCoordPointervINTEL_RETURN void
#define glTexCoordPointervINTEL_ARG_NAMES size, type, pointer
#define glTexCoordPointervINTEL_ARG_EXPAND GLint size, GLenum type, const GLvoid * pointer
#define glTexCoordPointervINTEL_PACKED PACKED_void_GLint_GLenum_const_GLvoid___GENPT__
#define glTexCoordPointervINTEL_FORMAT FORMAT_void_GLint_GLenum_const_GLvoid___GENPT__
#define glTexCoordPointervINTEL_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexCoordPointervINTEL_NOT_VOID_WRAP(...) {}
#define glTexEnvf_INDEX 2064
#define glTexEnvf_RETURN void
#define glTexEnvf_ARG_NAMES target, pname, param
#define glTexEnvf_ARG_EXPAND GLenum target, GLenum pname, GLfloat param
#define glTexEnvf_PACKED PACKED_void_GLenum_GLenum_GLfloat
#define glTexEnvf_FORMAT FORMAT_void_GLenum_GLenum_GLfloat
#define glTexEnvf_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexEnvf_NOT_VOID_WRAP(...) {}
#define glTexEnvfv_INDEX 2065
#define glTexEnvfv_RETURN void
#define glTexEnvfv_ARG_NAMES target, pname, params
#define glTexEnvfv_ARG_EXPAND GLenum target, GLenum pname, const GLfloat * params
#define glTexEnvfv_PACKED PACKED_void_GLenum_GLenum_const_GLfloat___GENPT__
#define glTexEnvfv_FORMAT FORMAT_void_GLenum_GLenum_const_GLfloat___GENPT__
#define glTexEnvfv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexEnvfv_NOT_VOID_WRAP(...) {}
#define glTexEnvi_INDEX 2066
#define glTexEnvi_RETURN void
#define glTexEnvi_ARG_NAMES target, pname, param
#define glTexEnvi_ARG_EXPAND GLenum target, GLenum pname, GLint param
#define glTexEnvi_PACKED PACKED_void_GLenum_GLenum_GLint
#define glTexEnvi_FORMAT FORMAT_void_GLenum_GLenum_GLint
#define glTexEnvi_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexEnvi_NOT_VOID_WRAP(...) {}
#define glTexEnviv_INDEX 2067
#define glTexEnviv_RETURN void
#define glTexEnviv_ARG_NAMES target, pname, params
#define glTexEnviv_ARG_EXPAND GLenum target, GLenum pname, const GLint * params
#define glTexEnviv_PACKED PACKED_void_GLenum_GLenum_const_GLint___GENPT__
#define glTexEnviv_FORMAT FORMAT_void_GLenum_GLenum_const_GLint___GENPT__
#define glTexEnviv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexEnviv_NOT_VOID_WRAP(...) {}
#define glTexEnvx_INDEX 2068
#define glTexEnvx_RETURN void
#define glTexEnvx_ARG_NAMES target, pname, param
#define glTexEnvx_ARG_EXPAND GLenum target, GLenum pname, GLfixed param
#define glTexEnvx_PACKED PACKED_void_GLenum_GLenum_GLfixed
#define glTexEnvx_FORMAT FORMAT_void_GLenum_GLenum_GLfixed
#define glTexEnvx_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexEnvx_NOT_VOID_WRAP(...) {}
#define glTexEnvxOES_INDEX 2069
#define glTexEnvxOES_RETURN void
#define glTexEnvxOES_ARG_NAMES target, pname, param
#define glTexEnvxOES_ARG_EXPAND GLenum target, GLenum pname, GLfixed param
#define glTexEnvxOES_PACKED PACKED_void_GLenum_GLenum_GLfixed
#define glTexEnvxOES_FORMAT FORMAT_void_GLenum_GLenum_GLfixed
#define glTexEnvxOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexEnvxOES_NOT_VOID_WRAP(...) {}
#define glTexEnvxv_INDEX 2070
#define glTexEnvxv_RETURN void
#define glTexEnvxv_ARG_NAMES target, pname, params
#define glTexEnvxv_ARG_EXPAND GLenum target, GLenum pname, const GLfixed * params
#define glTexEnvxv_PACKED PACKED_void_GLenum_GLenum_const_GLfixed___GENPT__
#define glTexEnvxv_FORMAT FORMAT_void_GLenum_GLenum_const_GLfixed___GENPT__
#define glTexEnvxv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexEnvxv_NOT_VOID_WRAP(...) {}
#define glTexEnvxvOES_INDEX 2071
#define glTexEnvxvOES_RETURN void
#define glTexEnvxvOES_ARG_NAMES target, pname, params
#define glTexEnvxvOES_ARG_EXPAND GLenum target, GLenum pname, const GLfixed * params
#define glTexEnvxvOES_PACKED PACKED_void_GLenum_GLenum_const_GLfixed___GENPT__
#define glTexEnvxvOES_FORMAT FORMAT_void_GLenum_GLenum_const_GLfixed___GENPT__
#define glTexEnvxvOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexEnvxvOES_NOT_VOID_WRAP(...) {}
#define glTexFilterFuncSGIS_INDEX 2072
#define glTexFilterFuncSGIS_RETURN void
#define glTexFilterFuncSGIS_ARG_NAMES target, filter, n, weights
#define glTexFilterFuncSGIS_ARG_EXPAND GLenum target, GLenum filter, GLsizei n, const GLfloat * weights
#define glTexFilterFuncSGIS_PACKED PACKED_void_GLenum_GLenum_GLsizei_const_GLfloat___GENPT__
#define glTexFilterFuncSGIS_FORMAT FORMAT_void_GLenum_GLenum_GLsizei_const_GLfloat___GENPT__
#define glTexFilterFuncSGIS_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexFilterFuncSGIS_NOT_VOID_WRAP(...) {}
#define glTexGend_INDEX 2073
#define glTexGend_RETURN void
#define glTexGend_ARG_NAMES coord, pname, param
#define glTexGend_ARG_EXPAND GLenum coord, GLenum pname, GLdouble param
#define glTexGend_PACKED PACKED_void_GLenum_GLenum_GLdouble
#define glTexGend_FORMAT FORMAT_void_GLenum_GLenum_GLdouble
#define glTexGend_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexGend_NOT_VOID_WRAP(...) {}
#define glTexGendv_INDEX 2074
#define glTexGendv_RETURN void
#define glTexGendv_ARG_NAMES coord, pname, params
#define glTexGendv_ARG_EXPAND GLenum coord, GLenum pname, const GLdouble * params
#define glTexGendv_PACKED PACKED_void_GLenum_GLenum_const_GLdouble___GENPT__
#define glTexGendv_FORMAT FORMAT_void_GLenum_GLenum_const_GLdouble___GENPT__
#define glTexGendv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexGendv_NOT_VOID_WRAP(...) {}
#define glTexGenf_INDEX 2075
#define glTexGenf_RETURN void
#define glTexGenf_ARG_NAMES coord, pname, param
#define glTexGenf_ARG_EXPAND GLenum coord, GLenum pname, GLfloat param
#define glTexGenf_PACKED PACKED_void_GLenum_GLenum_GLfloat
#define glTexGenf_FORMAT FORMAT_void_GLenum_GLenum_GLfloat
#define glTexGenf_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexGenf_NOT_VOID_WRAP(...) {}
#define glTexGenfv_INDEX 2076
#define glTexGenfv_RETURN void
#define glTexGenfv_ARG_NAMES coord, pname, params
#define glTexGenfv_ARG_EXPAND GLenum coord, GLenum pname, const GLfloat * params
#define glTexGenfv_PACKED PACKED_void_GLenum_GLenum_const_GLfloat___GENPT__
#define glTexGenfv_FORMAT FORMAT_void_GLenum_GLenum_const_GLfloat___GENPT__
#define glTexGenfv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexGenfv_NOT_VOID_WRAP(...) {}
#define glTexGeni_INDEX 2077
#define glTexGeni_RETURN void
#define glTexGeni_ARG_NAMES coord, pname, param
#define glTexGeni_ARG_EXPAND GLenum coord, GLenum pname, GLint param
#define glTexGeni_PACKED PACKED_void_GLenum_GLenum_GLint
#define glTexGeni_FORMAT FORMAT_void_GLenum_GLenum_GLint
#define glTexGeni_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexGeni_NOT_VOID_WRAP(...) {}
#define glTexGeniv_INDEX 2078
#define glTexGeniv_RETURN void
#define glTexGeniv_ARG_NAMES coord, pname, params
#define glTexGeniv_ARG_EXPAND GLenum coord, GLenum pname, const GLint * params
#define glTexGeniv_PACKED PACKED_void_GLenum_GLenum_const_GLint___GENPT__
#define glTexGeniv_FORMAT FORMAT_void_GLenum_GLenum_const_GLint___GENPT__
#define glTexGeniv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexGeniv_NOT_VOID_WRAP(...) {}
#define glTexGenxOES_INDEX 2079
#define glTexGenxOES_RETURN void
#define glTexGenxOES_ARG_NAMES coord, pname, param
#define glTexGenxOES_ARG_EXPAND GLenum coord, GLenum pname, GLfixed param
#define glTexGenxOES_PACKED PACKED_void_GLenum_GLenum_GLfixed
#define glTexGenxOES_FORMAT FORMAT_void_GLenum_GLenum_GLfixed
#define glTexGenxOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexGenxOES_NOT_VOID_WRAP(...) {}
#define glTexGenxvOES_INDEX 2080
#define glTexGenxvOES_RETURN void
#define glTexGenxvOES_ARG_NAMES coord, pname, params
#define glTexGenxvOES_ARG_EXPAND GLenum coord, GLenum pname, const GLfixed * params
#define glTexGenxvOES_PACKED PACKED_void_GLenum_GLenum_const_GLfixed___GENPT__
#define glTexGenxvOES_FORMAT FORMAT_void_GLenum_GLenum_const_GLfixed___GENPT__
#define glTexGenxvOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexGenxvOES_NOT_VOID_WRAP(...) {}
#define glTexImage1D_INDEX 2081
#define glTexImage1D_RETURN void
#define glTexImage1D_ARG_NAMES target, level, internalformat, width, border, format, type, pixels
#define glTexImage1D_ARG_EXPAND GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid * pixels
#define glTexImage1D_PACKED PACKED_void_GLenum_GLint_GLint_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__
#define glTexImage1D_FORMAT FORMAT_void_GLenum_GLint_GLint_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__
#define glTexImage1D_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexImage1D_NOT_VOID_WRAP(...) {}
#define glTexImage2D_INDEX 2082
#define glTexImage2D_RETURN void
#define glTexImage2D_ARG_NAMES target, level, internalformat, width, height, border, format, type, pixels
#define glTexImage2D_ARG_EXPAND GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid * pixels
#define glTexImage2D_PACKED PACKED_void_GLenum_GLint_GLint_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__
#define glTexImage2D_FORMAT FORMAT_void_GLenum_GLint_GLint_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__
#define glTexImage2D_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexImage2D_NOT_VOID_WRAP(...) {}
#define glTexImage2DMultisample_INDEX 2083
#define glTexImage2DMultisample_RETURN void
#define glTexImage2DMultisample_ARG_NAMES target, samples, internalformat, width, height, fixedsamplelocations
#define glTexImage2DMultisample_ARG_EXPAND GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations
#define glTexImage2DMultisample_PACKED PACKED_void_GLenum_GLsizei_GLint_GLsizei_GLsizei_GLboolean
#define glTexImage2DMultisample_FORMAT FORMAT_void_GLenum_GLsizei_GLint_GLsizei_GLsizei_GLboolean
#define glTexImage2DMultisample_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexImage2DMultisample_NOT_VOID_WRAP(...) {}
#define glTexImage2DMultisampleCoverageNV_INDEX 2084
#define glTexImage2DMultisampleCoverageNV_RETURN void
#define glTexImage2DMultisampleCoverageNV_ARG_NAMES target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations
#define glTexImage2DMultisampleCoverageNV_ARG_EXPAND GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations
#define glTexImage2DMultisampleCoverageNV_PACKED PACKED_void_GLenum_GLsizei_GLsizei_GLint_GLsizei_GLsizei_GLboolean
#define glTexImage2DMultisampleCoverageNV_FORMAT FORMAT_void_GLenum_GLsizei_GLsizei_GLint_GLsizei_GLsizei_GLboolean
#define glTexImage2DMultisampleCoverageNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexImage2DMultisampleCoverageNV_NOT_VOID_WRAP(...) {}
#define glTexImage3D_INDEX 2085
#define glTexImage3D_RETURN void
#define glTexImage3D_ARG_NAMES target, level, internalformat, width, height, depth, border, format, type, pixels
#define glTexImage3D_ARG_EXPAND GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid * pixels
#define glTexImage3D_PACKED PACKED_void_GLenum_GLint_GLint_GLsizei_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__
#define glTexImage3D_FORMAT FORMAT_void_GLenum_GLint_GLint_GLsizei_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__
#define glTexImage3D_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexImage3D_NOT_VOID_WRAP(...) {}
#define glTexImage3DEXT_INDEX 2086
#define glTexImage3DEXT_RETURN void
#define glTexImage3DEXT_ARG_NAMES target, level, internalformat, width, height, depth, border, format, type, pixels
#define glTexImage3DEXT_ARG_EXPAND GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid * pixels
#define glTexImage3DEXT_PACKED PACKED_void_GLenum_GLint_GLenum_GLsizei_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__
#define glTexImage3DEXT_FORMAT FORMAT_void_GLenum_GLint_GLenum_GLsizei_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__
#define glTexImage3DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexImage3DEXT_NOT_VOID_WRAP(...) {}
#define glTexImage3DMultisample_INDEX 2087
#define glTexImage3DMultisample_RETURN void
#define glTexImage3DMultisample_ARG_NAMES target, samples, internalformat, width, height, depth, fixedsamplelocations
#define glTexImage3DMultisample_ARG_EXPAND GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations
#define glTexImage3DMultisample_PACKED PACKED_void_GLenum_GLsizei_GLint_GLsizei_GLsizei_GLsizei_GLboolean
#define glTexImage3DMultisample_FORMAT FORMAT_void_GLenum_GLsizei_GLint_GLsizei_GLsizei_GLsizei_GLboolean
#define glTexImage3DMultisample_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexImage3DMultisample_NOT_VOID_WRAP(...) {}
#define glTexImage3DMultisampleCoverageNV_INDEX 2088
#define glTexImage3DMultisampleCoverageNV_RETURN void
#define glTexImage3DMultisampleCoverageNV_ARG_NAMES target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations
#define glTexImage3DMultisampleCoverageNV_ARG_EXPAND GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations
#define glTexImage3DMultisampleCoverageNV_PACKED PACKED_void_GLenum_GLsizei_GLsizei_GLint_GLsizei_GLsizei_GLsizei_GLboolean
#define glTexImage3DMultisampleCoverageNV_FORMAT FORMAT_void_GLenum_GLsizei_GLsizei_GLint_GLsizei_GLsizei_GLsizei_GLboolean
#define glTexImage3DMultisampleCoverageNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexImage3DMultisampleCoverageNV_NOT_VOID_WRAP(...) {}
#define glTexImage4DSGIS_INDEX 2089
#define glTexImage4DSGIS_RETURN void
#define glTexImage4DSGIS_ARG_NAMES target, level, internalformat, width, height, depth, size4d, border, format, type, pixels
#define glTexImage4DSGIS_ARG_EXPAND GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const GLvoid * pixels
#define glTexImage4DSGIS_PACKED PACKED_void_GLenum_GLint_GLenum_GLsizei_GLsizei_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__
#define glTexImage4DSGIS_FORMAT FORMAT_void_GLenum_GLint_GLenum_GLsizei_GLsizei_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__
#define glTexImage4DSGIS_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexImage4DSGIS_NOT_VOID_WRAP(...) {}
#define glTexParameterIiv_INDEX 2090
#define glTexParameterIiv_RETURN void
#define glTexParameterIiv_ARG_NAMES target, pname, params
#define glTexParameterIiv_ARG_EXPAND GLenum target, GLenum pname, const GLint * params
#define glTexParameterIiv_PACKED PACKED_void_GLenum_GLenum_const_GLint___GENPT__
#define glTexParameterIiv_FORMAT FORMAT_void_GLenum_GLenum_const_GLint___GENPT__
#define glTexParameterIiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexParameterIiv_NOT_VOID_WRAP(...) {}
#define glTexParameterIivEXT_INDEX 2091
#define glTexParameterIivEXT_RETURN void
#define glTexParameterIivEXT_ARG_NAMES target, pname, params
#define glTexParameterIivEXT_ARG_EXPAND GLenum target, GLenum pname, const GLint * params
#define glTexParameterIivEXT_PACKED PACKED_void_GLenum_GLenum_const_GLint___GENPT__
#define glTexParameterIivEXT_FORMAT FORMAT_void_GLenum_GLenum_const_GLint___GENPT__
#define glTexParameterIivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexParameterIivEXT_NOT_VOID_WRAP(...) {}
#define glTexParameterIuiv_INDEX 2092
#define glTexParameterIuiv_RETURN void
#define glTexParameterIuiv_ARG_NAMES target, pname, params
#define glTexParameterIuiv_ARG_EXPAND GLenum target, GLenum pname, const GLuint * params
#define glTexParameterIuiv_PACKED PACKED_void_GLenum_GLenum_const_GLuint___GENPT__
#define glTexParameterIuiv_FORMAT FORMAT_void_GLenum_GLenum_const_GLuint___GENPT__
#define glTexParameterIuiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexParameterIuiv_NOT_VOID_WRAP(...) {}
#define glTexParameterIuivEXT_INDEX 2093
#define glTexParameterIuivEXT_RETURN void
#define glTexParameterIuivEXT_ARG_NAMES target, pname, params
#define glTexParameterIuivEXT_ARG_EXPAND GLenum target, GLenum pname, const GLuint * params
#define glTexParameterIuivEXT_PACKED PACKED_void_GLenum_GLenum_const_GLuint___GENPT__
#define glTexParameterIuivEXT_FORMAT FORMAT_void_GLenum_GLenum_const_GLuint___GENPT__
#define glTexParameterIuivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexParameterIuivEXT_NOT_VOID_WRAP(...) {}
#define glTexParameterf_INDEX 2094
#define glTexParameterf_RETURN void
#define glTexParameterf_ARG_NAMES target, pname, param
#define glTexParameterf_ARG_EXPAND GLenum target, GLenum pname, GLfloat param
#define glTexParameterf_PACKED PACKED_void_GLenum_GLenum_GLfloat
#define glTexParameterf_FORMAT FORMAT_void_GLenum_GLenum_GLfloat
#define glTexParameterf_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexParameterf_NOT_VOID_WRAP(...) {}
#define glTexParameterfv_INDEX 2095
#define glTexParameterfv_RETURN void
#define glTexParameterfv_ARG_NAMES target, pname, params
#define glTexParameterfv_ARG_EXPAND GLenum target, GLenum pname, const GLfloat * params
#define glTexParameterfv_PACKED PACKED_void_GLenum_GLenum_const_GLfloat___GENPT__
#define glTexParameterfv_FORMAT FORMAT_void_GLenum_GLenum_const_GLfloat___GENPT__
#define glTexParameterfv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexParameterfv_NOT_VOID_WRAP(...) {}
#define glTexParameteri_INDEX 2096
#define glTexParameteri_RETURN void
#define glTexParameteri_ARG_NAMES target, pname, param
#define glTexParameteri_ARG_EXPAND GLenum target, GLenum pname, GLint param
#define glTexParameteri_PACKED PACKED_void_GLenum_GLenum_GLint
#define glTexParameteri_FORMAT FORMAT_void_GLenum_GLenum_GLint
#define glTexParameteri_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexParameteri_NOT_VOID_WRAP(...) {}
#define glTexParameteriv_INDEX 2097
#define glTexParameteriv_RETURN void
#define glTexParameteriv_ARG_NAMES target, pname, params
#define glTexParameteriv_ARG_EXPAND GLenum target, GLenum pname, const GLint * params
#define glTexParameteriv_PACKED PACKED_void_GLenum_GLenum_const_GLint___GENPT__
#define glTexParameteriv_FORMAT FORMAT_void_GLenum_GLenum_const_GLint___GENPT__
#define glTexParameteriv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexParameteriv_NOT_VOID_WRAP(...) {}
#define glTexParameterx_INDEX 2098
#define glTexParameterx_RETURN void
#define glTexParameterx_ARG_NAMES target, pname, param
#define glTexParameterx_ARG_EXPAND GLenum target, GLenum pname, GLfixed param
#define glTexParameterx_PACKED PACKED_void_GLenum_GLenum_GLfixed
#define glTexParameterx_FORMAT FORMAT_void_GLenum_GLenum_GLfixed
#define glTexParameterx_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexParameterx_NOT_VOID_WRAP(...) {}
#define glTexParameterxOES_INDEX 2099
#define glTexParameterxOES_RETURN void
#define glTexParameterxOES_ARG_NAMES target, pname, param
#define glTexParameterxOES_ARG_EXPAND GLenum target, GLenum pname, GLfixed param
#define glTexParameterxOES_PACKED PACKED_void_GLenum_GLenum_GLfixed
#define glTexParameterxOES_FORMAT FORMAT_void_GLenum_GLenum_GLfixed
#define glTexParameterxOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexParameterxOES_NOT_VOID_WRAP(...) {}
#define glTexParameterxv_INDEX 2100
#define glTexParameterxv_RETURN void
#define glTexParameterxv_ARG_NAMES target, pname, params
#define glTexParameterxv_ARG_EXPAND GLenum target, GLenum pname, const GLfixed * params
#define glTexParameterxv_PACKED PACKED_void_GLenum_GLenum_const_GLfixed___GENPT__
#define glTexParameterxv_FORMAT FORMAT_void_GLenum_GLenum_const_GLfixed___GENPT__
#define glTexParameterxv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexParameterxv_NOT_VOID_WRAP(...) {}
#define glTexParameterxvOES_INDEX 2101
#define glTexParameterxvOES_RETURN void
#define glTexParameterxvOES_ARG_NAMES target, pname, params
#define glTexParameterxvOES_ARG_EXPAND GLenum target, GLenum pname, const GLfixed * params
#define glTexParameterxvOES_PACKED PACKED_void_GLenum_GLenum_const_GLfixed___GENPT__
#define glTexParameterxvOES_FORMAT FORMAT_void_GLenum_GLenum_const_GLfixed___GENPT__
#define glTexParameterxvOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexParameterxvOES_NOT_VOID_WRAP(...) {}
#define glTexRenderbufferNV_INDEX 2102
#define glTexRenderbufferNV_RETURN void
#define glTexRenderbufferNV_ARG_NAMES target, renderbuffer
#define glTexRenderbufferNV_ARG_EXPAND GLenum target, GLuint renderbuffer
#define glTexRenderbufferNV_PACKED PACKED_void_GLenum_GLuint
#define glTexRenderbufferNV_FORMAT FORMAT_void_GLenum_GLuint
#define glTexRenderbufferNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexRenderbufferNV_NOT_VOID_WRAP(...) {}
#define glTexStorage1D_INDEX 2103
#define glTexStorage1D_RETURN void
#define glTexStorage1D_ARG_NAMES target, levels, internalformat, width
#define glTexStorage1D_ARG_EXPAND GLenum target, GLsizei levels, GLenum internalformat, GLsizei width
#define glTexStorage1D_PACKED PACKED_void_GLenum_GLsizei_GLenum_GLsizei
#define glTexStorage1D_FORMAT FORMAT_void_GLenum_GLsizei_GLenum_GLsizei
#define glTexStorage1D_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexStorage1D_NOT_VOID_WRAP(...) {}
#define glTexStorage2D_INDEX 2104
#define glTexStorage2D_RETURN void
#define glTexStorage2D_ARG_NAMES target, levels, internalformat, width, height
#define glTexStorage2D_ARG_EXPAND GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height
#define glTexStorage2D_PACKED PACKED_void_GLenum_GLsizei_GLenum_GLsizei_GLsizei
#define glTexStorage2D_FORMAT FORMAT_void_GLenum_GLsizei_GLenum_GLsizei_GLsizei
#define glTexStorage2D_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexStorage2D_NOT_VOID_WRAP(...) {}
#define glTexStorage2DMultisample_INDEX 2105
#define glTexStorage2DMultisample_RETURN void
#define glTexStorage2DMultisample_ARG_NAMES target, samples, internalformat, width, height, fixedsamplelocations
#define glTexStorage2DMultisample_ARG_EXPAND GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations
#define glTexStorage2DMultisample_PACKED PACKED_void_GLenum_GLsizei_GLenum_GLsizei_GLsizei_GLboolean
#define glTexStorage2DMultisample_FORMAT FORMAT_void_GLenum_GLsizei_GLenum_GLsizei_GLsizei_GLboolean
#define glTexStorage2DMultisample_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexStorage2DMultisample_NOT_VOID_WRAP(...) {}
#define glTexStorage3D_INDEX 2106
#define glTexStorage3D_RETURN void
#define glTexStorage3D_ARG_NAMES target, levels, internalformat, width, height, depth
#define glTexStorage3D_ARG_EXPAND GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth
#define glTexStorage3D_PACKED PACKED_void_GLenum_GLsizei_GLenum_GLsizei_GLsizei_GLsizei
#define glTexStorage3D_FORMAT FORMAT_void_GLenum_GLsizei_GLenum_GLsizei_GLsizei_GLsizei
#define glTexStorage3D_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexStorage3D_NOT_VOID_WRAP(...) {}
#define glTexStorage3DMultisample_INDEX 2107
#define glTexStorage3DMultisample_RETURN void
#define glTexStorage3DMultisample_ARG_NAMES target, samples, internalformat, width, height, depth, fixedsamplelocations
#define glTexStorage3DMultisample_ARG_EXPAND GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations
#define glTexStorage3DMultisample_PACKED PACKED_void_GLenum_GLsizei_GLenum_GLsizei_GLsizei_GLsizei_GLboolean
#define glTexStorage3DMultisample_FORMAT FORMAT_void_GLenum_GLsizei_GLenum_GLsizei_GLsizei_GLsizei_GLboolean
#define glTexStorage3DMultisample_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexStorage3DMultisample_NOT_VOID_WRAP(...) {}
#define glTexStorageSparseAMD_INDEX 2108
#define glTexStorageSparseAMD_RETURN void
#define glTexStorageSparseAMD_ARG_NAMES target, internalFormat, width, height, depth, layers, flags
#define glTexStorageSparseAMD_ARG_EXPAND GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags
#define glTexStorageSparseAMD_PACKED PACKED_void_GLenum_GLenum_GLsizei_GLsizei_GLsizei_GLsizei_GLbitfield
#define glTexStorageSparseAMD_FORMAT FORMAT_void_GLenum_GLenum_GLsizei_GLsizei_GLsizei_GLsizei_GLbitfield
#define glTexStorageSparseAMD_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexStorageSparseAMD_NOT_VOID_WRAP(...) {}
#define glTexSubImage1D_INDEX 2109
#define glTexSubImage1D_RETURN void
#define glTexSubImage1D_ARG_NAMES target, level, xoffset, width, format, type, pixels
#define glTexSubImage1D_ARG_EXPAND GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid * pixels
#define glTexSubImage1D_PACKED PACKED_void_GLenum_GLint_GLint_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__
#define glTexSubImage1D_FORMAT FORMAT_void_GLenum_GLint_GLint_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__
#define glTexSubImage1D_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexSubImage1D_NOT_VOID_WRAP(...) {}
#define glTexSubImage1DEXT_INDEX 2110
#define glTexSubImage1DEXT_RETURN void
#define glTexSubImage1DEXT_ARG_NAMES target, level, xoffset, width, format, type, pixels
#define glTexSubImage1DEXT_ARG_EXPAND GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid * pixels
#define glTexSubImage1DEXT_PACKED PACKED_void_GLenum_GLint_GLint_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__
#define glTexSubImage1DEXT_FORMAT FORMAT_void_GLenum_GLint_GLint_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__
#define glTexSubImage1DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexSubImage1DEXT_NOT_VOID_WRAP(...) {}
#define glTexSubImage2D_INDEX 2111
#define glTexSubImage2D_RETURN void
#define glTexSubImage2D_ARG_NAMES target, level, xoffset, yoffset, width, height, format, type, pixels
#define glTexSubImage2D_ARG_EXPAND GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * pixels
#define glTexSubImage2D_PACKED PACKED_void_GLenum_GLint_GLint_GLint_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__
#define glTexSubImage2D_FORMAT FORMAT_void_GLenum_GLint_GLint_GLint_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__
#define glTexSubImage2D_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexSubImage2D_NOT_VOID_WRAP(...) {}
#define glTexSubImage2DEXT_INDEX 2112
#define glTexSubImage2DEXT_RETURN void
#define glTexSubImage2DEXT_ARG_NAMES target, level, xoffset, yoffset, width, height, format, type, pixels
#define glTexSubImage2DEXT_ARG_EXPAND GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * pixels
#define glTexSubImage2DEXT_PACKED PACKED_void_GLenum_GLint_GLint_GLint_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__
#define glTexSubImage2DEXT_FORMAT FORMAT_void_GLenum_GLint_GLint_GLint_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__
#define glTexSubImage2DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexSubImage2DEXT_NOT_VOID_WRAP(...) {}
#define glTexSubImage3D_INDEX 2113
#define glTexSubImage3D_RETURN void
#define glTexSubImage3D_ARG_NAMES target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels
#define glTexSubImage3D_ARG_EXPAND GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid * pixels
#define glTexSubImage3D_PACKED PACKED_void_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__
#define glTexSubImage3D_FORMAT FORMAT_void_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__
#define glTexSubImage3D_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexSubImage3D_NOT_VOID_WRAP(...) {}
#define glTexSubImage3DEXT_INDEX 2114
#define glTexSubImage3DEXT_RETURN void
#define glTexSubImage3DEXT_ARG_NAMES target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels
#define glTexSubImage3DEXT_ARG_EXPAND GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid * pixels
#define glTexSubImage3DEXT_PACKED PACKED_void_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__
#define glTexSubImage3DEXT_FORMAT FORMAT_void_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__
#define glTexSubImage3DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexSubImage3DEXT_NOT_VOID_WRAP(...) {}
#define glTexSubImage4DSGIS_INDEX 2115
#define glTexSubImage4DSGIS_RETURN void
#define glTexSubImage4DSGIS_ARG_NAMES target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels
#define glTexSubImage4DSGIS_ARG_EXPAND GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const GLvoid * pixels
#define glTexSubImage4DSGIS_PACKED PACKED_void_GLenum_GLint_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__
#define glTexSubImage4DSGIS_FORMAT FORMAT_void_GLenum_GLint_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__
#define glTexSubImage4DSGIS_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTexSubImage4DSGIS_NOT_VOID_WRAP(...) {}
#define glTextureBarrierNV_INDEX 2116
#define glTextureBarrierNV_RETURN void
#define glTextureBarrierNV_ARG_NAMES 
#define glTextureBarrierNV_ARG_EXPAND 
#define glTextureBarrierNV_PACKED PACKED_void
#define glTextureBarrierNV_FORMAT FORMAT_void
#define glTextureBarrierNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTextureBarrierNV_NOT_VOID_WRAP(...) {}
#define glTextureBufferEXT_INDEX 2117
#define glTextureBufferEXT_RETURN void
#define glTextureBufferEXT_ARG_NAMES texture, target, internalformat, buffer
#define glTextureBufferEXT_ARG_EXPAND GLuint texture, GLenum target, GLenum internalformat, GLuint buffer
#define glTextureBufferEXT_PACKED PACKED_void_GLuint_GLenum_GLenum_GLuint
#define glTextureBufferEXT_FORMAT FORMAT_void_GLuint_GLenum_GLenum_GLuint
#define glTextureBufferEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTextureBufferEXT_NOT_VOID_WRAP(...) {}
#define glTextureBufferRangeEXT_INDEX 2118
#define glTextureBufferRangeEXT_RETURN void
#define glTextureBufferRangeEXT_ARG_NAMES texture, target, internalformat, buffer, offset, size
#define glTextureBufferRangeEXT_ARG_EXPAND GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size
#define glTextureBufferRangeEXT_PACKED PACKED_void_GLuint_GLenum_GLenum_GLuint_GLintptr_GLsizeiptr
#define glTextureBufferRangeEXT_FORMAT FORMAT_void_GLuint_GLenum_GLenum_GLuint_GLintptr_GLsizeiptr
#define glTextureBufferRangeEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTextureBufferRangeEXT_NOT_VOID_WRAP(...) {}
#define glTextureColorMaskSGIS_INDEX 2119
#define glTextureColorMaskSGIS_RETURN void
#define glTextureColorMaskSGIS_ARG_NAMES red, green, blue, alpha
#define glTextureColorMaskSGIS_ARG_EXPAND GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha
#define glTextureColorMaskSGIS_PACKED PACKED_void_GLboolean_GLboolean_GLboolean_GLboolean
#define glTextureColorMaskSGIS_FORMAT FORMAT_void_GLboolean_GLboolean_GLboolean_GLboolean
#define glTextureColorMaskSGIS_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTextureColorMaskSGIS_NOT_VOID_WRAP(...) {}
#define glTextureImage1DEXT_INDEX 2120
#define glTextureImage1DEXT_RETURN void
#define glTextureImage1DEXT_ARG_NAMES texture, target, level, internalformat, width, border, format, type, pixels
#define glTextureImage1DEXT_ARG_EXPAND GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid * pixels
#define glTextureImage1DEXT_PACKED PACKED_void_GLuint_GLenum_GLint_GLenum_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__
#define glTextureImage1DEXT_FORMAT FORMAT_void_GLuint_GLenum_GLint_GLenum_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__
#define glTextureImage1DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTextureImage1DEXT_NOT_VOID_WRAP(...) {}
#define glTextureImage2DEXT_INDEX 2121
#define glTextureImage2DEXT_RETURN void
#define glTextureImage2DEXT_ARG_NAMES texture, target, level, internalformat, width, height, border, format, type, pixels
#define glTextureImage2DEXT_ARG_EXPAND GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid * pixels
#define glTextureImage2DEXT_PACKED PACKED_void_GLuint_GLenum_GLint_GLenum_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__
#define glTextureImage2DEXT_FORMAT FORMAT_void_GLuint_GLenum_GLint_GLenum_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__
#define glTextureImage2DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTextureImage2DEXT_NOT_VOID_WRAP(...) {}
#define glTextureImage2DMultisampleCoverageNV_INDEX 2122
#define glTextureImage2DMultisampleCoverageNV_RETURN void
#define glTextureImage2DMultisampleCoverageNV_ARG_NAMES texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations
#define glTextureImage2DMultisampleCoverageNV_ARG_EXPAND GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations
#define glTextureImage2DMultisampleCoverageNV_PACKED PACKED_void_GLuint_GLenum_GLsizei_GLsizei_GLint_GLsizei_GLsizei_GLboolean
#define glTextureImage2DMultisampleCoverageNV_FORMAT FORMAT_void_GLuint_GLenum_GLsizei_GLsizei_GLint_GLsizei_GLsizei_GLboolean
#define glTextureImage2DMultisampleCoverageNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTextureImage2DMultisampleCoverageNV_NOT_VOID_WRAP(...) {}
#define glTextureImage2DMultisampleNV_INDEX 2123
#define glTextureImage2DMultisampleNV_RETURN void
#define glTextureImage2DMultisampleNV_ARG_NAMES texture, target, samples, internalFormat, width, height, fixedSampleLocations
#define glTextureImage2DMultisampleNV_ARG_EXPAND GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations
#define glTextureImage2DMultisampleNV_PACKED PACKED_void_GLuint_GLenum_GLsizei_GLint_GLsizei_GLsizei_GLboolean
#define glTextureImage2DMultisampleNV_FORMAT FORMAT_void_GLuint_GLenum_GLsizei_GLint_GLsizei_GLsizei_GLboolean
#define glTextureImage2DMultisampleNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTextureImage2DMultisampleNV_NOT_VOID_WRAP(...) {}
#define glTextureImage3DEXT_INDEX 2124
#define glTextureImage3DEXT_RETURN void
#define glTextureImage3DEXT_ARG_NAMES texture, target, level, internalformat, width, height, depth, border, format, type, pixels
#define glTextureImage3DEXT_ARG_EXPAND GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid * pixels
#define glTextureImage3DEXT_PACKED PACKED_void_GLuint_GLenum_GLint_GLenum_GLsizei_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__
#define glTextureImage3DEXT_FORMAT FORMAT_void_GLuint_GLenum_GLint_GLenum_GLsizei_GLsizei_GLsizei_GLint_GLenum_GLenum_const_GLvoid___GENPT__
#define glTextureImage3DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTextureImage3DEXT_NOT_VOID_WRAP(...) {}
#define glTextureImage3DMultisampleCoverageNV_INDEX 2125
#define glTextureImage3DMultisampleCoverageNV_RETURN void
#define glTextureImage3DMultisampleCoverageNV_ARG_NAMES texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations
#define glTextureImage3DMultisampleCoverageNV_ARG_EXPAND GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations
#define glTextureImage3DMultisampleCoverageNV_PACKED PACKED_void_GLuint_GLenum_GLsizei_GLsizei_GLint_GLsizei_GLsizei_GLsizei_GLboolean
#define glTextureImage3DMultisampleCoverageNV_FORMAT FORMAT_void_GLuint_GLenum_GLsizei_GLsizei_GLint_GLsizei_GLsizei_GLsizei_GLboolean
#define glTextureImage3DMultisampleCoverageNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTextureImage3DMultisampleCoverageNV_NOT_VOID_WRAP(...) {}
#define glTextureImage3DMultisampleNV_INDEX 2126
#define glTextureImage3DMultisampleNV_RETURN void
#define glTextureImage3DMultisampleNV_ARG_NAMES texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations
#define glTextureImage3DMultisampleNV_ARG_EXPAND GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations
#define glTextureImage3DMultisampleNV_PACKED PACKED_void_GLuint_GLenum_GLsizei_GLint_GLsizei_GLsizei_GLsizei_GLboolean
#define glTextureImage3DMultisampleNV_FORMAT FORMAT_void_GLuint_GLenum_GLsizei_GLint_GLsizei_GLsizei_GLsizei_GLboolean
#define glTextureImage3DMultisampleNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTextureImage3DMultisampleNV_NOT_VOID_WRAP(...) {}
#define glTextureLightEXT_INDEX 2127
#define glTextureLightEXT_RETURN void
#define glTextureLightEXT_ARG_NAMES pname
#define glTextureLightEXT_ARG_EXPAND GLenum pname
#define glTextureLightEXT_PACKED PACKED_void_GLenum
#define glTextureLightEXT_FORMAT FORMAT_void_GLenum
#define glTextureLightEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTextureLightEXT_NOT_VOID_WRAP(...) {}
#define glTextureMaterialEXT_INDEX 2128
#define glTextureMaterialEXT_RETURN void
#define glTextureMaterialEXT_ARG_NAMES face, mode
#define glTextureMaterialEXT_ARG_EXPAND GLenum face, GLenum mode
#define glTextureMaterialEXT_PACKED PACKED_void_GLenum_GLenum
#define glTextureMaterialEXT_FORMAT FORMAT_void_GLenum_GLenum
#define glTextureMaterialEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTextureMaterialEXT_NOT_VOID_WRAP(...) {}
#define glTextureNormalEXT_INDEX 2129
#define glTextureNormalEXT_RETURN void
#define glTextureNormalEXT_ARG_NAMES mode
#define glTextureNormalEXT_ARG_EXPAND GLenum mode
#define glTextureNormalEXT_PACKED PACKED_void_GLenum
#define glTextureNormalEXT_FORMAT FORMAT_void_GLenum
#define glTextureNormalEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTextureNormalEXT_NOT_VOID_WRAP(...) {}
#define glTextureParameterIivEXT_INDEX 2130
#define glTextureParameterIivEXT_RETURN void
#define glTextureParameterIivEXT_ARG_NAMES texture, target, pname, params
#define glTextureParameterIivEXT_ARG_EXPAND GLuint texture, GLenum target, GLenum pname, const GLint * params
#define glTextureParameterIivEXT_PACKED PACKED_void_GLuint_GLenum_GLenum_const_GLint___GENPT__
#define glTextureParameterIivEXT_FORMAT FORMAT_void_GLuint_GLenum_GLenum_const_GLint___GENPT__
#define glTextureParameterIivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTextureParameterIivEXT_NOT_VOID_WRAP(...) {}
#define glTextureParameterIuivEXT_INDEX 2131
#define glTextureParameterIuivEXT_RETURN void
#define glTextureParameterIuivEXT_ARG_NAMES texture, target, pname, params
#define glTextureParameterIuivEXT_ARG_EXPAND GLuint texture, GLenum target, GLenum pname, const GLuint * params
#define glTextureParameterIuivEXT_PACKED PACKED_void_GLuint_GLenum_GLenum_const_GLuint___GENPT__
#define glTextureParameterIuivEXT_FORMAT FORMAT_void_GLuint_GLenum_GLenum_const_GLuint___GENPT__
#define glTextureParameterIuivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTextureParameterIuivEXT_NOT_VOID_WRAP(...) {}
#define glTextureParameterfEXT_INDEX 2132
#define glTextureParameterfEXT_RETURN void
#define glTextureParameterfEXT_ARG_NAMES texture, target, pname, param
#define glTextureParameterfEXT_ARG_EXPAND GLuint texture, GLenum target, GLenum pname, GLfloat param
#define glTextureParameterfEXT_PACKED PACKED_void_GLuint_GLenum_GLenum_GLfloat
#define glTextureParameterfEXT_FORMAT FORMAT_void_GLuint_GLenum_GLenum_GLfloat
#define glTextureParameterfEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTextureParameterfEXT_NOT_VOID_WRAP(...) {}
#define glTextureParameterfvEXT_INDEX 2133
#define glTextureParameterfvEXT_RETURN void
#define glTextureParameterfvEXT_ARG_NAMES texture, target, pname, params
#define glTextureParameterfvEXT_ARG_EXPAND GLuint texture, GLenum target, GLenum pname, const GLfloat * params
#define glTextureParameterfvEXT_PACKED PACKED_void_GLuint_GLenum_GLenum_const_GLfloat___GENPT__
#define glTextureParameterfvEXT_FORMAT FORMAT_void_GLuint_GLenum_GLenum_const_GLfloat___GENPT__
#define glTextureParameterfvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTextureParameterfvEXT_NOT_VOID_WRAP(...) {}
#define glTextureParameteriEXT_INDEX 2134
#define glTextureParameteriEXT_RETURN void
#define glTextureParameteriEXT_ARG_NAMES texture, target, pname, param
#define glTextureParameteriEXT_ARG_EXPAND GLuint texture, GLenum target, GLenum pname, GLint param
#define glTextureParameteriEXT_PACKED PACKED_void_GLuint_GLenum_GLenum_GLint
#define glTextureParameteriEXT_FORMAT FORMAT_void_GLuint_GLenum_GLenum_GLint
#define glTextureParameteriEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTextureParameteriEXT_NOT_VOID_WRAP(...) {}
#define glTextureParameterivEXT_INDEX 2135
#define glTextureParameterivEXT_RETURN void
#define glTextureParameterivEXT_ARG_NAMES texture, target, pname, params
#define glTextureParameterivEXT_ARG_EXPAND GLuint texture, GLenum target, GLenum pname, const GLint * params
#define glTextureParameterivEXT_PACKED PACKED_void_GLuint_GLenum_GLenum_const_GLint___GENPT__
#define glTextureParameterivEXT_FORMAT FORMAT_void_GLuint_GLenum_GLenum_const_GLint___GENPT__
#define glTextureParameterivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTextureParameterivEXT_NOT_VOID_WRAP(...) {}
#define glTextureRangeAPPLE_INDEX 2136
#define glTextureRangeAPPLE_RETURN void
#define glTextureRangeAPPLE_ARG_NAMES target, length, pointer
#define glTextureRangeAPPLE_ARG_EXPAND GLenum target, GLsizei length, const GLvoid * pointer
#define glTextureRangeAPPLE_PACKED PACKED_void_GLenum_GLsizei_const_GLvoid___GENPT__
#define glTextureRangeAPPLE_FORMAT FORMAT_void_GLenum_GLsizei_const_GLvoid___GENPT__
#define glTextureRangeAPPLE_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTextureRangeAPPLE_NOT_VOID_WRAP(...) {}
#define glTextureRenderbufferEXT_INDEX 2137
#define glTextureRenderbufferEXT_RETURN void
#define glTextureRenderbufferEXT_ARG_NAMES texture, target, renderbuffer
#define glTextureRenderbufferEXT_ARG_EXPAND GLuint texture, GLenum target, GLuint renderbuffer
#define glTextureRenderbufferEXT_PACKED PACKED_void_GLuint_GLenum_GLuint
#define glTextureRenderbufferEXT_FORMAT FORMAT_void_GLuint_GLenum_GLuint
#define glTextureRenderbufferEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTextureRenderbufferEXT_NOT_VOID_WRAP(...) {}
#define glTextureStorage1DEXT_INDEX 2138
#define glTextureStorage1DEXT_RETURN void
#define glTextureStorage1DEXT_ARG_NAMES texture, target, levels, internalformat, width
#define glTextureStorage1DEXT_ARG_EXPAND GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width
#define glTextureStorage1DEXT_PACKED PACKED_void_GLuint_GLenum_GLsizei_GLenum_GLsizei
#define glTextureStorage1DEXT_FORMAT FORMAT_void_GLuint_GLenum_GLsizei_GLenum_GLsizei
#define glTextureStorage1DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTextureStorage1DEXT_NOT_VOID_WRAP(...) {}
#define glTextureStorage2DEXT_INDEX 2139
#define glTextureStorage2DEXT_RETURN void
#define glTextureStorage2DEXT_ARG_NAMES texture, target, levels, internalformat, width, height
#define glTextureStorage2DEXT_ARG_EXPAND GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height
#define glTextureStorage2DEXT_PACKED PACKED_void_GLuint_GLenum_GLsizei_GLenum_GLsizei_GLsizei
#define glTextureStorage2DEXT_FORMAT FORMAT_void_GLuint_GLenum_GLsizei_GLenum_GLsizei_GLsizei
#define glTextureStorage2DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTextureStorage2DEXT_NOT_VOID_WRAP(...) {}
#define glTextureStorage2DMultisampleEXT_INDEX 2140
#define glTextureStorage2DMultisampleEXT_RETURN void
#define glTextureStorage2DMultisampleEXT_ARG_NAMES texture, target, samples, internalformat, width, height, fixedsamplelocations
#define glTextureStorage2DMultisampleEXT_ARG_EXPAND GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations
#define glTextureStorage2DMultisampleEXT_PACKED PACKED_void_GLuint_GLenum_GLsizei_GLenum_GLsizei_GLsizei_GLboolean
#define glTextureStorage2DMultisampleEXT_FORMAT FORMAT_void_GLuint_GLenum_GLsizei_GLenum_GLsizei_GLsizei_GLboolean
#define glTextureStorage2DMultisampleEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTextureStorage2DMultisampleEXT_NOT_VOID_WRAP(...) {}
#define glTextureStorage3DEXT_INDEX 2141
#define glTextureStorage3DEXT_RETURN void
#define glTextureStorage3DEXT_ARG_NAMES texture, target, levels, internalformat, width, height, depth
#define glTextureStorage3DEXT_ARG_EXPAND GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth
#define glTextureStorage3DEXT_PACKED PACKED_void_GLuint_GLenum_GLsizei_GLenum_GLsizei_GLsizei_GLsizei
#define glTextureStorage3DEXT_FORMAT FORMAT_void_GLuint_GLenum_GLsizei_GLenum_GLsizei_GLsizei_GLsizei
#define glTextureStorage3DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTextureStorage3DEXT_NOT_VOID_WRAP(...) {}
#define glTextureStorage3DMultisampleEXT_INDEX 2142
#define glTextureStorage3DMultisampleEXT_RETURN void
#define glTextureStorage3DMultisampleEXT_ARG_NAMES texture, target, samples, internalformat, width, height, depth, fixedsamplelocations
#define glTextureStorage3DMultisampleEXT_ARG_EXPAND GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations
#define glTextureStorage3DMultisampleEXT_PACKED PACKED_void_GLuint_GLenum_GLsizei_GLenum_GLsizei_GLsizei_GLsizei_GLboolean
#define glTextureStorage3DMultisampleEXT_FORMAT FORMAT_void_GLuint_GLenum_GLsizei_GLenum_GLsizei_GLsizei_GLsizei_GLboolean
#define glTextureStorage3DMultisampleEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTextureStorage3DMultisampleEXT_NOT_VOID_WRAP(...) {}
#define glTextureStorageSparseAMD_INDEX 2143
#define glTextureStorageSparseAMD_RETURN void
#define glTextureStorageSparseAMD_ARG_NAMES texture, target, internalFormat, width, height, depth, layers, flags
#define glTextureStorageSparseAMD_ARG_EXPAND GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags
#define glTextureStorageSparseAMD_PACKED PACKED_void_GLuint_GLenum_GLenum_GLsizei_GLsizei_GLsizei_GLsizei_GLbitfield
#define glTextureStorageSparseAMD_FORMAT FORMAT_void_GLuint_GLenum_GLenum_GLsizei_GLsizei_GLsizei_GLsizei_GLbitfield
#define glTextureStorageSparseAMD_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTextureStorageSparseAMD_NOT_VOID_WRAP(...) {}
#define glTextureSubImage1DEXT_INDEX 2144
#define glTextureSubImage1DEXT_RETURN void
#define glTextureSubImage1DEXT_ARG_NAMES texture, target, level, xoffset, width, format, type, pixels
#define glTextureSubImage1DEXT_ARG_EXPAND GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid * pixels
#define glTextureSubImage1DEXT_PACKED PACKED_void_GLuint_GLenum_GLint_GLint_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__
#define glTextureSubImage1DEXT_FORMAT FORMAT_void_GLuint_GLenum_GLint_GLint_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__
#define glTextureSubImage1DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTextureSubImage1DEXT_NOT_VOID_WRAP(...) {}
#define glTextureSubImage2DEXT_INDEX 2145
#define glTextureSubImage2DEXT_RETURN void
#define glTextureSubImage2DEXT_ARG_NAMES texture, target, level, xoffset, yoffset, width, height, format, type, pixels
#define glTextureSubImage2DEXT_ARG_EXPAND GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * pixels
#define glTextureSubImage2DEXT_PACKED PACKED_void_GLuint_GLenum_GLint_GLint_GLint_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__
#define glTextureSubImage2DEXT_FORMAT FORMAT_void_GLuint_GLenum_GLint_GLint_GLint_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__
#define glTextureSubImage2DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTextureSubImage2DEXT_NOT_VOID_WRAP(...) {}
#define glTextureSubImage3DEXT_INDEX 2146
#define glTextureSubImage3DEXT_RETURN void
#define glTextureSubImage3DEXT_ARG_NAMES texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels
#define glTextureSubImage3DEXT_ARG_EXPAND GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid * pixels
#define glTextureSubImage3DEXT_PACKED PACKED_void_GLuint_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__
#define glTextureSubImage3DEXT_FORMAT FORMAT_void_GLuint_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei_GLenum_GLenum_const_GLvoid___GENPT__
#define glTextureSubImage3DEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTextureSubImage3DEXT_NOT_VOID_WRAP(...) {}
#define glTextureView_INDEX 2147
#define glTextureView_RETURN void
#define glTextureView_ARG_NAMES texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers
#define glTextureView_ARG_EXPAND GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers
#define glTextureView_PACKED PACKED_void_GLuint_GLenum_GLuint_GLenum_GLuint_GLuint_GLuint_GLuint
#define glTextureView_FORMAT FORMAT_void_GLuint_GLenum_GLuint_GLenum_GLuint_GLuint_GLuint_GLuint
#define glTextureView_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTextureView_NOT_VOID_WRAP(...) {}
#define glTrackMatrixNV_INDEX 2148
#define glTrackMatrixNV_RETURN void
#define glTrackMatrixNV_ARG_NAMES target, address, matrix, transform
#define glTrackMatrixNV_ARG_EXPAND GLenum target, GLuint address, GLenum matrix, GLenum transform
#define glTrackMatrixNV_PACKED PACKED_void_GLenum_GLuint_GLenum_GLenum
#define glTrackMatrixNV_FORMAT FORMAT_void_GLenum_GLuint_GLenum_GLenum
#define glTrackMatrixNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTrackMatrixNV_NOT_VOID_WRAP(...) {}
#define glTransformFeedbackAttribsNV_INDEX 2149
#define glTransformFeedbackAttribsNV_RETURN void
#define glTransformFeedbackAttribsNV_ARG_NAMES count, attribs, bufferMode
#define glTransformFeedbackAttribsNV_ARG_EXPAND GLsizei count, const GLint * attribs, GLenum bufferMode
#define glTransformFeedbackAttribsNV_PACKED PACKED_void_GLsizei_const_GLint___GENPT___GLenum
#define glTransformFeedbackAttribsNV_FORMAT FORMAT_void_GLsizei_const_GLint___GENPT___GLenum
#define glTransformFeedbackAttribsNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTransformFeedbackAttribsNV_NOT_VOID_WRAP(...) {}
#define glTransformFeedbackStreamAttribsNV_INDEX 2150
#define glTransformFeedbackStreamAttribsNV_RETURN void
#define glTransformFeedbackStreamAttribsNV_ARG_NAMES count, attribs, nbuffers, bufstreams, bufferMode
#define glTransformFeedbackStreamAttribsNV_ARG_EXPAND GLsizei count, const GLint * attribs, GLsizei nbuffers, const GLint * bufstreams, GLenum bufferMode
#define glTransformFeedbackStreamAttribsNV_PACKED PACKED_void_GLsizei_const_GLint___GENPT___GLsizei_const_GLint___GENPT___GLenum
#define glTransformFeedbackStreamAttribsNV_FORMAT FORMAT_void_GLsizei_const_GLint___GENPT___GLsizei_const_GLint___GENPT___GLenum
#define glTransformFeedbackStreamAttribsNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTransformFeedbackStreamAttribsNV_NOT_VOID_WRAP(...) {}
#define glTransformFeedbackVaryings_INDEX 2151
#define glTransformFeedbackVaryings_RETURN void
#define glTransformFeedbackVaryings_ARG_NAMES program, count, varyings, bufferMode
#define glTransformFeedbackVaryings_ARG_EXPAND GLuint program, GLsizei count, GLchar*const * varyings, GLenum bufferMode
#define glTransformFeedbackVaryings_PACKED PACKED_void_GLuint_GLsizei_GLchar__GENPT__const___GENPT___GLenum
#define glTransformFeedbackVaryings_FORMAT FORMAT_void_GLuint_GLsizei_GLchar__GENPT__const___GENPT___GLenum
#define glTransformFeedbackVaryings_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTransformFeedbackVaryings_NOT_VOID_WRAP(...) {}
#define glTransformFeedbackVaryingsEXT_INDEX 2152
#define glTransformFeedbackVaryingsEXT_RETURN void
#define glTransformFeedbackVaryingsEXT_ARG_NAMES program, count, varyings, bufferMode
#define glTransformFeedbackVaryingsEXT_ARG_EXPAND GLuint program, GLsizei count, const GLchar * varyings, GLenum bufferMode
#define glTransformFeedbackVaryingsEXT_PACKED PACKED_void_GLuint_GLsizei_const_GLchar___GENPT___GLenum
#define glTransformFeedbackVaryingsEXT_FORMAT FORMAT_void_GLuint_GLsizei_const_GLchar___GENPT___GLenum
#define glTransformFeedbackVaryingsEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTransformFeedbackVaryingsEXT_NOT_VOID_WRAP(...) {}
#define glTransformFeedbackVaryingsNV_INDEX 2153
#define glTransformFeedbackVaryingsNV_RETURN void
#define glTransformFeedbackVaryingsNV_ARG_NAMES program, count, locations, bufferMode
#define glTransformFeedbackVaryingsNV_ARG_EXPAND GLuint program, GLsizei count, const GLint * locations, GLenum bufferMode
#define glTransformFeedbackVaryingsNV_PACKED PACKED_void_GLuint_GLsizei_const_GLint___GENPT___GLenum
#define glTransformFeedbackVaryingsNV_FORMAT FORMAT_void_GLuint_GLsizei_const_GLint___GENPT___GLenum
#define glTransformFeedbackVaryingsNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTransformFeedbackVaryingsNV_NOT_VOID_WRAP(...) {}
#define glTransformPathNV_INDEX 2154
#define glTransformPathNV_RETURN void
#define glTransformPathNV_ARG_NAMES resultPath, srcPath, transformType, transformValues
#define glTransformPathNV_ARG_EXPAND GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat * transformValues
#define glTransformPathNV_PACKED PACKED_void_GLuint_GLuint_GLenum_const_GLfloat___GENPT__
#define glTransformPathNV_FORMAT FORMAT_void_GLuint_GLuint_GLenum_const_GLfloat___GENPT__
#define glTransformPathNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTransformPathNV_NOT_VOID_WRAP(...) {}
#define glTranslated_INDEX 2155
#define glTranslated_RETURN void
#define glTranslated_ARG_NAMES x, y, z
#define glTranslated_ARG_EXPAND GLdouble x, GLdouble y, GLdouble z
#define glTranslated_PACKED PACKED_void_GLdouble_GLdouble_GLdouble
#define glTranslated_FORMAT FORMAT_void_GLdouble_GLdouble_GLdouble
#define glTranslated_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTranslated_NOT_VOID_WRAP(...) {}
#define glTranslatef_INDEX 2156
#define glTranslatef_RETURN void
#define glTranslatef_ARG_NAMES x, y, z
#define glTranslatef_ARG_EXPAND GLfloat x, GLfloat y, GLfloat z
#define glTranslatef_PACKED PACKED_void_GLfloat_GLfloat_GLfloat
#define glTranslatef_FORMAT FORMAT_void_GLfloat_GLfloat_GLfloat
#define glTranslatef_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTranslatef_NOT_VOID_WRAP(...) {}
#define glTranslatex_INDEX 2157
#define glTranslatex_RETURN void
#define glTranslatex_ARG_NAMES x, y, z
#define glTranslatex_ARG_EXPAND GLfixed x, GLfixed y, GLfixed z
#define glTranslatex_PACKED PACKED_void_GLfixed_GLfixed_GLfixed
#define glTranslatex_FORMAT FORMAT_void_GLfixed_GLfixed_GLfixed
#define glTranslatex_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTranslatex_NOT_VOID_WRAP(...) {}
#define glTranslatexOES_INDEX 2158
#define glTranslatexOES_RETURN void
#define glTranslatexOES_ARG_NAMES x, y, z
#define glTranslatexOES_ARG_EXPAND GLfixed x, GLfixed y, GLfixed z
#define glTranslatexOES_PACKED PACKED_void_GLfixed_GLfixed_GLfixed
#define glTranslatexOES_FORMAT FORMAT_void_GLfixed_GLfixed_GLfixed
#define glTranslatexOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glTranslatexOES_NOT_VOID_WRAP(...) {}
#define glUniform1d_INDEX 2159
#define glUniform1d_RETURN void
#define glUniform1d_ARG_NAMES location, x
#define glUniform1d_ARG_EXPAND GLint location, GLdouble x
#define glUniform1d_PACKED PACKED_void_GLint_GLdouble
#define glUniform1d_FORMAT FORMAT_void_GLint_GLdouble
#define glUniform1d_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform1d_NOT_VOID_WRAP(...) {}
#define glUniform1dv_INDEX 2160
#define glUniform1dv_RETURN void
#define glUniform1dv_ARG_NAMES location, count, value
#define glUniform1dv_ARG_EXPAND GLint location, GLsizei count, const GLdouble * value
#define glUniform1dv_PACKED PACKED_void_GLint_GLsizei_const_GLdouble___GENPT__
#define glUniform1dv_FORMAT FORMAT_void_GLint_GLsizei_const_GLdouble___GENPT__
#define glUniform1dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform1dv_NOT_VOID_WRAP(...) {}
#define glUniform1f_INDEX 2161
#define glUniform1f_RETURN void
#define glUniform1f_ARG_NAMES location, v0
#define glUniform1f_ARG_EXPAND GLint location, GLfloat v0
#define glUniform1f_PACKED PACKED_void_GLint_GLfloat
#define glUniform1f_FORMAT FORMAT_void_GLint_GLfloat
#define glUniform1f_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform1f_NOT_VOID_WRAP(...) {}
#define glUniform1fARB_INDEX 2162
#define glUniform1fARB_RETURN void
#define glUniform1fARB_ARG_NAMES location, v0
#define glUniform1fARB_ARG_EXPAND GLint location, GLfloat v0
#define glUniform1fARB_PACKED PACKED_void_GLint_GLfloat
#define glUniform1fARB_FORMAT FORMAT_void_GLint_GLfloat
#define glUniform1fARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform1fARB_NOT_VOID_WRAP(...) {}
#define glUniform1fv_INDEX 2163
#define glUniform1fv_RETURN void
#define glUniform1fv_ARG_NAMES location, count, value
#define glUniform1fv_ARG_EXPAND GLint location, GLsizei count, const GLfloat * value
#define glUniform1fv_PACKED PACKED_void_GLint_GLsizei_const_GLfloat___GENPT__
#define glUniform1fv_FORMAT FORMAT_void_GLint_GLsizei_const_GLfloat___GENPT__
#define glUniform1fv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform1fv_NOT_VOID_WRAP(...) {}
#define glUniform1fvARB_INDEX 2164
#define glUniform1fvARB_RETURN void
#define glUniform1fvARB_ARG_NAMES location, count, value
#define glUniform1fvARB_ARG_EXPAND GLint location, GLsizei count, const GLfloat * value
#define glUniform1fvARB_PACKED PACKED_void_GLint_GLsizei_const_GLfloat___GENPT__
#define glUniform1fvARB_FORMAT FORMAT_void_GLint_GLsizei_const_GLfloat___GENPT__
#define glUniform1fvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform1fvARB_NOT_VOID_WRAP(...) {}
#define glUniform1i_INDEX 2165
#define glUniform1i_RETURN void
#define glUniform1i_ARG_NAMES location, v0
#define glUniform1i_ARG_EXPAND GLint location, GLint v0
#define glUniform1i_PACKED PACKED_void_GLint_GLint
#define glUniform1i_FORMAT FORMAT_void_GLint_GLint
#define glUniform1i_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform1i_NOT_VOID_WRAP(...) {}
#define glUniform1i64NV_INDEX 2166
#define glUniform1i64NV_RETURN void
#define glUniform1i64NV_ARG_NAMES location, x
#define glUniform1i64NV_ARG_EXPAND GLint location, GLint64EXT x
#define glUniform1i64NV_PACKED PACKED_void_GLint_GLint64EXT
#define glUniform1i64NV_FORMAT FORMAT_void_GLint_GLint64EXT
#define glUniform1i64NV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform1i64NV_NOT_VOID_WRAP(...) {}
#define glUniform1i64vNV_INDEX 2167
#define glUniform1i64vNV_RETURN void
#define glUniform1i64vNV_ARG_NAMES location, count, value
#define glUniform1i64vNV_ARG_EXPAND GLint location, GLsizei count, const GLint64EXT * value
#define glUniform1i64vNV_PACKED PACKED_void_GLint_GLsizei_const_GLint64EXT___GENPT__
#define glUniform1i64vNV_FORMAT FORMAT_void_GLint_GLsizei_const_GLint64EXT___GENPT__
#define glUniform1i64vNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform1i64vNV_NOT_VOID_WRAP(...) {}
#define glUniform1iARB_INDEX 2168
#define glUniform1iARB_RETURN void
#define glUniform1iARB_ARG_NAMES location, v0
#define glUniform1iARB_ARG_EXPAND GLint location, GLint v0
#define glUniform1iARB_PACKED PACKED_void_GLint_GLint
#define glUniform1iARB_FORMAT FORMAT_void_GLint_GLint
#define glUniform1iARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform1iARB_NOT_VOID_WRAP(...) {}
#define glUniform1iv_INDEX 2169
#define glUniform1iv_RETURN void
#define glUniform1iv_ARG_NAMES location, count, value
#define glUniform1iv_ARG_EXPAND GLint location, GLsizei count, const GLint * value
#define glUniform1iv_PACKED PACKED_void_GLint_GLsizei_const_GLint___GENPT__
#define glUniform1iv_FORMAT FORMAT_void_GLint_GLsizei_const_GLint___GENPT__
#define glUniform1iv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform1iv_NOT_VOID_WRAP(...) {}
#define glUniform1ivARB_INDEX 2170
#define glUniform1ivARB_RETURN void
#define glUniform1ivARB_ARG_NAMES location, count, value
#define glUniform1ivARB_ARG_EXPAND GLint location, GLsizei count, const GLint * value
#define glUniform1ivARB_PACKED PACKED_void_GLint_GLsizei_const_GLint___GENPT__
#define glUniform1ivARB_FORMAT FORMAT_void_GLint_GLsizei_const_GLint___GENPT__
#define glUniform1ivARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform1ivARB_NOT_VOID_WRAP(...) {}
#define glUniform1ui_INDEX 2171
#define glUniform1ui_RETURN void
#define glUniform1ui_ARG_NAMES location, v0
#define glUniform1ui_ARG_EXPAND GLint location, GLuint v0
#define glUniform1ui_PACKED PACKED_void_GLint_GLuint
#define glUniform1ui_FORMAT FORMAT_void_GLint_GLuint
#define glUniform1ui_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform1ui_NOT_VOID_WRAP(...) {}
#define glUniform1ui64NV_INDEX 2172
#define glUniform1ui64NV_RETURN void
#define glUniform1ui64NV_ARG_NAMES location, x
#define glUniform1ui64NV_ARG_EXPAND GLint location, GLuint64EXT x
#define glUniform1ui64NV_PACKED PACKED_void_GLint_GLuint64EXT
#define glUniform1ui64NV_FORMAT FORMAT_void_GLint_GLuint64EXT
#define glUniform1ui64NV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform1ui64NV_NOT_VOID_WRAP(...) {}
#define glUniform1ui64vNV_INDEX 2173
#define glUniform1ui64vNV_RETURN void
#define glUniform1ui64vNV_ARG_NAMES location, count, value
#define glUniform1ui64vNV_ARG_EXPAND GLint location, GLsizei count, const GLuint64EXT * value
#define glUniform1ui64vNV_PACKED PACKED_void_GLint_GLsizei_const_GLuint64EXT___GENPT__
#define glUniform1ui64vNV_FORMAT FORMAT_void_GLint_GLsizei_const_GLuint64EXT___GENPT__
#define glUniform1ui64vNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform1ui64vNV_NOT_VOID_WRAP(...) {}
#define glUniform1uiEXT_INDEX 2174
#define glUniform1uiEXT_RETURN void
#define glUniform1uiEXT_ARG_NAMES location, v0
#define glUniform1uiEXT_ARG_EXPAND GLint location, GLuint v0
#define glUniform1uiEXT_PACKED PACKED_void_GLint_GLuint
#define glUniform1uiEXT_FORMAT FORMAT_void_GLint_GLuint
#define glUniform1uiEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform1uiEXT_NOT_VOID_WRAP(...) {}
#define glUniform1uiv_INDEX 2175
#define glUniform1uiv_RETURN void
#define glUniform1uiv_ARG_NAMES location, count, value
#define glUniform1uiv_ARG_EXPAND GLint location, GLsizei count, const GLuint * value
#define glUniform1uiv_PACKED PACKED_void_GLint_GLsizei_const_GLuint___GENPT__
#define glUniform1uiv_FORMAT FORMAT_void_GLint_GLsizei_const_GLuint___GENPT__
#define glUniform1uiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform1uiv_NOT_VOID_WRAP(...) {}
#define glUniform1uivEXT_INDEX 2176
#define glUniform1uivEXT_RETURN void
#define glUniform1uivEXT_ARG_NAMES location, count, value
#define glUniform1uivEXT_ARG_EXPAND GLint location, GLsizei count, const GLuint * value
#define glUniform1uivEXT_PACKED PACKED_void_GLint_GLsizei_const_GLuint___GENPT__
#define glUniform1uivEXT_FORMAT FORMAT_void_GLint_GLsizei_const_GLuint___GENPT__
#define glUniform1uivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform1uivEXT_NOT_VOID_WRAP(...) {}
#define glUniform2d_INDEX 2177
#define glUniform2d_RETURN void
#define glUniform2d_ARG_NAMES location, x, y
#define glUniform2d_ARG_EXPAND GLint location, GLdouble x, GLdouble y
#define glUniform2d_PACKED PACKED_void_GLint_GLdouble_GLdouble
#define glUniform2d_FORMAT FORMAT_void_GLint_GLdouble_GLdouble
#define glUniform2d_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform2d_NOT_VOID_WRAP(...) {}
#define glUniform2dv_INDEX 2178
#define glUniform2dv_RETURN void
#define glUniform2dv_ARG_NAMES location, count, value
#define glUniform2dv_ARG_EXPAND GLint location, GLsizei count, const GLdouble * value
#define glUniform2dv_PACKED PACKED_void_GLint_GLsizei_const_GLdouble___GENPT__
#define glUniform2dv_FORMAT FORMAT_void_GLint_GLsizei_const_GLdouble___GENPT__
#define glUniform2dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform2dv_NOT_VOID_WRAP(...) {}
#define glUniform2f_INDEX 2179
#define glUniform2f_RETURN void
#define glUniform2f_ARG_NAMES location, v0, v1
#define glUniform2f_ARG_EXPAND GLint location, GLfloat v0, GLfloat v1
#define glUniform2f_PACKED PACKED_void_GLint_GLfloat_GLfloat
#define glUniform2f_FORMAT FORMAT_void_GLint_GLfloat_GLfloat
#define glUniform2f_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform2f_NOT_VOID_WRAP(...) {}
#define glUniform2fARB_INDEX 2180
#define glUniform2fARB_RETURN void
#define glUniform2fARB_ARG_NAMES location, v0, v1
#define glUniform2fARB_ARG_EXPAND GLint location, GLfloat v0, GLfloat v1
#define glUniform2fARB_PACKED PACKED_void_GLint_GLfloat_GLfloat
#define glUniform2fARB_FORMAT FORMAT_void_GLint_GLfloat_GLfloat
#define glUniform2fARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform2fARB_NOT_VOID_WRAP(...) {}
#define glUniform2fv_INDEX 2181
#define glUniform2fv_RETURN void
#define glUniform2fv_ARG_NAMES location, count, value
#define glUniform2fv_ARG_EXPAND GLint location, GLsizei count, const GLfloat * value
#define glUniform2fv_PACKED PACKED_void_GLint_GLsizei_const_GLfloat___GENPT__
#define glUniform2fv_FORMAT FORMAT_void_GLint_GLsizei_const_GLfloat___GENPT__
#define glUniform2fv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform2fv_NOT_VOID_WRAP(...) {}
#define glUniform2fvARB_INDEX 2182
#define glUniform2fvARB_RETURN void
#define glUniform2fvARB_ARG_NAMES location, count, value
#define glUniform2fvARB_ARG_EXPAND GLint location, GLsizei count, const GLfloat * value
#define glUniform2fvARB_PACKED PACKED_void_GLint_GLsizei_const_GLfloat___GENPT__
#define glUniform2fvARB_FORMAT FORMAT_void_GLint_GLsizei_const_GLfloat___GENPT__
#define glUniform2fvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform2fvARB_NOT_VOID_WRAP(...) {}
#define glUniform2i_INDEX 2183
#define glUniform2i_RETURN void
#define glUniform2i_ARG_NAMES location, v0, v1
#define glUniform2i_ARG_EXPAND GLint location, GLint v0, GLint v1
#define glUniform2i_PACKED PACKED_void_GLint_GLint_GLint
#define glUniform2i_FORMAT FORMAT_void_GLint_GLint_GLint
#define glUniform2i_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform2i_NOT_VOID_WRAP(...) {}
#define glUniform2i64NV_INDEX 2184
#define glUniform2i64NV_RETURN void
#define glUniform2i64NV_ARG_NAMES location, x, y
#define glUniform2i64NV_ARG_EXPAND GLint location, GLint64EXT x, GLint64EXT y
#define glUniform2i64NV_PACKED PACKED_void_GLint_GLint64EXT_GLint64EXT
#define glUniform2i64NV_FORMAT FORMAT_void_GLint_GLint64EXT_GLint64EXT
#define glUniform2i64NV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform2i64NV_NOT_VOID_WRAP(...) {}
#define glUniform2i64vNV_INDEX 2185
#define glUniform2i64vNV_RETURN void
#define glUniform2i64vNV_ARG_NAMES location, count, value
#define glUniform2i64vNV_ARG_EXPAND GLint location, GLsizei count, const GLint64EXT * value
#define glUniform2i64vNV_PACKED PACKED_void_GLint_GLsizei_const_GLint64EXT___GENPT__
#define glUniform2i64vNV_FORMAT FORMAT_void_GLint_GLsizei_const_GLint64EXT___GENPT__
#define glUniform2i64vNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform2i64vNV_NOT_VOID_WRAP(...) {}
#define glUniform2iARB_INDEX 2186
#define glUniform2iARB_RETURN void
#define glUniform2iARB_ARG_NAMES location, v0, v1
#define glUniform2iARB_ARG_EXPAND GLint location, GLint v0, GLint v1
#define glUniform2iARB_PACKED PACKED_void_GLint_GLint_GLint
#define glUniform2iARB_FORMAT FORMAT_void_GLint_GLint_GLint
#define glUniform2iARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform2iARB_NOT_VOID_WRAP(...) {}
#define glUniform2iv_INDEX 2187
#define glUniform2iv_RETURN void
#define glUniform2iv_ARG_NAMES location, count, value
#define glUniform2iv_ARG_EXPAND GLint location, GLsizei count, const GLint * value
#define glUniform2iv_PACKED PACKED_void_GLint_GLsizei_const_GLint___GENPT__
#define glUniform2iv_FORMAT FORMAT_void_GLint_GLsizei_const_GLint___GENPT__
#define glUniform2iv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform2iv_NOT_VOID_WRAP(...) {}
#define glUniform2ivARB_INDEX 2188
#define glUniform2ivARB_RETURN void
#define glUniform2ivARB_ARG_NAMES location, count, value
#define glUniform2ivARB_ARG_EXPAND GLint location, GLsizei count, const GLint * value
#define glUniform2ivARB_PACKED PACKED_void_GLint_GLsizei_const_GLint___GENPT__
#define glUniform2ivARB_FORMAT FORMAT_void_GLint_GLsizei_const_GLint___GENPT__
#define glUniform2ivARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform2ivARB_NOT_VOID_WRAP(...) {}
#define glUniform2ui_INDEX 2189
#define glUniform2ui_RETURN void
#define glUniform2ui_ARG_NAMES location, v0, v1
#define glUniform2ui_ARG_EXPAND GLint location, GLuint v0, GLuint v1
#define glUniform2ui_PACKED PACKED_void_GLint_GLuint_GLuint
#define glUniform2ui_FORMAT FORMAT_void_GLint_GLuint_GLuint
#define glUniform2ui_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform2ui_NOT_VOID_WRAP(...) {}
#define glUniform2ui64NV_INDEX 2190
#define glUniform2ui64NV_RETURN void
#define glUniform2ui64NV_ARG_NAMES location, x, y
#define glUniform2ui64NV_ARG_EXPAND GLint location, GLuint64EXT x, GLuint64EXT y
#define glUniform2ui64NV_PACKED PACKED_void_GLint_GLuint64EXT_GLuint64EXT
#define glUniform2ui64NV_FORMAT FORMAT_void_GLint_GLuint64EXT_GLuint64EXT
#define glUniform2ui64NV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform2ui64NV_NOT_VOID_WRAP(...) {}
#define glUniform2ui64vNV_INDEX 2191
#define glUniform2ui64vNV_RETURN void
#define glUniform2ui64vNV_ARG_NAMES location, count, value
#define glUniform2ui64vNV_ARG_EXPAND GLint location, GLsizei count, const GLuint64EXT * value
#define glUniform2ui64vNV_PACKED PACKED_void_GLint_GLsizei_const_GLuint64EXT___GENPT__
#define glUniform2ui64vNV_FORMAT FORMAT_void_GLint_GLsizei_const_GLuint64EXT___GENPT__
#define glUniform2ui64vNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform2ui64vNV_NOT_VOID_WRAP(...) {}
#define glUniform2uiEXT_INDEX 2192
#define glUniform2uiEXT_RETURN void
#define glUniform2uiEXT_ARG_NAMES location, v0, v1
#define glUniform2uiEXT_ARG_EXPAND GLint location, GLuint v0, GLuint v1
#define glUniform2uiEXT_PACKED PACKED_void_GLint_GLuint_GLuint
#define glUniform2uiEXT_FORMAT FORMAT_void_GLint_GLuint_GLuint
#define glUniform2uiEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform2uiEXT_NOT_VOID_WRAP(...) {}
#define glUniform2uiv_INDEX 2193
#define glUniform2uiv_RETURN void
#define glUniform2uiv_ARG_NAMES location, count, value
#define glUniform2uiv_ARG_EXPAND GLint location, GLsizei count, const GLuint * value
#define glUniform2uiv_PACKED PACKED_void_GLint_GLsizei_const_GLuint___GENPT__
#define glUniform2uiv_FORMAT FORMAT_void_GLint_GLsizei_const_GLuint___GENPT__
#define glUniform2uiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform2uiv_NOT_VOID_WRAP(...) {}
#define glUniform2uivEXT_INDEX 2194
#define glUniform2uivEXT_RETURN void
#define glUniform2uivEXT_ARG_NAMES location, count, value
#define glUniform2uivEXT_ARG_EXPAND GLint location, GLsizei count, const GLuint * value
#define glUniform2uivEXT_PACKED PACKED_void_GLint_GLsizei_const_GLuint___GENPT__
#define glUniform2uivEXT_FORMAT FORMAT_void_GLint_GLsizei_const_GLuint___GENPT__
#define glUniform2uivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform2uivEXT_NOT_VOID_WRAP(...) {}
#define glUniform3d_INDEX 2195
#define glUniform3d_RETURN void
#define glUniform3d_ARG_NAMES location, x, y, z
#define glUniform3d_ARG_EXPAND GLint location, GLdouble x, GLdouble y, GLdouble z
#define glUniform3d_PACKED PACKED_void_GLint_GLdouble_GLdouble_GLdouble
#define glUniform3d_FORMAT FORMAT_void_GLint_GLdouble_GLdouble_GLdouble
#define glUniform3d_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform3d_NOT_VOID_WRAP(...) {}
#define glUniform3dv_INDEX 2196
#define glUniform3dv_RETURN void
#define glUniform3dv_ARG_NAMES location, count, value
#define glUniform3dv_ARG_EXPAND GLint location, GLsizei count, const GLdouble * value
#define glUniform3dv_PACKED PACKED_void_GLint_GLsizei_const_GLdouble___GENPT__
#define glUniform3dv_FORMAT FORMAT_void_GLint_GLsizei_const_GLdouble___GENPT__
#define glUniform3dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform3dv_NOT_VOID_WRAP(...) {}
#define glUniform3f_INDEX 2197
#define glUniform3f_RETURN void
#define glUniform3f_ARG_NAMES location, v0, v1, v2
#define glUniform3f_ARG_EXPAND GLint location, GLfloat v0, GLfloat v1, GLfloat v2
#define glUniform3f_PACKED PACKED_void_GLint_GLfloat_GLfloat_GLfloat
#define glUniform3f_FORMAT FORMAT_void_GLint_GLfloat_GLfloat_GLfloat
#define glUniform3f_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform3f_NOT_VOID_WRAP(...) {}
#define glUniform3fARB_INDEX 2198
#define glUniform3fARB_RETURN void
#define glUniform3fARB_ARG_NAMES location, v0, v1, v2
#define glUniform3fARB_ARG_EXPAND GLint location, GLfloat v0, GLfloat v1, GLfloat v2
#define glUniform3fARB_PACKED PACKED_void_GLint_GLfloat_GLfloat_GLfloat
#define glUniform3fARB_FORMAT FORMAT_void_GLint_GLfloat_GLfloat_GLfloat
#define glUniform3fARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform3fARB_NOT_VOID_WRAP(...) {}
#define glUniform3fv_INDEX 2199
#define glUniform3fv_RETURN void
#define glUniform3fv_ARG_NAMES location, count, value
#define glUniform3fv_ARG_EXPAND GLint location, GLsizei count, const GLfloat * value
#define glUniform3fv_PACKED PACKED_void_GLint_GLsizei_const_GLfloat___GENPT__
#define glUniform3fv_FORMAT FORMAT_void_GLint_GLsizei_const_GLfloat___GENPT__
#define glUniform3fv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform3fv_NOT_VOID_WRAP(...) {}
#define glUniform3fvARB_INDEX 2200
#define glUniform3fvARB_RETURN void
#define glUniform3fvARB_ARG_NAMES location, count, value
#define glUniform3fvARB_ARG_EXPAND GLint location, GLsizei count, const GLfloat * value
#define glUniform3fvARB_PACKED PACKED_void_GLint_GLsizei_const_GLfloat___GENPT__
#define glUniform3fvARB_FORMAT FORMAT_void_GLint_GLsizei_const_GLfloat___GENPT__
#define glUniform3fvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform3fvARB_NOT_VOID_WRAP(...) {}
#define glUniform3i_INDEX 2201
#define glUniform3i_RETURN void
#define glUniform3i_ARG_NAMES location, v0, v1, v2
#define glUniform3i_ARG_EXPAND GLint location, GLint v0, GLint v1, GLint v2
#define glUniform3i_PACKED PACKED_void_GLint_GLint_GLint_GLint
#define glUniform3i_FORMAT FORMAT_void_GLint_GLint_GLint_GLint
#define glUniform3i_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform3i_NOT_VOID_WRAP(...) {}
#define glUniform3i64NV_INDEX 2202
#define glUniform3i64NV_RETURN void
#define glUniform3i64NV_ARG_NAMES location, x, y, z
#define glUniform3i64NV_ARG_EXPAND GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z
#define glUniform3i64NV_PACKED PACKED_void_GLint_GLint64EXT_GLint64EXT_GLint64EXT
#define glUniform3i64NV_FORMAT FORMAT_void_GLint_GLint64EXT_GLint64EXT_GLint64EXT
#define glUniform3i64NV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform3i64NV_NOT_VOID_WRAP(...) {}
#define glUniform3i64vNV_INDEX 2203
#define glUniform3i64vNV_RETURN void
#define glUniform3i64vNV_ARG_NAMES location, count, value
#define glUniform3i64vNV_ARG_EXPAND GLint location, GLsizei count, const GLint64EXT * value
#define glUniform3i64vNV_PACKED PACKED_void_GLint_GLsizei_const_GLint64EXT___GENPT__
#define glUniform3i64vNV_FORMAT FORMAT_void_GLint_GLsizei_const_GLint64EXT___GENPT__
#define glUniform3i64vNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform3i64vNV_NOT_VOID_WRAP(...) {}
#define glUniform3iARB_INDEX 2204
#define glUniform3iARB_RETURN void
#define glUniform3iARB_ARG_NAMES location, v0, v1, v2
#define glUniform3iARB_ARG_EXPAND GLint location, GLint v0, GLint v1, GLint v2
#define glUniform3iARB_PACKED PACKED_void_GLint_GLint_GLint_GLint
#define glUniform3iARB_FORMAT FORMAT_void_GLint_GLint_GLint_GLint
#define glUniform3iARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform3iARB_NOT_VOID_WRAP(...) {}
#define glUniform3iv_INDEX 2205
#define glUniform3iv_RETURN void
#define glUniform3iv_ARG_NAMES location, count, value
#define glUniform3iv_ARG_EXPAND GLint location, GLsizei count, const GLint * value
#define glUniform3iv_PACKED PACKED_void_GLint_GLsizei_const_GLint___GENPT__
#define glUniform3iv_FORMAT FORMAT_void_GLint_GLsizei_const_GLint___GENPT__
#define glUniform3iv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform3iv_NOT_VOID_WRAP(...) {}
#define glUniform3ivARB_INDEX 2206
#define glUniform3ivARB_RETURN void
#define glUniform3ivARB_ARG_NAMES location, count, value
#define glUniform3ivARB_ARG_EXPAND GLint location, GLsizei count, const GLint * value
#define glUniform3ivARB_PACKED PACKED_void_GLint_GLsizei_const_GLint___GENPT__
#define glUniform3ivARB_FORMAT FORMAT_void_GLint_GLsizei_const_GLint___GENPT__
#define glUniform3ivARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform3ivARB_NOT_VOID_WRAP(...) {}
#define glUniform3ui_INDEX 2207
#define glUniform3ui_RETURN void
#define glUniform3ui_ARG_NAMES location, v0, v1, v2
#define glUniform3ui_ARG_EXPAND GLint location, GLuint v0, GLuint v1, GLuint v2
#define glUniform3ui_PACKED PACKED_void_GLint_GLuint_GLuint_GLuint
#define glUniform3ui_FORMAT FORMAT_void_GLint_GLuint_GLuint_GLuint
#define glUniform3ui_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform3ui_NOT_VOID_WRAP(...) {}
#define glUniform3ui64NV_INDEX 2208
#define glUniform3ui64NV_RETURN void
#define glUniform3ui64NV_ARG_NAMES location, x, y, z
#define glUniform3ui64NV_ARG_EXPAND GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z
#define glUniform3ui64NV_PACKED PACKED_void_GLint_GLuint64EXT_GLuint64EXT_GLuint64EXT
#define glUniform3ui64NV_FORMAT FORMAT_void_GLint_GLuint64EXT_GLuint64EXT_GLuint64EXT
#define glUniform3ui64NV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform3ui64NV_NOT_VOID_WRAP(...) {}
#define glUniform3ui64vNV_INDEX 2209
#define glUniform3ui64vNV_RETURN void
#define glUniform3ui64vNV_ARG_NAMES location, count, value
#define glUniform3ui64vNV_ARG_EXPAND GLint location, GLsizei count, const GLuint64EXT * value
#define glUniform3ui64vNV_PACKED PACKED_void_GLint_GLsizei_const_GLuint64EXT___GENPT__
#define glUniform3ui64vNV_FORMAT FORMAT_void_GLint_GLsizei_const_GLuint64EXT___GENPT__
#define glUniform3ui64vNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform3ui64vNV_NOT_VOID_WRAP(...) {}
#define glUniform3uiEXT_INDEX 2210
#define glUniform3uiEXT_RETURN void
#define glUniform3uiEXT_ARG_NAMES location, v0, v1, v2
#define glUniform3uiEXT_ARG_EXPAND GLint location, GLuint v0, GLuint v1, GLuint v2
#define glUniform3uiEXT_PACKED PACKED_void_GLint_GLuint_GLuint_GLuint
#define glUniform3uiEXT_FORMAT FORMAT_void_GLint_GLuint_GLuint_GLuint
#define glUniform3uiEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform3uiEXT_NOT_VOID_WRAP(...) {}
#define glUniform3uiv_INDEX 2211
#define glUniform3uiv_RETURN void
#define glUniform3uiv_ARG_NAMES location, count, value
#define glUniform3uiv_ARG_EXPAND GLint location, GLsizei count, const GLuint * value
#define glUniform3uiv_PACKED PACKED_void_GLint_GLsizei_const_GLuint___GENPT__
#define glUniform3uiv_FORMAT FORMAT_void_GLint_GLsizei_const_GLuint___GENPT__
#define glUniform3uiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform3uiv_NOT_VOID_WRAP(...) {}
#define glUniform3uivEXT_INDEX 2212
#define glUniform3uivEXT_RETURN void
#define glUniform3uivEXT_ARG_NAMES location, count, value
#define glUniform3uivEXT_ARG_EXPAND GLint location, GLsizei count, const GLuint * value
#define glUniform3uivEXT_PACKED PACKED_void_GLint_GLsizei_const_GLuint___GENPT__
#define glUniform3uivEXT_FORMAT FORMAT_void_GLint_GLsizei_const_GLuint___GENPT__
#define glUniform3uivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform3uivEXT_NOT_VOID_WRAP(...) {}
#define glUniform4d_INDEX 2213
#define glUniform4d_RETURN void
#define glUniform4d_ARG_NAMES location, x, y, z, w
#define glUniform4d_ARG_EXPAND GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w
#define glUniform4d_PACKED PACKED_void_GLint_GLdouble_GLdouble_GLdouble_GLdouble
#define glUniform4d_FORMAT FORMAT_void_GLint_GLdouble_GLdouble_GLdouble_GLdouble
#define glUniform4d_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform4d_NOT_VOID_WRAP(...) {}
#define glUniform4dv_INDEX 2214
#define glUniform4dv_RETURN void
#define glUniform4dv_ARG_NAMES location, count, value
#define glUniform4dv_ARG_EXPAND GLint location, GLsizei count, const GLdouble * value
#define glUniform4dv_PACKED PACKED_void_GLint_GLsizei_const_GLdouble___GENPT__
#define glUniform4dv_FORMAT FORMAT_void_GLint_GLsizei_const_GLdouble___GENPT__
#define glUniform4dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform4dv_NOT_VOID_WRAP(...) {}
#define glUniform4f_INDEX 2215
#define glUniform4f_RETURN void
#define glUniform4f_ARG_NAMES location, v0, v1, v2, v3
#define glUniform4f_ARG_EXPAND GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3
#define glUniform4f_PACKED PACKED_void_GLint_GLfloat_GLfloat_GLfloat_GLfloat
#define glUniform4f_FORMAT FORMAT_void_GLint_GLfloat_GLfloat_GLfloat_GLfloat
#define glUniform4f_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform4f_NOT_VOID_WRAP(...) {}
#define glUniform4fARB_INDEX 2216
#define glUniform4fARB_RETURN void
#define glUniform4fARB_ARG_NAMES location, v0, v1, v2, v3
#define glUniform4fARB_ARG_EXPAND GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3
#define glUniform4fARB_PACKED PACKED_void_GLint_GLfloat_GLfloat_GLfloat_GLfloat
#define glUniform4fARB_FORMAT FORMAT_void_GLint_GLfloat_GLfloat_GLfloat_GLfloat
#define glUniform4fARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform4fARB_NOT_VOID_WRAP(...) {}
#define glUniform4fv_INDEX 2217
#define glUniform4fv_RETURN void
#define glUniform4fv_ARG_NAMES location, count, value
#define glUniform4fv_ARG_EXPAND GLint location, GLsizei count, const GLfloat * value
#define glUniform4fv_PACKED PACKED_void_GLint_GLsizei_const_GLfloat___GENPT__
#define glUniform4fv_FORMAT FORMAT_void_GLint_GLsizei_const_GLfloat___GENPT__
#define glUniform4fv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform4fv_NOT_VOID_WRAP(...) {}
#define glUniform4fvARB_INDEX 2218
#define glUniform4fvARB_RETURN void
#define glUniform4fvARB_ARG_NAMES location, count, value
#define glUniform4fvARB_ARG_EXPAND GLint location, GLsizei count, const GLfloat * value
#define glUniform4fvARB_PACKED PACKED_void_GLint_GLsizei_const_GLfloat___GENPT__
#define glUniform4fvARB_FORMAT FORMAT_void_GLint_GLsizei_const_GLfloat___GENPT__
#define glUniform4fvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform4fvARB_NOT_VOID_WRAP(...) {}
#define glUniform4i_INDEX 2219
#define glUniform4i_RETURN void
#define glUniform4i_ARG_NAMES location, v0, v1, v2, v3
#define glUniform4i_ARG_EXPAND GLint location, GLint v0, GLint v1, GLint v2, GLint v3
#define glUniform4i_PACKED PACKED_void_GLint_GLint_GLint_GLint_GLint
#define glUniform4i_FORMAT FORMAT_void_GLint_GLint_GLint_GLint_GLint
#define glUniform4i_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform4i_NOT_VOID_WRAP(...) {}
#define glUniform4i64NV_INDEX 2220
#define glUniform4i64NV_RETURN void
#define glUniform4i64NV_ARG_NAMES location, x, y, z, w
#define glUniform4i64NV_ARG_EXPAND GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w
#define glUniform4i64NV_PACKED PACKED_void_GLint_GLint64EXT_GLint64EXT_GLint64EXT_GLint64EXT
#define glUniform4i64NV_FORMAT FORMAT_void_GLint_GLint64EXT_GLint64EXT_GLint64EXT_GLint64EXT
#define glUniform4i64NV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform4i64NV_NOT_VOID_WRAP(...) {}
#define glUniform4i64vNV_INDEX 2221
#define glUniform4i64vNV_RETURN void
#define glUniform4i64vNV_ARG_NAMES location, count, value
#define glUniform4i64vNV_ARG_EXPAND GLint location, GLsizei count, const GLint64EXT * value
#define glUniform4i64vNV_PACKED PACKED_void_GLint_GLsizei_const_GLint64EXT___GENPT__
#define glUniform4i64vNV_FORMAT FORMAT_void_GLint_GLsizei_const_GLint64EXT___GENPT__
#define glUniform4i64vNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform4i64vNV_NOT_VOID_WRAP(...) {}
#define glUniform4iARB_INDEX 2222
#define glUniform4iARB_RETURN void
#define glUniform4iARB_ARG_NAMES location, v0, v1, v2, v3
#define glUniform4iARB_ARG_EXPAND GLint location, GLint v0, GLint v1, GLint v2, GLint v3
#define glUniform4iARB_PACKED PACKED_void_GLint_GLint_GLint_GLint_GLint
#define glUniform4iARB_FORMAT FORMAT_void_GLint_GLint_GLint_GLint_GLint
#define glUniform4iARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform4iARB_NOT_VOID_WRAP(...) {}
#define glUniform4iv_INDEX 2223
#define glUniform4iv_RETURN void
#define glUniform4iv_ARG_NAMES location, count, value
#define glUniform4iv_ARG_EXPAND GLint location, GLsizei count, const GLint * value
#define glUniform4iv_PACKED PACKED_void_GLint_GLsizei_const_GLint___GENPT__
#define glUniform4iv_FORMAT FORMAT_void_GLint_GLsizei_const_GLint___GENPT__
#define glUniform4iv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform4iv_NOT_VOID_WRAP(...) {}
#define glUniform4ivARB_INDEX 2224
#define glUniform4ivARB_RETURN void
#define glUniform4ivARB_ARG_NAMES location, count, value
#define glUniform4ivARB_ARG_EXPAND GLint location, GLsizei count, const GLint * value
#define glUniform4ivARB_PACKED PACKED_void_GLint_GLsizei_const_GLint___GENPT__
#define glUniform4ivARB_FORMAT FORMAT_void_GLint_GLsizei_const_GLint___GENPT__
#define glUniform4ivARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform4ivARB_NOT_VOID_WRAP(...) {}
#define glUniform4ui_INDEX 2225
#define glUniform4ui_RETURN void
#define glUniform4ui_ARG_NAMES location, v0, v1, v2, v3
#define glUniform4ui_ARG_EXPAND GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3
#define glUniform4ui_PACKED PACKED_void_GLint_GLuint_GLuint_GLuint_GLuint
#define glUniform4ui_FORMAT FORMAT_void_GLint_GLuint_GLuint_GLuint_GLuint
#define glUniform4ui_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform4ui_NOT_VOID_WRAP(...) {}
#define glUniform4ui64NV_INDEX 2226
#define glUniform4ui64NV_RETURN void
#define glUniform4ui64NV_ARG_NAMES location, x, y, z, w
#define glUniform4ui64NV_ARG_EXPAND GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w
#define glUniform4ui64NV_PACKED PACKED_void_GLint_GLuint64EXT_GLuint64EXT_GLuint64EXT_GLuint64EXT
#define glUniform4ui64NV_FORMAT FORMAT_void_GLint_GLuint64EXT_GLuint64EXT_GLuint64EXT_GLuint64EXT
#define glUniform4ui64NV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform4ui64NV_NOT_VOID_WRAP(...) {}
#define glUniform4ui64vNV_INDEX 2227
#define glUniform4ui64vNV_RETURN void
#define glUniform4ui64vNV_ARG_NAMES location, count, value
#define glUniform4ui64vNV_ARG_EXPAND GLint location, GLsizei count, const GLuint64EXT * value
#define glUniform4ui64vNV_PACKED PACKED_void_GLint_GLsizei_const_GLuint64EXT___GENPT__
#define glUniform4ui64vNV_FORMAT FORMAT_void_GLint_GLsizei_const_GLuint64EXT___GENPT__
#define glUniform4ui64vNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform4ui64vNV_NOT_VOID_WRAP(...) {}
#define glUniform4uiEXT_INDEX 2228
#define glUniform4uiEXT_RETURN void
#define glUniform4uiEXT_ARG_NAMES location, v0, v1, v2, v3
#define glUniform4uiEXT_ARG_EXPAND GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3
#define glUniform4uiEXT_PACKED PACKED_void_GLint_GLuint_GLuint_GLuint_GLuint
#define glUniform4uiEXT_FORMAT FORMAT_void_GLint_GLuint_GLuint_GLuint_GLuint
#define glUniform4uiEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform4uiEXT_NOT_VOID_WRAP(...) {}
#define glUniform4uiv_INDEX 2229
#define glUniform4uiv_RETURN void
#define glUniform4uiv_ARG_NAMES location, count, value
#define glUniform4uiv_ARG_EXPAND GLint location, GLsizei count, const GLuint * value
#define glUniform4uiv_PACKED PACKED_void_GLint_GLsizei_const_GLuint___GENPT__
#define glUniform4uiv_FORMAT FORMAT_void_GLint_GLsizei_const_GLuint___GENPT__
#define glUniform4uiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform4uiv_NOT_VOID_WRAP(...) {}
#define glUniform4uivEXT_INDEX 2230
#define glUniform4uivEXT_RETURN void
#define glUniform4uivEXT_ARG_NAMES location, count, value
#define glUniform4uivEXT_ARG_EXPAND GLint location, GLsizei count, const GLuint * value
#define glUniform4uivEXT_PACKED PACKED_void_GLint_GLsizei_const_GLuint___GENPT__
#define glUniform4uivEXT_FORMAT FORMAT_void_GLint_GLsizei_const_GLuint___GENPT__
#define glUniform4uivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniform4uivEXT_NOT_VOID_WRAP(...) {}
#define glUniformBlockBinding_INDEX 2231
#define glUniformBlockBinding_RETURN void
#define glUniformBlockBinding_ARG_NAMES program, uniformBlockIndex, uniformBlockBinding
#define glUniformBlockBinding_ARG_EXPAND GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding
#define glUniformBlockBinding_PACKED PACKED_void_GLuint_GLuint_GLuint
#define glUniformBlockBinding_FORMAT FORMAT_void_GLuint_GLuint_GLuint
#define glUniformBlockBinding_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniformBlockBinding_NOT_VOID_WRAP(...) {}
#define glUniformBufferEXT_INDEX 2232
#define glUniformBufferEXT_RETURN void
#define glUniformBufferEXT_ARG_NAMES program, location, buffer
#define glUniformBufferEXT_ARG_EXPAND GLuint program, GLint location, GLuint buffer
#define glUniformBufferEXT_PACKED PACKED_void_GLuint_GLint_GLuint
#define glUniformBufferEXT_FORMAT FORMAT_void_GLuint_GLint_GLuint
#define glUniformBufferEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniformBufferEXT_NOT_VOID_WRAP(...) {}
#define glUniformHandleui64NV_INDEX 2233
#define glUniformHandleui64NV_RETURN void
#define glUniformHandleui64NV_ARG_NAMES location, value
#define glUniformHandleui64NV_ARG_EXPAND GLint location, GLuint64 value
#define glUniformHandleui64NV_PACKED PACKED_void_GLint_GLuint64
#define glUniformHandleui64NV_FORMAT FORMAT_void_GLint_GLuint64
#define glUniformHandleui64NV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniformHandleui64NV_NOT_VOID_WRAP(...) {}
#define glUniformHandleui64vNV_INDEX 2234
#define glUniformHandleui64vNV_RETURN void
#define glUniformHandleui64vNV_ARG_NAMES location, count, value
#define glUniformHandleui64vNV_ARG_EXPAND GLint location, GLsizei count, const GLuint64 * value
#define glUniformHandleui64vNV_PACKED PACKED_void_GLint_GLsizei_const_GLuint64___GENPT__
#define glUniformHandleui64vNV_FORMAT FORMAT_void_GLint_GLsizei_const_GLuint64___GENPT__
#define glUniformHandleui64vNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniformHandleui64vNV_NOT_VOID_WRAP(...) {}
#define glUniformMatrix2dv_INDEX 2235
#define glUniformMatrix2dv_RETURN void
#define glUniformMatrix2dv_ARG_NAMES location, count, transpose, value
#define glUniformMatrix2dv_ARG_EXPAND GLint location, GLsizei count, GLboolean transpose, const GLdouble * value
#define glUniformMatrix2dv_PACKED PACKED_void_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__
#define glUniformMatrix2dv_FORMAT FORMAT_void_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__
#define glUniformMatrix2dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniformMatrix2dv_NOT_VOID_WRAP(...) {}
#define glUniformMatrix2fv_INDEX 2236
#define glUniformMatrix2fv_RETURN void
#define glUniformMatrix2fv_ARG_NAMES location, count, transpose, value
#define glUniformMatrix2fv_ARG_EXPAND GLint location, GLsizei count, GLboolean transpose, const GLfloat * value
#define glUniformMatrix2fv_PACKED PACKED_void_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glUniformMatrix2fv_FORMAT FORMAT_void_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glUniformMatrix2fv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniformMatrix2fv_NOT_VOID_WRAP(...) {}
#define glUniformMatrix2fvARB_INDEX 2237
#define glUniformMatrix2fvARB_RETURN void
#define glUniformMatrix2fvARB_ARG_NAMES location, count, transpose, value
#define glUniformMatrix2fvARB_ARG_EXPAND GLint location, GLsizei count, GLboolean transpose, const GLfloat * value
#define glUniformMatrix2fvARB_PACKED PACKED_void_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glUniformMatrix2fvARB_FORMAT FORMAT_void_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glUniformMatrix2fvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniformMatrix2fvARB_NOT_VOID_WRAP(...) {}
#define glUniformMatrix2x3dv_INDEX 2238
#define glUniformMatrix2x3dv_RETURN void
#define glUniformMatrix2x3dv_ARG_NAMES location, count, transpose, value
#define glUniformMatrix2x3dv_ARG_EXPAND GLint location, GLsizei count, GLboolean transpose, const GLdouble * value
#define glUniformMatrix2x3dv_PACKED PACKED_void_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__
#define glUniformMatrix2x3dv_FORMAT FORMAT_void_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__
#define glUniformMatrix2x3dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniformMatrix2x3dv_NOT_VOID_WRAP(...) {}
#define glUniformMatrix2x3fv_INDEX 2239
#define glUniformMatrix2x3fv_RETURN void
#define glUniformMatrix2x3fv_ARG_NAMES location, count, transpose, value
#define glUniformMatrix2x3fv_ARG_EXPAND GLint location, GLsizei count, GLboolean transpose, const GLfloat * value
#define glUniformMatrix2x3fv_PACKED PACKED_void_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glUniformMatrix2x3fv_FORMAT FORMAT_void_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glUniformMatrix2x3fv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniformMatrix2x3fv_NOT_VOID_WRAP(...) {}
#define glUniformMatrix2x4dv_INDEX 2240
#define glUniformMatrix2x4dv_RETURN void
#define glUniformMatrix2x4dv_ARG_NAMES location, count, transpose, value
#define glUniformMatrix2x4dv_ARG_EXPAND GLint location, GLsizei count, GLboolean transpose, const GLdouble * value
#define glUniformMatrix2x4dv_PACKED PACKED_void_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__
#define glUniformMatrix2x4dv_FORMAT FORMAT_void_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__
#define glUniformMatrix2x4dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniformMatrix2x4dv_NOT_VOID_WRAP(...) {}
#define glUniformMatrix2x4fv_INDEX 2241
#define glUniformMatrix2x4fv_RETURN void
#define glUniformMatrix2x4fv_ARG_NAMES location, count, transpose, value
#define glUniformMatrix2x4fv_ARG_EXPAND GLint location, GLsizei count, GLboolean transpose, const GLfloat * value
#define glUniformMatrix2x4fv_PACKED PACKED_void_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glUniformMatrix2x4fv_FORMAT FORMAT_void_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glUniformMatrix2x4fv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniformMatrix2x4fv_NOT_VOID_WRAP(...) {}
#define glUniformMatrix3dv_INDEX 2242
#define glUniformMatrix3dv_RETURN void
#define glUniformMatrix3dv_ARG_NAMES location, count, transpose, value
#define glUniformMatrix3dv_ARG_EXPAND GLint location, GLsizei count, GLboolean transpose, const GLdouble * value
#define glUniformMatrix3dv_PACKED PACKED_void_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__
#define glUniformMatrix3dv_FORMAT FORMAT_void_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__
#define glUniformMatrix3dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniformMatrix3dv_NOT_VOID_WRAP(...) {}
#define glUniformMatrix3fv_INDEX 2243
#define glUniformMatrix3fv_RETURN void
#define glUniformMatrix3fv_ARG_NAMES location, count, transpose, value
#define glUniformMatrix3fv_ARG_EXPAND GLint location, GLsizei count, GLboolean transpose, const GLfloat * value
#define glUniformMatrix3fv_PACKED PACKED_void_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glUniformMatrix3fv_FORMAT FORMAT_void_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glUniformMatrix3fv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniformMatrix3fv_NOT_VOID_WRAP(...) {}
#define glUniformMatrix3fvARB_INDEX 2244
#define glUniformMatrix3fvARB_RETURN void
#define glUniformMatrix3fvARB_ARG_NAMES location, count, transpose, value
#define glUniformMatrix3fvARB_ARG_EXPAND GLint location, GLsizei count, GLboolean transpose, const GLfloat * value
#define glUniformMatrix3fvARB_PACKED PACKED_void_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glUniformMatrix3fvARB_FORMAT FORMAT_void_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glUniformMatrix3fvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniformMatrix3fvARB_NOT_VOID_WRAP(...) {}
#define glUniformMatrix3x2dv_INDEX 2245
#define glUniformMatrix3x2dv_RETURN void
#define glUniformMatrix3x2dv_ARG_NAMES location, count, transpose, value
#define glUniformMatrix3x2dv_ARG_EXPAND GLint location, GLsizei count, GLboolean transpose, const GLdouble * value
#define glUniformMatrix3x2dv_PACKED PACKED_void_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__
#define glUniformMatrix3x2dv_FORMAT FORMAT_void_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__
#define glUniformMatrix3x2dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniformMatrix3x2dv_NOT_VOID_WRAP(...) {}
#define glUniformMatrix3x2fv_INDEX 2246
#define glUniformMatrix3x2fv_RETURN void
#define glUniformMatrix3x2fv_ARG_NAMES location, count, transpose, value
#define glUniformMatrix3x2fv_ARG_EXPAND GLint location, GLsizei count, GLboolean transpose, const GLfloat * value
#define glUniformMatrix3x2fv_PACKED PACKED_void_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glUniformMatrix3x2fv_FORMAT FORMAT_void_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glUniformMatrix3x2fv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniformMatrix3x2fv_NOT_VOID_WRAP(...) {}
#define glUniformMatrix3x4dv_INDEX 2247
#define glUniformMatrix3x4dv_RETURN void
#define glUniformMatrix3x4dv_ARG_NAMES location, count, transpose, value
#define glUniformMatrix3x4dv_ARG_EXPAND GLint location, GLsizei count, GLboolean transpose, const GLdouble * value
#define glUniformMatrix3x4dv_PACKED PACKED_void_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__
#define glUniformMatrix3x4dv_FORMAT FORMAT_void_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__
#define glUniformMatrix3x4dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniformMatrix3x4dv_NOT_VOID_WRAP(...) {}
#define glUniformMatrix3x4fv_INDEX 2248
#define glUniformMatrix3x4fv_RETURN void
#define glUniformMatrix3x4fv_ARG_NAMES location, count, transpose, value
#define glUniformMatrix3x4fv_ARG_EXPAND GLint location, GLsizei count, GLboolean transpose, const GLfloat * value
#define glUniformMatrix3x4fv_PACKED PACKED_void_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glUniformMatrix3x4fv_FORMAT FORMAT_void_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glUniformMatrix3x4fv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniformMatrix3x4fv_NOT_VOID_WRAP(...) {}
#define glUniformMatrix4dv_INDEX 2249
#define glUniformMatrix4dv_RETURN void
#define glUniformMatrix4dv_ARG_NAMES location, count, transpose, value
#define glUniformMatrix4dv_ARG_EXPAND GLint location, GLsizei count, GLboolean transpose, const GLdouble * value
#define glUniformMatrix4dv_PACKED PACKED_void_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__
#define glUniformMatrix4dv_FORMAT FORMAT_void_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__
#define glUniformMatrix4dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniformMatrix4dv_NOT_VOID_WRAP(...) {}
#define glUniformMatrix4fv_INDEX 2250
#define glUniformMatrix4fv_RETURN void
#define glUniformMatrix4fv_ARG_NAMES location, count, transpose, value
#define glUniformMatrix4fv_ARG_EXPAND GLint location, GLsizei count, GLboolean transpose, const GLfloat * value
#define glUniformMatrix4fv_PACKED PACKED_void_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glUniformMatrix4fv_FORMAT FORMAT_void_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glUniformMatrix4fv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniformMatrix4fv_NOT_VOID_WRAP(...) {}
#define glUniformMatrix4fvARB_INDEX 2251
#define glUniformMatrix4fvARB_RETURN void
#define glUniformMatrix4fvARB_ARG_NAMES location, count, transpose, value
#define glUniformMatrix4fvARB_ARG_EXPAND GLint location, GLsizei count, GLboolean transpose, const GLfloat * value
#define glUniformMatrix4fvARB_PACKED PACKED_void_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glUniformMatrix4fvARB_FORMAT FORMAT_void_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glUniformMatrix4fvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniformMatrix4fvARB_NOT_VOID_WRAP(...) {}
#define glUniformMatrix4x2dv_INDEX 2252
#define glUniformMatrix4x2dv_RETURN void
#define glUniformMatrix4x2dv_ARG_NAMES location, count, transpose, value
#define glUniformMatrix4x2dv_ARG_EXPAND GLint location, GLsizei count, GLboolean transpose, const GLdouble * value
#define glUniformMatrix4x2dv_PACKED PACKED_void_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__
#define glUniformMatrix4x2dv_FORMAT FORMAT_void_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__
#define glUniformMatrix4x2dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniformMatrix4x2dv_NOT_VOID_WRAP(...) {}
#define glUniformMatrix4x2fv_INDEX 2253
#define glUniformMatrix4x2fv_RETURN void
#define glUniformMatrix4x2fv_ARG_NAMES location, count, transpose, value
#define glUniformMatrix4x2fv_ARG_EXPAND GLint location, GLsizei count, GLboolean transpose, const GLfloat * value
#define glUniformMatrix4x2fv_PACKED PACKED_void_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glUniformMatrix4x2fv_FORMAT FORMAT_void_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glUniformMatrix4x2fv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniformMatrix4x2fv_NOT_VOID_WRAP(...) {}
#define glUniformMatrix4x3dv_INDEX 2254
#define glUniformMatrix4x3dv_RETURN void
#define glUniformMatrix4x3dv_ARG_NAMES location, count, transpose, value
#define glUniformMatrix4x3dv_ARG_EXPAND GLint location, GLsizei count, GLboolean transpose, const GLdouble * value
#define glUniformMatrix4x3dv_PACKED PACKED_void_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__
#define glUniformMatrix4x3dv_FORMAT FORMAT_void_GLint_GLsizei_GLboolean_const_GLdouble___GENPT__
#define glUniformMatrix4x3dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniformMatrix4x3dv_NOT_VOID_WRAP(...) {}
#define glUniformMatrix4x3fv_INDEX 2255
#define glUniformMatrix4x3fv_RETURN void
#define glUniformMatrix4x3fv_ARG_NAMES location, count, transpose, value
#define glUniformMatrix4x3fv_ARG_EXPAND GLint location, GLsizei count, GLboolean transpose, const GLfloat * value
#define glUniformMatrix4x3fv_PACKED PACKED_void_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glUniformMatrix4x3fv_FORMAT FORMAT_void_GLint_GLsizei_GLboolean_const_GLfloat___GENPT__
#define glUniformMatrix4x3fv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniformMatrix4x3fv_NOT_VOID_WRAP(...) {}
#define glUniformSubroutinesuiv_INDEX 2256
#define glUniformSubroutinesuiv_RETURN void
#define glUniformSubroutinesuiv_ARG_NAMES shadertype, count, indices
#define glUniformSubroutinesuiv_ARG_EXPAND GLenum shadertype, GLsizei count, const GLuint * indices
#define glUniformSubroutinesuiv_PACKED PACKED_void_GLenum_GLsizei_const_GLuint___GENPT__
#define glUniformSubroutinesuiv_FORMAT FORMAT_void_GLenum_GLsizei_const_GLuint___GENPT__
#define glUniformSubroutinesuiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniformSubroutinesuiv_NOT_VOID_WRAP(...) {}
#define glUniformui64NV_INDEX 2257
#define glUniformui64NV_RETURN void
#define glUniformui64NV_ARG_NAMES location, value
#define glUniformui64NV_ARG_EXPAND GLint location, GLuint64EXT value
#define glUniformui64NV_PACKED PACKED_void_GLint_GLuint64EXT
#define glUniformui64NV_FORMAT FORMAT_void_GLint_GLuint64EXT
#define glUniformui64NV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniformui64NV_NOT_VOID_WRAP(...) {}
#define glUniformui64vNV_INDEX 2258
#define glUniformui64vNV_RETURN void
#define glUniformui64vNV_ARG_NAMES location, count, value
#define glUniformui64vNV_ARG_EXPAND GLint location, GLsizei count, const GLuint64EXT * value
#define glUniformui64vNV_PACKED PACKED_void_GLint_GLsizei_const_GLuint64EXT___GENPT__
#define glUniformui64vNV_FORMAT FORMAT_void_GLint_GLsizei_const_GLuint64EXT___GENPT__
#define glUniformui64vNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUniformui64vNV_NOT_VOID_WRAP(...) {}
#define glUnlockArraysEXT_INDEX 2259
#define glUnlockArraysEXT_RETURN void
#define glUnlockArraysEXT_ARG_NAMES 
#define glUnlockArraysEXT_ARG_EXPAND 
#define glUnlockArraysEXT_PACKED PACKED_void
#define glUnlockArraysEXT_FORMAT FORMAT_void
#define glUnlockArraysEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUnlockArraysEXT_NOT_VOID_WRAP(...) {}
#define glUnmapBuffer_INDEX 2260
#define glUnmapBuffer_RETURN GLboolean
#define glUnmapBuffer_ARG_NAMES target
#define glUnmapBuffer_ARG_EXPAND GLenum target
#define glUnmapBuffer_PACKED PACKED_GLboolean_GLenum
#define glUnmapBuffer_FORMAT FORMAT_GLboolean_GLenum
#define glUnmapBuffer_VOID_ONLY_WRAP(...) {}
#define glUnmapBuffer_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glUnmapBufferARB_INDEX 2261
#define glUnmapBufferARB_RETURN GLboolean
#define glUnmapBufferARB_ARG_NAMES target
#define glUnmapBufferARB_ARG_EXPAND GLenum target
#define glUnmapBufferARB_PACKED PACKED_GLboolean_GLenum
#define glUnmapBufferARB_FORMAT FORMAT_GLboolean_GLenum
#define glUnmapBufferARB_VOID_ONLY_WRAP(...) {}
#define glUnmapBufferARB_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glUnmapNamedBufferEXT_INDEX 2262
#define glUnmapNamedBufferEXT_RETURN GLboolean
#define glUnmapNamedBufferEXT_ARG_NAMES buffer
#define glUnmapNamedBufferEXT_ARG_EXPAND GLuint buffer
#define glUnmapNamedBufferEXT_PACKED PACKED_GLboolean_GLuint
#define glUnmapNamedBufferEXT_FORMAT FORMAT_GLboolean_GLuint
#define glUnmapNamedBufferEXT_VOID_ONLY_WRAP(...) {}
#define glUnmapNamedBufferEXT_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glUnmapObjectBufferATI_INDEX 2263
#define glUnmapObjectBufferATI_RETURN void
#define glUnmapObjectBufferATI_ARG_NAMES buffer
#define glUnmapObjectBufferATI_ARG_EXPAND GLuint buffer
#define glUnmapObjectBufferATI_PACKED PACKED_void_GLuint
#define glUnmapObjectBufferATI_FORMAT FORMAT_void_GLuint
#define glUnmapObjectBufferATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUnmapObjectBufferATI_NOT_VOID_WRAP(...) {}
#define glUnmapTexture2DINTEL_INDEX 2264
#define glUnmapTexture2DINTEL_RETURN void
#define glUnmapTexture2DINTEL_ARG_NAMES texture, level
#define glUnmapTexture2DINTEL_ARG_EXPAND GLuint texture, GLint level
#define glUnmapTexture2DINTEL_PACKED PACKED_void_GLuint_GLint
#define glUnmapTexture2DINTEL_FORMAT FORMAT_void_GLuint_GLint
#define glUnmapTexture2DINTEL_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUnmapTexture2DINTEL_NOT_VOID_WRAP(...) {}
#define glUpdateObjectBufferATI_INDEX 2265
#define glUpdateObjectBufferATI_RETURN void
#define glUpdateObjectBufferATI_ARG_NAMES buffer, offset, size, pointer, preserve
#define glUpdateObjectBufferATI_ARG_EXPAND GLuint buffer, GLuint offset, GLsizei size, const GLvoid * pointer, GLenum preserve
#define glUpdateObjectBufferATI_PACKED PACKED_void_GLuint_GLuint_GLsizei_const_GLvoid___GENPT___GLenum
#define glUpdateObjectBufferATI_FORMAT FORMAT_void_GLuint_GLuint_GLsizei_const_GLvoid___GENPT___GLenum
#define glUpdateObjectBufferATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUpdateObjectBufferATI_NOT_VOID_WRAP(...) {}
#define glUseProgram_INDEX 2266
#define glUseProgram_RETURN void
#define glUseProgram_ARG_NAMES program
#define glUseProgram_ARG_EXPAND GLuint program
#define glUseProgram_PACKED PACKED_void_GLuint
#define glUseProgram_FORMAT FORMAT_void_GLuint
#define glUseProgram_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUseProgram_NOT_VOID_WRAP(...) {}
#define glUseProgramObjectARB_INDEX 2267
#define glUseProgramObjectARB_RETURN void
#define glUseProgramObjectARB_ARG_NAMES programObj
#define glUseProgramObjectARB_ARG_EXPAND GLhandleARB programObj
#define glUseProgramObjectARB_PACKED PACKED_void_GLhandleARB
#define glUseProgramObjectARB_FORMAT FORMAT_void_GLhandleARB
#define glUseProgramObjectARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUseProgramObjectARB_NOT_VOID_WRAP(...) {}
#define glUseProgramStages_INDEX 2268
#define glUseProgramStages_RETURN void
#define glUseProgramStages_ARG_NAMES pipeline, stages, program
#define glUseProgramStages_ARG_EXPAND GLuint pipeline, GLbitfield stages, GLuint program
#define glUseProgramStages_PACKED PACKED_void_GLuint_GLbitfield_GLuint
#define glUseProgramStages_FORMAT FORMAT_void_GLuint_GLbitfield_GLuint
#define glUseProgramStages_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUseProgramStages_NOT_VOID_WRAP(...) {}
#define glUseShaderProgramEXT_INDEX 2269
#define glUseShaderProgramEXT_RETURN void
#define glUseShaderProgramEXT_ARG_NAMES type, program
#define glUseShaderProgramEXT_ARG_EXPAND GLenum type, GLuint program
#define glUseShaderProgramEXT_PACKED PACKED_void_GLenum_GLuint
#define glUseShaderProgramEXT_FORMAT FORMAT_void_GLenum_GLuint
#define glUseShaderProgramEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glUseShaderProgramEXT_NOT_VOID_WRAP(...) {}
#define glVDPAUFiniNV_INDEX 2270
#define glVDPAUFiniNV_RETURN void
#define glVDPAUFiniNV_ARG_NAMES 
#define glVDPAUFiniNV_ARG_EXPAND 
#define glVDPAUFiniNV_PACKED PACKED_void
#define glVDPAUFiniNV_FORMAT FORMAT_void
#define glVDPAUFiniNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVDPAUFiniNV_NOT_VOID_WRAP(...) {}
#define glVDPAUGetSurfaceivNV_INDEX 2271
#define glVDPAUGetSurfaceivNV_RETURN void
#define glVDPAUGetSurfaceivNV_ARG_NAMES surface, pname, bufSize, length, values
#define glVDPAUGetSurfaceivNV_ARG_EXPAND GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei * length, GLint * values
#define glVDPAUGetSurfaceivNV_PACKED PACKED_void_GLvdpauSurfaceNV_GLenum_GLsizei_GLsizei___GENPT___GLint___GENPT__
#define glVDPAUGetSurfaceivNV_FORMAT FORMAT_void_GLvdpauSurfaceNV_GLenum_GLsizei_GLsizei___GENPT___GLint___GENPT__
#define glVDPAUGetSurfaceivNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVDPAUGetSurfaceivNV_NOT_VOID_WRAP(...) {}
#define glVDPAUInitNV_INDEX 2272
#define glVDPAUInitNV_RETURN void
#define glVDPAUInitNV_ARG_NAMES vdpDevice, getProcAddress
#define glVDPAUInitNV_ARG_EXPAND const GLvoid * vdpDevice, const GLvoid * getProcAddress
#define glVDPAUInitNV_PACKED PACKED_void_const_GLvoid___GENPT___const_GLvoid___GENPT__
#define glVDPAUInitNV_FORMAT FORMAT_void_const_GLvoid___GENPT___const_GLvoid___GENPT__
#define glVDPAUInitNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVDPAUInitNV_NOT_VOID_WRAP(...) {}
#define glVDPAUIsSurfaceNV_INDEX 2273
#define glVDPAUIsSurfaceNV_RETURN void
#define glVDPAUIsSurfaceNV_ARG_NAMES surface
#define glVDPAUIsSurfaceNV_ARG_EXPAND GLvdpauSurfaceNV surface
#define glVDPAUIsSurfaceNV_PACKED PACKED_void_GLvdpauSurfaceNV
#define glVDPAUIsSurfaceNV_FORMAT FORMAT_void_GLvdpauSurfaceNV
#define glVDPAUIsSurfaceNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVDPAUIsSurfaceNV_NOT_VOID_WRAP(...) {}
#define glVDPAUMapSurfacesNV_INDEX 2274
#define glVDPAUMapSurfacesNV_RETURN void
#define glVDPAUMapSurfacesNV_ARG_NAMES numSurfaces, surfaces
#define glVDPAUMapSurfacesNV_ARG_EXPAND GLsizei numSurfaces, const GLvdpauSurfaceNV * surfaces
#define glVDPAUMapSurfacesNV_PACKED PACKED_void_GLsizei_const_GLvdpauSurfaceNV___GENPT__
#define glVDPAUMapSurfacesNV_FORMAT FORMAT_void_GLsizei_const_GLvdpauSurfaceNV___GENPT__
#define glVDPAUMapSurfacesNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVDPAUMapSurfacesNV_NOT_VOID_WRAP(...) {}
#define glVDPAURegisterOutputSurfaceNV_INDEX 2275
#define glVDPAURegisterOutputSurfaceNV_RETURN GLvdpauSurfaceNV
#define glVDPAURegisterOutputSurfaceNV_ARG_NAMES vdpSurface, target, numTextureNames, textureNames
#define glVDPAURegisterOutputSurfaceNV_ARG_EXPAND GLvoid * vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint * textureNames
#define glVDPAURegisterOutputSurfaceNV_PACKED PACKED_GLvdpauSurfaceNV_GLvoid___GENPT___GLenum_GLsizei_const_GLuint___GENPT__
#define glVDPAURegisterOutputSurfaceNV_FORMAT FORMAT_GLvdpauSurfaceNV_GLvoid___GENPT___GLenum_GLsizei_const_GLuint___GENPT__
#define glVDPAURegisterOutputSurfaceNV_VOID_ONLY_WRAP(...) {}
#define glVDPAURegisterOutputSurfaceNV_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glVDPAURegisterVideoSurfaceNV_INDEX 2276
#define glVDPAURegisterVideoSurfaceNV_RETURN GLvdpauSurfaceNV
#define glVDPAURegisterVideoSurfaceNV_ARG_NAMES vdpSurface, target, numTextureNames, textureNames
#define glVDPAURegisterVideoSurfaceNV_ARG_EXPAND const GLvoid * vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint * textureNames
#define glVDPAURegisterVideoSurfaceNV_PACKED PACKED_GLvdpauSurfaceNV_const_GLvoid___GENPT___GLenum_GLsizei_const_GLuint___GENPT__
#define glVDPAURegisterVideoSurfaceNV_FORMAT FORMAT_GLvdpauSurfaceNV_const_GLvoid___GENPT___GLenum_GLsizei_const_GLuint___GENPT__
#define glVDPAURegisterVideoSurfaceNV_VOID_ONLY_WRAP(...) {}
#define glVDPAURegisterVideoSurfaceNV_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glVDPAUSurfaceAccessNV_INDEX 2277
#define glVDPAUSurfaceAccessNV_RETURN void
#define glVDPAUSurfaceAccessNV_ARG_NAMES surface, access
#define glVDPAUSurfaceAccessNV_ARG_EXPAND GLvdpauSurfaceNV surface, GLenum access
#define glVDPAUSurfaceAccessNV_PACKED PACKED_void_GLvdpauSurfaceNV_GLenum
#define glVDPAUSurfaceAccessNV_FORMAT FORMAT_void_GLvdpauSurfaceNV_GLenum
#define glVDPAUSurfaceAccessNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVDPAUSurfaceAccessNV_NOT_VOID_WRAP(...) {}
#define glVDPAUUnmapSurfacesNV_INDEX 2278
#define glVDPAUUnmapSurfacesNV_RETURN void
#define glVDPAUUnmapSurfacesNV_ARG_NAMES numSurface, surfaces
#define glVDPAUUnmapSurfacesNV_ARG_EXPAND GLsizei numSurface, const GLvdpauSurfaceNV * surfaces
#define glVDPAUUnmapSurfacesNV_PACKED PACKED_void_GLsizei_const_GLvdpauSurfaceNV___GENPT__
#define glVDPAUUnmapSurfacesNV_FORMAT FORMAT_void_GLsizei_const_GLvdpauSurfaceNV___GENPT__
#define glVDPAUUnmapSurfacesNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVDPAUUnmapSurfacesNV_NOT_VOID_WRAP(...) {}
#define glVDPAUUnregisterSurfaceNV_INDEX 2279
#define glVDPAUUnregisterSurfaceNV_RETURN void
#define glVDPAUUnregisterSurfaceNV_ARG_NAMES surface
#define glVDPAUUnregisterSurfaceNV_ARG_EXPAND GLvdpauSurfaceNV surface
#define glVDPAUUnregisterSurfaceNV_PACKED PACKED_void_GLvdpauSurfaceNV
#define glVDPAUUnregisterSurfaceNV_FORMAT FORMAT_void_GLvdpauSurfaceNV
#define glVDPAUUnregisterSurfaceNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVDPAUUnregisterSurfaceNV_NOT_VOID_WRAP(...) {}
#define glValidateProgram_INDEX 2280
#define glValidateProgram_RETURN void
#define glValidateProgram_ARG_NAMES program
#define glValidateProgram_ARG_EXPAND GLuint program
#define glValidateProgram_PACKED PACKED_void_GLuint
#define glValidateProgram_FORMAT FORMAT_void_GLuint
#define glValidateProgram_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glValidateProgram_NOT_VOID_WRAP(...) {}
#define glValidateProgramARB_INDEX 2281
#define glValidateProgramARB_RETURN void
#define glValidateProgramARB_ARG_NAMES programObj
#define glValidateProgramARB_ARG_EXPAND GLhandleARB programObj
#define glValidateProgramARB_PACKED PACKED_void_GLhandleARB
#define glValidateProgramARB_FORMAT FORMAT_void_GLhandleARB
#define glValidateProgramARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glValidateProgramARB_NOT_VOID_WRAP(...) {}
#define glValidateProgramPipeline_INDEX 2282
#define glValidateProgramPipeline_RETURN void
#define glValidateProgramPipeline_ARG_NAMES pipeline
#define glValidateProgramPipeline_ARG_EXPAND GLuint pipeline
#define glValidateProgramPipeline_PACKED PACKED_void_GLuint
#define glValidateProgramPipeline_FORMAT FORMAT_void_GLuint
#define glValidateProgramPipeline_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glValidateProgramPipeline_NOT_VOID_WRAP(...) {}
#define glVariantArrayObjectATI_INDEX 2283
#define glVariantArrayObjectATI_RETURN void
#define glVariantArrayObjectATI_ARG_NAMES id, type, stride, buffer, offset
#define glVariantArrayObjectATI_ARG_EXPAND GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset
#define glVariantArrayObjectATI_PACKED PACKED_void_GLuint_GLenum_GLsizei_GLuint_GLuint
#define glVariantArrayObjectATI_FORMAT FORMAT_void_GLuint_GLenum_GLsizei_GLuint_GLuint
#define glVariantArrayObjectATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVariantArrayObjectATI_NOT_VOID_WRAP(...) {}
#define glVariantPointerEXT_INDEX 2284
#define glVariantPointerEXT_RETURN void
#define glVariantPointerEXT_ARG_NAMES id, type, stride, addr
#define glVariantPointerEXT_ARG_EXPAND GLuint id, GLenum type, GLuint stride, const GLvoid * addr
#define glVariantPointerEXT_PACKED PACKED_void_GLuint_GLenum_GLuint_const_GLvoid___GENPT__
#define glVariantPointerEXT_FORMAT FORMAT_void_GLuint_GLenum_GLuint_const_GLvoid___GENPT__
#define glVariantPointerEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVariantPointerEXT_NOT_VOID_WRAP(...) {}
#define glVariantbvEXT_INDEX 2285
#define glVariantbvEXT_RETURN void
#define glVariantbvEXT_ARG_NAMES id, addr
#define glVariantbvEXT_ARG_EXPAND GLuint id, const GLbyte * addr
#define glVariantbvEXT_PACKED PACKED_void_GLuint_const_GLbyte___GENPT__
#define glVariantbvEXT_FORMAT FORMAT_void_GLuint_const_GLbyte___GENPT__
#define glVariantbvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVariantbvEXT_NOT_VOID_WRAP(...) {}
#define glVariantdvEXT_INDEX 2286
#define glVariantdvEXT_RETURN void
#define glVariantdvEXT_ARG_NAMES id, addr
#define glVariantdvEXT_ARG_EXPAND GLuint id, const GLdouble * addr
#define glVariantdvEXT_PACKED PACKED_void_GLuint_const_GLdouble___GENPT__
#define glVariantdvEXT_FORMAT FORMAT_void_GLuint_const_GLdouble___GENPT__
#define glVariantdvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVariantdvEXT_NOT_VOID_WRAP(...) {}
#define glVariantfvEXT_INDEX 2287
#define glVariantfvEXT_RETURN void
#define glVariantfvEXT_ARG_NAMES id, addr
#define glVariantfvEXT_ARG_EXPAND GLuint id, const GLfloat * addr
#define glVariantfvEXT_PACKED PACKED_void_GLuint_const_GLfloat___GENPT__
#define glVariantfvEXT_FORMAT FORMAT_void_GLuint_const_GLfloat___GENPT__
#define glVariantfvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVariantfvEXT_NOT_VOID_WRAP(...) {}
#define glVariantivEXT_INDEX 2288
#define glVariantivEXT_RETURN void
#define glVariantivEXT_ARG_NAMES id, addr
#define glVariantivEXT_ARG_EXPAND GLuint id, const GLint * addr
#define glVariantivEXT_PACKED PACKED_void_GLuint_const_GLint___GENPT__
#define glVariantivEXT_FORMAT FORMAT_void_GLuint_const_GLint___GENPT__
#define glVariantivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVariantivEXT_NOT_VOID_WRAP(...) {}
#define glVariantsvEXT_INDEX 2289
#define glVariantsvEXT_RETURN void
#define glVariantsvEXT_ARG_NAMES id, addr
#define glVariantsvEXT_ARG_EXPAND GLuint id, const GLshort * addr
#define glVariantsvEXT_PACKED PACKED_void_GLuint_const_GLshort___GENPT__
#define glVariantsvEXT_FORMAT FORMAT_void_GLuint_const_GLshort___GENPT__
#define glVariantsvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVariantsvEXT_NOT_VOID_WRAP(...) {}
#define glVariantubvEXT_INDEX 2290
#define glVariantubvEXT_RETURN void
#define glVariantubvEXT_ARG_NAMES id, addr
#define glVariantubvEXT_ARG_EXPAND GLuint id, const GLubyte * addr
#define glVariantubvEXT_PACKED PACKED_void_GLuint_const_GLubyte___GENPT__
#define glVariantubvEXT_FORMAT FORMAT_void_GLuint_const_GLubyte___GENPT__
#define glVariantubvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVariantubvEXT_NOT_VOID_WRAP(...) {}
#define glVariantuivEXT_INDEX 2291
#define glVariantuivEXT_RETURN void
#define glVariantuivEXT_ARG_NAMES id, addr
#define glVariantuivEXT_ARG_EXPAND GLuint id, const GLuint * addr
#define glVariantuivEXT_PACKED PACKED_void_GLuint_const_GLuint___GENPT__
#define glVariantuivEXT_FORMAT FORMAT_void_GLuint_const_GLuint___GENPT__
#define glVariantuivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVariantuivEXT_NOT_VOID_WRAP(...) {}
#define glVariantusvEXT_INDEX 2292
#define glVariantusvEXT_RETURN void
#define glVariantusvEXT_ARG_NAMES id, addr
#define glVariantusvEXT_ARG_EXPAND GLuint id, const GLushort * addr
#define glVariantusvEXT_PACKED PACKED_void_GLuint_const_GLushort___GENPT__
#define glVariantusvEXT_FORMAT FORMAT_void_GLuint_const_GLushort___GENPT__
#define glVariantusvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVariantusvEXT_NOT_VOID_WRAP(...) {}
#define glVertex2bOES_INDEX 2293
#define glVertex2bOES_RETURN void
#define glVertex2bOES_ARG_NAMES x
#define glVertex2bOES_ARG_EXPAND GLbyte x
#define glVertex2bOES_PACKED PACKED_void_GLbyte
#define glVertex2bOES_FORMAT FORMAT_void_GLbyte
#define glVertex2bOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertex2bOES_NOT_VOID_WRAP(...) {}
#define glVertex2bvOES_INDEX 2294
#define glVertex2bvOES_RETURN void
#define glVertex2bvOES_ARG_NAMES coords
#define glVertex2bvOES_ARG_EXPAND const GLbyte * coords
#define glVertex2bvOES_PACKED PACKED_void_const_GLbyte___GENPT__
#define glVertex2bvOES_FORMAT FORMAT_void_const_GLbyte___GENPT__
#define glVertex2bvOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertex2bvOES_NOT_VOID_WRAP(...) {}
#define glVertex2d_INDEX 2295
#define glVertex2d_RETURN void
#define glVertex2d_ARG_NAMES x, y
#define glVertex2d_ARG_EXPAND GLdouble x, GLdouble y
#define glVertex2d_PACKED PACKED_void_GLdouble_GLdouble
#define glVertex2d_FORMAT FORMAT_void_GLdouble_GLdouble
#define glVertex2d_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertex2d_NOT_VOID_WRAP(...) {}
#define glVertex2dv_INDEX 2296
#define glVertex2dv_RETURN void
#define glVertex2dv_ARG_NAMES v
#define glVertex2dv_ARG_EXPAND const GLdouble * v
#define glVertex2dv_PACKED PACKED_void_const_GLdouble___GENPT__
#define glVertex2dv_FORMAT FORMAT_void_const_GLdouble___GENPT__
#define glVertex2dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertex2dv_NOT_VOID_WRAP(...) {}
#define glVertex2f_INDEX 2297
#define glVertex2f_RETURN void
#define glVertex2f_ARG_NAMES x, y
#define glVertex2f_ARG_EXPAND GLfloat x, GLfloat y
#define glVertex2f_PACKED PACKED_void_GLfloat_GLfloat
#define glVertex2f_FORMAT FORMAT_void_GLfloat_GLfloat
#define glVertex2f_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertex2f_NOT_VOID_WRAP(...) {}
#define glVertex2fv_INDEX 2298
#define glVertex2fv_RETURN void
#define glVertex2fv_ARG_NAMES v
#define glVertex2fv_ARG_EXPAND const GLfloat * v
#define glVertex2fv_PACKED PACKED_void_const_GLfloat___GENPT__
#define glVertex2fv_FORMAT FORMAT_void_const_GLfloat___GENPT__
#define glVertex2fv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertex2fv_NOT_VOID_WRAP(...) {}
#define glVertex2hNV_INDEX 2299
#define glVertex2hNV_RETURN void
#define glVertex2hNV_ARG_NAMES x, y
#define glVertex2hNV_ARG_EXPAND GLhalfNV x, GLhalfNV y
#define glVertex2hNV_PACKED PACKED_void_GLhalfNV_GLhalfNV
#define glVertex2hNV_FORMAT FORMAT_void_GLhalfNV_GLhalfNV
#define glVertex2hNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertex2hNV_NOT_VOID_WRAP(...) {}
#define glVertex2hvNV_INDEX 2300
#define glVertex2hvNV_RETURN void
#define glVertex2hvNV_ARG_NAMES v
#define glVertex2hvNV_ARG_EXPAND const GLhalfNV * v
#define glVertex2hvNV_PACKED PACKED_void_const_GLhalfNV___GENPT__
#define glVertex2hvNV_FORMAT FORMAT_void_const_GLhalfNV___GENPT__
#define glVertex2hvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertex2hvNV_NOT_VOID_WRAP(...) {}
#define glVertex2i_INDEX 2301
#define glVertex2i_RETURN void
#define glVertex2i_ARG_NAMES x, y
#define glVertex2i_ARG_EXPAND GLint x, GLint y
#define glVertex2i_PACKED PACKED_void_GLint_GLint
#define glVertex2i_FORMAT FORMAT_void_GLint_GLint
#define glVertex2i_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertex2i_NOT_VOID_WRAP(...) {}
#define glVertex2iv_INDEX 2302
#define glVertex2iv_RETURN void
#define glVertex2iv_ARG_NAMES v
#define glVertex2iv_ARG_EXPAND const GLint * v
#define glVertex2iv_PACKED PACKED_void_const_GLint___GENPT__
#define glVertex2iv_FORMAT FORMAT_void_const_GLint___GENPT__
#define glVertex2iv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertex2iv_NOT_VOID_WRAP(...) {}
#define glVertex2s_INDEX 2303
#define glVertex2s_RETURN void
#define glVertex2s_ARG_NAMES x, y
#define glVertex2s_ARG_EXPAND GLshort x, GLshort y
#define glVertex2s_PACKED PACKED_void_GLshort_GLshort
#define glVertex2s_FORMAT FORMAT_void_GLshort_GLshort
#define glVertex2s_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertex2s_NOT_VOID_WRAP(...) {}
#define glVertex2sv_INDEX 2304
#define glVertex2sv_RETURN void
#define glVertex2sv_ARG_NAMES v
#define glVertex2sv_ARG_EXPAND const GLshort * v
#define glVertex2sv_PACKED PACKED_void_const_GLshort___GENPT__
#define glVertex2sv_FORMAT FORMAT_void_const_GLshort___GENPT__
#define glVertex2sv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertex2sv_NOT_VOID_WRAP(...) {}
#define glVertex2xOES_INDEX 2305
#define glVertex2xOES_RETURN void
#define glVertex2xOES_ARG_NAMES x
#define glVertex2xOES_ARG_EXPAND GLfixed x
#define glVertex2xOES_PACKED PACKED_void_GLfixed
#define glVertex2xOES_FORMAT FORMAT_void_GLfixed
#define glVertex2xOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertex2xOES_NOT_VOID_WRAP(...) {}
#define glVertex2xvOES_INDEX 2306
#define glVertex2xvOES_RETURN void
#define glVertex2xvOES_ARG_NAMES coords
#define glVertex2xvOES_ARG_EXPAND const GLfixed * coords
#define glVertex2xvOES_PACKED PACKED_void_const_GLfixed___GENPT__
#define glVertex2xvOES_FORMAT FORMAT_void_const_GLfixed___GENPT__
#define glVertex2xvOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertex2xvOES_NOT_VOID_WRAP(...) {}
#define glVertex3bOES_INDEX 2307
#define glVertex3bOES_RETURN void
#define glVertex3bOES_ARG_NAMES x, y
#define glVertex3bOES_ARG_EXPAND GLbyte x, GLbyte y
#define glVertex3bOES_PACKED PACKED_void_GLbyte_GLbyte
#define glVertex3bOES_FORMAT FORMAT_void_GLbyte_GLbyte
#define glVertex3bOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertex3bOES_NOT_VOID_WRAP(...) {}
#define glVertex3bvOES_INDEX 2308
#define glVertex3bvOES_RETURN void
#define glVertex3bvOES_ARG_NAMES coords
#define glVertex3bvOES_ARG_EXPAND const GLbyte * coords
#define glVertex3bvOES_PACKED PACKED_void_const_GLbyte___GENPT__
#define glVertex3bvOES_FORMAT FORMAT_void_const_GLbyte___GENPT__
#define glVertex3bvOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertex3bvOES_NOT_VOID_WRAP(...) {}
#define glVertex3d_INDEX 2309
#define glVertex3d_RETURN void
#define glVertex3d_ARG_NAMES x, y, z
#define glVertex3d_ARG_EXPAND GLdouble x, GLdouble y, GLdouble z
#define glVertex3d_PACKED PACKED_void_GLdouble_GLdouble_GLdouble
#define glVertex3d_FORMAT FORMAT_void_GLdouble_GLdouble_GLdouble
#define glVertex3d_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertex3d_NOT_VOID_WRAP(...) {}
#define glVertex3dv_INDEX 2310
#define glVertex3dv_RETURN void
#define glVertex3dv_ARG_NAMES v
#define glVertex3dv_ARG_EXPAND const GLdouble * v
#define glVertex3dv_PACKED PACKED_void_const_GLdouble___GENPT__
#define glVertex3dv_FORMAT FORMAT_void_const_GLdouble___GENPT__
#define glVertex3dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertex3dv_NOT_VOID_WRAP(...) {}
#define glVertex3f_INDEX 2311
#define glVertex3f_RETURN void
#define glVertex3f_ARG_NAMES x, y, z
#define glVertex3f_ARG_EXPAND GLfloat x, GLfloat y, GLfloat z
#define glVertex3f_PACKED PACKED_void_GLfloat_GLfloat_GLfloat
#define glVertex3f_FORMAT FORMAT_void_GLfloat_GLfloat_GLfloat
#define glVertex3f_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertex3f_NOT_VOID_WRAP(...) {}
#define glVertex3fv_INDEX 2312
#define glVertex3fv_RETURN void
#define glVertex3fv_ARG_NAMES v
#define glVertex3fv_ARG_EXPAND const GLfloat * v
#define glVertex3fv_PACKED PACKED_void_const_GLfloat___GENPT__
#define glVertex3fv_FORMAT FORMAT_void_const_GLfloat___GENPT__
#define glVertex3fv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertex3fv_NOT_VOID_WRAP(...) {}
#define glVertex3hNV_INDEX 2313
#define glVertex3hNV_RETURN void
#define glVertex3hNV_ARG_NAMES x, y, z
#define glVertex3hNV_ARG_EXPAND GLhalfNV x, GLhalfNV y, GLhalfNV z
#define glVertex3hNV_PACKED PACKED_void_GLhalfNV_GLhalfNV_GLhalfNV
#define glVertex3hNV_FORMAT FORMAT_void_GLhalfNV_GLhalfNV_GLhalfNV
#define glVertex3hNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertex3hNV_NOT_VOID_WRAP(...) {}
#define glVertex3hvNV_INDEX 2314
#define glVertex3hvNV_RETURN void
#define glVertex3hvNV_ARG_NAMES v
#define glVertex3hvNV_ARG_EXPAND const GLhalfNV * v
#define glVertex3hvNV_PACKED PACKED_void_const_GLhalfNV___GENPT__
#define glVertex3hvNV_FORMAT FORMAT_void_const_GLhalfNV___GENPT__
#define glVertex3hvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertex3hvNV_NOT_VOID_WRAP(...) {}
#define glVertex3i_INDEX 2315
#define glVertex3i_RETURN void
#define glVertex3i_ARG_NAMES x, y, z
#define glVertex3i_ARG_EXPAND GLint x, GLint y, GLint z
#define glVertex3i_PACKED PACKED_void_GLint_GLint_GLint
#define glVertex3i_FORMAT FORMAT_void_GLint_GLint_GLint
#define glVertex3i_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertex3i_NOT_VOID_WRAP(...) {}
#define glVertex3iv_INDEX 2316
#define glVertex3iv_RETURN void
#define glVertex3iv_ARG_NAMES v
#define glVertex3iv_ARG_EXPAND const GLint * v
#define glVertex3iv_PACKED PACKED_void_const_GLint___GENPT__
#define glVertex3iv_FORMAT FORMAT_void_const_GLint___GENPT__
#define glVertex3iv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertex3iv_NOT_VOID_WRAP(...) {}
#define glVertex3s_INDEX 2317
#define glVertex3s_RETURN void
#define glVertex3s_ARG_NAMES x, y, z
#define glVertex3s_ARG_EXPAND GLshort x, GLshort y, GLshort z
#define glVertex3s_PACKED PACKED_void_GLshort_GLshort_GLshort
#define glVertex3s_FORMAT FORMAT_void_GLshort_GLshort_GLshort
#define glVertex3s_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertex3s_NOT_VOID_WRAP(...) {}
#define glVertex3sv_INDEX 2318
#define glVertex3sv_RETURN void
#define glVertex3sv_ARG_NAMES v
#define glVertex3sv_ARG_EXPAND const GLshort * v
#define glVertex3sv_PACKED PACKED_void_const_GLshort___GENPT__
#define glVertex3sv_FORMAT FORMAT_void_const_GLshort___GENPT__
#define glVertex3sv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertex3sv_NOT_VOID_WRAP(...) {}
#define glVertex3xOES_INDEX 2319
#define glVertex3xOES_RETURN void
#define glVertex3xOES_ARG_NAMES x, y
#define glVertex3xOES_ARG_EXPAND GLfixed x, GLfixed y
#define glVertex3xOES_PACKED PACKED_void_GLfixed_GLfixed
#define glVertex3xOES_FORMAT FORMAT_void_GLfixed_GLfixed
#define glVertex3xOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertex3xOES_NOT_VOID_WRAP(...) {}
#define glVertex3xvOES_INDEX 2320
#define glVertex3xvOES_RETURN void
#define glVertex3xvOES_ARG_NAMES coords
#define glVertex3xvOES_ARG_EXPAND const GLfixed * coords
#define glVertex3xvOES_PACKED PACKED_void_const_GLfixed___GENPT__
#define glVertex3xvOES_FORMAT FORMAT_void_const_GLfixed___GENPT__
#define glVertex3xvOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertex3xvOES_NOT_VOID_WRAP(...) {}
#define glVertex4bOES_INDEX 2321
#define glVertex4bOES_RETURN void
#define glVertex4bOES_ARG_NAMES x, y, z
#define glVertex4bOES_ARG_EXPAND GLbyte x, GLbyte y, GLbyte z
#define glVertex4bOES_PACKED PACKED_void_GLbyte_GLbyte_GLbyte
#define glVertex4bOES_FORMAT FORMAT_void_GLbyte_GLbyte_GLbyte
#define glVertex4bOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertex4bOES_NOT_VOID_WRAP(...) {}
#define glVertex4bvOES_INDEX 2322
#define glVertex4bvOES_RETURN void
#define glVertex4bvOES_ARG_NAMES coords
#define glVertex4bvOES_ARG_EXPAND const GLbyte * coords
#define glVertex4bvOES_PACKED PACKED_void_const_GLbyte___GENPT__
#define glVertex4bvOES_FORMAT FORMAT_void_const_GLbyte___GENPT__
#define glVertex4bvOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertex4bvOES_NOT_VOID_WRAP(...) {}
#define glVertex4d_INDEX 2323
#define glVertex4d_RETURN void
#define glVertex4d_ARG_NAMES x, y, z, w
#define glVertex4d_ARG_EXPAND GLdouble x, GLdouble y, GLdouble z, GLdouble w
#define glVertex4d_PACKED PACKED_void_GLdouble_GLdouble_GLdouble_GLdouble
#define glVertex4d_FORMAT FORMAT_void_GLdouble_GLdouble_GLdouble_GLdouble
#define glVertex4d_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertex4d_NOT_VOID_WRAP(...) {}
#define glVertex4dv_INDEX 2324
#define glVertex4dv_RETURN void
#define glVertex4dv_ARG_NAMES v
#define glVertex4dv_ARG_EXPAND const GLdouble * v
#define glVertex4dv_PACKED PACKED_void_const_GLdouble___GENPT__
#define glVertex4dv_FORMAT FORMAT_void_const_GLdouble___GENPT__
#define glVertex4dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertex4dv_NOT_VOID_WRAP(...) {}
#define glVertex4f_INDEX 2325
#define glVertex4f_RETURN void
#define glVertex4f_ARG_NAMES x, y, z, w
#define glVertex4f_ARG_EXPAND GLfloat x, GLfloat y, GLfloat z, GLfloat w
#define glVertex4f_PACKED PACKED_void_GLfloat_GLfloat_GLfloat_GLfloat
#define glVertex4f_FORMAT FORMAT_void_GLfloat_GLfloat_GLfloat_GLfloat
#define glVertex4f_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertex4f_NOT_VOID_WRAP(...) {}
#define glVertex4fv_INDEX 2326
#define glVertex4fv_RETURN void
#define glVertex4fv_ARG_NAMES v
#define glVertex4fv_ARG_EXPAND const GLfloat * v
#define glVertex4fv_PACKED PACKED_void_const_GLfloat___GENPT__
#define glVertex4fv_FORMAT FORMAT_void_const_GLfloat___GENPT__
#define glVertex4fv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertex4fv_NOT_VOID_WRAP(...) {}
#define glVertex4hNV_INDEX 2327
#define glVertex4hNV_RETURN void
#define glVertex4hNV_ARG_NAMES x, y, z, w
#define glVertex4hNV_ARG_EXPAND GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w
#define glVertex4hNV_PACKED PACKED_void_GLhalfNV_GLhalfNV_GLhalfNV_GLhalfNV
#define glVertex4hNV_FORMAT FORMAT_void_GLhalfNV_GLhalfNV_GLhalfNV_GLhalfNV
#define glVertex4hNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertex4hNV_NOT_VOID_WRAP(...) {}
#define glVertex4hvNV_INDEX 2328
#define glVertex4hvNV_RETURN void
#define glVertex4hvNV_ARG_NAMES v
#define glVertex4hvNV_ARG_EXPAND const GLhalfNV * v
#define glVertex4hvNV_PACKED PACKED_void_const_GLhalfNV___GENPT__
#define glVertex4hvNV_FORMAT FORMAT_void_const_GLhalfNV___GENPT__
#define glVertex4hvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertex4hvNV_NOT_VOID_WRAP(...) {}
#define glVertex4i_INDEX 2329
#define glVertex4i_RETURN void
#define glVertex4i_ARG_NAMES x, y, z, w
#define glVertex4i_ARG_EXPAND GLint x, GLint y, GLint z, GLint w
#define glVertex4i_PACKED PACKED_void_GLint_GLint_GLint_GLint
#define glVertex4i_FORMAT FORMAT_void_GLint_GLint_GLint_GLint
#define glVertex4i_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertex4i_NOT_VOID_WRAP(...) {}
#define glVertex4iv_INDEX 2330
#define glVertex4iv_RETURN void
#define glVertex4iv_ARG_NAMES v
#define glVertex4iv_ARG_EXPAND const GLint * v
#define glVertex4iv_PACKED PACKED_void_const_GLint___GENPT__
#define glVertex4iv_FORMAT FORMAT_void_const_GLint___GENPT__
#define glVertex4iv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertex4iv_NOT_VOID_WRAP(...) {}
#define glVertex4s_INDEX 2331
#define glVertex4s_RETURN void
#define glVertex4s_ARG_NAMES x, y, z, w
#define glVertex4s_ARG_EXPAND GLshort x, GLshort y, GLshort z, GLshort w
#define glVertex4s_PACKED PACKED_void_GLshort_GLshort_GLshort_GLshort
#define glVertex4s_FORMAT FORMAT_void_GLshort_GLshort_GLshort_GLshort
#define glVertex4s_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertex4s_NOT_VOID_WRAP(...) {}
#define glVertex4sv_INDEX 2332
#define glVertex4sv_RETURN void
#define glVertex4sv_ARG_NAMES v
#define glVertex4sv_ARG_EXPAND const GLshort * v
#define glVertex4sv_PACKED PACKED_void_const_GLshort___GENPT__
#define glVertex4sv_FORMAT FORMAT_void_const_GLshort___GENPT__
#define glVertex4sv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertex4sv_NOT_VOID_WRAP(...) {}
#define glVertex4xOES_INDEX 2333
#define glVertex4xOES_RETURN void
#define glVertex4xOES_ARG_NAMES x, y, z
#define glVertex4xOES_ARG_EXPAND GLfixed x, GLfixed y, GLfixed z
#define glVertex4xOES_PACKED PACKED_void_GLfixed_GLfixed_GLfixed
#define glVertex4xOES_FORMAT FORMAT_void_GLfixed_GLfixed_GLfixed
#define glVertex4xOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertex4xOES_NOT_VOID_WRAP(...) {}
#define glVertex4xvOES_INDEX 2334
#define glVertex4xvOES_RETURN void
#define glVertex4xvOES_ARG_NAMES coords
#define glVertex4xvOES_ARG_EXPAND const GLfixed * coords
#define glVertex4xvOES_PACKED PACKED_void_const_GLfixed___GENPT__
#define glVertex4xvOES_FORMAT FORMAT_void_const_GLfixed___GENPT__
#define glVertex4xvOES_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertex4xvOES_NOT_VOID_WRAP(...) {}
#define glVertexArrayBindVertexBufferEXT_INDEX 2335
#define glVertexArrayBindVertexBufferEXT_RETURN void
#define glVertexArrayBindVertexBufferEXT_ARG_NAMES vaobj, bindingindex, buffer, offset, stride
#define glVertexArrayBindVertexBufferEXT_ARG_EXPAND GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride
#define glVertexArrayBindVertexBufferEXT_PACKED PACKED_void_GLuint_GLuint_GLuint_GLintptr_GLsizei
#define glVertexArrayBindVertexBufferEXT_FORMAT FORMAT_void_GLuint_GLuint_GLuint_GLintptr_GLsizei
#define glVertexArrayBindVertexBufferEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexArrayBindVertexBufferEXT_NOT_VOID_WRAP(...) {}
#define glVertexArrayColorOffsetEXT_INDEX 2336
#define glVertexArrayColorOffsetEXT_RETURN void
#define glVertexArrayColorOffsetEXT_ARG_NAMES vaobj, buffer, size, type, stride, offset
#define glVertexArrayColorOffsetEXT_ARG_EXPAND GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset
#define glVertexArrayColorOffsetEXT_PACKED PACKED_void_GLuint_GLuint_GLint_GLenum_GLsizei_GLintptr
#define glVertexArrayColorOffsetEXT_FORMAT FORMAT_void_GLuint_GLuint_GLint_GLenum_GLsizei_GLintptr
#define glVertexArrayColorOffsetEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexArrayColorOffsetEXT_NOT_VOID_WRAP(...) {}
#define glVertexArrayEdgeFlagOffsetEXT_INDEX 2337
#define glVertexArrayEdgeFlagOffsetEXT_RETURN void
#define glVertexArrayEdgeFlagOffsetEXT_ARG_NAMES vaobj, buffer, stride, offset
#define glVertexArrayEdgeFlagOffsetEXT_ARG_EXPAND GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset
#define glVertexArrayEdgeFlagOffsetEXT_PACKED PACKED_void_GLuint_GLuint_GLsizei_GLintptr
#define glVertexArrayEdgeFlagOffsetEXT_FORMAT FORMAT_void_GLuint_GLuint_GLsizei_GLintptr
#define glVertexArrayEdgeFlagOffsetEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexArrayEdgeFlagOffsetEXT_NOT_VOID_WRAP(...) {}
#define glVertexArrayFogCoordOffsetEXT_INDEX 2338
#define glVertexArrayFogCoordOffsetEXT_RETURN void
#define glVertexArrayFogCoordOffsetEXT_ARG_NAMES vaobj, buffer, type, stride, offset
#define glVertexArrayFogCoordOffsetEXT_ARG_EXPAND GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset
#define glVertexArrayFogCoordOffsetEXT_PACKED PACKED_void_GLuint_GLuint_GLenum_GLsizei_GLintptr
#define glVertexArrayFogCoordOffsetEXT_FORMAT FORMAT_void_GLuint_GLuint_GLenum_GLsizei_GLintptr
#define glVertexArrayFogCoordOffsetEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexArrayFogCoordOffsetEXT_NOT_VOID_WRAP(...) {}
#define glVertexArrayIndexOffsetEXT_INDEX 2339
#define glVertexArrayIndexOffsetEXT_RETURN void
#define glVertexArrayIndexOffsetEXT_ARG_NAMES vaobj, buffer, type, stride, offset
#define glVertexArrayIndexOffsetEXT_ARG_EXPAND GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset
#define glVertexArrayIndexOffsetEXT_PACKED PACKED_void_GLuint_GLuint_GLenum_GLsizei_GLintptr
#define glVertexArrayIndexOffsetEXT_FORMAT FORMAT_void_GLuint_GLuint_GLenum_GLsizei_GLintptr
#define glVertexArrayIndexOffsetEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexArrayIndexOffsetEXT_NOT_VOID_WRAP(...) {}
#define glVertexArrayMultiTexCoordOffsetEXT_INDEX 2340
#define glVertexArrayMultiTexCoordOffsetEXT_RETURN void
#define glVertexArrayMultiTexCoordOffsetEXT_ARG_NAMES vaobj, buffer, texunit, size, type, stride, offset
#define glVertexArrayMultiTexCoordOffsetEXT_ARG_EXPAND GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset
#define glVertexArrayMultiTexCoordOffsetEXT_PACKED PACKED_void_GLuint_GLuint_GLenum_GLint_GLenum_GLsizei_GLintptr
#define glVertexArrayMultiTexCoordOffsetEXT_FORMAT FORMAT_void_GLuint_GLuint_GLenum_GLint_GLenum_GLsizei_GLintptr
#define glVertexArrayMultiTexCoordOffsetEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexArrayMultiTexCoordOffsetEXT_NOT_VOID_WRAP(...) {}
#define glVertexArrayNormalOffsetEXT_INDEX 2341
#define glVertexArrayNormalOffsetEXT_RETURN void
#define glVertexArrayNormalOffsetEXT_ARG_NAMES vaobj, buffer, type, stride, offset
#define glVertexArrayNormalOffsetEXT_ARG_EXPAND GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset
#define glVertexArrayNormalOffsetEXT_PACKED PACKED_void_GLuint_GLuint_GLenum_GLsizei_GLintptr
#define glVertexArrayNormalOffsetEXT_FORMAT FORMAT_void_GLuint_GLuint_GLenum_GLsizei_GLintptr
#define glVertexArrayNormalOffsetEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexArrayNormalOffsetEXT_NOT_VOID_WRAP(...) {}
#define glVertexArrayParameteriAPPLE_INDEX 2342
#define glVertexArrayParameteriAPPLE_RETURN void
#define glVertexArrayParameteriAPPLE_ARG_NAMES pname, param
#define glVertexArrayParameteriAPPLE_ARG_EXPAND GLenum pname, GLint param
#define glVertexArrayParameteriAPPLE_PACKED PACKED_void_GLenum_GLint
#define glVertexArrayParameteriAPPLE_FORMAT FORMAT_void_GLenum_GLint
#define glVertexArrayParameteriAPPLE_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexArrayParameteriAPPLE_NOT_VOID_WRAP(...) {}
#define glVertexArrayRangeAPPLE_INDEX 2343
#define glVertexArrayRangeAPPLE_RETURN void
#define glVertexArrayRangeAPPLE_ARG_NAMES length, pointer
#define glVertexArrayRangeAPPLE_ARG_EXPAND GLsizei length, GLvoid * pointer
#define glVertexArrayRangeAPPLE_PACKED PACKED_void_GLsizei_GLvoid___GENPT__
#define glVertexArrayRangeAPPLE_FORMAT FORMAT_void_GLsizei_GLvoid___GENPT__
#define glVertexArrayRangeAPPLE_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexArrayRangeAPPLE_NOT_VOID_WRAP(...) {}
#define glVertexArrayRangeNV_INDEX 2344
#define glVertexArrayRangeNV_RETURN void
#define glVertexArrayRangeNV_ARG_NAMES length, pointer
#define glVertexArrayRangeNV_ARG_EXPAND GLsizei length, const GLvoid * pointer
#define glVertexArrayRangeNV_PACKED PACKED_void_GLsizei_const_GLvoid___GENPT__
#define glVertexArrayRangeNV_FORMAT FORMAT_void_GLsizei_const_GLvoid___GENPT__
#define glVertexArrayRangeNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexArrayRangeNV_NOT_VOID_WRAP(...) {}
#define glVertexArraySecondaryColorOffsetEXT_INDEX 2345
#define glVertexArraySecondaryColorOffsetEXT_RETURN void
#define glVertexArraySecondaryColorOffsetEXT_ARG_NAMES vaobj, buffer, size, type, stride, offset
#define glVertexArraySecondaryColorOffsetEXT_ARG_EXPAND GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset
#define glVertexArraySecondaryColorOffsetEXT_PACKED PACKED_void_GLuint_GLuint_GLint_GLenum_GLsizei_GLintptr
#define glVertexArraySecondaryColorOffsetEXT_FORMAT FORMAT_void_GLuint_GLuint_GLint_GLenum_GLsizei_GLintptr
#define glVertexArraySecondaryColorOffsetEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexArraySecondaryColorOffsetEXT_NOT_VOID_WRAP(...) {}
#define glVertexArrayTexCoordOffsetEXT_INDEX 2346
#define glVertexArrayTexCoordOffsetEXT_RETURN void
#define glVertexArrayTexCoordOffsetEXT_ARG_NAMES vaobj, buffer, size, type, stride, offset
#define glVertexArrayTexCoordOffsetEXT_ARG_EXPAND GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset
#define glVertexArrayTexCoordOffsetEXT_PACKED PACKED_void_GLuint_GLuint_GLint_GLenum_GLsizei_GLintptr
#define glVertexArrayTexCoordOffsetEXT_FORMAT FORMAT_void_GLuint_GLuint_GLint_GLenum_GLsizei_GLintptr
#define glVertexArrayTexCoordOffsetEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexArrayTexCoordOffsetEXT_NOT_VOID_WRAP(...) {}
#define glVertexArrayVertexAttribBindingEXT_INDEX 2347
#define glVertexArrayVertexAttribBindingEXT_RETURN void
#define glVertexArrayVertexAttribBindingEXT_ARG_NAMES vaobj, attribindex, bindingindex
#define glVertexArrayVertexAttribBindingEXT_ARG_EXPAND GLuint vaobj, GLuint attribindex, GLuint bindingindex
#define glVertexArrayVertexAttribBindingEXT_PACKED PACKED_void_GLuint_GLuint_GLuint
#define glVertexArrayVertexAttribBindingEXT_FORMAT FORMAT_void_GLuint_GLuint_GLuint
#define glVertexArrayVertexAttribBindingEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexArrayVertexAttribBindingEXT_NOT_VOID_WRAP(...) {}
#define glVertexArrayVertexAttribFormatEXT_INDEX 2348
#define glVertexArrayVertexAttribFormatEXT_RETURN void
#define glVertexArrayVertexAttribFormatEXT_ARG_NAMES vaobj, attribindex, size, type, normalized, relativeoffset
#define glVertexArrayVertexAttribFormatEXT_ARG_EXPAND GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset
#define glVertexArrayVertexAttribFormatEXT_PACKED PACKED_void_GLuint_GLuint_GLint_GLenum_GLboolean_GLuint
#define glVertexArrayVertexAttribFormatEXT_FORMAT FORMAT_void_GLuint_GLuint_GLint_GLenum_GLboolean_GLuint
#define glVertexArrayVertexAttribFormatEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexArrayVertexAttribFormatEXT_NOT_VOID_WRAP(...) {}
#define glVertexArrayVertexAttribIFormatEXT_INDEX 2349
#define glVertexArrayVertexAttribIFormatEXT_RETURN void
#define glVertexArrayVertexAttribIFormatEXT_ARG_NAMES vaobj, attribindex, size, type, relativeoffset
#define glVertexArrayVertexAttribIFormatEXT_ARG_EXPAND GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset
#define glVertexArrayVertexAttribIFormatEXT_PACKED PACKED_void_GLuint_GLuint_GLint_GLenum_GLuint
#define glVertexArrayVertexAttribIFormatEXT_FORMAT FORMAT_void_GLuint_GLuint_GLint_GLenum_GLuint
#define glVertexArrayVertexAttribIFormatEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexArrayVertexAttribIFormatEXT_NOT_VOID_WRAP(...) {}
#define glVertexArrayVertexAttribIOffsetEXT_INDEX 2350
#define glVertexArrayVertexAttribIOffsetEXT_RETURN void
#define glVertexArrayVertexAttribIOffsetEXT_ARG_NAMES vaobj, buffer, index, size, type, stride, offset
#define glVertexArrayVertexAttribIOffsetEXT_ARG_EXPAND GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset
#define glVertexArrayVertexAttribIOffsetEXT_PACKED PACKED_void_GLuint_GLuint_GLuint_GLint_GLenum_GLsizei_GLintptr
#define glVertexArrayVertexAttribIOffsetEXT_FORMAT FORMAT_void_GLuint_GLuint_GLuint_GLint_GLenum_GLsizei_GLintptr
#define glVertexArrayVertexAttribIOffsetEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexArrayVertexAttribIOffsetEXT_NOT_VOID_WRAP(...) {}
#define glVertexArrayVertexAttribLFormatEXT_INDEX 2351
#define glVertexArrayVertexAttribLFormatEXT_RETURN void
#define glVertexArrayVertexAttribLFormatEXT_ARG_NAMES vaobj, attribindex, size, type, relativeoffset
#define glVertexArrayVertexAttribLFormatEXT_ARG_EXPAND GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset
#define glVertexArrayVertexAttribLFormatEXT_PACKED PACKED_void_GLuint_GLuint_GLint_GLenum_GLuint
#define glVertexArrayVertexAttribLFormatEXT_FORMAT FORMAT_void_GLuint_GLuint_GLint_GLenum_GLuint
#define glVertexArrayVertexAttribLFormatEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexArrayVertexAttribLFormatEXT_NOT_VOID_WRAP(...) {}
#define glVertexArrayVertexAttribLOffsetEXT_INDEX 2352
#define glVertexArrayVertexAttribLOffsetEXT_RETURN void
#define glVertexArrayVertexAttribLOffsetEXT_ARG_NAMES vaobj, buffer, index, size, type, stride, offset
#define glVertexArrayVertexAttribLOffsetEXT_ARG_EXPAND GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset
#define glVertexArrayVertexAttribLOffsetEXT_PACKED PACKED_void_GLuint_GLuint_GLuint_GLint_GLenum_GLsizei_GLintptr
#define glVertexArrayVertexAttribLOffsetEXT_FORMAT FORMAT_void_GLuint_GLuint_GLuint_GLint_GLenum_GLsizei_GLintptr
#define glVertexArrayVertexAttribLOffsetEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexArrayVertexAttribLOffsetEXT_NOT_VOID_WRAP(...) {}
#define glVertexArrayVertexAttribOffsetEXT_INDEX 2353
#define glVertexArrayVertexAttribOffsetEXT_RETURN void
#define glVertexArrayVertexAttribOffsetEXT_ARG_NAMES vaobj, buffer, index, size, type, normalized, stride, offset
#define glVertexArrayVertexAttribOffsetEXT_ARG_EXPAND GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset
#define glVertexArrayVertexAttribOffsetEXT_PACKED PACKED_void_GLuint_GLuint_GLuint_GLint_GLenum_GLboolean_GLsizei_GLintptr
#define glVertexArrayVertexAttribOffsetEXT_FORMAT FORMAT_void_GLuint_GLuint_GLuint_GLint_GLenum_GLboolean_GLsizei_GLintptr
#define glVertexArrayVertexAttribOffsetEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexArrayVertexAttribOffsetEXT_NOT_VOID_WRAP(...) {}
#define glVertexArrayVertexBindingDivisorEXT_INDEX 2354
#define glVertexArrayVertexBindingDivisorEXT_RETURN void
#define glVertexArrayVertexBindingDivisorEXT_ARG_NAMES vaobj, bindingindex, divisor
#define glVertexArrayVertexBindingDivisorEXT_ARG_EXPAND GLuint vaobj, GLuint bindingindex, GLuint divisor
#define glVertexArrayVertexBindingDivisorEXT_PACKED PACKED_void_GLuint_GLuint_GLuint
#define glVertexArrayVertexBindingDivisorEXT_FORMAT FORMAT_void_GLuint_GLuint_GLuint
#define glVertexArrayVertexBindingDivisorEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexArrayVertexBindingDivisorEXT_NOT_VOID_WRAP(...) {}
#define glVertexArrayVertexOffsetEXT_INDEX 2355
#define glVertexArrayVertexOffsetEXT_RETURN void
#define glVertexArrayVertexOffsetEXT_ARG_NAMES vaobj, buffer, size, type, stride, offset
#define glVertexArrayVertexOffsetEXT_ARG_EXPAND GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset
#define glVertexArrayVertexOffsetEXT_PACKED PACKED_void_GLuint_GLuint_GLint_GLenum_GLsizei_GLintptr
#define glVertexArrayVertexOffsetEXT_FORMAT FORMAT_void_GLuint_GLuint_GLint_GLenum_GLsizei_GLintptr
#define glVertexArrayVertexOffsetEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexArrayVertexOffsetEXT_NOT_VOID_WRAP(...) {}
#define glVertexAttrib1d_INDEX 2356
#define glVertexAttrib1d_RETURN void
#define glVertexAttrib1d_ARG_NAMES index, x
#define glVertexAttrib1d_ARG_EXPAND GLuint index, GLdouble x
#define glVertexAttrib1d_PACKED PACKED_void_GLuint_GLdouble
#define glVertexAttrib1d_FORMAT FORMAT_void_GLuint_GLdouble
#define glVertexAttrib1d_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib1d_NOT_VOID_WRAP(...) {}
#define glVertexAttrib1dARB_INDEX 2357
#define glVertexAttrib1dARB_RETURN void
#define glVertexAttrib1dARB_ARG_NAMES index, x
#define glVertexAttrib1dARB_ARG_EXPAND GLuint index, GLdouble x
#define glVertexAttrib1dARB_PACKED PACKED_void_GLuint_GLdouble
#define glVertexAttrib1dARB_FORMAT FORMAT_void_GLuint_GLdouble
#define glVertexAttrib1dARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib1dARB_NOT_VOID_WRAP(...) {}
#define glVertexAttrib1dNV_INDEX 2358
#define glVertexAttrib1dNV_RETURN void
#define glVertexAttrib1dNV_ARG_NAMES index, x
#define glVertexAttrib1dNV_ARG_EXPAND GLuint index, GLdouble x
#define glVertexAttrib1dNV_PACKED PACKED_void_GLuint_GLdouble
#define glVertexAttrib1dNV_FORMAT FORMAT_void_GLuint_GLdouble
#define glVertexAttrib1dNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib1dNV_NOT_VOID_WRAP(...) {}
#define glVertexAttrib1dv_INDEX 2359
#define glVertexAttrib1dv_RETURN void
#define glVertexAttrib1dv_ARG_NAMES index, v
#define glVertexAttrib1dv_ARG_EXPAND GLuint index, const GLdouble * v
#define glVertexAttrib1dv_PACKED PACKED_void_GLuint_const_GLdouble___GENPT__
#define glVertexAttrib1dv_FORMAT FORMAT_void_GLuint_const_GLdouble___GENPT__
#define glVertexAttrib1dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib1dv_NOT_VOID_WRAP(...) {}
#define glVertexAttrib1dvARB_INDEX 2360
#define glVertexAttrib1dvARB_RETURN void
#define glVertexAttrib1dvARB_ARG_NAMES index, v
#define glVertexAttrib1dvARB_ARG_EXPAND GLuint index, const GLdouble * v
#define glVertexAttrib1dvARB_PACKED PACKED_void_GLuint_const_GLdouble___GENPT__
#define glVertexAttrib1dvARB_FORMAT FORMAT_void_GLuint_const_GLdouble___GENPT__
#define glVertexAttrib1dvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib1dvARB_NOT_VOID_WRAP(...) {}
#define glVertexAttrib1dvNV_INDEX 2361
#define glVertexAttrib1dvNV_RETURN void
#define glVertexAttrib1dvNV_ARG_NAMES index, v
#define glVertexAttrib1dvNV_ARG_EXPAND GLuint index, const GLdouble * v
#define glVertexAttrib1dvNV_PACKED PACKED_void_GLuint_const_GLdouble___GENPT__
#define glVertexAttrib1dvNV_FORMAT FORMAT_void_GLuint_const_GLdouble___GENPT__
#define glVertexAttrib1dvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib1dvNV_NOT_VOID_WRAP(...) {}
#define glVertexAttrib1f_INDEX 2362
#define glVertexAttrib1f_RETURN void
#define glVertexAttrib1f_ARG_NAMES index, x
#define glVertexAttrib1f_ARG_EXPAND GLuint index, GLfloat x
#define glVertexAttrib1f_PACKED PACKED_void_GLuint_GLfloat
#define glVertexAttrib1f_FORMAT FORMAT_void_GLuint_GLfloat
#define glVertexAttrib1f_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib1f_NOT_VOID_WRAP(...) {}
#define glVertexAttrib1fARB_INDEX 2363
#define glVertexAttrib1fARB_RETURN void
#define glVertexAttrib1fARB_ARG_NAMES index, x
#define glVertexAttrib1fARB_ARG_EXPAND GLuint index, GLfloat x
#define glVertexAttrib1fARB_PACKED PACKED_void_GLuint_GLfloat
#define glVertexAttrib1fARB_FORMAT FORMAT_void_GLuint_GLfloat
#define glVertexAttrib1fARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib1fARB_NOT_VOID_WRAP(...) {}
#define glVertexAttrib1fNV_INDEX 2364
#define glVertexAttrib1fNV_RETURN void
#define glVertexAttrib1fNV_ARG_NAMES index, x
#define glVertexAttrib1fNV_ARG_EXPAND GLuint index, GLfloat x
#define glVertexAttrib1fNV_PACKED PACKED_void_GLuint_GLfloat
#define glVertexAttrib1fNV_FORMAT FORMAT_void_GLuint_GLfloat
#define glVertexAttrib1fNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib1fNV_NOT_VOID_WRAP(...) {}
#define glVertexAttrib1fv_INDEX 2365
#define glVertexAttrib1fv_RETURN void
#define glVertexAttrib1fv_ARG_NAMES index, v
#define glVertexAttrib1fv_ARG_EXPAND GLuint index, const GLfloat * v
#define glVertexAttrib1fv_PACKED PACKED_void_GLuint_const_GLfloat___GENPT__
#define glVertexAttrib1fv_FORMAT FORMAT_void_GLuint_const_GLfloat___GENPT__
#define glVertexAttrib1fv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib1fv_NOT_VOID_WRAP(...) {}
#define glVertexAttrib1fvARB_INDEX 2366
#define glVertexAttrib1fvARB_RETURN void
#define glVertexAttrib1fvARB_ARG_NAMES index, v
#define glVertexAttrib1fvARB_ARG_EXPAND GLuint index, const GLfloat * v
#define glVertexAttrib1fvARB_PACKED PACKED_void_GLuint_const_GLfloat___GENPT__
#define glVertexAttrib1fvARB_FORMAT FORMAT_void_GLuint_const_GLfloat___GENPT__
#define glVertexAttrib1fvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib1fvARB_NOT_VOID_WRAP(...) {}
#define glVertexAttrib1fvNV_INDEX 2367
#define glVertexAttrib1fvNV_RETURN void
#define glVertexAttrib1fvNV_ARG_NAMES index, v
#define glVertexAttrib1fvNV_ARG_EXPAND GLuint index, const GLfloat * v
#define glVertexAttrib1fvNV_PACKED PACKED_void_GLuint_const_GLfloat___GENPT__
#define glVertexAttrib1fvNV_FORMAT FORMAT_void_GLuint_const_GLfloat___GENPT__
#define glVertexAttrib1fvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib1fvNV_NOT_VOID_WRAP(...) {}
#define glVertexAttrib1hNV_INDEX 2368
#define glVertexAttrib1hNV_RETURN void
#define glVertexAttrib1hNV_ARG_NAMES index, x
#define glVertexAttrib1hNV_ARG_EXPAND GLuint index, GLhalfNV x
#define glVertexAttrib1hNV_PACKED PACKED_void_GLuint_GLhalfNV
#define glVertexAttrib1hNV_FORMAT FORMAT_void_GLuint_GLhalfNV
#define glVertexAttrib1hNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib1hNV_NOT_VOID_WRAP(...) {}
#define glVertexAttrib1hvNV_INDEX 2369
#define glVertexAttrib1hvNV_RETURN void
#define glVertexAttrib1hvNV_ARG_NAMES index, v
#define glVertexAttrib1hvNV_ARG_EXPAND GLuint index, const GLhalfNV * v
#define glVertexAttrib1hvNV_PACKED PACKED_void_GLuint_const_GLhalfNV___GENPT__
#define glVertexAttrib1hvNV_FORMAT FORMAT_void_GLuint_const_GLhalfNV___GENPT__
#define glVertexAttrib1hvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib1hvNV_NOT_VOID_WRAP(...) {}
#define glVertexAttrib1s_INDEX 2370
#define glVertexAttrib1s_RETURN void
#define glVertexAttrib1s_ARG_NAMES index, x
#define glVertexAttrib1s_ARG_EXPAND GLuint index, GLshort x
#define glVertexAttrib1s_PACKED PACKED_void_GLuint_GLshort
#define glVertexAttrib1s_FORMAT FORMAT_void_GLuint_GLshort
#define glVertexAttrib1s_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib1s_NOT_VOID_WRAP(...) {}
#define glVertexAttrib1sARB_INDEX 2371
#define glVertexAttrib1sARB_RETURN void
#define glVertexAttrib1sARB_ARG_NAMES index, x
#define glVertexAttrib1sARB_ARG_EXPAND GLuint index, GLshort x
#define glVertexAttrib1sARB_PACKED PACKED_void_GLuint_GLshort
#define glVertexAttrib1sARB_FORMAT FORMAT_void_GLuint_GLshort
#define glVertexAttrib1sARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib1sARB_NOT_VOID_WRAP(...) {}
#define glVertexAttrib1sNV_INDEX 2372
#define glVertexAttrib1sNV_RETURN void
#define glVertexAttrib1sNV_ARG_NAMES index, x
#define glVertexAttrib1sNV_ARG_EXPAND GLuint index, GLshort x
#define glVertexAttrib1sNV_PACKED PACKED_void_GLuint_GLshort
#define glVertexAttrib1sNV_FORMAT FORMAT_void_GLuint_GLshort
#define glVertexAttrib1sNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib1sNV_NOT_VOID_WRAP(...) {}
#define glVertexAttrib1sv_INDEX 2373
#define glVertexAttrib1sv_RETURN void
#define glVertexAttrib1sv_ARG_NAMES index, v
#define glVertexAttrib1sv_ARG_EXPAND GLuint index, const GLshort * v
#define glVertexAttrib1sv_PACKED PACKED_void_GLuint_const_GLshort___GENPT__
#define glVertexAttrib1sv_FORMAT FORMAT_void_GLuint_const_GLshort___GENPT__
#define glVertexAttrib1sv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib1sv_NOT_VOID_WRAP(...) {}
#define glVertexAttrib1svARB_INDEX 2374
#define glVertexAttrib1svARB_RETURN void
#define glVertexAttrib1svARB_ARG_NAMES index, v
#define glVertexAttrib1svARB_ARG_EXPAND GLuint index, const GLshort * v
#define glVertexAttrib1svARB_PACKED PACKED_void_GLuint_const_GLshort___GENPT__
#define glVertexAttrib1svARB_FORMAT FORMAT_void_GLuint_const_GLshort___GENPT__
#define glVertexAttrib1svARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib1svARB_NOT_VOID_WRAP(...) {}
#define glVertexAttrib1svNV_INDEX 2375
#define glVertexAttrib1svNV_RETURN void
#define glVertexAttrib1svNV_ARG_NAMES index, v
#define glVertexAttrib1svNV_ARG_EXPAND GLuint index, const GLshort * v
#define glVertexAttrib1svNV_PACKED PACKED_void_GLuint_const_GLshort___GENPT__
#define glVertexAttrib1svNV_FORMAT FORMAT_void_GLuint_const_GLshort___GENPT__
#define glVertexAttrib1svNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib1svNV_NOT_VOID_WRAP(...) {}
#define glVertexAttrib2d_INDEX 2376
#define glVertexAttrib2d_RETURN void
#define glVertexAttrib2d_ARG_NAMES index, x, y
#define glVertexAttrib2d_ARG_EXPAND GLuint index, GLdouble x, GLdouble y
#define glVertexAttrib2d_PACKED PACKED_void_GLuint_GLdouble_GLdouble
#define glVertexAttrib2d_FORMAT FORMAT_void_GLuint_GLdouble_GLdouble
#define glVertexAttrib2d_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib2d_NOT_VOID_WRAP(...) {}
#define glVertexAttrib2dARB_INDEX 2377
#define glVertexAttrib2dARB_RETURN void
#define glVertexAttrib2dARB_ARG_NAMES index, x, y
#define glVertexAttrib2dARB_ARG_EXPAND GLuint index, GLdouble x, GLdouble y
#define glVertexAttrib2dARB_PACKED PACKED_void_GLuint_GLdouble_GLdouble
#define glVertexAttrib2dARB_FORMAT FORMAT_void_GLuint_GLdouble_GLdouble
#define glVertexAttrib2dARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib2dARB_NOT_VOID_WRAP(...) {}
#define glVertexAttrib2dNV_INDEX 2378
#define glVertexAttrib2dNV_RETURN void
#define glVertexAttrib2dNV_ARG_NAMES index, x, y
#define glVertexAttrib2dNV_ARG_EXPAND GLuint index, GLdouble x, GLdouble y
#define glVertexAttrib2dNV_PACKED PACKED_void_GLuint_GLdouble_GLdouble
#define glVertexAttrib2dNV_FORMAT FORMAT_void_GLuint_GLdouble_GLdouble
#define glVertexAttrib2dNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib2dNV_NOT_VOID_WRAP(...) {}
#define glVertexAttrib2dv_INDEX 2379
#define glVertexAttrib2dv_RETURN void
#define glVertexAttrib2dv_ARG_NAMES index, v
#define glVertexAttrib2dv_ARG_EXPAND GLuint index, const GLdouble * v
#define glVertexAttrib2dv_PACKED PACKED_void_GLuint_const_GLdouble___GENPT__
#define glVertexAttrib2dv_FORMAT FORMAT_void_GLuint_const_GLdouble___GENPT__
#define glVertexAttrib2dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib2dv_NOT_VOID_WRAP(...) {}
#define glVertexAttrib2dvARB_INDEX 2380
#define glVertexAttrib2dvARB_RETURN void
#define glVertexAttrib2dvARB_ARG_NAMES index, v
#define glVertexAttrib2dvARB_ARG_EXPAND GLuint index, const GLdouble * v
#define glVertexAttrib2dvARB_PACKED PACKED_void_GLuint_const_GLdouble___GENPT__
#define glVertexAttrib2dvARB_FORMAT FORMAT_void_GLuint_const_GLdouble___GENPT__
#define glVertexAttrib2dvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib2dvARB_NOT_VOID_WRAP(...) {}
#define glVertexAttrib2dvNV_INDEX 2381
#define glVertexAttrib2dvNV_RETURN void
#define glVertexAttrib2dvNV_ARG_NAMES index, v
#define glVertexAttrib2dvNV_ARG_EXPAND GLuint index, const GLdouble * v
#define glVertexAttrib2dvNV_PACKED PACKED_void_GLuint_const_GLdouble___GENPT__
#define glVertexAttrib2dvNV_FORMAT FORMAT_void_GLuint_const_GLdouble___GENPT__
#define glVertexAttrib2dvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib2dvNV_NOT_VOID_WRAP(...) {}
#define glVertexAttrib2f_INDEX 2382
#define glVertexAttrib2f_RETURN void
#define glVertexAttrib2f_ARG_NAMES index, x, y
#define glVertexAttrib2f_ARG_EXPAND GLuint index, GLfloat x, GLfloat y
#define glVertexAttrib2f_PACKED PACKED_void_GLuint_GLfloat_GLfloat
#define glVertexAttrib2f_FORMAT FORMAT_void_GLuint_GLfloat_GLfloat
#define glVertexAttrib2f_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib2f_NOT_VOID_WRAP(...) {}
#define glVertexAttrib2fARB_INDEX 2383
#define glVertexAttrib2fARB_RETURN void
#define glVertexAttrib2fARB_ARG_NAMES index, x, y
#define glVertexAttrib2fARB_ARG_EXPAND GLuint index, GLfloat x, GLfloat y
#define glVertexAttrib2fARB_PACKED PACKED_void_GLuint_GLfloat_GLfloat
#define glVertexAttrib2fARB_FORMAT FORMAT_void_GLuint_GLfloat_GLfloat
#define glVertexAttrib2fARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib2fARB_NOT_VOID_WRAP(...) {}
#define glVertexAttrib2fNV_INDEX 2384
#define glVertexAttrib2fNV_RETURN void
#define glVertexAttrib2fNV_ARG_NAMES index, x, y
#define glVertexAttrib2fNV_ARG_EXPAND GLuint index, GLfloat x, GLfloat y
#define glVertexAttrib2fNV_PACKED PACKED_void_GLuint_GLfloat_GLfloat
#define glVertexAttrib2fNV_FORMAT FORMAT_void_GLuint_GLfloat_GLfloat
#define glVertexAttrib2fNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib2fNV_NOT_VOID_WRAP(...) {}
#define glVertexAttrib2fv_INDEX 2385
#define glVertexAttrib2fv_RETURN void
#define glVertexAttrib2fv_ARG_NAMES index, v
#define glVertexAttrib2fv_ARG_EXPAND GLuint index, const GLfloat * v
#define glVertexAttrib2fv_PACKED PACKED_void_GLuint_const_GLfloat___GENPT__
#define glVertexAttrib2fv_FORMAT FORMAT_void_GLuint_const_GLfloat___GENPT__
#define glVertexAttrib2fv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib2fv_NOT_VOID_WRAP(...) {}
#define glVertexAttrib2fvARB_INDEX 2386
#define glVertexAttrib2fvARB_RETURN void
#define glVertexAttrib2fvARB_ARG_NAMES index, v
#define glVertexAttrib2fvARB_ARG_EXPAND GLuint index, const GLfloat * v
#define glVertexAttrib2fvARB_PACKED PACKED_void_GLuint_const_GLfloat___GENPT__
#define glVertexAttrib2fvARB_FORMAT FORMAT_void_GLuint_const_GLfloat___GENPT__
#define glVertexAttrib2fvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib2fvARB_NOT_VOID_WRAP(...) {}
#define glVertexAttrib2fvNV_INDEX 2387
#define glVertexAttrib2fvNV_RETURN void
#define glVertexAttrib2fvNV_ARG_NAMES index, v
#define glVertexAttrib2fvNV_ARG_EXPAND GLuint index, const GLfloat * v
#define glVertexAttrib2fvNV_PACKED PACKED_void_GLuint_const_GLfloat___GENPT__
#define glVertexAttrib2fvNV_FORMAT FORMAT_void_GLuint_const_GLfloat___GENPT__
#define glVertexAttrib2fvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib2fvNV_NOT_VOID_WRAP(...) {}
#define glVertexAttrib2hNV_INDEX 2388
#define glVertexAttrib2hNV_RETURN void
#define glVertexAttrib2hNV_ARG_NAMES index, x, y
#define glVertexAttrib2hNV_ARG_EXPAND GLuint index, GLhalfNV x, GLhalfNV y
#define glVertexAttrib2hNV_PACKED PACKED_void_GLuint_GLhalfNV_GLhalfNV
#define glVertexAttrib2hNV_FORMAT FORMAT_void_GLuint_GLhalfNV_GLhalfNV
#define glVertexAttrib2hNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib2hNV_NOT_VOID_WRAP(...) {}
#define glVertexAttrib2hvNV_INDEX 2389
#define glVertexAttrib2hvNV_RETURN void
#define glVertexAttrib2hvNV_ARG_NAMES index, v
#define glVertexAttrib2hvNV_ARG_EXPAND GLuint index, const GLhalfNV * v
#define glVertexAttrib2hvNV_PACKED PACKED_void_GLuint_const_GLhalfNV___GENPT__
#define glVertexAttrib2hvNV_FORMAT FORMAT_void_GLuint_const_GLhalfNV___GENPT__
#define glVertexAttrib2hvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib2hvNV_NOT_VOID_WRAP(...) {}
#define glVertexAttrib2s_INDEX 2390
#define glVertexAttrib2s_RETURN void
#define glVertexAttrib2s_ARG_NAMES index, x, y
#define glVertexAttrib2s_ARG_EXPAND GLuint index, GLshort x, GLshort y
#define glVertexAttrib2s_PACKED PACKED_void_GLuint_GLshort_GLshort
#define glVertexAttrib2s_FORMAT FORMAT_void_GLuint_GLshort_GLshort
#define glVertexAttrib2s_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib2s_NOT_VOID_WRAP(...) {}
#define glVertexAttrib2sARB_INDEX 2391
#define glVertexAttrib2sARB_RETURN void
#define glVertexAttrib2sARB_ARG_NAMES index, x, y
#define glVertexAttrib2sARB_ARG_EXPAND GLuint index, GLshort x, GLshort y
#define glVertexAttrib2sARB_PACKED PACKED_void_GLuint_GLshort_GLshort
#define glVertexAttrib2sARB_FORMAT FORMAT_void_GLuint_GLshort_GLshort
#define glVertexAttrib2sARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib2sARB_NOT_VOID_WRAP(...) {}
#define glVertexAttrib2sNV_INDEX 2392
#define glVertexAttrib2sNV_RETURN void
#define glVertexAttrib2sNV_ARG_NAMES index, x, y
#define glVertexAttrib2sNV_ARG_EXPAND GLuint index, GLshort x, GLshort y
#define glVertexAttrib2sNV_PACKED PACKED_void_GLuint_GLshort_GLshort
#define glVertexAttrib2sNV_FORMAT FORMAT_void_GLuint_GLshort_GLshort
#define glVertexAttrib2sNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib2sNV_NOT_VOID_WRAP(...) {}
#define glVertexAttrib2sv_INDEX 2393
#define glVertexAttrib2sv_RETURN void
#define glVertexAttrib2sv_ARG_NAMES index, v
#define glVertexAttrib2sv_ARG_EXPAND GLuint index, const GLshort * v
#define glVertexAttrib2sv_PACKED PACKED_void_GLuint_const_GLshort___GENPT__
#define glVertexAttrib2sv_FORMAT FORMAT_void_GLuint_const_GLshort___GENPT__
#define glVertexAttrib2sv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib2sv_NOT_VOID_WRAP(...) {}
#define glVertexAttrib2svARB_INDEX 2394
#define glVertexAttrib2svARB_RETURN void
#define glVertexAttrib2svARB_ARG_NAMES index, v
#define glVertexAttrib2svARB_ARG_EXPAND GLuint index, const GLshort * v
#define glVertexAttrib2svARB_PACKED PACKED_void_GLuint_const_GLshort___GENPT__
#define glVertexAttrib2svARB_FORMAT FORMAT_void_GLuint_const_GLshort___GENPT__
#define glVertexAttrib2svARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib2svARB_NOT_VOID_WRAP(...) {}
#define glVertexAttrib2svNV_INDEX 2395
#define glVertexAttrib2svNV_RETURN void
#define glVertexAttrib2svNV_ARG_NAMES index, v
#define glVertexAttrib2svNV_ARG_EXPAND GLuint index, const GLshort * v
#define glVertexAttrib2svNV_PACKED PACKED_void_GLuint_const_GLshort___GENPT__
#define glVertexAttrib2svNV_FORMAT FORMAT_void_GLuint_const_GLshort___GENPT__
#define glVertexAttrib2svNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib2svNV_NOT_VOID_WRAP(...) {}
#define glVertexAttrib3d_INDEX 2396
#define glVertexAttrib3d_RETURN void
#define glVertexAttrib3d_ARG_NAMES index, x, y, z
#define glVertexAttrib3d_ARG_EXPAND GLuint index, GLdouble x, GLdouble y, GLdouble z
#define glVertexAttrib3d_PACKED PACKED_void_GLuint_GLdouble_GLdouble_GLdouble
#define glVertexAttrib3d_FORMAT FORMAT_void_GLuint_GLdouble_GLdouble_GLdouble
#define glVertexAttrib3d_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib3d_NOT_VOID_WRAP(...) {}
#define glVertexAttrib3dARB_INDEX 2397
#define glVertexAttrib3dARB_RETURN void
#define glVertexAttrib3dARB_ARG_NAMES index, x, y, z
#define glVertexAttrib3dARB_ARG_EXPAND GLuint index, GLdouble x, GLdouble y, GLdouble z
#define glVertexAttrib3dARB_PACKED PACKED_void_GLuint_GLdouble_GLdouble_GLdouble
#define glVertexAttrib3dARB_FORMAT FORMAT_void_GLuint_GLdouble_GLdouble_GLdouble
#define glVertexAttrib3dARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib3dARB_NOT_VOID_WRAP(...) {}
#define glVertexAttrib3dNV_INDEX 2398
#define glVertexAttrib3dNV_RETURN void
#define glVertexAttrib3dNV_ARG_NAMES index, x, y, z
#define glVertexAttrib3dNV_ARG_EXPAND GLuint index, GLdouble x, GLdouble y, GLdouble z
#define glVertexAttrib3dNV_PACKED PACKED_void_GLuint_GLdouble_GLdouble_GLdouble
#define glVertexAttrib3dNV_FORMAT FORMAT_void_GLuint_GLdouble_GLdouble_GLdouble
#define glVertexAttrib3dNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib3dNV_NOT_VOID_WRAP(...) {}
#define glVertexAttrib3dv_INDEX 2399
#define glVertexAttrib3dv_RETURN void
#define glVertexAttrib3dv_ARG_NAMES index, v
#define glVertexAttrib3dv_ARG_EXPAND GLuint index, const GLdouble * v
#define glVertexAttrib3dv_PACKED PACKED_void_GLuint_const_GLdouble___GENPT__
#define glVertexAttrib3dv_FORMAT FORMAT_void_GLuint_const_GLdouble___GENPT__
#define glVertexAttrib3dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib3dv_NOT_VOID_WRAP(...) {}
#define glVertexAttrib3dvARB_INDEX 2400
#define glVertexAttrib3dvARB_RETURN void
#define glVertexAttrib3dvARB_ARG_NAMES index, v
#define glVertexAttrib3dvARB_ARG_EXPAND GLuint index, const GLdouble * v
#define glVertexAttrib3dvARB_PACKED PACKED_void_GLuint_const_GLdouble___GENPT__
#define glVertexAttrib3dvARB_FORMAT FORMAT_void_GLuint_const_GLdouble___GENPT__
#define glVertexAttrib3dvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib3dvARB_NOT_VOID_WRAP(...) {}
#define glVertexAttrib3dvNV_INDEX 2401
#define glVertexAttrib3dvNV_RETURN void
#define glVertexAttrib3dvNV_ARG_NAMES index, v
#define glVertexAttrib3dvNV_ARG_EXPAND GLuint index, const GLdouble * v
#define glVertexAttrib3dvNV_PACKED PACKED_void_GLuint_const_GLdouble___GENPT__
#define glVertexAttrib3dvNV_FORMAT FORMAT_void_GLuint_const_GLdouble___GENPT__
#define glVertexAttrib3dvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib3dvNV_NOT_VOID_WRAP(...) {}
#define glVertexAttrib3f_INDEX 2402
#define glVertexAttrib3f_RETURN void
#define glVertexAttrib3f_ARG_NAMES index, x, y, z
#define glVertexAttrib3f_ARG_EXPAND GLuint index, GLfloat x, GLfloat y, GLfloat z
#define glVertexAttrib3f_PACKED PACKED_void_GLuint_GLfloat_GLfloat_GLfloat
#define glVertexAttrib3f_FORMAT FORMAT_void_GLuint_GLfloat_GLfloat_GLfloat
#define glVertexAttrib3f_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib3f_NOT_VOID_WRAP(...) {}
#define glVertexAttrib3fARB_INDEX 2403
#define glVertexAttrib3fARB_RETURN void
#define glVertexAttrib3fARB_ARG_NAMES index, x, y, z
#define glVertexAttrib3fARB_ARG_EXPAND GLuint index, GLfloat x, GLfloat y, GLfloat z
#define glVertexAttrib3fARB_PACKED PACKED_void_GLuint_GLfloat_GLfloat_GLfloat
#define glVertexAttrib3fARB_FORMAT FORMAT_void_GLuint_GLfloat_GLfloat_GLfloat
#define glVertexAttrib3fARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib3fARB_NOT_VOID_WRAP(...) {}
#define glVertexAttrib3fNV_INDEX 2404
#define glVertexAttrib3fNV_RETURN void
#define glVertexAttrib3fNV_ARG_NAMES index, x, y, z
#define glVertexAttrib3fNV_ARG_EXPAND GLuint index, GLfloat x, GLfloat y, GLfloat z
#define glVertexAttrib3fNV_PACKED PACKED_void_GLuint_GLfloat_GLfloat_GLfloat
#define glVertexAttrib3fNV_FORMAT FORMAT_void_GLuint_GLfloat_GLfloat_GLfloat
#define glVertexAttrib3fNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib3fNV_NOT_VOID_WRAP(...) {}
#define glVertexAttrib3fv_INDEX 2405
#define glVertexAttrib3fv_RETURN void
#define glVertexAttrib3fv_ARG_NAMES index, v
#define glVertexAttrib3fv_ARG_EXPAND GLuint index, const GLfloat * v
#define glVertexAttrib3fv_PACKED PACKED_void_GLuint_const_GLfloat___GENPT__
#define glVertexAttrib3fv_FORMAT FORMAT_void_GLuint_const_GLfloat___GENPT__
#define glVertexAttrib3fv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib3fv_NOT_VOID_WRAP(...) {}
#define glVertexAttrib3fvARB_INDEX 2406
#define glVertexAttrib3fvARB_RETURN void
#define glVertexAttrib3fvARB_ARG_NAMES index, v
#define glVertexAttrib3fvARB_ARG_EXPAND GLuint index, const GLfloat * v
#define glVertexAttrib3fvARB_PACKED PACKED_void_GLuint_const_GLfloat___GENPT__
#define glVertexAttrib3fvARB_FORMAT FORMAT_void_GLuint_const_GLfloat___GENPT__
#define glVertexAttrib3fvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib3fvARB_NOT_VOID_WRAP(...) {}
#define glVertexAttrib3fvNV_INDEX 2407
#define glVertexAttrib3fvNV_RETURN void
#define glVertexAttrib3fvNV_ARG_NAMES index, v
#define glVertexAttrib3fvNV_ARG_EXPAND GLuint index, const GLfloat * v
#define glVertexAttrib3fvNV_PACKED PACKED_void_GLuint_const_GLfloat___GENPT__
#define glVertexAttrib3fvNV_FORMAT FORMAT_void_GLuint_const_GLfloat___GENPT__
#define glVertexAttrib3fvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib3fvNV_NOT_VOID_WRAP(...) {}
#define glVertexAttrib3hNV_INDEX 2408
#define glVertexAttrib3hNV_RETURN void
#define glVertexAttrib3hNV_ARG_NAMES index, x, y, z
#define glVertexAttrib3hNV_ARG_EXPAND GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z
#define glVertexAttrib3hNV_PACKED PACKED_void_GLuint_GLhalfNV_GLhalfNV_GLhalfNV
#define glVertexAttrib3hNV_FORMAT FORMAT_void_GLuint_GLhalfNV_GLhalfNV_GLhalfNV
#define glVertexAttrib3hNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib3hNV_NOT_VOID_WRAP(...) {}
#define glVertexAttrib3hvNV_INDEX 2409
#define glVertexAttrib3hvNV_RETURN void
#define glVertexAttrib3hvNV_ARG_NAMES index, v
#define glVertexAttrib3hvNV_ARG_EXPAND GLuint index, const GLhalfNV * v
#define glVertexAttrib3hvNV_PACKED PACKED_void_GLuint_const_GLhalfNV___GENPT__
#define glVertexAttrib3hvNV_FORMAT FORMAT_void_GLuint_const_GLhalfNV___GENPT__
#define glVertexAttrib3hvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib3hvNV_NOT_VOID_WRAP(...) {}
#define glVertexAttrib3s_INDEX 2410
#define glVertexAttrib3s_RETURN void
#define glVertexAttrib3s_ARG_NAMES index, x, y, z
#define glVertexAttrib3s_ARG_EXPAND GLuint index, GLshort x, GLshort y, GLshort z
#define glVertexAttrib3s_PACKED PACKED_void_GLuint_GLshort_GLshort_GLshort
#define glVertexAttrib3s_FORMAT FORMAT_void_GLuint_GLshort_GLshort_GLshort
#define glVertexAttrib3s_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib3s_NOT_VOID_WRAP(...) {}
#define glVertexAttrib3sARB_INDEX 2411
#define glVertexAttrib3sARB_RETURN void
#define glVertexAttrib3sARB_ARG_NAMES index, x, y, z
#define glVertexAttrib3sARB_ARG_EXPAND GLuint index, GLshort x, GLshort y, GLshort z
#define glVertexAttrib3sARB_PACKED PACKED_void_GLuint_GLshort_GLshort_GLshort
#define glVertexAttrib3sARB_FORMAT FORMAT_void_GLuint_GLshort_GLshort_GLshort
#define glVertexAttrib3sARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib3sARB_NOT_VOID_WRAP(...) {}
#define glVertexAttrib3sNV_INDEX 2412
#define glVertexAttrib3sNV_RETURN void
#define glVertexAttrib3sNV_ARG_NAMES index, x, y, z
#define glVertexAttrib3sNV_ARG_EXPAND GLuint index, GLshort x, GLshort y, GLshort z
#define glVertexAttrib3sNV_PACKED PACKED_void_GLuint_GLshort_GLshort_GLshort
#define glVertexAttrib3sNV_FORMAT FORMAT_void_GLuint_GLshort_GLshort_GLshort
#define glVertexAttrib3sNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib3sNV_NOT_VOID_WRAP(...) {}
#define glVertexAttrib3sv_INDEX 2413
#define glVertexAttrib3sv_RETURN void
#define glVertexAttrib3sv_ARG_NAMES index, v
#define glVertexAttrib3sv_ARG_EXPAND GLuint index, const GLshort * v
#define glVertexAttrib3sv_PACKED PACKED_void_GLuint_const_GLshort___GENPT__
#define glVertexAttrib3sv_FORMAT FORMAT_void_GLuint_const_GLshort___GENPT__
#define glVertexAttrib3sv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib3sv_NOT_VOID_WRAP(...) {}
#define glVertexAttrib3svARB_INDEX 2414
#define glVertexAttrib3svARB_RETURN void
#define glVertexAttrib3svARB_ARG_NAMES index, v
#define glVertexAttrib3svARB_ARG_EXPAND GLuint index, const GLshort * v
#define glVertexAttrib3svARB_PACKED PACKED_void_GLuint_const_GLshort___GENPT__
#define glVertexAttrib3svARB_FORMAT FORMAT_void_GLuint_const_GLshort___GENPT__
#define glVertexAttrib3svARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib3svARB_NOT_VOID_WRAP(...) {}
#define glVertexAttrib3svNV_INDEX 2415
#define glVertexAttrib3svNV_RETURN void
#define glVertexAttrib3svNV_ARG_NAMES index, v
#define glVertexAttrib3svNV_ARG_EXPAND GLuint index, const GLshort * v
#define glVertexAttrib3svNV_PACKED PACKED_void_GLuint_const_GLshort___GENPT__
#define glVertexAttrib3svNV_FORMAT FORMAT_void_GLuint_const_GLshort___GENPT__
#define glVertexAttrib3svNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib3svNV_NOT_VOID_WRAP(...) {}
#define glVertexAttrib4Nbv_INDEX 2416
#define glVertexAttrib4Nbv_RETURN void
#define glVertexAttrib4Nbv_ARG_NAMES index, v
#define glVertexAttrib4Nbv_ARG_EXPAND GLuint index, const GLbyte * v
#define glVertexAttrib4Nbv_PACKED PACKED_void_GLuint_const_GLbyte___GENPT__
#define glVertexAttrib4Nbv_FORMAT FORMAT_void_GLuint_const_GLbyte___GENPT__
#define glVertexAttrib4Nbv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib4Nbv_NOT_VOID_WRAP(...) {}
#define glVertexAttrib4NbvARB_INDEX 2417
#define glVertexAttrib4NbvARB_RETURN void
#define glVertexAttrib4NbvARB_ARG_NAMES index, v
#define glVertexAttrib4NbvARB_ARG_EXPAND GLuint index, const GLbyte * v
#define glVertexAttrib4NbvARB_PACKED PACKED_void_GLuint_const_GLbyte___GENPT__
#define glVertexAttrib4NbvARB_FORMAT FORMAT_void_GLuint_const_GLbyte___GENPT__
#define glVertexAttrib4NbvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib4NbvARB_NOT_VOID_WRAP(...) {}
#define glVertexAttrib4Niv_INDEX 2418
#define glVertexAttrib4Niv_RETURN void
#define glVertexAttrib4Niv_ARG_NAMES index, v
#define glVertexAttrib4Niv_ARG_EXPAND GLuint index, const GLint * v
#define glVertexAttrib4Niv_PACKED PACKED_void_GLuint_const_GLint___GENPT__
#define glVertexAttrib4Niv_FORMAT FORMAT_void_GLuint_const_GLint___GENPT__
#define glVertexAttrib4Niv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib4Niv_NOT_VOID_WRAP(...) {}
#define glVertexAttrib4NivARB_INDEX 2419
#define glVertexAttrib4NivARB_RETURN void
#define glVertexAttrib4NivARB_ARG_NAMES index, v
#define glVertexAttrib4NivARB_ARG_EXPAND GLuint index, const GLint * v
#define glVertexAttrib4NivARB_PACKED PACKED_void_GLuint_const_GLint___GENPT__
#define glVertexAttrib4NivARB_FORMAT FORMAT_void_GLuint_const_GLint___GENPT__
#define glVertexAttrib4NivARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib4NivARB_NOT_VOID_WRAP(...) {}
#define glVertexAttrib4Nsv_INDEX 2420
#define glVertexAttrib4Nsv_RETURN void
#define glVertexAttrib4Nsv_ARG_NAMES index, v
#define glVertexAttrib4Nsv_ARG_EXPAND GLuint index, const GLshort * v
#define glVertexAttrib4Nsv_PACKED PACKED_void_GLuint_const_GLshort___GENPT__
#define glVertexAttrib4Nsv_FORMAT FORMAT_void_GLuint_const_GLshort___GENPT__
#define glVertexAttrib4Nsv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib4Nsv_NOT_VOID_WRAP(...) {}
#define glVertexAttrib4NsvARB_INDEX 2421
#define glVertexAttrib4NsvARB_RETURN void
#define glVertexAttrib4NsvARB_ARG_NAMES index, v
#define glVertexAttrib4NsvARB_ARG_EXPAND GLuint index, const GLshort * v
#define glVertexAttrib4NsvARB_PACKED PACKED_void_GLuint_const_GLshort___GENPT__
#define glVertexAttrib4NsvARB_FORMAT FORMAT_void_GLuint_const_GLshort___GENPT__
#define glVertexAttrib4NsvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib4NsvARB_NOT_VOID_WRAP(...) {}
#define glVertexAttrib4Nub_INDEX 2422
#define glVertexAttrib4Nub_RETURN void
#define glVertexAttrib4Nub_ARG_NAMES index, x, y, z, w
#define glVertexAttrib4Nub_ARG_EXPAND GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w
#define glVertexAttrib4Nub_PACKED PACKED_void_GLuint_GLubyte_GLubyte_GLubyte_GLubyte
#define glVertexAttrib4Nub_FORMAT FORMAT_void_GLuint_GLubyte_GLubyte_GLubyte_GLubyte
#define glVertexAttrib4Nub_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib4Nub_NOT_VOID_WRAP(...) {}
#define glVertexAttrib4NubARB_INDEX 2423
#define glVertexAttrib4NubARB_RETURN void
#define glVertexAttrib4NubARB_ARG_NAMES index, x, y, z, w
#define glVertexAttrib4NubARB_ARG_EXPAND GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w
#define glVertexAttrib4NubARB_PACKED PACKED_void_GLuint_GLubyte_GLubyte_GLubyte_GLubyte
#define glVertexAttrib4NubARB_FORMAT FORMAT_void_GLuint_GLubyte_GLubyte_GLubyte_GLubyte
#define glVertexAttrib4NubARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib4NubARB_NOT_VOID_WRAP(...) {}
#define glVertexAttrib4Nubv_INDEX 2424
#define glVertexAttrib4Nubv_RETURN void
#define glVertexAttrib4Nubv_ARG_NAMES index, v
#define glVertexAttrib4Nubv_ARG_EXPAND GLuint index, const GLubyte * v
#define glVertexAttrib4Nubv_PACKED PACKED_void_GLuint_const_GLubyte___GENPT__
#define glVertexAttrib4Nubv_FORMAT FORMAT_void_GLuint_const_GLubyte___GENPT__
#define glVertexAttrib4Nubv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib4Nubv_NOT_VOID_WRAP(...) {}
#define glVertexAttrib4NubvARB_INDEX 2425
#define glVertexAttrib4NubvARB_RETURN void
#define glVertexAttrib4NubvARB_ARG_NAMES index, v
#define glVertexAttrib4NubvARB_ARG_EXPAND GLuint index, const GLubyte * v
#define glVertexAttrib4NubvARB_PACKED PACKED_void_GLuint_const_GLubyte___GENPT__
#define glVertexAttrib4NubvARB_FORMAT FORMAT_void_GLuint_const_GLubyte___GENPT__
#define glVertexAttrib4NubvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib4NubvARB_NOT_VOID_WRAP(...) {}
#define glVertexAttrib4Nuiv_INDEX 2426
#define glVertexAttrib4Nuiv_RETURN void
#define glVertexAttrib4Nuiv_ARG_NAMES index, v
#define glVertexAttrib4Nuiv_ARG_EXPAND GLuint index, const GLuint * v
#define glVertexAttrib4Nuiv_PACKED PACKED_void_GLuint_const_GLuint___GENPT__
#define glVertexAttrib4Nuiv_FORMAT FORMAT_void_GLuint_const_GLuint___GENPT__
#define glVertexAttrib4Nuiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib4Nuiv_NOT_VOID_WRAP(...) {}
#define glVertexAttrib4NuivARB_INDEX 2427
#define glVertexAttrib4NuivARB_RETURN void
#define glVertexAttrib4NuivARB_ARG_NAMES index, v
#define glVertexAttrib4NuivARB_ARG_EXPAND GLuint index, const GLuint * v
#define glVertexAttrib4NuivARB_PACKED PACKED_void_GLuint_const_GLuint___GENPT__
#define glVertexAttrib4NuivARB_FORMAT FORMAT_void_GLuint_const_GLuint___GENPT__
#define glVertexAttrib4NuivARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib4NuivARB_NOT_VOID_WRAP(...) {}
#define glVertexAttrib4Nusv_INDEX 2428
#define glVertexAttrib4Nusv_RETURN void
#define glVertexAttrib4Nusv_ARG_NAMES index, v
#define glVertexAttrib4Nusv_ARG_EXPAND GLuint index, const GLushort * v
#define glVertexAttrib4Nusv_PACKED PACKED_void_GLuint_const_GLushort___GENPT__
#define glVertexAttrib4Nusv_FORMAT FORMAT_void_GLuint_const_GLushort___GENPT__
#define glVertexAttrib4Nusv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib4Nusv_NOT_VOID_WRAP(...) {}
#define glVertexAttrib4NusvARB_INDEX 2429
#define glVertexAttrib4NusvARB_RETURN void
#define glVertexAttrib4NusvARB_ARG_NAMES index, v
#define glVertexAttrib4NusvARB_ARG_EXPAND GLuint index, const GLushort * v
#define glVertexAttrib4NusvARB_PACKED PACKED_void_GLuint_const_GLushort___GENPT__
#define glVertexAttrib4NusvARB_FORMAT FORMAT_void_GLuint_const_GLushort___GENPT__
#define glVertexAttrib4NusvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib4NusvARB_NOT_VOID_WRAP(...) {}
#define glVertexAttrib4bv_INDEX 2430
#define glVertexAttrib4bv_RETURN void
#define glVertexAttrib4bv_ARG_NAMES index, v
#define glVertexAttrib4bv_ARG_EXPAND GLuint index, const GLbyte * v
#define glVertexAttrib4bv_PACKED PACKED_void_GLuint_const_GLbyte___GENPT__
#define glVertexAttrib4bv_FORMAT FORMAT_void_GLuint_const_GLbyte___GENPT__
#define glVertexAttrib4bv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib4bv_NOT_VOID_WRAP(...) {}
#define glVertexAttrib4bvARB_INDEX 2431
#define glVertexAttrib4bvARB_RETURN void
#define glVertexAttrib4bvARB_ARG_NAMES index, v
#define glVertexAttrib4bvARB_ARG_EXPAND GLuint index, const GLbyte * v
#define glVertexAttrib4bvARB_PACKED PACKED_void_GLuint_const_GLbyte___GENPT__
#define glVertexAttrib4bvARB_FORMAT FORMAT_void_GLuint_const_GLbyte___GENPT__
#define glVertexAttrib4bvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib4bvARB_NOT_VOID_WRAP(...) {}
#define glVertexAttrib4d_INDEX 2432
#define glVertexAttrib4d_RETURN void
#define glVertexAttrib4d_ARG_NAMES index, x, y, z, w
#define glVertexAttrib4d_ARG_EXPAND GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w
#define glVertexAttrib4d_PACKED PACKED_void_GLuint_GLdouble_GLdouble_GLdouble_GLdouble
#define glVertexAttrib4d_FORMAT FORMAT_void_GLuint_GLdouble_GLdouble_GLdouble_GLdouble
#define glVertexAttrib4d_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib4d_NOT_VOID_WRAP(...) {}
#define glVertexAttrib4dARB_INDEX 2433
#define glVertexAttrib4dARB_RETURN void
#define glVertexAttrib4dARB_ARG_NAMES index, x, y, z, w
#define glVertexAttrib4dARB_ARG_EXPAND GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w
#define glVertexAttrib4dARB_PACKED PACKED_void_GLuint_GLdouble_GLdouble_GLdouble_GLdouble
#define glVertexAttrib4dARB_FORMAT FORMAT_void_GLuint_GLdouble_GLdouble_GLdouble_GLdouble
#define glVertexAttrib4dARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib4dARB_NOT_VOID_WRAP(...) {}
#define glVertexAttrib4dNV_INDEX 2434
#define glVertexAttrib4dNV_RETURN void
#define glVertexAttrib4dNV_ARG_NAMES index, x, y, z, w
#define glVertexAttrib4dNV_ARG_EXPAND GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w
#define glVertexAttrib4dNV_PACKED PACKED_void_GLuint_GLdouble_GLdouble_GLdouble_GLdouble
#define glVertexAttrib4dNV_FORMAT FORMAT_void_GLuint_GLdouble_GLdouble_GLdouble_GLdouble
#define glVertexAttrib4dNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib4dNV_NOT_VOID_WRAP(...) {}
#define glVertexAttrib4dv_INDEX 2435
#define glVertexAttrib4dv_RETURN void
#define glVertexAttrib4dv_ARG_NAMES index, v
#define glVertexAttrib4dv_ARG_EXPAND GLuint index, const GLdouble * v
#define glVertexAttrib4dv_PACKED PACKED_void_GLuint_const_GLdouble___GENPT__
#define glVertexAttrib4dv_FORMAT FORMAT_void_GLuint_const_GLdouble___GENPT__
#define glVertexAttrib4dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib4dv_NOT_VOID_WRAP(...) {}
#define glVertexAttrib4dvARB_INDEX 2436
#define glVertexAttrib4dvARB_RETURN void
#define glVertexAttrib4dvARB_ARG_NAMES index, v
#define glVertexAttrib4dvARB_ARG_EXPAND GLuint index, const GLdouble * v
#define glVertexAttrib4dvARB_PACKED PACKED_void_GLuint_const_GLdouble___GENPT__
#define glVertexAttrib4dvARB_FORMAT FORMAT_void_GLuint_const_GLdouble___GENPT__
#define glVertexAttrib4dvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib4dvARB_NOT_VOID_WRAP(...) {}
#define glVertexAttrib4dvNV_INDEX 2437
#define glVertexAttrib4dvNV_RETURN void
#define glVertexAttrib4dvNV_ARG_NAMES index, v
#define glVertexAttrib4dvNV_ARG_EXPAND GLuint index, const GLdouble * v
#define glVertexAttrib4dvNV_PACKED PACKED_void_GLuint_const_GLdouble___GENPT__
#define glVertexAttrib4dvNV_FORMAT FORMAT_void_GLuint_const_GLdouble___GENPT__
#define glVertexAttrib4dvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib4dvNV_NOT_VOID_WRAP(...) {}
#define glVertexAttrib4f_INDEX 2438
#define glVertexAttrib4f_RETURN void
#define glVertexAttrib4f_ARG_NAMES index, x, y, z, w
#define glVertexAttrib4f_ARG_EXPAND GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w
#define glVertexAttrib4f_PACKED PACKED_void_GLuint_GLfloat_GLfloat_GLfloat_GLfloat
#define glVertexAttrib4f_FORMAT FORMAT_void_GLuint_GLfloat_GLfloat_GLfloat_GLfloat
#define glVertexAttrib4f_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib4f_NOT_VOID_WRAP(...) {}
#define glVertexAttrib4fARB_INDEX 2439
#define glVertexAttrib4fARB_RETURN void
#define glVertexAttrib4fARB_ARG_NAMES index, x, y, z, w
#define glVertexAttrib4fARB_ARG_EXPAND GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w
#define glVertexAttrib4fARB_PACKED PACKED_void_GLuint_GLfloat_GLfloat_GLfloat_GLfloat
#define glVertexAttrib4fARB_FORMAT FORMAT_void_GLuint_GLfloat_GLfloat_GLfloat_GLfloat
#define glVertexAttrib4fARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib4fARB_NOT_VOID_WRAP(...) {}
#define glVertexAttrib4fNV_INDEX 2440
#define glVertexAttrib4fNV_RETURN void
#define glVertexAttrib4fNV_ARG_NAMES index, x, y, z, w
#define glVertexAttrib4fNV_ARG_EXPAND GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w
#define glVertexAttrib4fNV_PACKED PACKED_void_GLuint_GLfloat_GLfloat_GLfloat_GLfloat
#define glVertexAttrib4fNV_FORMAT FORMAT_void_GLuint_GLfloat_GLfloat_GLfloat_GLfloat
#define glVertexAttrib4fNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib4fNV_NOT_VOID_WRAP(...) {}
#define glVertexAttrib4fv_INDEX 2441
#define glVertexAttrib4fv_RETURN void
#define glVertexAttrib4fv_ARG_NAMES index, v
#define glVertexAttrib4fv_ARG_EXPAND GLuint index, const GLfloat * v
#define glVertexAttrib4fv_PACKED PACKED_void_GLuint_const_GLfloat___GENPT__
#define glVertexAttrib4fv_FORMAT FORMAT_void_GLuint_const_GLfloat___GENPT__
#define glVertexAttrib4fv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib4fv_NOT_VOID_WRAP(...) {}
#define glVertexAttrib4fvARB_INDEX 2442
#define glVertexAttrib4fvARB_RETURN void
#define glVertexAttrib4fvARB_ARG_NAMES index, v
#define glVertexAttrib4fvARB_ARG_EXPAND GLuint index, const GLfloat * v
#define glVertexAttrib4fvARB_PACKED PACKED_void_GLuint_const_GLfloat___GENPT__
#define glVertexAttrib4fvARB_FORMAT FORMAT_void_GLuint_const_GLfloat___GENPT__
#define glVertexAttrib4fvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib4fvARB_NOT_VOID_WRAP(...) {}
#define glVertexAttrib4fvNV_INDEX 2443
#define glVertexAttrib4fvNV_RETURN void
#define glVertexAttrib4fvNV_ARG_NAMES index, v
#define glVertexAttrib4fvNV_ARG_EXPAND GLuint index, const GLfloat * v
#define glVertexAttrib4fvNV_PACKED PACKED_void_GLuint_const_GLfloat___GENPT__
#define glVertexAttrib4fvNV_FORMAT FORMAT_void_GLuint_const_GLfloat___GENPT__
#define glVertexAttrib4fvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib4fvNV_NOT_VOID_WRAP(...) {}
#define glVertexAttrib4hNV_INDEX 2444
#define glVertexAttrib4hNV_RETURN void
#define glVertexAttrib4hNV_ARG_NAMES index, x, y, z, w
#define glVertexAttrib4hNV_ARG_EXPAND GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w
#define glVertexAttrib4hNV_PACKED PACKED_void_GLuint_GLhalfNV_GLhalfNV_GLhalfNV_GLhalfNV
#define glVertexAttrib4hNV_FORMAT FORMAT_void_GLuint_GLhalfNV_GLhalfNV_GLhalfNV_GLhalfNV
#define glVertexAttrib4hNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib4hNV_NOT_VOID_WRAP(...) {}
#define glVertexAttrib4hvNV_INDEX 2445
#define glVertexAttrib4hvNV_RETURN void
#define glVertexAttrib4hvNV_ARG_NAMES index, v
#define glVertexAttrib4hvNV_ARG_EXPAND GLuint index, const GLhalfNV * v
#define glVertexAttrib4hvNV_PACKED PACKED_void_GLuint_const_GLhalfNV___GENPT__
#define glVertexAttrib4hvNV_FORMAT FORMAT_void_GLuint_const_GLhalfNV___GENPT__
#define glVertexAttrib4hvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib4hvNV_NOT_VOID_WRAP(...) {}
#define glVertexAttrib4iv_INDEX 2446
#define glVertexAttrib4iv_RETURN void
#define glVertexAttrib4iv_ARG_NAMES index, v
#define glVertexAttrib4iv_ARG_EXPAND GLuint index, const GLint * v
#define glVertexAttrib4iv_PACKED PACKED_void_GLuint_const_GLint___GENPT__
#define glVertexAttrib4iv_FORMAT FORMAT_void_GLuint_const_GLint___GENPT__
#define glVertexAttrib4iv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib4iv_NOT_VOID_WRAP(...) {}
#define glVertexAttrib4ivARB_INDEX 2447
#define glVertexAttrib4ivARB_RETURN void
#define glVertexAttrib4ivARB_ARG_NAMES index, v
#define glVertexAttrib4ivARB_ARG_EXPAND GLuint index, const GLint * v
#define glVertexAttrib4ivARB_PACKED PACKED_void_GLuint_const_GLint___GENPT__
#define glVertexAttrib4ivARB_FORMAT FORMAT_void_GLuint_const_GLint___GENPT__
#define glVertexAttrib4ivARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib4ivARB_NOT_VOID_WRAP(...) {}
#define glVertexAttrib4s_INDEX 2448
#define glVertexAttrib4s_RETURN void
#define glVertexAttrib4s_ARG_NAMES index, x, y, z, w
#define glVertexAttrib4s_ARG_EXPAND GLuint index, GLshort x, GLshort y, GLshort z, GLshort w
#define glVertexAttrib4s_PACKED PACKED_void_GLuint_GLshort_GLshort_GLshort_GLshort
#define glVertexAttrib4s_FORMAT FORMAT_void_GLuint_GLshort_GLshort_GLshort_GLshort
#define glVertexAttrib4s_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib4s_NOT_VOID_WRAP(...) {}
#define glVertexAttrib4sARB_INDEX 2449
#define glVertexAttrib4sARB_RETURN void
#define glVertexAttrib4sARB_ARG_NAMES index, x, y, z, w
#define glVertexAttrib4sARB_ARG_EXPAND GLuint index, GLshort x, GLshort y, GLshort z, GLshort w
#define glVertexAttrib4sARB_PACKED PACKED_void_GLuint_GLshort_GLshort_GLshort_GLshort
#define glVertexAttrib4sARB_FORMAT FORMAT_void_GLuint_GLshort_GLshort_GLshort_GLshort
#define glVertexAttrib4sARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib4sARB_NOT_VOID_WRAP(...) {}
#define glVertexAttrib4sNV_INDEX 2450
#define glVertexAttrib4sNV_RETURN void
#define glVertexAttrib4sNV_ARG_NAMES index, x, y, z, w
#define glVertexAttrib4sNV_ARG_EXPAND GLuint index, GLshort x, GLshort y, GLshort z, GLshort w
#define glVertexAttrib4sNV_PACKED PACKED_void_GLuint_GLshort_GLshort_GLshort_GLshort
#define glVertexAttrib4sNV_FORMAT FORMAT_void_GLuint_GLshort_GLshort_GLshort_GLshort
#define glVertexAttrib4sNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib4sNV_NOT_VOID_WRAP(...) {}
#define glVertexAttrib4sv_INDEX 2451
#define glVertexAttrib4sv_RETURN void
#define glVertexAttrib4sv_ARG_NAMES index, v
#define glVertexAttrib4sv_ARG_EXPAND GLuint index, const GLshort * v
#define glVertexAttrib4sv_PACKED PACKED_void_GLuint_const_GLshort___GENPT__
#define glVertexAttrib4sv_FORMAT FORMAT_void_GLuint_const_GLshort___GENPT__
#define glVertexAttrib4sv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib4sv_NOT_VOID_WRAP(...) {}
#define glVertexAttrib4svARB_INDEX 2452
#define glVertexAttrib4svARB_RETURN void
#define glVertexAttrib4svARB_ARG_NAMES index, v
#define glVertexAttrib4svARB_ARG_EXPAND GLuint index, const GLshort * v
#define glVertexAttrib4svARB_PACKED PACKED_void_GLuint_const_GLshort___GENPT__
#define glVertexAttrib4svARB_FORMAT FORMAT_void_GLuint_const_GLshort___GENPT__
#define glVertexAttrib4svARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib4svARB_NOT_VOID_WRAP(...) {}
#define glVertexAttrib4svNV_INDEX 2453
#define glVertexAttrib4svNV_RETURN void
#define glVertexAttrib4svNV_ARG_NAMES index, v
#define glVertexAttrib4svNV_ARG_EXPAND GLuint index, const GLshort * v
#define glVertexAttrib4svNV_PACKED PACKED_void_GLuint_const_GLshort___GENPT__
#define glVertexAttrib4svNV_FORMAT FORMAT_void_GLuint_const_GLshort___GENPT__
#define glVertexAttrib4svNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib4svNV_NOT_VOID_WRAP(...) {}
#define glVertexAttrib4ubNV_INDEX 2454
#define glVertexAttrib4ubNV_RETURN void
#define glVertexAttrib4ubNV_ARG_NAMES index, x, y, z, w
#define glVertexAttrib4ubNV_ARG_EXPAND GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w
#define glVertexAttrib4ubNV_PACKED PACKED_void_GLuint_GLubyte_GLubyte_GLubyte_GLubyte
#define glVertexAttrib4ubNV_FORMAT FORMAT_void_GLuint_GLubyte_GLubyte_GLubyte_GLubyte
#define glVertexAttrib4ubNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib4ubNV_NOT_VOID_WRAP(...) {}
#define glVertexAttrib4ubv_INDEX 2455
#define glVertexAttrib4ubv_RETURN void
#define glVertexAttrib4ubv_ARG_NAMES index, v
#define glVertexAttrib4ubv_ARG_EXPAND GLuint index, const GLubyte * v
#define glVertexAttrib4ubv_PACKED PACKED_void_GLuint_const_GLubyte___GENPT__
#define glVertexAttrib4ubv_FORMAT FORMAT_void_GLuint_const_GLubyte___GENPT__
#define glVertexAttrib4ubv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib4ubv_NOT_VOID_WRAP(...) {}
#define glVertexAttrib4ubvARB_INDEX 2456
#define glVertexAttrib4ubvARB_RETURN void
#define glVertexAttrib4ubvARB_ARG_NAMES index, v
#define glVertexAttrib4ubvARB_ARG_EXPAND GLuint index, const GLubyte * v
#define glVertexAttrib4ubvARB_PACKED PACKED_void_GLuint_const_GLubyte___GENPT__
#define glVertexAttrib4ubvARB_FORMAT FORMAT_void_GLuint_const_GLubyte___GENPT__
#define glVertexAttrib4ubvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib4ubvARB_NOT_VOID_WRAP(...) {}
#define glVertexAttrib4ubvNV_INDEX 2457
#define glVertexAttrib4ubvNV_RETURN void
#define glVertexAttrib4ubvNV_ARG_NAMES index, v
#define glVertexAttrib4ubvNV_ARG_EXPAND GLuint index, const GLubyte * v
#define glVertexAttrib4ubvNV_PACKED PACKED_void_GLuint_const_GLubyte___GENPT__
#define glVertexAttrib4ubvNV_FORMAT FORMAT_void_GLuint_const_GLubyte___GENPT__
#define glVertexAttrib4ubvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib4ubvNV_NOT_VOID_WRAP(...) {}
#define glVertexAttrib4uiv_INDEX 2458
#define glVertexAttrib4uiv_RETURN void
#define glVertexAttrib4uiv_ARG_NAMES index, v
#define glVertexAttrib4uiv_ARG_EXPAND GLuint index, const GLuint * v
#define glVertexAttrib4uiv_PACKED PACKED_void_GLuint_const_GLuint___GENPT__
#define glVertexAttrib4uiv_FORMAT FORMAT_void_GLuint_const_GLuint___GENPT__
#define glVertexAttrib4uiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib4uiv_NOT_VOID_WRAP(...) {}
#define glVertexAttrib4uivARB_INDEX 2459
#define glVertexAttrib4uivARB_RETURN void
#define glVertexAttrib4uivARB_ARG_NAMES index, v
#define glVertexAttrib4uivARB_ARG_EXPAND GLuint index, const GLuint * v
#define glVertexAttrib4uivARB_PACKED PACKED_void_GLuint_const_GLuint___GENPT__
#define glVertexAttrib4uivARB_FORMAT FORMAT_void_GLuint_const_GLuint___GENPT__
#define glVertexAttrib4uivARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib4uivARB_NOT_VOID_WRAP(...) {}
#define glVertexAttrib4usv_INDEX 2460
#define glVertexAttrib4usv_RETURN void
#define glVertexAttrib4usv_ARG_NAMES index, v
#define glVertexAttrib4usv_ARG_EXPAND GLuint index, const GLushort * v
#define glVertexAttrib4usv_PACKED PACKED_void_GLuint_const_GLushort___GENPT__
#define glVertexAttrib4usv_FORMAT FORMAT_void_GLuint_const_GLushort___GENPT__
#define glVertexAttrib4usv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib4usv_NOT_VOID_WRAP(...) {}
#define glVertexAttrib4usvARB_INDEX 2461
#define glVertexAttrib4usvARB_RETURN void
#define glVertexAttrib4usvARB_ARG_NAMES index, v
#define glVertexAttrib4usvARB_ARG_EXPAND GLuint index, const GLushort * v
#define glVertexAttrib4usvARB_PACKED PACKED_void_GLuint_const_GLushort___GENPT__
#define glVertexAttrib4usvARB_FORMAT FORMAT_void_GLuint_const_GLushort___GENPT__
#define glVertexAttrib4usvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttrib4usvARB_NOT_VOID_WRAP(...) {}
#define glVertexAttribArrayObjectATI_INDEX 2462
#define glVertexAttribArrayObjectATI_RETURN void
#define glVertexAttribArrayObjectATI_ARG_NAMES index, size, type, normalized, stride, buffer, offset
#define glVertexAttribArrayObjectATI_ARG_EXPAND GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset
#define glVertexAttribArrayObjectATI_PACKED PACKED_void_GLuint_GLint_GLenum_GLboolean_GLsizei_GLuint_GLuint
#define glVertexAttribArrayObjectATI_FORMAT FORMAT_void_GLuint_GLint_GLenum_GLboolean_GLsizei_GLuint_GLuint
#define glVertexAttribArrayObjectATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribArrayObjectATI_NOT_VOID_WRAP(...) {}
#define glVertexAttribBinding_INDEX 2463
#define glVertexAttribBinding_RETURN void
#define glVertexAttribBinding_ARG_NAMES attribindex, bindingindex
#define glVertexAttribBinding_ARG_EXPAND GLuint attribindex, GLuint bindingindex
#define glVertexAttribBinding_PACKED PACKED_void_GLuint_GLuint
#define glVertexAttribBinding_FORMAT FORMAT_void_GLuint_GLuint
#define glVertexAttribBinding_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribBinding_NOT_VOID_WRAP(...) {}
#define glVertexAttribDivisor_INDEX 2464
#define glVertexAttribDivisor_RETURN void
#define glVertexAttribDivisor_ARG_NAMES index, divisor
#define glVertexAttribDivisor_ARG_EXPAND GLuint index, GLuint divisor
#define glVertexAttribDivisor_PACKED PACKED_void_GLuint_GLuint
#define glVertexAttribDivisor_FORMAT FORMAT_void_GLuint_GLuint
#define glVertexAttribDivisor_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribDivisor_NOT_VOID_WRAP(...) {}
#define glVertexAttribDivisorARB_INDEX 2465
#define glVertexAttribDivisorARB_RETURN void
#define glVertexAttribDivisorARB_ARG_NAMES index, divisor
#define glVertexAttribDivisorARB_ARG_EXPAND GLuint index, GLuint divisor
#define glVertexAttribDivisorARB_PACKED PACKED_void_GLuint_GLuint
#define glVertexAttribDivisorARB_FORMAT FORMAT_void_GLuint_GLuint
#define glVertexAttribDivisorARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribDivisorARB_NOT_VOID_WRAP(...) {}
#define glVertexAttribFormat_INDEX 2466
#define glVertexAttribFormat_RETURN void
#define glVertexAttribFormat_ARG_NAMES attribindex, size, type, normalized, relativeoffset
#define glVertexAttribFormat_ARG_EXPAND GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset
#define glVertexAttribFormat_PACKED PACKED_void_GLuint_GLint_GLenum_GLboolean_GLuint
#define glVertexAttribFormat_FORMAT FORMAT_void_GLuint_GLint_GLenum_GLboolean_GLuint
#define glVertexAttribFormat_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribFormat_NOT_VOID_WRAP(...) {}
#define glVertexAttribFormatNV_INDEX 2467
#define glVertexAttribFormatNV_RETURN void
#define glVertexAttribFormatNV_ARG_NAMES index, size, type, normalized, stride
#define glVertexAttribFormatNV_ARG_EXPAND GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride
#define glVertexAttribFormatNV_PACKED PACKED_void_GLuint_GLint_GLenum_GLboolean_GLsizei
#define glVertexAttribFormatNV_FORMAT FORMAT_void_GLuint_GLint_GLenum_GLboolean_GLsizei
#define glVertexAttribFormatNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribFormatNV_NOT_VOID_WRAP(...) {}
#define glVertexAttribI1i_INDEX 2468
#define glVertexAttribI1i_RETURN void
#define glVertexAttribI1i_ARG_NAMES index, x
#define glVertexAttribI1i_ARG_EXPAND GLuint index, GLint x
#define glVertexAttribI1i_PACKED PACKED_void_GLuint_GLint
#define glVertexAttribI1i_FORMAT FORMAT_void_GLuint_GLint
#define glVertexAttribI1i_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribI1i_NOT_VOID_WRAP(...) {}
#define glVertexAttribI1iEXT_INDEX 2469
#define glVertexAttribI1iEXT_RETURN void
#define glVertexAttribI1iEXT_ARG_NAMES index, x
#define glVertexAttribI1iEXT_ARG_EXPAND GLuint index, GLint x
#define glVertexAttribI1iEXT_PACKED PACKED_void_GLuint_GLint
#define glVertexAttribI1iEXT_FORMAT FORMAT_void_GLuint_GLint
#define glVertexAttribI1iEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribI1iEXT_NOT_VOID_WRAP(...) {}
#define glVertexAttribI1iv_INDEX 2470
#define glVertexAttribI1iv_RETURN void
#define glVertexAttribI1iv_ARG_NAMES index, v
#define glVertexAttribI1iv_ARG_EXPAND GLuint index, const GLint * v
#define glVertexAttribI1iv_PACKED PACKED_void_GLuint_const_GLint___GENPT__
#define glVertexAttribI1iv_FORMAT FORMAT_void_GLuint_const_GLint___GENPT__
#define glVertexAttribI1iv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribI1iv_NOT_VOID_WRAP(...) {}
#define glVertexAttribI1ivEXT_INDEX 2471
#define glVertexAttribI1ivEXT_RETURN void
#define glVertexAttribI1ivEXT_ARG_NAMES index, v
#define glVertexAttribI1ivEXT_ARG_EXPAND GLuint index, const GLint * v
#define glVertexAttribI1ivEXT_PACKED PACKED_void_GLuint_const_GLint___GENPT__
#define glVertexAttribI1ivEXT_FORMAT FORMAT_void_GLuint_const_GLint___GENPT__
#define glVertexAttribI1ivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribI1ivEXT_NOT_VOID_WRAP(...) {}
#define glVertexAttribI1ui_INDEX 2472
#define glVertexAttribI1ui_RETURN void
#define glVertexAttribI1ui_ARG_NAMES index, x
#define glVertexAttribI1ui_ARG_EXPAND GLuint index, GLuint x
#define glVertexAttribI1ui_PACKED PACKED_void_GLuint_GLuint
#define glVertexAttribI1ui_FORMAT FORMAT_void_GLuint_GLuint
#define glVertexAttribI1ui_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribI1ui_NOT_VOID_WRAP(...) {}
#define glVertexAttribI1uiEXT_INDEX 2473
#define glVertexAttribI1uiEXT_RETURN void
#define glVertexAttribI1uiEXT_ARG_NAMES index, x
#define glVertexAttribI1uiEXT_ARG_EXPAND GLuint index, GLuint x
#define glVertexAttribI1uiEXT_PACKED PACKED_void_GLuint_GLuint
#define glVertexAttribI1uiEXT_FORMAT FORMAT_void_GLuint_GLuint
#define glVertexAttribI1uiEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribI1uiEXT_NOT_VOID_WRAP(...) {}
#define glVertexAttribI1uiv_INDEX 2474
#define glVertexAttribI1uiv_RETURN void
#define glVertexAttribI1uiv_ARG_NAMES index, v
#define glVertexAttribI1uiv_ARG_EXPAND GLuint index, const GLuint * v
#define glVertexAttribI1uiv_PACKED PACKED_void_GLuint_const_GLuint___GENPT__
#define glVertexAttribI1uiv_FORMAT FORMAT_void_GLuint_const_GLuint___GENPT__
#define glVertexAttribI1uiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribI1uiv_NOT_VOID_WRAP(...) {}
#define glVertexAttribI1uivEXT_INDEX 2475
#define glVertexAttribI1uivEXT_RETURN void
#define glVertexAttribI1uivEXT_ARG_NAMES index, v
#define glVertexAttribI1uivEXT_ARG_EXPAND GLuint index, const GLuint * v
#define glVertexAttribI1uivEXT_PACKED PACKED_void_GLuint_const_GLuint___GENPT__
#define glVertexAttribI1uivEXT_FORMAT FORMAT_void_GLuint_const_GLuint___GENPT__
#define glVertexAttribI1uivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribI1uivEXT_NOT_VOID_WRAP(...) {}
#define glVertexAttribI2i_INDEX 2476
#define glVertexAttribI2i_RETURN void
#define glVertexAttribI2i_ARG_NAMES index, x, y
#define glVertexAttribI2i_ARG_EXPAND GLuint index, GLint x, GLint y
#define glVertexAttribI2i_PACKED PACKED_void_GLuint_GLint_GLint
#define glVertexAttribI2i_FORMAT FORMAT_void_GLuint_GLint_GLint
#define glVertexAttribI2i_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribI2i_NOT_VOID_WRAP(...) {}
#define glVertexAttribI2iEXT_INDEX 2477
#define glVertexAttribI2iEXT_RETURN void
#define glVertexAttribI2iEXT_ARG_NAMES index, x, y
#define glVertexAttribI2iEXT_ARG_EXPAND GLuint index, GLint x, GLint y
#define glVertexAttribI2iEXT_PACKED PACKED_void_GLuint_GLint_GLint
#define glVertexAttribI2iEXT_FORMAT FORMAT_void_GLuint_GLint_GLint
#define glVertexAttribI2iEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribI2iEXT_NOT_VOID_WRAP(...) {}
#define glVertexAttribI2iv_INDEX 2478
#define glVertexAttribI2iv_RETURN void
#define glVertexAttribI2iv_ARG_NAMES index, v
#define glVertexAttribI2iv_ARG_EXPAND GLuint index, const GLint * v
#define glVertexAttribI2iv_PACKED PACKED_void_GLuint_const_GLint___GENPT__
#define glVertexAttribI2iv_FORMAT FORMAT_void_GLuint_const_GLint___GENPT__
#define glVertexAttribI2iv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribI2iv_NOT_VOID_WRAP(...) {}
#define glVertexAttribI2ivEXT_INDEX 2479
#define glVertexAttribI2ivEXT_RETURN void
#define glVertexAttribI2ivEXT_ARG_NAMES index, v
#define glVertexAttribI2ivEXT_ARG_EXPAND GLuint index, const GLint * v
#define glVertexAttribI2ivEXT_PACKED PACKED_void_GLuint_const_GLint___GENPT__
#define glVertexAttribI2ivEXT_FORMAT FORMAT_void_GLuint_const_GLint___GENPT__
#define glVertexAttribI2ivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribI2ivEXT_NOT_VOID_WRAP(...) {}
#define glVertexAttribI2ui_INDEX 2480
#define glVertexAttribI2ui_RETURN void
#define glVertexAttribI2ui_ARG_NAMES index, x, y
#define glVertexAttribI2ui_ARG_EXPAND GLuint index, GLuint x, GLuint y
#define glVertexAttribI2ui_PACKED PACKED_void_GLuint_GLuint_GLuint
#define glVertexAttribI2ui_FORMAT FORMAT_void_GLuint_GLuint_GLuint
#define glVertexAttribI2ui_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribI2ui_NOT_VOID_WRAP(...) {}
#define glVertexAttribI2uiEXT_INDEX 2481
#define glVertexAttribI2uiEXT_RETURN void
#define glVertexAttribI2uiEXT_ARG_NAMES index, x, y
#define glVertexAttribI2uiEXT_ARG_EXPAND GLuint index, GLuint x, GLuint y
#define glVertexAttribI2uiEXT_PACKED PACKED_void_GLuint_GLuint_GLuint
#define glVertexAttribI2uiEXT_FORMAT FORMAT_void_GLuint_GLuint_GLuint
#define glVertexAttribI2uiEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribI2uiEXT_NOT_VOID_WRAP(...) {}
#define glVertexAttribI2uiv_INDEX 2482
#define glVertexAttribI2uiv_RETURN void
#define glVertexAttribI2uiv_ARG_NAMES index, v
#define glVertexAttribI2uiv_ARG_EXPAND GLuint index, const GLuint * v
#define glVertexAttribI2uiv_PACKED PACKED_void_GLuint_const_GLuint___GENPT__
#define glVertexAttribI2uiv_FORMAT FORMAT_void_GLuint_const_GLuint___GENPT__
#define glVertexAttribI2uiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribI2uiv_NOT_VOID_WRAP(...) {}
#define glVertexAttribI2uivEXT_INDEX 2483
#define glVertexAttribI2uivEXT_RETURN void
#define glVertexAttribI2uivEXT_ARG_NAMES index, v
#define glVertexAttribI2uivEXT_ARG_EXPAND GLuint index, const GLuint * v
#define glVertexAttribI2uivEXT_PACKED PACKED_void_GLuint_const_GLuint___GENPT__
#define glVertexAttribI2uivEXT_FORMAT FORMAT_void_GLuint_const_GLuint___GENPT__
#define glVertexAttribI2uivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribI2uivEXT_NOT_VOID_WRAP(...) {}
#define glVertexAttribI3i_INDEX 2484
#define glVertexAttribI3i_RETURN void
#define glVertexAttribI3i_ARG_NAMES index, x, y, z
#define glVertexAttribI3i_ARG_EXPAND GLuint index, GLint x, GLint y, GLint z
#define glVertexAttribI3i_PACKED PACKED_void_GLuint_GLint_GLint_GLint
#define glVertexAttribI3i_FORMAT FORMAT_void_GLuint_GLint_GLint_GLint
#define glVertexAttribI3i_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribI3i_NOT_VOID_WRAP(...) {}
#define glVertexAttribI3iEXT_INDEX 2485
#define glVertexAttribI3iEXT_RETURN void
#define glVertexAttribI3iEXT_ARG_NAMES index, x, y, z
#define glVertexAttribI3iEXT_ARG_EXPAND GLuint index, GLint x, GLint y, GLint z
#define glVertexAttribI3iEXT_PACKED PACKED_void_GLuint_GLint_GLint_GLint
#define glVertexAttribI3iEXT_FORMAT FORMAT_void_GLuint_GLint_GLint_GLint
#define glVertexAttribI3iEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribI3iEXT_NOT_VOID_WRAP(...) {}
#define glVertexAttribI3iv_INDEX 2486
#define glVertexAttribI3iv_RETURN void
#define glVertexAttribI3iv_ARG_NAMES index, v
#define glVertexAttribI3iv_ARG_EXPAND GLuint index, const GLint * v
#define glVertexAttribI3iv_PACKED PACKED_void_GLuint_const_GLint___GENPT__
#define glVertexAttribI3iv_FORMAT FORMAT_void_GLuint_const_GLint___GENPT__
#define glVertexAttribI3iv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribI3iv_NOT_VOID_WRAP(...) {}
#define glVertexAttribI3ivEXT_INDEX 2487
#define glVertexAttribI3ivEXT_RETURN void
#define glVertexAttribI3ivEXT_ARG_NAMES index, v
#define glVertexAttribI3ivEXT_ARG_EXPAND GLuint index, const GLint * v
#define glVertexAttribI3ivEXT_PACKED PACKED_void_GLuint_const_GLint___GENPT__
#define glVertexAttribI3ivEXT_FORMAT FORMAT_void_GLuint_const_GLint___GENPT__
#define glVertexAttribI3ivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribI3ivEXT_NOT_VOID_WRAP(...) {}
#define glVertexAttribI3ui_INDEX 2488
#define glVertexAttribI3ui_RETURN void
#define glVertexAttribI3ui_ARG_NAMES index, x, y, z
#define glVertexAttribI3ui_ARG_EXPAND GLuint index, GLuint x, GLuint y, GLuint z
#define glVertexAttribI3ui_PACKED PACKED_void_GLuint_GLuint_GLuint_GLuint
#define glVertexAttribI3ui_FORMAT FORMAT_void_GLuint_GLuint_GLuint_GLuint
#define glVertexAttribI3ui_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribI3ui_NOT_VOID_WRAP(...) {}
#define glVertexAttribI3uiEXT_INDEX 2489
#define glVertexAttribI3uiEXT_RETURN void
#define glVertexAttribI3uiEXT_ARG_NAMES index, x, y, z
#define glVertexAttribI3uiEXT_ARG_EXPAND GLuint index, GLuint x, GLuint y, GLuint z
#define glVertexAttribI3uiEXT_PACKED PACKED_void_GLuint_GLuint_GLuint_GLuint
#define glVertexAttribI3uiEXT_FORMAT FORMAT_void_GLuint_GLuint_GLuint_GLuint
#define glVertexAttribI3uiEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribI3uiEXT_NOT_VOID_WRAP(...) {}
#define glVertexAttribI3uiv_INDEX 2490
#define glVertexAttribI3uiv_RETURN void
#define glVertexAttribI3uiv_ARG_NAMES index, v
#define glVertexAttribI3uiv_ARG_EXPAND GLuint index, const GLuint * v
#define glVertexAttribI3uiv_PACKED PACKED_void_GLuint_const_GLuint___GENPT__
#define glVertexAttribI3uiv_FORMAT FORMAT_void_GLuint_const_GLuint___GENPT__
#define glVertexAttribI3uiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribI3uiv_NOT_VOID_WRAP(...) {}
#define glVertexAttribI3uivEXT_INDEX 2491
#define glVertexAttribI3uivEXT_RETURN void
#define glVertexAttribI3uivEXT_ARG_NAMES index, v
#define glVertexAttribI3uivEXT_ARG_EXPAND GLuint index, const GLuint * v
#define glVertexAttribI3uivEXT_PACKED PACKED_void_GLuint_const_GLuint___GENPT__
#define glVertexAttribI3uivEXT_FORMAT FORMAT_void_GLuint_const_GLuint___GENPT__
#define glVertexAttribI3uivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribI3uivEXT_NOT_VOID_WRAP(...) {}
#define glVertexAttribI4bv_INDEX 2492
#define glVertexAttribI4bv_RETURN void
#define glVertexAttribI4bv_ARG_NAMES index, v
#define glVertexAttribI4bv_ARG_EXPAND GLuint index, const GLbyte * v
#define glVertexAttribI4bv_PACKED PACKED_void_GLuint_const_GLbyte___GENPT__
#define glVertexAttribI4bv_FORMAT FORMAT_void_GLuint_const_GLbyte___GENPT__
#define glVertexAttribI4bv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribI4bv_NOT_VOID_WRAP(...) {}
#define glVertexAttribI4bvEXT_INDEX 2493
#define glVertexAttribI4bvEXT_RETURN void
#define glVertexAttribI4bvEXT_ARG_NAMES index, v
#define glVertexAttribI4bvEXT_ARG_EXPAND GLuint index, const GLbyte * v
#define glVertexAttribI4bvEXT_PACKED PACKED_void_GLuint_const_GLbyte___GENPT__
#define glVertexAttribI4bvEXT_FORMAT FORMAT_void_GLuint_const_GLbyte___GENPT__
#define glVertexAttribI4bvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribI4bvEXT_NOT_VOID_WRAP(...) {}
#define glVertexAttribI4i_INDEX 2494
#define glVertexAttribI4i_RETURN void
#define glVertexAttribI4i_ARG_NAMES index, x, y, z, w
#define glVertexAttribI4i_ARG_EXPAND GLuint index, GLint x, GLint y, GLint z, GLint w
#define glVertexAttribI4i_PACKED PACKED_void_GLuint_GLint_GLint_GLint_GLint
#define glVertexAttribI4i_FORMAT FORMAT_void_GLuint_GLint_GLint_GLint_GLint
#define glVertexAttribI4i_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribI4i_NOT_VOID_WRAP(...) {}
#define glVertexAttribI4iEXT_INDEX 2495
#define glVertexAttribI4iEXT_RETURN void
#define glVertexAttribI4iEXT_ARG_NAMES index, x, y, z, w
#define glVertexAttribI4iEXT_ARG_EXPAND GLuint index, GLint x, GLint y, GLint z, GLint w
#define glVertexAttribI4iEXT_PACKED PACKED_void_GLuint_GLint_GLint_GLint_GLint
#define glVertexAttribI4iEXT_FORMAT FORMAT_void_GLuint_GLint_GLint_GLint_GLint
#define glVertexAttribI4iEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribI4iEXT_NOT_VOID_WRAP(...) {}
#define glVertexAttribI4iv_INDEX 2496
#define glVertexAttribI4iv_RETURN void
#define glVertexAttribI4iv_ARG_NAMES index, v
#define glVertexAttribI4iv_ARG_EXPAND GLuint index, const GLint * v
#define glVertexAttribI4iv_PACKED PACKED_void_GLuint_const_GLint___GENPT__
#define glVertexAttribI4iv_FORMAT FORMAT_void_GLuint_const_GLint___GENPT__
#define glVertexAttribI4iv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribI4iv_NOT_VOID_WRAP(...) {}
#define glVertexAttribI4ivEXT_INDEX 2497
#define glVertexAttribI4ivEXT_RETURN void
#define glVertexAttribI4ivEXT_ARG_NAMES index, v
#define glVertexAttribI4ivEXT_ARG_EXPAND GLuint index, const GLint * v
#define glVertexAttribI4ivEXT_PACKED PACKED_void_GLuint_const_GLint___GENPT__
#define glVertexAttribI4ivEXT_FORMAT FORMAT_void_GLuint_const_GLint___GENPT__
#define glVertexAttribI4ivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribI4ivEXT_NOT_VOID_WRAP(...) {}
#define glVertexAttribI4sv_INDEX 2498
#define glVertexAttribI4sv_RETURN void
#define glVertexAttribI4sv_ARG_NAMES index, v
#define glVertexAttribI4sv_ARG_EXPAND GLuint index, const GLshort * v
#define glVertexAttribI4sv_PACKED PACKED_void_GLuint_const_GLshort___GENPT__
#define glVertexAttribI4sv_FORMAT FORMAT_void_GLuint_const_GLshort___GENPT__
#define glVertexAttribI4sv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribI4sv_NOT_VOID_WRAP(...) {}
#define glVertexAttribI4svEXT_INDEX 2499
#define glVertexAttribI4svEXT_RETURN void
#define glVertexAttribI4svEXT_ARG_NAMES index, v
#define glVertexAttribI4svEXT_ARG_EXPAND GLuint index, const GLshort * v
#define glVertexAttribI4svEXT_PACKED PACKED_void_GLuint_const_GLshort___GENPT__
#define glVertexAttribI4svEXT_FORMAT FORMAT_void_GLuint_const_GLshort___GENPT__
#define glVertexAttribI4svEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribI4svEXT_NOT_VOID_WRAP(...) {}
#define glVertexAttribI4ubv_INDEX 2500
#define glVertexAttribI4ubv_RETURN void
#define glVertexAttribI4ubv_ARG_NAMES index, v
#define glVertexAttribI4ubv_ARG_EXPAND GLuint index, const GLubyte * v
#define glVertexAttribI4ubv_PACKED PACKED_void_GLuint_const_GLubyte___GENPT__
#define glVertexAttribI4ubv_FORMAT FORMAT_void_GLuint_const_GLubyte___GENPT__
#define glVertexAttribI4ubv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribI4ubv_NOT_VOID_WRAP(...) {}
#define glVertexAttribI4ubvEXT_INDEX 2501
#define glVertexAttribI4ubvEXT_RETURN void
#define glVertexAttribI4ubvEXT_ARG_NAMES index, v
#define glVertexAttribI4ubvEXT_ARG_EXPAND GLuint index, const GLubyte * v
#define glVertexAttribI4ubvEXT_PACKED PACKED_void_GLuint_const_GLubyte___GENPT__
#define glVertexAttribI4ubvEXT_FORMAT FORMAT_void_GLuint_const_GLubyte___GENPT__
#define glVertexAttribI4ubvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribI4ubvEXT_NOT_VOID_WRAP(...) {}
#define glVertexAttribI4ui_INDEX 2502
#define glVertexAttribI4ui_RETURN void
#define glVertexAttribI4ui_ARG_NAMES index, x, y, z, w
#define glVertexAttribI4ui_ARG_EXPAND GLuint index, GLuint x, GLuint y, GLuint z, GLuint w
#define glVertexAttribI4ui_PACKED PACKED_void_GLuint_GLuint_GLuint_GLuint_GLuint
#define glVertexAttribI4ui_FORMAT FORMAT_void_GLuint_GLuint_GLuint_GLuint_GLuint
#define glVertexAttribI4ui_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribI4ui_NOT_VOID_WRAP(...) {}
#define glVertexAttribI4uiEXT_INDEX 2503
#define glVertexAttribI4uiEXT_RETURN void
#define glVertexAttribI4uiEXT_ARG_NAMES index, x, y, z, w
#define glVertexAttribI4uiEXT_ARG_EXPAND GLuint index, GLuint x, GLuint y, GLuint z, GLuint w
#define glVertexAttribI4uiEXT_PACKED PACKED_void_GLuint_GLuint_GLuint_GLuint_GLuint
#define glVertexAttribI4uiEXT_FORMAT FORMAT_void_GLuint_GLuint_GLuint_GLuint_GLuint
#define glVertexAttribI4uiEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribI4uiEXT_NOT_VOID_WRAP(...) {}
#define glVertexAttribI4uiv_INDEX 2504
#define glVertexAttribI4uiv_RETURN void
#define glVertexAttribI4uiv_ARG_NAMES index, v
#define glVertexAttribI4uiv_ARG_EXPAND GLuint index, const GLuint * v
#define glVertexAttribI4uiv_PACKED PACKED_void_GLuint_const_GLuint___GENPT__
#define glVertexAttribI4uiv_FORMAT FORMAT_void_GLuint_const_GLuint___GENPT__
#define glVertexAttribI4uiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribI4uiv_NOT_VOID_WRAP(...) {}
#define glVertexAttribI4uivEXT_INDEX 2505
#define glVertexAttribI4uivEXT_RETURN void
#define glVertexAttribI4uivEXT_ARG_NAMES index, v
#define glVertexAttribI4uivEXT_ARG_EXPAND GLuint index, const GLuint * v
#define glVertexAttribI4uivEXT_PACKED PACKED_void_GLuint_const_GLuint___GENPT__
#define glVertexAttribI4uivEXT_FORMAT FORMAT_void_GLuint_const_GLuint___GENPT__
#define glVertexAttribI4uivEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribI4uivEXT_NOT_VOID_WRAP(...) {}
#define glVertexAttribI4usv_INDEX 2506
#define glVertexAttribI4usv_RETURN void
#define glVertexAttribI4usv_ARG_NAMES index, v
#define glVertexAttribI4usv_ARG_EXPAND GLuint index, const GLushort * v
#define glVertexAttribI4usv_PACKED PACKED_void_GLuint_const_GLushort___GENPT__
#define glVertexAttribI4usv_FORMAT FORMAT_void_GLuint_const_GLushort___GENPT__
#define glVertexAttribI4usv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribI4usv_NOT_VOID_WRAP(...) {}
#define glVertexAttribI4usvEXT_INDEX 2507
#define glVertexAttribI4usvEXT_RETURN void
#define glVertexAttribI4usvEXT_ARG_NAMES index, v
#define glVertexAttribI4usvEXT_ARG_EXPAND GLuint index, const GLushort * v
#define glVertexAttribI4usvEXT_PACKED PACKED_void_GLuint_const_GLushort___GENPT__
#define glVertexAttribI4usvEXT_FORMAT FORMAT_void_GLuint_const_GLushort___GENPT__
#define glVertexAttribI4usvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribI4usvEXT_NOT_VOID_WRAP(...) {}
#define glVertexAttribIFormat_INDEX 2508
#define glVertexAttribIFormat_RETURN void
#define glVertexAttribIFormat_ARG_NAMES attribindex, size, type, relativeoffset
#define glVertexAttribIFormat_ARG_EXPAND GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset
#define glVertexAttribIFormat_PACKED PACKED_void_GLuint_GLint_GLenum_GLuint
#define glVertexAttribIFormat_FORMAT FORMAT_void_GLuint_GLint_GLenum_GLuint
#define glVertexAttribIFormat_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribIFormat_NOT_VOID_WRAP(...) {}
#define glVertexAttribIFormatNV_INDEX 2509
#define glVertexAttribIFormatNV_RETURN void
#define glVertexAttribIFormatNV_ARG_NAMES index, size, type, stride
#define glVertexAttribIFormatNV_ARG_EXPAND GLuint index, GLint size, GLenum type, GLsizei stride
#define glVertexAttribIFormatNV_PACKED PACKED_void_GLuint_GLint_GLenum_GLsizei
#define glVertexAttribIFormatNV_FORMAT FORMAT_void_GLuint_GLint_GLenum_GLsizei
#define glVertexAttribIFormatNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribIFormatNV_NOT_VOID_WRAP(...) {}
#define glVertexAttribIPointer_INDEX 2510
#define glVertexAttribIPointer_RETURN void
#define glVertexAttribIPointer_ARG_NAMES index, size, type, stride, pointer
#define glVertexAttribIPointer_ARG_EXPAND GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid * pointer
#define glVertexAttribIPointer_PACKED PACKED_void_GLuint_GLint_GLenum_GLsizei_const_GLvoid___GENPT__
#define glVertexAttribIPointer_FORMAT FORMAT_void_GLuint_GLint_GLenum_GLsizei_const_GLvoid___GENPT__
#define glVertexAttribIPointer_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribIPointer_NOT_VOID_WRAP(...) {}
#define glVertexAttribIPointerEXT_INDEX 2511
#define glVertexAttribIPointerEXT_RETURN void
#define glVertexAttribIPointerEXT_ARG_NAMES index, size, type, stride, pointer
#define glVertexAttribIPointerEXT_ARG_EXPAND GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid * pointer
#define glVertexAttribIPointerEXT_PACKED PACKED_void_GLuint_GLint_GLenum_GLsizei_const_GLvoid___GENPT__
#define glVertexAttribIPointerEXT_FORMAT FORMAT_void_GLuint_GLint_GLenum_GLsizei_const_GLvoid___GENPT__
#define glVertexAttribIPointerEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribIPointerEXT_NOT_VOID_WRAP(...) {}
#define glVertexAttribL1d_INDEX 2512
#define glVertexAttribL1d_RETURN void
#define glVertexAttribL1d_ARG_NAMES index, x
#define glVertexAttribL1d_ARG_EXPAND GLuint index, GLdouble x
#define glVertexAttribL1d_PACKED PACKED_void_GLuint_GLdouble
#define glVertexAttribL1d_FORMAT FORMAT_void_GLuint_GLdouble
#define glVertexAttribL1d_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribL1d_NOT_VOID_WRAP(...) {}
#define glVertexAttribL1dEXT_INDEX 2513
#define glVertexAttribL1dEXT_RETURN void
#define glVertexAttribL1dEXT_ARG_NAMES index, x
#define glVertexAttribL1dEXT_ARG_EXPAND GLuint index, GLdouble x
#define glVertexAttribL1dEXT_PACKED PACKED_void_GLuint_GLdouble
#define glVertexAttribL1dEXT_FORMAT FORMAT_void_GLuint_GLdouble
#define glVertexAttribL1dEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribL1dEXT_NOT_VOID_WRAP(...) {}
#define glVertexAttribL1dv_INDEX 2514
#define glVertexAttribL1dv_RETURN void
#define glVertexAttribL1dv_ARG_NAMES index, v
#define glVertexAttribL1dv_ARG_EXPAND GLuint index, const GLdouble * v
#define glVertexAttribL1dv_PACKED PACKED_void_GLuint_const_GLdouble___GENPT__
#define glVertexAttribL1dv_FORMAT FORMAT_void_GLuint_const_GLdouble___GENPT__
#define glVertexAttribL1dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribL1dv_NOT_VOID_WRAP(...) {}
#define glVertexAttribL1dvEXT_INDEX 2515
#define glVertexAttribL1dvEXT_RETURN void
#define glVertexAttribL1dvEXT_ARG_NAMES index, v
#define glVertexAttribL1dvEXT_ARG_EXPAND GLuint index, const GLdouble * v
#define glVertexAttribL1dvEXT_PACKED PACKED_void_GLuint_const_GLdouble___GENPT__
#define glVertexAttribL1dvEXT_FORMAT FORMAT_void_GLuint_const_GLdouble___GENPT__
#define glVertexAttribL1dvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribL1dvEXT_NOT_VOID_WRAP(...) {}
#define glVertexAttribL1i64NV_INDEX 2516
#define glVertexAttribL1i64NV_RETURN void
#define glVertexAttribL1i64NV_ARG_NAMES index, x
#define glVertexAttribL1i64NV_ARG_EXPAND GLuint index, GLint64EXT x
#define glVertexAttribL1i64NV_PACKED PACKED_void_GLuint_GLint64EXT
#define glVertexAttribL1i64NV_FORMAT FORMAT_void_GLuint_GLint64EXT
#define glVertexAttribL1i64NV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribL1i64NV_NOT_VOID_WRAP(...) {}
#define glVertexAttribL1i64vNV_INDEX 2517
#define glVertexAttribL1i64vNV_RETURN void
#define glVertexAttribL1i64vNV_ARG_NAMES index, v
#define glVertexAttribL1i64vNV_ARG_EXPAND GLuint index, const GLint64EXT * v
#define glVertexAttribL1i64vNV_PACKED PACKED_void_GLuint_const_GLint64EXT___GENPT__
#define glVertexAttribL1i64vNV_FORMAT FORMAT_void_GLuint_const_GLint64EXT___GENPT__
#define glVertexAttribL1i64vNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribL1i64vNV_NOT_VOID_WRAP(...) {}
#define glVertexAttribL1ui64NV_INDEX 2518
#define glVertexAttribL1ui64NV_RETURN void
#define glVertexAttribL1ui64NV_ARG_NAMES index, x
#define glVertexAttribL1ui64NV_ARG_EXPAND GLuint index, GLuint64EXT x
#define glVertexAttribL1ui64NV_PACKED PACKED_void_GLuint_GLuint64EXT
#define glVertexAttribL1ui64NV_FORMAT FORMAT_void_GLuint_GLuint64EXT
#define glVertexAttribL1ui64NV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribL1ui64NV_NOT_VOID_WRAP(...) {}
#define glVertexAttribL1ui64vNV_INDEX 2519
#define glVertexAttribL1ui64vNV_RETURN void
#define glVertexAttribL1ui64vNV_ARG_NAMES index, v
#define glVertexAttribL1ui64vNV_ARG_EXPAND GLuint index, const GLuint64EXT * v
#define glVertexAttribL1ui64vNV_PACKED PACKED_void_GLuint_const_GLuint64EXT___GENPT__
#define glVertexAttribL1ui64vNV_FORMAT FORMAT_void_GLuint_const_GLuint64EXT___GENPT__
#define glVertexAttribL1ui64vNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribL1ui64vNV_NOT_VOID_WRAP(...) {}
#define glVertexAttribL2d_INDEX 2520
#define glVertexAttribL2d_RETURN void
#define glVertexAttribL2d_ARG_NAMES index, x, y
#define glVertexAttribL2d_ARG_EXPAND GLuint index, GLdouble x, GLdouble y
#define glVertexAttribL2d_PACKED PACKED_void_GLuint_GLdouble_GLdouble
#define glVertexAttribL2d_FORMAT FORMAT_void_GLuint_GLdouble_GLdouble
#define glVertexAttribL2d_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribL2d_NOT_VOID_WRAP(...) {}
#define glVertexAttribL2dEXT_INDEX 2521
#define glVertexAttribL2dEXT_RETURN void
#define glVertexAttribL2dEXT_ARG_NAMES index, x, y
#define glVertexAttribL2dEXT_ARG_EXPAND GLuint index, GLdouble x, GLdouble y
#define glVertexAttribL2dEXT_PACKED PACKED_void_GLuint_GLdouble_GLdouble
#define glVertexAttribL2dEXT_FORMAT FORMAT_void_GLuint_GLdouble_GLdouble
#define glVertexAttribL2dEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribL2dEXT_NOT_VOID_WRAP(...) {}
#define glVertexAttribL2dv_INDEX 2522
#define glVertexAttribL2dv_RETURN void
#define glVertexAttribL2dv_ARG_NAMES index, v
#define glVertexAttribL2dv_ARG_EXPAND GLuint index, const GLdouble * v
#define glVertexAttribL2dv_PACKED PACKED_void_GLuint_const_GLdouble___GENPT__
#define glVertexAttribL2dv_FORMAT FORMAT_void_GLuint_const_GLdouble___GENPT__
#define glVertexAttribL2dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribL2dv_NOT_VOID_WRAP(...) {}
#define glVertexAttribL2dvEXT_INDEX 2523
#define glVertexAttribL2dvEXT_RETURN void
#define glVertexAttribL2dvEXT_ARG_NAMES index, v
#define glVertexAttribL2dvEXT_ARG_EXPAND GLuint index, const GLdouble * v
#define glVertexAttribL2dvEXT_PACKED PACKED_void_GLuint_const_GLdouble___GENPT__
#define glVertexAttribL2dvEXT_FORMAT FORMAT_void_GLuint_const_GLdouble___GENPT__
#define glVertexAttribL2dvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribL2dvEXT_NOT_VOID_WRAP(...) {}
#define glVertexAttribL2i64NV_INDEX 2524
#define glVertexAttribL2i64NV_RETURN void
#define glVertexAttribL2i64NV_ARG_NAMES index, x, y
#define glVertexAttribL2i64NV_ARG_EXPAND GLuint index, GLint64EXT x, GLint64EXT y
#define glVertexAttribL2i64NV_PACKED PACKED_void_GLuint_GLint64EXT_GLint64EXT
#define glVertexAttribL2i64NV_FORMAT FORMAT_void_GLuint_GLint64EXT_GLint64EXT
#define glVertexAttribL2i64NV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribL2i64NV_NOT_VOID_WRAP(...) {}
#define glVertexAttribL2i64vNV_INDEX 2525
#define glVertexAttribL2i64vNV_RETURN void
#define glVertexAttribL2i64vNV_ARG_NAMES index, v
#define glVertexAttribL2i64vNV_ARG_EXPAND GLuint index, const GLint64EXT * v
#define glVertexAttribL2i64vNV_PACKED PACKED_void_GLuint_const_GLint64EXT___GENPT__
#define glVertexAttribL2i64vNV_FORMAT FORMAT_void_GLuint_const_GLint64EXT___GENPT__
#define glVertexAttribL2i64vNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribL2i64vNV_NOT_VOID_WRAP(...) {}
#define glVertexAttribL2ui64NV_INDEX 2526
#define glVertexAttribL2ui64NV_RETURN void
#define glVertexAttribL2ui64NV_ARG_NAMES index, x, y
#define glVertexAttribL2ui64NV_ARG_EXPAND GLuint index, GLuint64EXT x, GLuint64EXT y
#define glVertexAttribL2ui64NV_PACKED PACKED_void_GLuint_GLuint64EXT_GLuint64EXT
#define glVertexAttribL2ui64NV_FORMAT FORMAT_void_GLuint_GLuint64EXT_GLuint64EXT
#define glVertexAttribL2ui64NV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribL2ui64NV_NOT_VOID_WRAP(...) {}
#define glVertexAttribL2ui64vNV_INDEX 2527
#define glVertexAttribL2ui64vNV_RETURN void
#define glVertexAttribL2ui64vNV_ARG_NAMES index, v
#define glVertexAttribL2ui64vNV_ARG_EXPAND GLuint index, const GLuint64EXT * v
#define glVertexAttribL2ui64vNV_PACKED PACKED_void_GLuint_const_GLuint64EXT___GENPT__
#define glVertexAttribL2ui64vNV_FORMAT FORMAT_void_GLuint_const_GLuint64EXT___GENPT__
#define glVertexAttribL2ui64vNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribL2ui64vNV_NOT_VOID_WRAP(...) {}
#define glVertexAttribL3d_INDEX 2528
#define glVertexAttribL3d_RETURN void
#define glVertexAttribL3d_ARG_NAMES index, x, y, z
#define glVertexAttribL3d_ARG_EXPAND GLuint index, GLdouble x, GLdouble y, GLdouble z
#define glVertexAttribL3d_PACKED PACKED_void_GLuint_GLdouble_GLdouble_GLdouble
#define glVertexAttribL3d_FORMAT FORMAT_void_GLuint_GLdouble_GLdouble_GLdouble
#define glVertexAttribL3d_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribL3d_NOT_VOID_WRAP(...) {}
#define glVertexAttribL3dEXT_INDEX 2529
#define glVertexAttribL3dEXT_RETURN void
#define glVertexAttribL3dEXT_ARG_NAMES index, x, y, z
#define glVertexAttribL3dEXT_ARG_EXPAND GLuint index, GLdouble x, GLdouble y, GLdouble z
#define glVertexAttribL3dEXT_PACKED PACKED_void_GLuint_GLdouble_GLdouble_GLdouble
#define glVertexAttribL3dEXT_FORMAT FORMAT_void_GLuint_GLdouble_GLdouble_GLdouble
#define glVertexAttribL3dEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribL3dEXT_NOT_VOID_WRAP(...) {}
#define glVertexAttribL3dv_INDEX 2530
#define glVertexAttribL3dv_RETURN void
#define glVertexAttribL3dv_ARG_NAMES index, v
#define glVertexAttribL3dv_ARG_EXPAND GLuint index, const GLdouble * v
#define glVertexAttribL3dv_PACKED PACKED_void_GLuint_const_GLdouble___GENPT__
#define glVertexAttribL3dv_FORMAT FORMAT_void_GLuint_const_GLdouble___GENPT__
#define glVertexAttribL3dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribL3dv_NOT_VOID_WRAP(...) {}
#define glVertexAttribL3dvEXT_INDEX 2531
#define glVertexAttribL3dvEXT_RETURN void
#define glVertexAttribL3dvEXT_ARG_NAMES index, v
#define glVertexAttribL3dvEXT_ARG_EXPAND GLuint index, const GLdouble * v
#define glVertexAttribL3dvEXT_PACKED PACKED_void_GLuint_const_GLdouble___GENPT__
#define glVertexAttribL3dvEXT_FORMAT FORMAT_void_GLuint_const_GLdouble___GENPT__
#define glVertexAttribL3dvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribL3dvEXT_NOT_VOID_WRAP(...) {}
#define glVertexAttribL3i64NV_INDEX 2532
#define glVertexAttribL3i64NV_RETURN void
#define glVertexAttribL3i64NV_ARG_NAMES index, x, y, z
#define glVertexAttribL3i64NV_ARG_EXPAND GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z
#define glVertexAttribL3i64NV_PACKED PACKED_void_GLuint_GLint64EXT_GLint64EXT_GLint64EXT
#define glVertexAttribL3i64NV_FORMAT FORMAT_void_GLuint_GLint64EXT_GLint64EXT_GLint64EXT
#define glVertexAttribL3i64NV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribL3i64NV_NOT_VOID_WRAP(...) {}
#define glVertexAttribL3i64vNV_INDEX 2533
#define glVertexAttribL3i64vNV_RETURN void
#define glVertexAttribL3i64vNV_ARG_NAMES index, v
#define glVertexAttribL3i64vNV_ARG_EXPAND GLuint index, const GLint64EXT * v
#define glVertexAttribL3i64vNV_PACKED PACKED_void_GLuint_const_GLint64EXT___GENPT__
#define glVertexAttribL3i64vNV_FORMAT FORMAT_void_GLuint_const_GLint64EXT___GENPT__
#define glVertexAttribL3i64vNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribL3i64vNV_NOT_VOID_WRAP(...) {}
#define glVertexAttribL3ui64NV_INDEX 2534
#define glVertexAttribL3ui64NV_RETURN void
#define glVertexAttribL3ui64NV_ARG_NAMES index, x, y, z
#define glVertexAttribL3ui64NV_ARG_EXPAND GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z
#define glVertexAttribL3ui64NV_PACKED PACKED_void_GLuint_GLuint64EXT_GLuint64EXT_GLuint64EXT
#define glVertexAttribL3ui64NV_FORMAT FORMAT_void_GLuint_GLuint64EXT_GLuint64EXT_GLuint64EXT
#define glVertexAttribL3ui64NV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribL3ui64NV_NOT_VOID_WRAP(...) {}
#define glVertexAttribL3ui64vNV_INDEX 2535
#define glVertexAttribL3ui64vNV_RETURN void
#define glVertexAttribL3ui64vNV_ARG_NAMES index, v
#define glVertexAttribL3ui64vNV_ARG_EXPAND GLuint index, const GLuint64EXT * v
#define glVertexAttribL3ui64vNV_PACKED PACKED_void_GLuint_const_GLuint64EXT___GENPT__
#define glVertexAttribL3ui64vNV_FORMAT FORMAT_void_GLuint_const_GLuint64EXT___GENPT__
#define glVertexAttribL3ui64vNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribL3ui64vNV_NOT_VOID_WRAP(...) {}
#define glVertexAttribL4d_INDEX 2536
#define glVertexAttribL4d_RETURN void
#define glVertexAttribL4d_ARG_NAMES index, x, y, z, w
#define glVertexAttribL4d_ARG_EXPAND GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w
#define glVertexAttribL4d_PACKED PACKED_void_GLuint_GLdouble_GLdouble_GLdouble_GLdouble
#define glVertexAttribL4d_FORMAT FORMAT_void_GLuint_GLdouble_GLdouble_GLdouble_GLdouble
#define glVertexAttribL4d_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribL4d_NOT_VOID_WRAP(...) {}
#define glVertexAttribL4dEXT_INDEX 2537
#define glVertexAttribL4dEXT_RETURN void
#define glVertexAttribL4dEXT_ARG_NAMES index, x, y, z, w
#define glVertexAttribL4dEXT_ARG_EXPAND GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w
#define glVertexAttribL4dEXT_PACKED PACKED_void_GLuint_GLdouble_GLdouble_GLdouble_GLdouble
#define glVertexAttribL4dEXT_FORMAT FORMAT_void_GLuint_GLdouble_GLdouble_GLdouble_GLdouble
#define glVertexAttribL4dEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribL4dEXT_NOT_VOID_WRAP(...) {}
#define glVertexAttribL4dv_INDEX 2538
#define glVertexAttribL4dv_RETURN void
#define glVertexAttribL4dv_ARG_NAMES index, v
#define glVertexAttribL4dv_ARG_EXPAND GLuint index, const GLdouble * v
#define glVertexAttribL4dv_PACKED PACKED_void_GLuint_const_GLdouble___GENPT__
#define glVertexAttribL4dv_FORMAT FORMAT_void_GLuint_const_GLdouble___GENPT__
#define glVertexAttribL4dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribL4dv_NOT_VOID_WRAP(...) {}
#define glVertexAttribL4dvEXT_INDEX 2539
#define glVertexAttribL4dvEXT_RETURN void
#define glVertexAttribL4dvEXT_ARG_NAMES index, v
#define glVertexAttribL4dvEXT_ARG_EXPAND GLuint index, const GLdouble * v
#define glVertexAttribL4dvEXT_PACKED PACKED_void_GLuint_const_GLdouble___GENPT__
#define glVertexAttribL4dvEXT_FORMAT FORMAT_void_GLuint_const_GLdouble___GENPT__
#define glVertexAttribL4dvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribL4dvEXT_NOT_VOID_WRAP(...) {}
#define glVertexAttribL4i64NV_INDEX 2540
#define glVertexAttribL4i64NV_RETURN void
#define glVertexAttribL4i64NV_ARG_NAMES index, x, y, z, w
#define glVertexAttribL4i64NV_ARG_EXPAND GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w
#define glVertexAttribL4i64NV_PACKED PACKED_void_GLuint_GLint64EXT_GLint64EXT_GLint64EXT_GLint64EXT
#define glVertexAttribL4i64NV_FORMAT FORMAT_void_GLuint_GLint64EXT_GLint64EXT_GLint64EXT_GLint64EXT
#define glVertexAttribL4i64NV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribL4i64NV_NOT_VOID_WRAP(...) {}
#define glVertexAttribL4i64vNV_INDEX 2541
#define glVertexAttribL4i64vNV_RETURN void
#define glVertexAttribL4i64vNV_ARG_NAMES index, v
#define glVertexAttribL4i64vNV_ARG_EXPAND GLuint index, const GLint64EXT * v
#define glVertexAttribL4i64vNV_PACKED PACKED_void_GLuint_const_GLint64EXT___GENPT__
#define glVertexAttribL4i64vNV_FORMAT FORMAT_void_GLuint_const_GLint64EXT___GENPT__
#define glVertexAttribL4i64vNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribL4i64vNV_NOT_VOID_WRAP(...) {}
#define glVertexAttribL4ui64NV_INDEX 2542
#define glVertexAttribL4ui64NV_RETURN void
#define glVertexAttribL4ui64NV_ARG_NAMES index, x, y, z, w
#define glVertexAttribL4ui64NV_ARG_EXPAND GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w
#define glVertexAttribL4ui64NV_PACKED PACKED_void_GLuint_GLuint64EXT_GLuint64EXT_GLuint64EXT_GLuint64EXT
#define glVertexAttribL4ui64NV_FORMAT FORMAT_void_GLuint_GLuint64EXT_GLuint64EXT_GLuint64EXT_GLuint64EXT
#define glVertexAttribL4ui64NV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribL4ui64NV_NOT_VOID_WRAP(...) {}
#define glVertexAttribL4ui64vNV_INDEX 2543
#define glVertexAttribL4ui64vNV_RETURN void
#define glVertexAttribL4ui64vNV_ARG_NAMES index, v
#define glVertexAttribL4ui64vNV_ARG_EXPAND GLuint index, const GLuint64EXT * v
#define glVertexAttribL4ui64vNV_PACKED PACKED_void_GLuint_const_GLuint64EXT___GENPT__
#define glVertexAttribL4ui64vNV_FORMAT FORMAT_void_GLuint_const_GLuint64EXT___GENPT__
#define glVertexAttribL4ui64vNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribL4ui64vNV_NOT_VOID_WRAP(...) {}
#define glVertexAttribLFormat_INDEX 2544
#define glVertexAttribLFormat_RETURN void
#define glVertexAttribLFormat_ARG_NAMES attribindex, size, type, relativeoffset
#define glVertexAttribLFormat_ARG_EXPAND GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset
#define glVertexAttribLFormat_PACKED PACKED_void_GLuint_GLint_GLenum_GLuint
#define glVertexAttribLFormat_FORMAT FORMAT_void_GLuint_GLint_GLenum_GLuint
#define glVertexAttribLFormat_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribLFormat_NOT_VOID_WRAP(...) {}
#define glVertexAttribLFormatNV_INDEX 2545
#define glVertexAttribLFormatNV_RETURN void
#define glVertexAttribLFormatNV_ARG_NAMES index, size, type, stride
#define glVertexAttribLFormatNV_ARG_EXPAND GLuint index, GLint size, GLenum type, GLsizei stride
#define glVertexAttribLFormatNV_PACKED PACKED_void_GLuint_GLint_GLenum_GLsizei
#define glVertexAttribLFormatNV_FORMAT FORMAT_void_GLuint_GLint_GLenum_GLsizei
#define glVertexAttribLFormatNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribLFormatNV_NOT_VOID_WRAP(...) {}
#define glVertexAttribLPointer_INDEX 2546
#define glVertexAttribLPointer_RETURN void
#define glVertexAttribLPointer_ARG_NAMES index, size, type, stride, pointer
#define glVertexAttribLPointer_ARG_EXPAND GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid * pointer
#define glVertexAttribLPointer_PACKED PACKED_void_GLuint_GLint_GLenum_GLsizei_const_GLvoid___GENPT__
#define glVertexAttribLPointer_FORMAT FORMAT_void_GLuint_GLint_GLenum_GLsizei_const_GLvoid___GENPT__
#define glVertexAttribLPointer_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribLPointer_NOT_VOID_WRAP(...) {}
#define glVertexAttribLPointerEXT_INDEX 2547
#define glVertexAttribLPointerEXT_RETURN void
#define glVertexAttribLPointerEXT_ARG_NAMES index, size, type, stride, pointer
#define glVertexAttribLPointerEXT_ARG_EXPAND GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid * pointer
#define glVertexAttribLPointerEXT_PACKED PACKED_void_GLuint_GLint_GLenum_GLsizei_const_GLvoid___GENPT__
#define glVertexAttribLPointerEXT_FORMAT FORMAT_void_GLuint_GLint_GLenum_GLsizei_const_GLvoid___GENPT__
#define glVertexAttribLPointerEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribLPointerEXT_NOT_VOID_WRAP(...) {}
#define glVertexAttribP1ui_INDEX 2548
#define glVertexAttribP1ui_RETURN void
#define glVertexAttribP1ui_ARG_NAMES index, type, normalized, value
#define glVertexAttribP1ui_ARG_EXPAND GLuint index, GLenum type, GLboolean normalized, GLuint value
#define glVertexAttribP1ui_PACKED PACKED_void_GLuint_GLenum_GLboolean_GLuint
#define glVertexAttribP1ui_FORMAT FORMAT_void_GLuint_GLenum_GLboolean_GLuint
#define glVertexAttribP1ui_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribP1ui_NOT_VOID_WRAP(...) {}
#define glVertexAttribP1uiv_INDEX 2549
#define glVertexAttribP1uiv_RETURN void
#define glVertexAttribP1uiv_ARG_NAMES index, type, normalized, value
#define glVertexAttribP1uiv_ARG_EXPAND GLuint index, GLenum type, GLboolean normalized, const GLuint * value
#define glVertexAttribP1uiv_PACKED PACKED_void_GLuint_GLenum_GLboolean_const_GLuint___GENPT__
#define glVertexAttribP1uiv_FORMAT FORMAT_void_GLuint_GLenum_GLboolean_const_GLuint___GENPT__
#define glVertexAttribP1uiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribP1uiv_NOT_VOID_WRAP(...) {}
#define glVertexAttribP2ui_INDEX 2550
#define glVertexAttribP2ui_RETURN void
#define glVertexAttribP2ui_ARG_NAMES index, type, normalized, value
#define glVertexAttribP2ui_ARG_EXPAND GLuint index, GLenum type, GLboolean normalized, GLuint value
#define glVertexAttribP2ui_PACKED PACKED_void_GLuint_GLenum_GLboolean_GLuint
#define glVertexAttribP2ui_FORMAT FORMAT_void_GLuint_GLenum_GLboolean_GLuint
#define glVertexAttribP2ui_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribP2ui_NOT_VOID_WRAP(...) {}
#define glVertexAttribP2uiv_INDEX 2551
#define glVertexAttribP2uiv_RETURN void
#define glVertexAttribP2uiv_ARG_NAMES index, type, normalized, value
#define glVertexAttribP2uiv_ARG_EXPAND GLuint index, GLenum type, GLboolean normalized, const GLuint * value
#define glVertexAttribP2uiv_PACKED PACKED_void_GLuint_GLenum_GLboolean_const_GLuint___GENPT__
#define glVertexAttribP2uiv_FORMAT FORMAT_void_GLuint_GLenum_GLboolean_const_GLuint___GENPT__
#define glVertexAttribP2uiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribP2uiv_NOT_VOID_WRAP(...) {}
#define glVertexAttribP3ui_INDEX 2552
#define glVertexAttribP3ui_RETURN void
#define glVertexAttribP3ui_ARG_NAMES index, type, normalized, value
#define glVertexAttribP3ui_ARG_EXPAND GLuint index, GLenum type, GLboolean normalized, GLuint value
#define glVertexAttribP3ui_PACKED PACKED_void_GLuint_GLenum_GLboolean_GLuint
#define glVertexAttribP3ui_FORMAT FORMAT_void_GLuint_GLenum_GLboolean_GLuint
#define glVertexAttribP3ui_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribP3ui_NOT_VOID_WRAP(...) {}
#define glVertexAttribP3uiv_INDEX 2553
#define glVertexAttribP3uiv_RETURN void
#define glVertexAttribP3uiv_ARG_NAMES index, type, normalized, value
#define glVertexAttribP3uiv_ARG_EXPAND GLuint index, GLenum type, GLboolean normalized, const GLuint * value
#define glVertexAttribP3uiv_PACKED PACKED_void_GLuint_GLenum_GLboolean_const_GLuint___GENPT__
#define glVertexAttribP3uiv_FORMAT FORMAT_void_GLuint_GLenum_GLboolean_const_GLuint___GENPT__
#define glVertexAttribP3uiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribP3uiv_NOT_VOID_WRAP(...) {}
#define glVertexAttribP4ui_INDEX 2554
#define glVertexAttribP4ui_RETURN void
#define glVertexAttribP4ui_ARG_NAMES index, type, normalized, value
#define glVertexAttribP4ui_ARG_EXPAND GLuint index, GLenum type, GLboolean normalized, GLuint value
#define glVertexAttribP4ui_PACKED PACKED_void_GLuint_GLenum_GLboolean_GLuint
#define glVertexAttribP4ui_FORMAT FORMAT_void_GLuint_GLenum_GLboolean_GLuint
#define glVertexAttribP4ui_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribP4ui_NOT_VOID_WRAP(...) {}
#define glVertexAttribP4uiv_INDEX 2555
#define glVertexAttribP4uiv_RETURN void
#define glVertexAttribP4uiv_ARG_NAMES index, type, normalized, value
#define glVertexAttribP4uiv_ARG_EXPAND GLuint index, GLenum type, GLboolean normalized, const GLuint * value
#define glVertexAttribP4uiv_PACKED PACKED_void_GLuint_GLenum_GLboolean_const_GLuint___GENPT__
#define glVertexAttribP4uiv_FORMAT FORMAT_void_GLuint_GLenum_GLboolean_const_GLuint___GENPT__
#define glVertexAttribP4uiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribP4uiv_NOT_VOID_WRAP(...) {}
#define glVertexAttribPointer_INDEX 2556
#define glVertexAttribPointer_RETURN void
#define glVertexAttribPointer_ARG_NAMES index, size, type, normalized, stride, pointer
#define glVertexAttribPointer_ARG_EXPAND GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid * pointer
#define glVertexAttribPointer_PACKED PACKED_void_GLuint_GLint_GLenum_GLboolean_GLsizei_const_GLvoid___GENPT__
#define glVertexAttribPointer_FORMAT FORMAT_void_GLuint_GLint_GLenum_GLboolean_GLsizei_const_GLvoid___GENPT__
#define glVertexAttribPointer_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribPointer_NOT_VOID_WRAP(...) {}
#define glVertexAttribPointerARB_INDEX 2557
#define glVertexAttribPointerARB_RETURN void
#define glVertexAttribPointerARB_ARG_NAMES index, size, type, normalized, stride, pointer
#define glVertexAttribPointerARB_ARG_EXPAND GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid * pointer
#define glVertexAttribPointerARB_PACKED PACKED_void_GLuint_GLint_GLenum_GLboolean_GLsizei_const_GLvoid___GENPT__
#define glVertexAttribPointerARB_FORMAT FORMAT_void_GLuint_GLint_GLenum_GLboolean_GLsizei_const_GLvoid___GENPT__
#define glVertexAttribPointerARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribPointerARB_NOT_VOID_WRAP(...) {}
#define glVertexAttribPointerNV_INDEX 2558
#define glVertexAttribPointerNV_RETURN void
#define glVertexAttribPointerNV_ARG_NAMES index, fsize, type, stride, pointer
#define glVertexAttribPointerNV_ARG_EXPAND GLuint index, GLint fsize, GLenum type, GLsizei stride, const GLvoid * pointer
#define glVertexAttribPointerNV_PACKED PACKED_void_GLuint_GLint_GLenum_GLsizei_const_GLvoid___GENPT__
#define glVertexAttribPointerNV_FORMAT FORMAT_void_GLuint_GLint_GLenum_GLsizei_const_GLvoid___GENPT__
#define glVertexAttribPointerNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribPointerNV_NOT_VOID_WRAP(...) {}
#define glVertexAttribs1dvNV_INDEX 2559
#define glVertexAttribs1dvNV_RETURN void
#define glVertexAttribs1dvNV_ARG_NAMES index, count, v
#define glVertexAttribs1dvNV_ARG_EXPAND GLuint index, GLsizei count, const GLdouble * v
#define glVertexAttribs1dvNV_PACKED PACKED_void_GLuint_GLsizei_const_GLdouble___GENPT__
#define glVertexAttribs1dvNV_FORMAT FORMAT_void_GLuint_GLsizei_const_GLdouble___GENPT__
#define glVertexAttribs1dvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribs1dvNV_NOT_VOID_WRAP(...) {}
#define glVertexAttribs1fvNV_INDEX 2560
#define glVertexAttribs1fvNV_RETURN void
#define glVertexAttribs1fvNV_ARG_NAMES index, count, v
#define glVertexAttribs1fvNV_ARG_EXPAND GLuint index, GLsizei count, const GLfloat * v
#define glVertexAttribs1fvNV_PACKED PACKED_void_GLuint_GLsizei_const_GLfloat___GENPT__
#define glVertexAttribs1fvNV_FORMAT FORMAT_void_GLuint_GLsizei_const_GLfloat___GENPT__
#define glVertexAttribs1fvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribs1fvNV_NOT_VOID_WRAP(...) {}
#define glVertexAttribs1hvNV_INDEX 2561
#define glVertexAttribs1hvNV_RETURN void
#define glVertexAttribs1hvNV_ARG_NAMES index, n, v
#define glVertexAttribs1hvNV_ARG_EXPAND GLuint index, GLsizei n, const GLhalfNV * v
#define glVertexAttribs1hvNV_PACKED PACKED_void_GLuint_GLsizei_const_GLhalfNV___GENPT__
#define glVertexAttribs1hvNV_FORMAT FORMAT_void_GLuint_GLsizei_const_GLhalfNV___GENPT__
#define glVertexAttribs1hvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribs1hvNV_NOT_VOID_WRAP(...) {}
#define glVertexAttribs1svNV_INDEX 2562
#define glVertexAttribs1svNV_RETURN void
#define glVertexAttribs1svNV_ARG_NAMES index, count, v
#define glVertexAttribs1svNV_ARG_EXPAND GLuint index, GLsizei count, const GLshort * v
#define glVertexAttribs1svNV_PACKED PACKED_void_GLuint_GLsizei_const_GLshort___GENPT__
#define glVertexAttribs1svNV_FORMAT FORMAT_void_GLuint_GLsizei_const_GLshort___GENPT__
#define glVertexAttribs1svNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribs1svNV_NOT_VOID_WRAP(...) {}
#define glVertexAttribs2dvNV_INDEX 2563
#define glVertexAttribs2dvNV_RETURN void
#define glVertexAttribs2dvNV_ARG_NAMES index, count, v
#define glVertexAttribs2dvNV_ARG_EXPAND GLuint index, GLsizei count, const GLdouble * v
#define glVertexAttribs2dvNV_PACKED PACKED_void_GLuint_GLsizei_const_GLdouble___GENPT__
#define glVertexAttribs2dvNV_FORMAT FORMAT_void_GLuint_GLsizei_const_GLdouble___GENPT__
#define glVertexAttribs2dvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribs2dvNV_NOT_VOID_WRAP(...) {}
#define glVertexAttribs2fvNV_INDEX 2564
#define glVertexAttribs2fvNV_RETURN void
#define glVertexAttribs2fvNV_ARG_NAMES index, count, v
#define glVertexAttribs2fvNV_ARG_EXPAND GLuint index, GLsizei count, const GLfloat * v
#define glVertexAttribs2fvNV_PACKED PACKED_void_GLuint_GLsizei_const_GLfloat___GENPT__
#define glVertexAttribs2fvNV_FORMAT FORMAT_void_GLuint_GLsizei_const_GLfloat___GENPT__
#define glVertexAttribs2fvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribs2fvNV_NOT_VOID_WRAP(...) {}
#define glVertexAttribs2hvNV_INDEX 2565
#define glVertexAttribs2hvNV_RETURN void
#define glVertexAttribs2hvNV_ARG_NAMES index, n, v
#define glVertexAttribs2hvNV_ARG_EXPAND GLuint index, GLsizei n, const GLhalfNV * v
#define glVertexAttribs2hvNV_PACKED PACKED_void_GLuint_GLsizei_const_GLhalfNV___GENPT__
#define glVertexAttribs2hvNV_FORMAT FORMAT_void_GLuint_GLsizei_const_GLhalfNV___GENPT__
#define glVertexAttribs2hvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribs2hvNV_NOT_VOID_WRAP(...) {}
#define glVertexAttribs2svNV_INDEX 2566
#define glVertexAttribs2svNV_RETURN void
#define glVertexAttribs2svNV_ARG_NAMES index, count, v
#define glVertexAttribs2svNV_ARG_EXPAND GLuint index, GLsizei count, const GLshort * v
#define glVertexAttribs2svNV_PACKED PACKED_void_GLuint_GLsizei_const_GLshort___GENPT__
#define glVertexAttribs2svNV_FORMAT FORMAT_void_GLuint_GLsizei_const_GLshort___GENPT__
#define glVertexAttribs2svNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribs2svNV_NOT_VOID_WRAP(...) {}
#define glVertexAttribs3dvNV_INDEX 2567
#define glVertexAttribs3dvNV_RETURN void
#define glVertexAttribs3dvNV_ARG_NAMES index, count, v
#define glVertexAttribs3dvNV_ARG_EXPAND GLuint index, GLsizei count, const GLdouble * v
#define glVertexAttribs3dvNV_PACKED PACKED_void_GLuint_GLsizei_const_GLdouble___GENPT__
#define glVertexAttribs3dvNV_FORMAT FORMAT_void_GLuint_GLsizei_const_GLdouble___GENPT__
#define glVertexAttribs3dvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribs3dvNV_NOT_VOID_WRAP(...) {}
#define glVertexAttribs3fvNV_INDEX 2568
#define glVertexAttribs3fvNV_RETURN void
#define glVertexAttribs3fvNV_ARG_NAMES index, count, v
#define glVertexAttribs3fvNV_ARG_EXPAND GLuint index, GLsizei count, const GLfloat * v
#define glVertexAttribs3fvNV_PACKED PACKED_void_GLuint_GLsizei_const_GLfloat___GENPT__
#define glVertexAttribs3fvNV_FORMAT FORMAT_void_GLuint_GLsizei_const_GLfloat___GENPT__
#define glVertexAttribs3fvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribs3fvNV_NOT_VOID_WRAP(...) {}
#define glVertexAttribs3hvNV_INDEX 2569
#define glVertexAttribs3hvNV_RETURN void
#define glVertexAttribs3hvNV_ARG_NAMES index, n, v
#define glVertexAttribs3hvNV_ARG_EXPAND GLuint index, GLsizei n, const GLhalfNV * v
#define glVertexAttribs3hvNV_PACKED PACKED_void_GLuint_GLsizei_const_GLhalfNV___GENPT__
#define glVertexAttribs3hvNV_FORMAT FORMAT_void_GLuint_GLsizei_const_GLhalfNV___GENPT__
#define glVertexAttribs3hvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribs3hvNV_NOT_VOID_WRAP(...) {}
#define glVertexAttribs3svNV_INDEX 2570
#define glVertexAttribs3svNV_RETURN void
#define glVertexAttribs3svNV_ARG_NAMES index, count, v
#define glVertexAttribs3svNV_ARG_EXPAND GLuint index, GLsizei count, const GLshort * v
#define glVertexAttribs3svNV_PACKED PACKED_void_GLuint_GLsizei_const_GLshort___GENPT__
#define glVertexAttribs3svNV_FORMAT FORMAT_void_GLuint_GLsizei_const_GLshort___GENPT__
#define glVertexAttribs3svNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribs3svNV_NOT_VOID_WRAP(...) {}
#define glVertexAttribs4dvNV_INDEX 2571
#define glVertexAttribs4dvNV_RETURN void
#define glVertexAttribs4dvNV_ARG_NAMES index, count, v
#define glVertexAttribs4dvNV_ARG_EXPAND GLuint index, GLsizei count, const GLdouble * v
#define glVertexAttribs4dvNV_PACKED PACKED_void_GLuint_GLsizei_const_GLdouble___GENPT__
#define glVertexAttribs4dvNV_FORMAT FORMAT_void_GLuint_GLsizei_const_GLdouble___GENPT__
#define glVertexAttribs4dvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribs4dvNV_NOT_VOID_WRAP(...) {}
#define glVertexAttribs4fvNV_INDEX 2572
#define glVertexAttribs4fvNV_RETURN void
#define glVertexAttribs4fvNV_ARG_NAMES index, count, v
#define glVertexAttribs4fvNV_ARG_EXPAND GLuint index, GLsizei count, const GLfloat * v
#define glVertexAttribs4fvNV_PACKED PACKED_void_GLuint_GLsizei_const_GLfloat___GENPT__
#define glVertexAttribs4fvNV_FORMAT FORMAT_void_GLuint_GLsizei_const_GLfloat___GENPT__
#define glVertexAttribs4fvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribs4fvNV_NOT_VOID_WRAP(...) {}
#define glVertexAttribs4hvNV_INDEX 2573
#define glVertexAttribs4hvNV_RETURN void
#define glVertexAttribs4hvNV_ARG_NAMES index, n, v
#define glVertexAttribs4hvNV_ARG_EXPAND GLuint index, GLsizei n, const GLhalfNV * v
#define glVertexAttribs4hvNV_PACKED PACKED_void_GLuint_GLsizei_const_GLhalfNV___GENPT__
#define glVertexAttribs4hvNV_FORMAT FORMAT_void_GLuint_GLsizei_const_GLhalfNV___GENPT__
#define glVertexAttribs4hvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribs4hvNV_NOT_VOID_WRAP(...) {}
#define glVertexAttribs4svNV_INDEX 2574
#define glVertexAttribs4svNV_RETURN void
#define glVertexAttribs4svNV_ARG_NAMES index, count, v
#define glVertexAttribs4svNV_ARG_EXPAND GLuint index, GLsizei count, const GLshort * v
#define glVertexAttribs4svNV_PACKED PACKED_void_GLuint_GLsizei_const_GLshort___GENPT__
#define glVertexAttribs4svNV_FORMAT FORMAT_void_GLuint_GLsizei_const_GLshort___GENPT__
#define glVertexAttribs4svNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribs4svNV_NOT_VOID_WRAP(...) {}
#define glVertexAttribs4ubvNV_INDEX 2575
#define glVertexAttribs4ubvNV_RETURN void
#define glVertexAttribs4ubvNV_ARG_NAMES index, count, v
#define glVertexAttribs4ubvNV_ARG_EXPAND GLuint index, GLsizei count, const GLubyte * v
#define glVertexAttribs4ubvNV_PACKED PACKED_void_GLuint_GLsizei_const_GLubyte___GENPT__
#define glVertexAttribs4ubvNV_FORMAT FORMAT_void_GLuint_GLsizei_const_GLubyte___GENPT__
#define glVertexAttribs4ubvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexAttribs4ubvNV_NOT_VOID_WRAP(...) {}
#define glVertexBindingDivisor_INDEX 2576
#define glVertexBindingDivisor_RETURN void
#define glVertexBindingDivisor_ARG_NAMES bindingindex, divisor
#define glVertexBindingDivisor_ARG_EXPAND GLuint bindingindex, GLuint divisor
#define glVertexBindingDivisor_PACKED PACKED_void_GLuint_GLuint
#define glVertexBindingDivisor_FORMAT FORMAT_void_GLuint_GLuint
#define glVertexBindingDivisor_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexBindingDivisor_NOT_VOID_WRAP(...) {}
#define glVertexBlendARB_INDEX 2577
#define glVertexBlendARB_RETURN void
#define glVertexBlendARB_ARG_NAMES count
#define glVertexBlendARB_ARG_EXPAND GLint count
#define glVertexBlendARB_PACKED PACKED_void_GLint
#define glVertexBlendARB_FORMAT FORMAT_void_GLint
#define glVertexBlendARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexBlendARB_NOT_VOID_WRAP(...) {}
#define glVertexBlendEnvfATI_INDEX 2578
#define glVertexBlendEnvfATI_RETURN void
#define glVertexBlendEnvfATI_ARG_NAMES pname, param
#define glVertexBlendEnvfATI_ARG_EXPAND GLenum pname, GLfloat param
#define glVertexBlendEnvfATI_PACKED PACKED_void_GLenum_GLfloat
#define glVertexBlendEnvfATI_FORMAT FORMAT_void_GLenum_GLfloat
#define glVertexBlendEnvfATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexBlendEnvfATI_NOT_VOID_WRAP(...) {}
#define glVertexBlendEnviATI_INDEX 2579
#define glVertexBlendEnviATI_RETURN void
#define glVertexBlendEnviATI_ARG_NAMES pname, param
#define glVertexBlendEnviATI_ARG_EXPAND GLenum pname, GLint param
#define glVertexBlendEnviATI_PACKED PACKED_void_GLenum_GLint
#define glVertexBlendEnviATI_FORMAT FORMAT_void_GLenum_GLint
#define glVertexBlendEnviATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexBlendEnviATI_NOT_VOID_WRAP(...) {}
#define glVertexFormatNV_INDEX 2580
#define glVertexFormatNV_RETURN void
#define glVertexFormatNV_ARG_NAMES size, type, stride
#define glVertexFormatNV_ARG_EXPAND GLint size, GLenum type, GLsizei stride
#define glVertexFormatNV_PACKED PACKED_void_GLint_GLenum_GLsizei
#define glVertexFormatNV_FORMAT FORMAT_void_GLint_GLenum_GLsizei
#define glVertexFormatNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexFormatNV_NOT_VOID_WRAP(...) {}
#define glVertexP2ui_INDEX 2581
#define glVertexP2ui_RETURN void
#define glVertexP2ui_ARG_NAMES type, value
#define glVertexP2ui_ARG_EXPAND GLenum type, GLuint value
#define glVertexP2ui_PACKED PACKED_void_GLenum_GLuint
#define glVertexP2ui_FORMAT FORMAT_void_GLenum_GLuint
#define glVertexP2ui_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexP2ui_NOT_VOID_WRAP(...) {}
#define glVertexP2uiv_INDEX 2582
#define glVertexP2uiv_RETURN void
#define glVertexP2uiv_ARG_NAMES type, value
#define glVertexP2uiv_ARG_EXPAND GLenum type, const GLuint * value
#define glVertexP2uiv_PACKED PACKED_void_GLenum_const_GLuint___GENPT__
#define glVertexP2uiv_FORMAT FORMAT_void_GLenum_const_GLuint___GENPT__
#define glVertexP2uiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexP2uiv_NOT_VOID_WRAP(...) {}
#define glVertexP3ui_INDEX 2583
#define glVertexP3ui_RETURN void
#define glVertexP3ui_ARG_NAMES type, value
#define glVertexP3ui_ARG_EXPAND GLenum type, GLuint value
#define glVertexP3ui_PACKED PACKED_void_GLenum_GLuint
#define glVertexP3ui_FORMAT FORMAT_void_GLenum_GLuint
#define glVertexP3ui_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexP3ui_NOT_VOID_WRAP(...) {}
#define glVertexP3uiv_INDEX 2584
#define glVertexP3uiv_RETURN void
#define glVertexP3uiv_ARG_NAMES type, value
#define glVertexP3uiv_ARG_EXPAND GLenum type, const GLuint * value
#define glVertexP3uiv_PACKED PACKED_void_GLenum_const_GLuint___GENPT__
#define glVertexP3uiv_FORMAT FORMAT_void_GLenum_const_GLuint___GENPT__
#define glVertexP3uiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexP3uiv_NOT_VOID_WRAP(...) {}
#define glVertexP4ui_INDEX 2585
#define glVertexP4ui_RETURN void
#define glVertexP4ui_ARG_NAMES type, value
#define glVertexP4ui_ARG_EXPAND GLenum type, GLuint value
#define glVertexP4ui_PACKED PACKED_void_GLenum_GLuint
#define glVertexP4ui_FORMAT FORMAT_void_GLenum_GLuint
#define glVertexP4ui_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexP4ui_NOT_VOID_WRAP(...) {}
#define glVertexP4uiv_INDEX 2586
#define glVertexP4uiv_RETURN void
#define glVertexP4uiv_ARG_NAMES type, value
#define glVertexP4uiv_ARG_EXPAND GLenum type, const GLuint * value
#define glVertexP4uiv_PACKED PACKED_void_GLenum_const_GLuint___GENPT__
#define glVertexP4uiv_FORMAT FORMAT_void_GLenum_const_GLuint___GENPT__
#define glVertexP4uiv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexP4uiv_NOT_VOID_WRAP(...) {}
#define glVertexPointer_INDEX 2587
#define glVertexPointer_RETURN void
#define glVertexPointer_ARG_NAMES size, type, stride, pointer
#define glVertexPointer_ARG_EXPAND GLint size, GLenum type, GLsizei stride, const GLvoid * pointer
#define glVertexPointer_PACKED PACKED_void_GLint_GLenum_GLsizei_const_GLvoid___GENPT__
#define glVertexPointer_FORMAT FORMAT_void_GLint_GLenum_GLsizei_const_GLvoid___GENPT__
#define glVertexPointer_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexPointer_NOT_VOID_WRAP(...) {}
#define glVertexPointerEXT_INDEX 2588
#define glVertexPointerEXT_RETURN void
#define glVertexPointerEXT_ARG_NAMES size, type, stride, count, pointer
#define glVertexPointerEXT_ARG_EXPAND GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid * pointer
#define glVertexPointerEXT_PACKED PACKED_void_GLint_GLenum_GLsizei_GLsizei_const_GLvoid___GENPT__
#define glVertexPointerEXT_FORMAT FORMAT_void_GLint_GLenum_GLsizei_GLsizei_const_GLvoid___GENPT__
#define glVertexPointerEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexPointerEXT_NOT_VOID_WRAP(...) {}
#define glVertexPointerListIBM_INDEX 2589
#define glVertexPointerListIBM_RETURN void
#define glVertexPointerListIBM_ARG_NAMES size, type, stride, pointer, ptrstride
#define glVertexPointerListIBM_ARG_EXPAND GLint size, GLenum type, GLint stride, const GLvoid * pointer, GLint ptrstride
#define glVertexPointerListIBM_PACKED PACKED_void_GLint_GLenum_GLint_const_GLvoid___GENPT___GLint
#define glVertexPointerListIBM_FORMAT FORMAT_void_GLint_GLenum_GLint_const_GLvoid___GENPT___GLint
#define glVertexPointerListIBM_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexPointerListIBM_NOT_VOID_WRAP(...) {}
#define glVertexPointervINTEL_INDEX 2590
#define glVertexPointervINTEL_RETURN void
#define glVertexPointervINTEL_ARG_NAMES size, type, pointer
#define glVertexPointervINTEL_ARG_EXPAND GLint size, GLenum type, const GLvoid * pointer
#define glVertexPointervINTEL_PACKED PACKED_void_GLint_GLenum_const_GLvoid___GENPT__
#define glVertexPointervINTEL_FORMAT FORMAT_void_GLint_GLenum_const_GLvoid___GENPT__
#define glVertexPointervINTEL_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexPointervINTEL_NOT_VOID_WRAP(...) {}
#define glVertexStream1dATI_INDEX 2591
#define glVertexStream1dATI_RETURN void
#define glVertexStream1dATI_ARG_NAMES stream, x
#define glVertexStream1dATI_ARG_EXPAND GLenum stream, GLdouble x
#define glVertexStream1dATI_PACKED PACKED_void_GLenum_GLdouble
#define glVertexStream1dATI_FORMAT FORMAT_void_GLenum_GLdouble
#define glVertexStream1dATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexStream1dATI_NOT_VOID_WRAP(...) {}
#define glVertexStream1dvATI_INDEX 2592
#define glVertexStream1dvATI_RETURN void
#define glVertexStream1dvATI_ARG_NAMES stream, coords
#define glVertexStream1dvATI_ARG_EXPAND GLenum stream, const GLdouble * coords
#define glVertexStream1dvATI_PACKED PACKED_void_GLenum_const_GLdouble___GENPT__
#define glVertexStream1dvATI_FORMAT FORMAT_void_GLenum_const_GLdouble___GENPT__
#define glVertexStream1dvATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexStream1dvATI_NOT_VOID_WRAP(...) {}
#define glVertexStream1fATI_INDEX 2593
#define glVertexStream1fATI_RETURN void
#define glVertexStream1fATI_ARG_NAMES stream, x
#define glVertexStream1fATI_ARG_EXPAND GLenum stream, GLfloat x
#define glVertexStream1fATI_PACKED PACKED_void_GLenum_GLfloat
#define glVertexStream1fATI_FORMAT FORMAT_void_GLenum_GLfloat
#define glVertexStream1fATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexStream1fATI_NOT_VOID_WRAP(...) {}
#define glVertexStream1fvATI_INDEX 2594
#define glVertexStream1fvATI_RETURN void
#define glVertexStream1fvATI_ARG_NAMES stream, coords
#define glVertexStream1fvATI_ARG_EXPAND GLenum stream, const GLfloat * coords
#define glVertexStream1fvATI_PACKED PACKED_void_GLenum_const_GLfloat___GENPT__
#define glVertexStream1fvATI_FORMAT FORMAT_void_GLenum_const_GLfloat___GENPT__
#define glVertexStream1fvATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexStream1fvATI_NOT_VOID_WRAP(...) {}
#define glVertexStream1iATI_INDEX 2595
#define glVertexStream1iATI_RETURN void
#define glVertexStream1iATI_ARG_NAMES stream, x
#define glVertexStream1iATI_ARG_EXPAND GLenum stream, GLint x
#define glVertexStream1iATI_PACKED PACKED_void_GLenum_GLint
#define glVertexStream1iATI_FORMAT FORMAT_void_GLenum_GLint
#define glVertexStream1iATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexStream1iATI_NOT_VOID_WRAP(...) {}
#define glVertexStream1ivATI_INDEX 2596
#define glVertexStream1ivATI_RETURN void
#define glVertexStream1ivATI_ARG_NAMES stream, coords
#define glVertexStream1ivATI_ARG_EXPAND GLenum stream, const GLint * coords
#define glVertexStream1ivATI_PACKED PACKED_void_GLenum_const_GLint___GENPT__
#define glVertexStream1ivATI_FORMAT FORMAT_void_GLenum_const_GLint___GENPT__
#define glVertexStream1ivATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexStream1ivATI_NOT_VOID_WRAP(...) {}
#define glVertexStream1sATI_INDEX 2597
#define glVertexStream1sATI_RETURN void
#define glVertexStream1sATI_ARG_NAMES stream, x
#define glVertexStream1sATI_ARG_EXPAND GLenum stream, GLshort x
#define glVertexStream1sATI_PACKED PACKED_void_GLenum_GLshort
#define glVertexStream1sATI_FORMAT FORMAT_void_GLenum_GLshort
#define glVertexStream1sATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexStream1sATI_NOT_VOID_WRAP(...) {}
#define glVertexStream1svATI_INDEX 2598
#define glVertexStream1svATI_RETURN void
#define glVertexStream1svATI_ARG_NAMES stream, coords
#define glVertexStream1svATI_ARG_EXPAND GLenum stream, const GLshort * coords
#define glVertexStream1svATI_PACKED PACKED_void_GLenum_const_GLshort___GENPT__
#define glVertexStream1svATI_FORMAT FORMAT_void_GLenum_const_GLshort___GENPT__
#define glVertexStream1svATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexStream1svATI_NOT_VOID_WRAP(...) {}
#define glVertexStream2dATI_INDEX 2599
#define glVertexStream2dATI_RETURN void
#define glVertexStream2dATI_ARG_NAMES stream, x, y
#define glVertexStream2dATI_ARG_EXPAND GLenum stream, GLdouble x, GLdouble y
#define glVertexStream2dATI_PACKED PACKED_void_GLenum_GLdouble_GLdouble
#define glVertexStream2dATI_FORMAT FORMAT_void_GLenum_GLdouble_GLdouble
#define glVertexStream2dATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexStream2dATI_NOT_VOID_WRAP(...) {}
#define glVertexStream2dvATI_INDEX 2600
#define glVertexStream2dvATI_RETURN void
#define glVertexStream2dvATI_ARG_NAMES stream, coords
#define glVertexStream2dvATI_ARG_EXPAND GLenum stream, const GLdouble * coords
#define glVertexStream2dvATI_PACKED PACKED_void_GLenum_const_GLdouble___GENPT__
#define glVertexStream2dvATI_FORMAT FORMAT_void_GLenum_const_GLdouble___GENPT__
#define glVertexStream2dvATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexStream2dvATI_NOT_VOID_WRAP(...) {}
#define glVertexStream2fATI_INDEX 2601
#define glVertexStream2fATI_RETURN void
#define glVertexStream2fATI_ARG_NAMES stream, x, y
#define glVertexStream2fATI_ARG_EXPAND GLenum stream, GLfloat x, GLfloat y
#define glVertexStream2fATI_PACKED PACKED_void_GLenum_GLfloat_GLfloat
#define glVertexStream2fATI_FORMAT FORMAT_void_GLenum_GLfloat_GLfloat
#define glVertexStream2fATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexStream2fATI_NOT_VOID_WRAP(...) {}
#define glVertexStream2fvATI_INDEX 2602
#define glVertexStream2fvATI_RETURN void
#define glVertexStream2fvATI_ARG_NAMES stream, coords
#define glVertexStream2fvATI_ARG_EXPAND GLenum stream, const GLfloat * coords
#define glVertexStream2fvATI_PACKED PACKED_void_GLenum_const_GLfloat___GENPT__
#define glVertexStream2fvATI_FORMAT FORMAT_void_GLenum_const_GLfloat___GENPT__
#define glVertexStream2fvATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexStream2fvATI_NOT_VOID_WRAP(...) {}
#define glVertexStream2iATI_INDEX 2603
#define glVertexStream2iATI_RETURN void
#define glVertexStream2iATI_ARG_NAMES stream, x, y
#define glVertexStream2iATI_ARG_EXPAND GLenum stream, GLint x, GLint y
#define glVertexStream2iATI_PACKED PACKED_void_GLenum_GLint_GLint
#define glVertexStream2iATI_FORMAT FORMAT_void_GLenum_GLint_GLint
#define glVertexStream2iATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexStream2iATI_NOT_VOID_WRAP(...) {}
#define glVertexStream2ivATI_INDEX 2604
#define glVertexStream2ivATI_RETURN void
#define glVertexStream2ivATI_ARG_NAMES stream, coords
#define glVertexStream2ivATI_ARG_EXPAND GLenum stream, const GLint * coords
#define glVertexStream2ivATI_PACKED PACKED_void_GLenum_const_GLint___GENPT__
#define glVertexStream2ivATI_FORMAT FORMAT_void_GLenum_const_GLint___GENPT__
#define glVertexStream2ivATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexStream2ivATI_NOT_VOID_WRAP(...) {}
#define glVertexStream2sATI_INDEX 2605
#define glVertexStream2sATI_RETURN void
#define glVertexStream2sATI_ARG_NAMES stream, x, y
#define glVertexStream2sATI_ARG_EXPAND GLenum stream, GLshort x, GLshort y
#define glVertexStream2sATI_PACKED PACKED_void_GLenum_GLshort_GLshort
#define glVertexStream2sATI_FORMAT FORMAT_void_GLenum_GLshort_GLshort
#define glVertexStream2sATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexStream2sATI_NOT_VOID_WRAP(...) {}
#define glVertexStream2svATI_INDEX 2606
#define glVertexStream2svATI_RETURN void
#define glVertexStream2svATI_ARG_NAMES stream, coords
#define glVertexStream2svATI_ARG_EXPAND GLenum stream, const GLshort * coords
#define glVertexStream2svATI_PACKED PACKED_void_GLenum_const_GLshort___GENPT__
#define glVertexStream2svATI_FORMAT FORMAT_void_GLenum_const_GLshort___GENPT__
#define glVertexStream2svATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexStream2svATI_NOT_VOID_WRAP(...) {}
#define glVertexStream3dATI_INDEX 2607
#define glVertexStream3dATI_RETURN void
#define glVertexStream3dATI_ARG_NAMES stream, x, y, z
#define glVertexStream3dATI_ARG_EXPAND GLenum stream, GLdouble x, GLdouble y, GLdouble z
#define glVertexStream3dATI_PACKED PACKED_void_GLenum_GLdouble_GLdouble_GLdouble
#define glVertexStream3dATI_FORMAT FORMAT_void_GLenum_GLdouble_GLdouble_GLdouble
#define glVertexStream3dATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexStream3dATI_NOT_VOID_WRAP(...) {}
#define glVertexStream3dvATI_INDEX 2608
#define glVertexStream3dvATI_RETURN void
#define glVertexStream3dvATI_ARG_NAMES stream, coords
#define glVertexStream3dvATI_ARG_EXPAND GLenum stream, const GLdouble * coords
#define glVertexStream3dvATI_PACKED PACKED_void_GLenum_const_GLdouble___GENPT__
#define glVertexStream3dvATI_FORMAT FORMAT_void_GLenum_const_GLdouble___GENPT__
#define glVertexStream3dvATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexStream3dvATI_NOT_VOID_WRAP(...) {}
#define glVertexStream3fATI_INDEX 2609
#define glVertexStream3fATI_RETURN void
#define glVertexStream3fATI_ARG_NAMES stream, x, y, z
#define glVertexStream3fATI_ARG_EXPAND GLenum stream, GLfloat x, GLfloat y, GLfloat z
#define glVertexStream3fATI_PACKED PACKED_void_GLenum_GLfloat_GLfloat_GLfloat
#define glVertexStream3fATI_FORMAT FORMAT_void_GLenum_GLfloat_GLfloat_GLfloat
#define glVertexStream3fATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexStream3fATI_NOT_VOID_WRAP(...) {}
#define glVertexStream3fvATI_INDEX 2610
#define glVertexStream3fvATI_RETURN void
#define glVertexStream3fvATI_ARG_NAMES stream, coords
#define glVertexStream3fvATI_ARG_EXPAND GLenum stream, const GLfloat * coords
#define glVertexStream3fvATI_PACKED PACKED_void_GLenum_const_GLfloat___GENPT__
#define glVertexStream3fvATI_FORMAT FORMAT_void_GLenum_const_GLfloat___GENPT__
#define glVertexStream3fvATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexStream3fvATI_NOT_VOID_WRAP(...) {}
#define glVertexStream3iATI_INDEX 2611
#define glVertexStream3iATI_RETURN void
#define glVertexStream3iATI_ARG_NAMES stream, x, y, z
#define glVertexStream3iATI_ARG_EXPAND GLenum stream, GLint x, GLint y, GLint z
#define glVertexStream3iATI_PACKED PACKED_void_GLenum_GLint_GLint_GLint
#define glVertexStream3iATI_FORMAT FORMAT_void_GLenum_GLint_GLint_GLint
#define glVertexStream3iATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexStream3iATI_NOT_VOID_WRAP(...) {}
#define glVertexStream3ivATI_INDEX 2612
#define glVertexStream3ivATI_RETURN void
#define glVertexStream3ivATI_ARG_NAMES stream, coords
#define glVertexStream3ivATI_ARG_EXPAND GLenum stream, const GLint * coords
#define glVertexStream3ivATI_PACKED PACKED_void_GLenum_const_GLint___GENPT__
#define glVertexStream3ivATI_FORMAT FORMAT_void_GLenum_const_GLint___GENPT__
#define glVertexStream3ivATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexStream3ivATI_NOT_VOID_WRAP(...) {}
#define glVertexStream3sATI_INDEX 2613
#define glVertexStream3sATI_RETURN void
#define glVertexStream3sATI_ARG_NAMES stream, x, y, z
#define glVertexStream3sATI_ARG_EXPAND GLenum stream, GLshort x, GLshort y, GLshort z
#define glVertexStream3sATI_PACKED PACKED_void_GLenum_GLshort_GLshort_GLshort
#define glVertexStream3sATI_FORMAT FORMAT_void_GLenum_GLshort_GLshort_GLshort
#define glVertexStream3sATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexStream3sATI_NOT_VOID_WRAP(...) {}
#define glVertexStream3svATI_INDEX 2614
#define glVertexStream3svATI_RETURN void
#define glVertexStream3svATI_ARG_NAMES stream, coords
#define glVertexStream3svATI_ARG_EXPAND GLenum stream, const GLshort * coords
#define glVertexStream3svATI_PACKED PACKED_void_GLenum_const_GLshort___GENPT__
#define glVertexStream3svATI_FORMAT FORMAT_void_GLenum_const_GLshort___GENPT__
#define glVertexStream3svATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexStream3svATI_NOT_VOID_WRAP(...) {}
#define glVertexStream4dATI_INDEX 2615
#define glVertexStream4dATI_RETURN void
#define glVertexStream4dATI_ARG_NAMES stream, x, y, z, w
#define glVertexStream4dATI_ARG_EXPAND GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w
#define glVertexStream4dATI_PACKED PACKED_void_GLenum_GLdouble_GLdouble_GLdouble_GLdouble
#define glVertexStream4dATI_FORMAT FORMAT_void_GLenum_GLdouble_GLdouble_GLdouble_GLdouble
#define glVertexStream4dATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexStream4dATI_NOT_VOID_WRAP(...) {}
#define glVertexStream4dvATI_INDEX 2616
#define glVertexStream4dvATI_RETURN void
#define glVertexStream4dvATI_ARG_NAMES stream, coords
#define glVertexStream4dvATI_ARG_EXPAND GLenum stream, const GLdouble * coords
#define glVertexStream4dvATI_PACKED PACKED_void_GLenum_const_GLdouble___GENPT__
#define glVertexStream4dvATI_FORMAT FORMAT_void_GLenum_const_GLdouble___GENPT__
#define glVertexStream4dvATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexStream4dvATI_NOT_VOID_WRAP(...) {}
#define glVertexStream4fATI_INDEX 2617
#define glVertexStream4fATI_RETURN void
#define glVertexStream4fATI_ARG_NAMES stream, x, y, z, w
#define glVertexStream4fATI_ARG_EXPAND GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w
#define glVertexStream4fATI_PACKED PACKED_void_GLenum_GLfloat_GLfloat_GLfloat_GLfloat
#define glVertexStream4fATI_FORMAT FORMAT_void_GLenum_GLfloat_GLfloat_GLfloat_GLfloat
#define glVertexStream4fATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexStream4fATI_NOT_VOID_WRAP(...) {}
#define glVertexStream4fvATI_INDEX 2618
#define glVertexStream4fvATI_RETURN void
#define glVertexStream4fvATI_ARG_NAMES stream, coords
#define glVertexStream4fvATI_ARG_EXPAND GLenum stream, const GLfloat * coords
#define glVertexStream4fvATI_PACKED PACKED_void_GLenum_const_GLfloat___GENPT__
#define glVertexStream4fvATI_FORMAT FORMAT_void_GLenum_const_GLfloat___GENPT__
#define glVertexStream4fvATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexStream4fvATI_NOT_VOID_WRAP(...) {}
#define glVertexStream4iATI_INDEX 2619
#define glVertexStream4iATI_RETURN void
#define glVertexStream4iATI_ARG_NAMES stream, x, y, z, w
#define glVertexStream4iATI_ARG_EXPAND GLenum stream, GLint x, GLint y, GLint z, GLint w
#define glVertexStream4iATI_PACKED PACKED_void_GLenum_GLint_GLint_GLint_GLint
#define glVertexStream4iATI_FORMAT FORMAT_void_GLenum_GLint_GLint_GLint_GLint
#define glVertexStream4iATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexStream4iATI_NOT_VOID_WRAP(...) {}
#define glVertexStream4ivATI_INDEX 2620
#define glVertexStream4ivATI_RETURN void
#define glVertexStream4ivATI_ARG_NAMES stream, coords
#define glVertexStream4ivATI_ARG_EXPAND GLenum stream, const GLint * coords
#define glVertexStream4ivATI_PACKED PACKED_void_GLenum_const_GLint___GENPT__
#define glVertexStream4ivATI_FORMAT FORMAT_void_GLenum_const_GLint___GENPT__
#define glVertexStream4ivATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexStream4ivATI_NOT_VOID_WRAP(...) {}
#define glVertexStream4sATI_INDEX 2621
#define glVertexStream4sATI_RETURN void
#define glVertexStream4sATI_ARG_NAMES stream, x, y, z, w
#define glVertexStream4sATI_ARG_EXPAND GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w
#define glVertexStream4sATI_PACKED PACKED_void_GLenum_GLshort_GLshort_GLshort_GLshort
#define glVertexStream4sATI_FORMAT FORMAT_void_GLenum_GLshort_GLshort_GLshort_GLshort
#define glVertexStream4sATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexStream4sATI_NOT_VOID_WRAP(...) {}
#define glVertexStream4svATI_INDEX 2622
#define glVertexStream4svATI_RETURN void
#define glVertexStream4svATI_ARG_NAMES stream, coords
#define glVertexStream4svATI_ARG_EXPAND GLenum stream, const GLshort * coords
#define glVertexStream4svATI_PACKED PACKED_void_GLenum_const_GLshort___GENPT__
#define glVertexStream4svATI_FORMAT FORMAT_void_GLenum_const_GLshort___GENPT__
#define glVertexStream4svATI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexStream4svATI_NOT_VOID_WRAP(...) {}
#define glVertexWeightPointerEXT_INDEX 2623
#define glVertexWeightPointerEXT_RETURN void
#define glVertexWeightPointerEXT_ARG_NAMES size, type, stride, pointer
#define glVertexWeightPointerEXT_ARG_EXPAND GLint size, GLenum type, GLsizei stride, const GLvoid * pointer
#define glVertexWeightPointerEXT_PACKED PACKED_void_GLint_GLenum_GLsizei_const_GLvoid___GENPT__
#define glVertexWeightPointerEXT_FORMAT FORMAT_void_GLint_GLenum_GLsizei_const_GLvoid___GENPT__
#define glVertexWeightPointerEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexWeightPointerEXT_NOT_VOID_WRAP(...) {}
#define glVertexWeightfEXT_INDEX 2624
#define glVertexWeightfEXT_RETURN void
#define glVertexWeightfEXT_ARG_NAMES weight
#define glVertexWeightfEXT_ARG_EXPAND GLfloat weight
#define glVertexWeightfEXT_PACKED PACKED_void_GLfloat
#define glVertexWeightfEXT_FORMAT FORMAT_void_GLfloat
#define glVertexWeightfEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexWeightfEXT_NOT_VOID_WRAP(...) {}
#define glVertexWeightfvEXT_INDEX 2625
#define glVertexWeightfvEXT_RETURN void
#define glVertexWeightfvEXT_ARG_NAMES weight
#define glVertexWeightfvEXT_ARG_EXPAND const GLfloat * weight
#define glVertexWeightfvEXT_PACKED PACKED_void_const_GLfloat___GENPT__
#define glVertexWeightfvEXT_FORMAT FORMAT_void_const_GLfloat___GENPT__
#define glVertexWeightfvEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexWeightfvEXT_NOT_VOID_WRAP(...) {}
#define glVertexWeighthNV_INDEX 2626
#define glVertexWeighthNV_RETURN void
#define glVertexWeighthNV_ARG_NAMES weight
#define glVertexWeighthNV_ARG_EXPAND GLhalfNV weight
#define glVertexWeighthNV_PACKED PACKED_void_GLhalfNV
#define glVertexWeighthNV_FORMAT FORMAT_void_GLhalfNV
#define glVertexWeighthNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexWeighthNV_NOT_VOID_WRAP(...) {}
#define glVertexWeighthvNV_INDEX 2627
#define glVertexWeighthvNV_RETURN void
#define glVertexWeighthvNV_ARG_NAMES weight
#define glVertexWeighthvNV_ARG_EXPAND const GLhalfNV * weight
#define glVertexWeighthvNV_PACKED PACKED_void_const_GLhalfNV___GENPT__
#define glVertexWeighthvNV_FORMAT FORMAT_void_const_GLhalfNV___GENPT__
#define glVertexWeighthvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVertexWeighthvNV_NOT_VOID_WRAP(...) {}
#define glVideoCaptureNV_INDEX 2628
#define glVideoCaptureNV_RETURN GLenum
#define glVideoCaptureNV_ARG_NAMES video_capture_slot, sequence_num, capture_time
#define glVideoCaptureNV_ARG_EXPAND GLuint video_capture_slot, GLuint * sequence_num, GLuint64EXT * capture_time
#define glVideoCaptureNV_PACKED PACKED_GLenum_GLuint_GLuint___GENPT___GLuint64EXT___GENPT__
#define glVideoCaptureNV_FORMAT FORMAT_GLenum_GLuint_GLuint___GENPT___GLuint64EXT___GENPT__
#define glVideoCaptureNV_VOID_ONLY_WRAP(...) {}
#define glVideoCaptureNV_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glVideoCaptureStreamParameterdvNV_INDEX 2629
#define glVideoCaptureStreamParameterdvNV_RETURN void
#define glVideoCaptureStreamParameterdvNV_ARG_NAMES video_capture_slot, stream, pname, params
#define glVideoCaptureStreamParameterdvNV_ARG_EXPAND GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble * params
#define glVideoCaptureStreamParameterdvNV_PACKED PACKED_void_GLuint_GLuint_GLenum_const_GLdouble___GENPT__
#define glVideoCaptureStreamParameterdvNV_FORMAT FORMAT_void_GLuint_GLuint_GLenum_const_GLdouble___GENPT__
#define glVideoCaptureStreamParameterdvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVideoCaptureStreamParameterdvNV_NOT_VOID_WRAP(...) {}
#define glVideoCaptureStreamParameterfvNV_INDEX 2630
#define glVideoCaptureStreamParameterfvNV_RETURN void
#define glVideoCaptureStreamParameterfvNV_ARG_NAMES video_capture_slot, stream, pname, params
#define glVideoCaptureStreamParameterfvNV_ARG_EXPAND GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat * params
#define glVideoCaptureStreamParameterfvNV_PACKED PACKED_void_GLuint_GLuint_GLenum_const_GLfloat___GENPT__
#define glVideoCaptureStreamParameterfvNV_FORMAT FORMAT_void_GLuint_GLuint_GLenum_const_GLfloat___GENPT__
#define glVideoCaptureStreamParameterfvNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVideoCaptureStreamParameterfvNV_NOT_VOID_WRAP(...) {}
#define glVideoCaptureStreamParameterivNV_INDEX 2631
#define glVideoCaptureStreamParameterivNV_RETURN void
#define glVideoCaptureStreamParameterivNV_ARG_NAMES video_capture_slot, stream, pname, params
#define glVideoCaptureStreamParameterivNV_ARG_EXPAND GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint * params
#define glVideoCaptureStreamParameterivNV_PACKED PACKED_void_GLuint_GLuint_GLenum_const_GLint___GENPT__
#define glVideoCaptureStreamParameterivNV_FORMAT FORMAT_void_GLuint_GLuint_GLenum_const_GLint___GENPT__
#define glVideoCaptureStreamParameterivNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glVideoCaptureStreamParameterivNV_NOT_VOID_WRAP(...) {}
#define glViewport_INDEX 2632
#define glViewport_RETURN void
#define glViewport_ARG_NAMES x, y, width, height
#define glViewport_ARG_EXPAND GLint x, GLint y, GLsizei width, GLsizei height
#define glViewport_PACKED PACKED_void_GLint_GLint_GLsizei_GLsizei
#define glViewport_FORMAT FORMAT_void_GLint_GLint_GLsizei_GLsizei
#define glViewport_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glViewport_NOT_VOID_WRAP(...) {}
#define glViewportArrayv_INDEX 2633
#define glViewportArrayv_RETURN void
#define glViewportArrayv_ARG_NAMES first, count, v
#define glViewportArrayv_ARG_EXPAND GLuint first, GLsizei count, const GLfloat * v
#define glViewportArrayv_PACKED PACKED_void_GLuint_GLsizei_const_GLfloat___GENPT__
#define glViewportArrayv_FORMAT FORMAT_void_GLuint_GLsizei_const_GLfloat___GENPT__
#define glViewportArrayv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glViewportArrayv_NOT_VOID_WRAP(...) {}
#define glViewportIndexedf_INDEX 2634
#define glViewportIndexedf_RETURN void
#define glViewportIndexedf_ARG_NAMES index, x, y, w, h
#define glViewportIndexedf_ARG_EXPAND GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h
#define glViewportIndexedf_PACKED PACKED_void_GLuint_GLfloat_GLfloat_GLfloat_GLfloat
#define glViewportIndexedf_FORMAT FORMAT_void_GLuint_GLfloat_GLfloat_GLfloat_GLfloat
#define glViewportIndexedf_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glViewportIndexedf_NOT_VOID_WRAP(...) {}
#define glViewportIndexedfv_INDEX 2635
#define glViewportIndexedfv_RETURN void
#define glViewportIndexedfv_ARG_NAMES index, v
#define glViewportIndexedfv_ARG_EXPAND GLuint index, const GLfloat * v
#define glViewportIndexedfv_PACKED PACKED_void_GLuint_const_GLfloat___GENPT__
#define glViewportIndexedfv_FORMAT FORMAT_void_GLuint_const_GLfloat___GENPT__
#define glViewportIndexedfv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glViewportIndexedfv_NOT_VOID_WRAP(...) {}
#define glWaitSync_INDEX 2636
#define glWaitSync_RETURN void
#define glWaitSync_ARG_NAMES sync, flags, timeout
#define glWaitSync_ARG_EXPAND GLsync sync, GLbitfield flags, GLuint64 timeout
#define glWaitSync_PACKED PACKED_void_GLsync_GLbitfield_GLuint64
#define glWaitSync_FORMAT FORMAT_void_GLsync_GLbitfield_GLuint64
#define glWaitSync_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWaitSync_NOT_VOID_WRAP(...) {}
#define glWeightPathsNV_INDEX 2637
#define glWeightPathsNV_RETURN void
#define glWeightPathsNV_ARG_NAMES resultPath, numPaths, paths, weights
#define glWeightPathsNV_ARG_EXPAND GLuint resultPath, GLsizei numPaths, const GLuint * paths, const GLfloat * weights
#define glWeightPathsNV_PACKED PACKED_void_GLuint_GLsizei_const_GLuint___GENPT___const_GLfloat___GENPT__
#define glWeightPathsNV_FORMAT FORMAT_void_GLuint_GLsizei_const_GLuint___GENPT___const_GLfloat___GENPT__
#define glWeightPathsNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWeightPathsNV_NOT_VOID_WRAP(...) {}
#define glWeightPointerARB_INDEX 2638
#define glWeightPointerARB_RETURN void
#define glWeightPointerARB_ARG_NAMES size, type, stride, pointer
#define glWeightPointerARB_ARG_EXPAND GLint size, GLenum type, GLsizei stride, const GLvoid * pointer
#define glWeightPointerARB_PACKED PACKED_void_GLint_GLenum_GLsizei_const_GLvoid___GENPT__
#define glWeightPointerARB_FORMAT FORMAT_void_GLint_GLenum_GLsizei_const_GLvoid___GENPT__
#define glWeightPointerARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWeightPointerARB_NOT_VOID_WRAP(...) {}
#define glWeightbvARB_INDEX 2639
#define glWeightbvARB_RETURN void
#define glWeightbvARB_ARG_NAMES size, weights
#define glWeightbvARB_ARG_EXPAND GLint size, const GLbyte * weights
#define glWeightbvARB_PACKED PACKED_void_GLint_const_GLbyte___GENPT__
#define glWeightbvARB_FORMAT FORMAT_void_GLint_const_GLbyte___GENPT__
#define glWeightbvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWeightbvARB_NOT_VOID_WRAP(...) {}
#define glWeightdvARB_INDEX 2640
#define glWeightdvARB_RETURN void
#define glWeightdvARB_ARG_NAMES size, weights
#define glWeightdvARB_ARG_EXPAND GLint size, const GLdouble * weights
#define glWeightdvARB_PACKED PACKED_void_GLint_const_GLdouble___GENPT__
#define glWeightdvARB_FORMAT FORMAT_void_GLint_const_GLdouble___GENPT__
#define glWeightdvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWeightdvARB_NOT_VOID_WRAP(...) {}
#define glWeightfvARB_INDEX 2641
#define glWeightfvARB_RETURN void
#define glWeightfvARB_ARG_NAMES size, weights
#define glWeightfvARB_ARG_EXPAND GLint size, const GLfloat * weights
#define glWeightfvARB_PACKED PACKED_void_GLint_const_GLfloat___GENPT__
#define glWeightfvARB_FORMAT FORMAT_void_GLint_const_GLfloat___GENPT__
#define glWeightfvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWeightfvARB_NOT_VOID_WRAP(...) {}
#define glWeightivARB_INDEX 2642
#define glWeightivARB_RETURN void
#define glWeightivARB_ARG_NAMES size, weights
#define glWeightivARB_ARG_EXPAND GLint size, const GLint * weights
#define glWeightivARB_PACKED PACKED_void_GLint_const_GLint___GENPT__
#define glWeightivARB_FORMAT FORMAT_void_GLint_const_GLint___GENPT__
#define glWeightivARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWeightivARB_NOT_VOID_WRAP(...) {}
#define glWeightsvARB_INDEX 2643
#define glWeightsvARB_RETURN void
#define glWeightsvARB_ARG_NAMES size, weights
#define glWeightsvARB_ARG_EXPAND GLint size, const GLshort * weights
#define glWeightsvARB_PACKED PACKED_void_GLint_const_GLshort___GENPT__
#define glWeightsvARB_FORMAT FORMAT_void_GLint_const_GLshort___GENPT__
#define glWeightsvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWeightsvARB_NOT_VOID_WRAP(...) {}
#define glWeightubvARB_INDEX 2644
#define glWeightubvARB_RETURN void
#define glWeightubvARB_ARG_NAMES size, weights
#define glWeightubvARB_ARG_EXPAND GLint size, const GLubyte * weights
#define glWeightubvARB_PACKED PACKED_void_GLint_const_GLubyte___GENPT__
#define glWeightubvARB_FORMAT FORMAT_void_GLint_const_GLubyte___GENPT__
#define glWeightubvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWeightubvARB_NOT_VOID_WRAP(...) {}
#define glWeightuivARB_INDEX 2645
#define glWeightuivARB_RETURN void
#define glWeightuivARB_ARG_NAMES size, weights
#define glWeightuivARB_ARG_EXPAND GLint size, const GLuint * weights
#define glWeightuivARB_PACKED PACKED_void_GLint_const_GLuint___GENPT__
#define glWeightuivARB_FORMAT FORMAT_void_GLint_const_GLuint___GENPT__
#define glWeightuivARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWeightuivARB_NOT_VOID_WRAP(...) {}
#define glWeightusvARB_INDEX 2646
#define glWeightusvARB_RETURN void
#define glWeightusvARB_ARG_NAMES size, weights
#define glWeightusvARB_ARG_EXPAND GLint size, const GLushort * weights
#define glWeightusvARB_PACKED PACKED_void_GLint_const_GLushort___GENPT__
#define glWeightusvARB_FORMAT FORMAT_void_GLint_const_GLushort___GENPT__
#define glWeightusvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWeightusvARB_NOT_VOID_WRAP(...) {}
#define glWindowPos2d_INDEX 2647
#define glWindowPos2d_RETURN void
#define glWindowPos2d_ARG_NAMES x, y
#define glWindowPos2d_ARG_EXPAND GLdouble x, GLdouble y
#define glWindowPos2d_PACKED PACKED_void_GLdouble_GLdouble
#define glWindowPos2d_FORMAT FORMAT_void_GLdouble_GLdouble
#define glWindowPos2d_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos2d_NOT_VOID_WRAP(...) {}
#define glWindowPos2dARB_INDEX 2648
#define glWindowPos2dARB_RETURN void
#define glWindowPos2dARB_ARG_NAMES x, y
#define glWindowPos2dARB_ARG_EXPAND GLdouble x, GLdouble y
#define glWindowPos2dARB_PACKED PACKED_void_GLdouble_GLdouble
#define glWindowPos2dARB_FORMAT FORMAT_void_GLdouble_GLdouble
#define glWindowPos2dARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos2dARB_NOT_VOID_WRAP(...) {}
#define glWindowPos2dMESA_INDEX 2649
#define glWindowPos2dMESA_RETURN void
#define glWindowPos2dMESA_ARG_NAMES x, y
#define glWindowPos2dMESA_ARG_EXPAND GLdouble x, GLdouble y
#define glWindowPos2dMESA_PACKED PACKED_void_GLdouble_GLdouble
#define glWindowPos2dMESA_FORMAT FORMAT_void_GLdouble_GLdouble
#define glWindowPos2dMESA_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos2dMESA_NOT_VOID_WRAP(...) {}
#define glWindowPos2dv_INDEX 2650
#define glWindowPos2dv_RETURN void
#define glWindowPos2dv_ARG_NAMES v
#define glWindowPos2dv_ARG_EXPAND const GLdouble * v
#define glWindowPos2dv_PACKED PACKED_void_const_GLdouble___GENPT__
#define glWindowPos2dv_FORMAT FORMAT_void_const_GLdouble___GENPT__
#define glWindowPos2dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos2dv_NOT_VOID_WRAP(...) {}
#define glWindowPos2dvARB_INDEX 2651
#define glWindowPos2dvARB_RETURN void
#define glWindowPos2dvARB_ARG_NAMES v
#define glWindowPos2dvARB_ARG_EXPAND const GLdouble * v
#define glWindowPos2dvARB_PACKED PACKED_void_const_GLdouble___GENPT__
#define glWindowPos2dvARB_FORMAT FORMAT_void_const_GLdouble___GENPT__
#define glWindowPos2dvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos2dvARB_NOT_VOID_WRAP(...) {}
#define glWindowPos2dvMESA_INDEX 2652
#define glWindowPos2dvMESA_RETURN void
#define glWindowPos2dvMESA_ARG_NAMES v
#define glWindowPos2dvMESA_ARG_EXPAND const GLdouble * v
#define glWindowPos2dvMESA_PACKED PACKED_void_const_GLdouble___GENPT__
#define glWindowPos2dvMESA_FORMAT FORMAT_void_const_GLdouble___GENPT__
#define glWindowPos2dvMESA_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos2dvMESA_NOT_VOID_WRAP(...) {}
#define glWindowPos2f_INDEX 2653
#define glWindowPos2f_RETURN void
#define glWindowPos2f_ARG_NAMES x, y
#define glWindowPos2f_ARG_EXPAND GLfloat x, GLfloat y
#define glWindowPos2f_PACKED PACKED_void_GLfloat_GLfloat
#define glWindowPos2f_FORMAT FORMAT_void_GLfloat_GLfloat
#define glWindowPos2f_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos2f_NOT_VOID_WRAP(...) {}
#define glWindowPos2fARB_INDEX 2654
#define glWindowPos2fARB_RETURN void
#define glWindowPos2fARB_ARG_NAMES x, y
#define glWindowPos2fARB_ARG_EXPAND GLfloat x, GLfloat y
#define glWindowPos2fARB_PACKED PACKED_void_GLfloat_GLfloat
#define glWindowPos2fARB_FORMAT FORMAT_void_GLfloat_GLfloat
#define glWindowPos2fARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos2fARB_NOT_VOID_WRAP(...) {}
#define glWindowPos2fMESA_INDEX 2655
#define glWindowPos2fMESA_RETURN void
#define glWindowPos2fMESA_ARG_NAMES x, y
#define glWindowPos2fMESA_ARG_EXPAND GLfloat x, GLfloat y
#define glWindowPos2fMESA_PACKED PACKED_void_GLfloat_GLfloat
#define glWindowPos2fMESA_FORMAT FORMAT_void_GLfloat_GLfloat
#define glWindowPos2fMESA_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos2fMESA_NOT_VOID_WRAP(...) {}
#define glWindowPos2fv_INDEX 2656
#define glWindowPos2fv_RETURN void
#define glWindowPos2fv_ARG_NAMES v
#define glWindowPos2fv_ARG_EXPAND const GLfloat * v
#define glWindowPos2fv_PACKED PACKED_void_const_GLfloat___GENPT__
#define glWindowPos2fv_FORMAT FORMAT_void_const_GLfloat___GENPT__
#define glWindowPos2fv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos2fv_NOT_VOID_WRAP(...) {}
#define glWindowPos2fvARB_INDEX 2657
#define glWindowPos2fvARB_RETURN void
#define glWindowPos2fvARB_ARG_NAMES v
#define glWindowPos2fvARB_ARG_EXPAND const GLfloat * v
#define glWindowPos2fvARB_PACKED PACKED_void_const_GLfloat___GENPT__
#define glWindowPos2fvARB_FORMAT FORMAT_void_const_GLfloat___GENPT__
#define glWindowPos2fvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos2fvARB_NOT_VOID_WRAP(...) {}
#define glWindowPos2fvMESA_INDEX 2658
#define glWindowPos2fvMESA_RETURN void
#define glWindowPos2fvMESA_ARG_NAMES v
#define glWindowPos2fvMESA_ARG_EXPAND const GLfloat * v
#define glWindowPos2fvMESA_PACKED PACKED_void_const_GLfloat___GENPT__
#define glWindowPos2fvMESA_FORMAT FORMAT_void_const_GLfloat___GENPT__
#define glWindowPos2fvMESA_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos2fvMESA_NOT_VOID_WRAP(...) {}
#define glWindowPos2i_INDEX 2659
#define glWindowPos2i_RETURN void
#define glWindowPos2i_ARG_NAMES x, y
#define glWindowPos2i_ARG_EXPAND GLint x, GLint y
#define glWindowPos2i_PACKED PACKED_void_GLint_GLint
#define glWindowPos2i_FORMAT FORMAT_void_GLint_GLint
#define glWindowPos2i_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos2i_NOT_VOID_WRAP(...) {}
#define glWindowPos2iARB_INDEX 2660
#define glWindowPos2iARB_RETURN void
#define glWindowPos2iARB_ARG_NAMES x, y
#define glWindowPos2iARB_ARG_EXPAND GLint x, GLint y
#define glWindowPos2iARB_PACKED PACKED_void_GLint_GLint
#define glWindowPos2iARB_FORMAT FORMAT_void_GLint_GLint
#define glWindowPos2iARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos2iARB_NOT_VOID_WRAP(...) {}
#define glWindowPos2iMESA_INDEX 2661
#define glWindowPos2iMESA_RETURN void
#define glWindowPos2iMESA_ARG_NAMES x, y
#define glWindowPos2iMESA_ARG_EXPAND GLint x, GLint y
#define glWindowPos2iMESA_PACKED PACKED_void_GLint_GLint
#define glWindowPos2iMESA_FORMAT FORMAT_void_GLint_GLint
#define glWindowPos2iMESA_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos2iMESA_NOT_VOID_WRAP(...) {}
#define glWindowPos2iv_INDEX 2662
#define glWindowPos2iv_RETURN void
#define glWindowPos2iv_ARG_NAMES v
#define glWindowPos2iv_ARG_EXPAND const GLint * v
#define glWindowPos2iv_PACKED PACKED_void_const_GLint___GENPT__
#define glWindowPos2iv_FORMAT FORMAT_void_const_GLint___GENPT__
#define glWindowPos2iv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos2iv_NOT_VOID_WRAP(...) {}
#define glWindowPos2ivARB_INDEX 2663
#define glWindowPos2ivARB_RETURN void
#define glWindowPos2ivARB_ARG_NAMES v
#define glWindowPos2ivARB_ARG_EXPAND const GLint * v
#define glWindowPos2ivARB_PACKED PACKED_void_const_GLint___GENPT__
#define glWindowPos2ivARB_FORMAT FORMAT_void_const_GLint___GENPT__
#define glWindowPos2ivARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos2ivARB_NOT_VOID_WRAP(...) {}
#define glWindowPos2ivMESA_INDEX 2664
#define glWindowPos2ivMESA_RETURN void
#define glWindowPos2ivMESA_ARG_NAMES v
#define glWindowPos2ivMESA_ARG_EXPAND const GLint * v
#define glWindowPos2ivMESA_PACKED PACKED_void_const_GLint___GENPT__
#define glWindowPos2ivMESA_FORMAT FORMAT_void_const_GLint___GENPT__
#define glWindowPos2ivMESA_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos2ivMESA_NOT_VOID_WRAP(...) {}
#define glWindowPos2s_INDEX 2665
#define glWindowPos2s_RETURN void
#define glWindowPos2s_ARG_NAMES x, y
#define glWindowPos2s_ARG_EXPAND GLshort x, GLshort y
#define glWindowPos2s_PACKED PACKED_void_GLshort_GLshort
#define glWindowPos2s_FORMAT FORMAT_void_GLshort_GLshort
#define glWindowPos2s_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos2s_NOT_VOID_WRAP(...) {}
#define glWindowPos2sARB_INDEX 2666
#define glWindowPos2sARB_RETURN void
#define glWindowPos2sARB_ARG_NAMES x, y
#define glWindowPos2sARB_ARG_EXPAND GLshort x, GLshort y
#define glWindowPos2sARB_PACKED PACKED_void_GLshort_GLshort
#define glWindowPos2sARB_FORMAT FORMAT_void_GLshort_GLshort
#define glWindowPos2sARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos2sARB_NOT_VOID_WRAP(...) {}
#define glWindowPos2sMESA_INDEX 2667
#define glWindowPos2sMESA_RETURN void
#define glWindowPos2sMESA_ARG_NAMES x, y
#define glWindowPos2sMESA_ARG_EXPAND GLshort x, GLshort y
#define glWindowPos2sMESA_PACKED PACKED_void_GLshort_GLshort
#define glWindowPos2sMESA_FORMAT FORMAT_void_GLshort_GLshort
#define glWindowPos2sMESA_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos2sMESA_NOT_VOID_WRAP(...) {}
#define glWindowPos2sv_INDEX 2668
#define glWindowPos2sv_RETURN void
#define glWindowPos2sv_ARG_NAMES v
#define glWindowPos2sv_ARG_EXPAND const GLshort * v
#define glWindowPos2sv_PACKED PACKED_void_const_GLshort___GENPT__
#define glWindowPos2sv_FORMAT FORMAT_void_const_GLshort___GENPT__
#define glWindowPos2sv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos2sv_NOT_VOID_WRAP(...) {}
#define glWindowPos2svARB_INDEX 2669
#define glWindowPos2svARB_RETURN void
#define glWindowPos2svARB_ARG_NAMES v
#define glWindowPos2svARB_ARG_EXPAND const GLshort * v
#define glWindowPos2svARB_PACKED PACKED_void_const_GLshort___GENPT__
#define glWindowPos2svARB_FORMAT FORMAT_void_const_GLshort___GENPT__
#define glWindowPos2svARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos2svARB_NOT_VOID_WRAP(...) {}
#define glWindowPos2svMESA_INDEX 2670
#define glWindowPos2svMESA_RETURN void
#define glWindowPos2svMESA_ARG_NAMES v
#define glWindowPos2svMESA_ARG_EXPAND const GLshort * v
#define glWindowPos2svMESA_PACKED PACKED_void_const_GLshort___GENPT__
#define glWindowPos2svMESA_FORMAT FORMAT_void_const_GLshort___GENPT__
#define glWindowPos2svMESA_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos2svMESA_NOT_VOID_WRAP(...) {}
#define glWindowPos3d_INDEX 2671
#define glWindowPos3d_RETURN void
#define glWindowPos3d_ARG_NAMES x, y, z
#define glWindowPos3d_ARG_EXPAND GLdouble x, GLdouble y, GLdouble z
#define glWindowPos3d_PACKED PACKED_void_GLdouble_GLdouble_GLdouble
#define glWindowPos3d_FORMAT FORMAT_void_GLdouble_GLdouble_GLdouble
#define glWindowPos3d_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos3d_NOT_VOID_WRAP(...) {}
#define glWindowPos3dARB_INDEX 2672
#define glWindowPos3dARB_RETURN void
#define glWindowPos3dARB_ARG_NAMES x, y, z
#define glWindowPos3dARB_ARG_EXPAND GLdouble x, GLdouble y, GLdouble z
#define glWindowPos3dARB_PACKED PACKED_void_GLdouble_GLdouble_GLdouble
#define glWindowPos3dARB_FORMAT FORMAT_void_GLdouble_GLdouble_GLdouble
#define glWindowPos3dARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos3dARB_NOT_VOID_WRAP(...) {}
#define glWindowPos3dMESA_INDEX 2673
#define glWindowPos3dMESA_RETURN void
#define glWindowPos3dMESA_ARG_NAMES x, y, z
#define glWindowPos3dMESA_ARG_EXPAND GLdouble x, GLdouble y, GLdouble z
#define glWindowPos3dMESA_PACKED PACKED_void_GLdouble_GLdouble_GLdouble
#define glWindowPos3dMESA_FORMAT FORMAT_void_GLdouble_GLdouble_GLdouble
#define glWindowPos3dMESA_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos3dMESA_NOT_VOID_WRAP(...) {}
#define glWindowPos3dv_INDEX 2674
#define glWindowPos3dv_RETURN void
#define glWindowPos3dv_ARG_NAMES v
#define glWindowPos3dv_ARG_EXPAND const GLdouble * v
#define glWindowPos3dv_PACKED PACKED_void_const_GLdouble___GENPT__
#define glWindowPos3dv_FORMAT FORMAT_void_const_GLdouble___GENPT__
#define glWindowPos3dv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos3dv_NOT_VOID_WRAP(...) {}
#define glWindowPos3dvARB_INDEX 2675
#define glWindowPos3dvARB_RETURN void
#define glWindowPos3dvARB_ARG_NAMES v
#define glWindowPos3dvARB_ARG_EXPAND const GLdouble * v
#define glWindowPos3dvARB_PACKED PACKED_void_const_GLdouble___GENPT__
#define glWindowPos3dvARB_FORMAT FORMAT_void_const_GLdouble___GENPT__
#define glWindowPos3dvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos3dvARB_NOT_VOID_WRAP(...) {}
#define glWindowPos3dvMESA_INDEX 2676
#define glWindowPos3dvMESA_RETURN void
#define glWindowPos3dvMESA_ARG_NAMES v
#define glWindowPos3dvMESA_ARG_EXPAND const GLdouble * v
#define glWindowPos3dvMESA_PACKED PACKED_void_const_GLdouble___GENPT__
#define glWindowPos3dvMESA_FORMAT FORMAT_void_const_GLdouble___GENPT__
#define glWindowPos3dvMESA_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos3dvMESA_NOT_VOID_WRAP(...) {}
#define glWindowPos3f_INDEX 2677
#define glWindowPos3f_RETURN void
#define glWindowPos3f_ARG_NAMES x, y, z
#define glWindowPos3f_ARG_EXPAND GLfloat x, GLfloat y, GLfloat z
#define glWindowPos3f_PACKED PACKED_void_GLfloat_GLfloat_GLfloat
#define glWindowPos3f_FORMAT FORMAT_void_GLfloat_GLfloat_GLfloat
#define glWindowPos3f_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos3f_NOT_VOID_WRAP(...) {}
#define glWindowPos3fARB_INDEX 2678
#define glWindowPos3fARB_RETURN void
#define glWindowPos3fARB_ARG_NAMES x, y, z
#define glWindowPos3fARB_ARG_EXPAND GLfloat x, GLfloat y, GLfloat z
#define glWindowPos3fARB_PACKED PACKED_void_GLfloat_GLfloat_GLfloat
#define glWindowPos3fARB_FORMAT FORMAT_void_GLfloat_GLfloat_GLfloat
#define glWindowPos3fARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos3fARB_NOT_VOID_WRAP(...) {}
#define glWindowPos3fMESA_INDEX 2679
#define glWindowPos3fMESA_RETURN void
#define glWindowPos3fMESA_ARG_NAMES x, y, z
#define glWindowPos3fMESA_ARG_EXPAND GLfloat x, GLfloat y, GLfloat z
#define glWindowPos3fMESA_PACKED PACKED_void_GLfloat_GLfloat_GLfloat
#define glWindowPos3fMESA_FORMAT FORMAT_void_GLfloat_GLfloat_GLfloat
#define glWindowPos3fMESA_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos3fMESA_NOT_VOID_WRAP(...) {}
#define glWindowPos3fv_INDEX 2680
#define glWindowPos3fv_RETURN void
#define glWindowPos3fv_ARG_NAMES v
#define glWindowPos3fv_ARG_EXPAND const GLfloat * v
#define glWindowPos3fv_PACKED PACKED_void_const_GLfloat___GENPT__
#define glWindowPos3fv_FORMAT FORMAT_void_const_GLfloat___GENPT__
#define glWindowPos3fv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos3fv_NOT_VOID_WRAP(...) {}
#define glWindowPos3fvARB_INDEX 2681
#define glWindowPos3fvARB_RETURN void
#define glWindowPos3fvARB_ARG_NAMES v
#define glWindowPos3fvARB_ARG_EXPAND const GLfloat * v
#define glWindowPos3fvARB_PACKED PACKED_void_const_GLfloat___GENPT__
#define glWindowPos3fvARB_FORMAT FORMAT_void_const_GLfloat___GENPT__
#define glWindowPos3fvARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos3fvARB_NOT_VOID_WRAP(...) {}
#define glWindowPos3fvMESA_INDEX 2682
#define glWindowPos3fvMESA_RETURN void
#define glWindowPos3fvMESA_ARG_NAMES v
#define glWindowPos3fvMESA_ARG_EXPAND const GLfloat * v
#define glWindowPos3fvMESA_PACKED PACKED_void_const_GLfloat___GENPT__
#define glWindowPos3fvMESA_FORMAT FORMAT_void_const_GLfloat___GENPT__
#define glWindowPos3fvMESA_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos3fvMESA_NOT_VOID_WRAP(...) {}
#define glWindowPos3i_INDEX 2683
#define glWindowPos3i_RETURN void
#define glWindowPos3i_ARG_NAMES x, y, z
#define glWindowPos3i_ARG_EXPAND GLint x, GLint y, GLint z
#define glWindowPos3i_PACKED PACKED_void_GLint_GLint_GLint
#define glWindowPos3i_FORMAT FORMAT_void_GLint_GLint_GLint
#define glWindowPos3i_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos3i_NOT_VOID_WRAP(...) {}
#define glWindowPos3iARB_INDEX 2684
#define glWindowPos3iARB_RETURN void
#define glWindowPos3iARB_ARG_NAMES x, y, z
#define glWindowPos3iARB_ARG_EXPAND GLint x, GLint y, GLint z
#define glWindowPos3iARB_PACKED PACKED_void_GLint_GLint_GLint
#define glWindowPos3iARB_FORMAT FORMAT_void_GLint_GLint_GLint
#define glWindowPos3iARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos3iARB_NOT_VOID_WRAP(...) {}
#define glWindowPos3iMESA_INDEX 2685
#define glWindowPos3iMESA_RETURN void
#define glWindowPos3iMESA_ARG_NAMES x, y, z
#define glWindowPos3iMESA_ARG_EXPAND GLint x, GLint y, GLint z
#define glWindowPos3iMESA_PACKED PACKED_void_GLint_GLint_GLint
#define glWindowPos3iMESA_FORMAT FORMAT_void_GLint_GLint_GLint
#define glWindowPos3iMESA_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos3iMESA_NOT_VOID_WRAP(...) {}
#define glWindowPos3iv_INDEX 2686
#define glWindowPos3iv_RETURN void
#define glWindowPos3iv_ARG_NAMES v
#define glWindowPos3iv_ARG_EXPAND const GLint * v
#define glWindowPos3iv_PACKED PACKED_void_const_GLint___GENPT__
#define glWindowPos3iv_FORMAT FORMAT_void_const_GLint___GENPT__
#define glWindowPos3iv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos3iv_NOT_VOID_WRAP(...) {}
#define glWindowPos3ivARB_INDEX 2687
#define glWindowPos3ivARB_RETURN void
#define glWindowPos3ivARB_ARG_NAMES v
#define glWindowPos3ivARB_ARG_EXPAND const GLint * v
#define glWindowPos3ivARB_PACKED PACKED_void_const_GLint___GENPT__
#define glWindowPos3ivARB_FORMAT FORMAT_void_const_GLint___GENPT__
#define glWindowPos3ivARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos3ivARB_NOT_VOID_WRAP(...) {}
#define glWindowPos3ivMESA_INDEX 2688
#define glWindowPos3ivMESA_RETURN void
#define glWindowPos3ivMESA_ARG_NAMES v
#define glWindowPos3ivMESA_ARG_EXPAND const GLint * v
#define glWindowPos3ivMESA_PACKED PACKED_void_const_GLint___GENPT__
#define glWindowPos3ivMESA_FORMAT FORMAT_void_const_GLint___GENPT__
#define glWindowPos3ivMESA_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos3ivMESA_NOT_VOID_WRAP(...) {}
#define glWindowPos3s_INDEX 2689
#define glWindowPos3s_RETURN void
#define glWindowPos3s_ARG_NAMES x, y, z
#define glWindowPos3s_ARG_EXPAND GLshort x, GLshort y, GLshort z
#define glWindowPos3s_PACKED PACKED_void_GLshort_GLshort_GLshort
#define glWindowPos3s_FORMAT FORMAT_void_GLshort_GLshort_GLshort
#define glWindowPos3s_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos3s_NOT_VOID_WRAP(...) {}
#define glWindowPos3sARB_INDEX 2690
#define glWindowPos3sARB_RETURN void
#define glWindowPos3sARB_ARG_NAMES x, y, z
#define glWindowPos3sARB_ARG_EXPAND GLshort x, GLshort y, GLshort z
#define glWindowPos3sARB_PACKED PACKED_void_GLshort_GLshort_GLshort
#define glWindowPos3sARB_FORMAT FORMAT_void_GLshort_GLshort_GLshort
#define glWindowPos3sARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos3sARB_NOT_VOID_WRAP(...) {}
#define glWindowPos3sMESA_INDEX 2691
#define glWindowPos3sMESA_RETURN void
#define glWindowPos3sMESA_ARG_NAMES x, y, z
#define glWindowPos3sMESA_ARG_EXPAND GLshort x, GLshort y, GLshort z
#define glWindowPos3sMESA_PACKED PACKED_void_GLshort_GLshort_GLshort
#define glWindowPos3sMESA_FORMAT FORMAT_void_GLshort_GLshort_GLshort
#define glWindowPos3sMESA_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos3sMESA_NOT_VOID_WRAP(...) {}
#define glWindowPos3sv_INDEX 2692
#define glWindowPos3sv_RETURN void
#define glWindowPos3sv_ARG_NAMES v
#define glWindowPos3sv_ARG_EXPAND const GLshort * v
#define glWindowPos3sv_PACKED PACKED_void_const_GLshort___GENPT__
#define glWindowPos3sv_FORMAT FORMAT_void_const_GLshort___GENPT__
#define glWindowPos3sv_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos3sv_NOT_VOID_WRAP(...) {}
#define glWindowPos3svARB_INDEX 2693
#define glWindowPos3svARB_RETURN void
#define glWindowPos3svARB_ARG_NAMES v
#define glWindowPos3svARB_ARG_EXPAND const GLshort * v
#define glWindowPos3svARB_PACKED PACKED_void_const_GLshort___GENPT__
#define glWindowPos3svARB_FORMAT FORMAT_void_const_GLshort___GENPT__
#define glWindowPos3svARB_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos3svARB_NOT_VOID_WRAP(...) {}
#define glWindowPos3svMESA_INDEX 2694
#define glWindowPos3svMESA_RETURN void
#define glWindowPos3svMESA_ARG_NAMES v
#define glWindowPos3svMESA_ARG_EXPAND const GLshort * v
#define glWindowPos3svMESA_PACKED PACKED_void_const_GLshort___GENPT__
#define glWindowPos3svMESA_FORMAT FORMAT_void_const_GLshort___GENPT__
#define glWindowPos3svMESA_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos3svMESA_NOT_VOID_WRAP(...) {}
#define glWindowPos4dMESA_INDEX 2695
#define glWindowPos4dMESA_RETURN void
#define glWindowPos4dMESA_ARG_NAMES x, y, z, w
#define glWindowPos4dMESA_ARG_EXPAND GLdouble x, GLdouble y, GLdouble z, GLdouble w
#define glWindowPos4dMESA_PACKED PACKED_void_GLdouble_GLdouble_GLdouble_GLdouble
#define glWindowPos4dMESA_FORMAT FORMAT_void_GLdouble_GLdouble_GLdouble_GLdouble
#define glWindowPos4dMESA_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos4dMESA_NOT_VOID_WRAP(...) {}
#define glWindowPos4dvMESA_INDEX 2696
#define glWindowPos4dvMESA_RETURN void
#define glWindowPos4dvMESA_ARG_NAMES v
#define glWindowPos4dvMESA_ARG_EXPAND const GLdouble * v
#define glWindowPos4dvMESA_PACKED PACKED_void_const_GLdouble___GENPT__
#define glWindowPos4dvMESA_FORMAT FORMAT_void_const_GLdouble___GENPT__
#define glWindowPos4dvMESA_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos4dvMESA_NOT_VOID_WRAP(...) {}
#define glWindowPos4fMESA_INDEX 2697
#define glWindowPos4fMESA_RETURN void
#define glWindowPos4fMESA_ARG_NAMES x, y, z, w
#define glWindowPos4fMESA_ARG_EXPAND GLfloat x, GLfloat y, GLfloat z, GLfloat w
#define glWindowPos4fMESA_PACKED PACKED_void_GLfloat_GLfloat_GLfloat_GLfloat
#define glWindowPos4fMESA_FORMAT FORMAT_void_GLfloat_GLfloat_GLfloat_GLfloat
#define glWindowPos4fMESA_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos4fMESA_NOT_VOID_WRAP(...) {}
#define glWindowPos4fvMESA_INDEX 2698
#define glWindowPos4fvMESA_RETURN void
#define glWindowPos4fvMESA_ARG_NAMES v
#define glWindowPos4fvMESA_ARG_EXPAND const GLfloat * v
#define glWindowPos4fvMESA_PACKED PACKED_void_const_GLfloat___GENPT__
#define glWindowPos4fvMESA_FORMAT FORMAT_void_const_GLfloat___GENPT__
#define glWindowPos4fvMESA_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos4fvMESA_NOT_VOID_WRAP(...) {}
#define glWindowPos4iMESA_INDEX 2699
#define glWindowPos4iMESA_RETURN void
#define glWindowPos4iMESA_ARG_NAMES x, y, z, w
#define glWindowPos4iMESA_ARG_EXPAND GLint x, GLint y, GLint z, GLint w
#define glWindowPos4iMESA_PACKED PACKED_void_GLint_GLint_GLint_GLint
#define glWindowPos4iMESA_FORMAT FORMAT_void_GLint_GLint_GLint_GLint
#define glWindowPos4iMESA_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos4iMESA_NOT_VOID_WRAP(...) {}
#define glWindowPos4ivMESA_INDEX 2700
#define glWindowPos4ivMESA_RETURN void
#define glWindowPos4ivMESA_ARG_NAMES v
#define glWindowPos4ivMESA_ARG_EXPAND const GLint * v
#define glWindowPos4ivMESA_PACKED PACKED_void_const_GLint___GENPT__
#define glWindowPos4ivMESA_FORMAT FORMAT_void_const_GLint___GENPT__
#define glWindowPos4ivMESA_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos4ivMESA_NOT_VOID_WRAP(...) {}
#define glWindowPos4sMESA_INDEX 2701
#define glWindowPos4sMESA_RETURN void
#define glWindowPos4sMESA_ARG_NAMES x, y, z, w
#define glWindowPos4sMESA_ARG_EXPAND GLshort x, GLshort y, GLshort z, GLshort w
#define glWindowPos4sMESA_PACKED PACKED_void_GLshort_GLshort_GLshort_GLshort
#define glWindowPos4sMESA_FORMAT FORMAT_void_GLshort_GLshort_GLshort_GLshort
#define glWindowPos4sMESA_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos4sMESA_NOT_VOID_WRAP(...) {}
#define glWindowPos4svMESA_INDEX 2702
#define glWindowPos4svMESA_RETURN void
#define glWindowPos4svMESA_ARG_NAMES v
#define glWindowPos4svMESA_ARG_EXPAND const GLshort * v
#define glWindowPos4svMESA_PACKED PACKED_void_const_GLshort___GENPT__
#define glWindowPos4svMESA_FORMAT FORMAT_void_const_GLshort___GENPT__
#define glWindowPos4svMESA_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWindowPos4svMESA_NOT_VOID_WRAP(...) {}
#define glWriteMaskEXT_INDEX 2703
#define glWriteMaskEXT_RETURN void
#define glWriteMaskEXT_ARG_NAMES res, in, outX, outY, outZ, outW
#define glWriteMaskEXT_ARG_EXPAND GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW
#define glWriteMaskEXT_PACKED PACKED_void_GLuint_GLuint_GLenum_GLenum_GLenum_GLenum
#define glWriteMaskEXT_FORMAT FORMAT_void_GLuint_GLuint_GLenum_GLenum_GLenum_GLenum
#define glWriteMaskEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glWriteMaskEXT_NOT_VOID_WRAP(...) {}
#define glXAssociateDMPbufferSGIX_INDEX 2704
#define glXAssociateDMPbufferSGIX_RETURN Bool
#define glXAssociateDMPbufferSGIX_ARG_NAMES dpy, pbuffer, params, dmbuffer
#define glXAssociateDMPbufferSGIX_ARG_EXPAND Display * dpy, GLXPbufferSGIX pbuffer, DMparams * params, DMbuffer dmbuffer
#define glXAssociateDMPbufferSGIX_PACKED PACKED_Bool_Display___GENPT___GLXPbufferSGIX_DMparams___GENPT___DMbuffer
#define glXAssociateDMPbufferSGIX_FORMAT FORMAT_Bool_Display___GENPT___GLXPbufferSGIX_DMparams___GENPT___DMbuffer
#define glXAssociateDMPbufferSGIX_VOID_ONLY_WRAP(...) {}
#define glXAssociateDMPbufferSGIX_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXBindChannelToWindowSGIX_INDEX 2705
#define glXBindChannelToWindowSGIX_RETURN int
#define glXBindChannelToWindowSGIX_ARG_NAMES display, screen, channel, window
#define glXBindChannelToWindowSGIX_ARG_EXPAND Display * display, int screen, int channel, Window window
#define glXBindChannelToWindowSGIX_PACKED PACKED_int_Display___GENPT___int_int_Window
#define glXBindChannelToWindowSGIX_FORMAT FORMAT_int_Display___GENPT___int_int_Window
#define glXBindChannelToWindowSGIX_VOID_ONLY_WRAP(...) {}
#define glXBindChannelToWindowSGIX_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXBindHyperpipeSGIX_INDEX 2706
#define glXBindHyperpipeSGIX_RETURN int
#define glXBindHyperpipeSGIX_ARG_NAMES dpy, hpId
#define glXBindHyperpipeSGIX_ARG_EXPAND Display * dpy, int hpId
#define glXBindHyperpipeSGIX_PACKED PACKED_int_Display___GENPT___int
#define glXBindHyperpipeSGIX_FORMAT FORMAT_int_Display___GENPT___int
#define glXBindHyperpipeSGIX_VOID_ONLY_WRAP(...) {}
#define glXBindHyperpipeSGIX_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXBindSwapBarrierNV_INDEX 2707
#define glXBindSwapBarrierNV_RETURN Bool
#define glXBindSwapBarrierNV_ARG_NAMES dpy, group, barrier
#define glXBindSwapBarrierNV_ARG_EXPAND Display * dpy, GLuint group, GLuint barrier
#define glXBindSwapBarrierNV_PACKED PACKED_Bool_Display___GENPT___GLuint_GLuint
#define glXBindSwapBarrierNV_FORMAT FORMAT_Bool_Display___GENPT___GLuint_GLuint
#define glXBindSwapBarrierNV_VOID_ONLY_WRAP(...) {}
#define glXBindSwapBarrierNV_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXBindSwapBarrierSGIX_INDEX 2708
#define glXBindSwapBarrierSGIX_RETURN void
#define glXBindSwapBarrierSGIX_ARG_NAMES dpy, drawable, barrier
#define glXBindSwapBarrierSGIX_ARG_EXPAND Display * dpy, GLXDrawable drawable, int barrier
#define glXBindSwapBarrierSGIX_PACKED PACKED_void_Display___GENPT___GLXDrawable_int
#define glXBindSwapBarrierSGIX_FORMAT FORMAT_void_Display___GENPT___GLXDrawable_int
#define glXBindSwapBarrierSGIX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glXBindSwapBarrierSGIX_NOT_VOID_WRAP(...) {}
#define glXBindTexImageEXT_INDEX 2709
#define glXBindTexImageEXT_RETURN void
#define glXBindTexImageEXT_ARG_NAMES dpy, drawable, buffer, attrib_list
#define glXBindTexImageEXT_ARG_EXPAND Display * dpy, GLXDrawable drawable, int buffer, const int * attrib_list
#define glXBindTexImageEXT_PACKED PACKED_void_Display___GENPT___GLXDrawable_int_const_int___GENPT__
#define glXBindTexImageEXT_FORMAT FORMAT_void_Display___GENPT___GLXDrawable_int_const_int___GENPT__
#define glXBindTexImageEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glXBindTexImageEXT_NOT_VOID_WRAP(...) {}
#define glXBindVideoCaptureDeviceNV_INDEX 2710
#define glXBindVideoCaptureDeviceNV_RETURN int
#define glXBindVideoCaptureDeviceNV_ARG_NAMES dpy, video_capture_slot, device
#define glXBindVideoCaptureDeviceNV_ARG_EXPAND Display * dpy, unsigned int video_capture_slot, GLXVideoCaptureDeviceNV device
#define glXBindVideoCaptureDeviceNV_PACKED PACKED_int_Display___GENPT___unsigned_int_GLXVideoCaptureDeviceNV
#define glXBindVideoCaptureDeviceNV_FORMAT FORMAT_int_Display___GENPT___unsigned_int_GLXVideoCaptureDeviceNV
#define glXBindVideoCaptureDeviceNV_VOID_ONLY_WRAP(...) {}
#define glXBindVideoCaptureDeviceNV_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXBindVideoDeviceNV_INDEX 2711
#define glXBindVideoDeviceNV_RETURN int
#define glXBindVideoDeviceNV_ARG_NAMES dpy, video_slot, video_device, attrib_list
#define glXBindVideoDeviceNV_ARG_EXPAND Display * dpy, unsigned int video_slot, unsigned int video_device, const int * attrib_list
#define glXBindVideoDeviceNV_PACKED PACKED_int_Display___GENPT___unsigned_int_unsigned_int_const_int___GENPT__
#define glXBindVideoDeviceNV_FORMAT FORMAT_int_Display___GENPT___unsigned_int_unsigned_int_const_int___GENPT__
#define glXBindVideoDeviceNV_VOID_ONLY_WRAP(...) {}
#define glXBindVideoDeviceNV_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXBindVideoImageNV_INDEX 2712
#define glXBindVideoImageNV_RETURN int
#define glXBindVideoImageNV_ARG_NAMES dpy, VideoDevice, pbuf, iVideoBuffer
#define glXBindVideoImageNV_ARG_EXPAND Display * dpy, GLXVideoDeviceNV VideoDevice, GLXPbuffer pbuf, int iVideoBuffer
#define glXBindVideoImageNV_PACKED PACKED_int_Display___GENPT___GLXVideoDeviceNV_GLXPbuffer_int
#define glXBindVideoImageNV_FORMAT FORMAT_int_Display___GENPT___GLXVideoDeviceNV_GLXPbuffer_int
#define glXBindVideoImageNV_VOID_ONLY_WRAP(...) {}
#define glXBindVideoImageNV_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXChangeDrawableAttributes_INDEX 2713
#define glXChangeDrawableAttributes_RETURN void
#define glXChangeDrawableAttributes_ARG_NAMES drawable
#define glXChangeDrawableAttributes_ARG_EXPAND uint32_t drawable
#define glXChangeDrawableAttributes_PACKED PACKED_void_uint32_t
#define glXChangeDrawableAttributes_FORMAT FORMAT_void_uint32_t
#define glXChangeDrawableAttributes_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glXChangeDrawableAttributes_NOT_VOID_WRAP(...) {}
#define glXChangeDrawableAttributesSGIX_INDEX 2714
#define glXChangeDrawableAttributesSGIX_RETURN void
#define glXChangeDrawableAttributesSGIX_ARG_NAMES drawable
#define glXChangeDrawableAttributesSGIX_ARG_EXPAND uint32_t drawable
#define glXChangeDrawableAttributesSGIX_PACKED PACKED_void_uint32_t
#define glXChangeDrawableAttributesSGIX_FORMAT FORMAT_void_uint32_t
#define glXChangeDrawableAttributesSGIX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glXChangeDrawableAttributesSGIX_NOT_VOID_WRAP(...) {}
#define glXChannelRectSGIX_INDEX 2715
#define glXChannelRectSGIX_RETURN int
#define glXChannelRectSGIX_ARG_NAMES display, screen, channel, x, y, w, h
#define glXChannelRectSGIX_ARG_EXPAND Display * display, int screen, int channel, int x, int y, int w, int h
#define glXChannelRectSGIX_PACKED PACKED_int_Display___GENPT___int_int_int_int_int_int
#define glXChannelRectSGIX_FORMAT FORMAT_int_Display___GENPT___int_int_int_int_int_int
#define glXChannelRectSGIX_VOID_ONLY_WRAP(...) {}
#define glXChannelRectSGIX_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXChannelRectSyncSGIX_INDEX 2716
#define glXChannelRectSyncSGIX_RETURN int
#define glXChannelRectSyncSGIX_ARG_NAMES display, screen, channel, synctype
#define glXChannelRectSyncSGIX_ARG_EXPAND Display * display, int screen, int channel, GLenum synctype
#define glXChannelRectSyncSGIX_PACKED PACKED_int_Display___GENPT___int_int_GLenum
#define glXChannelRectSyncSGIX_FORMAT FORMAT_int_Display___GENPT___int_int_GLenum
#define glXChannelRectSyncSGIX_VOID_ONLY_WRAP(...) {}
#define glXChannelRectSyncSGIX_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXChooseFBConfig_INDEX 2717
#define glXChooseFBConfig_RETURN GLXFBConfig *
#define glXChooseFBConfig_ARG_NAMES dpy, screen, attrib_list, nelements
#define glXChooseFBConfig_ARG_EXPAND Display * dpy, int screen, const int * attrib_list, int * nelements
#define glXChooseFBConfig_PACKED PACKED_GLXFBConfig___GENPT___Display___GENPT___int_const_int___GENPT___int___GENPT__
#define glXChooseFBConfig_FORMAT FORMAT_GLXFBConfig___GENPT___Display___GENPT___int_const_int___GENPT___int___GENPT__
#define glXChooseFBConfig_VOID_ONLY_WRAP(...) {}
#define glXChooseFBConfig_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXChooseFBConfigSGIX_INDEX 2718
#define glXChooseFBConfigSGIX_RETURN GLXFBConfigSGIX *
#define glXChooseFBConfigSGIX_ARG_NAMES dpy, screen, attrib_list, nelements
#define glXChooseFBConfigSGIX_ARG_EXPAND Display * dpy, int screen, int * attrib_list, int * nelements
#define glXChooseFBConfigSGIX_PACKED PACKED_GLXFBConfigSGIX___GENPT___Display___GENPT___int_int___GENPT___int___GENPT__
#define glXChooseFBConfigSGIX_FORMAT FORMAT_GLXFBConfigSGIX___GENPT___Display___GENPT___int_int___GENPT___int___GENPT__
#define glXChooseFBConfigSGIX_VOID_ONLY_WRAP(...) {}
#define glXChooseFBConfigSGIX_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXChooseVisual_INDEX 2719
#define glXChooseVisual_RETURN XVisualInfo *
#define glXChooseVisual_ARG_NAMES dpy, screen, attribList
#define glXChooseVisual_ARG_EXPAND Display * dpy, int screen, int * attribList
#define glXChooseVisual_PACKED PACKED_XVisualInfo___GENPT___Display___GENPT___int_int___GENPT__
#define glXChooseVisual_FORMAT FORMAT_XVisualInfo___GENPT___Display___GENPT___int_int___GENPT__
#define glXChooseVisual_VOID_ONLY_WRAP(...) {}
#define glXChooseVisual_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXClientInfo_INDEX 2720
#define glXClientInfo_RETURN void
#define glXClientInfo_ARG_NAMES 
#define glXClientInfo_ARG_EXPAND 
#define glXClientInfo_PACKED PACKED_void
#define glXClientInfo_FORMAT FORMAT_void
#define glXClientInfo_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glXClientInfo_NOT_VOID_WRAP(...) {}
#define glXCopyContext_INDEX 2721
#define glXCopyContext_RETURN void
#define glXCopyContext_ARG_NAMES dpy, src, dst, mask
#define glXCopyContext_ARG_EXPAND Display * dpy, GLXContext src, GLXContext dst, unsigned long mask
#define glXCopyContext_PACKED PACKED_void_Display___GENPT___GLXContext_GLXContext_unsigned_long
#define glXCopyContext_FORMAT FORMAT_void_Display___GENPT___GLXContext_GLXContext_unsigned_long
#define glXCopyContext_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glXCopyContext_NOT_VOID_WRAP(...) {}
#define glXCopyImageSubDataNV_INDEX 2722
#define glXCopyImageSubDataNV_RETURN void
#define glXCopyImageSubDataNV_ARG_NAMES dpy, srcCtx, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstCtx, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth
#define glXCopyImageSubDataNV_ARG_EXPAND Display * dpy, GLXContext srcCtx, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLXContext dstCtx, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth
#define glXCopyImageSubDataNV_PACKED PACKED_void_Display___GENPT___GLXContext_GLuint_GLenum_GLint_GLint_GLint_GLint_GLXContext_GLuint_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei
#define glXCopyImageSubDataNV_FORMAT FORMAT_void_Display___GENPT___GLXContext_GLuint_GLenum_GLint_GLint_GLint_GLint_GLXContext_GLuint_GLenum_GLint_GLint_GLint_GLint_GLsizei_GLsizei_GLsizei
#define glXCopyImageSubDataNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glXCopyImageSubDataNV_NOT_VOID_WRAP(...) {}
#define glXCopySubBufferMESA_INDEX 2723
#define glXCopySubBufferMESA_RETURN void
#define glXCopySubBufferMESA_ARG_NAMES dpy, drawable, x, y, width, height
#define glXCopySubBufferMESA_ARG_EXPAND Display * dpy, GLXDrawable drawable, int x, int y, int width, int height
#define glXCopySubBufferMESA_PACKED PACKED_void_Display___GENPT___GLXDrawable_int_int_int_int
#define glXCopySubBufferMESA_FORMAT FORMAT_void_Display___GENPT___GLXDrawable_int_int_int_int
#define glXCopySubBufferMESA_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glXCopySubBufferMESA_NOT_VOID_WRAP(...) {}
#define glXCreateContext_INDEX 2724
#define glXCreateContext_RETURN GLXContext
#define glXCreateContext_ARG_NAMES dpy, vis, shareList, direct
#define glXCreateContext_ARG_EXPAND Display * dpy, XVisualInfo * vis, GLXContext shareList, Bool direct
#define glXCreateContext_PACKED PACKED_GLXContext_Display___GENPT___XVisualInfo___GENPT___GLXContext_Bool
#define glXCreateContext_FORMAT FORMAT_GLXContext_Display___GENPT___XVisualInfo___GENPT___GLXContext_Bool
#define glXCreateContext_VOID_ONLY_WRAP(...) {}
#define glXCreateContext_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXCreateContextAttribsARB_INDEX 2725
#define glXCreateContextAttribsARB_RETURN GLXContext
#define glXCreateContextAttribsARB_ARG_NAMES dpy, config, share_context, direct, attrib_list
#define glXCreateContextAttribsARB_ARG_EXPAND Display * dpy, GLXFBConfig config, GLXContext share_context, Bool direct, const int * attrib_list
#define glXCreateContextAttribsARB_PACKED PACKED_GLXContext_Display___GENPT___GLXFBConfig_GLXContext_Bool_const_int___GENPT__
#define glXCreateContextAttribsARB_FORMAT FORMAT_GLXContext_Display___GENPT___GLXFBConfig_GLXContext_Bool_const_int___GENPT__
#define glXCreateContextAttribsARB_VOID_ONLY_WRAP(...) {}
#define glXCreateContextAttribsARB_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXCreateContextWithConfigSGIX_INDEX 2726
#define glXCreateContextWithConfigSGIX_RETURN GLXContext
#define glXCreateContextWithConfigSGIX_ARG_NAMES dpy, config, render_type, share_list, direct
#define glXCreateContextWithConfigSGIX_ARG_EXPAND Display * dpy, GLXFBConfigSGIX config, int render_type, GLXContext share_list, Bool direct
#define glXCreateContextWithConfigSGIX_PACKED PACKED_GLXContext_Display___GENPT___GLXFBConfigSGIX_int_GLXContext_Bool
#define glXCreateContextWithConfigSGIX_FORMAT FORMAT_GLXContext_Display___GENPT___GLXFBConfigSGIX_int_GLXContext_Bool
#define glXCreateContextWithConfigSGIX_VOID_ONLY_WRAP(...) {}
#define glXCreateContextWithConfigSGIX_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXCreateGLXPbufferSGIX_INDEX 2727
#define glXCreateGLXPbufferSGIX_RETURN GLXPbufferSGIX
#define glXCreateGLXPbufferSGIX_ARG_NAMES dpy, config, width, height, attrib_list
#define glXCreateGLXPbufferSGIX_ARG_EXPAND Display * dpy, GLXFBConfigSGIX config, unsigned int width, unsigned int height, int * attrib_list
#define glXCreateGLXPbufferSGIX_PACKED PACKED_GLXPbufferSGIX_Display___GENPT___GLXFBConfigSGIX_unsigned_int_unsigned_int_int___GENPT__
#define glXCreateGLXPbufferSGIX_FORMAT FORMAT_GLXPbufferSGIX_Display___GENPT___GLXFBConfigSGIX_unsigned_int_unsigned_int_int___GENPT__
#define glXCreateGLXPbufferSGIX_VOID_ONLY_WRAP(...) {}
#define glXCreateGLXPbufferSGIX_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXCreateGLXPixmap_INDEX 2728
#define glXCreateGLXPixmap_RETURN GLXPixmap
#define glXCreateGLXPixmap_ARG_NAMES dpy, visual, pixmap
#define glXCreateGLXPixmap_ARG_EXPAND Display * dpy, XVisualInfo * visual, Pixmap pixmap
#define glXCreateGLXPixmap_PACKED PACKED_GLXPixmap_Display___GENPT___XVisualInfo___GENPT___Pixmap
#define glXCreateGLXPixmap_FORMAT FORMAT_GLXPixmap_Display___GENPT___XVisualInfo___GENPT___Pixmap
#define glXCreateGLXPixmap_VOID_ONLY_WRAP(...) {}
#define glXCreateGLXPixmap_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXCreateGLXPixmapMESA_INDEX 2729
#define glXCreateGLXPixmapMESA_RETURN GLXPixmap
#define glXCreateGLXPixmapMESA_ARG_NAMES dpy, visual, pixmap, cmap
#define glXCreateGLXPixmapMESA_ARG_EXPAND Display * dpy, XVisualInfo * visual, Pixmap pixmap, Colormap cmap
#define glXCreateGLXPixmapMESA_PACKED PACKED_GLXPixmap_Display___GENPT___XVisualInfo___GENPT___Pixmap_Colormap
#define glXCreateGLXPixmapMESA_FORMAT FORMAT_GLXPixmap_Display___GENPT___XVisualInfo___GENPT___Pixmap_Colormap
#define glXCreateGLXPixmapMESA_VOID_ONLY_WRAP(...) {}
#define glXCreateGLXPixmapMESA_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXCreateGLXPixmapWithConfigSGIX_INDEX 2730
#define glXCreateGLXPixmapWithConfigSGIX_RETURN GLXPixmap
#define glXCreateGLXPixmapWithConfigSGIX_ARG_NAMES dpy, config, pixmap
#define glXCreateGLXPixmapWithConfigSGIX_ARG_EXPAND Display * dpy, GLXFBConfigSGIX config, Pixmap pixmap
#define glXCreateGLXPixmapWithConfigSGIX_PACKED PACKED_GLXPixmap_Display___GENPT___GLXFBConfigSGIX_Pixmap
#define glXCreateGLXPixmapWithConfigSGIX_FORMAT FORMAT_GLXPixmap_Display___GENPT___GLXFBConfigSGIX_Pixmap
#define glXCreateGLXPixmapWithConfigSGIX_VOID_ONLY_WRAP(...) {}
#define glXCreateGLXPixmapWithConfigSGIX_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXCreateGLXVideoSourceSGIX_INDEX 2731
#define glXCreateGLXVideoSourceSGIX_RETURN GLXVideoSourceSGIX
#define glXCreateGLXVideoSourceSGIX_ARG_NAMES display, screen, server, path, nodeClass, drainNode
#define glXCreateGLXVideoSourceSGIX_ARG_EXPAND Display * display, int screen, VLServer server, VLPath path, int nodeClass, VLNode drainNode
#define glXCreateGLXVideoSourceSGIX_PACKED PACKED_GLXVideoSourceSGIX_Display___GENPT___int_VLServer_VLPath_int_VLNode
#define glXCreateGLXVideoSourceSGIX_FORMAT FORMAT_GLXVideoSourceSGIX_Display___GENPT___int_VLServer_VLPath_int_VLNode
#define glXCreateGLXVideoSourceSGIX_VOID_ONLY_WRAP(...) {}
#define glXCreateGLXVideoSourceSGIX_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXCreateNewContext_INDEX 2732
#define glXCreateNewContext_RETURN GLXContext
#define glXCreateNewContext_ARG_NAMES dpy, config, render_type, share_list, direct
#define glXCreateNewContext_ARG_EXPAND Display * dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct
#define glXCreateNewContext_PACKED PACKED_GLXContext_Display___GENPT___GLXFBConfig_int_GLXContext_Bool
#define glXCreateNewContext_FORMAT FORMAT_GLXContext_Display___GENPT___GLXFBConfig_int_GLXContext_Bool
#define glXCreateNewContext_VOID_ONLY_WRAP(...) {}
#define glXCreateNewContext_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXCreatePbuffer_INDEX 2733
#define glXCreatePbuffer_RETURN GLXPbuffer
#define glXCreatePbuffer_ARG_NAMES dpy, config, attrib_list
#define glXCreatePbuffer_ARG_EXPAND Display * dpy, GLXFBConfig config, const int * attrib_list
#define glXCreatePbuffer_PACKED PACKED_GLXPbuffer_Display___GENPT___GLXFBConfig_const_int___GENPT__
#define glXCreatePbuffer_FORMAT FORMAT_GLXPbuffer_Display___GENPT___GLXFBConfig_const_int___GENPT__
#define glXCreatePbuffer_VOID_ONLY_WRAP(...) {}
#define glXCreatePbuffer_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXCreatePixmap_INDEX 2734
#define glXCreatePixmap_RETURN GLXPixmap
#define glXCreatePixmap_ARG_NAMES dpy, config, pixmap, attrib_list
#define glXCreatePixmap_ARG_EXPAND Display * dpy, GLXFBConfig config, Pixmap pixmap, const int * attrib_list
#define glXCreatePixmap_PACKED PACKED_GLXPixmap_Display___GENPT___GLXFBConfig_Pixmap_const_int___GENPT__
#define glXCreatePixmap_FORMAT FORMAT_GLXPixmap_Display___GENPT___GLXFBConfig_Pixmap_const_int___GENPT__
#define glXCreatePixmap_VOID_ONLY_WRAP(...) {}
#define glXCreatePixmap_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXCreateWindow_INDEX 2735
#define glXCreateWindow_RETURN GLXWindow
#define glXCreateWindow_ARG_NAMES dpy, config, win, attrib_list
#define glXCreateWindow_ARG_EXPAND Display * dpy, GLXFBConfig config, Window win, const int * attrib_list
#define glXCreateWindow_PACKED PACKED_GLXWindow_Display___GENPT___GLXFBConfig_Window_const_int___GENPT__
#define glXCreateWindow_FORMAT FORMAT_GLXWindow_Display___GENPT___GLXFBConfig_Window_const_int___GENPT__
#define glXCreateWindow_VOID_ONLY_WRAP(...) {}
#define glXCreateWindow_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXCushionSGI_INDEX 2736
#define glXCushionSGI_RETURN void
#define glXCushionSGI_ARG_NAMES dpy, window, cushion
#define glXCushionSGI_ARG_EXPAND Display * dpy, Window window, float cushion
#define glXCushionSGI_PACKED PACKED_void_Display___GENPT___Window_float
#define glXCushionSGI_FORMAT FORMAT_void_Display___GENPT___Window_float
#define glXCushionSGI_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glXCushionSGI_NOT_VOID_WRAP(...) {}
#define glXDestroyContext_INDEX 2737
#define glXDestroyContext_RETURN void
#define glXDestroyContext_ARG_NAMES dpy, ctx
#define glXDestroyContext_ARG_EXPAND Display * dpy, GLXContext ctx
#define glXDestroyContext_PACKED PACKED_void_Display___GENPT___GLXContext
#define glXDestroyContext_FORMAT FORMAT_void_Display___GENPT___GLXContext
#define glXDestroyContext_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glXDestroyContext_NOT_VOID_WRAP(...) {}
#define glXDestroyGLXPbufferSGIX_INDEX 2738
#define glXDestroyGLXPbufferSGIX_RETURN void
#define glXDestroyGLXPbufferSGIX_ARG_NAMES dpy, pbuf
#define glXDestroyGLXPbufferSGIX_ARG_EXPAND Display * dpy, GLXPbufferSGIX pbuf
#define glXDestroyGLXPbufferSGIX_PACKED PACKED_void_Display___GENPT___GLXPbufferSGIX
#define glXDestroyGLXPbufferSGIX_FORMAT FORMAT_void_Display___GENPT___GLXPbufferSGIX
#define glXDestroyGLXPbufferSGIX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glXDestroyGLXPbufferSGIX_NOT_VOID_WRAP(...) {}
#define glXDestroyGLXPixmap_INDEX 2739
#define glXDestroyGLXPixmap_RETURN void
#define glXDestroyGLXPixmap_ARG_NAMES dpy, pixmap
#define glXDestroyGLXPixmap_ARG_EXPAND Display * dpy, GLXPixmap pixmap
#define glXDestroyGLXPixmap_PACKED PACKED_void_Display___GENPT___GLXPixmap
#define glXDestroyGLXPixmap_FORMAT FORMAT_void_Display___GENPT___GLXPixmap
#define glXDestroyGLXPixmap_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glXDestroyGLXPixmap_NOT_VOID_WRAP(...) {}
#define glXDestroyGLXVideoSourceSGIX_INDEX 2740
#define glXDestroyGLXVideoSourceSGIX_RETURN void
#define glXDestroyGLXVideoSourceSGIX_ARG_NAMES dpy, glxvideosource
#define glXDestroyGLXVideoSourceSGIX_ARG_EXPAND Display * dpy, GLXVideoSourceSGIX glxvideosource
#define glXDestroyGLXVideoSourceSGIX_PACKED PACKED_void_Display___GENPT___GLXVideoSourceSGIX
#define glXDestroyGLXVideoSourceSGIX_FORMAT FORMAT_void_Display___GENPT___GLXVideoSourceSGIX
#define glXDestroyGLXVideoSourceSGIX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glXDestroyGLXVideoSourceSGIX_NOT_VOID_WRAP(...) {}
#define glXDestroyHyperpipeConfigSGIX_INDEX 2741
#define glXDestroyHyperpipeConfigSGIX_RETURN int
#define glXDestroyHyperpipeConfigSGIX_ARG_NAMES dpy, hpId
#define glXDestroyHyperpipeConfigSGIX_ARG_EXPAND Display * dpy, int hpId
#define glXDestroyHyperpipeConfigSGIX_PACKED PACKED_int_Display___GENPT___int
#define glXDestroyHyperpipeConfigSGIX_FORMAT FORMAT_int_Display___GENPT___int
#define glXDestroyHyperpipeConfigSGIX_VOID_ONLY_WRAP(...) {}
#define glXDestroyHyperpipeConfigSGIX_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXDestroyPbuffer_INDEX 2742
#define glXDestroyPbuffer_RETURN void
#define glXDestroyPbuffer_ARG_NAMES dpy, pbuf
#define glXDestroyPbuffer_ARG_EXPAND Display * dpy, GLXPbuffer pbuf
#define glXDestroyPbuffer_PACKED PACKED_void_Display___GENPT___GLXPbuffer
#define glXDestroyPbuffer_FORMAT FORMAT_void_Display___GENPT___GLXPbuffer
#define glXDestroyPbuffer_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glXDestroyPbuffer_NOT_VOID_WRAP(...) {}
#define glXDestroyPixmap_INDEX 2743
#define glXDestroyPixmap_RETURN void
#define glXDestroyPixmap_ARG_NAMES dpy, pixmap
#define glXDestroyPixmap_ARG_EXPAND Display * dpy, GLXPixmap pixmap
#define glXDestroyPixmap_PACKED PACKED_void_Display___GENPT___GLXPixmap
#define glXDestroyPixmap_FORMAT FORMAT_void_Display___GENPT___GLXPixmap
#define glXDestroyPixmap_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glXDestroyPixmap_NOT_VOID_WRAP(...) {}
#define glXDestroyWindow_INDEX 2744
#define glXDestroyWindow_RETURN void
#define glXDestroyWindow_ARG_NAMES dpy, win
#define glXDestroyWindow_ARG_EXPAND Display * dpy, GLXWindow win
#define glXDestroyWindow_PACKED PACKED_void_Display___GENPT___GLXWindow
#define glXDestroyWindow_FORMAT FORMAT_void_Display___GENPT___GLXWindow
#define glXDestroyWindow_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glXDestroyWindow_NOT_VOID_WRAP(...) {}
#define glXEnumerateVideoCaptureDevicesNV_INDEX 2745
#define glXEnumerateVideoCaptureDevicesNV_RETURN GLXVideoCaptureDeviceNV *
#define glXEnumerateVideoCaptureDevicesNV_ARG_NAMES dpy, screen, nelements
#define glXEnumerateVideoCaptureDevicesNV_ARG_EXPAND Display * dpy, int screen, int * nelements
#define glXEnumerateVideoCaptureDevicesNV_PACKED PACKED_GLXVideoCaptureDeviceNV___GENPT___Display___GENPT___int_int___GENPT__
#define glXEnumerateVideoCaptureDevicesNV_FORMAT FORMAT_GLXVideoCaptureDeviceNV___GENPT___Display___GENPT___int_int___GENPT__
#define glXEnumerateVideoCaptureDevicesNV_VOID_ONLY_WRAP(...) {}
#define glXEnumerateVideoCaptureDevicesNV_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXEnumerateVideoDevicesNV_INDEX 2746
#define glXEnumerateVideoDevicesNV_RETURN unsigned int *
#define glXEnumerateVideoDevicesNV_ARG_NAMES dpy, screen, nelements
#define glXEnumerateVideoDevicesNV_ARG_EXPAND Display * dpy, int screen, int * nelements
#define glXEnumerateVideoDevicesNV_PACKED PACKED_unsigned_int___GENPT___Display___GENPT___int_int___GENPT__
#define glXEnumerateVideoDevicesNV_FORMAT FORMAT_unsigned_int___GENPT___Display___GENPT___int_int___GENPT__
#define glXEnumerateVideoDevicesNV_VOID_ONLY_WRAP(...) {}
#define glXEnumerateVideoDevicesNV_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXFreeContextEXT_INDEX 2747
#define glXFreeContextEXT_RETURN void
#define glXFreeContextEXT_ARG_NAMES dpy, context
#define glXFreeContextEXT_ARG_EXPAND Display * dpy, GLXContext context
#define glXFreeContextEXT_PACKED PACKED_void_Display___GENPT___GLXContext
#define glXFreeContextEXT_FORMAT FORMAT_void_Display___GENPT___GLXContext
#define glXFreeContextEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glXFreeContextEXT_NOT_VOID_WRAP(...) {}
#define glXGetAGPOffsetMESA_INDEX 2748
#define glXGetAGPOffsetMESA_RETURN unsigned int
#define glXGetAGPOffsetMESA_ARG_NAMES pointer
#define glXGetAGPOffsetMESA_ARG_EXPAND const void * pointer
#define glXGetAGPOffsetMESA_PACKED PACKED_unsigned_int_const_void___GENPT__
#define glXGetAGPOffsetMESA_FORMAT FORMAT_unsigned_int_const_void___GENPT__
#define glXGetAGPOffsetMESA_VOID_ONLY_WRAP(...) {}
#define glXGetAGPOffsetMESA_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXGetClientString_INDEX 2749
#define glXGetClientString_RETURN const char *
#define glXGetClientString_ARG_NAMES display, name
#define glXGetClientString_ARG_EXPAND Display * display, int name
#define glXGetClientString_PACKED PACKED_const_char___GENPT___Display___GENPT___int
#define glXGetClientString_FORMAT FORMAT_const_char___GENPT___Display___GENPT___int
#define glXGetClientString_VOID_ONLY_WRAP(...) {}
#define glXGetClientString_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXGetConfig_INDEX 2750
#define glXGetConfig_RETURN int
#define glXGetConfig_ARG_NAMES display, visual, attribute, value
#define glXGetConfig_ARG_EXPAND Display * display, XVisualInfo * visual, int attribute, int * value
#define glXGetConfig_PACKED PACKED_int_Display___GENPT___XVisualInfo___GENPT___int_int___GENPT__
#define glXGetConfig_FORMAT FORMAT_int_Display___GENPT___XVisualInfo___GENPT___int_int___GENPT__
#define glXGetConfig_VOID_ONLY_WRAP(...) {}
#define glXGetConfig_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXGetContextIDEXT_INDEX 2751
#define glXGetContextIDEXT_RETURN GLXContextID
#define glXGetContextIDEXT_ARG_NAMES context
#define glXGetContextIDEXT_ARG_EXPAND const GLXContext context
#define glXGetContextIDEXT_PACKED PACKED_GLXContextID_const_GLXContext
#define glXGetContextIDEXT_FORMAT FORMAT_GLXContextID_const_GLXContext
#define glXGetContextIDEXT_VOID_ONLY_WRAP(...) {}
#define glXGetContextIDEXT_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXGetCurrentContext_INDEX 2752
#define glXGetCurrentContext_RETURN GLXContext
#define glXGetCurrentContext_ARG_NAMES 
#define glXGetCurrentContext_ARG_EXPAND 
#define glXGetCurrentContext_PACKED PACKED_GLXContext
#define glXGetCurrentContext_FORMAT FORMAT_GLXContext
#define glXGetCurrentContext_VOID_ONLY_WRAP(...) {}
#define glXGetCurrentContext_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXGetCurrentDisplay_INDEX 2753
#define glXGetCurrentDisplay_RETURN Display *
#define glXGetCurrentDisplay_ARG_NAMES 
#define glXGetCurrentDisplay_ARG_EXPAND 
#define glXGetCurrentDisplay_PACKED PACKED_Display___GENPT__
#define glXGetCurrentDisplay_FORMAT FORMAT_Display___GENPT__
#define glXGetCurrentDisplay_VOID_ONLY_WRAP(...) {}
#define glXGetCurrentDisplay_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXGetCurrentDisplayEXT_INDEX 2754
#define glXGetCurrentDisplayEXT_RETURN Display *
#define glXGetCurrentDisplayEXT_ARG_NAMES 
#define glXGetCurrentDisplayEXT_ARG_EXPAND 
#define glXGetCurrentDisplayEXT_PACKED PACKED_Display___GENPT__
#define glXGetCurrentDisplayEXT_FORMAT FORMAT_Display___GENPT__
#define glXGetCurrentDisplayEXT_VOID_ONLY_WRAP(...) {}
#define glXGetCurrentDisplayEXT_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXGetCurrentDrawable_INDEX 2755
#define glXGetCurrentDrawable_RETURN GLXDrawable
#define glXGetCurrentDrawable_ARG_NAMES 
#define glXGetCurrentDrawable_ARG_EXPAND 
#define glXGetCurrentDrawable_PACKED PACKED_GLXDrawable
#define glXGetCurrentDrawable_FORMAT FORMAT_GLXDrawable
#define glXGetCurrentDrawable_VOID_ONLY_WRAP(...) {}
#define glXGetCurrentDrawable_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXGetCurrentReadDrawable_INDEX 2756
#define glXGetCurrentReadDrawable_RETURN GLXDrawable
#define glXGetCurrentReadDrawable_ARG_NAMES 
#define glXGetCurrentReadDrawable_ARG_EXPAND 
#define glXGetCurrentReadDrawable_PACKED PACKED_GLXDrawable
#define glXGetCurrentReadDrawable_FORMAT FORMAT_GLXDrawable
#define glXGetCurrentReadDrawable_VOID_ONLY_WRAP(...) {}
#define glXGetCurrentReadDrawable_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXGetCurrentReadDrawableSGI_INDEX 2757
#define glXGetCurrentReadDrawableSGI_RETURN GLXDrawable
#define glXGetCurrentReadDrawableSGI_ARG_NAMES 
#define glXGetCurrentReadDrawableSGI_ARG_EXPAND 
#define glXGetCurrentReadDrawableSGI_PACKED PACKED_GLXDrawable
#define glXGetCurrentReadDrawableSGI_FORMAT FORMAT_GLXDrawable
#define glXGetCurrentReadDrawableSGI_VOID_ONLY_WRAP(...) {}
#define glXGetCurrentReadDrawableSGI_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXGetDrawableAttributes_INDEX 2758
#define glXGetDrawableAttributes_RETURN void
#define glXGetDrawableAttributes_ARG_NAMES drawable
#define glXGetDrawableAttributes_ARG_EXPAND uint32_t drawable
#define glXGetDrawableAttributes_PACKED PACKED_void_uint32_t
#define glXGetDrawableAttributes_FORMAT FORMAT_void_uint32_t
#define glXGetDrawableAttributes_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glXGetDrawableAttributes_NOT_VOID_WRAP(...) {}
#define glXGetDrawableAttributesSGIX_INDEX 2759
#define glXGetDrawableAttributesSGIX_RETURN void
#define glXGetDrawableAttributesSGIX_ARG_NAMES drawable
#define glXGetDrawableAttributesSGIX_ARG_EXPAND uint32_t drawable
#define glXGetDrawableAttributesSGIX_PACKED PACKED_void_uint32_t
#define glXGetDrawableAttributesSGIX_FORMAT FORMAT_void_uint32_t
#define glXGetDrawableAttributesSGIX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glXGetDrawableAttributesSGIX_NOT_VOID_WRAP(...) {}
#define glXGetFBConfigAttrib_INDEX 2760
#define glXGetFBConfigAttrib_RETURN int
#define glXGetFBConfigAttrib_ARG_NAMES dpy, config, attribute, value
#define glXGetFBConfigAttrib_ARG_EXPAND Display * dpy, GLXFBConfig config, int attribute, int * value
#define glXGetFBConfigAttrib_PACKED PACKED_int_Display___GENPT___GLXFBConfig_int_int___GENPT__
#define glXGetFBConfigAttrib_FORMAT FORMAT_int_Display___GENPT___GLXFBConfig_int_int___GENPT__
#define glXGetFBConfigAttrib_VOID_ONLY_WRAP(...) {}
#define glXGetFBConfigAttrib_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXGetFBConfigAttribSGIX_INDEX 2761
#define glXGetFBConfigAttribSGIX_RETURN int
#define glXGetFBConfigAttribSGIX_ARG_NAMES dpy, config, attribute, value
#define glXGetFBConfigAttribSGIX_ARG_EXPAND Display * dpy, GLXFBConfigSGIX config, int attribute, int * value
#define glXGetFBConfigAttribSGIX_PACKED PACKED_int_Display___GENPT___GLXFBConfigSGIX_int_int___GENPT__
#define glXGetFBConfigAttribSGIX_FORMAT FORMAT_int_Display___GENPT___GLXFBConfigSGIX_int_int___GENPT__
#define glXGetFBConfigAttribSGIX_VOID_ONLY_WRAP(...) {}
#define glXGetFBConfigAttribSGIX_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXGetFBConfigFromVisualSGIX_INDEX 2762
#define glXGetFBConfigFromVisualSGIX_RETURN GLXFBConfigSGIX
#define glXGetFBConfigFromVisualSGIX_ARG_NAMES dpy, vis
#define glXGetFBConfigFromVisualSGIX_ARG_EXPAND Display * dpy, XVisualInfo * vis
#define glXGetFBConfigFromVisualSGIX_PACKED PACKED_GLXFBConfigSGIX_Display___GENPT___XVisualInfo___GENPT__
#define glXGetFBConfigFromVisualSGIX_FORMAT FORMAT_GLXFBConfigSGIX_Display___GENPT___XVisualInfo___GENPT__
#define glXGetFBConfigFromVisualSGIX_VOID_ONLY_WRAP(...) {}
#define glXGetFBConfigFromVisualSGIX_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXGetFBConfigs_INDEX 2763
#define glXGetFBConfigs_RETURN GLXFBConfig *
#define glXGetFBConfigs_ARG_NAMES dpy, screen, nelements
#define glXGetFBConfigs_ARG_EXPAND Display * dpy, int screen, int * nelements
#define glXGetFBConfigs_PACKED PACKED_GLXFBConfig___GENPT___Display___GENPT___int_int___GENPT__
#define glXGetFBConfigs_FORMAT FORMAT_GLXFBConfig___GENPT___Display___GENPT___int_int___GENPT__
#define glXGetFBConfigs_VOID_ONLY_WRAP(...) {}
#define glXGetFBConfigs_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXGetFBConfigsSGIX_INDEX 2764
#define glXGetFBConfigsSGIX_RETURN void
#define glXGetFBConfigsSGIX_ARG_NAMES 
#define glXGetFBConfigsSGIX_ARG_EXPAND 
#define glXGetFBConfigsSGIX_PACKED PACKED_void
#define glXGetFBConfigsSGIX_FORMAT FORMAT_void
#define glXGetFBConfigsSGIX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glXGetFBConfigsSGIX_NOT_VOID_WRAP(...) {}
#define glXGetMscRateOML_INDEX 2765
#define glXGetMscRateOML_RETURN Bool
#define glXGetMscRateOML_ARG_NAMES dpy, drawable, numerator, denominator
#define glXGetMscRateOML_ARG_EXPAND Display * dpy, GLXDrawable drawable, int32_t * numerator, int32_t * denominator
#define glXGetMscRateOML_PACKED PACKED_Bool_Display___GENPT___GLXDrawable_int32_t___GENPT___int32_t___GENPT__
#define glXGetMscRateOML_FORMAT FORMAT_Bool_Display___GENPT___GLXDrawable_int32_t___GENPT___int32_t___GENPT__
#define glXGetMscRateOML_VOID_ONLY_WRAP(...) {}
#define glXGetMscRateOML_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXGetProcAddress_INDEX 2766
#define glXGetProcAddress_RETURN __GLXextFuncPtr
#define glXGetProcAddress_ARG_NAMES procName
#define glXGetProcAddress_ARG_EXPAND const GLubyte * procName
#define glXGetProcAddress_PACKED PACKED___GLXextFuncPtr_const_GLubyte___GENPT__
#define glXGetProcAddress_FORMAT FORMAT___GLXextFuncPtr_const_GLubyte___GENPT__
#define glXGetProcAddress_VOID_ONLY_WRAP(...) {}
#define glXGetProcAddress_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXGetProcAddressARB_INDEX 2767
#define glXGetProcAddressARB_RETURN __GLXextFuncPtr
#define glXGetProcAddressARB_ARG_NAMES procName
#define glXGetProcAddressARB_ARG_EXPAND const GLubyte * procName
#define glXGetProcAddressARB_PACKED PACKED___GLXextFuncPtr_const_GLubyte___GENPT__
#define glXGetProcAddressARB_FORMAT FORMAT___GLXextFuncPtr_const_GLubyte___GENPT__
#define glXGetProcAddressARB_VOID_ONLY_WRAP(...) {}
#define glXGetProcAddressARB_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXGetSelectedEvent_INDEX 2768
#define glXGetSelectedEvent_RETURN void
#define glXGetSelectedEvent_ARG_NAMES dpy, draw, event_mask
#define glXGetSelectedEvent_ARG_EXPAND Display * dpy, GLXDrawable draw, unsigned long * event_mask
#define glXGetSelectedEvent_PACKED PACKED_void_Display___GENPT___GLXDrawable_unsigned_long___GENPT__
#define glXGetSelectedEvent_FORMAT FORMAT_void_Display___GENPT___GLXDrawable_unsigned_long___GENPT__
#define glXGetSelectedEvent_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glXGetSelectedEvent_NOT_VOID_WRAP(...) {}
#define glXGetSelectedEventSGIX_INDEX 2769
#define glXGetSelectedEventSGIX_RETURN void
#define glXGetSelectedEventSGIX_ARG_NAMES dpy, drawable, mask
#define glXGetSelectedEventSGIX_ARG_EXPAND Display * dpy, GLXDrawable drawable, unsigned long * mask
#define glXGetSelectedEventSGIX_PACKED PACKED_void_Display___GENPT___GLXDrawable_unsigned_long___GENPT__
#define glXGetSelectedEventSGIX_FORMAT FORMAT_void_Display___GENPT___GLXDrawable_unsigned_long___GENPT__
#define glXGetSelectedEventSGIX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glXGetSelectedEventSGIX_NOT_VOID_WRAP(...) {}
#define glXGetSyncValuesOML_INDEX 2770
#define glXGetSyncValuesOML_RETURN Bool
#define glXGetSyncValuesOML_ARG_NAMES dpy, drawable, ust, msc, sbc
#define glXGetSyncValuesOML_ARG_EXPAND Display * dpy, GLXDrawable drawable, int64_t * ust, int64_t * msc, int64_t * sbc
#define glXGetSyncValuesOML_PACKED PACKED_Bool_Display___GENPT___GLXDrawable_int64_t___GENPT___int64_t___GENPT___int64_t___GENPT__
#define glXGetSyncValuesOML_FORMAT FORMAT_Bool_Display___GENPT___GLXDrawable_int64_t___GENPT___int64_t___GENPT___int64_t___GENPT__
#define glXGetSyncValuesOML_VOID_ONLY_WRAP(...) {}
#define glXGetSyncValuesOML_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXGetTransparentIndexSUN_INDEX 2771
#define glXGetTransparentIndexSUN_RETURN Status
#define glXGetTransparentIndexSUN_ARG_NAMES dpy, overlay, underlay, pTransparentIndex
#define glXGetTransparentIndexSUN_ARG_EXPAND Display * dpy, Window overlay, Window underlay, long * pTransparentIndex
#define glXGetTransparentIndexSUN_PACKED PACKED_Status_Display___GENPT___Window_Window_long___GENPT__
#define glXGetTransparentIndexSUN_FORMAT FORMAT_Status_Display___GENPT___Window_Window_long___GENPT__
#define glXGetTransparentIndexSUN_VOID_ONLY_WRAP(...) {}
#define glXGetTransparentIndexSUN_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXGetVideoDeviceNV_INDEX 2772
#define glXGetVideoDeviceNV_RETURN int
#define glXGetVideoDeviceNV_ARG_NAMES dpy, screen, numVideoDevices, pVideoDevice
#define glXGetVideoDeviceNV_ARG_EXPAND Display * dpy, int screen, int numVideoDevices, GLXVideoDeviceNV * pVideoDevice
#define glXGetVideoDeviceNV_PACKED PACKED_int_Display___GENPT___int_int_GLXVideoDeviceNV___GENPT__
#define glXGetVideoDeviceNV_FORMAT FORMAT_int_Display___GENPT___int_int_GLXVideoDeviceNV___GENPT__
#define glXGetVideoDeviceNV_VOID_ONLY_WRAP(...) {}
#define glXGetVideoDeviceNV_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXGetVideoInfoNV_INDEX 2773
#define glXGetVideoInfoNV_RETURN int
#define glXGetVideoInfoNV_ARG_NAMES dpy, screen, VideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo
#define glXGetVideoInfoNV_ARG_EXPAND Display * dpy, int screen, GLXVideoDeviceNV VideoDevice, unsigned long * pulCounterOutputPbuffer, unsigned long * pulCounterOutputVideo
#define glXGetVideoInfoNV_PACKED PACKED_int_Display___GENPT___int_GLXVideoDeviceNV_unsigned_long___GENPT___unsigned_long___GENPT__
#define glXGetVideoInfoNV_FORMAT FORMAT_int_Display___GENPT___int_GLXVideoDeviceNV_unsigned_long___GENPT___unsigned_long___GENPT__
#define glXGetVideoInfoNV_VOID_ONLY_WRAP(...) {}
#define glXGetVideoInfoNV_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXGetVideoSyncSGI_INDEX 2774
#define glXGetVideoSyncSGI_RETURN int
#define glXGetVideoSyncSGI_ARG_NAMES count
#define glXGetVideoSyncSGI_ARG_EXPAND unsigned int * count
#define glXGetVideoSyncSGI_PACKED PACKED_int_unsigned_int___GENPT__
#define glXGetVideoSyncSGI_FORMAT FORMAT_int_unsigned_int___GENPT__
#define glXGetVideoSyncSGI_VOID_ONLY_WRAP(...) {}
#define glXGetVideoSyncSGI_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXGetVisualConfigs_INDEX 2775
#define glXGetVisualConfigs_RETURN void
#define glXGetVisualConfigs_ARG_NAMES 
#define glXGetVisualConfigs_ARG_EXPAND 
#define glXGetVisualConfigs_PACKED PACKED_void
#define glXGetVisualConfigs_FORMAT FORMAT_void
#define glXGetVisualConfigs_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glXGetVisualConfigs_NOT_VOID_WRAP(...) {}
#define glXGetVisualFromFBConfig_INDEX 2776
#define glXGetVisualFromFBConfig_RETURN XVisualInfo *
#define glXGetVisualFromFBConfig_ARG_NAMES dpy, config
#define glXGetVisualFromFBConfig_ARG_EXPAND Display * dpy, GLXFBConfig config
#define glXGetVisualFromFBConfig_PACKED PACKED_XVisualInfo___GENPT___Display___GENPT___GLXFBConfig
#define glXGetVisualFromFBConfig_FORMAT FORMAT_XVisualInfo___GENPT___Display___GENPT___GLXFBConfig
#define glXGetVisualFromFBConfig_VOID_ONLY_WRAP(...) {}
#define glXGetVisualFromFBConfig_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXGetVisualFromFBConfigSGIX_INDEX 2777
#define glXGetVisualFromFBConfigSGIX_RETURN XVisualInfo *
#define glXGetVisualFromFBConfigSGIX_ARG_NAMES dpy, config
#define glXGetVisualFromFBConfigSGIX_ARG_EXPAND Display * dpy, GLXFBConfigSGIX config
#define glXGetVisualFromFBConfigSGIX_PACKED PACKED_XVisualInfo___GENPT___Display___GENPT___GLXFBConfigSGIX
#define glXGetVisualFromFBConfigSGIX_FORMAT FORMAT_XVisualInfo___GENPT___Display___GENPT___GLXFBConfigSGIX
#define glXGetVisualFromFBConfigSGIX_VOID_ONLY_WRAP(...) {}
#define glXGetVisualFromFBConfigSGIX_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXHyperpipeAttribSGIX_INDEX 2778
#define glXHyperpipeAttribSGIX_RETURN int
#define glXHyperpipeAttribSGIX_ARG_NAMES dpy, timeSlice, attrib, size, attribList
#define glXHyperpipeAttribSGIX_ARG_EXPAND Display * dpy, int timeSlice, int attrib, int size, void * attribList
#define glXHyperpipeAttribSGIX_PACKED PACKED_int_Display___GENPT___int_int_int_void___GENPT__
#define glXHyperpipeAttribSGIX_FORMAT FORMAT_int_Display___GENPT___int_int_int_void___GENPT__
#define glXHyperpipeAttribSGIX_VOID_ONLY_WRAP(...) {}
#define glXHyperpipeAttribSGIX_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXHyperpipeConfigSGIX_INDEX 2779
#define glXHyperpipeConfigSGIX_RETURN int
#define glXHyperpipeConfigSGIX_ARG_NAMES dpy, networkId, npipes, cfg, hpId
#define glXHyperpipeConfigSGIX_ARG_EXPAND Display * dpy, int networkId, int npipes, GLXHyperpipeConfigSGIX * cfg, int * hpId
#define glXHyperpipeConfigSGIX_PACKED PACKED_int_Display___GENPT___int_int_GLXHyperpipeConfigSGIX___GENPT___int___GENPT__
#define glXHyperpipeConfigSGIX_FORMAT FORMAT_int_Display___GENPT___int_int_GLXHyperpipeConfigSGIX___GENPT___int___GENPT__
#define glXHyperpipeConfigSGIX_VOID_ONLY_WRAP(...) {}
#define glXHyperpipeConfigSGIX_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXImportContextEXT_INDEX 2780
#define glXImportContextEXT_RETURN GLXContext
#define glXImportContextEXT_ARG_NAMES dpy, contextID
#define glXImportContextEXT_ARG_EXPAND Display * dpy, GLXContextID contextID
#define glXImportContextEXT_PACKED PACKED_GLXContext_Display___GENPT___GLXContextID
#define glXImportContextEXT_FORMAT FORMAT_GLXContext_Display___GENPT___GLXContextID
#define glXImportContextEXT_VOID_ONLY_WRAP(...) {}
#define glXImportContextEXT_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXIsDirect_INDEX 2781
#define glXIsDirect_RETURN Bool
#define glXIsDirect_ARG_NAMES dpy, ctx
#define glXIsDirect_ARG_EXPAND Display * dpy, GLXContext ctx
#define glXIsDirect_PACKED PACKED_Bool_Display___GENPT___GLXContext
#define glXIsDirect_FORMAT FORMAT_Bool_Display___GENPT___GLXContext
#define glXIsDirect_VOID_ONLY_WRAP(...) {}
#define glXIsDirect_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXJoinSwapGroupNV_INDEX 2782
#define glXJoinSwapGroupNV_RETURN Bool
#define glXJoinSwapGroupNV_ARG_NAMES dpy, drawable, group
#define glXJoinSwapGroupNV_ARG_EXPAND Display * dpy, GLXDrawable drawable, GLuint group
#define glXJoinSwapGroupNV_PACKED PACKED_Bool_Display___GENPT___GLXDrawable_GLuint
#define glXJoinSwapGroupNV_FORMAT FORMAT_Bool_Display___GENPT___GLXDrawable_GLuint
#define glXJoinSwapGroupNV_VOID_ONLY_WRAP(...) {}
#define glXJoinSwapGroupNV_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXJoinSwapGroupSGIX_INDEX 2783
#define glXJoinSwapGroupSGIX_RETURN void
#define glXJoinSwapGroupSGIX_ARG_NAMES dpy, drawable, member
#define glXJoinSwapGroupSGIX_ARG_EXPAND Display * dpy, GLXDrawable drawable, GLXDrawable member
#define glXJoinSwapGroupSGIX_PACKED PACKED_void_Display___GENPT___GLXDrawable_GLXDrawable
#define glXJoinSwapGroupSGIX_FORMAT FORMAT_void_Display___GENPT___GLXDrawable_GLXDrawable
#define glXJoinSwapGroupSGIX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glXJoinSwapGroupSGIX_NOT_VOID_WRAP(...) {}
#define glXLockVideoCaptureDeviceNV_INDEX 2784
#define glXLockVideoCaptureDeviceNV_RETURN void
#define glXLockVideoCaptureDeviceNV_ARG_NAMES dpy, device
#define glXLockVideoCaptureDeviceNV_ARG_EXPAND Display * dpy, GLXVideoCaptureDeviceNV device
#define glXLockVideoCaptureDeviceNV_PACKED PACKED_void_Display___GENPT___GLXVideoCaptureDeviceNV
#define glXLockVideoCaptureDeviceNV_FORMAT FORMAT_void_Display___GENPT___GLXVideoCaptureDeviceNV
#define glXLockVideoCaptureDeviceNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glXLockVideoCaptureDeviceNV_NOT_VOID_WRAP(...) {}
#define glXMakeContextCurrent_INDEX 2785
#define glXMakeContextCurrent_RETURN Bool
#define glXMakeContextCurrent_ARG_NAMES dpy, draw, read, ctx
#define glXMakeContextCurrent_ARG_EXPAND Display * dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx
#define glXMakeContextCurrent_PACKED PACKED_Bool_Display___GENPT___GLXDrawable_GLXDrawable_GLXContext
#define glXMakeContextCurrent_FORMAT FORMAT_Bool_Display___GENPT___GLXDrawable_GLXDrawable_GLXContext
#define glXMakeContextCurrent_VOID_ONLY_WRAP(...) {}
#define glXMakeContextCurrent_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXMakeCurrent_INDEX 2786
#define glXMakeCurrent_RETURN Bool
#define glXMakeCurrent_ARG_NAMES dpy, drawable, ctx
#define glXMakeCurrent_ARG_EXPAND Display * dpy, GLXDrawable drawable, GLXContext ctx
#define glXMakeCurrent_PACKED PACKED_Bool_Display___GENPT___GLXDrawable_GLXContext
#define glXMakeCurrent_FORMAT FORMAT_Bool_Display___GENPT___GLXDrawable_GLXContext
#define glXMakeCurrent_VOID_ONLY_WRAP(...) {}
#define glXMakeCurrent_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXMakeCurrentReadSGI_INDEX 2787
#define glXMakeCurrentReadSGI_RETURN Bool
#define glXMakeCurrentReadSGI_ARG_NAMES dpy, draw, read, ctx
#define glXMakeCurrentReadSGI_ARG_EXPAND Display * dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx
#define glXMakeCurrentReadSGI_PACKED PACKED_Bool_Display___GENPT___GLXDrawable_GLXDrawable_GLXContext
#define glXMakeCurrentReadSGI_FORMAT FORMAT_Bool_Display___GENPT___GLXDrawable_GLXDrawable_GLXContext
#define glXMakeCurrentReadSGI_VOID_ONLY_WRAP(...) {}
#define glXMakeCurrentReadSGI_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXQueryChannelDeltasSGIX_INDEX 2788
#define glXQueryChannelDeltasSGIX_RETURN int
#define glXQueryChannelDeltasSGIX_ARG_NAMES display, screen, channel, x, y, w, h
#define glXQueryChannelDeltasSGIX_ARG_EXPAND Display * display, int screen, int channel, int * x, int * y, int * w, int * h
#define glXQueryChannelDeltasSGIX_PACKED PACKED_int_Display___GENPT___int_int_int___GENPT___int___GENPT___int___GENPT___int___GENPT__
#define glXQueryChannelDeltasSGIX_FORMAT FORMAT_int_Display___GENPT___int_int_int___GENPT___int___GENPT___int___GENPT___int___GENPT__
#define glXQueryChannelDeltasSGIX_VOID_ONLY_WRAP(...) {}
#define glXQueryChannelDeltasSGIX_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXQueryChannelRectSGIX_INDEX 2789
#define glXQueryChannelRectSGIX_RETURN int
#define glXQueryChannelRectSGIX_ARG_NAMES display, screen, channel, dx, dy, dw, dh
#define glXQueryChannelRectSGIX_ARG_EXPAND Display * display, int screen, int channel, int * dx, int * dy, int * dw, int * dh
#define glXQueryChannelRectSGIX_PACKED PACKED_int_Display___GENPT___int_int_int___GENPT___int___GENPT___int___GENPT___int___GENPT__
#define glXQueryChannelRectSGIX_FORMAT FORMAT_int_Display___GENPT___int_int_int___GENPT___int___GENPT___int___GENPT___int___GENPT__
#define glXQueryChannelRectSGIX_VOID_ONLY_WRAP(...) {}
#define glXQueryChannelRectSGIX_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXQueryContext_INDEX 2790
#define glXQueryContext_RETURN int
#define glXQueryContext_ARG_NAMES dpy, ctx, attribute, value
#define glXQueryContext_ARG_EXPAND Display * dpy, GLXContext ctx, int attribute, int * value
#define glXQueryContext_PACKED PACKED_int_Display___GENPT___GLXContext_int_int___GENPT__
#define glXQueryContext_FORMAT FORMAT_int_Display___GENPT___GLXContext_int_int___GENPT__
#define glXQueryContext_VOID_ONLY_WRAP(...) {}
#define glXQueryContext_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXQueryContextInfoEXT_INDEX 2791
#define glXQueryContextInfoEXT_RETURN int
#define glXQueryContextInfoEXT_ARG_NAMES dpy, context, attribute, value
#define glXQueryContextInfoEXT_ARG_EXPAND Display * dpy, GLXContext context, int attribute, int * value
#define glXQueryContextInfoEXT_PACKED PACKED_int_Display___GENPT___GLXContext_int_int___GENPT__
#define glXQueryContextInfoEXT_FORMAT FORMAT_int_Display___GENPT___GLXContext_int_int___GENPT__
#define glXQueryContextInfoEXT_VOID_ONLY_WRAP(...) {}
#define glXQueryContextInfoEXT_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXQueryDrawable_INDEX 2792
#define glXQueryDrawable_RETURN void
#define glXQueryDrawable_ARG_NAMES dpy, draw, attribute, value
#define glXQueryDrawable_ARG_EXPAND Display * dpy, GLXDrawable draw, int attribute, unsigned int * value
#define glXQueryDrawable_PACKED PACKED_void_Display___GENPT___GLXDrawable_int_unsigned_int___GENPT__
#define glXQueryDrawable_FORMAT FORMAT_void_Display___GENPT___GLXDrawable_int_unsigned_int___GENPT__
#define glXQueryDrawable_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glXQueryDrawable_NOT_VOID_WRAP(...) {}
#define glXQueryExtension_INDEX 2793
#define glXQueryExtension_RETURN Bool
#define glXQueryExtension_ARG_NAMES display, errorBase, eventBase
#define glXQueryExtension_ARG_EXPAND Display * display, int * errorBase, int * eventBase
#define glXQueryExtension_PACKED PACKED_Bool_Display___GENPT___int___GENPT___int___GENPT__
#define glXQueryExtension_FORMAT FORMAT_Bool_Display___GENPT___int___GENPT___int___GENPT__
#define glXQueryExtension_VOID_ONLY_WRAP(...) {}
#define glXQueryExtension_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXQueryExtensionsString_INDEX 2794
#define glXQueryExtensionsString_RETURN const char *
#define glXQueryExtensionsString_ARG_NAMES dpy, screen
#define glXQueryExtensionsString_ARG_EXPAND Display * dpy, int screen
#define glXQueryExtensionsString_PACKED PACKED_const_char___GENPT___Display___GENPT___int
#define glXQueryExtensionsString_FORMAT FORMAT_const_char___GENPT___Display___GENPT___int
#define glXQueryExtensionsString_VOID_ONLY_WRAP(...) {}
#define glXQueryExtensionsString_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXQueryFrameCountNV_INDEX 2795
#define glXQueryFrameCountNV_RETURN Bool
#define glXQueryFrameCountNV_ARG_NAMES dpy, screen, count
#define glXQueryFrameCountNV_ARG_EXPAND Display * dpy, int screen, GLuint * count
#define glXQueryFrameCountNV_PACKED PACKED_Bool_Display___GENPT___int_GLuint___GENPT__
#define glXQueryFrameCountNV_FORMAT FORMAT_Bool_Display___GENPT___int_GLuint___GENPT__
#define glXQueryFrameCountNV_VOID_ONLY_WRAP(...) {}
#define glXQueryFrameCountNV_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXQueryGLXPbufferSGIX_INDEX 2796
#define glXQueryGLXPbufferSGIX_RETURN int
#define glXQueryGLXPbufferSGIX_ARG_NAMES dpy, pbuf, attribute, value
#define glXQueryGLXPbufferSGIX_ARG_EXPAND Display * dpy, GLXPbufferSGIX pbuf, int attribute, unsigned int * value
#define glXQueryGLXPbufferSGIX_PACKED PACKED_int_Display___GENPT___GLXPbufferSGIX_int_unsigned_int___GENPT__
#define glXQueryGLXPbufferSGIX_FORMAT FORMAT_int_Display___GENPT___GLXPbufferSGIX_int_unsigned_int___GENPT__
#define glXQueryGLXPbufferSGIX_VOID_ONLY_WRAP(...) {}
#define glXQueryGLXPbufferSGIX_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXQueryHyperpipeAttribSGIX_INDEX 2797
#define glXQueryHyperpipeAttribSGIX_RETURN int
#define glXQueryHyperpipeAttribSGIX_ARG_NAMES dpy, timeSlice, attrib, size, returnAttribList
#define glXQueryHyperpipeAttribSGIX_ARG_EXPAND Display * dpy, int timeSlice, int attrib, int size, void * returnAttribList
#define glXQueryHyperpipeAttribSGIX_PACKED PACKED_int_Display___GENPT___int_int_int_void___GENPT__
#define glXQueryHyperpipeAttribSGIX_FORMAT FORMAT_int_Display___GENPT___int_int_int_void___GENPT__
#define glXQueryHyperpipeAttribSGIX_VOID_ONLY_WRAP(...) {}
#define glXQueryHyperpipeAttribSGIX_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXQueryHyperpipeBestAttribSGIX_INDEX 2798
#define glXQueryHyperpipeBestAttribSGIX_RETURN int
#define glXQueryHyperpipeBestAttribSGIX_ARG_NAMES dpy, timeSlice, attrib, size, attribList, returnAttribList
#define glXQueryHyperpipeBestAttribSGIX_ARG_EXPAND Display * dpy, int timeSlice, int attrib, int size, void * attribList, void * returnAttribList
#define glXQueryHyperpipeBestAttribSGIX_PACKED PACKED_int_Display___GENPT___int_int_int_void___GENPT___void___GENPT__
#define glXQueryHyperpipeBestAttribSGIX_FORMAT FORMAT_int_Display___GENPT___int_int_int_void___GENPT___void___GENPT__
#define glXQueryHyperpipeBestAttribSGIX_VOID_ONLY_WRAP(...) {}
#define glXQueryHyperpipeBestAttribSGIX_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXQueryHyperpipeConfigSGIX_INDEX 2799
#define glXQueryHyperpipeConfigSGIX_RETURN GLXHyperpipeConfigSGIX *
#define glXQueryHyperpipeConfigSGIX_ARG_NAMES dpy, hpId, npipes
#define glXQueryHyperpipeConfigSGIX_ARG_EXPAND Display * dpy, int hpId, int * npipes
#define glXQueryHyperpipeConfigSGIX_PACKED PACKED_GLXHyperpipeConfigSGIX___GENPT___Display___GENPT___int_int___GENPT__
#define glXQueryHyperpipeConfigSGIX_FORMAT FORMAT_GLXHyperpipeConfigSGIX___GENPT___Display___GENPT___int_int___GENPT__
#define glXQueryHyperpipeConfigSGIX_VOID_ONLY_WRAP(...) {}
#define glXQueryHyperpipeConfigSGIX_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXQueryHyperpipeNetworkSGIX_INDEX 2800
#define glXQueryHyperpipeNetworkSGIX_RETURN GLXHyperpipeNetworkSGIX *
#define glXQueryHyperpipeNetworkSGIX_ARG_NAMES dpy, npipes
#define glXQueryHyperpipeNetworkSGIX_ARG_EXPAND Display * dpy, int * npipes
#define glXQueryHyperpipeNetworkSGIX_PACKED PACKED_GLXHyperpipeNetworkSGIX___GENPT___Display___GENPT___int___GENPT__
#define glXQueryHyperpipeNetworkSGIX_FORMAT FORMAT_GLXHyperpipeNetworkSGIX___GENPT___Display___GENPT___int___GENPT__
#define glXQueryHyperpipeNetworkSGIX_VOID_ONLY_WRAP(...) {}
#define glXQueryHyperpipeNetworkSGIX_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXQueryMaxSwapBarriersSGIX_INDEX 2801
#define glXQueryMaxSwapBarriersSGIX_RETURN Bool
#define glXQueryMaxSwapBarriersSGIX_ARG_NAMES dpy, screen, max
#define glXQueryMaxSwapBarriersSGIX_ARG_EXPAND Display * dpy, int screen, int * max
#define glXQueryMaxSwapBarriersSGIX_PACKED PACKED_Bool_Display___GENPT___int_int___GENPT__
#define glXQueryMaxSwapBarriersSGIX_FORMAT FORMAT_Bool_Display___GENPT___int_int___GENPT__
#define glXQueryMaxSwapBarriersSGIX_VOID_ONLY_WRAP(...) {}
#define glXQueryMaxSwapBarriersSGIX_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXQueryMaxSwapGroupsNV_INDEX 2802
#define glXQueryMaxSwapGroupsNV_RETURN Bool
#define glXQueryMaxSwapGroupsNV_ARG_NAMES dpy, screen, maxGroups, maxBarriers
#define glXQueryMaxSwapGroupsNV_ARG_EXPAND Display * dpy, int screen, GLuint * maxGroups, GLuint * maxBarriers
#define glXQueryMaxSwapGroupsNV_PACKED PACKED_Bool_Display___GENPT___int_GLuint___GENPT___GLuint___GENPT__
#define glXQueryMaxSwapGroupsNV_FORMAT FORMAT_Bool_Display___GENPT___int_GLuint___GENPT___GLuint___GENPT__
#define glXQueryMaxSwapGroupsNV_VOID_ONLY_WRAP(...) {}
#define glXQueryMaxSwapGroupsNV_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXQueryServerString_INDEX 2803
#define glXQueryServerString_RETURN const char *
#define glXQueryServerString_ARG_NAMES dpy, screen, name
#define glXQueryServerString_ARG_EXPAND Display * dpy, int screen, int name
#define glXQueryServerString_PACKED PACKED_const_char___GENPT___Display___GENPT___int_int
#define glXQueryServerString_FORMAT FORMAT_const_char___GENPT___Display___GENPT___int_int
#define glXQueryServerString_VOID_ONLY_WRAP(...) {}
#define glXQueryServerString_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXQuerySwapGroupNV_INDEX 2804
#define glXQuerySwapGroupNV_RETURN Bool
#define glXQuerySwapGroupNV_ARG_NAMES dpy, drawable, group, barrier
#define glXQuerySwapGroupNV_ARG_EXPAND Display * dpy, GLXDrawable drawable, GLuint * group, GLuint * barrier
#define glXQuerySwapGroupNV_PACKED PACKED_Bool_Display___GENPT___GLXDrawable_GLuint___GENPT___GLuint___GENPT__
#define glXQuerySwapGroupNV_FORMAT FORMAT_Bool_Display___GENPT___GLXDrawable_GLuint___GENPT___GLuint___GENPT__
#define glXQuerySwapGroupNV_VOID_ONLY_WRAP(...) {}
#define glXQuerySwapGroupNV_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXQueryVersion_INDEX 2805
#define glXQueryVersion_RETURN Bool
#define glXQueryVersion_ARG_NAMES dpy, maj, min
#define glXQueryVersion_ARG_EXPAND Display * dpy, int * maj, int * min
#define glXQueryVersion_PACKED PACKED_Bool_Display___GENPT___int___GENPT___int___GENPT__
#define glXQueryVersion_FORMAT FORMAT_Bool_Display___GENPT___int___GENPT___int___GENPT__
#define glXQueryVersion_VOID_ONLY_WRAP(...) {}
#define glXQueryVersion_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXQueryVideoCaptureDeviceNV_INDEX 2806
#define glXQueryVideoCaptureDeviceNV_RETURN int
#define glXQueryVideoCaptureDeviceNV_ARG_NAMES dpy, device, attribute, value
#define glXQueryVideoCaptureDeviceNV_ARG_EXPAND Display * dpy, GLXVideoCaptureDeviceNV device, int attribute, int * value
#define glXQueryVideoCaptureDeviceNV_PACKED PACKED_int_Display___GENPT___GLXVideoCaptureDeviceNV_int_int___GENPT__
#define glXQueryVideoCaptureDeviceNV_FORMAT FORMAT_int_Display___GENPT___GLXVideoCaptureDeviceNV_int_int___GENPT__
#define glXQueryVideoCaptureDeviceNV_VOID_ONLY_WRAP(...) {}
#define glXQueryVideoCaptureDeviceNV_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXReleaseBuffersMESA_INDEX 2807
#define glXReleaseBuffersMESA_RETURN Bool
#define glXReleaseBuffersMESA_ARG_NAMES dpy, drawable
#define glXReleaseBuffersMESA_ARG_EXPAND Display * dpy, GLXDrawable drawable
#define glXReleaseBuffersMESA_PACKED PACKED_Bool_Display___GENPT___GLXDrawable
#define glXReleaseBuffersMESA_FORMAT FORMAT_Bool_Display___GENPT___GLXDrawable
#define glXReleaseBuffersMESA_VOID_ONLY_WRAP(...) {}
#define glXReleaseBuffersMESA_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXReleaseTexImageEXT_INDEX 2808
#define glXReleaseTexImageEXT_RETURN void
#define glXReleaseTexImageEXT_ARG_NAMES dpy, drawable, buffer
#define glXReleaseTexImageEXT_ARG_EXPAND Display * dpy, GLXDrawable drawable, int buffer
#define glXReleaseTexImageEXT_PACKED PACKED_void_Display___GENPT___GLXDrawable_int
#define glXReleaseTexImageEXT_FORMAT FORMAT_void_Display___GENPT___GLXDrawable_int
#define glXReleaseTexImageEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glXReleaseTexImageEXT_NOT_VOID_WRAP(...) {}
#define glXReleaseVideoCaptureDeviceNV_INDEX 2809
#define glXReleaseVideoCaptureDeviceNV_RETURN void
#define glXReleaseVideoCaptureDeviceNV_ARG_NAMES dpy, device
#define glXReleaseVideoCaptureDeviceNV_ARG_EXPAND Display * dpy, GLXVideoCaptureDeviceNV device
#define glXReleaseVideoCaptureDeviceNV_PACKED PACKED_void_Display___GENPT___GLXVideoCaptureDeviceNV
#define glXReleaseVideoCaptureDeviceNV_FORMAT FORMAT_void_Display___GENPT___GLXVideoCaptureDeviceNV
#define glXReleaseVideoCaptureDeviceNV_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glXReleaseVideoCaptureDeviceNV_NOT_VOID_WRAP(...) {}
#define glXReleaseVideoDeviceNV_INDEX 2810
#define glXReleaseVideoDeviceNV_RETURN int
#define glXReleaseVideoDeviceNV_ARG_NAMES dpy, screen, VideoDevice
#define glXReleaseVideoDeviceNV_ARG_EXPAND Display * dpy, int screen, GLXVideoDeviceNV VideoDevice
#define glXReleaseVideoDeviceNV_PACKED PACKED_int_Display___GENPT___int_GLXVideoDeviceNV
#define glXReleaseVideoDeviceNV_FORMAT FORMAT_int_Display___GENPT___int_GLXVideoDeviceNV
#define glXReleaseVideoDeviceNV_VOID_ONLY_WRAP(...) {}
#define glXReleaseVideoDeviceNV_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXReleaseVideoImageNV_INDEX 2811
#define glXReleaseVideoImageNV_RETURN int
#define glXReleaseVideoImageNV_ARG_NAMES dpy, pbuf
#define glXReleaseVideoImageNV_ARG_EXPAND Display * dpy, GLXPbuffer pbuf
#define glXReleaseVideoImageNV_PACKED PACKED_int_Display___GENPT___GLXPbuffer
#define glXReleaseVideoImageNV_FORMAT FORMAT_int_Display___GENPT___GLXPbuffer
#define glXReleaseVideoImageNV_VOID_ONLY_WRAP(...) {}
#define glXReleaseVideoImageNV_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXRender_INDEX 2812
#define glXRender_RETURN void
#define glXRender_ARG_NAMES 
#define glXRender_ARG_EXPAND 
#define glXRender_PACKED PACKED_void
#define glXRender_FORMAT FORMAT_void
#define glXRender_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glXRender_NOT_VOID_WRAP(...) {}
#define glXRenderLarge_INDEX 2813
#define glXRenderLarge_RETURN void
#define glXRenderLarge_ARG_NAMES 
#define glXRenderLarge_ARG_EXPAND 
#define glXRenderLarge_PACKED PACKED_void
#define glXRenderLarge_FORMAT FORMAT_void
#define glXRenderLarge_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glXRenderLarge_NOT_VOID_WRAP(...) {}
#define glXResetFrameCountNV_INDEX 2814
#define glXResetFrameCountNV_RETURN Bool
#define glXResetFrameCountNV_ARG_NAMES dpy, screen
#define glXResetFrameCountNV_ARG_EXPAND Display * dpy, int screen
#define glXResetFrameCountNV_PACKED PACKED_Bool_Display___GENPT___int
#define glXResetFrameCountNV_FORMAT FORMAT_Bool_Display___GENPT___int
#define glXResetFrameCountNV_VOID_ONLY_WRAP(...) {}
#define glXResetFrameCountNV_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXSelectEvent_INDEX 2815
#define glXSelectEvent_RETURN void
#define glXSelectEvent_ARG_NAMES dpy, draw, event_mask
#define glXSelectEvent_ARG_EXPAND Display * dpy, GLXDrawable draw, unsigned long event_mask
#define glXSelectEvent_PACKED PACKED_void_Display___GENPT___GLXDrawable_unsigned_long
#define glXSelectEvent_FORMAT FORMAT_void_Display___GENPT___GLXDrawable_unsigned_long
#define glXSelectEvent_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glXSelectEvent_NOT_VOID_WRAP(...) {}
#define glXSelectEventSGIX_INDEX 2816
#define glXSelectEventSGIX_RETURN void
#define glXSelectEventSGIX_ARG_NAMES dpy, drawable, mask
#define glXSelectEventSGIX_ARG_EXPAND Display * dpy, GLXDrawable drawable, unsigned long mask
#define glXSelectEventSGIX_PACKED PACKED_void_Display___GENPT___GLXDrawable_unsigned_long
#define glXSelectEventSGIX_FORMAT FORMAT_void_Display___GENPT___GLXDrawable_unsigned_long
#define glXSelectEventSGIX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glXSelectEventSGIX_NOT_VOID_WRAP(...) {}
#define glXSendPbufferToVideoNV_INDEX 2817
#define glXSendPbufferToVideoNV_RETURN int
#define glXSendPbufferToVideoNV_ARG_NAMES dpy, pbuf, iBufferType, pulCounterPbuffer, bBlock
#define glXSendPbufferToVideoNV_ARG_EXPAND Display * dpy, GLXPbuffer pbuf, int iBufferType, unsigned long * pulCounterPbuffer, GLboolean bBlock
#define glXSendPbufferToVideoNV_PACKED PACKED_int_Display___GENPT___GLXPbuffer_int_unsigned_long___GENPT___GLboolean
#define glXSendPbufferToVideoNV_FORMAT FORMAT_int_Display___GENPT___GLXPbuffer_int_unsigned_long___GENPT___GLboolean
#define glXSendPbufferToVideoNV_VOID_ONLY_WRAP(...) {}
#define glXSendPbufferToVideoNV_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXSet3DfxModeMESA_INDEX 2818
#define glXSet3DfxModeMESA_RETURN Bool
#define glXSet3DfxModeMESA_ARG_NAMES mode
#define glXSet3DfxModeMESA_ARG_EXPAND int mode
#define glXSet3DfxModeMESA_PACKED PACKED_Bool_int
#define glXSet3DfxModeMESA_FORMAT FORMAT_Bool_int
#define glXSet3DfxModeMESA_VOID_ONLY_WRAP(...) {}
#define glXSet3DfxModeMESA_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXSwapBuffers_INDEX 2819
#define glXSwapBuffers_RETURN void
#define glXSwapBuffers_ARG_NAMES dpy, drawable
#define glXSwapBuffers_ARG_EXPAND Display * dpy, GLXDrawable drawable
#define glXSwapBuffers_PACKED PACKED_void_Display___GENPT___GLXDrawable
#define glXSwapBuffers_FORMAT FORMAT_void_Display___GENPT___GLXDrawable
#define glXSwapBuffers_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glXSwapBuffers_NOT_VOID_WRAP(...) {}
#define glXSwapBuffersMscOML_INDEX 2820
#define glXSwapBuffersMscOML_RETURN int64_t
#define glXSwapBuffersMscOML_ARG_NAMES dpy, drawable, target_msc, divisor, remainder
#define glXSwapBuffersMscOML_ARG_EXPAND Display * dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder
#define glXSwapBuffersMscOML_PACKED PACKED_int64_t_Display___GENPT___GLXDrawable_int64_t_int64_t_int64_t
#define glXSwapBuffersMscOML_FORMAT FORMAT_int64_t_Display___GENPT___GLXDrawable_int64_t_int64_t_int64_t
#define glXSwapBuffersMscOML_VOID_ONLY_WRAP(...) {}
#define glXSwapBuffersMscOML_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXSwapIntervalEXT_INDEX 2821
#define glXSwapIntervalEXT_RETURN void
#define glXSwapIntervalEXT_ARG_NAMES dpy, drawable, interval
#define glXSwapIntervalEXT_ARG_EXPAND Display * dpy, GLXDrawable drawable, int interval
#define glXSwapIntervalEXT_PACKED PACKED_void_Display___GENPT___GLXDrawable_int
#define glXSwapIntervalEXT_FORMAT FORMAT_void_Display___GENPT___GLXDrawable_int
#define glXSwapIntervalEXT_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glXSwapIntervalEXT_NOT_VOID_WRAP(...) {}
#define glXSwapIntervalMESA_INDEX 2822
#define glXSwapIntervalMESA_RETURN int
#define glXSwapIntervalMESA_ARG_NAMES interval
#define glXSwapIntervalMESA_ARG_EXPAND unsigned int interval
#define glXSwapIntervalMESA_PACKED PACKED_int_unsigned_int
#define glXSwapIntervalMESA_FORMAT FORMAT_int_unsigned_int
#define glXSwapIntervalMESA_VOID_ONLY_WRAP(...) {}
#define glXSwapIntervalMESA_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXSwapIntervalSGI_INDEX 2823
#define glXSwapIntervalSGI_RETURN int
#define glXSwapIntervalSGI_ARG_NAMES interval
#define glXSwapIntervalSGI_ARG_EXPAND int interval
#define glXSwapIntervalSGI_PACKED PACKED_int_int
#define glXSwapIntervalSGI_FORMAT FORMAT_int_int
#define glXSwapIntervalSGI_VOID_ONLY_WRAP(...) {}
#define glXSwapIntervalSGI_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXUseXFont_INDEX 2824
#define glXUseXFont_RETURN void
#define glXUseXFont_ARG_NAMES font, first, count, listBase
#define glXUseXFont_ARG_EXPAND Font font, int first, int count, int listBase
#define glXUseXFont_PACKED PACKED_void_Font_int_int_int
#define glXUseXFont_FORMAT FORMAT_void_Font_int_int_int
#define glXUseXFont_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glXUseXFont_NOT_VOID_WRAP(...) {}
#define glXVendorPrivate_INDEX 2825
#define glXVendorPrivate_RETURN void
#define glXVendorPrivate_ARG_NAMES 
#define glXVendorPrivate_ARG_EXPAND 
#define glXVendorPrivate_PACKED PACKED_void
#define glXVendorPrivate_FORMAT FORMAT_void
#define glXVendorPrivate_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glXVendorPrivate_NOT_VOID_WRAP(...) {}
#define glXVendorPrivateWithReply_INDEX 2826
#define glXVendorPrivateWithReply_RETURN void
#define glXVendorPrivateWithReply_ARG_NAMES 
#define glXVendorPrivateWithReply_ARG_EXPAND 
#define glXVendorPrivateWithReply_PACKED PACKED_void
#define glXVendorPrivateWithReply_FORMAT FORMAT_void
#define glXVendorPrivateWithReply_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glXVendorPrivateWithReply_NOT_VOID_WRAP(...) {}
#define glXWaitForMscOML_INDEX 2827
#define glXWaitForMscOML_RETURN Bool
#define glXWaitForMscOML_ARG_NAMES dpy, drawable, target_msc, divisor, remainder, ust, msc, sbc
#define glXWaitForMscOML_ARG_EXPAND Display * dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder, int64_t * ust, int64_t * msc, int64_t * sbc
#define glXWaitForMscOML_PACKED PACKED_Bool_Display___GENPT___GLXDrawable_int64_t_int64_t_int64_t_int64_t___GENPT___int64_t___GENPT___int64_t___GENPT__
#define glXWaitForMscOML_FORMAT FORMAT_Bool_Display___GENPT___GLXDrawable_int64_t_int64_t_int64_t_int64_t___GENPT___int64_t___GENPT___int64_t___GENPT__
#define glXWaitForMscOML_VOID_ONLY_WRAP(...) {}
#define glXWaitForMscOML_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXWaitForSbcOML_INDEX 2828
#define glXWaitForSbcOML_RETURN Bool
#define glXWaitForSbcOML_ARG_NAMES dpy, drawable, target_sbc, ust, msc, sbc
#define glXWaitForSbcOML_ARG_EXPAND Display * dpy, GLXDrawable drawable, int64_t target_sbc, int64_t * ust, int64_t * msc, int64_t * sbc
#define glXWaitForSbcOML_PACKED PACKED_Bool_Display___GENPT___GLXDrawable_int64_t_int64_t___GENPT___int64_t___GENPT___int64_t___GENPT__
#define glXWaitForSbcOML_FORMAT FORMAT_Bool_Display___GENPT___GLXDrawable_int64_t_int64_t___GENPT___int64_t___GENPT___int64_t___GENPT__
#define glXWaitForSbcOML_VOID_ONLY_WRAP(...) {}
#define glXWaitForSbcOML_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXWaitGL_INDEX 2829
#define glXWaitGL_RETURN void
#define glXWaitGL_ARG_NAMES 
#define glXWaitGL_ARG_EXPAND 
#define glXWaitGL_PACKED PACKED_void
#define glXWaitGL_FORMAT FORMAT_void
#define glXWaitGL_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glXWaitGL_NOT_VOID_WRAP(...) {}
#define glXWaitVideoSyncSGI_INDEX 2830
#define glXWaitVideoSyncSGI_RETURN int
#define glXWaitVideoSyncSGI_ARG_NAMES divisor, remainder, count
#define glXWaitVideoSyncSGI_ARG_EXPAND int divisor, int remainder, unsigned int * count
#define glXWaitVideoSyncSGI_PACKED PACKED_int_int_int_unsigned_int___GENPT__
#define glXWaitVideoSyncSGI_FORMAT FORMAT_int_int_int_unsigned_int___GENPT__
#define glXWaitVideoSyncSGI_VOID_ONLY_WRAP(...) {}
#define glXWaitVideoSyncSGI_NOT_VOID_WRAP(...) { __VA_ARGS__ }
#define glXWaitX_INDEX 2831
#define glXWaitX_RETURN void
#define glXWaitX_ARG_NAMES 
#define glXWaitX_ARG_EXPAND 
#define glXWaitX_PACKED PACKED_void
#define glXWaitX_FORMAT FORMAT_void
#define glXWaitX_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define glXWaitX_NOT_VOID_WRAP(...) {}

EGLBoolean eglBindAPI(eglBindAPI_ARG_EXPAND);
typedef EGLBoolean (*eglBindAPI_PTR)(eglBindAPI_ARG_EXPAND);
EGLBoolean eglBindTexImage(eglBindTexImage_ARG_EXPAND);
typedef EGLBoolean (*eglBindTexImage_PTR)(eglBindTexImage_ARG_EXPAND);
EGLBoolean eglChooseConfig(eglChooseConfig_ARG_EXPAND);
typedef EGLBoolean (*eglChooseConfig_PTR)(eglChooseConfig_ARG_EXPAND);
EGLint eglClientWaitSyncKHR(eglClientWaitSyncKHR_ARG_EXPAND);
typedef EGLint (*eglClientWaitSyncKHR_PTR)(eglClientWaitSyncKHR_ARG_EXPAND);
EGLint eglClientWaitSyncNV(eglClientWaitSyncNV_ARG_EXPAND);
typedef EGLint (*eglClientWaitSyncNV_PTR)(eglClientWaitSyncNV_ARG_EXPAND);
EGLBoolean eglCopyBuffers(eglCopyBuffers_ARG_EXPAND);
typedef EGLBoolean (*eglCopyBuffers_PTR)(eglCopyBuffers_ARG_EXPAND);
EGLContext eglCreateContext(eglCreateContext_ARG_EXPAND);
typedef EGLContext (*eglCreateContext_PTR)(eglCreateContext_ARG_EXPAND);
EGLImageKHR eglCreateDRMImageMESA(eglCreateDRMImageMESA_ARG_EXPAND);
typedef EGLImageKHR (*eglCreateDRMImageMESA_PTR)(eglCreateDRMImageMESA_ARG_EXPAND);
EGLSyncNV eglCreateFenceSyncNV(eglCreateFenceSyncNV_ARG_EXPAND);
typedef EGLSyncNV (*eglCreateFenceSyncNV_PTR)(eglCreateFenceSyncNV_ARG_EXPAND);
EGLImageKHR eglCreateImageKHR(eglCreateImageKHR_ARG_EXPAND);
typedef EGLImageKHR (*eglCreateImageKHR_PTR)(eglCreateImageKHR_ARG_EXPAND);
EGLSurface eglCreatePbufferFromClientBuffer(eglCreatePbufferFromClientBuffer_ARG_EXPAND);
typedef EGLSurface (*eglCreatePbufferFromClientBuffer_PTR)(eglCreatePbufferFromClientBuffer_ARG_EXPAND);
EGLSurface eglCreatePbufferSurface(eglCreatePbufferSurface_ARG_EXPAND);
typedef EGLSurface (*eglCreatePbufferSurface_PTR)(eglCreatePbufferSurface_ARG_EXPAND);
EGLSurface eglCreatePixmapSurface(eglCreatePixmapSurface_ARG_EXPAND);
typedef EGLSurface (*eglCreatePixmapSurface_PTR)(eglCreatePixmapSurface_ARG_EXPAND);
EGLSurface eglCreatePixmapSurfaceHI(eglCreatePixmapSurfaceHI_ARG_EXPAND);
typedef EGLSurface (*eglCreatePixmapSurfaceHI_PTR)(eglCreatePixmapSurfaceHI_ARG_EXPAND);
EGLStreamKHR eglCreateStreamFromFileDescriptorKHR(eglCreateStreamFromFileDescriptorKHR_ARG_EXPAND);
typedef EGLStreamKHR (*eglCreateStreamFromFileDescriptorKHR_PTR)(eglCreateStreamFromFileDescriptorKHR_ARG_EXPAND);
EGLStreamKHR eglCreateStreamKHR(eglCreateStreamKHR_ARG_EXPAND);
typedef EGLStreamKHR (*eglCreateStreamKHR_PTR)(eglCreateStreamKHR_ARG_EXPAND);
EGLSurface eglCreateStreamProducerSurfaceKHR(eglCreateStreamProducerSurfaceKHR_ARG_EXPAND);
typedef EGLSurface (*eglCreateStreamProducerSurfaceKHR_PTR)(eglCreateStreamProducerSurfaceKHR_ARG_EXPAND);
EGLSyncKHR eglCreateSyncKHR(eglCreateSyncKHR_ARG_EXPAND);
typedef EGLSyncKHR (*eglCreateSyncKHR_PTR)(eglCreateSyncKHR_ARG_EXPAND);
EGLSurface eglCreateWindowSurface(eglCreateWindowSurface_ARG_EXPAND);
typedef EGLSurface (*eglCreateWindowSurface_PTR)(eglCreateWindowSurface_ARG_EXPAND);
EGLBoolean eglDestroyContext(eglDestroyContext_ARG_EXPAND);
typedef EGLBoolean (*eglDestroyContext_PTR)(eglDestroyContext_ARG_EXPAND);
EGLBoolean eglDestroyImageKHR(eglDestroyImageKHR_ARG_EXPAND);
typedef EGLBoolean (*eglDestroyImageKHR_PTR)(eglDestroyImageKHR_ARG_EXPAND);
EGLBoolean eglDestroyStreamKHR(eglDestroyStreamKHR_ARG_EXPAND);
typedef EGLBoolean (*eglDestroyStreamKHR_PTR)(eglDestroyStreamKHR_ARG_EXPAND);
EGLBoolean eglDestroySurface(eglDestroySurface_ARG_EXPAND);
typedef EGLBoolean (*eglDestroySurface_PTR)(eglDestroySurface_ARG_EXPAND);
EGLBoolean eglDestroySyncKHR(eglDestroySyncKHR_ARG_EXPAND);
typedef EGLBoolean (*eglDestroySyncKHR_PTR)(eglDestroySyncKHR_ARG_EXPAND);
EGLBoolean eglDestroySyncNV(eglDestroySyncNV_ARG_EXPAND);
typedef EGLBoolean (*eglDestroySyncNV_PTR)(eglDestroySyncNV_ARG_EXPAND);
EGLint eglDupNativeFenceFDANDROID(eglDupNativeFenceFDANDROID_ARG_EXPAND);
typedef EGLint (*eglDupNativeFenceFDANDROID_PTR)(eglDupNativeFenceFDANDROID_ARG_EXPAND);
EGLBoolean eglExportDRMImageMESA(eglExportDRMImageMESA_ARG_EXPAND);
typedef EGLBoolean (*eglExportDRMImageMESA_PTR)(eglExportDRMImageMESA_ARG_EXPAND);
EGLBoolean eglFenceNV(eglFenceNV_ARG_EXPAND);
typedef EGLBoolean (*eglFenceNV_PTR)(eglFenceNV_ARG_EXPAND);
EGLBoolean eglGetConfigAttrib(eglGetConfigAttrib_ARG_EXPAND);
typedef EGLBoolean (*eglGetConfigAttrib_PTR)(eglGetConfigAttrib_ARG_EXPAND);
EGLBoolean eglGetConfigs(eglGetConfigs_ARG_EXPAND);
typedef EGLBoolean (*eglGetConfigs_PTR)(eglGetConfigs_ARG_EXPAND);
EGLContext eglGetCurrentContext(eglGetCurrentContext_ARG_EXPAND);
typedef EGLContext (*eglGetCurrentContext_PTR)(eglGetCurrentContext_ARG_EXPAND);
EGLDisplay eglGetCurrentDisplay(eglGetCurrentDisplay_ARG_EXPAND);
typedef EGLDisplay (*eglGetCurrentDisplay_PTR)(eglGetCurrentDisplay_ARG_EXPAND);
EGLSurface eglGetCurrentSurface(eglGetCurrentSurface_ARG_EXPAND);
typedef EGLSurface (*eglGetCurrentSurface_PTR)(eglGetCurrentSurface_ARG_EXPAND);
EGLDisplay eglGetDisplay(eglGetDisplay_ARG_EXPAND);
typedef EGLDisplay (*eglGetDisplay_PTR)(eglGetDisplay_ARG_EXPAND);
EGLint eglGetError(eglGetError_ARG_EXPAND);
typedef EGLint (*eglGetError_PTR)(eglGetError_ARG_EXPAND);
__eglMustCastToProperFunctionPointerType eglGetProcAddress(eglGetProcAddress_ARG_EXPAND);
typedef __eglMustCastToProperFunctionPointerType (*eglGetProcAddress_PTR)(eglGetProcAddress_ARG_EXPAND);
EGLNativeFileDescriptorKHR eglGetStreamFileDescriptorKHR(eglGetStreamFileDescriptorKHR_ARG_EXPAND);
typedef EGLNativeFileDescriptorKHR (*eglGetStreamFileDescriptorKHR_PTR)(eglGetStreamFileDescriptorKHR_ARG_EXPAND);
EGLBoolean eglGetSyncAttribKHR(eglGetSyncAttribKHR_ARG_EXPAND);
typedef EGLBoolean (*eglGetSyncAttribKHR_PTR)(eglGetSyncAttribKHR_ARG_EXPAND);
EGLBoolean eglGetSyncAttribNV(eglGetSyncAttribNV_ARG_EXPAND);
typedef EGLBoolean (*eglGetSyncAttribNV_PTR)(eglGetSyncAttribNV_ARG_EXPAND);
EGLuint64NV eglGetSystemTimeFrequencyNV(eglGetSystemTimeFrequencyNV_ARG_EXPAND);
typedef EGLuint64NV (*eglGetSystemTimeFrequencyNV_PTR)(eglGetSystemTimeFrequencyNV_ARG_EXPAND);
EGLuint64NV eglGetSystemTimeNV(eglGetSystemTimeNV_ARG_EXPAND);
typedef EGLuint64NV (*eglGetSystemTimeNV_PTR)(eglGetSystemTimeNV_ARG_EXPAND);
EGLBoolean eglInitialize(eglInitialize_ARG_EXPAND);
typedef EGLBoolean (*eglInitialize_PTR)(eglInitialize_ARG_EXPAND);
EGLBoolean eglLockSurfaceKHR(eglLockSurfaceKHR_ARG_EXPAND);
typedef EGLBoolean (*eglLockSurfaceKHR_PTR)(eglLockSurfaceKHR_ARG_EXPAND);
EGLBoolean eglMakeCurrent(eglMakeCurrent_ARG_EXPAND);
typedef EGLBoolean (*eglMakeCurrent_PTR)(eglMakeCurrent_ARG_EXPAND);
EGLBoolean eglPostSubBufferNV(eglPostSubBufferNV_ARG_EXPAND);
typedef EGLBoolean (*eglPostSubBufferNV_PTR)(eglPostSubBufferNV_ARG_EXPAND);
EGLenum eglQueryAPI(eglQueryAPI_ARG_EXPAND);
typedef EGLenum (*eglQueryAPI_PTR)(eglQueryAPI_ARG_EXPAND);
EGLBoolean eglQueryContext(eglQueryContext_ARG_EXPAND);
typedef EGLBoolean (*eglQueryContext_PTR)(eglQueryContext_ARG_EXPAND);
EGLBoolean eglQueryNativeDisplayNV(eglQueryNativeDisplayNV_ARG_EXPAND);
typedef EGLBoolean (*eglQueryNativeDisplayNV_PTR)(eglQueryNativeDisplayNV_ARG_EXPAND);
EGLBoolean eglQueryNativePixmapNV(eglQueryNativePixmapNV_ARG_EXPAND);
typedef EGLBoolean (*eglQueryNativePixmapNV_PTR)(eglQueryNativePixmapNV_ARG_EXPAND);
EGLBoolean eglQueryNativeWindowNV(eglQueryNativeWindowNV_ARG_EXPAND);
typedef EGLBoolean (*eglQueryNativeWindowNV_PTR)(eglQueryNativeWindowNV_ARG_EXPAND);
EGLBoolean eglQueryStreamKHR(eglQueryStreamKHR_ARG_EXPAND);
typedef EGLBoolean (*eglQueryStreamKHR_PTR)(eglQueryStreamKHR_ARG_EXPAND);
EGLBoolean eglQueryStreamTimeKHR(eglQueryStreamTimeKHR_ARG_EXPAND);
typedef EGLBoolean (*eglQueryStreamTimeKHR_PTR)(eglQueryStreamTimeKHR_ARG_EXPAND);
EGLBoolean eglQueryStreamu64KHR(eglQueryStreamu64KHR_ARG_EXPAND);
typedef EGLBoolean (*eglQueryStreamu64KHR_PTR)(eglQueryStreamu64KHR_ARG_EXPAND);
const char * eglQueryString(eglQueryString_ARG_EXPAND);
typedef const char * (*eglQueryString_PTR)(eglQueryString_ARG_EXPAND);
EGLBoolean eglQuerySurface(eglQuerySurface_ARG_EXPAND);
typedef EGLBoolean (*eglQuerySurface_PTR)(eglQuerySurface_ARG_EXPAND);
EGLBoolean eglQuerySurfacePointerANGLE(eglQuerySurfacePointerANGLE_ARG_EXPAND);
typedef EGLBoolean (*eglQuerySurfacePointerANGLE_PTR)(eglQuerySurfacePointerANGLE_ARG_EXPAND);
EGLBoolean eglReleaseTexImage(eglReleaseTexImage_ARG_EXPAND);
typedef EGLBoolean (*eglReleaseTexImage_PTR)(eglReleaseTexImage_ARG_EXPAND);
EGLBoolean eglReleaseThread(eglReleaseThread_ARG_EXPAND);
typedef EGLBoolean (*eglReleaseThread_PTR)(eglReleaseThread_ARG_EXPAND);
EGLBoolean eglSignalSyncKHR(eglSignalSyncKHR_ARG_EXPAND);
typedef EGLBoolean (*eglSignalSyncKHR_PTR)(eglSignalSyncKHR_ARG_EXPAND);
EGLBoolean eglSignalSyncNV(eglSignalSyncNV_ARG_EXPAND);
typedef EGLBoolean (*eglSignalSyncNV_PTR)(eglSignalSyncNV_ARG_EXPAND);
EGLBoolean eglStreamAttribKHR(eglStreamAttribKHR_ARG_EXPAND);
typedef EGLBoolean (*eglStreamAttribKHR_PTR)(eglStreamAttribKHR_ARG_EXPAND);
EGLBoolean eglStreamConsumerAcquireKHR(eglStreamConsumerAcquireKHR_ARG_EXPAND);
typedef EGLBoolean (*eglStreamConsumerAcquireKHR_PTR)(eglStreamConsumerAcquireKHR_ARG_EXPAND);
EGLBoolean eglStreamConsumerGLTextureExternalKHR(eglStreamConsumerGLTextureExternalKHR_ARG_EXPAND);
typedef EGLBoolean (*eglStreamConsumerGLTextureExternalKHR_PTR)(eglStreamConsumerGLTextureExternalKHR_ARG_EXPAND);
EGLBoolean eglStreamConsumerReleaseKHR(eglStreamConsumerReleaseKHR_ARG_EXPAND);
typedef EGLBoolean (*eglStreamConsumerReleaseKHR_PTR)(eglStreamConsumerReleaseKHR_ARG_EXPAND);
EGLBoolean eglSurfaceAttrib(eglSurfaceAttrib_ARG_EXPAND);
typedef EGLBoolean (*eglSurfaceAttrib_PTR)(eglSurfaceAttrib_ARG_EXPAND);
EGLBoolean eglSwapBuffers(eglSwapBuffers_ARG_EXPAND);
typedef EGLBoolean (*eglSwapBuffers_PTR)(eglSwapBuffers_ARG_EXPAND);
EGLBoolean eglSwapBuffersWithDamageEXT(eglSwapBuffersWithDamageEXT_ARG_EXPAND);
typedef EGLBoolean (*eglSwapBuffersWithDamageEXT_PTR)(eglSwapBuffersWithDamageEXT_ARG_EXPAND);
EGLBoolean eglSwapInterval(eglSwapInterval_ARG_EXPAND);
typedef EGLBoolean (*eglSwapInterval_PTR)(eglSwapInterval_ARG_EXPAND);
EGLBoolean eglTerminate(eglTerminate_ARG_EXPAND);
typedef EGLBoolean (*eglTerminate_PTR)(eglTerminate_ARG_EXPAND);
EGLBoolean eglUnlockSurfaceKHR(eglUnlockSurfaceKHR_ARG_EXPAND);
typedef EGLBoolean (*eglUnlockSurfaceKHR_PTR)(eglUnlockSurfaceKHR_ARG_EXPAND);
EGLBoolean eglWaitClient(eglWaitClient_ARG_EXPAND);
typedef EGLBoolean (*eglWaitClient_PTR)(eglWaitClient_ARG_EXPAND);
EGLBoolean eglWaitGL(eglWaitGL_ARG_EXPAND);
typedef EGLBoolean (*eglWaitGL_PTR)(eglWaitGL_ARG_EXPAND);
EGLBoolean eglWaitNative(eglWaitNative_ARG_EXPAND);
typedef EGLBoolean (*eglWaitNative_PTR)(eglWaitNative_ARG_EXPAND);
EGLint eglWaitSyncKHR(eglWaitSyncKHR_ARG_EXPAND);
typedef EGLint (*eglWaitSyncKHR_PTR)(eglWaitSyncKHR_ARG_EXPAND);
void glAccum(glAccum_ARG_EXPAND);
typedef void (*glAccum_PTR)(glAccum_ARG_EXPAND);
void glAccumxOES(glAccumxOES_ARG_EXPAND);
typedef void (*glAccumxOES_PTR)(glAccumxOES_ARG_EXPAND);
void glActiveProgramEXT(glActiveProgramEXT_ARG_EXPAND);
typedef void (*glActiveProgramEXT_PTR)(glActiveProgramEXT_ARG_EXPAND);
void glActiveShaderProgram(glActiveShaderProgram_ARG_EXPAND);
typedef void (*glActiveShaderProgram_PTR)(glActiveShaderProgram_ARG_EXPAND);
void glActiveStencilFaceEXT(glActiveStencilFaceEXT_ARG_EXPAND);
typedef void (*glActiveStencilFaceEXT_PTR)(glActiveStencilFaceEXT_ARG_EXPAND);
void glActiveTexture(glActiveTexture_ARG_EXPAND);
typedef void (*glActiveTexture_PTR)(glActiveTexture_ARG_EXPAND);
void glActiveTextureARB(glActiveTextureARB_ARG_EXPAND);
typedef void (*glActiveTextureARB_PTR)(glActiveTextureARB_ARG_EXPAND);
void glActiveVaryingNV(glActiveVaryingNV_ARG_EXPAND);
typedef void (*glActiveVaryingNV_PTR)(glActiveVaryingNV_ARG_EXPAND);
void glAlphaFragmentOp1ATI(glAlphaFragmentOp1ATI_ARG_EXPAND);
typedef void (*glAlphaFragmentOp1ATI_PTR)(glAlphaFragmentOp1ATI_ARG_EXPAND);
void glAlphaFragmentOp2ATI(glAlphaFragmentOp2ATI_ARG_EXPAND);
typedef void (*glAlphaFragmentOp2ATI_PTR)(glAlphaFragmentOp2ATI_ARG_EXPAND);
void glAlphaFragmentOp3ATI(glAlphaFragmentOp3ATI_ARG_EXPAND);
typedef void (*glAlphaFragmentOp3ATI_PTR)(glAlphaFragmentOp3ATI_ARG_EXPAND);
void glAlphaFunc(glAlphaFunc_ARG_EXPAND);
typedef void (*glAlphaFunc_PTR)(glAlphaFunc_ARG_EXPAND);
void glAlphaFuncx(glAlphaFuncx_ARG_EXPAND);
typedef void (*glAlphaFuncx_PTR)(glAlphaFuncx_ARG_EXPAND);
void glAlphaFuncxOES(glAlphaFuncxOES_ARG_EXPAND);
typedef void (*glAlphaFuncxOES_PTR)(glAlphaFuncxOES_ARG_EXPAND);
void glApplyTextureEXT(glApplyTextureEXT_ARG_EXPAND);
typedef void (*glApplyTextureEXT_PTR)(glApplyTextureEXT_ARG_EXPAND);
GLboolean glAreProgramsResidentNV(glAreProgramsResidentNV_ARG_EXPAND);
typedef GLboolean (*glAreProgramsResidentNV_PTR)(glAreProgramsResidentNV_ARG_EXPAND);
GLboolean glAreTexturesResident(glAreTexturesResident_ARG_EXPAND);
typedef GLboolean (*glAreTexturesResident_PTR)(glAreTexturesResident_ARG_EXPAND);
GLboolean glAreTexturesResidentEXT(glAreTexturesResidentEXT_ARG_EXPAND);
typedef GLboolean (*glAreTexturesResidentEXT_PTR)(glAreTexturesResidentEXT_ARG_EXPAND);
void glArrayElement(glArrayElement_ARG_EXPAND);
typedef void (*glArrayElement_PTR)(glArrayElement_ARG_EXPAND);
void glArrayElementEXT(glArrayElementEXT_ARG_EXPAND);
typedef void (*glArrayElementEXT_PTR)(glArrayElementEXT_ARG_EXPAND);
void glArrayObjectATI(glArrayObjectATI_ARG_EXPAND);
typedef void (*glArrayObjectATI_PTR)(glArrayObjectATI_ARG_EXPAND);
void glAsyncMarkerSGIX(glAsyncMarkerSGIX_ARG_EXPAND);
typedef void (*glAsyncMarkerSGIX_PTR)(glAsyncMarkerSGIX_ARG_EXPAND);
void glAttachObjectARB(glAttachObjectARB_ARG_EXPAND);
typedef void (*glAttachObjectARB_PTR)(glAttachObjectARB_ARG_EXPAND);
void glAttachShader(glAttachShader_ARG_EXPAND);
typedef void (*glAttachShader_PTR)(glAttachShader_ARG_EXPAND);
void glBegin(glBegin_ARG_EXPAND);
typedef void (*glBegin_PTR)(glBegin_ARG_EXPAND);
void glBeginConditionalRender(glBeginConditionalRender_ARG_EXPAND);
typedef void (*glBeginConditionalRender_PTR)(glBeginConditionalRender_ARG_EXPAND);
void glBeginConditionalRenderNV(glBeginConditionalRenderNV_ARG_EXPAND);
typedef void (*glBeginConditionalRenderNV_PTR)(glBeginConditionalRenderNV_ARG_EXPAND);
void glBeginConditionalRenderNVX(glBeginConditionalRenderNVX_ARG_EXPAND);
typedef void (*glBeginConditionalRenderNVX_PTR)(glBeginConditionalRenderNVX_ARG_EXPAND);
void glBeginFragmentShaderATI(glBeginFragmentShaderATI_ARG_EXPAND);
typedef void (*glBeginFragmentShaderATI_PTR)(glBeginFragmentShaderATI_ARG_EXPAND);
void glBeginOcclusionQueryNV(glBeginOcclusionQueryNV_ARG_EXPAND);
typedef void (*glBeginOcclusionQueryNV_PTR)(glBeginOcclusionQueryNV_ARG_EXPAND);
void glBeginPerfMonitorAMD(glBeginPerfMonitorAMD_ARG_EXPAND);
typedef void (*glBeginPerfMonitorAMD_PTR)(glBeginPerfMonitorAMD_ARG_EXPAND);
void glBeginQuery(glBeginQuery_ARG_EXPAND);
typedef void (*glBeginQuery_PTR)(glBeginQuery_ARG_EXPAND);
void glBeginQueryARB(glBeginQueryARB_ARG_EXPAND);
typedef void (*glBeginQueryARB_PTR)(glBeginQueryARB_ARG_EXPAND);
void glBeginQueryIndexed(glBeginQueryIndexed_ARG_EXPAND);
typedef void (*glBeginQueryIndexed_PTR)(glBeginQueryIndexed_ARG_EXPAND);
void glBeginTransformFeedback(glBeginTransformFeedback_ARG_EXPAND);
typedef void (*glBeginTransformFeedback_PTR)(glBeginTransformFeedback_ARG_EXPAND);
void glBeginTransformFeedbackEXT(glBeginTransformFeedbackEXT_ARG_EXPAND);
typedef void (*glBeginTransformFeedbackEXT_PTR)(glBeginTransformFeedbackEXT_ARG_EXPAND);
void glBeginTransformFeedbackNV(glBeginTransformFeedbackNV_ARG_EXPAND);
typedef void (*glBeginTransformFeedbackNV_PTR)(glBeginTransformFeedbackNV_ARG_EXPAND);
void glBeginVertexShaderEXT(glBeginVertexShaderEXT_ARG_EXPAND);
typedef void (*glBeginVertexShaderEXT_PTR)(glBeginVertexShaderEXT_ARG_EXPAND);
void glBeginVideoCaptureNV(glBeginVideoCaptureNV_ARG_EXPAND);
typedef void (*glBeginVideoCaptureNV_PTR)(glBeginVideoCaptureNV_ARG_EXPAND);
void glBindAttribLocation(glBindAttribLocation_ARG_EXPAND);
typedef void (*glBindAttribLocation_PTR)(glBindAttribLocation_ARG_EXPAND);
void glBindAttribLocationARB(glBindAttribLocationARB_ARG_EXPAND);
typedef void (*glBindAttribLocationARB_PTR)(glBindAttribLocationARB_ARG_EXPAND);
void glBindBuffer(glBindBuffer_ARG_EXPAND);
typedef void (*glBindBuffer_PTR)(glBindBuffer_ARG_EXPAND);
void glBindBufferARB(glBindBufferARB_ARG_EXPAND);
typedef void (*glBindBufferARB_PTR)(glBindBufferARB_ARG_EXPAND);
void glBindBufferBase(glBindBufferBase_ARG_EXPAND);
typedef void (*glBindBufferBase_PTR)(glBindBufferBase_ARG_EXPAND);
void glBindBufferBaseEXT(glBindBufferBaseEXT_ARG_EXPAND);
typedef void (*glBindBufferBaseEXT_PTR)(glBindBufferBaseEXT_ARG_EXPAND);
void glBindBufferBaseNV(glBindBufferBaseNV_ARG_EXPAND);
typedef void (*glBindBufferBaseNV_PTR)(glBindBufferBaseNV_ARG_EXPAND);
void glBindBufferOffsetEXT(glBindBufferOffsetEXT_ARG_EXPAND);
typedef void (*glBindBufferOffsetEXT_PTR)(glBindBufferOffsetEXT_ARG_EXPAND);
void glBindBufferOffsetNV(glBindBufferOffsetNV_ARG_EXPAND);
typedef void (*glBindBufferOffsetNV_PTR)(glBindBufferOffsetNV_ARG_EXPAND);
void glBindBufferRange(glBindBufferRange_ARG_EXPAND);
typedef void (*glBindBufferRange_PTR)(glBindBufferRange_ARG_EXPAND);
void glBindBufferRangeEXT(glBindBufferRangeEXT_ARG_EXPAND);
typedef void (*glBindBufferRangeEXT_PTR)(glBindBufferRangeEXT_ARG_EXPAND);
void glBindBufferRangeNV(glBindBufferRangeNV_ARG_EXPAND);
typedef void (*glBindBufferRangeNV_PTR)(glBindBufferRangeNV_ARG_EXPAND);
void glBindFragDataLocation(glBindFragDataLocation_ARG_EXPAND);
typedef void (*glBindFragDataLocation_PTR)(glBindFragDataLocation_ARG_EXPAND);
void glBindFragDataLocationEXT(glBindFragDataLocationEXT_ARG_EXPAND);
typedef void (*glBindFragDataLocationEXT_PTR)(glBindFragDataLocationEXT_ARG_EXPAND);
void glBindFragDataLocationIndexed(glBindFragDataLocationIndexed_ARG_EXPAND);
typedef void (*glBindFragDataLocationIndexed_PTR)(glBindFragDataLocationIndexed_ARG_EXPAND);
void glBindFragmentShaderATI(glBindFragmentShaderATI_ARG_EXPAND);
typedef void (*glBindFragmentShaderATI_PTR)(glBindFragmentShaderATI_ARG_EXPAND);
void glBindFramebuffer(glBindFramebuffer_ARG_EXPAND);
typedef void (*glBindFramebuffer_PTR)(glBindFramebuffer_ARG_EXPAND);
void glBindFramebufferEXT(glBindFramebufferEXT_ARG_EXPAND);
typedef void (*glBindFramebufferEXT_PTR)(glBindFramebufferEXT_ARG_EXPAND);
void glBindImageTexture(glBindImageTexture_ARG_EXPAND);
typedef void (*glBindImageTexture_PTR)(glBindImageTexture_ARG_EXPAND);
void glBindImageTextureEXT(glBindImageTextureEXT_ARG_EXPAND);
typedef void (*glBindImageTextureEXT_PTR)(glBindImageTextureEXT_ARG_EXPAND);
GLuint glBindLightParameterEXT(glBindLightParameterEXT_ARG_EXPAND);
typedef GLuint (*glBindLightParameterEXT_PTR)(glBindLightParameterEXT_ARG_EXPAND);
GLuint glBindMaterialParameterEXT(glBindMaterialParameterEXT_ARG_EXPAND);
typedef GLuint (*glBindMaterialParameterEXT_PTR)(glBindMaterialParameterEXT_ARG_EXPAND);
void glBindMultiTextureEXT(glBindMultiTextureEXT_ARG_EXPAND);
typedef void (*glBindMultiTextureEXT_PTR)(glBindMultiTextureEXT_ARG_EXPAND);
GLuint glBindParameterEXT(glBindParameterEXT_ARG_EXPAND);
typedef GLuint (*glBindParameterEXT_PTR)(glBindParameterEXT_ARG_EXPAND);
void glBindProgramARB(glBindProgramARB_ARG_EXPAND);
typedef void (*glBindProgramARB_PTR)(glBindProgramARB_ARG_EXPAND);
void glBindProgramNV(glBindProgramNV_ARG_EXPAND);
typedef void (*glBindProgramNV_PTR)(glBindProgramNV_ARG_EXPAND);
void glBindProgramPipeline(glBindProgramPipeline_ARG_EXPAND);
typedef void (*glBindProgramPipeline_PTR)(glBindProgramPipeline_ARG_EXPAND);
void glBindRenderbuffer(glBindRenderbuffer_ARG_EXPAND);
typedef void (*glBindRenderbuffer_PTR)(glBindRenderbuffer_ARG_EXPAND);
void glBindRenderbufferEXT(glBindRenderbufferEXT_ARG_EXPAND);
typedef void (*glBindRenderbufferEXT_PTR)(glBindRenderbufferEXT_ARG_EXPAND);
void glBindSampler(glBindSampler_ARG_EXPAND);
typedef void (*glBindSampler_PTR)(glBindSampler_ARG_EXPAND);
GLuint glBindTexGenParameterEXT(glBindTexGenParameterEXT_ARG_EXPAND);
typedef GLuint (*glBindTexGenParameterEXT_PTR)(glBindTexGenParameterEXT_ARG_EXPAND);
void glBindTexture(glBindTexture_ARG_EXPAND);
typedef void (*glBindTexture_PTR)(glBindTexture_ARG_EXPAND);
void glBindTextureEXT(glBindTextureEXT_ARG_EXPAND);
typedef void (*glBindTextureEXT_PTR)(glBindTextureEXT_ARG_EXPAND);
GLuint glBindTextureUnitParameterEXT(glBindTextureUnitParameterEXT_ARG_EXPAND);
typedef GLuint (*glBindTextureUnitParameterEXT_PTR)(glBindTextureUnitParameterEXT_ARG_EXPAND);
void glBindTransformFeedback(glBindTransformFeedback_ARG_EXPAND);
typedef void (*glBindTransformFeedback_PTR)(glBindTransformFeedback_ARG_EXPAND);
void glBindTransformFeedbackNV(glBindTransformFeedbackNV_ARG_EXPAND);
typedef void (*glBindTransformFeedbackNV_PTR)(glBindTransformFeedbackNV_ARG_EXPAND);
void glBindVertexArray(glBindVertexArray_ARG_EXPAND);
typedef void (*glBindVertexArray_PTR)(glBindVertexArray_ARG_EXPAND);
void glBindVertexArrayAPPLE(glBindVertexArrayAPPLE_ARG_EXPAND);
typedef void (*glBindVertexArrayAPPLE_PTR)(glBindVertexArrayAPPLE_ARG_EXPAND);
void glBindVertexBuffer(glBindVertexBuffer_ARG_EXPAND);
typedef void (*glBindVertexBuffer_PTR)(glBindVertexBuffer_ARG_EXPAND);
void glBindVertexShaderEXT(glBindVertexShaderEXT_ARG_EXPAND);
typedef void (*glBindVertexShaderEXT_PTR)(glBindVertexShaderEXT_ARG_EXPAND);
void glBindVideoCaptureStreamBufferNV(glBindVideoCaptureStreamBufferNV_ARG_EXPAND);
typedef void (*glBindVideoCaptureStreamBufferNV_PTR)(glBindVideoCaptureStreamBufferNV_ARG_EXPAND);
void glBindVideoCaptureStreamTextureNV(glBindVideoCaptureStreamTextureNV_ARG_EXPAND);
typedef void (*glBindVideoCaptureStreamTextureNV_PTR)(glBindVideoCaptureStreamTextureNV_ARG_EXPAND);
void glBinormal3bEXT(glBinormal3bEXT_ARG_EXPAND);
typedef void (*glBinormal3bEXT_PTR)(glBinormal3bEXT_ARG_EXPAND);
void glBinormal3bvEXT(glBinormal3bvEXT_ARG_EXPAND);
typedef void (*glBinormal3bvEXT_PTR)(glBinormal3bvEXT_ARG_EXPAND);
void glBinormal3dEXT(glBinormal3dEXT_ARG_EXPAND);
typedef void (*glBinormal3dEXT_PTR)(glBinormal3dEXT_ARG_EXPAND);
void glBinormal3dvEXT(glBinormal3dvEXT_ARG_EXPAND);
typedef void (*glBinormal3dvEXT_PTR)(glBinormal3dvEXT_ARG_EXPAND);
void glBinormal3fEXT(glBinormal3fEXT_ARG_EXPAND);
typedef void (*glBinormal3fEXT_PTR)(glBinormal3fEXT_ARG_EXPAND);
void glBinormal3fvEXT(glBinormal3fvEXT_ARG_EXPAND);
typedef void (*glBinormal3fvEXT_PTR)(glBinormal3fvEXT_ARG_EXPAND);
void glBinormal3iEXT(glBinormal3iEXT_ARG_EXPAND);
typedef void (*glBinormal3iEXT_PTR)(glBinormal3iEXT_ARG_EXPAND);
void glBinormal3ivEXT(glBinormal3ivEXT_ARG_EXPAND);
typedef void (*glBinormal3ivEXT_PTR)(glBinormal3ivEXT_ARG_EXPAND);
void glBinormal3sEXT(glBinormal3sEXT_ARG_EXPAND);
typedef void (*glBinormal3sEXT_PTR)(glBinormal3sEXT_ARG_EXPAND);
void glBinormal3svEXT(glBinormal3svEXT_ARG_EXPAND);
typedef void (*glBinormal3svEXT_PTR)(glBinormal3svEXT_ARG_EXPAND);
void glBinormalPointerEXT(glBinormalPointerEXT_ARG_EXPAND);
typedef void (*glBinormalPointerEXT_PTR)(glBinormalPointerEXT_ARG_EXPAND);
void glBitmap(glBitmap_ARG_EXPAND);
typedef void (*glBitmap_PTR)(glBitmap_ARG_EXPAND);
void glBitmapxOES(glBitmapxOES_ARG_EXPAND);
typedef void (*glBitmapxOES_PTR)(glBitmapxOES_ARG_EXPAND);
void glBlendColor(glBlendColor_ARG_EXPAND);
typedef void (*glBlendColor_PTR)(glBlendColor_ARG_EXPAND);
void glBlendColorEXT(glBlendColorEXT_ARG_EXPAND);
typedef void (*glBlendColorEXT_PTR)(glBlendColorEXT_ARG_EXPAND);
void glBlendColorOES(glBlendColorOES_ARG_EXPAND);
typedef void (*glBlendColorOES_PTR)(glBlendColorOES_ARG_EXPAND);
void glBlendColorxOES(glBlendColorxOES_ARG_EXPAND);
typedef void (*glBlendColorxOES_PTR)(glBlendColorxOES_ARG_EXPAND);
void glBlendEquation(glBlendEquation_ARG_EXPAND);
typedef void (*glBlendEquation_PTR)(glBlendEquation_ARG_EXPAND);
void glBlendEquationEXT(glBlendEquationEXT_ARG_EXPAND);
typedef void (*glBlendEquationEXT_PTR)(glBlendEquationEXT_ARG_EXPAND);
void glBlendEquationIndexedAMD(glBlendEquationIndexedAMD_ARG_EXPAND);
typedef void (*glBlendEquationIndexedAMD_PTR)(glBlendEquationIndexedAMD_ARG_EXPAND);
void glBlendEquationOES(glBlendEquationOES_ARG_EXPAND);
typedef void (*glBlendEquationOES_PTR)(glBlendEquationOES_ARG_EXPAND);
void glBlendEquationSeparate(glBlendEquationSeparate_ARG_EXPAND);
typedef void (*glBlendEquationSeparate_PTR)(glBlendEquationSeparate_ARG_EXPAND);
void glBlendEquationSeparateEXT(glBlendEquationSeparateEXT_ARG_EXPAND);
typedef void (*glBlendEquationSeparateEXT_PTR)(glBlendEquationSeparateEXT_ARG_EXPAND);
void glBlendEquationSeparateIndexedAMD(glBlendEquationSeparateIndexedAMD_ARG_EXPAND);
typedef void (*glBlendEquationSeparateIndexedAMD_PTR)(glBlendEquationSeparateIndexedAMD_ARG_EXPAND);
void glBlendEquationSeparateOES(glBlendEquationSeparateOES_ARG_EXPAND);
typedef void (*glBlendEquationSeparateOES_PTR)(glBlendEquationSeparateOES_ARG_EXPAND);
void glBlendEquationSeparatei(glBlendEquationSeparatei_ARG_EXPAND);
typedef void (*glBlendEquationSeparatei_PTR)(glBlendEquationSeparatei_ARG_EXPAND);
void glBlendEquationSeparateiARB(glBlendEquationSeparateiARB_ARG_EXPAND);
typedef void (*glBlendEquationSeparateiARB_PTR)(glBlendEquationSeparateiARB_ARG_EXPAND);
void glBlendEquationi(glBlendEquationi_ARG_EXPAND);
typedef void (*glBlendEquationi_PTR)(glBlendEquationi_ARG_EXPAND);
void glBlendEquationiARB(glBlendEquationiARB_ARG_EXPAND);
typedef void (*glBlendEquationiARB_PTR)(glBlendEquationiARB_ARG_EXPAND);
void glBlendFunc(glBlendFunc_ARG_EXPAND);
typedef void (*glBlendFunc_PTR)(glBlendFunc_ARG_EXPAND);
void glBlendFuncIndexedAMD(glBlendFuncIndexedAMD_ARG_EXPAND);
typedef void (*glBlendFuncIndexedAMD_PTR)(glBlendFuncIndexedAMD_ARG_EXPAND);
void glBlendFuncSeparate(glBlendFuncSeparate_ARG_EXPAND);
typedef void (*glBlendFuncSeparate_PTR)(glBlendFuncSeparate_ARG_EXPAND);
void glBlendFuncSeparateEXT(glBlendFuncSeparateEXT_ARG_EXPAND);
typedef void (*glBlendFuncSeparateEXT_PTR)(glBlendFuncSeparateEXT_ARG_EXPAND);
void glBlendFuncSeparateINGR(glBlendFuncSeparateINGR_ARG_EXPAND);
typedef void (*glBlendFuncSeparateINGR_PTR)(glBlendFuncSeparateINGR_ARG_EXPAND);
void glBlendFuncSeparateIndexedAMD(glBlendFuncSeparateIndexedAMD_ARG_EXPAND);
typedef void (*glBlendFuncSeparateIndexedAMD_PTR)(glBlendFuncSeparateIndexedAMD_ARG_EXPAND);
void glBlendFuncSeparateOES(glBlendFuncSeparateOES_ARG_EXPAND);
typedef void (*glBlendFuncSeparateOES_PTR)(glBlendFuncSeparateOES_ARG_EXPAND);
void glBlendFuncSeparatei(glBlendFuncSeparatei_ARG_EXPAND);
typedef void (*glBlendFuncSeparatei_PTR)(glBlendFuncSeparatei_ARG_EXPAND);
void glBlendFuncSeparateiARB(glBlendFuncSeparateiARB_ARG_EXPAND);
typedef void (*glBlendFuncSeparateiARB_PTR)(glBlendFuncSeparateiARB_ARG_EXPAND);
void glBlendFunci(glBlendFunci_ARG_EXPAND);
typedef void (*glBlendFunci_PTR)(glBlendFunci_ARG_EXPAND);
void glBlendFunciARB(glBlendFunciARB_ARG_EXPAND);
typedef void (*glBlendFunciARB_PTR)(glBlendFunciARB_ARG_EXPAND);
void glBlitFramebuffer(glBlitFramebuffer_ARG_EXPAND);
typedef void (*glBlitFramebuffer_PTR)(glBlitFramebuffer_ARG_EXPAND);
void glBlitFramebufferEXT(glBlitFramebufferEXT_ARG_EXPAND);
typedef void (*glBlitFramebufferEXT_PTR)(glBlitFramebufferEXT_ARG_EXPAND);
void glBufferAddressRangeNV(glBufferAddressRangeNV_ARG_EXPAND);
typedef void (*glBufferAddressRangeNV_PTR)(glBufferAddressRangeNV_ARG_EXPAND);
void glBufferData(glBufferData_ARG_EXPAND);
typedef void (*glBufferData_PTR)(glBufferData_ARG_EXPAND);
void glBufferDataARB(glBufferDataARB_ARG_EXPAND);
typedef void (*glBufferDataARB_PTR)(glBufferDataARB_ARG_EXPAND);
void glBufferParameteriAPPLE(glBufferParameteriAPPLE_ARG_EXPAND);
typedef void (*glBufferParameteriAPPLE_PTR)(glBufferParameteriAPPLE_ARG_EXPAND);
void glBufferSubData(glBufferSubData_ARG_EXPAND);
typedef void (*glBufferSubData_PTR)(glBufferSubData_ARG_EXPAND);
void glBufferSubDataARB(glBufferSubDataARB_ARG_EXPAND);
typedef void (*glBufferSubDataARB_PTR)(glBufferSubDataARB_ARG_EXPAND);
void glCallList(glCallList_ARG_EXPAND);
typedef void (*glCallList_PTR)(glCallList_ARG_EXPAND);
void glCallLists(glCallLists_ARG_EXPAND);
typedef void (*glCallLists_PTR)(glCallLists_ARG_EXPAND);
GLenum glCheckFramebufferStatus(glCheckFramebufferStatus_ARG_EXPAND);
typedef GLenum (*glCheckFramebufferStatus_PTR)(glCheckFramebufferStatus_ARG_EXPAND);
GLenum glCheckFramebufferStatusEXT(glCheckFramebufferStatusEXT_ARG_EXPAND);
typedef GLenum (*glCheckFramebufferStatusEXT_PTR)(glCheckFramebufferStatusEXT_ARG_EXPAND);
GLenum glCheckNamedFramebufferStatusEXT(glCheckNamedFramebufferStatusEXT_ARG_EXPAND);
typedef GLenum (*glCheckNamedFramebufferStatusEXT_PTR)(glCheckNamedFramebufferStatusEXT_ARG_EXPAND);
void glClampColor(glClampColor_ARG_EXPAND);
typedef void (*glClampColor_PTR)(glClampColor_ARG_EXPAND);
void glClampColorARB(glClampColorARB_ARG_EXPAND);
typedef void (*glClampColorARB_PTR)(glClampColorARB_ARG_EXPAND);
void glClear(glClear_ARG_EXPAND);
typedef void (*glClear_PTR)(glClear_ARG_EXPAND);
void glClearAccum(glClearAccum_ARG_EXPAND);
typedef void (*glClearAccum_PTR)(glClearAccum_ARG_EXPAND);
void glClearAccumxOES(glClearAccumxOES_ARG_EXPAND);
typedef void (*glClearAccumxOES_PTR)(glClearAccumxOES_ARG_EXPAND);
void glClearBufferData(glClearBufferData_ARG_EXPAND);
typedef void (*glClearBufferData_PTR)(glClearBufferData_ARG_EXPAND);
void glClearBufferSubData(glClearBufferSubData_ARG_EXPAND);
typedef void (*glClearBufferSubData_PTR)(glClearBufferSubData_ARG_EXPAND);
void glClearBufferfi(glClearBufferfi_ARG_EXPAND);
typedef void (*glClearBufferfi_PTR)(glClearBufferfi_ARG_EXPAND);
void glClearBufferfv(glClearBufferfv_ARG_EXPAND);
typedef void (*glClearBufferfv_PTR)(glClearBufferfv_ARG_EXPAND);
void glClearBufferiv(glClearBufferiv_ARG_EXPAND);
typedef void (*glClearBufferiv_PTR)(glClearBufferiv_ARG_EXPAND);
void glClearBufferuiv(glClearBufferuiv_ARG_EXPAND);
typedef void (*glClearBufferuiv_PTR)(glClearBufferuiv_ARG_EXPAND);
void glClearColor(glClearColor_ARG_EXPAND);
typedef void (*glClearColor_PTR)(glClearColor_ARG_EXPAND);
void glClearColorIiEXT(glClearColorIiEXT_ARG_EXPAND);
typedef void (*glClearColorIiEXT_PTR)(glClearColorIiEXT_ARG_EXPAND);
void glClearColorIuiEXT(glClearColorIuiEXT_ARG_EXPAND);
typedef void (*glClearColorIuiEXT_PTR)(glClearColorIuiEXT_ARG_EXPAND);
void glClearColorx(glClearColorx_ARG_EXPAND);
typedef void (*glClearColorx_PTR)(glClearColorx_ARG_EXPAND);
void glClearColorxOES(glClearColorxOES_ARG_EXPAND);
typedef void (*glClearColorxOES_PTR)(glClearColorxOES_ARG_EXPAND);
void glClearDepth(glClearDepth_ARG_EXPAND);
typedef void (*glClearDepth_PTR)(glClearDepth_ARG_EXPAND);
void glClearDepthdNV(glClearDepthdNV_ARG_EXPAND);
typedef void (*glClearDepthdNV_PTR)(glClearDepthdNV_ARG_EXPAND);
void glClearDepthf(glClearDepthf_ARG_EXPAND);
typedef void (*glClearDepthf_PTR)(glClearDepthf_ARG_EXPAND);
void glClearDepthfOES(glClearDepthfOES_ARG_EXPAND);
typedef void (*glClearDepthfOES_PTR)(glClearDepthfOES_ARG_EXPAND);
void glClearDepthx(glClearDepthx_ARG_EXPAND);
typedef void (*glClearDepthx_PTR)(glClearDepthx_ARG_EXPAND);
void glClearDepthxOES(glClearDepthxOES_ARG_EXPAND);
typedef void (*glClearDepthxOES_PTR)(glClearDepthxOES_ARG_EXPAND);
void glClearIndex(glClearIndex_ARG_EXPAND);
typedef void (*glClearIndex_PTR)(glClearIndex_ARG_EXPAND);
void glClearNamedBufferDataEXT(glClearNamedBufferDataEXT_ARG_EXPAND);
typedef void (*glClearNamedBufferDataEXT_PTR)(glClearNamedBufferDataEXT_ARG_EXPAND);
void glClearNamedBufferSubDataEXT(glClearNamedBufferSubDataEXT_ARG_EXPAND);
typedef void (*glClearNamedBufferSubDataEXT_PTR)(glClearNamedBufferSubDataEXT_ARG_EXPAND);
void glClearStencil(glClearStencil_ARG_EXPAND);
typedef void (*glClearStencil_PTR)(glClearStencil_ARG_EXPAND);
void glClientActiveTexture(glClientActiveTexture_ARG_EXPAND);
typedef void (*glClientActiveTexture_PTR)(glClientActiveTexture_ARG_EXPAND);
void glClientActiveTextureARB(glClientActiveTextureARB_ARG_EXPAND);
typedef void (*glClientActiveTextureARB_PTR)(glClientActiveTextureARB_ARG_EXPAND);
void glClientActiveVertexStreamATI(glClientActiveVertexStreamATI_ARG_EXPAND);
typedef void (*glClientActiveVertexStreamATI_PTR)(glClientActiveVertexStreamATI_ARG_EXPAND);
void glClientAttribDefaultEXT(glClientAttribDefaultEXT_ARG_EXPAND);
typedef void (*glClientAttribDefaultEXT_PTR)(glClientAttribDefaultEXT_ARG_EXPAND);
GLenum glClientWaitSync(glClientWaitSync_ARG_EXPAND);
typedef GLenum (*glClientWaitSync_PTR)(glClientWaitSync_ARG_EXPAND);
void glClipPlane(glClipPlane_ARG_EXPAND);
typedef void (*glClipPlane_PTR)(glClipPlane_ARG_EXPAND);
void glClipPlanef(glClipPlanef_ARG_EXPAND);
typedef void (*glClipPlanef_PTR)(glClipPlanef_ARG_EXPAND);
void glClipPlanefOES(glClipPlanefOES_ARG_EXPAND);
typedef void (*glClipPlanefOES_PTR)(glClipPlanefOES_ARG_EXPAND);
void glClipPlanex(glClipPlanex_ARG_EXPAND);
typedef void (*glClipPlanex_PTR)(glClipPlanex_ARG_EXPAND);
void glClipPlanexOES(glClipPlanexOES_ARG_EXPAND);
typedef void (*glClipPlanexOES_PTR)(glClipPlanexOES_ARG_EXPAND);
void glColor3b(glColor3b_ARG_EXPAND);
typedef void (*glColor3b_PTR)(glColor3b_ARG_EXPAND);
void glColor3bv(glColor3bv_ARG_EXPAND);
typedef void (*glColor3bv_PTR)(glColor3bv_ARG_EXPAND);
void glColor3d(glColor3d_ARG_EXPAND);
typedef void (*glColor3d_PTR)(glColor3d_ARG_EXPAND);
void glColor3dv(glColor3dv_ARG_EXPAND);
typedef void (*glColor3dv_PTR)(glColor3dv_ARG_EXPAND);
void glColor3f(glColor3f_ARG_EXPAND);
typedef void (*glColor3f_PTR)(glColor3f_ARG_EXPAND);
void glColor3fVertex3fSUN(glColor3fVertex3fSUN_ARG_EXPAND);
typedef void (*glColor3fVertex3fSUN_PTR)(glColor3fVertex3fSUN_ARG_EXPAND);
void glColor3fVertex3fvSUN(glColor3fVertex3fvSUN_ARG_EXPAND);
typedef void (*glColor3fVertex3fvSUN_PTR)(glColor3fVertex3fvSUN_ARG_EXPAND);
void glColor3fv(glColor3fv_ARG_EXPAND);
typedef void (*glColor3fv_PTR)(glColor3fv_ARG_EXPAND);
void glColor3hNV(glColor3hNV_ARG_EXPAND);
typedef void (*glColor3hNV_PTR)(glColor3hNV_ARG_EXPAND);
void glColor3hvNV(glColor3hvNV_ARG_EXPAND);
typedef void (*glColor3hvNV_PTR)(glColor3hvNV_ARG_EXPAND);
void glColor3i(glColor3i_ARG_EXPAND);
typedef void (*glColor3i_PTR)(glColor3i_ARG_EXPAND);
void glColor3iv(glColor3iv_ARG_EXPAND);
typedef void (*glColor3iv_PTR)(glColor3iv_ARG_EXPAND);
void glColor3s(glColor3s_ARG_EXPAND);
typedef void (*glColor3s_PTR)(glColor3s_ARG_EXPAND);
void glColor3sv(glColor3sv_ARG_EXPAND);
typedef void (*glColor3sv_PTR)(glColor3sv_ARG_EXPAND);
void glColor3ub(glColor3ub_ARG_EXPAND);
typedef void (*glColor3ub_PTR)(glColor3ub_ARG_EXPAND);
void glColor3ubv(glColor3ubv_ARG_EXPAND);
typedef void (*glColor3ubv_PTR)(glColor3ubv_ARG_EXPAND);
void glColor3ui(glColor3ui_ARG_EXPAND);
typedef void (*glColor3ui_PTR)(glColor3ui_ARG_EXPAND);
void glColor3uiv(glColor3uiv_ARG_EXPAND);
typedef void (*glColor3uiv_PTR)(glColor3uiv_ARG_EXPAND);
void glColor3us(glColor3us_ARG_EXPAND);
typedef void (*glColor3us_PTR)(glColor3us_ARG_EXPAND);
void glColor3usv(glColor3usv_ARG_EXPAND);
typedef void (*glColor3usv_PTR)(glColor3usv_ARG_EXPAND);
void glColor3xOES(glColor3xOES_ARG_EXPAND);
typedef void (*glColor3xOES_PTR)(glColor3xOES_ARG_EXPAND);
void glColor3xvOES(glColor3xvOES_ARG_EXPAND);
typedef void (*glColor3xvOES_PTR)(glColor3xvOES_ARG_EXPAND);
void glColor4b(glColor4b_ARG_EXPAND);
typedef void (*glColor4b_PTR)(glColor4b_ARG_EXPAND);
void glColor4bv(glColor4bv_ARG_EXPAND);
typedef void (*glColor4bv_PTR)(glColor4bv_ARG_EXPAND);
void glColor4d(glColor4d_ARG_EXPAND);
typedef void (*glColor4d_PTR)(glColor4d_ARG_EXPAND);
void glColor4dv(glColor4dv_ARG_EXPAND);
typedef void (*glColor4dv_PTR)(glColor4dv_ARG_EXPAND);
void glColor4f(glColor4f_ARG_EXPAND);
typedef void (*glColor4f_PTR)(glColor4f_ARG_EXPAND);
void glColor4fNormal3fVertex3fSUN(glColor4fNormal3fVertex3fSUN_ARG_EXPAND);
typedef void (*glColor4fNormal3fVertex3fSUN_PTR)(glColor4fNormal3fVertex3fSUN_ARG_EXPAND);
void glColor4fNormal3fVertex3fvSUN(glColor4fNormal3fVertex3fvSUN_ARG_EXPAND);
typedef void (*glColor4fNormal3fVertex3fvSUN_PTR)(glColor4fNormal3fVertex3fvSUN_ARG_EXPAND);
void glColor4fv(glColor4fv_ARG_EXPAND);
typedef void (*glColor4fv_PTR)(glColor4fv_ARG_EXPAND);
void glColor4hNV(glColor4hNV_ARG_EXPAND);
typedef void (*glColor4hNV_PTR)(glColor4hNV_ARG_EXPAND);
void glColor4hvNV(glColor4hvNV_ARG_EXPAND);
typedef void (*glColor4hvNV_PTR)(glColor4hvNV_ARG_EXPAND);
void glColor4i(glColor4i_ARG_EXPAND);
typedef void (*glColor4i_PTR)(glColor4i_ARG_EXPAND);
void glColor4iv(glColor4iv_ARG_EXPAND);
typedef void (*glColor4iv_PTR)(glColor4iv_ARG_EXPAND);
void glColor4s(glColor4s_ARG_EXPAND);
typedef void (*glColor4s_PTR)(glColor4s_ARG_EXPAND);
void glColor4sv(glColor4sv_ARG_EXPAND);
typedef void (*glColor4sv_PTR)(glColor4sv_ARG_EXPAND);
void glColor4ub(glColor4ub_ARG_EXPAND);
typedef void (*glColor4ub_PTR)(glColor4ub_ARG_EXPAND);
void glColor4ubVertex2fSUN(glColor4ubVertex2fSUN_ARG_EXPAND);
typedef void (*glColor4ubVertex2fSUN_PTR)(glColor4ubVertex2fSUN_ARG_EXPAND);
void glColor4ubVertex2fvSUN(glColor4ubVertex2fvSUN_ARG_EXPAND);
typedef void (*glColor4ubVertex2fvSUN_PTR)(glColor4ubVertex2fvSUN_ARG_EXPAND);
void glColor4ubVertex3fSUN(glColor4ubVertex3fSUN_ARG_EXPAND);
typedef void (*glColor4ubVertex3fSUN_PTR)(glColor4ubVertex3fSUN_ARG_EXPAND);
void glColor4ubVertex3fvSUN(glColor4ubVertex3fvSUN_ARG_EXPAND);
typedef void (*glColor4ubVertex3fvSUN_PTR)(glColor4ubVertex3fvSUN_ARG_EXPAND);
void glColor4ubv(glColor4ubv_ARG_EXPAND);
typedef void (*glColor4ubv_PTR)(glColor4ubv_ARG_EXPAND);
void glColor4ui(glColor4ui_ARG_EXPAND);
typedef void (*glColor4ui_PTR)(glColor4ui_ARG_EXPAND);
void glColor4uiv(glColor4uiv_ARG_EXPAND);
typedef void (*glColor4uiv_PTR)(glColor4uiv_ARG_EXPAND);
void glColor4us(glColor4us_ARG_EXPAND);
typedef void (*glColor4us_PTR)(glColor4us_ARG_EXPAND);
void glColor4usv(glColor4usv_ARG_EXPAND);
typedef void (*glColor4usv_PTR)(glColor4usv_ARG_EXPAND);
void glColor4x(glColor4x_ARG_EXPAND);
typedef void (*glColor4x_PTR)(glColor4x_ARG_EXPAND);
void glColor4xOES(glColor4xOES_ARG_EXPAND);
typedef void (*glColor4xOES_PTR)(glColor4xOES_ARG_EXPAND);
void glColor4xvOES(glColor4xvOES_ARG_EXPAND);
typedef void (*glColor4xvOES_PTR)(glColor4xvOES_ARG_EXPAND);
void glColorFormatNV(glColorFormatNV_ARG_EXPAND);
typedef void (*glColorFormatNV_PTR)(glColorFormatNV_ARG_EXPAND);
void glColorFragmentOp1ATI(glColorFragmentOp1ATI_ARG_EXPAND);
typedef void (*glColorFragmentOp1ATI_PTR)(glColorFragmentOp1ATI_ARG_EXPAND);
void glColorFragmentOp2ATI(glColorFragmentOp2ATI_ARG_EXPAND);
typedef void (*glColorFragmentOp2ATI_PTR)(glColorFragmentOp2ATI_ARG_EXPAND);
void glColorFragmentOp3ATI(glColorFragmentOp3ATI_ARG_EXPAND);
typedef void (*glColorFragmentOp3ATI_PTR)(glColorFragmentOp3ATI_ARG_EXPAND);
void glColorMask(glColorMask_ARG_EXPAND);
typedef void (*glColorMask_PTR)(glColorMask_ARG_EXPAND);
void glColorMaskIndexedEXT(glColorMaskIndexedEXT_ARG_EXPAND);
typedef void (*glColorMaskIndexedEXT_PTR)(glColorMaskIndexedEXT_ARG_EXPAND);
void glColorMaski(glColorMaski_ARG_EXPAND);
typedef void (*glColorMaski_PTR)(glColorMaski_ARG_EXPAND);
void glColorMaterial(glColorMaterial_ARG_EXPAND);
typedef void (*glColorMaterial_PTR)(glColorMaterial_ARG_EXPAND);
void glColorP3ui(glColorP3ui_ARG_EXPAND);
typedef void (*glColorP3ui_PTR)(glColorP3ui_ARG_EXPAND);
void glColorP3uiv(glColorP3uiv_ARG_EXPAND);
typedef void (*glColorP3uiv_PTR)(glColorP3uiv_ARG_EXPAND);
void glColorP4ui(glColorP4ui_ARG_EXPAND);
typedef void (*glColorP4ui_PTR)(glColorP4ui_ARG_EXPAND);
void glColorP4uiv(glColorP4uiv_ARG_EXPAND);
typedef void (*glColorP4uiv_PTR)(glColorP4uiv_ARG_EXPAND);
void glColorPointer(glColorPointer_ARG_EXPAND);
typedef void (*glColorPointer_PTR)(glColorPointer_ARG_EXPAND);
void glColorPointerEXT(glColorPointerEXT_ARG_EXPAND);
typedef void (*glColorPointerEXT_PTR)(glColorPointerEXT_ARG_EXPAND);
void glColorPointerListIBM(glColorPointerListIBM_ARG_EXPAND);
typedef void (*glColorPointerListIBM_PTR)(glColorPointerListIBM_ARG_EXPAND);
void glColorPointervINTEL(glColorPointervINTEL_ARG_EXPAND);
typedef void (*glColorPointervINTEL_PTR)(glColorPointervINTEL_ARG_EXPAND);
void glColorSubTable(glColorSubTable_ARG_EXPAND);
typedef void (*glColorSubTable_PTR)(glColorSubTable_ARG_EXPAND);
void glColorSubTableEXT(glColorSubTableEXT_ARG_EXPAND);
typedef void (*glColorSubTableEXT_PTR)(glColorSubTableEXT_ARG_EXPAND);
void glColorTable(glColorTable_ARG_EXPAND);
typedef void (*glColorTable_PTR)(glColorTable_ARG_EXPAND);
void glColorTableEXT(glColorTableEXT_ARG_EXPAND);
typedef void (*glColorTableEXT_PTR)(glColorTableEXT_ARG_EXPAND);
void glColorTableParameterfv(glColorTableParameterfv_ARG_EXPAND);
typedef void (*glColorTableParameterfv_PTR)(glColorTableParameterfv_ARG_EXPAND);
void glColorTableParameterfvSGI(glColorTableParameterfvSGI_ARG_EXPAND);
typedef void (*glColorTableParameterfvSGI_PTR)(glColorTableParameterfvSGI_ARG_EXPAND);
void glColorTableParameteriv(glColorTableParameteriv_ARG_EXPAND);
typedef void (*glColorTableParameteriv_PTR)(glColorTableParameteriv_ARG_EXPAND);
void glColorTableParameterivSGI(glColorTableParameterivSGI_ARG_EXPAND);
typedef void (*glColorTableParameterivSGI_PTR)(glColorTableParameterivSGI_ARG_EXPAND);
void glColorTableSGI(glColorTableSGI_ARG_EXPAND);
typedef void (*glColorTableSGI_PTR)(glColorTableSGI_ARG_EXPAND);
void glCombinerInputNV(glCombinerInputNV_ARG_EXPAND);
typedef void (*glCombinerInputNV_PTR)(glCombinerInputNV_ARG_EXPAND);
void glCombinerOutputNV(glCombinerOutputNV_ARG_EXPAND);
typedef void (*glCombinerOutputNV_PTR)(glCombinerOutputNV_ARG_EXPAND);
void glCombinerParameterfNV(glCombinerParameterfNV_ARG_EXPAND);
typedef void (*glCombinerParameterfNV_PTR)(glCombinerParameterfNV_ARG_EXPAND);
void glCombinerParameterfvNV(glCombinerParameterfvNV_ARG_EXPAND);
typedef void (*glCombinerParameterfvNV_PTR)(glCombinerParameterfvNV_ARG_EXPAND);
void glCombinerParameteriNV(glCombinerParameteriNV_ARG_EXPAND);
typedef void (*glCombinerParameteriNV_PTR)(glCombinerParameteriNV_ARG_EXPAND);
void glCombinerParameterivNV(glCombinerParameterivNV_ARG_EXPAND);
typedef void (*glCombinerParameterivNV_PTR)(glCombinerParameterivNV_ARG_EXPAND);
void glCombinerStageParameterfvNV(glCombinerStageParameterfvNV_ARG_EXPAND);
typedef void (*glCombinerStageParameterfvNV_PTR)(glCombinerStageParameterfvNV_ARG_EXPAND);
void glCompileShader(glCompileShader_ARG_EXPAND);
typedef void (*glCompileShader_PTR)(glCompileShader_ARG_EXPAND);
void glCompileShaderARB(glCompileShaderARB_ARG_EXPAND);
typedef void (*glCompileShaderARB_PTR)(glCompileShaderARB_ARG_EXPAND);
void glCompileShaderIncludeARB(glCompileShaderIncludeARB_ARG_EXPAND);
typedef void (*glCompileShaderIncludeARB_PTR)(glCompileShaderIncludeARB_ARG_EXPAND);
void glCompressedMultiTexImage1DEXT(glCompressedMultiTexImage1DEXT_ARG_EXPAND);
typedef void (*glCompressedMultiTexImage1DEXT_PTR)(glCompressedMultiTexImage1DEXT_ARG_EXPAND);
void glCompressedMultiTexImage2DEXT(glCompressedMultiTexImage2DEXT_ARG_EXPAND);
typedef void (*glCompressedMultiTexImage2DEXT_PTR)(glCompressedMultiTexImage2DEXT_ARG_EXPAND);
void glCompressedMultiTexImage3DEXT(glCompressedMultiTexImage3DEXT_ARG_EXPAND);
typedef void (*glCompressedMultiTexImage3DEXT_PTR)(glCompressedMultiTexImage3DEXT_ARG_EXPAND);
void glCompressedMultiTexSubImage1DEXT(glCompressedMultiTexSubImage1DEXT_ARG_EXPAND);
typedef void (*glCompressedMultiTexSubImage1DEXT_PTR)(glCompressedMultiTexSubImage1DEXT_ARG_EXPAND);
void glCompressedMultiTexSubImage2DEXT(glCompressedMultiTexSubImage2DEXT_ARG_EXPAND);
typedef void (*glCompressedMultiTexSubImage2DEXT_PTR)(glCompressedMultiTexSubImage2DEXT_ARG_EXPAND);
void glCompressedMultiTexSubImage3DEXT(glCompressedMultiTexSubImage3DEXT_ARG_EXPAND);
typedef void (*glCompressedMultiTexSubImage3DEXT_PTR)(glCompressedMultiTexSubImage3DEXT_ARG_EXPAND);
void glCompressedTexImage1D(glCompressedTexImage1D_ARG_EXPAND);
typedef void (*glCompressedTexImage1D_PTR)(glCompressedTexImage1D_ARG_EXPAND);
void glCompressedTexImage1DARB(glCompressedTexImage1DARB_ARG_EXPAND);
typedef void (*glCompressedTexImage1DARB_PTR)(glCompressedTexImage1DARB_ARG_EXPAND);
void glCompressedTexImage2D(glCompressedTexImage2D_ARG_EXPAND);
typedef void (*glCompressedTexImage2D_PTR)(glCompressedTexImage2D_ARG_EXPAND);
void glCompressedTexImage2DARB(glCompressedTexImage2DARB_ARG_EXPAND);
typedef void (*glCompressedTexImage2DARB_PTR)(glCompressedTexImage2DARB_ARG_EXPAND);
void glCompressedTexImage3D(glCompressedTexImage3D_ARG_EXPAND);
typedef void (*glCompressedTexImage3D_PTR)(glCompressedTexImage3D_ARG_EXPAND);
void glCompressedTexImage3DARB(glCompressedTexImage3DARB_ARG_EXPAND);
typedef void (*glCompressedTexImage3DARB_PTR)(glCompressedTexImage3DARB_ARG_EXPAND);
void glCompressedTexSubImage1D(glCompressedTexSubImage1D_ARG_EXPAND);
typedef void (*glCompressedTexSubImage1D_PTR)(glCompressedTexSubImage1D_ARG_EXPAND);
void glCompressedTexSubImage1DARB(glCompressedTexSubImage1DARB_ARG_EXPAND);
typedef void (*glCompressedTexSubImage1DARB_PTR)(glCompressedTexSubImage1DARB_ARG_EXPAND);
void glCompressedTexSubImage2D(glCompressedTexSubImage2D_ARG_EXPAND);
typedef void (*glCompressedTexSubImage2D_PTR)(glCompressedTexSubImage2D_ARG_EXPAND);
void glCompressedTexSubImage2DARB(glCompressedTexSubImage2DARB_ARG_EXPAND);
typedef void (*glCompressedTexSubImage2DARB_PTR)(glCompressedTexSubImage2DARB_ARG_EXPAND);
void glCompressedTexSubImage3D(glCompressedTexSubImage3D_ARG_EXPAND);
typedef void (*glCompressedTexSubImage3D_PTR)(glCompressedTexSubImage3D_ARG_EXPAND);
void glCompressedTexSubImage3DARB(glCompressedTexSubImage3DARB_ARG_EXPAND);
typedef void (*glCompressedTexSubImage3DARB_PTR)(glCompressedTexSubImage3DARB_ARG_EXPAND);
void glCompressedTextureImage1DEXT(glCompressedTextureImage1DEXT_ARG_EXPAND);
typedef void (*glCompressedTextureImage1DEXT_PTR)(glCompressedTextureImage1DEXT_ARG_EXPAND);
void glCompressedTextureImage2DEXT(glCompressedTextureImage2DEXT_ARG_EXPAND);
typedef void (*glCompressedTextureImage2DEXT_PTR)(glCompressedTextureImage2DEXT_ARG_EXPAND);
void glCompressedTextureImage3DEXT(glCompressedTextureImage3DEXT_ARG_EXPAND);
typedef void (*glCompressedTextureImage3DEXT_PTR)(glCompressedTextureImage3DEXT_ARG_EXPAND);
void glCompressedTextureSubImage1DEXT(glCompressedTextureSubImage1DEXT_ARG_EXPAND);
typedef void (*glCompressedTextureSubImage1DEXT_PTR)(glCompressedTextureSubImage1DEXT_ARG_EXPAND);
void glCompressedTextureSubImage2DEXT(glCompressedTextureSubImage2DEXT_ARG_EXPAND);
typedef void (*glCompressedTextureSubImage2DEXT_PTR)(glCompressedTextureSubImage2DEXT_ARG_EXPAND);
void glCompressedTextureSubImage3DEXT(glCompressedTextureSubImage3DEXT_ARG_EXPAND);
typedef void (*glCompressedTextureSubImage3DEXT_PTR)(glCompressedTextureSubImage3DEXT_ARG_EXPAND);
void glConvolutionFilter1D(glConvolutionFilter1D_ARG_EXPAND);
typedef void (*glConvolutionFilter1D_PTR)(glConvolutionFilter1D_ARG_EXPAND);
void glConvolutionFilter1DEXT(glConvolutionFilter1DEXT_ARG_EXPAND);
typedef void (*glConvolutionFilter1DEXT_PTR)(glConvolutionFilter1DEXT_ARG_EXPAND);
void glConvolutionFilter2D(glConvolutionFilter2D_ARG_EXPAND);
typedef void (*glConvolutionFilter2D_PTR)(glConvolutionFilter2D_ARG_EXPAND);
void glConvolutionFilter2DEXT(glConvolutionFilter2DEXT_ARG_EXPAND);
typedef void (*glConvolutionFilter2DEXT_PTR)(glConvolutionFilter2DEXT_ARG_EXPAND);
void glConvolutionParameterf(glConvolutionParameterf_ARG_EXPAND);
typedef void (*glConvolutionParameterf_PTR)(glConvolutionParameterf_ARG_EXPAND);
void glConvolutionParameterfEXT(glConvolutionParameterfEXT_ARG_EXPAND);
typedef void (*glConvolutionParameterfEXT_PTR)(glConvolutionParameterfEXT_ARG_EXPAND);
void glConvolutionParameterfv(glConvolutionParameterfv_ARG_EXPAND);
typedef void (*glConvolutionParameterfv_PTR)(glConvolutionParameterfv_ARG_EXPAND);
void glConvolutionParameterfvEXT(glConvolutionParameterfvEXT_ARG_EXPAND);
typedef void (*glConvolutionParameterfvEXT_PTR)(glConvolutionParameterfvEXT_ARG_EXPAND);
void glConvolutionParameteri(glConvolutionParameteri_ARG_EXPAND);
typedef void (*glConvolutionParameteri_PTR)(glConvolutionParameteri_ARG_EXPAND);
void glConvolutionParameteriEXT(glConvolutionParameteriEXT_ARG_EXPAND);
typedef void (*glConvolutionParameteriEXT_PTR)(glConvolutionParameteriEXT_ARG_EXPAND);
void glConvolutionParameteriv(glConvolutionParameteriv_ARG_EXPAND);
typedef void (*glConvolutionParameteriv_PTR)(glConvolutionParameteriv_ARG_EXPAND);
void glConvolutionParameterivEXT(glConvolutionParameterivEXT_ARG_EXPAND);
typedef void (*glConvolutionParameterivEXT_PTR)(glConvolutionParameterivEXT_ARG_EXPAND);
void glConvolutionParameterxOES(glConvolutionParameterxOES_ARG_EXPAND);
typedef void (*glConvolutionParameterxOES_PTR)(glConvolutionParameterxOES_ARG_EXPAND);
void glConvolutionParameterxvOES(glConvolutionParameterxvOES_ARG_EXPAND);
typedef void (*glConvolutionParameterxvOES_PTR)(glConvolutionParameterxvOES_ARG_EXPAND);
void glCopyBufferSubData(glCopyBufferSubData_ARG_EXPAND);
typedef void (*glCopyBufferSubData_PTR)(glCopyBufferSubData_ARG_EXPAND);
void glCopyColorSubTable(glCopyColorSubTable_ARG_EXPAND);
typedef void (*glCopyColorSubTable_PTR)(glCopyColorSubTable_ARG_EXPAND);
void glCopyColorSubTableEXT(glCopyColorSubTableEXT_ARG_EXPAND);
typedef void (*glCopyColorSubTableEXT_PTR)(glCopyColorSubTableEXT_ARG_EXPAND);
void glCopyColorTable(glCopyColorTable_ARG_EXPAND);
typedef void (*glCopyColorTable_PTR)(glCopyColorTable_ARG_EXPAND);
void glCopyColorTableSGI(glCopyColorTableSGI_ARG_EXPAND);
typedef void (*glCopyColorTableSGI_PTR)(glCopyColorTableSGI_ARG_EXPAND);
void glCopyConvolutionFilter1D(glCopyConvolutionFilter1D_ARG_EXPAND);
typedef void (*glCopyConvolutionFilter1D_PTR)(glCopyConvolutionFilter1D_ARG_EXPAND);
void glCopyConvolutionFilter1DEXT(glCopyConvolutionFilter1DEXT_ARG_EXPAND);
typedef void (*glCopyConvolutionFilter1DEXT_PTR)(glCopyConvolutionFilter1DEXT_ARG_EXPAND);
void glCopyConvolutionFilter2D(glCopyConvolutionFilter2D_ARG_EXPAND);
typedef void (*glCopyConvolutionFilter2D_PTR)(glCopyConvolutionFilter2D_ARG_EXPAND);
void glCopyConvolutionFilter2DEXT(glCopyConvolutionFilter2DEXT_ARG_EXPAND);
typedef void (*glCopyConvolutionFilter2DEXT_PTR)(glCopyConvolutionFilter2DEXT_ARG_EXPAND);
void glCopyImageSubData(glCopyImageSubData_ARG_EXPAND);
typedef void (*glCopyImageSubData_PTR)(glCopyImageSubData_ARG_EXPAND);
void glCopyImageSubDataNV(glCopyImageSubDataNV_ARG_EXPAND);
typedef void (*glCopyImageSubDataNV_PTR)(glCopyImageSubDataNV_ARG_EXPAND);
void glCopyMultiTexImage1DEXT(glCopyMultiTexImage1DEXT_ARG_EXPAND);
typedef void (*glCopyMultiTexImage1DEXT_PTR)(glCopyMultiTexImage1DEXT_ARG_EXPAND);
void glCopyMultiTexImage2DEXT(glCopyMultiTexImage2DEXT_ARG_EXPAND);
typedef void (*glCopyMultiTexImage2DEXT_PTR)(glCopyMultiTexImage2DEXT_ARG_EXPAND);
void glCopyMultiTexSubImage1DEXT(glCopyMultiTexSubImage1DEXT_ARG_EXPAND);
typedef void (*glCopyMultiTexSubImage1DEXT_PTR)(glCopyMultiTexSubImage1DEXT_ARG_EXPAND);
void glCopyMultiTexSubImage2DEXT(glCopyMultiTexSubImage2DEXT_ARG_EXPAND);
typedef void (*glCopyMultiTexSubImage2DEXT_PTR)(glCopyMultiTexSubImage2DEXT_ARG_EXPAND);
void glCopyMultiTexSubImage3DEXT(glCopyMultiTexSubImage3DEXT_ARG_EXPAND);
typedef void (*glCopyMultiTexSubImage3DEXT_PTR)(glCopyMultiTexSubImage3DEXT_ARG_EXPAND);
void glCopyPathNV(glCopyPathNV_ARG_EXPAND);
typedef void (*glCopyPathNV_PTR)(glCopyPathNV_ARG_EXPAND);
void glCopyPixels(glCopyPixels_ARG_EXPAND);
typedef void (*glCopyPixels_PTR)(glCopyPixels_ARG_EXPAND);
void glCopyTexImage1D(glCopyTexImage1D_ARG_EXPAND);
typedef void (*glCopyTexImage1D_PTR)(glCopyTexImage1D_ARG_EXPAND);
void glCopyTexImage1DEXT(glCopyTexImage1DEXT_ARG_EXPAND);
typedef void (*glCopyTexImage1DEXT_PTR)(glCopyTexImage1DEXT_ARG_EXPAND);
void glCopyTexImage2D(glCopyTexImage2D_ARG_EXPAND);
typedef void (*glCopyTexImage2D_PTR)(glCopyTexImage2D_ARG_EXPAND);
void glCopyTexImage2DEXT(glCopyTexImage2DEXT_ARG_EXPAND);
typedef void (*glCopyTexImage2DEXT_PTR)(glCopyTexImage2DEXT_ARG_EXPAND);
void glCopyTexSubImage1D(glCopyTexSubImage1D_ARG_EXPAND);
typedef void (*glCopyTexSubImage1D_PTR)(glCopyTexSubImage1D_ARG_EXPAND);
void glCopyTexSubImage1DEXT(glCopyTexSubImage1DEXT_ARG_EXPAND);
typedef void (*glCopyTexSubImage1DEXT_PTR)(glCopyTexSubImage1DEXT_ARG_EXPAND);
void glCopyTexSubImage2D(glCopyTexSubImage2D_ARG_EXPAND);
typedef void (*glCopyTexSubImage2D_PTR)(glCopyTexSubImage2D_ARG_EXPAND);
void glCopyTexSubImage2DEXT(glCopyTexSubImage2DEXT_ARG_EXPAND);
typedef void (*glCopyTexSubImage2DEXT_PTR)(glCopyTexSubImage2DEXT_ARG_EXPAND);
void glCopyTexSubImage3D(glCopyTexSubImage3D_ARG_EXPAND);
typedef void (*glCopyTexSubImage3D_PTR)(glCopyTexSubImage3D_ARG_EXPAND);
void glCopyTexSubImage3DEXT(glCopyTexSubImage3DEXT_ARG_EXPAND);
typedef void (*glCopyTexSubImage3DEXT_PTR)(glCopyTexSubImage3DEXT_ARG_EXPAND);
void glCopyTextureImage1DEXT(glCopyTextureImage1DEXT_ARG_EXPAND);
typedef void (*glCopyTextureImage1DEXT_PTR)(glCopyTextureImage1DEXT_ARG_EXPAND);
void glCopyTextureImage2DEXT(glCopyTextureImage2DEXT_ARG_EXPAND);
typedef void (*glCopyTextureImage2DEXT_PTR)(glCopyTextureImage2DEXT_ARG_EXPAND);
void glCopyTextureSubImage1DEXT(glCopyTextureSubImage1DEXT_ARG_EXPAND);
typedef void (*glCopyTextureSubImage1DEXT_PTR)(glCopyTextureSubImage1DEXT_ARG_EXPAND);
void glCopyTextureSubImage2DEXT(glCopyTextureSubImage2DEXT_ARG_EXPAND);
typedef void (*glCopyTextureSubImage2DEXT_PTR)(glCopyTextureSubImage2DEXT_ARG_EXPAND);
void glCopyTextureSubImage3DEXT(glCopyTextureSubImage3DEXT_ARG_EXPAND);
typedef void (*glCopyTextureSubImage3DEXT_PTR)(glCopyTextureSubImage3DEXT_ARG_EXPAND);
void glCoverFillPathInstancedNV(glCoverFillPathInstancedNV_ARG_EXPAND);
typedef void (*glCoverFillPathInstancedNV_PTR)(glCoverFillPathInstancedNV_ARG_EXPAND);
void glCoverFillPathNV(glCoverFillPathNV_ARG_EXPAND);
typedef void (*glCoverFillPathNV_PTR)(glCoverFillPathNV_ARG_EXPAND);
void glCoverStrokePathInstancedNV(glCoverStrokePathInstancedNV_ARG_EXPAND);
typedef void (*glCoverStrokePathInstancedNV_PTR)(glCoverStrokePathInstancedNV_ARG_EXPAND);
void glCoverStrokePathNV(glCoverStrokePathNV_ARG_EXPAND);
typedef void (*glCoverStrokePathNV_PTR)(glCoverStrokePathNV_ARG_EXPAND);
GLuint glCreateProgram(glCreateProgram_ARG_EXPAND);
typedef GLuint (*glCreateProgram_PTR)(glCreateProgram_ARG_EXPAND);
GLhandleARB glCreateProgramObjectARB(glCreateProgramObjectARB_ARG_EXPAND);
typedef GLhandleARB (*glCreateProgramObjectARB_PTR)(glCreateProgramObjectARB_ARG_EXPAND);
GLuint glCreateShader(glCreateShader_ARG_EXPAND);
typedef GLuint (*glCreateShader_PTR)(glCreateShader_ARG_EXPAND);
GLhandleARB glCreateShaderObjectARB(glCreateShaderObjectARB_ARG_EXPAND);
typedef GLhandleARB (*glCreateShaderObjectARB_PTR)(glCreateShaderObjectARB_ARG_EXPAND);
GLuint glCreateShaderProgramEXT(glCreateShaderProgramEXT_ARG_EXPAND);
typedef GLuint (*glCreateShaderProgramEXT_PTR)(glCreateShaderProgramEXT_ARG_EXPAND);
GLuint glCreateShaderProgramv(glCreateShaderProgramv_ARG_EXPAND);
typedef GLuint (*glCreateShaderProgramv_PTR)(glCreateShaderProgramv_ARG_EXPAND);
GLsync glCreateSyncFromCLeventARB(glCreateSyncFromCLeventARB_ARG_EXPAND);
typedef GLsync (*glCreateSyncFromCLeventARB_PTR)(glCreateSyncFromCLeventARB_ARG_EXPAND);
void glCullFace(glCullFace_ARG_EXPAND);
typedef void (*glCullFace_PTR)(glCullFace_ARG_EXPAND);
void glCullParameterdvEXT(glCullParameterdvEXT_ARG_EXPAND);
typedef void (*glCullParameterdvEXT_PTR)(glCullParameterdvEXT_ARG_EXPAND);
void glCullParameterfvEXT(glCullParameterfvEXT_ARG_EXPAND);
typedef void (*glCullParameterfvEXT_PTR)(glCullParameterfvEXT_ARG_EXPAND);
void glCurrentPaletteMatrixARB(glCurrentPaletteMatrixARB_ARG_EXPAND);
typedef void (*glCurrentPaletteMatrixARB_PTR)(glCurrentPaletteMatrixARB_ARG_EXPAND);
void glDebugMessageCallback(glDebugMessageCallback_ARG_EXPAND);
typedef void (*glDebugMessageCallback_PTR)(glDebugMessageCallback_ARG_EXPAND);
void glDebugMessageCallbackAMD(glDebugMessageCallbackAMD_ARG_EXPAND);
typedef void (*glDebugMessageCallbackAMD_PTR)(glDebugMessageCallbackAMD_ARG_EXPAND);
void glDebugMessageCallbackARB(glDebugMessageCallbackARB_ARG_EXPAND);
typedef void (*glDebugMessageCallbackARB_PTR)(glDebugMessageCallbackARB_ARG_EXPAND);
void glDebugMessageControl(glDebugMessageControl_ARG_EXPAND);
typedef void (*glDebugMessageControl_PTR)(glDebugMessageControl_ARG_EXPAND);
void glDebugMessageControlARB(glDebugMessageControlARB_ARG_EXPAND);
typedef void (*glDebugMessageControlARB_PTR)(glDebugMessageControlARB_ARG_EXPAND);
void glDebugMessageEnableAMD(glDebugMessageEnableAMD_ARG_EXPAND);
typedef void (*glDebugMessageEnableAMD_PTR)(glDebugMessageEnableAMD_ARG_EXPAND);
void glDebugMessageInsert(glDebugMessageInsert_ARG_EXPAND);
typedef void (*glDebugMessageInsert_PTR)(glDebugMessageInsert_ARG_EXPAND);
void glDebugMessageInsertAMD(glDebugMessageInsertAMD_ARG_EXPAND);
typedef void (*glDebugMessageInsertAMD_PTR)(glDebugMessageInsertAMD_ARG_EXPAND);
void glDebugMessageInsertARB(glDebugMessageInsertARB_ARG_EXPAND);
typedef void (*glDebugMessageInsertARB_PTR)(glDebugMessageInsertARB_ARG_EXPAND);
void glDeformSGIX(glDeformSGIX_ARG_EXPAND);
typedef void (*glDeformSGIX_PTR)(glDeformSGIX_ARG_EXPAND);
void glDeformationMap3dSGIX(glDeformationMap3dSGIX_ARG_EXPAND);
typedef void (*glDeformationMap3dSGIX_PTR)(glDeformationMap3dSGIX_ARG_EXPAND);
void glDeformationMap3fSGIX(glDeformationMap3fSGIX_ARG_EXPAND);
typedef void (*glDeformationMap3fSGIX_PTR)(glDeformationMap3fSGIX_ARG_EXPAND);
void glDeleteAsyncMarkersSGIX(glDeleteAsyncMarkersSGIX_ARG_EXPAND);
typedef void (*glDeleteAsyncMarkersSGIX_PTR)(glDeleteAsyncMarkersSGIX_ARG_EXPAND);
void glDeleteBuffers(glDeleteBuffers_ARG_EXPAND);
typedef void (*glDeleteBuffers_PTR)(glDeleteBuffers_ARG_EXPAND);
void glDeleteBuffersARB(glDeleteBuffersARB_ARG_EXPAND);
typedef void (*glDeleteBuffersARB_PTR)(glDeleteBuffersARB_ARG_EXPAND);
void glDeleteFencesAPPLE(glDeleteFencesAPPLE_ARG_EXPAND);
typedef void (*glDeleteFencesAPPLE_PTR)(glDeleteFencesAPPLE_ARG_EXPAND);
void glDeleteFencesNV(glDeleteFencesNV_ARG_EXPAND);
typedef void (*glDeleteFencesNV_PTR)(glDeleteFencesNV_ARG_EXPAND);
void glDeleteFragmentShaderATI(glDeleteFragmentShaderATI_ARG_EXPAND);
typedef void (*glDeleteFragmentShaderATI_PTR)(glDeleteFragmentShaderATI_ARG_EXPAND);
void glDeleteFramebuffers(glDeleteFramebuffers_ARG_EXPAND);
typedef void (*glDeleteFramebuffers_PTR)(glDeleteFramebuffers_ARG_EXPAND);
void glDeleteFramebuffersEXT(glDeleteFramebuffersEXT_ARG_EXPAND);
typedef void (*glDeleteFramebuffersEXT_PTR)(glDeleteFramebuffersEXT_ARG_EXPAND);
void glDeleteLists(glDeleteLists_ARG_EXPAND);
typedef void (*glDeleteLists_PTR)(glDeleteLists_ARG_EXPAND);
void glDeleteNamedStringARB(glDeleteNamedStringARB_ARG_EXPAND);
typedef void (*glDeleteNamedStringARB_PTR)(glDeleteNamedStringARB_ARG_EXPAND);
void glDeleteNamesAMD(glDeleteNamesAMD_ARG_EXPAND);
typedef void (*glDeleteNamesAMD_PTR)(glDeleteNamesAMD_ARG_EXPAND);
void glDeleteObjectARB(glDeleteObjectARB_ARG_EXPAND);
typedef void (*glDeleteObjectARB_PTR)(glDeleteObjectARB_ARG_EXPAND);
void glDeleteOcclusionQueriesNV(glDeleteOcclusionQueriesNV_ARG_EXPAND);
typedef void (*glDeleteOcclusionQueriesNV_PTR)(glDeleteOcclusionQueriesNV_ARG_EXPAND);
void glDeletePathsNV(glDeletePathsNV_ARG_EXPAND);
typedef void (*glDeletePathsNV_PTR)(glDeletePathsNV_ARG_EXPAND);
void glDeletePerfMonitorsAMD(glDeletePerfMonitorsAMD_ARG_EXPAND);
typedef void (*glDeletePerfMonitorsAMD_PTR)(glDeletePerfMonitorsAMD_ARG_EXPAND);
void glDeleteProgram(glDeleteProgram_ARG_EXPAND);
typedef void (*glDeleteProgram_PTR)(glDeleteProgram_ARG_EXPAND);
void glDeleteProgramPipelines(glDeleteProgramPipelines_ARG_EXPAND);
typedef void (*glDeleteProgramPipelines_PTR)(glDeleteProgramPipelines_ARG_EXPAND);
void glDeleteProgramsARB(glDeleteProgramsARB_ARG_EXPAND);
typedef void (*glDeleteProgramsARB_PTR)(glDeleteProgramsARB_ARG_EXPAND);
void glDeleteProgramsNV(glDeleteProgramsNV_ARG_EXPAND);
typedef void (*glDeleteProgramsNV_PTR)(glDeleteProgramsNV_ARG_EXPAND);
void glDeleteQueries(glDeleteQueries_ARG_EXPAND);
typedef void (*glDeleteQueries_PTR)(glDeleteQueries_ARG_EXPAND);
void glDeleteQueriesARB(glDeleteQueriesARB_ARG_EXPAND);
typedef void (*glDeleteQueriesARB_PTR)(glDeleteQueriesARB_ARG_EXPAND);
void glDeleteRenderbuffers(glDeleteRenderbuffers_ARG_EXPAND);
typedef void (*glDeleteRenderbuffers_PTR)(glDeleteRenderbuffers_ARG_EXPAND);
void glDeleteRenderbuffersEXT(glDeleteRenderbuffersEXT_ARG_EXPAND);
typedef void (*glDeleteRenderbuffersEXT_PTR)(glDeleteRenderbuffersEXT_ARG_EXPAND);
void glDeleteSamplers(glDeleteSamplers_ARG_EXPAND);
typedef void (*glDeleteSamplers_PTR)(glDeleteSamplers_ARG_EXPAND);
void glDeleteShader(glDeleteShader_ARG_EXPAND);
typedef void (*glDeleteShader_PTR)(glDeleteShader_ARG_EXPAND);
void glDeleteSync(glDeleteSync_ARG_EXPAND);
typedef void (*glDeleteSync_PTR)(glDeleteSync_ARG_EXPAND);
void glDeleteTextures(glDeleteTextures_ARG_EXPAND);
typedef void (*glDeleteTextures_PTR)(glDeleteTextures_ARG_EXPAND);
void glDeleteTexturesEXT(glDeleteTexturesEXT_ARG_EXPAND);
typedef void (*glDeleteTexturesEXT_PTR)(glDeleteTexturesEXT_ARG_EXPAND);
void glDeleteTransformFeedbacks(glDeleteTransformFeedbacks_ARG_EXPAND);
typedef void (*glDeleteTransformFeedbacks_PTR)(glDeleteTransformFeedbacks_ARG_EXPAND);
void glDeleteTransformFeedbacksNV(glDeleteTransformFeedbacksNV_ARG_EXPAND);
typedef void (*glDeleteTransformFeedbacksNV_PTR)(glDeleteTransformFeedbacksNV_ARG_EXPAND);
void glDeleteVertexArrays(glDeleteVertexArrays_ARG_EXPAND);
typedef void (*glDeleteVertexArrays_PTR)(glDeleteVertexArrays_ARG_EXPAND);
void glDeleteVertexArraysAPPLE(glDeleteVertexArraysAPPLE_ARG_EXPAND);
typedef void (*glDeleteVertexArraysAPPLE_PTR)(glDeleteVertexArraysAPPLE_ARG_EXPAND);
void glDeleteVertexShaderEXT(glDeleteVertexShaderEXT_ARG_EXPAND);
typedef void (*glDeleteVertexShaderEXT_PTR)(glDeleteVertexShaderEXT_ARG_EXPAND);
void glDepthBoundsEXT(glDepthBoundsEXT_ARG_EXPAND);
typedef void (*glDepthBoundsEXT_PTR)(glDepthBoundsEXT_ARG_EXPAND);
void glDepthBoundsdNV(glDepthBoundsdNV_ARG_EXPAND);
typedef void (*glDepthBoundsdNV_PTR)(glDepthBoundsdNV_ARG_EXPAND);
void glDepthFunc(glDepthFunc_ARG_EXPAND);
typedef void (*glDepthFunc_PTR)(glDepthFunc_ARG_EXPAND);
void glDepthMask(glDepthMask_ARG_EXPAND);
typedef void (*glDepthMask_PTR)(glDepthMask_ARG_EXPAND);
void glDepthRange(glDepthRange_ARG_EXPAND);
typedef void (*glDepthRange_PTR)(glDepthRange_ARG_EXPAND);
void glDepthRangeArrayv(glDepthRangeArrayv_ARG_EXPAND);
typedef void (*glDepthRangeArrayv_PTR)(glDepthRangeArrayv_ARG_EXPAND);
void glDepthRangeIndexed(glDepthRangeIndexed_ARG_EXPAND);
typedef void (*glDepthRangeIndexed_PTR)(glDepthRangeIndexed_ARG_EXPAND);
void glDepthRangedNV(glDepthRangedNV_ARG_EXPAND);
typedef void (*glDepthRangedNV_PTR)(glDepthRangedNV_ARG_EXPAND);
void glDepthRangef(glDepthRangef_ARG_EXPAND);
typedef void (*glDepthRangef_PTR)(glDepthRangef_ARG_EXPAND);
void glDepthRangefOES(glDepthRangefOES_ARG_EXPAND);
typedef void (*glDepthRangefOES_PTR)(glDepthRangefOES_ARG_EXPAND);
void glDepthRangex(glDepthRangex_ARG_EXPAND);
typedef void (*glDepthRangex_PTR)(glDepthRangex_ARG_EXPAND);
void glDepthRangexOES(glDepthRangexOES_ARG_EXPAND);
typedef void (*glDepthRangexOES_PTR)(glDepthRangexOES_ARG_EXPAND);
void glDetachObjectARB(glDetachObjectARB_ARG_EXPAND);
typedef void (*glDetachObjectARB_PTR)(glDetachObjectARB_ARG_EXPAND);
void glDetachShader(glDetachShader_ARG_EXPAND);
typedef void (*glDetachShader_PTR)(glDetachShader_ARG_EXPAND);
void glDetailTexFuncSGIS(glDetailTexFuncSGIS_ARG_EXPAND);
typedef void (*glDetailTexFuncSGIS_PTR)(glDetailTexFuncSGIS_ARG_EXPAND);
void glDisable(glDisable_ARG_EXPAND);
typedef void (*glDisable_PTR)(glDisable_ARG_EXPAND);
void glDisableClientState(glDisableClientState_ARG_EXPAND);
typedef void (*glDisableClientState_PTR)(glDisableClientState_ARG_EXPAND);
void glDisableClientStateIndexedEXT(glDisableClientStateIndexedEXT_ARG_EXPAND);
typedef void (*glDisableClientStateIndexedEXT_PTR)(glDisableClientStateIndexedEXT_ARG_EXPAND);
void glDisableClientStateiEXT(glDisableClientStateiEXT_ARG_EXPAND);
typedef void (*glDisableClientStateiEXT_PTR)(glDisableClientStateiEXT_ARG_EXPAND);
void glDisableIndexedEXT(glDisableIndexedEXT_ARG_EXPAND);
typedef void (*glDisableIndexedEXT_PTR)(glDisableIndexedEXT_ARG_EXPAND);
void glDisableVariantClientStateEXT(glDisableVariantClientStateEXT_ARG_EXPAND);
typedef void (*glDisableVariantClientStateEXT_PTR)(glDisableVariantClientStateEXT_ARG_EXPAND);
void glDisableVertexArrayAttribEXT(glDisableVertexArrayAttribEXT_ARG_EXPAND);
typedef void (*glDisableVertexArrayAttribEXT_PTR)(glDisableVertexArrayAttribEXT_ARG_EXPAND);
void glDisableVertexArrayEXT(glDisableVertexArrayEXT_ARG_EXPAND);
typedef void (*glDisableVertexArrayEXT_PTR)(glDisableVertexArrayEXT_ARG_EXPAND);
void glDisableVertexAttribAPPLE(glDisableVertexAttribAPPLE_ARG_EXPAND);
typedef void (*glDisableVertexAttribAPPLE_PTR)(glDisableVertexAttribAPPLE_ARG_EXPAND);
void glDisableVertexAttribArray(glDisableVertexAttribArray_ARG_EXPAND);
typedef void (*glDisableVertexAttribArray_PTR)(glDisableVertexAttribArray_ARG_EXPAND);
void glDisableVertexAttribArrayARB(glDisableVertexAttribArrayARB_ARG_EXPAND);
typedef void (*glDisableVertexAttribArrayARB_PTR)(glDisableVertexAttribArrayARB_ARG_EXPAND);
void glDisablei(glDisablei_ARG_EXPAND);
typedef void (*glDisablei_PTR)(glDisablei_ARG_EXPAND);
void glDispatchCompute(glDispatchCompute_ARG_EXPAND);
typedef void (*glDispatchCompute_PTR)(glDispatchCompute_ARG_EXPAND);
void glDispatchComputeIndirect(glDispatchComputeIndirect_ARG_EXPAND);
typedef void (*glDispatchComputeIndirect_PTR)(glDispatchComputeIndirect_ARG_EXPAND);
void glDrawArrays(glDrawArrays_ARG_EXPAND);
typedef void (*glDrawArrays_PTR)(glDrawArrays_ARG_EXPAND);
void glDrawArraysEXT(glDrawArraysEXT_ARG_EXPAND);
typedef void (*glDrawArraysEXT_PTR)(glDrawArraysEXT_ARG_EXPAND);
void glDrawArraysIndirect(glDrawArraysIndirect_ARG_EXPAND);
typedef void (*glDrawArraysIndirect_PTR)(glDrawArraysIndirect_ARG_EXPAND);
void glDrawArraysInstanced(glDrawArraysInstanced_ARG_EXPAND);
typedef void (*glDrawArraysInstanced_PTR)(glDrawArraysInstanced_ARG_EXPAND);
void glDrawArraysInstancedARB(glDrawArraysInstancedARB_ARG_EXPAND);
typedef void (*glDrawArraysInstancedARB_PTR)(glDrawArraysInstancedARB_ARG_EXPAND);
void glDrawArraysInstancedBaseInstance(glDrawArraysInstancedBaseInstance_ARG_EXPAND);
typedef void (*glDrawArraysInstancedBaseInstance_PTR)(glDrawArraysInstancedBaseInstance_ARG_EXPAND);
void glDrawArraysInstancedEXT(glDrawArraysInstancedEXT_ARG_EXPAND);
typedef void (*glDrawArraysInstancedEXT_PTR)(glDrawArraysInstancedEXT_ARG_EXPAND);
void glDrawBuffer(glDrawBuffer_ARG_EXPAND);
typedef void (*glDrawBuffer_PTR)(glDrawBuffer_ARG_EXPAND);
void glDrawBuffers(glDrawBuffers_ARG_EXPAND);
typedef void (*glDrawBuffers_PTR)(glDrawBuffers_ARG_EXPAND);
void glDrawBuffersARB(glDrawBuffersARB_ARG_EXPAND);
typedef void (*glDrawBuffersARB_PTR)(glDrawBuffersARB_ARG_EXPAND);
void glDrawBuffersATI(glDrawBuffersATI_ARG_EXPAND);
typedef void (*glDrawBuffersATI_PTR)(glDrawBuffersATI_ARG_EXPAND);
void glDrawElementArrayAPPLE(glDrawElementArrayAPPLE_ARG_EXPAND);
typedef void (*glDrawElementArrayAPPLE_PTR)(glDrawElementArrayAPPLE_ARG_EXPAND);
void glDrawElementArrayATI(glDrawElementArrayATI_ARG_EXPAND);
typedef void (*glDrawElementArrayATI_PTR)(glDrawElementArrayATI_ARG_EXPAND);
void glDrawElements(glDrawElements_ARG_EXPAND);
typedef void (*glDrawElements_PTR)(glDrawElements_ARG_EXPAND);
void glDrawElementsBaseVertex(glDrawElementsBaseVertex_ARG_EXPAND);
typedef void (*glDrawElementsBaseVertex_PTR)(glDrawElementsBaseVertex_ARG_EXPAND);
void glDrawElementsIndirect(glDrawElementsIndirect_ARG_EXPAND);
typedef void (*glDrawElementsIndirect_PTR)(glDrawElementsIndirect_ARG_EXPAND);
void glDrawElementsInstanced(glDrawElementsInstanced_ARG_EXPAND);
typedef void (*glDrawElementsInstanced_PTR)(glDrawElementsInstanced_ARG_EXPAND);
void glDrawElementsInstancedARB(glDrawElementsInstancedARB_ARG_EXPAND);
typedef void (*glDrawElementsInstancedARB_PTR)(glDrawElementsInstancedARB_ARG_EXPAND);
void glDrawElementsInstancedBaseInstance(glDrawElementsInstancedBaseInstance_ARG_EXPAND);
typedef void (*glDrawElementsInstancedBaseInstance_PTR)(glDrawElementsInstancedBaseInstance_ARG_EXPAND);
void glDrawElementsInstancedBaseVertex(glDrawElementsInstancedBaseVertex_ARG_EXPAND);
typedef void (*glDrawElementsInstancedBaseVertex_PTR)(glDrawElementsInstancedBaseVertex_ARG_EXPAND);
void glDrawElementsInstancedBaseVertexBaseInstance(glDrawElementsInstancedBaseVertexBaseInstance_ARG_EXPAND);
typedef void (*glDrawElementsInstancedBaseVertexBaseInstance_PTR)(glDrawElementsInstancedBaseVertexBaseInstance_ARG_EXPAND);
void glDrawElementsInstancedEXT(glDrawElementsInstancedEXT_ARG_EXPAND);
typedef void (*glDrawElementsInstancedEXT_PTR)(glDrawElementsInstancedEXT_ARG_EXPAND);
void glDrawMeshArraysSUN(glDrawMeshArraysSUN_ARG_EXPAND);
typedef void (*glDrawMeshArraysSUN_PTR)(glDrawMeshArraysSUN_ARG_EXPAND);
void glDrawPixels(glDrawPixels_ARG_EXPAND);
typedef void (*glDrawPixels_PTR)(glDrawPixels_ARG_EXPAND);
void glDrawRangeElementArrayAPPLE(glDrawRangeElementArrayAPPLE_ARG_EXPAND);
typedef void (*glDrawRangeElementArrayAPPLE_PTR)(glDrawRangeElementArrayAPPLE_ARG_EXPAND);
void glDrawRangeElementArrayATI(glDrawRangeElementArrayATI_ARG_EXPAND);
typedef void (*glDrawRangeElementArrayATI_PTR)(glDrawRangeElementArrayATI_ARG_EXPAND);
void glDrawRangeElements(glDrawRangeElements_ARG_EXPAND);
typedef void (*glDrawRangeElements_PTR)(glDrawRangeElements_ARG_EXPAND);
void glDrawRangeElementsBaseVertex(glDrawRangeElementsBaseVertex_ARG_EXPAND);
typedef void (*glDrawRangeElementsBaseVertex_PTR)(glDrawRangeElementsBaseVertex_ARG_EXPAND);
void glDrawRangeElementsEXT(glDrawRangeElementsEXT_ARG_EXPAND);
typedef void (*glDrawRangeElementsEXT_PTR)(glDrawRangeElementsEXT_ARG_EXPAND);
void glDrawTextureNV(glDrawTextureNV_ARG_EXPAND);
typedef void (*glDrawTextureNV_PTR)(glDrawTextureNV_ARG_EXPAND);
void glDrawTransformFeedback(glDrawTransformFeedback_ARG_EXPAND);
typedef void (*glDrawTransformFeedback_PTR)(glDrawTransformFeedback_ARG_EXPAND);
void glDrawTransformFeedbackInstanced(glDrawTransformFeedbackInstanced_ARG_EXPAND);
typedef void (*glDrawTransformFeedbackInstanced_PTR)(glDrawTransformFeedbackInstanced_ARG_EXPAND);
void glDrawTransformFeedbackNV(glDrawTransformFeedbackNV_ARG_EXPAND);
typedef void (*glDrawTransformFeedbackNV_PTR)(glDrawTransformFeedbackNV_ARG_EXPAND);
void glDrawTransformFeedbackStream(glDrawTransformFeedbackStream_ARG_EXPAND);
typedef void (*glDrawTransformFeedbackStream_PTR)(glDrawTransformFeedbackStream_ARG_EXPAND);
void glDrawTransformFeedbackStreamInstanced(glDrawTransformFeedbackStreamInstanced_ARG_EXPAND);
typedef void (*glDrawTransformFeedbackStreamInstanced_PTR)(glDrawTransformFeedbackStreamInstanced_ARG_EXPAND);
void glEdgeFlag(glEdgeFlag_ARG_EXPAND);
typedef void (*glEdgeFlag_PTR)(glEdgeFlag_ARG_EXPAND);
void glEdgeFlagFormatNV(glEdgeFlagFormatNV_ARG_EXPAND);
typedef void (*glEdgeFlagFormatNV_PTR)(glEdgeFlagFormatNV_ARG_EXPAND);
void glEdgeFlagPointer(glEdgeFlagPointer_ARG_EXPAND);
typedef void (*glEdgeFlagPointer_PTR)(glEdgeFlagPointer_ARG_EXPAND);
void glEdgeFlagPointerEXT(glEdgeFlagPointerEXT_ARG_EXPAND);
typedef void (*glEdgeFlagPointerEXT_PTR)(glEdgeFlagPointerEXT_ARG_EXPAND);
void glEdgeFlagPointerListIBM(glEdgeFlagPointerListIBM_ARG_EXPAND);
typedef void (*glEdgeFlagPointerListIBM_PTR)(glEdgeFlagPointerListIBM_ARG_EXPAND);
void glEdgeFlagv(glEdgeFlagv_ARG_EXPAND);
typedef void (*glEdgeFlagv_PTR)(glEdgeFlagv_ARG_EXPAND);
void glElementPointerAPPLE(glElementPointerAPPLE_ARG_EXPAND);
typedef void (*glElementPointerAPPLE_PTR)(glElementPointerAPPLE_ARG_EXPAND);
void glElementPointerATI(glElementPointerATI_ARG_EXPAND);
typedef void (*glElementPointerATI_PTR)(glElementPointerATI_ARG_EXPAND);
void glEnable(glEnable_ARG_EXPAND);
typedef void (*glEnable_PTR)(glEnable_ARG_EXPAND);
void glEnableClientState(glEnableClientState_ARG_EXPAND);
typedef void (*glEnableClientState_PTR)(glEnableClientState_ARG_EXPAND);
void glEnableClientStateIndexedEXT(glEnableClientStateIndexedEXT_ARG_EXPAND);
typedef void (*glEnableClientStateIndexedEXT_PTR)(glEnableClientStateIndexedEXT_ARG_EXPAND);
void glEnableClientStateiEXT(glEnableClientStateiEXT_ARG_EXPAND);
typedef void (*glEnableClientStateiEXT_PTR)(glEnableClientStateiEXT_ARG_EXPAND);
void glEnableIndexedEXT(glEnableIndexedEXT_ARG_EXPAND);
typedef void (*glEnableIndexedEXT_PTR)(glEnableIndexedEXT_ARG_EXPAND);
void glEnableVariantClientStateEXT(glEnableVariantClientStateEXT_ARG_EXPAND);
typedef void (*glEnableVariantClientStateEXT_PTR)(glEnableVariantClientStateEXT_ARG_EXPAND);
void glEnableVertexArrayAttribEXT(glEnableVertexArrayAttribEXT_ARG_EXPAND);
typedef void (*glEnableVertexArrayAttribEXT_PTR)(glEnableVertexArrayAttribEXT_ARG_EXPAND);
void glEnableVertexArrayEXT(glEnableVertexArrayEXT_ARG_EXPAND);
typedef void (*glEnableVertexArrayEXT_PTR)(glEnableVertexArrayEXT_ARG_EXPAND);
void glEnableVertexAttribAPPLE(glEnableVertexAttribAPPLE_ARG_EXPAND);
typedef void (*glEnableVertexAttribAPPLE_PTR)(glEnableVertexAttribAPPLE_ARG_EXPAND);
void glEnableVertexAttribArray(glEnableVertexAttribArray_ARG_EXPAND);
typedef void (*glEnableVertexAttribArray_PTR)(glEnableVertexAttribArray_ARG_EXPAND);
void glEnableVertexAttribArrayARB(glEnableVertexAttribArrayARB_ARG_EXPAND);
typedef void (*glEnableVertexAttribArrayARB_PTR)(glEnableVertexAttribArrayARB_ARG_EXPAND);
void glEnablei(glEnablei_ARG_EXPAND);
typedef void (*glEnablei_PTR)(glEnablei_ARG_EXPAND);
void glEnd(glEnd_ARG_EXPAND);
typedef void (*glEnd_PTR)(glEnd_ARG_EXPAND);
void glEndConditionalRender(glEndConditionalRender_ARG_EXPAND);
typedef void (*glEndConditionalRender_PTR)(glEndConditionalRender_ARG_EXPAND);
void glEndConditionalRenderNV(glEndConditionalRenderNV_ARG_EXPAND);
typedef void (*glEndConditionalRenderNV_PTR)(glEndConditionalRenderNV_ARG_EXPAND);
void glEndConditionalRenderNVX(glEndConditionalRenderNVX_ARG_EXPAND);
typedef void (*glEndConditionalRenderNVX_PTR)(glEndConditionalRenderNVX_ARG_EXPAND);
void glEndFragmentShaderATI(glEndFragmentShaderATI_ARG_EXPAND);
typedef void (*glEndFragmentShaderATI_PTR)(glEndFragmentShaderATI_ARG_EXPAND);
void glEndList(glEndList_ARG_EXPAND);
typedef void (*glEndList_PTR)(glEndList_ARG_EXPAND);
void glEndOcclusionQueryNV(glEndOcclusionQueryNV_ARG_EXPAND);
typedef void (*glEndOcclusionQueryNV_PTR)(glEndOcclusionQueryNV_ARG_EXPAND);
void glEndPerfMonitorAMD(glEndPerfMonitorAMD_ARG_EXPAND);
typedef void (*glEndPerfMonitorAMD_PTR)(glEndPerfMonitorAMD_ARG_EXPAND);
void glEndQuery(glEndQuery_ARG_EXPAND);
typedef void (*glEndQuery_PTR)(glEndQuery_ARG_EXPAND);
void glEndQueryARB(glEndQueryARB_ARG_EXPAND);
typedef void (*glEndQueryARB_PTR)(glEndQueryARB_ARG_EXPAND);
void glEndQueryIndexed(glEndQueryIndexed_ARG_EXPAND);
typedef void (*glEndQueryIndexed_PTR)(glEndQueryIndexed_ARG_EXPAND);
void glEndTransformFeedback(glEndTransformFeedback_ARG_EXPAND);
typedef void (*glEndTransformFeedback_PTR)(glEndTransformFeedback_ARG_EXPAND);
void glEndTransformFeedbackEXT(glEndTransformFeedbackEXT_ARG_EXPAND);
typedef void (*glEndTransformFeedbackEXT_PTR)(glEndTransformFeedbackEXT_ARG_EXPAND);
void glEndTransformFeedbackNV(glEndTransformFeedbackNV_ARG_EXPAND);
typedef void (*glEndTransformFeedbackNV_PTR)(glEndTransformFeedbackNV_ARG_EXPAND);
void glEndVertexShaderEXT(glEndVertexShaderEXT_ARG_EXPAND);
typedef void (*glEndVertexShaderEXT_PTR)(glEndVertexShaderEXT_ARG_EXPAND);
void glEndVideoCaptureNV(glEndVideoCaptureNV_ARG_EXPAND);
typedef void (*glEndVideoCaptureNV_PTR)(glEndVideoCaptureNV_ARG_EXPAND);
void glEvalCoord1d(glEvalCoord1d_ARG_EXPAND);
typedef void (*glEvalCoord1d_PTR)(glEvalCoord1d_ARG_EXPAND);
void glEvalCoord1dv(glEvalCoord1dv_ARG_EXPAND);
typedef void (*glEvalCoord1dv_PTR)(glEvalCoord1dv_ARG_EXPAND);
void glEvalCoord1f(glEvalCoord1f_ARG_EXPAND);
typedef void (*glEvalCoord1f_PTR)(glEvalCoord1f_ARG_EXPAND);
void glEvalCoord1fv(glEvalCoord1fv_ARG_EXPAND);
typedef void (*glEvalCoord1fv_PTR)(glEvalCoord1fv_ARG_EXPAND);
void glEvalCoord1xOES(glEvalCoord1xOES_ARG_EXPAND);
typedef void (*glEvalCoord1xOES_PTR)(glEvalCoord1xOES_ARG_EXPAND);
void glEvalCoord1xvOES(glEvalCoord1xvOES_ARG_EXPAND);
typedef void (*glEvalCoord1xvOES_PTR)(glEvalCoord1xvOES_ARG_EXPAND);
void glEvalCoord2d(glEvalCoord2d_ARG_EXPAND);
typedef void (*glEvalCoord2d_PTR)(glEvalCoord2d_ARG_EXPAND);
void glEvalCoord2dv(glEvalCoord2dv_ARG_EXPAND);
typedef void (*glEvalCoord2dv_PTR)(glEvalCoord2dv_ARG_EXPAND);
void glEvalCoord2f(glEvalCoord2f_ARG_EXPAND);
typedef void (*glEvalCoord2f_PTR)(glEvalCoord2f_ARG_EXPAND);
void glEvalCoord2fv(glEvalCoord2fv_ARG_EXPAND);
typedef void (*glEvalCoord2fv_PTR)(glEvalCoord2fv_ARG_EXPAND);
void glEvalCoord2xOES(glEvalCoord2xOES_ARG_EXPAND);
typedef void (*glEvalCoord2xOES_PTR)(glEvalCoord2xOES_ARG_EXPAND);
void glEvalCoord2xvOES(glEvalCoord2xvOES_ARG_EXPAND);
typedef void (*glEvalCoord2xvOES_PTR)(glEvalCoord2xvOES_ARG_EXPAND);
void glEvalMapsNV(glEvalMapsNV_ARG_EXPAND);
typedef void (*glEvalMapsNV_PTR)(glEvalMapsNV_ARG_EXPAND);
void glEvalMesh1(glEvalMesh1_ARG_EXPAND);
typedef void (*glEvalMesh1_PTR)(glEvalMesh1_ARG_EXPAND);
void glEvalMesh2(glEvalMesh2_ARG_EXPAND);
typedef void (*glEvalMesh2_PTR)(glEvalMesh2_ARG_EXPAND);
void glEvalPoint1(glEvalPoint1_ARG_EXPAND);
typedef void (*glEvalPoint1_PTR)(glEvalPoint1_ARG_EXPAND);
void glEvalPoint2(glEvalPoint2_ARG_EXPAND);
typedef void (*glEvalPoint2_PTR)(glEvalPoint2_ARG_EXPAND);
void glExecuteProgramNV(glExecuteProgramNV_ARG_EXPAND);
typedef void (*glExecuteProgramNV_PTR)(glExecuteProgramNV_ARG_EXPAND);
void glExtractComponentEXT(glExtractComponentEXT_ARG_EXPAND);
typedef void (*glExtractComponentEXT_PTR)(glExtractComponentEXT_ARG_EXPAND);
void glFeedbackBuffer(glFeedbackBuffer_ARG_EXPAND);
typedef void (*glFeedbackBuffer_PTR)(glFeedbackBuffer_ARG_EXPAND);
void glFeedbackBufferxOES(glFeedbackBufferxOES_ARG_EXPAND);
typedef void (*glFeedbackBufferxOES_PTR)(glFeedbackBufferxOES_ARG_EXPAND);
GLsync glFenceSync(glFenceSync_ARG_EXPAND);
typedef GLsync (*glFenceSync_PTR)(glFenceSync_ARG_EXPAND);
void glFinalCombinerInputNV(glFinalCombinerInputNV_ARG_EXPAND);
typedef void (*glFinalCombinerInputNV_PTR)(glFinalCombinerInputNV_ARG_EXPAND);
void glFinish(glFinish_ARG_EXPAND);
typedef void (*glFinish_PTR)(glFinish_ARG_EXPAND);
GLint glFinishAsyncSGIX(glFinishAsyncSGIX_ARG_EXPAND);
typedef GLint (*glFinishAsyncSGIX_PTR)(glFinishAsyncSGIX_ARG_EXPAND);
void glFinishFenceAPPLE(glFinishFenceAPPLE_ARG_EXPAND);
typedef void (*glFinishFenceAPPLE_PTR)(glFinishFenceAPPLE_ARG_EXPAND);
void glFinishFenceNV(glFinishFenceNV_ARG_EXPAND);
typedef void (*glFinishFenceNV_PTR)(glFinishFenceNV_ARG_EXPAND);
void glFinishObjectAPPLE(glFinishObjectAPPLE_ARG_EXPAND);
typedef void (*glFinishObjectAPPLE_PTR)(glFinishObjectAPPLE_ARG_EXPAND);
void glFinishTextureSUNX(glFinishTextureSUNX_ARG_EXPAND);
typedef void (*glFinishTextureSUNX_PTR)(glFinishTextureSUNX_ARG_EXPAND);
void glFlush(glFlush_ARG_EXPAND);
typedef void (*glFlush_PTR)(glFlush_ARG_EXPAND);
void glFlushMappedBufferRange(glFlushMappedBufferRange_ARG_EXPAND);
typedef void (*glFlushMappedBufferRange_PTR)(glFlushMappedBufferRange_ARG_EXPAND);
void glFlushMappedBufferRangeAPPLE(glFlushMappedBufferRangeAPPLE_ARG_EXPAND);
typedef void (*glFlushMappedBufferRangeAPPLE_PTR)(glFlushMappedBufferRangeAPPLE_ARG_EXPAND);
void glFlushMappedNamedBufferRangeEXT(glFlushMappedNamedBufferRangeEXT_ARG_EXPAND);
typedef void (*glFlushMappedNamedBufferRangeEXT_PTR)(glFlushMappedNamedBufferRangeEXT_ARG_EXPAND);
void glFlushPixelDataRangeNV(glFlushPixelDataRangeNV_ARG_EXPAND);
typedef void (*glFlushPixelDataRangeNV_PTR)(glFlushPixelDataRangeNV_ARG_EXPAND);
void glFlushRasterSGIX(glFlushRasterSGIX_ARG_EXPAND);
typedef void (*glFlushRasterSGIX_PTR)(glFlushRasterSGIX_ARG_EXPAND);
void glFlushStaticDataIBM(glFlushStaticDataIBM_ARG_EXPAND);
typedef void (*glFlushStaticDataIBM_PTR)(glFlushStaticDataIBM_ARG_EXPAND);
void glFlushVertexArrayRangeAPPLE(glFlushVertexArrayRangeAPPLE_ARG_EXPAND);
typedef void (*glFlushVertexArrayRangeAPPLE_PTR)(glFlushVertexArrayRangeAPPLE_ARG_EXPAND);
void glFlushVertexArrayRangeNV(glFlushVertexArrayRangeNV_ARG_EXPAND);
typedef void (*glFlushVertexArrayRangeNV_PTR)(glFlushVertexArrayRangeNV_ARG_EXPAND);
void glFogCoordFormatNV(glFogCoordFormatNV_ARG_EXPAND);
typedef void (*glFogCoordFormatNV_PTR)(glFogCoordFormatNV_ARG_EXPAND);
void glFogCoordPointer(glFogCoordPointer_ARG_EXPAND);
typedef void (*glFogCoordPointer_PTR)(glFogCoordPointer_ARG_EXPAND);
void glFogCoordPointerEXT(glFogCoordPointerEXT_ARG_EXPAND);
typedef void (*glFogCoordPointerEXT_PTR)(glFogCoordPointerEXT_ARG_EXPAND);
void glFogCoordPointerListIBM(glFogCoordPointerListIBM_ARG_EXPAND);
typedef void (*glFogCoordPointerListIBM_PTR)(glFogCoordPointerListIBM_ARG_EXPAND);
void glFogCoordd(glFogCoordd_ARG_EXPAND);
typedef void (*glFogCoordd_PTR)(glFogCoordd_ARG_EXPAND);
void glFogCoorddEXT(glFogCoorddEXT_ARG_EXPAND);
typedef void (*glFogCoorddEXT_PTR)(glFogCoorddEXT_ARG_EXPAND);
void glFogCoorddv(glFogCoorddv_ARG_EXPAND);
typedef void (*glFogCoorddv_PTR)(glFogCoorddv_ARG_EXPAND);
void glFogCoorddvEXT(glFogCoorddvEXT_ARG_EXPAND);
typedef void (*glFogCoorddvEXT_PTR)(glFogCoorddvEXT_ARG_EXPAND);
void glFogCoordf(glFogCoordf_ARG_EXPAND);
typedef void (*glFogCoordf_PTR)(glFogCoordf_ARG_EXPAND);
void glFogCoordfEXT(glFogCoordfEXT_ARG_EXPAND);
typedef void (*glFogCoordfEXT_PTR)(glFogCoordfEXT_ARG_EXPAND);
void glFogCoordfv(glFogCoordfv_ARG_EXPAND);
typedef void (*glFogCoordfv_PTR)(glFogCoordfv_ARG_EXPAND);
void glFogCoordfvEXT(glFogCoordfvEXT_ARG_EXPAND);
typedef void (*glFogCoordfvEXT_PTR)(glFogCoordfvEXT_ARG_EXPAND);
void glFogCoordhNV(glFogCoordhNV_ARG_EXPAND);
typedef void (*glFogCoordhNV_PTR)(glFogCoordhNV_ARG_EXPAND);
void glFogCoordhvNV(glFogCoordhvNV_ARG_EXPAND);
typedef void (*glFogCoordhvNV_PTR)(glFogCoordhvNV_ARG_EXPAND);
void glFogFuncSGIS(glFogFuncSGIS_ARG_EXPAND);
typedef void (*glFogFuncSGIS_PTR)(glFogFuncSGIS_ARG_EXPAND);
void glFogf(glFogf_ARG_EXPAND);
typedef void (*glFogf_PTR)(glFogf_ARG_EXPAND);
void glFogfv(glFogfv_ARG_EXPAND);
typedef void (*glFogfv_PTR)(glFogfv_ARG_EXPAND);
void glFogi(glFogi_ARG_EXPAND);
typedef void (*glFogi_PTR)(glFogi_ARG_EXPAND);
void glFogiv(glFogiv_ARG_EXPAND);
typedef void (*glFogiv_PTR)(glFogiv_ARG_EXPAND);
void glFogx(glFogx_ARG_EXPAND);
typedef void (*glFogx_PTR)(glFogx_ARG_EXPAND);
void glFogxOES(glFogxOES_ARG_EXPAND);
typedef void (*glFogxOES_PTR)(glFogxOES_ARG_EXPAND);
void glFogxv(glFogxv_ARG_EXPAND);
typedef void (*glFogxv_PTR)(glFogxv_ARG_EXPAND);
void glFogxvOES(glFogxvOES_ARG_EXPAND);
typedef void (*glFogxvOES_PTR)(glFogxvOES_ARG_EXPAND);
void glFragmentColorMaterialSGIX(glFragmentColorMaterialSGIX_ARG_EXPAND);
typedef void (*glFragmentColorMaterialSGIX_PTR)(glFragmentColorMaterialSGIX_ARG_EXPAND);
void glFragmentLightModelfSGIX(glFragmentLightModelfSGIX_ARG_EXPAND);
typedef void (*glFragmentLightModelfSGIX_PTR)(glFragmentLightModelfSGIX_ARG_EXPAND);
void glFragmentLightModelfvSGIX(glFragmentLightModelfvSGIX_ARG_EXPAND);
typedef void (*glFragmentLightModelfvSGIX_PTR)(glFragmentLightModelfvSGIX_ARG_EXPAND);
void glFragmentLightModeliSGIX(glFragmentLightModeliSGIX_ARG_EXPAND);
typedef void (*glFragmentLightModeliSGIX_PTR)(glFragmentLightModeliSGIX_ARG_EXPAND);
void glFragmentLightModelivSGIX(glFragmentLightModelivSGIX_ARG_EXPAND);
typedef void (*glFragmentLightModelivSGIX_PTR)(glFragmentLightModelivSGIX_ARG_EXPAND);
void glFragmentLightfSGIX(glFragmentLightfSGIX_ARG_EXPAND);
typedef void (*glFragmentLightfSGIX_PTR)(glFragmentLightfSGIX_ARG_EXPAND);
void glFragmentLightfvSGIX(glFragmentLightfvSGIX_ARG_EXPAND);
typedef void (*glFragmentLightfvSGIX_PTR)(glFragmentLightfvSGIX_ARG_EXPAND);
void glFragmentLightiSGIX(glFragmentLightiSGIX_ARG_EXPAND);
typedef void (*glFragmentLightiSGIX_PTR)(glFragmentLightiSGIX_ARG_EXPAND);
void glFragmentLightivSGIX(glFragmentLightivSGIX_ARG_EXPAND);
typedef void (*glFragmentLightivSGIX_PTR)(glFragmentLightivSGIX_ARG_EXPAND);
void glFragmentMaterialfSGIX(glFragmentMaterialfSGIX_ARG_EXPAND);
typedef void (*glFragmentMaterialfSGIX_PTR)(glFragmentMaterialfSGIX_ARG_EXPAND);
void glFragmentMaterialfvSGIX(glFragmentMaterialfvSGIX_ARG_EXPAND);
typedef void (*glFragmentMaterialfvSGIX_PTR)(glFragmentMaterialfvSGIX_ARG_EXPAND);
void glFragmentMaterialiSGIX(glFragmentMaterialiSGIX_ARG_EXPAND);
typedef void (*glFragmentMaterialiSGIX_PTR)(glFragmentMaterialiSGIX_ARG_EXPAND);
void glFragmentMaterialivSGIX(glFragmentMaterialivSGIX_ARG_EXPAND);
typedef void (*glFragmentMaterialivSGIX_PTR)(glFragmentMaterialivSGIX_ARG_EXPAND);
void glFrameTerminatorGREMEDY(glFrameTerminatorGREMEDY_ARG_EXPAND);
typedef void (*glFrameTerminatorGREMEDY_PTR)(glFrameTerminatorGREMEDY_ARG_EXPAND);
void glFrameZoomSGIX(glFrameZoomSGIX_ARG_EXPAND);
typedef void (*glFrameZoomSGIX_PTR)(glFrameZoomSGIX_ARG_EXPAND);
void glFramebufferDrawBufferEXT(glFramebufferDrawBufferEXT_ARG_EXPAND);
typedef void (*glFramebufferDrawBufferEXT_PTR)(glFramebufferDrawBufferEXT_ARG_EXPAND);
void glFramebufferDrawBuffersEXT(glFramebufferDrawBuffersEXT_ARG_EXPAND);
typedef void (*glFramebufferDrawBuffersEXT_PTR)(glFramebufferDrawBuffersEXT_ARG_EXPAND);
void glFramebufferParameteri(glFramebufferParameteri_ARG_EXPAND);
typedef void (*glFramebufferParameteri_PTR)(glFramebufferParameteri_ARG_EXPAND);
void glFramebufferReadBufferEXT(glFramebufferReadBufferEXT_ARG_EXPAND);
typedef void (*glFramebufferReadBufferEXT_PTR)(glFramebufferReadBufferEXT_ARG_EXPAND);
void glFramebufferRenderbuffer(glFramebufferRenderbuffer_ARG_EXPAND);
typedef void (*glFramebufferRenderbuffer_PTR)(glFramebufferRenderbuffer_ARG_EXPAND);
void glFramebufferRenderbufferEXT(glFramebufferRenderbufferEXT_ARG_EXPAND);
typedef void (*glFramebufferRenderbufferEXT_PTR)(glFramebufferRenderbufferEXT_ARG_EXPAND);
void glFramebufferTexture(glFramebufferTexture_ARG_EXPAND);
typedef void (*glFramebufferTexture_PTR)(glFramebufferTexture_ARG_EXPAND);
void glFramebufferTexture1D(glFramebufferTexture1D_ARG_EXPAND);
typedef void (*glFramebufferTexture1D_PTR)(glFramebufferTexture1D_ARG_EXPAND);
void glFramebufferTexture1DEXT(glFramebufferTexture1DEXT_ARG_EXPAND);
typedef void (*glFramebufferTexture1DEXT_PTR)(glFramebufferTexture1DEXT_ARG_EXPAND);
void glFramebufferTexture2D(glFramebufferTexture2D_ARG_EXPAND);
typedef void (*glFramebufferTexture2D_PTR)(glFramebufferTexture2D_ARG_EXPAND);
void glFramebufferTexture2DEXT(glFramebufferTexture2DEXT_ARG_EXPAND);
typedef void (*glFramebufferTexture2DEXT_PTR)(glFramebufferTexture2DEXT_ARG_EXPAND);
void glFramebufferTexture3D(glFramebufferTexture3D_ARG_EXPAND);
typedef void (*glFramebufferTexture3D_PTR)(glFramebufferTexture3D_ARG_EXPAND);
void glFramebufferTexture3DEXT(glFramebufferTexture3DEXT_ARG_EXPAND);
typedef void (*glFramebufferTexture3DEXT_PTR)(glFramebufferTexture3DEXT_ARG_EXPAND);
void glFramebufferTextureARB(glFramebufferTextureARB_ARG_EXPAND);
typedef void (*glFramebufferTextureARB_PTR)(glFramebufferTextureARB_ARG_EXPAND);
void glFramebufferTextureEXT(glFramebufferTextureEXT_ARG_EXPAND);
typedef void (*glFramebufferTextureEXT_PTR)(glFramebufferTextureEXT_ARG_EXPAND);
void glFramebufferTextureFaceARB(glFramebufferTextureFaceARB_ARG_EXPAND);
typedef void (*glFramebufferTextureFaceARB_PTR)(glFramebufferTextureFaceARB_ARG_EXPAND);
void glFramebufferTextureFaceEXT(glFramebufferTextureFaceEXT_ARG_EXPAND);
typedef void (*glFramebufferTextureFaceEXT_PTR)(glFramebufferTextureFaceEXT_ARG_EXPAND);
void glFramebufferTextureLayer(glFramebufferTextureLayer_ARG_EXPAND);
typedef void (*glFramebufferTextureLayer_PTR)(glFramebufferTextureLayer_ARG_EXPAND);
void glFramebufferTextureLayerARB(glFramebufferTextureLayerARB_ARG_EXPAND);
typedef void (*glFramebufferTextureLayerARB_PTR)(glFramebufferTextureLayerARB_ARG_EXPAND);
void glFramebufferTextureLayerEXT(glFramebufferTextureLayerEXT_ARG_EXPAND);
typedef void (*glFramebufferTextureLayerEXT_PTR)(glFramebufferTextureLayerEXT_ARG_EXPAND);
void glFreeObjectBufferATI(glFreeObjectBufferATI_ARG_EXPAND);
typedef void (*glFreeObjectBufferATI_PTR)(glFreeObjectBufferATI_ARG_EXPAND);
void glFrontFace(glFrontFace_ARG_EXPAND);
typedef void (*glFrontFace_PTR)(glFrontFace_ARG_EXPAND);
void glFrustum(glFrustum_ARG_EXPAND);
typedef void (*glFrustum_PTR)(glFrustum_ARG_EXPAND);
void glFrustumf(glFrustumf_ARG_EXPAND);
typedef void (*glFrustumf_PTR)(glFrustumf_ARG_EXPAND);
void glFrustumfOES(glFrustumfOES_ARG_EXPAND);
typedef void (*glFrustumfOES_PTR)(glFrustumfOES_ARG_EXPAND);
void glFrustumx(glFrustumx_ARG_EXPAND);
typedef void (*glFrustumx_PTR)(glFrustumx_ARG_EXPAND);
void glFrustumxOES(glFrustumxOES_ARG_EXPAND);
typedef void (*glFrustumxOES_PTR)(glFrustumxOES_ARG_EXPAND);
GLuint glGenAsyncMarkersSGIX(glGenAsyncMarkersSGIX_ARG_EXPAND);
typedef GLuint (*glGenAsyncMarkersSGIX_PTR)(glGenAsyncMarkersSGIX_ARG_EXPAND);
void glGenBuffers(glGenBuffers_ARG_EXPAND);
typedef void (*glGenBuffers_PTR)(glGenBuffers_ARG_EXPAND);
void glGenBuffersARB(glGenBuffersARB_ARG_EXPAND);
typedef void (*glGenBuffersARB_PTR)(glGenBuffersARB_ARG_EXPAND);
void glGenFencesAPPLE(glGenFencesAPPLE_ARG_EXPAND);
typedef void (*glGenFencesAPPLE_PTR)(glGenFencesAPPLE_ARG_EXPAND);
void glGenFencesNV(glGenFencesNV_ARG_EXPAND);
typedef void (*glGenFencesNV_PTR)(glGenFencesNV_ARG_EXPAND);
GLuint glGenFragmentShadersATI(glGenFragmentShadersATI_ARG_EXPAND);
typedef GLuint (*glGenFragmentShadersATI_PTR)(glGenFragmentShadersATI_ARG_EXPAND);
void glGenFramebuffers(glGenFramebuffers_ARG_EXPAND);
typedef void (*glGenFramebuffers_PTR)(glGenFramebuffers_ARG_EXPAND);
void glGenFramebuffersEXT(glGenFramebuffersEXT_ARG_EXPAND);
typedef void (*glGenFramebuffersEXT_PTR)(glGenFramebuffersEXT_ARG_EXPAND);
GLuint glGenLists(glGenLists_ARG_EXPAND);
typedef GLuint (*glGenLists_PTR)(glGenLists_ARG_EXPAND);
void glGenNamesAMD(glGenNamesAMD_ARG_EXPAND);
typedef void (*glGenNamesAMD_PTR)(glGenNamesAMD_ARG_EXPAND);
void glGenOcclusionQueriesNV(glGenOcclusionQueriesNV_ARG_EXPAND);
typedef void (*glGenOcclusionQueriesNV_PTR)(glGenOcclusionQueriesNV_ARG_EXPAND);
GLuint glGenPathsNV(glGenPathsNV_ARG_EXPAND);
typedef GLuint (*glGenPathsNV_PTR)(glGenPathsNV_ARG_EXPAND);
void glGenPerfMonitorsAMD(glGenPerfMonitorsAMD_ARG_EXPAND);
typedef void (*glGenPerfMonitorsAMD_PTR)(glGenPerfMonitorsAMD_ARG_EXPAND);
void glGenProgramPipelines(glGenProgramPipelines_ARG_EXPAND);
typedef void (*glGenProgramPipelines_PTR)(glGenProgramPipelines_ARG_EXPAND);
void glGenProgramsARB(glGenProgramsARB_ARG_EXPAND);
typedef void (*glGenProgramsARB_PTR)(glGenProgramsARB_ARG_EXPAND);
void glGenProgramsNV(glGenProgramsNV_ARG_EXPAND);
typedef void (*glGenProgramsNV_PTR)(glGenProgramsNV_ARG_EXPAND);
void glGenQueries(glGenQueries_ARG_EXPAND);
typedef void (*glGenQueries_PTR)(glGenQueries_ARG_EXPAND);
void glGenQueriesARB(glGenQueriesARB_ARG_EXPAND);
typedef void (*glGenQueriesARB_PTR)(glGenQueriesARB_ARG_EXPAND);
void glGenRenderbuffers(glGenRenderbuffers_ARG_EXPAND);
typedef void (*glGenRenderbuffers_PTR)(glGenRenderbuffers_ARG_EXPAND);
void glGenRenderbuffersEXT(glGenRenderbuffersEXT_ARG_EXPAND);
typedef void (*glGenRenderbuffersEXT_PTR)(glGenRenderbuffersEXT_ARG_EXPAND);
void glGenSamplers(glGenSamplers_ARG_EXPAND);
typedef void (*glGenSamplers_PTR)(glGenSamplers_ARG_EXPAND);
GLuint glGenSymbolsEXT(glGenSymbolsEXT_ARG_EXPAND);
typedef GLuint (*glGenSymbolsEXT_PTR)(glGenSymbolsEXT_ARG_EXPAND);
void glGenTextures(glGenTextures_ARG_EXPAND);
typedef void (*glGenTextures_PTR)(glGenTextures_ARG_EXPAND);
void glGenTexturesEXT(glGenTexturesEXT_ARG_EXPAND);
typedef void (*glGenTexturesEXT_PTR)(glGenTexturesEXT_ARG_EXPAND);
void glGenTransformFeedbacks(glGenTransformFeedbacks_ARG_EXPAND);
typedef void (*glGenTransformFeedbacks_PTR)(glGenTransformFeedbacks_ARG_EXPAND);
void glGenTransformFeedbacksNV(glGenTransformFeedbacksNV_ARG_EXPAND);
typedef void (*glGenTransformFeedbacksNV_PTR)(glGenTransformFeedbacksNV_ARG_EXPAND);
void glGenVertexArrays(glGenVertexArrays_ARG_EXPAND);
typedef void (*glGenVertexArrays_PTR)(glGenVertexArrays_ARG_EXPAND);
void glGenVertexArraysAPPLE(glGenVertexArraysAPPLE_ARG_EXPAND);
typedef void (*glGenVertexArraysAPPLE_PTR)(glGenVertexArraysAPPLE_ARG_EXPAND);
GLuint glGenVertexShadersEXT(glGenVertexShadersEXT_ARG_EXPAND);
typedef GLuint (*glGenVertexShadersEXT_PTR)(glGenVertexShadersEXT_ARG_EXPAND);
void glGenerateMipmap(glGenerateMipmap_ARG_EXPAND);
typedef void (*glGenerateMipmap_PTR)(glGenerateMipmap_ARG_EXPAND);
void glGenerateMipmapEXT(glGenerateMipmapEXT_ARG_EXPAND);
typedef void (*glGenerateMipmapEXT_PTR)(glGenerateMipmapEXT_ARG_EXPAND);
void glGenerateMultiTexMipmapEXT(glGenerateMultiTexMipmapEXT_ARG_EXPAND);
typedef void (*glGenerateMultiTexMipmapEXT_PTR)(glGenerateMultiTexMipmapEXT_ARG_EXPAND);
void glGenerateTextureMipmapEXT(glGenerateTextureMipmapEXT_ARG_EXPAND);
typedef void (*glGenerateTextureMipmapEXT_PTR)(glGenerateTextureMipmapEXT_ARG_EXPAND);
void glGetActiveAtomicCounterBufferiv(glGetActiveAtomicCounterBufferiv_ARG_EXPAND);
typedef void (*glGetActiveAtomicCounterBufferiv_PTR)(glGetActiveAtomicCounterBufferiv_ARG_EXPAND);
void glGetActiveAttrib(glGetActiveAttrib_ARG_EXPAND);
typedef void (*glGetActiveAttrib_PTR)(glGetActiveAttrib_ARG_EXPAND);
void glGetActiveAttribARB(glGetActiveAttribARB_ARG_EXPAND);
typedef void (*glGetActiveAttribARB_PTR)(glGetActiveAttribARB_ARG_EXPAND);
void glGetActiveSubroutineName(glGetActiveSubroutineName_ARG_EXPAND);
typedef void (*glGetActiveSubroutineName_PTR)(glGetActiveSubroutineName_ARG_EXPAND);
void glGetActiveSubroutineUniformName(glGetActiveSubroutineUniformName_ARG_EXPAND);
typedef void (*glGetActiveSubroutineUniformName_PTR)(glGetActiveSubroutineUniformName_ARG_EXPAND);
void glGetActiveSubroutineUniformiv(glGetActiveSubroutineUniformiv_ARG_EXPAND);
typedef void (*glGetActiveSubroutineUniformiv_PTR)(glGetActiveSubroutineUniformiv_ARG_EXPAND);
void glGetActiveUniform(glGetActiveUniform_ARG_EXPAND);
typedef void (*glGetActiveUniform_PTR)(glGetActiveUniform_ARG_EXPAND);
void glGetActiveUniformARB(glGetActiveUniformARB_ARG_EXPAND);
typedef void (*glGetActiveUniformARB_PTR)(glGetActiveUniformARB_ARG_EXPAND);
void glGetActiveUniformBlockName(glGetActiveUniformBlockName_ARG_EXPAND);
typedef void (*glGetActiveUniformBlockName_PTR)(glGetActiveUniformBlockName_ARG_EXPAND);
void glGetActiveUniformBlockiv(glGetActiveUniformBlockiv_ARG_EXPAND);
typedef void (*glGetActiveUniformBlockiv_PTR)(glGetActiveUniformBlockiv_ARG_EXPAND);
void glGetActiveUniformName(glGetActiveUniformName_ARG_EXPAND);
typedef void (*glGetActiveUniformName_PTR)(glGetActiveUniformName_ARG_EXPAND);
void glGetActiveUniformsiv(glGetActiveUniformsiv_ARG_EXPAND);
typedef void (*glGetActiveUniformsiv_PTR)(glGetActiveUniformsiv_ARG_EXPAND);
void glGetActiveVaryingNV(glGetActiveVaryingNV_ARG_EXPAND);
typedef void (*glGetActiveVaryingNV_PTR)(glGetActiveVaryingNV_ARG_EXPAND);
void glGetArrayObjectfvATI(glGetArrayObjectfvATI_ARG_EXPAND);
typedef void (*glGetArrayObjectfvATI_PTR)(glGetArrayObjectfvATI_ARG_EXPAND);
void glGetArrayObjectivATI(glGetArrayObjectivATI_ARG_EXPAND);
typedef void (*glGetArrayObjectivATI_PTR)(glGetArrayObjectivATI_ARG_EXPAND);
void glGetAttachedObjectsARB(glGetAttachedObjectsARB_ARG_EXPAND);
typedef void (*glGetAttachedObjectsARB_PTR)(glGetAttachedObjectsARB_ARG_EXPAND);
void glGetAttachedShaders(glGetAttachedShaders_ARG_EXPAND);
typedef void (*glGetAttachedShaders_PTR)(glGetAttachedShaders_ARG_EXPAND);
GLint glGetAttribLocation(glGetAttribLocation_ARG_EXPAND);
typedef GLint (*glGetAttribLocation_PTR)(glGetAttribLocation_ARG_EXPAND);
GLint glGetAttribLocationARB(glGetAttribLocationARB_ARG_EXPAND);
typedef GLint (*glGetAttribLocationARB_PTR)(glGetAttribLocationARB_ARG_EXPAND);
void glGetBooleanIndexedvEXT(glGetBooleanIndexedvEXT_ARG_EXPAND);
typedef void (*glGetBooleanIndexedvEXT_PTR)(glGetBooleanIndexedvEXT_ARG_EXPAND);
void glGetBooleani_v(glGetBooleani_v_ARG_EXPAND);
typedef void (*glGetBooleani_v_PTR)(glGetBooleani_v_ARG_EXPAND);
void glGetBooleanv(glGetBooleanv_ARG_EXPAND);
typedef void (*glGetBooleanv_PTR)(glGetBooleanv_ARG_EXPAND);
void glGetBufferParameteri64v(glGetBufferParameteri64v_ARG_EXPAND);
typedef void (*glGetBufferParameteri64v_PTR)(glGetBufferParameteri64v_ARG_EXPAND);
void glGetBufferParameteriv(glGetBufferParameteriv_ARG_EXPAND);
typedef void (*glGetBufferParameteriv_PTR)(glGetBufferParameteriv_ARG_EXPAND);
void glGetBufferParameterivARB(glGetBufferParameterivARB_ARG_EXPAND);
typedef void (*glGetBufferParameterivARB_PTR)(glGetBufferParameterivARB_ARG_EXPAND);
void glGetBufferParameterui64vNV(glGetBufferParameterui64vNV_ARG_EXPAND);
typedef void (*glGetBufferParameterui64vNV_PTR)(glGetBufferParameterui64vNV_ARG_EXPAND);
void glGetBufferPointerv(glGetBufferPointerv_ARG_EXPAND);
typedef void (*glGetBufferPointerv_PTR)(glGetBufferPointerv_ARG_EXPAND);
void glGetBufferPointervARB(glGetBufferPointervARB_ARG_EXPAND);
typedef void (*glGetBufferPointervARB_PTR)(glGetBufferPointervARB_ARG_EXPAND);
void glGetBufferSubData(glGetBufferSubData_ARG_EXPAND);
typedef void (*glGetBufferSubData_PTR)(glGetBufferSubData_ARG_EXPAND);
void glGetBufferSubDataARB(glGetBufferSubDataARB_ARG_EXPAND);
typedef void (*glGetBufferSubDataARB_PTR)(glGetBufferSubDataARB_ARG_EXPAND);
void glGetClipPlane(glGetClipPlane_ARG_EXPAND);
typedef void (*glGetClipPlane_PTR)(glGetClipPlane_ARG_EXPAND);
void glGetClipPlanef(glGetClipPlanef_ARG_EXPAND);
typedef void (*glGetClipPlanef_PTR)(glGetClipPlanef_ARG_EXPAND);
void glGetClipPlanefOES(glGetClipPlanefOES_ARG_EXPAND);
typedef void (*glGetClipPlanefOES_PTR)(glGetClipPlanefOES_ARG_EXPAND);
void glGetClipPlanex(glGetClipPlanex_ARG_EXPAND);
typedef void (*glGetClipPlanex_PTR)(glGetClipPlanex_ARG_EXPAND);
void glGetClipPlanexOES(glGetClipPlanexOES_ARG_EXPAND);
typedef void (*glGetClipPlanexOES_PTR)(glGetClipPlanexOES_ARG_EXPAND);
void glGetColorTable(glGetColorTable_ARG_EXPAND);
typedef void (*glGetColorTable_PTR)(glGetColorTable_ARG_EXPAND);
void glGetColorTableEXT(glGetColorTableEXT_ARG_EXPAND);
typedef void (*glGetColorTableEXT_PTR)(glGetColorTableEXT_ARG_EXPAND);
void glGetColorTableParameterfv(glGetColorTableParameterfv_ARG_EXPAND);
typedef void (*glGetColorTableParameterfv_PTR)(glGetColorTableParameterfv_ARG_EXPAND);
void glGetColorTableParameterfvEXT(glGetColorTableParameterfvEXT_ARG_EXPAND);
typedef void (*glGetColorTableParameterfvEXT_PTR)(glGetColorTableParameterfvEXT_ARG_EXPAND);
void glGetColorTableParameterfvSGI(glGetColorTableParameterfvSGI_ARG_EXPAND);
typedef void (*glGetColorTableParameterfvSGI_PTR)(glGetColorTableParameterfvSGI_ARG_EXPAND);
void glGetColorTableParameteriv(glGetColorTableParameteriv_ARG_EXPAND);
typedef void (*glGetColorTableParameteriv_PTR)(glGetColorTableParameteriv_ARG_EXPAND);
void glGetColorTableParameterivEXT(glGetColorTableParameterivEXT_ARG_EXPAND);
typedef void (*glGetColorTableParameterivEXT_PTR)(glGetColorTableParameterivEXT_ARG_EXPAND);
void glGetColorTableParameterivSGI(glGetColorTableParameterivSGI_ARG_EXPAND);
typedef void (*glGetColorTableParameterivSGI_PTR)(glGetColorTableParameterivSGI_ARG_EXPAND);
void glGetColorTableSGI(glGetColorTableSGI_ARG_EXPAND);
typedef void (*glGetColorTableSGI_PTR)(glGetColorTableSGI_ARG_EXPAND);
void glGetCombinerInputParameterfvNV(glGetCombinerInputParameterfvNV_ARG_EXPAND);
typedef void (*glGetCombinerInputParameterfvNV_PTR)(glGetCombinerInputParameterfvNV_ARG_EXPAND);
void glGetCombinerInputParameterivNV(glGetCombinerInputParameterivNV_ARG_EXPAND);
typedef void (*glGetCombinerInputParameterivNV_PTR)(glGetCombinerInputParameterivNV_ARG_EXPAND);
void glGetCombinerOutputParameterfvNV(glGetCombinerOutputParameterfvNV_ARG_EXPAND);
typedef void (*glGetCombinerOutputParameterfvNV_PTR)(glGetCombinerOutputParameterfvNV_ARG_EXPAND);
void glGetCombinerOutputParameterivNV(glGetCombinerOutputParameterivNV_ARG_EXPAND);
typedef void (*glGetCombinerOutputParameterivNV_PTR)(glGetCombinerOutputParameterivNV_ARG_EXPAND);
void glGetCombinerStageParameterfvNV(glGetCombinerStageParameterfvNV_ARG_EXPAND);
typedef void (*glGetCombinerStageParameterfvNV_PTR)(glGetCombinerStageParameterfvNV_ARG_EXPAND);
void glGetCompressedMultiTexImageEXT(glGetCompressedMultiTexImageEXT_ARG_EXPAND);
typedef void (*glGetCompressedMultiTexImageEXT_PTR)(glGetCompressedMultiTexImageEXT_ARG_EXPAND);
void glGetCompressedTexImage(glGetCompressedTexImage_ARG_EXPAND);
typedef void (*glGetCompressedTexImage_PTR)(glGetCompressedTexImage_ARG_EXPAND);
void glGetCompressedTexImageARB(glGetCompressedTexImageARB_ARG_EXPAND);
typedef void (*glGetCompressedTexImageARB_PTR)(glGetCompressedTexImageARB_ARG_EXPAND);
void glGetCompressedTextureImageEXT(glGetCompressedTextureImageEXT_ARG_EXPAND);
typedef void (*glGetCompressedTextureImageEXT_PTR)(glGetCompressedTextureImageEXT_ARG_EXPAND);
void glGetConvolutionFilter(glGetConvolutionFilter_ARG_EXPAND);
typedef void (*glGetConvolutionFilter_PTR)(glGetConvolutionFilter_ARG_EXPAND);
void glGetConvolutionFilterEXT(glGetConvolutionFilterEXT_ARG_EXPAND);
typedef void (*glGetConvolutionFilterEXT_PTR)(glGetConvolutionFilterEXT_ARG_EXPAND);
void glGetConvolutionParameterfv(glGetConvolutionParameterfv_ARG_EXPAND);
typedef void (*glGetConvolutionParameterfv_PTR)(glGetConvolutionParameterfv_ARG_EXPAND);
void glGetConvolutionParameterfvEXT(glGetConvolutionParameterfvEXT_ARG_EXPAND);
typedef void (*glGetConvolutionParameterfvEXT_PTR)(glGetConvolutionParameterfvEXT_ARG_EXPAND);
void glGetConvolutionParameteriv(glGetConvolutionParameteriv_ARG_EXPAND);
typedef void (*glGetConvolutionParameteriv_PTR)(glGetConvolutionParameteriv_ARG_EXPAND);
void glGetConvolutionParameterivEXT(glGetConvolutionParameterivEXT_ARG_EXPAND);
typedef void (*glGetConvolutionParameterivEXT_PTR)(glGetConvolutionParameterivEXT_ARG_EXPAND);
void glGetConvolutionParameterxvOES(glGetConvolutionParameterxvOES_ARG_EXPAND);
typedef void (*glGetConvolutionParameterxvOES_PTR)(glGetConvolutionParameterxvOES_ARG_EXPAND);
GLuint glGetDebugMessageLog(glGetDebugMessageLog_ARG_EXPAND);
typedef GLuint (*glGetDebugMessageLog_PTR)(glGetDebugMessageLog_ARG_EXPAND);
GLuint glGetDebugMessageLogAMD(glGetDebugMessageLogAMD_ARG_EXPAND);
typedef GLuint (*glGetDebugMessageLogAMD_PTR)(glGetDebugMessageLogAMD_ARG_EXPAND);
GLuint glGetDebugMessageLogARB(glGetDebugMessageLogARB_ARG_EXPAND);
typedef GLuint (*glGetDebugMessageLogARB_PTR)(glGetDebugMessageLogARB_ARG_EXPAND);
void glGetDetailTexFuncSGIS(glGetDetailTexFuncSGIS_ARG_EXPAND);
typedef void (*glGetDetailTexFuncSGIS_PTR)(glGetDetailTexFuncSGIS_ARG_EXPAND);
void glGetDoubleIndexedvEXT(glGetDoubleIndexedvEXT_ARG_EXPAND);
typedef void (*glGetDoubleIndexedvEXT_PTR)(glGetDoubleIndexedvEXT_ARG_EXPAND);
void glGetDoublei_v(glGetDoublei_v_ARG_EXPAND);
typedef void (*glGetDoublei_v_PTR)(glGetDoublei_v_ARG_EXPAND);
void glGetDoublei_vEXT(glGetDoublei_vEXT_ARG_EXPAND);
typedef void (*glGetDoublei_vEXT_PTR)(glGetDoublei_vEXT_ARG_EXPAND);
void glGetDoublev(glGetDoublev_ARG_EXPAND);
typedef void (*glGetDoublev_PTR)(glGetDoublev_ARG_EXPAND);
GLenum glGetError(glGetError_ARG_EXPAND);
typedef GLenum (*glGetError_PTR)(glGetError_ARG_EXPAND);
void glGetFenceivNV(glGetFenceivNV_ARG_EXPAND);
typedef void (*glGetFenceivNV_PTR)(glGetFenceivNV_ARG_EXPAND);
void glGetFinalCombinerInputParameterfvNV(glGetFinalCombinerInputParameterfvNV_ARG_EXPAND);
typedef void (*glGetFinalCombinerInputParameterfvNV_PTR)(glGetFinalCombinerInputParameterfvNV_ARG_EXPAND);
void glGetFinalCombinerInputParameterivNV(glGetFinalCombinerInputParameterivNV_ARG_EXPAND);
typedef void (*glGetFinalCombinerInputParameterivNV_PTR)(glGetFinalCombinerInputParameterivNV_ARG_EXPAND);
void glGetFixedv(glGetFixedv_ARG_EXPAND);
typedef void (*glGetFixedv_PTR)(glGetFixedv_ARG_EXPAND);
void glGetFixedvOES(glGetFixedvOES_ARG_EXPAND);
typedef void (*glGetFixedvOES_PTR)(glGetFixedvOES_ARG_EXPAND);
void glGetFloatIndexedvEXT(glGetFloatIndexedvEXT_ARG_EXPAND);
typedef void (*glGetFloatIndexedvEXT_PTR)(glGetFloatIndexedvEXT_ARG_EXPAND);
void glGetFloati_v(glGetFloati_v_ARG_EXPAND);
typedef void (*glGetFloati_v_PTR)(glGetFloati_v_ARG_EXPAND);
void glGetFloati_vEXT(glGetFloati_vEXT_ARG_EXPAND);
typedef void (*glGetFloati_vEXT_PTR)(glGetFloati_vEXT_ARG_EXPAND);
void glGetFloatv(glGetFloatv_ARG_EXPAND);
typedef void (*glGetFloatv_PTR)(glGetFloatv_ARG_EXPAND);
void glGetFogFuncSGIS(glGetFogFuncSGIS_ARG_EXPAND);
typedef void (*glGetFogFuncSGIS_PTR)(glGetFogFuncSGIS_ARG_EXPAND);
GLint glGetFragDataIndex(glGetFragDataIndex_ARG_EXPAND);
typedef GLint (*glGetFragDataIndex_PTR)(glGetFragDataIndex_ARG_EXPAND);
GLint glGetFragDataLocation(glGetFragDataLocation_ARG_EXPAND);
typedef GLint (*glGetFragDataLocation_PTR)(glGetFragDataLocation_ARG_EXPAND);
GLint glGetFragDataLocationEXT(glGetFragDataLocationEXT_ARG_EXPAND);
typedef GLint (*glGetFragDataLocationEXT_PTR)(glGetFragDataLocationEXT_ARG_EXPAND);
void glGetFragmentLightfvSGIX(glGetFragmentLightfvSGIX_ARG_EXPAND);
typedef void (*glGetFragmentLightfvSGIX_PTR)(glGetFragmentLightfvSGIX_ARG_EXPAND);
void glGetFragmentLightivSGIX(glGetFragmentLightivSGIX_ARG_EXPAND);
typedef void (*glGetFragmentLightivSGIX_PTR)(glGetFragmentLightivSGIX_ARG_EXPAND);
void glGetFragmentMaterialfvSGIX(glGetFragmentMaterialfvSGIX_ARG_EXPAND);
typedef void (*glGetFragmentMaterialfvSGIX_PTR)(glGetFragmentMaterialfvSGIX_ARG_EXPAND);
void glGetFragmentMaterialivSGIX(glGetFragmentMaterialivSGIX_ARG_EXPAND);
typedef void (*glGetFragmentMaterialivSGIX_PTR)(glGetFragmentMaterialivSGIX_ARG_EXPAND);
void glGetFramebufferAttachmentParameteriv(glGetFramebufferAttachmentParameteriv_ARG_EXPAND);
typedef void (*glGetFramebufferAttachmentParameteriv_PTR)(glGetFramebufferAttachmentParameteriv_ARG_EXPAND);
void glGetFramebufferAttachmentParameterivEXT(glGetFramebufferAttachmentParameterivEXT_ARG_EXPAND);
typedef void (*glGetFramebufferAttachmentParameterivEXT_PTR)(glGetFramebufferAttachmentParameterivEXT_ARG_EXPAND);
void glGetFramebufferParameteriv(glGetFramebufferParameteriv_ARG_EXPAND);
typedef void (*glGetFramebufferParameteriv_PTR)(glGetFramebufferParameteriv_ARG_EXPAND);
void glGetFramebufferParameterivEXT(glGetFramebufferParameterivEXT_ARG_EXPAND);
typedef void (*glGetFramebufferParameterivEXT_PTR)(glGetFramebufferParameterivEXT_ARG_EXPAND);
GLenum glGetGraphicsResetStatusARB(glGetGraphicsResetStatusARB_ARG_EXPAND);
typedef GLenum (*glGetGraphicsResetStatusARB_PTR)(glGetGraphicsResetStatusARB_ARG_EXPAND);
GLhandleARB glGetHandleARB(glGetHandleARB_ARG_EXPAND);
typedef GLhandleARB (*glGetHandleARB_PTR)(glGetHandleARB_ARG_EXPAND);
void glGetHistogram(glGetHistogram_ARG_EXPAND);
typedef void (*glGetHistogram_PTR)(glGetHistogram_ARG_EXPAND);
void glGetHistogramEXT(glGetHistogramEXT_ARG_EXPAND);
typedef void (*glGetHistogramEXT_PTR)(glGetHistogramEXT_ARG_EXPAND);
void glGetHistogramParameterfv(glGetHistogramParameterfv_ARG_EXPAND);
typedef void (*glGetHistogramParameterfv_PTR)(glGetHistogramParameterfv_ARG_EXPAND);
void glGetHistogramParameterfvEXT(glGetHistogramParameterfvEXT_ARG_EXPAND);
typedef void (*glGetHistogramParameterfvEXT_PTR)(glGetHistogramParameterfvEXT_ARG_EXPAND);
void glGetHistogramParameteriv(glGetHistogramParameteriv_ARG_EXPAND);
typedef void (*glGetHistogramParameteriv_PTR)(glGetHistogramParameteriv_ARG_EXPAND);
void glGetHistogramParameterivEXT(glGetHistogramParameterivEXT_ARG_EXPAND);
typedef void (*glGetHistogramParameterivEXT_PTR)(glGetHistogramParameterivEXT_ARG_EXPAND);
void glGetHistogramParameterxvOES(glGetHistogramParameterxvOES_ARG_EXPAND);
typedef void (*glGetHistogramParameterxvOES_PTR)(glGetHistogramParameterxvOES_ARG_EXPAND);
GLuint64 glGetImageHandleNV(glGetImageHandleNV_ARG_EXPAND);
typedef GLuint64 (*glGetImageHandleNV_PTR)(glGetImageHandleNV_ARG_EXPAND);
void glGetImageTransformParameterfvHP(glGetImageTransformParameterfvHP_ARG_EXPAND);
typedef void (*glGetImageTransformParameterfvHP_PTR)(glGetImageTransformParameterfvHP_ARG_EXPAND);
void glGetImageTransformParameterivHP(glGetImageTransformParameterivHP_ARG_EXPAND);
typedef void (*glGetImageTransformParameterivHP_PTR)(glGetImageTransformParameterivHP_ARG_EXPAND);
void glGetInfoLogARB(glGetInfoLogARB_ARG_EXPAND);
typedef void (*glGetInfoLogARB_PTR)(glGetInfoLogARB_ARG_EXPAND);
GLint glGetInstrumentsSGIX(glGetInstrumentsSGIX_ARG_EXPAND);
typedef GLint (*glGetInstrumentsSGIX_PTR)(glGetInstrumentsSGIX_ARG_EXPAND);
void glGetInteger64i_v(glGetInteger64i_v_ARG_EXPAND);
typedef void (*glGetInteger64i_v_PTR)(glGetInteger64i_v_ARG_EXPAND);
void glGetInteger64v(glGetInteger64v_ARG_EXPAND);
typedef void (*glGetInteger64v_PTR)(glGetInteger64v_ARG_EXPAND);
void glGetIntegerIndexedvEXT(glGetIntegerIndexedvEXT_ARG_EXPAND);
typedef void (*glGetIntegerIndexedvEXT_PTR)(glGetIntegerIndexedvEXT_ARG_EXPAND);
void glGetIntegeri_v(glGetIntegeri_v_ARG_EXPAND);
typedef void (*glGetIntegeri_v_PTR)(glGetIntegeri_v_ARG_EXPAND);
void glGetIntegerui64i_vNV(glGetIntegerui64i_vNV_ARG_EXPAND);
typedef void (*glGetIntegerui64i_vNV_PTR)(glGetIntegerui64i_vNV_ARG_EXPAND);
void glGetIntegerui64vNV(glGetIntegerui64vNV_ARG_EXPAND);
typedef void (*glGetIntegerui64vNV_PTR)(glGetIntegerui64vNV_ARG_EXPAND);
void glGetIntegerv(glGetIntegerv_ARG_EXPAND);
typedef void (*glGetIntegerv_PTR)(glGetIntegerv_ARG_EXPAND);
void glGetInternalformati64v(glGetInternalformati64v_ARG_EXPAND);
typedef void (*glGetInternalformati64v_PTR)(glGetInternalformati64v_ARG_EXPAND);
void glGetInternalformativ(glGetInternalformativ_ARG_EXPAND);
typedef void (*glGetInternalformativ_PTR)(glGetInternalformativ_ARG_EXPAND);
void glGetInvariantBooleanvEXT(glGetInvariantBooleanvEXT_ARG_EXPAND);
typedef void (*glGetInvariantBooleanvEXT_PTR)(glGetInvariantBooleanvEXT_ARG_EXPAND);
void glGetInvariantFloatvEXT(glGetInvariantFloatvEXT_ARG_EXPAND);
typedef void (*glGetInvariantFloatvEXT_PTR)(glGetInvariantFloatvEXT_ARG_EXPAND);
void glGetInvariantIntegervEXT(glGetInvariantIntegervEXT_ARG_EXPAND);
typedef void (*glGetInvariantIntegervEXT_PTR)(glGetInvariantIntegervEXT_ARG_EXPAND);
void glGetLightfv(glGetLightfv_ARG_EXPAND);
typedef void (*glGetLightfv_PTR)(glGetLightfv_ARG_EXPAND);
void glGetLightiv(glGetLightiv_ARG_EXPAND);
typedef void (*glGetLightiv_PTR)(glGetLightiv_ARG_EXPAND);
void glGetLightxOES(glGetLightxOES_ARG_EXPAND);
typedef void (*glGetLightxOES_PTR)(glGetLightxOES_ARG_EXPAND);
void glGetLightxv(glGetLightxv_ARG_EXPAND);
typedef void (*glGetLightxv_PTR)(glGetLightxv_ARG_EXPAND);
void glGetListParameterfvSGIX(glGetListParameterfvSGIX_ARG_EXPAND);
typedef void (*glGetListParameterfvSGIX_PTR)(glGetListParameterfvSGIX_ARG_EXPAND);
void glGetListParameterivSGIX(glGetListParameterivSGIX_ARG_EXPAND);
typedef void (*glGetListParameterivSGIX_PTR)(glGetListParameterivSGIX_ARG_EXPAND);
void glGetLocalConstantBooleanvEXT(glGetLocalConstantBooleanvEXT_ARG_EXPAND);
typedef void (*glGetLocalConstantBooleanvEXT_PTR)(glGetLocalConstantBooleanvEXT_ARG_EXPAND);
void glGetLocalConstantFloatvEXT(glGetLocalConstantFloatvEXT_ARG_EXPAND);
typedef void (*glGetLocalConstantFloatvEXT_PTR)(glGetLocalConstantFloatvEXT_ARG_EXPAND);
void glGetLocalConstantIntegervEXT(glGetLocalConstantIntegervEXT_ARG_EXPAND);
typedef void (*glGetLocalConstantIntegervEXT_PTR)(glGetLocalConstantIntegervEXT_ARG_EXPAND);
void glGetMapAttribParameterfvNV(glGetMapAttribParameterfvNV_ARG_EXPAND);
typedef void (*glGetMapAttribParameterfvNV_PTR)(glGetMapAttribParameterfvNV_ARG_EXPAND);
void glGetMapAttribParameterivNV(glGetMapAttribParameterivNV_ARG_EXPAND);
typedef void (*glGetMapAttribParameterivNV_PTR)(glGetMapAttribParameterivNV_ARG_EXPAND);
void glGetMapControlPointsNV(glGetMapControlPointsNV_ARG_EXPAND);
typedef void (*glGetMapControlPointsNV_PTR)(glGetMapControlPointsNV_ARG_EXPAND);
void glGetMapParameterfvNV(glGetMapParameterfvNV_ARG_EXPAND);
typedef void (*glGetMapParameterfvNV_PTR)(glGetMapParameterfvNV_ARG_EXPAND);
void glGetMapParameterivNV(glGetMapParameterivNV_ARG_EXPAND);
typedef void (*glGetMapParameterivNV_PTR)(glGetMapParameterivNV_ARG_EXPAND);
void glGetMapdv(glGetMapdv_ARG_EXPAND);
typedef void (*glGetMapdv_PTR)(glGetMapdv_ARG_EXPAND);
void glGetMapfv(glGetMapfv_ARG_EXPAND);
typedef void (*glGetMapfv_PTR)(glGetMapfv_ARG_EXPAND);
void glGetMapiv(glGetMapiv_ARG_EXPAND);
typedef void (*glGetMapiv_PTR)(glGetMapiv_ARG_EXPAND);
void glGetMapxvOES(glGetMapxvOES_ARG_EXPAND);
typedef void (*glGetMapxvOES_PTR)(glGetMapxvOES_ARG_EXPAND);
void glGetMaterialfv(glGetMaterialfv_ARG_EXPAND);
typedef void (*glGetMaterialfv_PTR)(glGetMaterialfv_ARG_EXPAND);
void glGetMaterialiv(glGetMaterialiv_ARG_EXPAND);
typedef void (*glGetMaterialiv_PTR)(glGetMaterialiv_ARG_EXPAND);
void glGetMaterialxOES(glGetMaterialxOES_ARG_EXPAND);
typedef void (*glGetMaterialxOES_PTR)(glGetMaterialxOES_ARG_EXPAND);
void glGetMaterialxv(glGetMaterialxv_ARG_EXPAND);
typedef void (*glGetMaterialxv_PTR)(glGetMaterialxv_ARG_EXPAND);
void glGetMinmax(glGetMinmax_ARG_EXPAND);
typedef void (*glGetMinmax_PTR)(glGetMinmax_ARG_EXPAND);
void glGetMinmaxEXT(glGetMinmaxEXT_ARG_EXPAND);
typedef void (*glGetMinmaxEXT_PTR)(glGetMinmaxEXT_ARG_EXPAND);
void glGetMinmaxParameterfv(glGetMinmaxParameterfv_ARG_EXPAND);
typedef void (*glGetMinmaxParameterfv_PTR)(glGetMinmaxParameterfv_ARG_EXPAND);
void glGetMinmaxParameterfvEXT(glGetMinmaxParameterfvEXT_ARG_EXPAND);
typedef void (*glGetMinmaxParameterfvEXT_PTR)(glGetMinmaxParameterfvEXT_ARG_EXPAND);
void glGetMinmaxParameteriv(glGetMinmaxParameteriv_ARG_EXPAND);
typedef void (*glGetMinmaxParameteriv_PTR)(glGetMinmaxParameteriv_ARG_EXPAND);
void glGetMinmaxParameterivEXT(glGetMinmaxParameterivEXT_ARG_EXPAND);
typedef void (*glGetMinmaxParameterivEXT_PTR)(glGetMinmaxParameterivEXT_ARG_EXPAND);
void glGetMultiTexEnvfvEXT(glGetMultiTexEnvfvEXT_ARG_EXPAND);
typedef void (*glGetMultiTexEnvfvEXT_PTR)(glGetMultiTexEnvfvEXT_ARG_EXPAND);
void glGetMultiTexEnvivEXT(glGetMultiTexEnvivEXT_ARG_EXPAND);
typedef void (*glGetMultiTexEnvivEXT_PTR)(glGetMultiTexEnvivEXT_ARG_EXPAND);
void glGetMultiTexGendvEXT(glGetMultiTexGendvEXT_ARG_EXPAND);
typedef void (*glGetMultiTexGendvEXT_PTR)(glGetMultiTexGendvEXT_ARG_EXPAND);
void glGetMultiTexGenfvEXT(glGetMultiTexGenfvEXT_ARG_EXPAND);
typedef void (*glGetMultiTexGenfvEXT_PTR)(glGetMultiTexGenfvEXT_ARG_EXPAND);
void glGetMultiTexGenivEXT(glGetMultiTexGenivEXT_ARG_EXPAND);
typedef void (*glGetMultiTexGenivEXT_PTR)(glGetMultiTexGenivEXT_ARG_EXPAND);
void glGetMultiTexImageEXT(glGetMultiTexImageEXT_ARG_EXPAND);
typedef void (*glGetMultiTexImageEXT_PTR)(glGetMultiTexImageEXT_ARG_EXPAND);
void glGetMultiTexLevelParameterfvEXT(glGetMultiTexLevelParameterfvEXT_ARG_EXPAND);
typedef void (*glGetMultiTexLevelParameterfvEXT_PTR)(glGetMultiTexLevelParameterfvEXT_ARG_EXPAND);
void glGetMultiTexLevelParameterivEXT(glGetMultiTexLevelParameterivEXT_ARG_EXPAND);
typedef void (*glGetMultiTexLevelParameterivEXT_PTR)(glGetMultiTexLevelParameterivEXT_ARG_EXPAND);
void glGetMultiTexParameterIivEXT(glGetMultiTexParameterIivEXT_ARG_EXPAND);
typedef void (*glGetMultiTexParameterIivEXT_PTR)(glGetMultiTexParameterIivEXT_ARG_EXPAND);
void glGetMultiTexParameterIuivEXT(glGetMultiTexParameterIuivEXT_ARG_EXPAND);
typedef void (*glGetMultiTexParameterIuivEXT_PTR)(glGetMultiTexParameterIuivEXT_ARG_EXPAND);
void glGetMultiTexParameterfvEXT(glGetMultiTexParameterfvEXT_ARG_EXPAND);
typedef void (*glGetMultiTexParameterfvEXT_PTR)(glGetMultiTexParameterfvEXT_ARG_EXPAND);
void glGetMultiTexParameterivEXT(glGetMultiTexParameterivEXT_ARG_EXPAND);
typedef void (*glGetMultiTexParameterivEXT_PTR)(glGetMultiTexParameterivEXT_ARG_EXPAND);
void glGetMultisamplefv(glGetMultisamplefv_ARG_EXPAND);
typedef void (*glGetMultisamplefv_PTR)(glGetMultisamplefv_ARG_EXPAND);
void glGetMultisamplefvNV(glGetMultisamplefvNV_ARG_EXPAND);
typedef void (*glGetMultisamplefvNV_PTR)(glGetMultisamplefvNV_ARG_EXPAND);
void glGetNamedBufferParameterivEXT(glGetNamedBufferParameterivEXT_ARG_EXPAND);
typedef void (*glGetNamedBufferParameterivEXT_PTR)(glGetNamedBufferParameterivEXT_ARG_EXPAND);
void glGetNamedBufferParameterui64vNV(glGetNamedBufferParameterui64vNV_ARG_EXPAND);
typedef void (*glGetNamedBufferParameterui64vNV_PTR)(glGetNamedBufferParameterui64vNV_ARG_EXPAND);
void glGetNamedBufferPointervEXT(glGetNamedBufferPointervEXT_ARG_EXPAND);
typedef void (*glGetNamedBufferPointervEXT_PTR)(glGetNamedBufferPointervEXT_ARG_EXPAND);
void glGetNamedBufferSubDataEXT(glGetNamedBufferSubDataEXT_ARG_EXPAND);
typedef void (*glGetNamedBufferSubDataEXT_PTR)(glGetNamedBufferSubDataEXT_ARG_EXPAND);
void glGetNamedFramebufferAttachmentParameterivEXT(glGetNamedFramebufferAttachmentParameterivEXT_ARG_EXPAND);
typedef void (*glGetNamedFramebufferAttachmentParameterivEXT_PTR)(glGetNamedFramebufferAttachmentParameterivEXT_ARG_EXPAND);
void glGetNamedFramebufferParameterivEXT(glGetNamedFramebufferParameterivEXT_ARG_EXPAND);
typedef void (*glGetNamedFramebufferParameterivEXT_PTR)(glGetNamedFramebufferParameterivEXT_ARG_EXPAND);
void glGetNamedProgramLocalParameterIivEXT(glGetNamedProgramLocalParameterIivEXT_ARG_EXPAND);
typedef void (*glGetNamedProgramLocalParameterIivEXT_PTR)(glGetNamedProgramLocalParameterIivEXT_ARG_EXPAND);
void glGetNamedProgramLocalParameterIuivEXT(glGetNamedProgramLocalParameterIuivEXT_ARG_EXPAND);
typedef void (*glGetNamedProgramLocalParameterIuivEXT_PTR)(glGetNamedProgramLocalParameterIuivEXT_ARG_EXPAND);
void glGetNamedProgramLocalParameterdvEXT(glGetNamedProgramLocalParameterdvEXT_ARG_EXPAND);
typedef void (*glGetNamedProgramLocalParameterdvEXT_PTR)(glGetNamedProgramLocalParameterdvEXT_ARG_EXPAND);
void glGetNamedProgramLocalParameterfvEXT(glGetNamedProgramLocalParameterfvEXT_ARG_EXPAND);
typedef void (*glGetNamedProgramLocalParameterfvEXT_PTR)(glGetNamedProgramLocalParameterfvEXT_ARG_EXPAND);
void glGetNamedProgramStringEXT(glGetNamedProgramStringEXT_ARG_EXPAND);
typedef void (*glGetNamedProgramStringEXT_PTR)(glGetNamedProgramStringEXT_ARG_EXPAND);
void glGetNamedProgramivEXT(glGetNamedProgramivEXT_ARG_EXPAND);
typedef void (*glGetNamedProgramivEXT_PTR)(glGetNamedProgramivEXT_ARG_EXPAND);
void glGetNamedRenderbufferParameterivEXT(glGetNamedRenderbufferParameterivEXT_ARG_EXPAND);
typedef void (*glGetNamedRenderbufferParameterivEXT_PTR)(glGetNamedRenderbufferParameterivEXT_ARG_EXPAND);
void glGetNamedStringARB(glGetNamedStringARB_ARG_EXPAND);
typedef void (*glGetNamedStringARB_PTR)(glGetNamedStringARB_ARG_EXPAND);
void glGetNamedStringivARB(glGetNamedStringivARB_ARG_EXPAND);
typedef void (*glGetNamedStringivARB_PTR)(glGetNamedStringivARB_ARG_EXPAND);
void glGetObjectBufferfvATI(glGetObjectBufferfvATI_ARG_EXPAND);
typedef void (*glGetObjectBufferfvATI_PTR)(glGetObjectBufferfvATI_ARG_EXPAND);
void glGetObjectBufferivATI(glGetObjectBufferivATI_ARG_EXPAND);
typedef void (*glGetObjectBufferivATI_PTR)(glGetObjectBufferivATI_ARG_EXPAND);
void glGetObjectLabel(glGetObjectLabel_ARG_EXPAND);
typedef void (*glGetObjectLabel_PTR)(glGetObjectLabel_ARG_EXPAND);
void glGetObjectParameterfvARB(glGetObjectParameterfvARB_ARG_EXPAND);
typedef void (*glGetObjectParameterfvARB_PTR)(glGetObjectParameterfvARB_ARG_EXPAND);
void glGetObjectParameterivAPPLE(glGetObjectParameterivAPPLE_ARG_EXPAND);
typedef void (*glGetObjectParameterivAPPLE_PTR)(glGetObjectParameterivAPPLE_ARG_EXPAND);
void glGetObjectParameterivARB(glGetObjectParameterivARB_ARG_EXPAND);
typedef void (*glGetObjectParameterivARB_PTR)(glGetObjectParameterivARB_ARG_EXPAND);
void glGetObjectPtrLabel(glGetObjectPtrLabel_ARG_EXPAND);
typedef void (*glGetObjectPtrLabel_PTR)(glGetObjectPtrLabel_ARG_EXPAND);
void glGetOcclusionQueryivNV(glGetOcclusionQueryivNV_ARG_EXPAND);
typedef void (*glGetOcclusionQueryivNV_PTR)(glGetOcclusionQueryivNV_ARG_EXPAND);
void glGetOcclusionQueryuivNV(glGetOcclusionQueryuivNV_ARG_EXPAND);
typedef void (*glGetOcclusionQueryuivNV_PTR)(glGetOcclusionQueryuivNV_ARG_EXPAND);
void glGetPathColorGenfvNV(glGetPathColorGenfvNV_ARG_EXPAND);
typedef void (*glGetPathColorGenfvNV_PTR)(glGetPathColorGenfvNV_ARG_EXPAND);
void glGetPathColorGenivNV(glGetPathColorGenivNV_ARG_EXPAND);
typedef void (*glGetPathColorGenivNV_PTR)(glGetPathColorGenivNV_ARG_EXPAND);
void glGetPathCommandsNV(glGetPathCommandsNV_ARG_EXPAND);
typedef void (*glGetPathCommandsNV_PTR)(glGetPathCommandsNV_ARG_EXPAND);
void glGetPathCoordsNV(glGetPathCoordsNV_ARG_EXPAND);
typedef void (*glGetPathCoordsNV_PTR)(glGetPathCoordsNV_ARG_EXPAND);
void glGetPathDashArrayNV(glGetPathDashArrayNV_ARG_EXPAND);
typedef void (*glGetPathDashArrayNV_PTR)(glGetPathDashArrayNV_ARG_EXPAND);
GLfloat glGetPathLengthNV(glGetPathLengthNV_ARG_EXPAND);
typedef GLfloat (*glGetPathLengthNV_PTR)(glGetPathLengthNV_ARG_EXPAND);
void glGetPathMetricRangeNV(glGetPathMetricRangeNV_ARG_EXPAND);
typedef void (*glGetPathMetricRangeNV_PTR)(glGetPathMetricRangeNV_ARG_EXPAND);
void glGetPathMetricsNV(glGetPathMetricsNV_ARG_EXPAND);
typedef void (*glGetPathMetricsNV_PTR)(glGetPathMetricsNV_ARG_EXPAND);
void glGetPathParameterfvNV(glGetPathParameterfvNV_ARG_EXPAND);
typedef void (*glGetPathParameterfvNV_PTR)(glGetPathParameterfvNV_ARG_EXPAND);
void glGetPathParameterivNV(glGetPathParameterivNV_ARG_EXPAND);
typedef void (*glGetPathParameterivNV_PTR)(glGetPathParameterivNV_ARG_EXPAND);
void glGetPathSpacingNV(glGetPathSpacingNV_ARG_EXPAND);
typedef void (*glGetPathSpacingNV_PTR)(glGetPathSpacingNV_ARG_EXPAND);
void glGetPathTexGenfvNV(glGetPathTexGenfvNV_ARG_EXPAND);
typedef void (*glGetPathTexGenfvNV_PTR)(glGetPathTexGenfvNV_ARG_EXPAND);
void glGetPathTexGenivNV(glGetPathTexGenivNV_ARG_EXPAND);
typedef void (*glGetPathTexGenivNV_PTR)(glGetPathTexGenivNV_ARG_EXPAND);
void glGetPerfMonitorCounterDataAMD(glGetPerfMonitorCounterDataAMD_ARG_EXPAND);
typedef void (*glGetPerfMonitorCounterDataAMD_PTR)(glGetPerfMonitorCounterDataAMD_ARG_EXPAND);
void glGetPerfMonitorCounterInfoAMD(glGetPerfMonitorCounterInfoAMD_ARG_EXPAND);
typedef void (*glGetPerfMonitorCounterInfoAMD_PTR)(glGetPerfMonitorCounterInfoAMD_ARG_EXPAND);
void glGetPerfMonitorCounterStringAMD(glGetPerfMonitorCounterStringAMD_ARG_EXPAND);
typedef void (*glGetPerfMonitorCounterStringAMD_PTR)(glGetPerfMonitorCounterStringAMD_ARG_EXPAND);
void glGetPerfMonitorCountersAMD(glGetPerfMonitorCountersAMD_ARG_EXPAND);
typedef void (*glGetPerfMonitorCountersAMD_PTR)(glGetPerfMonitorCountersAMD_ARG_EXPAND);
void glGetPerfMonitorGroupStringAMD(glGetPerfMonitorGroupStringAMD_ARG_EXPAND);
typedef void (*glGetPerfMonitorGroupStringAMD_PTR)(glGetPerfMonitorGroupStringAMD_ARG_EXPAND);
void glGetPerfMonitorGroupsAMD(glGetPerfMonitorGroupsAMD_ARG_EXPAND);
typedef void (*glGetPerfMonitorGroupsAMD_PTR)(glGetPerfMonitorGroupsAMD_ARG_EXPAND);
void glGetPixelMapfv(glGetPixelMapfv_ARG_EXPAND);
typedef void (*glGetPixelMapfv_PTR)(glGetPixelMapfv_ARG_EXPAND);
void glGetPixelMapuiv(glGetPixelMapuiv_ARG_EXPAND);
typedef void (*glGetPixelMapuiv_PTR)(glGetPixelMapuiv_ARG_EXPAND);
void glGetPixelMapusv(glGetPixelMapusv_ARG_EXPAND);
typedef void (*glGetPixelMapusv_PTR)(glGetPixelMapusv_ARG_EXPAND);
void glGetPixelMapxv(glGetPixelMapxv_ARG_EXPAND);
typedef void (*glGetPixelMapxv_PTR)(glGetPixelMapxv_ARG_EXPAND);
void glGetPixelTexGenParameterfvSGIS(glGetPixelTexGenParameterfvSGIS_ARG_EXPAND);
typedef void (*glGetPixelTexGenParameterfvSGIS_PTR)(glGetPixelTexGenParameterfvSGIS_ARG_EXPAND);
void glGetPixelTexGenParameterivSGIS(glGetPixelTexGenParameterivSGIS_ARG_EXPAND);
typedef void (*glGetPixelTexGenParameterivSGIS_PTR)(glGetPixelTexGenParameterivSGIS_ARG_EXPAND);
void glGetPixelTransformParameterfvEXT(glGetPixelTransformParameterfvEXT_ARG_EXPAND);
typedef void (*glGetPixelTransformParameterfvEXT_PTR)(glGetPixelTransformParameterfvEXT_ARG_EXPAND);
void glGetPixelTransformParameterivEXT(glGetPixelTransformParameterivEXT_ARG_EXPAND);
typedef void (*glGetPixelTransformParameterivEXT_PTR)(glGetPixelTransformParameterivEXT_ARG_EXPAND);
void glGetPointerIndexedvEXT(glGetPointerIndexedvEXT_ARG_EXPAND);
typedef void (*glGetPointerIndexedvEXT_PTR)(glGetPointerIndexedvEXT_ARG_EXPAND);
void glGetPointeri_vEXT(glGetPointeri_vEXT_ARG_EXPAND);
typedef void (*glGetPointeri_vEXT_PTR)(glGetPointeri_vEXT_ARG_EXPAND);
void glGetPointerv(glGetPointerv_ARG_EXPAND);
typedef void (*glGetPointerv_PTR)(glGetPointerv_ARG_EXPAND);
void glGetPointervEXT(glGetPointervEXT_ARG_EXPAND);
typedef void (*glGetPointervEXT_PTR)(glGetPointervEXT_ARG_EXPAND);
void glGetPolygonStipple(glGetPolygonStipple_ARG_EXPAND);
typedef void (*glGetPolygonStipple_PTR)(glGetPolygonStipple_ARG_EXPAND);
void glGetProgramBinary(glGetProgramBinary_ARG_EXPAND);
typedef void (*glGetProgramBinary_PTR)(glGetProgramBinary_ARG_EXPAND);
void glGetProgramEnvParameterIivNV(glGetProgramEnvParameterIivNV_ARG_EXPAND);
typedef void (*glGetProgramEnvParameterIivNV_PTR)(glGetProgramEnvParameterIivNV_ARG_EXPAND);
void glGetProgramEnvParameterIuivNV(glGetProgramEnvParameterIuivNV_ARG_EXPAND);
typedef void (*glGetProgramEnvParameterIuivNV_PTR)(glGetProgramEnvParameterIuivNV_ARG_EXPAND);
void glGetProgramEnvParameterdvARB(glGetProgramEnvParameterdvARB_ARG_EXPAND);
typedef void (*glGetProgramEnvParameterdvARB_PTR)(glGetProgramEnvParameterdvARB_ARG_EXPAND);
void glGetProgramEnvParameterfvARB(glGetProgramEnvParameterfvARB_ARG_EXPAND);
typedef void (*glGetProgramEnvParameterfvARB_PTR)(glGetProgramEnvParameterfvARB_ARG_EXPAND);
void glGetProgramInfoLog(glGetProgramInfoLog_ARG_EXPAND);
typedef void (*glGetProgramInfoLog_PTR)(glGetProgramInfoLog_ARG_EXPAND);
void glGetProgramInterfaceiv(glGetProgramInterfaceiv_ARG_EXPAND);
typedef void (*glGetProgramInterfaceiv_PTR)(glGetProgramInterfaceiv_ARG_EXPAND);
void glGetProgramLocalParameterIivNV(glGetProgramLocalParameterIivNV_ARG_EXPAND);
typedef void (*glGetProgramLocalParameterIivNV_PTR)(glGetProgramLocalParameterIivNV_ARG_EXPAND);
void glGetProgramLocalParameterIuivNV(glGetProgramLocalParameterIuivNV_ARG_EXPAND);
typedef void (*glGetProgramLocalParameterIuivNV_PTR)(glGetProgramLocalParameterIuivNV_ARG_EXPAND);
void glGetProgramLocalParameterdvARB(glGetProgramLocalParameterdvARB_ARG_EXPAND);
typedef void (*glGetProgramLocalParameterdvARB_PTR)(glGetProgramLocalParameterdvARB_ARG_EXPAND);
void glGetProgramLocalParameterfvARB(glGetProgramLocalParameterfvARB_ARG_EXPAND);
typedef void (*glGetProgramLocalParameterfvARB_PTR)(glGetProgramLocalParameterfvARB_ARG_EXPAND);
void glGetProgramNamedParameterdvNV(glGetProgramNamedParameterdvNV_ARG_EXPAND);
typedef void (*glGetProgramNamedParameterdvNV_PTR)(glGetProgramNamedParameterdvNV_ARG_EXPAND);
void glGetProgramNamedParameterfvNV(glGetProgramNamedParameterfvNV_ARG_EXPAND);
typedef void (*glGetProgramNamedParameterfvNV_PTR)(glGetProgramNamedParameterfvNV_ARG_EXPAND);
void glGetProgramParameterdvNV(glGetProgramParameterdvNV_ARG_EXPAND);
typedef void (*glGetProgramParameterdvNV_PTR)(glGetProgramParameterdvNV_ARG_EXPAND);
void glGetProgramParameterfvNV(glGetProgramParameterfvNV_ARG_EXPAND);
typedef void (*glGetProgramParameterfvNV_PTR)(glGetProgramParameterfvNV_ARG_EXPAND);
void glGetProgramPipelineInfoLog(glGetProgramPipelineInfoLog_ARG_EXPAND);
typedef void (*glGetProgramPipelineInfoLog_PTR)(glGetProgramPipelineInfoLog_ARG_EXPAND);
void glGetProgramPipelineiv(glGetProgramPipelineiv_ARG_EXPAND);
typedef void (*glGetProgramPipelineiv_PTR)(glGetProgramPipelineiv_ARG_EXPAND);
GLuint glGetProgramResourceIndex(glGetProgramResourceIndex_ARG_EXPAND);
typedef GLuint (*glGetProgramResourceIndex_PTR)(glGetProgramResourceIndex_ARG_EXPAND);
GLint glGetProgramResourceLocation(glGetProgramResourceLocation_ARG_EXPAND);
typedef GLint (*glGetProgramResourceLocation_PTR)(glGetProgramResourceLocation_ARG_EXPAND);
GLint glGetProgramResourceLocationIndex(glGetProgramResourceLocationIndex_ARG_EXPAND);
typedef GLint (*glGetProgramResourceLocationIndex_PTR)(glGetProgramResourceLocationIndex_ARG_EXPAND);
void glGetProgramResourceName(glGetProgramResourceName_ARG_EXPAND);
typedef void (*glGetProgramResourceName_PTR)(glGetProgramResourceName_ARG_EXPAND);
void glGetProgramResourceiv(glGetProgramResourceiv_ARG_EXPAND);
typedef void (*glGetProgramResourceiv_PTR)(glGetProgramResourceiv_ARG_EXPAND);
void glGetProgramStageiv(glGetProgramStageiv_ARG_EXPAND);
typedef void (*glGetProgramStageiv_PTR)(glGetProgramStageiv_ARG_EXPAND);
void glGetProgramStringARB(glGetProgramStringARB_ARG_EXPAND);
typedef void (*glGetProgramStringARB_PTR)(glGetProgramStringARB_ARG_EXPAND);
void glGetProgramStringNV(glGetProgramStringNV_ARG_EXPAND);
typedef void (*glGetProgramStringNV_PTR)(glGetProgramStringNV_ARG_EXPAND);
void glGetProgramSubroutineParameteruivNV(glGetProgramSubroutineParameteruivNV_ARG_EXPAND);
typedef void (*glGetProgramSubroutineParameteruivNV_PTR)(glGetProgramSubroutineParameteruivNV_ARG_EXPAND);
void glGetProgramiv(glGetProgramiv_ARG_EXPAND);
typedef void (*glGetProgramiv_PTR)(glGetProgramiv_ARG_EXPAND);
void glGetProgramivARB(glGetProgramivARB_ARG_EXPAND);
typedef void (*glGetProgramivARB_PTR)(glGetProgramivARB_ARG_EXPAND);
void glGetProgramivNV(glGetProgramivNV_ARG_EXPAND);
typedef void (*glGetProgramivNV_PTR)(glGetProgramivNV_ARG_EXPAND);
void glGetQueryIndexediv(glGetQueryIndexediv_ARG_EXPAND);
typedef void (*glGetQueryIndexediv_PTR)(glGetQueryIndexediv_ARG_EXPAND);
void glGetQueryObjecti64v(glGetQueryObjecti64v_ARG_EXPAND);
typedef void (*glGetQueryObjecti64v_PTR)(glGetQueryObjecti64v_ARG_EXPAND);
void glGetQueryObjecti64vEXT(glGetQueryObjecti64vEXT_ARG_EXPAND);
typedef void (*glGetQueryObjecti64vEXT_PTR)(glGetQueryObjecti64vEXT_ARG_EXPAND);
void glGetQueryObjectiv(glGetQueryObjectiv_ARG_EXPAND);
typedef void (*glGetQueryObjectiv_PTR)(glGetQueryObjectiv_ARG_EXPAND);
void glGetQueryObjectivARB(glGetQueryObjectivARB_ARG_EXPAND);
typedef void (*glGetQueryObjectivARB_PTR)(glGetQueryObjectivARB_ARG_EXPAND);
void glGetQueryObjectui64v(glGetQueryObjectui64v_ARG_EXPAND);
typedef void (*glGetQueryObjectui64v_PTR)(glGetQueryObjectui64v_ARG_EXPAND);
void glGetQueryObjectui64vEXT(glGetQueryObjectui64vEXT_ARG_EXPAND);
typedef void (*glGetQueryObjectui64vEXT_PTR)(glGetQueryObjectui64vEXT_ARG_EXPAND);
void glGetQueryObjectuiv(glGetQueryObjectuiv_ARG_EXPAND);
typedef void (*glGetQueryObjectuiv_PTR)(glGetQueryObjectuiv_ARG_EXPAND);
void glGetQueryObjectuivARB(glGetQueryObjectuivARB_ARG_EXPAND);
typedef void (*glGetQueryObjectuivARB_PTR)(glGetQueryObjectuivARB_ARG_EXPAND);
void glGetQueryiv(glGetQueryiv_ARG_EXPAND);
typedef void (*glGetQueryiv_PTR)(glGetQueryiv_ARG_EXPAND);
void glGetQueryivARB(glGetQueryivARB_ARG_EXPAND);
typedef void (*glGetQueryivARB_PTR)(glGetQueryivARB_ARG_EXPAND);
void glGetRenderbufferParameteriv(glGetRenderbufferParameteriv_ARG_EXPAND);
typedef void (*glGetRenderbufferParameteriv_PTR)(glGetRenderbufferParameteriv_ARG_EXPAND);
void glGetRenderbufferParameterivEXT(glGetRenderbufferParameterivEXT_ARG_EXPAND);
typedef void (*glGetRenderbufferParameterivEXT_PTR)(glGetRenderbufferParameterivEXT_ARG_EXPAND);
void glGetSamplerParameterIiv(glGetSamplerParameterIiv_ARG_EXPAND);
typedef void (*glGetSamplerParameterIiv_PTR)(glGetSamplerParameterIiv_ARG_EXPAND);
void glGetSamplerParameterIuiv(glGetSamplerParameterIuiv_ARG_EXPAND);
typedef void (*glGetSamplerParameterIuiv_PTR)(glGetSamplerParameterIuiv_ARG_EXPAND);
void glGetSamplerParameterfv(glGetSamplerParameterfv_ARG_EXPAND);
typedef void (*glGetSamplerParameterfv_PTR)(glGetSamplerParameterfv_ARG_EXPAND);
void glGetSamplerParameteriv(glGetSamplerParameteriv_ARG_EXPAND);
typedef void (*glGetSamplerParameteriv_PTR)(glGetSamplerParameteriv_ARG_EXPAND);
void glGetSeparableFilter(glGetSeparableFilter_ARG_EXPAND);
typedef void (*glGetSeparableFilter_PTR)(glGetSeparableFilter_ARG_EXPAND);
void glGetSeparableFilterEXT(glGetSeparableFilterEXT_ARG_EXPAND);
typedef void (*glGetSeparableFilterEXT_PTR)(glGetSeparableFilterEXT_ARG_EXPAND);
void glGetShaderInfoLog(glGetShaderInfoLog_ARG_EXPAND);
typedef void (*glGetShaderInfoLog_PTR)(glGetShaderInfoLog_ARG_EXPAND);
void glGetShaderPrecisionFormat(glGetShaderPrecisionFormat_ARG_EXPAND);
typedef void (*glGetShaderPrecisionFormat_PTR)(glGetShaderPrecisionFormat_ARG_EXPAND);
void glGetShaderSource(glGetShaderSource_ARG_EXPAND);
typedef void (*glGetShaderSource_PTR)(glGetShaderSource_ARG_EXPAND);
void glGetShaderSourceARB(glGetShaderSourceARB_ARG_EXPAND);
typedef void (*glGetShaderSourceARB_PTR)(glGetShaderSourceARB_ARG_EXPAND);
void glGetShaderiv(glGetShaderiv_ARG_EXPAND);
typedef void (*glGetShaderiv_PTR)(glGetShaderiv_ARG_EXPAND);
void glGetSharpenTexFuncSGIS(glGetSharpenTexFuncSGIS_ARG_EXPAND);
typedef void (*glGetSharpenTexFuncSGIS_PTR)(glGetSharpenTexFuncSGIS_ARG_EXPAND);
const GLubyte * glGetString(glGetString_ARG_EXPAND);
typedef const GLubyte * (*glGetString_PTR)(glGetString_ARG_EXPAND);
const GLubyte * glGetStringi(glGetStringi_ARG_EXPAND);
typedef const GLubyte * (*glGetStringi_PTR)(glGetStringi_ARG_EXPAND);
GLuint glGetSubroutineIndex(glGetSubroutineIndex_ARG_EXPAND);
typedef GLuint (*glGetSubroutineIndex_PTR)(glGetSubroutineIndex_ARG_EXPAND);
GLint glGetSubroutineUniformLocation(glGetSubroutineUniformLocation_ARG_EXPAND);
typedef GLint (*glGetSubroutineUniformLocation_PTR)(glGetSubroutineUniformLocation_ARG_EXPAND);
void glGetSynciv(glGetSynciv_ARG_EXPAND);
typedef void (*glGetSynciv_PTR)(glGetSynciv_ARG_EXPAND);
void glGetTexBumpParameterfvATI(glGetTexBumpParameterfvATI_ARG_EXPAND);
typedef void (*glGetTexBumpParameterfvATI_PTR)(glGetTexBumpParameterfvATI_ARG_EXPAND);
void glGetTexBumpParameterivATI(glGetTexBumpParameterivATI_ARG_EXPAND);
typedef void (*glGetTexBumpParameterivATI_PTR)(glGetTexBumpParameterivATI_ARG_EXPAND);
void glGetTexEnvfv(glGetTexEnvfv_ARG_EXPAND);
typedef void (*glGetTexEnvfv_PTR)(glGetTexEnvfv_ARG_EXPAND);
void glGetTexEnviv(glGetTexEnviv_ARG_EXPAND);
typedef void (*glGetTexEnviv_PTR)(glGetTexEnviv_ARG_EXPAND);
void glGetTexEnvxv(glGetTexEnvxv_ARG_EXPAND);
typedef void (*glGetTexEnvxv_PTR)(glGetTexEnvxv_ARG_EXPAND);
void glGetTexEnvxvOES(glGetTexEnvxvOES_ARG_EXPAND);
typedef void (*glGetTexEnvxvOES_PTR)(glGetTexEnvxvOES_ARG_EXPAND);
void glGetTexFilterFuncSGIS(glGetTexFilterFuncSGIS_ARG_EXPAND);
typedef void (*glGetTexFilterFuncSGIS_PTR)(glGetTexFilterFuncSGIS_ARG_EXPAND);
void glGetTexGendv(glGetTexGendv_ARG_EXPAND);
typedef void (*glGetTexGendv_PTR)(glGetTexGendv_ARG_EXPAND);
void glGetTexGenfv(glGetTexGenfv_ARG_EXPAND);
typedef void (*glGetTexGenfv_PTR)(glGetTexGenfv_ARG_EXPAND);
void glGetTexGeniv(glGetTexGeniv_ARG_EXPAND);
typedef void (*glGetTexGeniv_PTR)(glGetTexGeniv_ARG_EXPAND);
void glGetTexGenxvOES(glGetTexGenxvOES_ARG_EXPAND);
typedef void (*glGetTexGenxvOES_PTR)(glGetTexGenxvOES_ARG_EXPAND);
void glGetTexImage(glGetTexImage_ARG_EXPAND);
typedef void (*glGetTexImage_PTR)(glGetTexImage_ARG_EXPAND);
void glGetTexLevelParameterfv(glGetTexLevelParameterfv_ARG_EXPAND);
typedef void (*glGetTexLevelParameterfv_PTR)(glGetTexLevelParameterfv_ARG_EXPAND);
void glGetTexLevelParameteriv(glGetTexLevelParameteriv_ARG_EXPAND);
typedef void (*glGetTexLevelParameteriv_PTR)(glGetTexLevelParameteriv_ARG_EXPAND);
void glGetTexLevelParameterxvOES(glGetTexLevelParameterxvOES_ARG_EXPAND);
typedef void (*glGetTexLevelParameterxvOES_PTR)(glGetTexLevelParameterxvOES_ARG_EXPAND);
void glGetTexParameterIiv(glGetTexParameterIiv_ARG_EXPAND);
typedef void (*glGetTexParameterIiv_PTR)(glGetTexParameterIiv_ARG_EXPAND);
void glGetTexParameterIivEXT(glGetTexParameterIivEXT_ARG_EXPAND);
typedef void (*glGetTexParameterIivEXT_PTR)(glGetTexParameterIivEXT_ARG_EXPAND);
void glGetTexParameterIuiv(glGetTexParameterIuiv_ARG_EXPAND);
typedef void (*glGetTexParameterIuiv_PTR)(glGetTexParameterIuiv_ARG_EXPAND);
void glGetTexParameterIuivEXT(glGetTexParameterIuivEXT_ARG_EXPAND);
typedef void (*glGetTexParameterIuivEXT_PTR)(glGetTexParameterIuivEXT_ARG_EXPAND);
void glGetTexParameterPointervAPPLE(glGetTexParameterPointervAPPLE_ARG_EXPAND);
typedef void (*glGetTexParameterPointervAPPLE_PTR)(glGetTexParameterPointervAPPLE_ARG_EXPAND);
void glGetTexParameterfv(glGetTexParameterfv_ARG_EXPAND);
typedef void (*glGetTexParameterfv_PTR)(glGetTexParameterfv_ARG_EXPAND);
void glGetTexParameteriv(glGetTexParameteriv_ARG_EXPAND);
typedef void (*glGetTexParameteriv_PTR)(glGetTexParameteriv_ARG_EXPAND);
void glGetTexParameterxv(glGetTexParameterxv_ARG_EXPAND);
typedef void (*glGetTexParameterxv_PTR)(glGetTexParameterxv_ARG_EXPAND);
void glGetTexParameterxvOES(glGetTexParameterxvOES_ARG_EXPAND);
typedef void (*glGetTexParameterxvOES_PTR)(glGetTexParameterxvOES_ARG_EXPAND);
GLuint64 glGetTextureHandleNV(glGetTextureHandleNV_ARG_EXPAND);
typedef GLuint64 (*glGetTextureHandleNV_PTR)(glGetTextureHandleNV_ARG_EXPAND);
void glGetTextureImageEXT(glGetTextureImageEXT_ARG_EXPAND);
typedef void (*glGetTextureImageEXT_PTR)(glGetTextureImageEXT_ARG_EXPAND);
void glGetTextureLevelParameterfvEXT(glGetTextureLevelParameterfvEXT_ARG_EXPAND);
typedef void (*glGetTextureLevelParameterfvEXT_PTR)(glGetTextureLevelParameterfvEXT_ARG_EXPAND);
void glGetTextureLevelParameterivEXT(glGetTextureLevelParameterivEXT_ARG_EXPAND);
typedef void (*glGetTextureLevelParameterivEXT_PTR)(glGetTextureLevelParameterivEXT_ARG_EXPAND);
void glGetTextureParameterIivEXT(glGetTextureParameterIivEXT_ARG_EXPAND);
typedef void (*glGetTextureParameterIivEXT_PTR)(glGetTextureParameterIivEXT_ARG_EXPAND);
void glGetTextureParameterIuivEXT(glGetTextureParameterIuivEXT_ARG_EXPAND);
typedef void (*glGetTextureParameterIuivEXT_PTR)(glGetTextureParameterIuivEXT_ARG_EXPAND);
void glGetTextureParameterfvEXT(glGetTextureParameterfvEXT_ARG_EXPAND);
typedef void (*glGetTextureParameterfvEXT_PTR)(glGetTextureParameterfvEXT_ARG_EXPAND);
void glGetTextureParameterivEXT(glGetTextureParameterivEXT_ARG_EXPAND);
typedef void (*glGetTextureParameterivEXT_PTR)(glGetTextureParameterivEXT_ARG_EXPAND);
GLuint64 glGetTextureSamplerHandleNV(glGetTextureSamplerHandleNV_ARG_EXPAND);
typedef GLuint64 (*glGetTextureSamplerHandleNV_PTR)(glGetTextureSamplerHandleNV_ARG_EXPAND);
void glGetTrackMatrixivNV(glGetTrackMatrixivNV_ARG_EXPAND);
typedef void (*glGetTrackMatrixivNV_PTR)(glGetTrackMatrixivNV_ARG_EXPAND);
void glGetTransformFeedbackVarying(glGetTransformFeedbackVarying_ARG_EXPAND);
typedef void (*glGetTransformFeedbackVarying_PTR)(glGetTransformFeedbackVarying_ARG_EXPAND);
void glGetTransformFeedbackVaryingEXT(glGetTransformFeedbackVaryingEXT_ARG_EXPAND);
typedef void (*glGetTransformFeedbackVaryingEXT_PTR)(glGetTransformFeedbackVaryingEXT_ARG_EXPAND);
void glGetTransformFeedbackVaryingNV(glGetTransformFeedbackVaryingNV_ARG_EXPAND);
typedef void (*glGetTransformFeedbackVaryingNV_PTR)(glGetTransformFeedbackVaryingNV_ARG_EXPAND);
GLuint glGetUniformBlockIndex(glGetUniformBlockIndex_ARG_EXPAND);
typedef GLuint (*glGetUniformBlockIndex_PTR)(glGetUniformBlockIndex_ARG_EXPAND);
GLint glGetUniformBufferSizeEXT(glGetUniformBufferSizeEXT_ARG_EXPAND);
typedef GLint (*glGetUniformBufferSizeEXT_PTR)(glGetUniformBufferSizeEXT_ARG_EXPAND);
void glGetUniformIndices(glGetUniformIndices_ARG_EXPAND);
typedef void (*glGetUniformIndices_PTR)(glGetUniformIndices_ARG_EXPAND);
GLint glGetUniformLocation(glGetUniformLocation_ARG_EXPAND);
typedef GLint (*glGetUniformLocation_PTR)(glGetUniformLocation_ARG_EXPAND);
GLint glGetUniformLocationARB(glGetUniformLocationARB_ARG_EXPAND);
typedef GLint (*glGetUniformLocationARB_PTR)(glGetUniformLocationARB_ARG_EXPAND);
GLintptr glGetUniformOffsetEXT(glGetUniformOffsetEXT_ARG_EXPAND);
typedef GLintptr (*glGetUniformOffsetEXT_PTR)(glGetUniformOffsetEXT_ARG_EXPAND);
void glGetUniformSubroutineuiv(glGetUniformSubroutineuiv_ARG_EXPAND);
typedef void (*glGetUniformSubroutineuiv_PTR)(glGetUniformSubroutineuiv_ARG_EXPAND);
void glGetUniformdv(glGetUniformdv_ARG_EXPAND);
typedef void (*glGetUniformdv_PTR)(glGetUniformdv_ARG_EXPAND);
void glGetUniformfv(glGetUniformfv_ARG_EXPAND);
typedef void (*glGetUniformfv_PTR)(glGetUniformfv_ARG_EXPAND);
void glGetUniformfvARB(glGetUniformfvARB_ARG_EXPAND);
typedef void (*glGetUniformfvARB_PTR)(glGetUniformfvARB_ARG_EXPAND);
void glGetUniformi64vNV(glGetUniformi64vNV_ARG_EXPAND);
typedef void (*glGetUniformi64vNV_PTR)(glGetUniformi64vNV_ARG_EXPAND);
void glGetUniformiv(glGetUniformiv_ARG_EXPAND);
typedef void (*glGetUniformiv_PTR)(glGetUniformiv_ARG_EXPAND);
void glGetUniformivARB(glGetUniformivARB_ARG_EXPAND);
typedef void (*glGetUniformivARB_PTR)(glGetUniformivARB_ARG_EXPAND);
void glGetUniformui64vNV(glGetUniformui64vNV_ARG_EXPAND);
typedef void (*glGetUniformui64vNV_PTR)(glGetUniformui64vNV_ARG_EXPAND);
void glGetUniformuiv(glGetUniformuiv_ARG_EXPAND);
typedef void (*glGetUniformuiv_PTR)(glGetUniformuiv_ARG_EXPAND);
void glGetUniformuivEXT(glGetUniformuivEXT_ARG_EXPAND);
typedef void (*glGetUniformuivEXT_PTR)(glGetUniformuivEXT_ARG_EXPAND);
void glGetVariantArrayObjectfvATI(glGetVariantArrayObjectfvATI_ARG_EXPAND);
typedef void (*glGetVariantArrayObjectfvATI_PTR)(glGetVariantArrayObjectfvATI_ARG_EXPAND);
void glGetVariantArrayObjectivATI(glGetVariantArrayObjectivATI_ARG_EXPAND);
typedef void (*glGetVariantArrayObjectivATI_PTR)(glGetVariantArrayObjectivATI_ARG_EXPAND);
void glGetVariantBooleanvEXT(glGetVariantBooleanvEXT_ARG_EXPAND);
typedef void (*glGetVariantBooleanvEXT_PTR)(glGetVariantBooleanvEXT_ARG_EXPAND);
void glGetVariantFloatvEXT(glGetVariantFloatvEXT_ARG_EXPAND);
typedef void (*glGetVariantFloatvEXT_PTR)(glGetVariantFloatvEXT_ARG_EXPAND);
void glGetVariantIntegervEXT(glGetVariantIntegervEXT_ARG_EXPAND);
typedef void (*glGetVariantIntegervEXT_PTR)(glGetVariantIntegervEXT_ARG_EXPAND);
void glGetVariantPointervEXT(glGetVariantPointervEXT_ARG_EXPAND);
typedef void (*glGetVariantPointervEXT_PTR)(glGetVariantPointervEXT_ARG_EXPAND);
GLint glGetVaryingLocationNV(glGetVaryingLocationNV_ARG_EXPAND);
typedef GLint (*glGetVaryingLocationNV_PTR)(glGetVaryingLocationNV_ARG_EXPAND);
void glGetVertexArrayIntegeri_vEXT(glGetVertexArrayIntegeri_vEXT_ARG_EXPAND);
typedef void (*glGetVertexArrayIntegeri_vEXT_PTR)(glGetVertexArrayIntegeri_vEXT_ARG_EXPAND);
void glGetVertexArrayIntegervEXT(glGetVertexArrayIntegervEXT_ARG_EXPAND);
typedef void (*glGetVertexArrayIntegervEXT_PTR)(glGetVertexArrayIntegervEXT_ARG_EXPAND);
void glGetVertexArrayPointeri_vEXT(glGetVertexArrayPointeri_vEXT_ARG_EXPAND);
typedef void (*glGetVertexArrayPointeri_vEXT_PTR)(glGetVertexArrayPointeri_vEXT_ARG_EXPAND);
void glGetVertexArrayPointervEXT(glGetVertexArrayPointervEXT_ARG_EXPAND);
typedef void (*glGetVertexArrayPointervEXT_PTR)(glGetVertexArrayPointervEXT_ARG_EXPAND);
void glGetVertexAttribArrayObjectfvATI(glGetVertexAttribArrayObjectfvATI_ARG_EXPAND);
typedef void (*glGetVertexAttribArrayObjectfvATI_PTR)(glGetVertexAttribArrayObjectfvATI_ARG_EXPAND);
void glGetVertexAttribArrayObjectivATI(glGetVertexAttribArrayObjectivATI_ARG_EXPAND);
typedef void (*glGetVertexAttribArrayObjectivATI_PTR)(glGetVertexAttribArrayObjectivATI_ARG_EXPAND);
void glGetVertexAttribIiv(glGetVertexAttribIiv_ARG_EXPAND);
typedef void (*glGetVertexAttribIiv_PTR)(glGetVertexAttribIiv_ARG_EXPAND);
void glGetVertexAttribIivEXT(glGetVertexAttribIivEXT_ARG_EXPAND);
typedef void (*glGetVertexAttribIivEXT_PTR)(glGetVertexAttribIivEXT_ARG_EXPAND);
void glGetVertexAttribIuiv(glGetVertexAttribIuiv_ARG_EXPAND);
typedef void (*glGetVertexAttribIuiv_PTR)(glGetVertexAttribIuiv_ARG_EXPAND);
void glGetVertexAttribIuivEXT(glGetVertexAttribIuivEXT_ARG_EXPAND);
typedef void (*glGetVertexAttribIuivEXT_PTR)(glGetVertexAttribIuivEXT_ARG_EXPAND);
void glGetVertexAttribLdv(glGetVertexAttribLdv_ARG_EXPAND);
typedef void (*glGetVertexAttribLdv_PTR)(glGetVertexAttribLdv_ARG_EXPAND);
void glGetVertexAttribLdvEXT(glGetVertexAttribLdvEXT_ARG_EXPAND);
typedef void (*glGetVertexAttribLdvEXT_PTR)(glGetVertexAttribLdvEXT_ARG_EXPAND);
void glGetVertexAttribLi64vNV(glGetVertexAttribLi64vNV_ARG_EXPAND);
typedef void (*glGetVertexAttribLi64vNV_PTR)(glGetVertexAttribLi64vNV_ARG_EXPAND);
void glGetVertexAttribLui64vNV(glGetVertexAttribLui64vNV_ARG_EXPAND);
typedef void (*glGetVertexAttribLui64vNV_PTR)(glGetVertexAttribLui64vNV_ARG_EXPAND);
void glGetVertexAttribPointerv(glGetVertexAttribPointerv_ARG_EXPAND);
typedef void (*glGetVertexAttribPointerv_PTR)(glGetVertexAttribPointerv_ARG_EXPAND);
void glGetVertexAttribPointervARB(glGetVertexAttribPointervARB_ARG_EXPAND);
typedef void (*glGetVertexAttribPointervARB_PTR)(glGetVertexAttribPointervARB_ARG_EXPAND);
void glGetVertexAttribPointervNV(glGetVertexAttribPointervNV_ARG_EXPAND);
typedef void (*glGetVertexAttribPointervNV_PTR)(glGetVertexAttribPointervNV_ARG_EXPAND);
void glGetVertexAttribdv(glGetVertexAttribdv_ARG_EXPAND);
typedef void (*glGetVertexAttribdv_PTR)(glGetVertexAttribdv_ARG_EXPAND);
void glGetVertexAttribdvARB(glGetVertexAttribdvARB_ARG_EXPAND);
typedef void (*glGetVertexAttribdvARB_PTR)(glGetVertexAttribdvARB_ARG_EXPAND);
void glGetVertexAttribdvNV(glGetVertexAttribdvNV_ARG_EXPAND);
typedef void (*glGetVertexAttribdvNV_PTR)(glGetVertexAttribdvNV_ARG_EXPAND);
void glGetVertexAttribfv(glGetVertexAttribfv_ARG_EXPAND);
typedef void (*glGetVertexAttribfv_PTR)(glGetVertexAttribfv_ARG_EXPAND);
void glGetVertexAttribfvARB(glGetVertexAttribfvARB_ARG_EXPAND);
typedef void (*glGetVertexAttribfvARB_PTR)(glGetVertexAttribfvARB_ARG_EXPAND);
void glGetVertexAttribfvNV(glGetVertexAttribfvNV_ARG_EXPAND);
typedef void (*glGetVertexAttribfvNV_PTR)(glGetVertexAttribfvNV_ARG_EXPAND);
void glGetVertexAttribiv(glGetVertexAttribiv_ARG_EXPAND);
typedef void (*glGetVertexAttribiv_PTR)(glGetVertexAttribiv_ARG_EXPAND);
void glGetVertexAttribivARB(glGetVertexAttribivARB_ARG_EXPAND);
typedef void (*glGetVertexAttribivARB_PTR)(glGetVertexAttribivARB_ARG_EXPAND);
void glGetVertexAttribivNV(glGetVertexAttribivNV_ARG_EXPAND);
typedef void (*glGetVertexAttribivNV_PTR)(glGetVertexAttribivNV_ARG_EXPAND);
void glGetVideoCaptureStreamdvNV(glGetVideoCaptureStreamdvNV_ARG_EXPAND);
typedef void (*glGetVideoCaptureStreamdvNV_PTR)(glGetVideoCaptureStreamdvNV_ARG_EXPAND);
void glGetVideoCaptureStreamfvNV(glGetVideoCaptureStreamfvNV_ARG_EXPAND);
typedef void (*glGetVideoCaptureStreamfvNV_PTR)(glGetVideoCaptureStreamfvNV_ARG_EXPAND);
void glGetVideoCaptureStreamivNV(glGetVideoCaptureStreamivNV_ARG_EXPAND);
typedef void (*glGetVideoCaptureStreamivNV_PTR)(glGetVideoCaptureStreamivNV_ARG_EXPAND);
void glGetVideoCaptureivNV(glGetVideoCaptureivNV_ARG_EXPAND);
typedef void (*glGetVideoCaptureivNV_PTR)(glGetVideoCaptureivNV_ARG_EXPAND);
void glGetVideoi64vNV(glGetVideoi64vNV_ARG_EXPAND);
typedef void (*glGetVideoi64vNV_PTR)(glGetVideoi64vNV_ARG_EXPAND);
void glGetVideoivNV(glGetVideoivNV_ARG_EXPAND);
typedef void (*glGetVideoivNV_PTR)(glGetVideoivNV_ARG_EXPAND);
void glGetVideoui64vNV(glGetVideoui64vNV_ARG_EXPAND);
typedef void (*glGetVideoui64vNV_PTR)(glGetVideoui64vNV_ARG_EXPAND);
void glGetVideouivNV(glGetVideouivNV_ARG_EXPAND);
typedef void (*glGetVideouivNV_PTR)(glGetVideouivNV_ARG_EXPAND);
void glGetnColorTableARB(glGetnColorTableARB_ARG_EXPAND);
typedef void (*glGetnColorTableARB_PTR)(glGetnColorTableARB_ARG_EXPAND);
void glGetnCompressedTexImageARB(glGetnCompressedTexImageARB_ARG_EXPAND);
typedef void (*glGetnCompressedTexImageARB_PTR)(glGetnCompressedTexImageARB_ARG_EXPAND);
void glGetnConvolutionFilterARB(glGetnConvolutionFilterARB_ARG_EXPAND);
typedef void (*glGetnConvolutionFilterARB_PTR)(glGetnConvolutionFilterARB_ARG_EXPAND);
void glGetnHistogramARB(glGetnHistogramARB_ARG_EXPAND);
typedef void (*glGetnHistogramARB_PTR)(glGetnHistogramARB_ARG_EXPAND);
void glGetnMapdvARB(glGetnMapdvARB_ARG_EXPAND);
typedef void (*glGetnMapdvARB_PTR)(glGetnMapdvARB_ARG_EXPAND);
void glGetnMapfvARB(glGetnMapfvARB_ARG_EXPAND);
typedef void (*glGetnMapfvARB_PTR)(glGetnMapfvARB_ARG_EXPAND);
void glGetnMapivARB(glGetnMapivARB_ARG_EXPAND);
typedef void (*glGetnMapivARB_PTR)(glGetnMapivARB_ARG_EXPAND);
void glGetnMinmaxARB(glGetnMinmaxARB_ARG_EXPAND);
typedef void (*glGetnMinmaxARB_PTR)(glGetnMinmaxARB_ARG_EXPAND);
void glGetnPixelMapfvARB(glGetnPixelMapfvARB_ARG_EXPAND);
typedef void (*glGetnPixelMapfvARB_PTR)(glGetnPixelMapfvARB_ARG_EXPAND);
void glGetnPixelMapuivARB(glGetnPixelMapuivARB_ARG_EXPAND);
typedef void (*glGetnPixelMapuivARB_PTR)(glGetnPixelMapuivARB_ARG_EXPAND);
void glGetnPixelMapusvARB(glGetnPixelMapusvARB_ARG_EXPAND);
typedef void (*glGetnPixelMapusvARB_PTR)(glGetnPixelMapusvARB_ARG_EXPAND);
void glGetnPolygonStippleARB(glGetnPolygonStippleARB_ARG_EXPAND);
typedef void (*glGetnPolygonStippleARB_PTR)(glGetnPolygonStippleARB_ARG_EXPAND);
void glGetnSeparableFilterARB(glGetnSeparableFilterARB_ARG_EXPAND);
typedef void (*glGetnSeparableFilterARB_PTR)(glGetnSeparableFilterARB_ARG_EXPAND);
void glGetnTexImageARB(glGetnTexImageARB_ARG_EXPAND);
typedef void (*glGetnTexImageARB_PTR)(glGetnTexImageARB_ARG_EXPAND);
void glGetnUniformdvARB(glGetnUniformdvARB_ARG_EXPAND);
typedef void (*glGetnUniformdvARB_PTR)(glGetnUniformdvARB_ARG_EXPAND);
void glGetnUniformfvARB(glGetnUniformfvARB_ARG_EXPAND);
typedef void (*glGetnUniformfvARB_PTR)(glGetnUniformfvARB_ARG_EXPAND);
void glGetnUniformivARB(glGetnUniformivARB_ARG_EXPAND);
typedef void (*glGetnUniformivARB_PTR)(glGetnUniformivARB_ARG_EXPAND);
void glGetnUniformuivARB(glGetnUniformuivARB_ARG_EXPAND);
typedef void (*glGetnUniformuivARB_PTR)(glGetnUniformuivARB_ARG_EXPAND);
void glGlobalAlphaFactorbSUN(glGlobalAlphaFactorbSUN_ARG_EXPAND);
typedef void (*glGlobalAlphaFactorbSUN_PTR)(glGlobalAlphaFactorbSUN_ARG_EXPAND);
void glGlobalAlphaFactordSUN(glGlobalAlphaFactordSUN_ARG_EXPAND);
typedef void (*glGlobalAlphaFactordSUN_PTR)(glGlobalAlphaFactordSUN_ARG_EXPAND);
void glGlobalAlphaFactorfSUN(glGlobalAlphaFactorfSUN_ARG_EXPAND);
typedef void (*glGlobalAlphaFactorfSUN_PTR)(glGlobalAlphaFactorfSUN_ARG_EXPAND);
void glGlobalAlphaFactoriSUN(glGlobalAlphaFactoriSUN_ARG_EXPAND);
typedef void (*glGlobalAlphaFactoriSUN_PTR)(glGlobalAlphaFactoriSUN_ARG_EXPAND);
void glGlobalAlphaFactorsSUN(glGlobalAlphaFactorsSUN_ARG_EXPAND);
typedef void (*glGlobalAlphaFactorsSUN_PTR)(glGlobalAlphaFactorsSUN_ARG_EXPAND);
void glGlobalAlphaFactorubSUN(glGlobalAlphaFactorubSUN_ARG_EXPAND);
typedef void (*glGlobalAlphaFactorubSUN_PTR)(glGlobalAlphaFactorubSUN_ARG_EXPAND);
void glGlobalAlphaFactoruiSUN(glGlobalAlphaFactoruiSUN_ARG_EXPAND);
typedef void (*glGlobalAlphaFactoruiSUN_PTR)(glGlobalAlphaFactoruiSUN_ARG_EXPAND);
void glGlobalAlphaFactorusSUN(glGlobalAlphaFactorusSUN_ARG_EXPAND);
typedef void (*glGlobalAlphaFactorusSUN_PTR)(glGlobalAlphaFactorusSUN_ARG_EXPAND);
void glHint(glHint_ARG_EXPAND);
typedef void (*glHint_PTR)(glHint_ARG_EXPAND);
void glHintPGI(glHintPGI_ARG_EXPAND);
typedef void (*glHintPGI_PTR)(glHintPGI_ARG_EXPAND);
void glHistogram(glHistogram_ARG_EXPAND);
typedef void (*glHistogram_PTR)(glHistogram_ARG_EXPAND);
void glHistogramEXT(glHistogramEXT_ARG_EXPAND);
typedef void (*glHistogramEXT_PTR)(glHistogramEXT_ARG_EXPAND);
void glIglooInterfaceSGIX(glIglooInterfaceSGIX_ARG_EXPAND);
typedef void (*glIglooInterfaceSGIX_PTR)(glIglooInterfaceSGIX_ARG_EXPAND);
void glImageTransformParameterfHP(glImageTransformParameterfHP_ARG_EXPAND);
typedef void (*glImageTransformParameterfHP_PTR)(glImageTransformParameterfHP_ARG_EXPAND);
void glImageTransformParameterfvHP(glImageTransformParameterfvHP_ARG_EXPAND);
typedef void (*glImageTransformParameterfvHP_PTR)(glImageTransformParameterfvHP_ARG_EXPAND);
void glImageTransformParameteriHP(glImageTransformParameteriHP_ARG_EXPAND);
typedef void (*glImageTransformParameteriHP_PTR)(glImageTransformParameteriHP_ARG_EXPAND);
void glImageTransformParameterivHP(glImageTransformParameterivHP_ARG_EXPAND);
typedef void (*glImageTransformParameterivHP_PTR)(glImageTransformParameterivHP_ARG_EXPAND);
GLsync glImportSyncEXT(glImportSyncEXT_ARG_EXPAND);
typedef GLsync (*glImportSyncEXT_PTR)(glImportSyncEXT_ARG_EXPAND);
void glIndexFormatNV(glIndexFormatNV_ARG_EXPAND);
typedef void (*glIndexFormatNV_PTR)(glIndexFormatNV_ARG_EXPAND);
void glIndexFuncEXT(glIndexFuncEXT_ARG_EXPAND);
typedef void (*glIndexFuncEXT_PTR)(glIndexFuncEXT_ARG_EXPAND);
void glIndexMask(glIndexMask_ARG_EXPAND);
typedef void (*glIndexMask_PTR)(glIndexMask_ARG_EXPAND);
void glIndexMaterialEXT(glIndexMaterialEXT_ARG_EXPAND);
typedef void (*glIndexMaterialEXT_PTR)(glIndexMaterialEXT_ARG_EXPAND);
void glIndexPointer(glIndexPointer_ARG_EXPAND);
typedef void (*glIndexPointer_PTR)(glIndexPointer_ARG_EXPAND);
void glIndexPointerEXT(glIndexPointerEXT_ARG_EXPAND);
typedef void (*glIndexPointerEXT_PTR)(glIndexPointerEXT_ARG_EXPAND);
void glIndexPointerListIBM(glIndexPointerListIBM_ARG_EXPAND);
typedef void (*glIndexPointerListIBM_PTR)(glIndexPointerListIBM_ARG_EXPAND);
void glIndexd(glIndexd_ARG_EXPAND);
typedef void (*glIndexd_PTR)(glIndexd_ARG_EXPAND);
void glIndexdv(glIndexdv_ARG_EXPAND);
typedef void (*glIndexdv_PTR)(glIndexdv_ARG_EXPAND);
void glIndexf(glIndexf_ARG_EXPAND);
typedef void (*glIndexf_PTR)(glIndexf_ARG_EXPAND);
void glIndexfv(glIndexfv_ARG_EXPAND);
typedef void (*glIndexfv_PTR)(glIndexfv_ARG_EXPAND);
void glIndexi(glIndexi_ARG_EXPAND);
typedef void (*glIndexi_PTR)(glIndexi_ARG_EXPAND);
void glIndexiv(glIndexiv_ARG_EXPAND);
typedef void (*glIndexiv_PTR)(glIndexiv_ARG_EXPAND);
void glIndexs(glIndexs_ARG_EXPAND);
typedef void (*glIndexs_PTR)(glIndexs_ARG_EXPAND);
void glIndexsv(glIndexsv_ARG_EXPAND);
typedef void (*glIndexsv_PTR)(glIndexsv_ARG_EXPAND);
void glIndexub(glIndexub_ARG_EXPAND);
typedef void (*glIndexub_PTR)(glIndexub_ARG_EXPAND);
void glIndexubv(glIndexubv_ARG_EXPAND);
typedef void (*glIndexubv_PTR)(glIndexubv_ARG_EXPAND);
void glIndexxOES(glIndexxOES_ARG_EXPAND);
typedef void (*glIndexxOES_PTR)(glIndexxOES_ARG_EXPAND);
void glIndexxvOES(glIndexxvOES_ARG_EXPAND);
typedef void (*glIndexxvOES_PTR)(glIndexxvOES_ARG_EXPAND);
void glInitNames(glInitNames_ARG_EXPAND);
typedef void (*glInitNames_PTR)(glInitNames_ARG_EXPAND);
void glInsertComponentEXT(glInsertComponentEXT_ARG_EXPAND);
typedef void (*glInsertComponentEXT_PTR)(glInsertComponentEXT_ARG_EXPAND);
void glInstrumentsBufferSGIX(glInstrumentsBufferSGIX_ARG_EXPAND);
typedef void (*glInstrumentsBufferSGIX_PTR)(glInstrumentsBufferSGIX_ARG_EXPAND);
void glInterleavedArrays(glInterleavedArrays_ARG_EXPAND);
typedef void (*glInterleavedArrays_PTR)(glInterleavedArrays_ARG_EXPAND);
void glInterpolatePathsNV(glInterpolatePathsNV_ARG_EXPAND);
typedef void (*glInterpolatePathsNV_PTR)(glInterpolatePathsNV_ARG_EXPAND);
void glInvalidateBufferData(glInvalidateBufferData_ARG_EXPAND);
typedef void (*glInvalidateBufferData_PTR)(glInvalidateBufferData_ARG_EXPAND);
void glInvalidateBufferSubData(glInvalidateBufferSubData_ARG_EXPAND);
typedef void (*glInvalidateBufferSubData_PTR)(glInvalidateBufferSubData_ARG_EXPAND);
void glInvalidateFramebuffer(glInvalidateFramebuffer_ARG_EXPAND);
typedef void (*glInvalidateFramebuffer_PTR)(glInvalidateFramebuffer_ARG_EXPAND);
void glInvalidateSubFramebuffer(glInvalidateSubFramebuffer_ARG_EXPAND);
typedef void (*glInvalidateSubFramebuffer_PTR)(glInvalidateSubFramebuffer_ARG_EXPAND);
void glInvalidateTexImage(glInvalidateTexImage_ARG_EXPAND);
typedef void (*glInvalidateTexImage_PTR)(glInvalidateTexImage_ARG_EXPAND);
void glInvalidateTexSubImage(glInvalidateTexSubImage_ARG_EXPAND);
typedef void (*glInvalidateTexSubImage_PTR)(glInvalidateTexSubImage_ARG_EXPAND);
GLboolean glIsAsyncMarkerSGIX(glIsAsyncMarkerSGIX_ARG_EXPAND);
typedef GLboolean (*glIsAsyncMarkerSGIX_PTR)(glIsAsyncMarkerSGIX_ARG_EXPAND);
GLboolean glIsBuffer(glIsBuffer_ARG_EXPAND);
typedef GLboolean (*glIsBuffer_PTR)(glIsBuffer_ARG_EXPAND);
GLboolean glIsBufferARB(glIsBufferARB_ARG_EXPAND);
typedef GLboolean (*glIsBufferARB_PTR)(glIsBufferARB_ARG_EXPAND);
GLboolean glIsBufferResidentNV(glIsBufferResidentNV_ARG_EXPAND);
typedef GLboolean (*glIsBufferResidentNV_PTR)(glIsBufferResidentNV_ARG_EXPAND);
GLboolean glIsEnabled(glIsEnabled_ARG_EXPAND);
typedef GLboolean (*glIsEnabled_PTR)(glIsEnabled_ARG_EXPAND);
GLboolean glIsEnabledIndexedEXT(glIsEnabledIndexedEXT_ARG_EXPAND);
typedef GLboolean (*glIsEnabledIndexedEXT_PTR)(glIsEnabledIndexedEXT_ARG_EXPAND);
GLboolean glIsEnabledi(glIsEnabledi_ARG_EXPAND);
typedef GLboolean (*glIsEnabledi_PTR)(glIsEnabledi_ARG_EXPAND);
GLboolean glIsFenceAPPLE(glIsFenceAPPLE_ARG_EXPAND);
typedef GLboolean (*glIsFenceAPPLE_PTR)(glIsFenceAPPLE_ARG_EXPAND);
GLboolean glIsFenceNV(glIsFenceNV_ARG_EXPAND);
typedef GLboolean (*glIsFenceNV_PTR)(glIsFenceNV_ARG_EXPAND);
GLboolean glIsFramebuffer(glIsFramebuffer_ARG_EXPAND);
typedef GLboolean (*glIsFramebuffer_PTR)(glIsFramebuffer_ARG_EXPAND);
GLboolean glIsFramebufferEXT(glIsFramebufferEXT_ARG_EXPAND);
typedef GLboolean (*glIsFramebufferEXT_PTR)(glIsFramebufferEXT_ARG_EXPAND);
GLboolean glIsImageHandleResidentNV(glIsImageHandleResidentNV_ARG_EXPAND);
typedef GLboolean (*glIsImageHandleResidentNV_PTR)(glIsImageHandleResidentNV_ARG_EXPAND);
GLboolean glIsList(glIsList_ARG_EXPAND);
typedef GLboolean (*glIsList_PTR)(glIsList_ARG_EXPAND);
GLboolean glIsNameAMD(glIsNameAMD_ARG_EXPAND);
typedef GLboolean (*glIsNameAMD_PTR)(glIsNameAMD_ARG_EXPAND);
GLboolean glIsNamedBufferResidentNV(glIsNamedBufferResidentNV_ARG_EXPAND);
typedef GLboolean (*glIsNamedBufferResidentNV_PTR)(glIsNamedBufferResidentNV_ARG_EXPAND);
GLboolean glIsNamedStringARB(glIsNamedStringARB_ARG_EXPAND);
typedef GLboolean (*glIsNamedStringARB_PTR)(glIsNamedStringARB_ARG_EXPAND);
GLboolean glIsObjectBufferATI(glIsObjectBufferATI_ARG_EXPAND);
typedef GLboolean (*glIsObjectBufferATI_PTR)(glIsObjectBufferATI_ARG_EXPAND);
GLboolean glIsOcclusionQueryNV(glIsOcclusionQueryNV_ARG_EXPAND);
typedef GLboolean (*glIsOcclusionQueryNV_PTR)(glIsOcclusionQueryNV_ARG_EXPAND);
GLboolean glIsPathNV(glIsPathNV_ARG_EXPAND);
typedef GLboolean (*glIsPathNV_PTR)(glIsPathNV_ARG_EXPAND);
GLboolean glIsPointInFillPathNV(glIsPointInFillPathNV_ARG_EXPAND);
typedef GLboolean (*glIsPointInFillPathNV_PTR)(glIsPointInFillPathNV_ARG_EXPAND);
GLboolean glIsPointInStrokePathNV(glIsPointInStrokePathNV_ARG_EXPAND);
typedef GLboolean (*glIsPointInStrokePathNV_PTR)(glIsPointInStrokePathNV_ARG_EXPAND);
GLboolean glIsProgram(glIsProgram_ARG_EXPAND);
typedef GLboolean (*glIsProgram_PTR)(glIsProgram_ARG_EXPAND);
GLboolean glIsProgramARB(glIsProgramARB_ARG_EXPAND);
typedef GLboolean (*glIsProgramARB_PTR)(glIsProgramARB_ARG_EXPAND);
GLboolean glIsProgramNV(glIsProgramNV_ARG_EXPAND);
typedef GLboolean (*glIsProgramNV_PTR)(glIsProgramNV_ARG_EXPAND);
GLboolean glIsProgramPipeline(glIsProgramPipeline_ARG_EXPAND);
typedef GLboolean (*glIsProgramPipeline_PTR)(glIsProgramPipeline_ARG_EXPAND);
GLboolean glIsQuery(glIsQuery_ARG_EXPAND);
typedef GLboolean (*glIsQuery_PTR)(glIsQuery_ARG_EXPAND);
GLboolean glIsQueryARB(glIsQueryARB_ARG_EXPAND);
typedef GLboolean (*glIsQueryARB_PTR)(glIsQueryARB_ARG_EXPAND);
GLboolean glIsRenderbuffer(glIsRenderbuffer_ARG_EXPAND);
typedef GLboolean (*glIsRenderbuffer_PTR)(glIsRenderbuffer_ARG_EXPAND);
GLboolean glIsRenderbufferEXT(glIsRenderbufferEXT_ARG_EXPAND);
typedef GLboolean (*glIsRenderbufferEXT_PTR)(glIsRenderbufferEXT_ARG_EXPAND);
GLboolean glIsSampler(glIsSampler_ARG_EXPAND);
typedef GLboolean (*glIsSampler_PTR)(glIsSampler_ARG_EXPAND);
GLboolean glIsShader(glIsShader_ARG_EXPAND);
typedef GLboolean (*glIsShader_PTR)(glIsShader_ARG_EXPAND);
GLboolean glIsSync(glIsSync_ARG_EXPAND);
typedef GLboolean (*glIsSync_PTR)(glIsSync_ARG_EXPAND);
GLboolean glIsTexture(glIsTexture_ARG_EXPAND);
typedef GLboolean (*glIsTexture_PTR)(glIsTexture_ARG_EXPAND);
GLboolean glIsTextureEXT(glIsTextureEXT_ARG_EXPAND);
typedef GLboolean (*glIsTextureEXT_PTR)(glIsTextureEXT_ARG_EXPAND);
GLboolean glIsTextureHandleResidentNV(glIsTextureHandleResidentNV_ARG_EXPAND);
typedef GLboolean (*glIsTextureHandleResidentNV_PTR)(glIsTextureHandleResidentNV_ARG_EXPAND);
GLboolean glIsTransformFeedback(glIsTransformFeedback_ARG_EXPAND);
typedef GLboolean (*glIsTransformFeedback_PTR)(glIsTransformFeedback_ARG_EXPAND);
GLboolean glIsTransformFeedbackNV(glIsTransformFeedbackNV_ARG_EXPAND);
typedef GLboolean (*glIsTransformFeedbackNV_PTR)(glIsTransformFeedbackNV_ARG_EXPAND);
GLboolean glIsVariantEnabledEXT(glIsVariantEnabledEXT_ARG_EXPAND);
typedef GLboolean (*glIsVariantEnabledEXT_PTR)(glIsVariantEnabledEXT_ARG_EXPAND);
GLboolean glIsVertexArray(glIsVertexArray_ARG_EXPAND);
typedef GLboolean (*glIsVertexArray_PTR)(glIsVertexArray_ARG_EXPAND);
GLboolean glIsVertexArrayAPPLE(glIsVertexArrayAPPLE_ARG_EXPAND);
typedef GLboolean (*glIsVertexArrayAPPLE_PTR)(glIsVertexArrayAPPLE_ARG_EXPAND);
GLboolean glIsVertexAttribEnabledAPPLE(glIsVertexAttribEnabledAPPLE_ARG_EXPAND);
typedef GLboolean (*glIsVertexAttribEnabledAPPLE_PTR)(glIsVertexAttribEnabledAPPLE_ARG_EXPAND);
void glLightEnviSGIX(glLightEnviSGIX_ARG_EXPAND);
typedef void (*glLightEnviSGIX_PTR)(glLightEnviSGIX_ARG_EXPAND);
void glLightModelf(glLightModelf_ARG_EXPAND);
typedef void (*glLightModelf_PTR)(glLightModelf_ARG_EXPAND);
void glLightModelfv(glLightModelfv_ARG_EXPAND);
typedef void (*glLightModelfv_PTR)(glLightModelfv_ARG_EXPAND);
void glLightModeli(glLightModeli_ARG_EXPAND);
typedef void (*glLightModeli_PTR)(glLightModeli_ARG_EXPAND);
void glLightModeliv(glLightModeliv_ARG_EXPAND);
typedef void (*glLightModeliv_PTR)(glLightModeliv_ARG_EXPAND);
void glLightModelx(glLightModelx_ARG_EXPAND);
typedef void (*glLightModelx_PTR)(glLightModelx_ARG_EXPAND);
void glLightModelxOES(glLightModelxOES_ARG_EXPAND);
typedef void (*glLightModelxOES_PTR)(glLightModelxOES_ARG_EXPAND);
void glLightModelxv(glLightModelxv_ARG_EXPAND);
typedef void (*glLightModelxv_PTR)(glLightModelxv_ARG_EXPAND);
void glLightModelxvOES(glLightModelxvOES_ARG_EXPAND);
typedef void (*glLightModelxvOES_PTR)(glLightModelxvOES_ARG_EXPAND);
void glLightf(glLightf_ARG_EXPAND);
typedef void (*glLightf_PTR)(glLightf_ARG_EXPAND);
void glLightfv(glLightfv_ARG_EXPAND);
typedef void (*glLightfv_PTR)(glLightfv_ARG_EXPAND);
void glLighti(glLighti_ARG_EXPAND);
typedef void (*glLighti_PTR)(glLighti_ARG_EXPAND);
void glLightiv(glLightiv_ARG_EXPAND);
typedef void (*glLightiv_PTR)(glLightiv_ARG_EXPAND);
void glLightx(glLightx_ARG_EXPAND);
typedef void (*glLightx_PTR)(glLightx_ARG_EXPAND);
void glLightxOES(glLightxOES_ARG_EXPAND);
typedef void (*glLightxOES_PTR)(glLightxOES_ARG_EXPAND);
void glLightxv(glLightxv_ARG_EXPAND);
typedef void (*glLightxv_PTR)(glLightxv_ARG_EXPAND);
void glLightxvOES(glLightxvOES_ARG_EXPAND);
typedef void (*glLightxvOES_PTR)(glLightxvOES_ARG_EXPAND);
void glLineStipple(glLineStipple_ARG_EXPAND);
typedef void (*glLineStipple_PTR)(glLineStipple_ARG_EXPAND);
void glLineWidth(glLineWidth_ARG_EXPAND);
typedef void (*glLineWidth_PTR)(glLineWidth_ARG_EXPAND);
void glLineWidthx(glLineWidthx_ARG_EXPAND);
typedef void (*glLineWidthx_PTR)(glLineWidthx_ARG_EXPAND);
void glLineWidthxOES(glLineWidthxOES_ARG_EXPAND);
typedef void (*glLineWidthxOES_PTR)(glLineWidthxOES_ARG_EXPAND);
void glLinkProgram(glLinkProgram_ARG_EXPAND);
typedef void (*glLinkProgram_PTR)(glLinkProgram_ARG_EXPAND);
void glLinkProgramARB(glLinkProgramARB_ARG_EXPAND);
typedef void (*glLinkProgramARB_PTR)(glLinkProgramARB_ARG_EXPAND);
void glListBase(glListBase_ARG_EXPAND);
typedef void (*glListBase_PTR)(glListBase_ARG_EXPAND);
void glListParameterfSGIX(glListParameterfSGIX_ARG_EXPAND);
typedef void (*glListParameterfSGIX_PTR)(glListParameterfSGIX_ARG_EXPAND);
void glListParameterfvSGIX(glListParameterfvSGIX_ARG_EXPAND);
typedef void (*glListParameterfvSGIX_PTR)(glListParameterfvSGIX_ARG_EXPAND);
void glListParameteriSGIX(glListParameteriSGIX_ARG_EXPAND);
typedef void (*glListParameteriSGIX_PTR)(glListParameteriSGIX_ARG_EXPAND);
void glListParameterivSGIX(glListParameterivSGIX_ARG_EXPAND);
typedef void (*glListParameterivSGIX_PTR)(glListParameterivSGIX_ARG_EXPAND);
void glLoadIdentity(glLoadIdentity_ARG_EXPAND);
typedef void (*glLoadIdentity_PTR)(glLoadIdentity_ARG_EXPAND);
void glLoadIdentityDeformationMapSGIX(glLoadIdentityDeformationMapSGIX_ARG_EXPAND);
typedef void (*glLoadIdentityDeformationMapSGIX_PTR)(glLoadIdentityDeformationMapSGIX_ARG_EXPAND);
void glLoadMatrixd(glLoadMatrixd_ARG_EXPAND);
typedef void (*glLoadMatrixd_PTR)(glLoadMatrixd_ARG_EXPAND);
void glLoadMatrixf(glLoadMatrixf_ARG_EXPAND);
typedef void (*glLoadMatrixf_PTR)(glLoadMatrixf_ARG_EXPAND);
void glLoadMatrixx(glLoadMatrixx_ARG_EXPAND);
typedef void (*glLoadMatrixx_PTR)(glLoadMatrixx_ARG_EXPAND);
void glLoadMatrixxOES(glLoadMatrixxOES_ARG_EXPAND);
typedef void (*glLoadMatrixxOES_PTR)(glLoadMatrixxOES_ARG_EXPAND);
void glLoadName(glLoadName_ARG_EXPAND);
typedef void (*glLoadName_PTR)(glLoadName_ARG_EXPAND);
void glLoadProgramNV(glLoadProgramNV_ARG_EXPAND);
typedef void (*glLoadProgramNV_PTR)(glLoadProgramNV_ARG_EXPAND);
void glLoadTransposeMatrixd(glLoadTransposeMatrixd_ARG_EXPAND);
typedef void (*glLoadTransposeMatrixd_PTR)(glLoadTransposeMatrixd_ARG_EXPAND);
void glLoadTransposeMatrixdARB(glLoadTransposeMatrixdARB_ARG_EXPAND);
typedef void (*glLoadTransposeMatrixdARB_PTR)(glLoadTransposeMatrixdARB_ARG_EXPAND);
void glLoadTransposeMatrixf(glLoadTransposeMatrixf_ARG_EXPAND);
typedef void (*glLoadTransposeMatrixf_PTR)(glLoadTransposeMatrixf_ARG_EXPAND);
void glLoadTransposeMatrixfARB(glLoadTransposeMatrixfARB_ARG_EXPAND);
typedef void (*glLoadTransposeMatrixfARB_PTR)(glLoadTransposeMatrixfARB_ARG_EXPAND);
void glLoadTransposeMatrixxOES(glLoadTransposeMatrixxOES_ARG_EXPAND);
typedef void (*glLoadTransposeMatrixxOES_PTR)(glLoadTransposeMatrixxOES_ARG_EXPAND);
void glLockArraysEXT(glLockArraysEXT_ARG_EXPAND);
typedef void (*glLockArraysEXT_PTR)(glLockArraysEXT_ARG_EXPAND);
void glLogicOp(glLogicOp_ARG_EXPAND);
typedef void (*glLogicOp_PTR)(glLogicOp_ARG_EXPAND);
void glMakeBufferNonResidentNV(glMakeBufferNonResidentNV_ARG_EXPAND);
typedef void (*glMakeBufferNonResidentNV_PTR)(glMakeBufferNonResidentNV_ARG_EXPAND);
void glMakeBufferResidentNV(glMakeBufferResidentNV_ARG_EXPAND);
typedef void (*glMakeBufferResidentNV_PTR)(glMakeBufferResidentNV_ARG_EXPAND);
void glMakeImageHandleNonResidentNV(glMakeImageHandleNonResidentNV_ARG_EXPAND);
typedef void (*glMakeImageHandleNonResidentNV_PTR)(glMakeImageHandleNonResidentNV_ARG_EXPAND);
void glMakeImageHandleResidentNV(glMakeImageHandleResidentNV_ARG_EXPAND);
typedef void (*glMakeImageHandleResidentNV_PTR)(glMakeImageHandleResidentNV_ARG_EXPAND);
void glMakeNamedBufferNonResidentNV(glMakeNamedBufferNonResidentNV_ARG_EXPAND);
typedef void (*glMakeNamedBufferNonResidentNV_PTR)(glMakeNamedBufferNonResidentNV_ARG_EXPAND);
void glMakeNamedBufferResidentNV(glMakeNamedBufferResidentNV_ARG_EXPAND);
typedef void (*glMakeNamedBufferResidentNV_PTR)(glMakeNamedBufferResidentNV_ARG_EXPAND);
void glMakeTextureHandleNonResidentNV(glMakeTextureHandleNonResidentNV_ARG_EXPAND);
typedef void (*glMakeTextureHandleNonResidentNV_PTR)(glMakeTextureHandleNonResidentNV_ARG_EXPAND);
void glMakeTextureHandleResidentNV(glMakeTextureHandleResidentNV_ARG_EXPAND);
typedef void (*glMakeTextureHandleResidentNV_PTR)(glMakeTextureHandleResidentNV_ARG_EXPAND);
void glMap1d(glMap1d_ARG_EXPAND);
typedef void (*glMap1d_PTR)(glMap1d_ARG_EXPAND);
void glMap1f(glMap1f_ARG_EXPAND);
typedef void (*glMap1f_PTR)(glMap1f_ARG_EXPAND);
void glMap1xOES(glMap1xOES_ARG_EXPAND);
typedef void (*glMap1xOES_PTR)(glMap1xOES_ARG_EXPAND);
void glMap2d(glMap2d_ARG_EXPAND);
typedef void (*glMap2d_PTR)(glMap2d_ARG_EXPAND);
void glMap2f(glMap2f_ARG_EXPAND);
typedef void (*glMap2f_PTR)(glMap2f_ARG_EXPAND);
void glMap2xOES(glMap2xOES_ARG_EXPAND);
typedef void (*glMap2xOES_PTR)(glMap2xOES_ARG_EXPAND);
GLvoid * glMapBuffer(glMapBuffer_ARG_EXPAND);
typedef GLvoid * (*glMapBuffer_PTR)(glMapBuffer_ARG_EXPAND);
GLvoid * glMapBufferARB(glMapBufferARB_ARG_EXPAND);
typedef GLvoid * (*glMapBufferARB_PTR)(glMapBufferARB_ARG_EXPAND);
GLvoid * glMapBufferRange(glMapBufferRange_ARG_EXPAND);
typedef GLvoid * (*glMapBufferRange_PTR)(glMapBufferRange_ARG_EXPAND);
void glMapControlPointsNV(glMapControlPointsNV_ARG_EXPAND);
typedef void (*glMapControlPointsNV_PTR)(glMapControlPointsNV_ARG_EXPAND);
void glMapGrid1d(glMapGrid1d_ARG_EXPAND);
typedef void (*glMapGrid1d_PTR)(glMapGrid1d_ARG_EXPAND);
void glMapGrid1f(glMapGrid1f_ARG_EXPAND);
typedef void (*glMapGrid1f_PTR)(glMapGrid1f_ARG_EXPAND);
void glMapGrid1xOES(glMapGrid1xOES_ARG_EXPAND);
typedef void (*glMapGrid1xOES_PTR)(glMapGrid1xOES_ARG_EXPAND);
void glMapGrid2d(glMapGrid2d_ARG_EXPAND);
typedef void (*glMapGrid2d_PTR)(glMapGrid2d_ARG_EXPAND);
void glMapGrid2f(glMapGrid2f_ARG_EXPAND);
typedef void (*glMapGrid2f_PTR)(glMapGrid2f_ARG_EXPAND);
void glMapGrid2xOES(glMapGrid2xOES_ARG_EXPAND);
typedef void (*glMapGrid2xOES_PTR)(glMapGrid2xOES_ARG_EXPAND);
GLvoid * glMapNamedBufferEXT(glMapNamedBufferEXT_ARG_EXPAND);
typedef GLvoid * (*glMapNamedBufferEXT_PTR)(glMapNamedBufferEXT_ARG_EXPAND);
GLvoid * glMapNamedBufferRangeEXT(glMapNamedBufferRangeEXT_ARG_EXPAND);
typedef GLvoid * (*glMapNamedBufferRangeEXT_PTR)(glMapNamedBufferRangeEXT_ARG_EXPAND);
GLvoid * glMapObjectBufferATI(glMapObjectBufferATI_ARG_EXPAND);
typedef GLvoid * (*glMapObjectBufferATI_PTR)(glMapObjectBufferATI_ARG_EXPAND);
void glMapParameterfvNV(glMapParameterfvNV_ARG_EXPAND);
typedef void (*glMapParameterfvNV_PTR)(glMapParameterfvNV_ARG_EXPAND);
void glMapParameterivNV(glMapParameterivNV_ARG_EXPAND);
typedef void (*glMapParameterivNV_PTR)(glMapParameterivNV_ARG_EXPAND);
GLvoid * glMapTexture2DINTEL(glMapTexture2DINTEL_ARG_EXPAND);
typedef GLvoid * (*glMapTexture2DINTEL_PTR)(glMapTexture2DINTEL_ARG_EXPAND);
void glMapVertexAttrib1dAPPLE(glMapVertexAttrib1dAPPLE_ARG_EXPAND);
typedef void (*glMapVertexAttrib1dAPPLE_PTR)(glMapVertexAttrib1dAPPLE_ARG_EXPAND);
void glMapVertexAttrib1fAPPLE(glMapVertexAttrib1fAPPLE_ARG_EXPAND);
typedef void (*glMapVertexAttrib1fAPPLE_PTR)(glMapVertexAttrib1fAPPLE_ARG_EXPAND);
void glMapVertexAttrib2dAPPLE(glMapVertexAttrib2dAPPLE_ARG_EXPAND);
typedef void (*glMapVertexAttrib2dAPPLE_PTR)(glMapVertexAttrib2dAPPLE_ARG_EXPAND);
void glMapVertexAttrib2fAPPLE(glMapVertexAttrib2fAPPLE_ARG_EXPAND);
typedef void (*glMapVertexAttrib2fAPPLE_PTR)(glMapVertexAttrib2fAPPLE_ARG_EXPAND);
void glMaterialf(glMaterialf_ARG_EXPAND);
typedef void (*glMaterialf_PTR)(glMaterialf_ARG_EXPAND);
void glMaterialfv(glMaterialfv_ARG_EXPAND);
typedef void (*glMaterialfv_PTR)(glMaterialfv_ARG_EXPAND);
void glMateriali(glMateriali_ARG_EXPAND);
typedef void (*glMateriali_PTR)(glMateriali_ARG_EXPAND);
void glMaterialiv(glMaterialiv_ARG_EXPAND);
typedef void (*glMaterialiv_PTR)(glMaterialiv_ARG_EXPAND);
void glMaterialx(glMaterialx_ARG_EXPAND);
typedef void (*glMaterialx_PTR)(glMaterialx_ARG_EXPAND);
void glMaterialxOES(glMaterialxOES_ARG_EXPAND);
typedef void (*glMaterialxOES_PTR)(glMaterialxOES_ARG_EXPAND);
void glMaterialxv(glMaterialxv_ARG_EXPAND);
typedef void (*glMaterialxv_PTR)(glMaterialxv_ARG_EXPAND);
void glMaterialxvOES(glMaterialxvOES_ARG_EXPAND);
typedef void (*glMaterialxvOES_PTR)(glMaterialxvOES_ARG_EXPAND);
void glMatrixFrustumEXT(glMatrixFrustumEXT_ARG_EXPAND);
typedef void (*glMatrixFrustumEXT_PTR)(glMatrixFrustumEXT_ARG_EXPAND);
void glMatrixIndexPointerARB(glMatrixIndexPointerARB_ARG_EXPAND);
typedef void (*glMatrixIndexPointerARB_PTR)(glMatrixIndexPointerARB_ARG_EXPAND);
void glMatrixIndexubvARB(glMatrixIndexubvARB_ARG_EXPAND);
typedef void (*glMatrixIndexubvARB_PTR)(glMatrixIndexubvARB_ARG_EXPAND);
void glMatrixIndexuivARB(glMatrixIndexuivARB_ARG_EXPAND);
typedef void (*glMatrixIndexuivARB_PTR)(glMatrixIndexuivARB_ARG_EXPAND);
void glMatrixIndexusvARB(glMatrixIndexusvARB_ARG_EXPAND);
typedef void (*glMatrixIndexusvARB_PTR)(glMatrixIndexusvARB_ARG_EXPAND);
void glMatrixLoadIdentityEXT(glMatrixLoadIdentityEXT_ARG_EXPAND);
typedef void (*glMatrixLoadIdentityEXT_PTR)(glMatrixLoadIdentityEXT_ARG_EXPAND);
void glMatrixLoadTransposedEXT(glMatrixLoadTransposedEXT_ARG_EXPAND);
typedef void (*glMatrixLoadTransposedEXT_PTR)(glMatrixLoadTransposedEXT_ARG_EXPAND);
void glMatrixLoadTransposefEXT(glMatrixLoadTransposefEXT_ARG_EXPAND);
typedef void (*glMatrixLoadTransposefEXT_PTR)(glMatrixLoadTransposefEXT_ARG_EXPAND);
void glMatrixLoaddEXT(glMatrixLoaddEXT_ARG_EXPAND);
typedef void (*glMatrixLoaddEXT_PTR)(glMatrixLoaddEXT_ARG_EXPAND);
void glMatrixLoadfEXT(glMatrixLoadfEXT_ARG_EXPAND);
typedef void (*glMatrixLoadfEXT_PTR)(glMatrixLoadfEXT_ARG_EXPAND);
void glMatrixMode(glMatrixMode_ARG_EXPAND);
typedef void (*glMatrixMode_PTR)(glMatrixMode_ARG_EXPAND);
void glMatrixMultTransposedEXT(glMatrixMultTransposedEXT_ARG_EXPAND);
typedef void (*glMatrixMultTransposedEXT_PTR)(glMatrixMultTransposedEXT_ARG_EXPAND);
void glMatrixMultTransposefEXT(glMatrixMultTransposefEXT_ARG_EXPAND);
typedef void (*glMatrixMultTransposefEXT_PTR)(glMatrixMultTransposefEXT_ARG_EXPAND);
void glMatrixMultdEXT(glMatrixMultdEXT_ARG_EXPAND);
typedef void (*glMatrixMultdEXT_PTR)(glMatrixMultdEXT_ARG_EXPAND);
void glMatrixMultfEXT(glMatrixMultfEXT_ARG_EXPAND);
typedef void (*glMatrixMultfEXT_PTR)(glMatrixMultfEXT_ARG_EXPAND);
void glMatrixOrthoEXT(glMatrixOrthoEXT_ARG_EXPAND);
typedef void (*glMatrixOrthoEXT_PTR)(glMatrixOrthoEXT_ARG_EXPAND);
void glMatrixPopEXT(glMatrixPopEXT_ARG_EXPAND);
typedef void (*glMatrixPopEXT_PTR)(glMatrixPopEXT_ARG_EXPAND);
void glMatrixPushEXT(glMatrixPushEXT_ARG_EXPAND);
typedef void (*glMatrixPushEXT_PTR)(glMatrixPushEXT_ARG_EXPAND);
void glMatrixRotatedEXT(glMatrixRotatedEXT_ARG_EXPAND);
typedef void (*glMatrixRotatedEXT_PTR)(glMatrixRotatedEXT_ARG_EXPAND);
void glMatrixRotatefEXT(glMatrixRotatefEXT_ARG_EXPAND);
typedef void (*glMatrixRotatefEXT_PTR)(glMatrixRotatefEXT_ARG_EXPAND);
void glMatrixScaledEXT(glMatrixScaledEXT_ARG_EXPAND);
typedef void (*glMatrixScaledEXT_PTR)(glMatrixScaledEXT_ARG_EXPAND);
void glMatrixScalefEXT(glMatrixScalefEXT_ARG_EXPAND);
typedef void (*glMatrixScalefEXT_PTR)(glMatrixScalefEXT_ARG_EXPAND);
void glMatrixTranslatedEXT(glMatrixTranslatedEXT_ARG_EXPAND);
typedef void (*glMatrixTranslatedEXT_PTR)(glMatrixTranslatedEXT_ARG_EXPAND);
void glMatrixTranslatefEXT(glMatrixTranslatefEXT_ARG_EXPAND);
typedef void (*glMatrixTranslatefEXT_PTR)(glMatrixTranslatefEXT_ARG_EXPAND);
void glMemoryBarrier(glMemoryBarrier_ARG_EXPAND);
typedef void (*glMemoryBarrier_PTR)(glMemoryBarrier_ARG_EXPAND);
void glMemoryBarrierEXT(glMemoryBarrierEXT_ARG_EXPAND);
typedef void (*glMemoryBarrierEXT_PTR)(glMemoryBarrierEXT_ARG_EXPAND);
void glMinSampleShading(glMinSampleShading_ARG_EXPAND);
typedef void (*glMinSampleShading_PTR)(glMinSampleShading_ARG_EXPAND);
void glMinSampleShadingARB(glMinSampleShadingARB_ARG_EXPAND);
typedef void (*glMinSampleShadingARB_PTR)(glMinSampleShadingARB_ARG_EXPAND);
void glMinmax(glMinmax_ARG_EXPAND);
typedef void (*glMinmax_PTR)(glMinmax_ARG_EXPAND);
void glMinmaxEXT(glMinmaxEXT_ARG_EXPAND);
typedef void (*glMinmaxEXT_PTR)(glMinmaxEXT_ARG_EXPAND);
void glMultMatrixd(glMultMatrixd_ARG_EXPAND);
typedef void (*glMultMatrixd_PTR)(glMultMatrixd_ARG_EXPAND);
void glMultMatrixf(glMultMatrixf_ARG_EXPAND);
typedef void (*glMultMatrixf_PTR)(glMultMatrixf_ARG_EXPAND);
void glMultMatrixx(glMultMatrixx_ARG_EXPAND);
typedef void (*glMultMatrixx_PTR)(glMultMatrixx_ARG_EXPAND);
void glMultMatrixxOES(glMultMatrixxOES_ARG_EXPAND);
typedef void (*glMultMatrixxOES_PTR)(glMultMatrixxOES_ARG_EXPAND);
void glMultTransposeMatrixd(glMultTransposeMatrixd_ARG_EXPAND);
typedef void (*glMultTransposeMatrixd_PTR)(glMultTransposeMatrixd_ARG_EXPAND);
void glMultTransposeMatrixdARB(glMultTransposeMatrixdARB_ARG_EXPAND);
typedef void (*glMultTransposeMatrixdARB_PTR)(glMultTransposeMatrixdARB_ARG_EXPAND);
void glMultTransposeMatrixf(glMultTransposeMatrixf_ARG_EXPAND);
typedef void (*glMultTransposeMatrixf_PTR)(glMultTransposeMatrixf_ARG_EXPAND);
void glMultTransposeMatrixfARB(glMultTransposeMatrixfARB_ARG_EXPAND);
typedef void (*glMultTransposeMatrixfARB_PTR)(glMultTransposeMatrixfARB_ARG_EXPAND);
void glMultTransposeMatrixxOES(glMultTransposeMatrixxOES_ARG_EXPAND);
typedef void (*glMultTransposeMatrixxOES_PTR)(glMultTransposeMatrixxOES_ARG_EXPAND);
void glMultiDrawArrays(glMultiDrawArrays_ARG_EXPAND);
typedef void (*glMultiDrawArrays_PTR)(glMultiDrawArrays_ARG_EXPAND);
void glMultiDrawArraysEXT(glMultiDrawArraysEXT_ARG_EXPAND);
typedef void (*glMultiDrawArraysEXT_PTR)(glMultiDrawArraysEXT_ARG_EXPAND);
void glMultiDrawArraysIndirect(glMultiDrawArraysIndirect_ARG_EXPAND);
typedef void (*glMultiDrawArraysIndirect_PTR)(glMultiDrawArraysIndirect_ARG_EXPAND);
void glMultiDrawArraysIndirectAMD(glMultiDrawArraysIndirectAMD_ARG_EXPAND);
typedef void (*glMultiDrawArraysIndirectAMD_PTR)(glMultiDrawArraysIndirectAMD_ARG_EXPAND);
void glMultiDrawElementArrayAPPLE(glMultiDrawElementArrayAPPLE_ARG_EXPAND);
typedef void (*glMultiDrawElementArrayAPPLE_PTR)(glMultiDrawElementArrayAPPLE_ARG_EXPAND);
void glMultiDrawElements(glMultiDrawElements_ARG_EXPAND);
typedef void (*glMultiDrawElements_PTR)(glMultiDrawElements_ARG_EXPAND);
void glMultiDrawElementsBaseVertex(glMultiDrawElementsBaseVertex_ARG_EXPAND);
typedef void (*glMultiDrawElementsBaseVertex_PTR)(glMultiDrawElementsBaseVertex_ARG_EXPAND);
void glMultiDrawElementsEXT(glMultiDrawElementsEXT_ARG_EXPAND);
typedef void (*glMultiDrawElementsEXT_PTR)(glMultiDrawElementsEXT_ARG_EXPAND);
void glMultiDrawElementsIndirect(glMultiDrawElementsIndirect_ARG_EXPAND);
typedef void (*glMultiDrawElementsIndirect_PTR)(glMultiDrawElementsIndirect_ARG_EXPAND);
void glMultiDrawElementsIndirectAMD(glMultiDrawElementsIndirectAMD_ARG_EXPAND);
typedef void (*glMultiDrawElementsIndirectAMD_PTR)(glMultiDrawElementsIndirectAMD_ARG_EXPAND);
void glMultiDrawRangeElementArrayAPPLE(glMultiDrawRangeElementArrayAPPLE_ARG_EXPAND);
typedef void (*glMultiDrawRangeElementArrayAPPLE_PTR)(glMultiDrawRangeElementArrayAPPLE_ARG_EXPAND);
void glMultiModeDrawArraysIBM(glMultiModeDrawArraysIBM_ARG_EXPAND);
typedef void (*glMultiModeDrawArraysIBM_PTR)(glMultiModeDrawArraysIBM_ARG_EXPAND);
void glMultiModeDrawElementsIBM(glMultiModeDrawElementsIBM_ARG_EXPAND);
typedef void (*glMultiModeDrawElementsIBM_PTR)(glMultiModeDrawElementsIBM_ARG_EXPAND);
void glMultiTexBufferEXT(glMultiTexBufferEXT_ARG_EXPAND);
typedef void (*glMultiTexBufferEXT_PTR)(glMultiTexBufferEXT_ARG_EXPAND);
void glMultiTexCoord1bOES(glMultiTexCoord1bOES_ARG_EXPAND);
typedef void (*glMultiTexCoord1bOES_PTR)(glMultiTexCoord1bOES_ARG_EXPAND);
void glMultiTexCoord1bvOES(glMultiTexCoord1bvOES_ARG_EXPAND);
typedef void (*glMultiTexCoord1bvOES_PTR)(glMultiTexCoord1bvOES_ARG_EXPAND);
void glMultiTexCoord1d(glMultiTexCoord1d_ARG_EXPAND);
typedef void (*glMultiTexCoord1d_PTR)(glMultiTexCoord1d_ARG_EXPAND);
void glMultiTexCoord1dARB(glMultiTexCoord1dARB_ARG_EXPAND);
typedef void (*glMultiTexCoord1dARB_PTR)(glMultiTexCoord1dARB_ARG_EXPAND);
void glMultiTexCoord1dv(glMultiTexCoord1dv_ARG_EXPAND);
typedef void (*glMultiTexCoord1dv_PTR)(glMultiTexCoord1dv_ARG_EXPAND);
void glMultiTexCoord1dvARB(glMultiTexCoord1dvARB_ARG_EXPAND);
typedef void (*glMultiTexCoord1dvARB_PTR)(glMultiTexCoord1dvARB_ARG_EXPAND);
void glMultiTexCoord1f(glMultiTexCoord1f_ARG_EXPAND);
typedef void (*glMultiTexCoord1f_PTR)(glMultiTexCoord1f_ARG_EXPAND);
void glMultiTexCoord1fARB(glMultiTexCoord1fARB_ARG_EXPAND);
typedef void (*glMultiTexCoord1fARB_PTR)(glMultiTexCoord1fARB_ARG_EXPAND);
void glMultiTexCoord1fv(glMultiTexCoord1fv_ARG_EXPAND);
typedef void (*glMultiTexCoord1fv_PTR)(glMultiTexCoord1fv_ARG_EXPAND);
void glMultiTexCoord1fvARB(glMultiTexCoord1fvARB_ARG_EXPAND);
typedef void (*glMultiTexCoord1fvARB_PTR)(glMultiTexCoord1fvARB_ARG_EXPAND);
void glMultiTexCoord1hNV(glMultiTexCoord1hNV_ARG_EXPAND);
typedef void (*glMultiTexCoord1hNV_PTR)(glMultiTexCoord1hNV_ARG_EXPAND);
void glMultiTexCoord1hvNV(glMultiTexCoord1hvNV_ARG_EXPAND);
typedef void (*glMultiTexCoord1hvNV_PTR)(glMultiTexCoord1hvNV_ARG_EXPAND);
void glMultiTexCoord1i(glMultiTexCoord1i_ARG_EXPAND);
typedef void (*glMultiTexCoord1i_PTR)(glMultiTexCoord1i_ARG_EXPAND);
void glMultiTexCoord1iARB(glMultiTexCoord1iARB_ARG_EXPAND);
typedef void (*glMultiTexCoord1iARB_PTR)(glMultiTexCoord1iARB_ARG_EXPAND);
void glMultiTexCoord1iv(glMultiTexCoord1iv_ARG_EXPAND);
typedef void (*glMultiTexCoord1iv_PTR)(glMultiTexCoord1iv_ARG_EXPAND);
void glMultiTexCoord1ivARB(glMultiTexCoord1ivARB_ARG_EXPAND);
typedef void (*glMultiTexCoord1ivARB_PTR)(glMultiTexCoord1ivARB_ARG_EXPAND);
void glMultiTexCoord1s(glMultiTexCoord1s_ARG_EXPAND);
typedef void (*glMultiTexCoord1s_PTR)(glMultiTexCoord1s_ARG_EXPAND);
void glMultiTexCoord1sARB(glMultiTexCoord1sARB_ARG_EXPAND);
typedef void (*glMultiTexCoord1sARB_PTR)(glMultiTexCoord1sARB_ARG_EXPAND);
void glMultiTexCoord1sv(glMultiTexCoord1sv_ARG_EXPAND);
typedef void (*glMultiTexCoord1sv_PTR)(glMultiTexCoord1sv_ARG_EXPAND);
void glMultiTexCoord1svARB(glMultiTexCoord1svARB_ARG_EXPAND);
typedef void (*glMultiTexCoord1svARB_PTR)(glMultiTexCoord1svARB_ARG_EXPAND);
void glMultiTexCoord1xOES(glMultiTexCoord1xOES_ARG_EXPAND);
typedef void (*glMultiTexCoord1xOES_PTR)(glMultiTexCoord1xOES_ARG_EXPAND);
void glMultiTexCoord1xvOES(glMultiTexCoord1xvOES_ARG_EXPAND);
typedef void (*glMultiTexCoord1xvOES_PTR)(glMultiTexCoord1xvOES_ARG_EXPAND);
void glMultiTexCoord2bOES(glMultiTexCoord2bOES_ARG_EXPAND);
typedef void (*glMultiTexCoord2bOES_PTR)(glMultiTexCoord2bOES_ARG_EXPAND);
void glMultiTexCoord2bvOES(glMultiTexCoord2bvOES_ARG_EXPAND);
typedef void (*glMultiTexCoord2bvOES_PTR)(glMultiTexCoord2bvOES_ARG_EXPAND);
void glMultiTexCoord2d(glMultiTexCoord2d_ARG_EXPAND);
typedef void (*glMultiTexCoord2d_PTR)(glMultiTexCoord2d_ARG_EXPAND);
void glMultiTexCoord2dARB(glMultiTexCoord2dARB_ARG_EXPAND);
typedef void (*glMultiTexCoord2dARB_PTR)(glMultiTexCoord2dARB_ARG_EXPAND);
void glMultiTexCoord2dv(glMultiTexCoord2dv_ARG_EXPAND);
typedef void (*glMultiTexCoord2dv_PTR)(glMultiTexCoord2dv_ARG_EXPAND);
void glMultiTexCoord2dvARB(glMultiTexCoord2dvARB_ARG_EXPAND);
typedef void (*glMultiTexCoord2dvARB_PTR)(glMultiTexCoord2dvARB_ARG_EXPAND);
void glMultiTexCoord2f(glMultiTexCoord2f_ARG_EXPAND);
typedef void (*glMultiTexCoord2f_PTR)(glMultiTexCoord2f_ARG_EXPAND);
void glMultiTexCoord2fARB(glMultiTexCoord2fARB_ARG_EXPAND);
typedef void (*glMultiTexCoord2fARB_PTR)(glMultiTexCoord2fARB_ARG_EXPAND);
void glMultiTexCoord2fv(glMultiTexCoord2fv_ARG_EXPAND);
typedef void (*glMultiTexCoord2fv_PTR)(glMultiTexCoord2fv_ARG_EXPAND);
void glMultiTexCoord2fvARB(glMultiTexCoord2fvARB_ARG_EXPAND);
typedef void (*glMultiTexCoord2fvARB_PTR)(glMultiTexCoord2fvARB_ARG_EXPAND);
void glMultiTexCoord2hNV(glMultiTexCoord2hNV_ARG_EXPAND);
typedef void (*glMultiTexCoord2hNV_PTR)(glMultiTexCoord2hNV_ARG_EXPAND);
void glMultiTexCoord2hvNV(glMultiTexCoord2hvNV_ARG_EXPAND);
typedef void (*glMultiTexCoord2hvNV_PTR)(glMultiTexCoord2hvNV_ARG_EXPAND);
void glMultiTexCoord2i(glMultiTexCoord2i_ARG_EXPAND);
typedef void (*glMultiTexCoord2i_PTR)(glMultiTexCoord2i_ARG_EXPAND);
void glMultiTexCoord2iARB(glMultiTexCoord2iARB_ARG_EXPAND);
typedef void (*glMultiTexCoord2iARB_PTR)(glMultiTexCoord2iARB_ARG_EXPAND);
void glMultiTexCoord2iv(glMultiTexCoord2iv_ARG_EXPAND);
typedef void (*glMultiTexCoord2iv_PTR)(glMultiTexCoord2iv_ARG_EXPAND);
void glMultiTexCoord2ivARB(glMultiTexCoord2ivARB_ARG_EXPAND);
typedef void (*glMultiTexCoord2ivARB_PTR)(glMultiTexCoord2ivARB_ARG_EXPAND);
void glMultiTexCoord2s(glMultiTexCoord2s_ARG_EXPAND);
typedef void (*glMultiTexCoord2s_PTR)(glMultiTexCoord2s_ARG_EXPAND);
void glMultiTexCoord2sARB(glMultiTexCoord2sARB_ARG_EXPAND);
typedef void (*glMultiTexCoord2sARB_PTR)(glMultiTexCoord2sARB_ARG_EXPAND);
void glMultiTexCoord2sv(glMultiTexCoord2sv_ARG_EXPAND);
typedef void (*glMultiTexCoord2sv_PTR)(glMultiTexCoord2sv_ARG_EXPAND);
void glMultiTexCoord2svARB(glMultiTexCoord2svARB_ARG_EXPAND);
typedef void (*glMultiTexCoord2svARB_PTR)(glMultiTexCoord2svARB_ARG_EXPAND);
void glMultiTexCoord2xOES(glMultiTexCoord2xOES_ARG_EXPAND);
typedef void (*glMultiTexCoord2xOES_PTR)(glMultiTexCoord2xOES_ARG_EXPAND);
void glMultiTexCoord2xvOES(glMultiTexCoord2xvOES_ARG_EXPAND);
typedef void (*glMultiTexCoord2xvOES_PTR)(glMultiTexCoord2xvOES_ARG_EXPAND);
void glMultiTexCoord3bOES(glMultiTexCoord3bOES_ARG_EXPAND);
typedef void (*glMultiTexCoord3bOES_PTR)(glMultiTexCoord3bOES_ARG_EXPAND);
void glMultiTexCoord3bvOES(glMultiTexCoord3bvOES_ARG_EXPAND);
typedef void (*glMultiTexCoord3bvOES_PTR)(glMultiTexCoord3bvOES_ARG_EXPAND);
void glMultiTexCoord3d(glMultiTexCoord3d_ARG_EXPAND);
typedef void (*glMultiTexCoord3d_PTR)(glMultiTexCoord3d_ARG_EXPAND);
void glMultiTexCoord3dARB(glMultiTexCoord3dARB_ARG_EXPAND);
typedef void (*glMultiTexCoord3dARB_PTR)(glMultiTexCoord3dARB_ARG_EXPAND);
void glMultiTexCoord3dv(glMultiTexCoord3dv_ARG_EXPAND);
typedef void (*glMultiTexCoord3dv_PTR)(glMultiTexCoord3dv_ARG_EXPAND);
void glMultiTexCoord3dvARB(glMultiTexCoord3dvARB_ARG_EXPAND);
typedef void (*glMultiTexCoord3dvARB_PTR)(glMultiTexCoord3dvARB_ARG_EXPAND);
void glMultiTexCoord3f(glMultiTexCoord3f_ARG_EXPAND);
typedef void (*glMultiTexCoord3f_PTR)(glMultiTexCoord3f_ARG_EXPAND);
void glMultiTexCoord3fARB(glMultiTexCoord3fARB_ARG_EXPAND);
typedef void (*glMultiTexCoord3fARB_PTR)(glMultiTexCoord3fARB_ARG_EXPAND);
void glMultiTexCoord3fv(glMultiTexCoord3fv_ARG_EXPAND);
typedef void (*glMultiTexCoord3fv_PTR)(glMultiTexCoord3fv_ARG_EXPAND);
void glMultiTexCoord3fvARB(glMultiTexCoord3fvARB_ARG_EXPAND);
typedef void (*glMultiTexCoord3fvARB_PTR)(glMultiTexCoord3fvARB_ARG_EXPAND);
void glMultiTexCoord3hNV(glMultiTexCoord3hNV_ARG_EXPAND);
typedef void (*glMultiTexCoord3hNV_PTR)(glMultiTexCoord3hNV_ARG_EXPAND);
void glMultiTexCoord3hvNV(glMultiTexCoord3hvNV_ARG_EXPAND);
typedef void (*glMultiTexCoord3hvNV_PTR)(glMultiTexCoord3hvNV_ARG_EXPAND);
void glMultiTexCoord3i(glMultiTexCoord3i_ARG_EXPAND);
typedef void (*glMultiTexCoord3i_PTR)(glMultiTexCoord3i_ARG_EXPAND);
void glMultiTexCoord3iARB(glMultiTexCoord3iARB_ARG_EXPAND);
typedef void (*glMultiTexCoord3iARB_PTR)(glMultiTexCoord3iARB_ARG_EXPAND);
void glMultiTexCoord3iv(glMultiTexCoord3iv_ARG_EXPAND);
typedef void (*glMultiTexCoord3iv_PTR)(glMultiTexCoord3iv_ARG_EXPAND);
void glMultiTexCoord3ivARB(glMultiTexCoord3ivARB_ARG_EXPAND);
typedef void (*glMultiTexCoord3ivARB_PTR)(glMultiTexCoord3ivARB_ARG_EXPAND);
void glMultiTexCoord3s(glMultiTexCoord3s_ARG_EXPAND);
typedef void (*glMultiTexCoord3s_PTR)(glMultiTexCoord3s_ARG_EXPAND);
void glMultiTexCoord3sARB(glMultiTexCoord3sARB_ARG_EXPAND);
typedef void (*glMultiTexCoord3sARB_PTR)(glMultiTexCoord3sARB_ARG_EXPAND);
void glMultiTexCoord3sv(glMultiTexCoord3sv_ARG_EXPAND);
typedef void (*glMultiTexCoord3sv_PTR)(glMultiTexCoord3sv_ARG_EXPAND);
void glMultiTexCoord3svARB(glMultiTexCoord3svARB_ARG_EXPAND);
typedef void (*glMultiTexCoord3svARB_PTR)(glMultiTexCoord3svARB_ARG_EXPAND);
void glMultiTexCoord3xOES(glMultiTexCoord3xOES_ARG_EXPAND);
typedef void (*glMultiTexCoord3xOES_PTR)(glMultiTexCoord3xOES_ARG_EXPAND);
void glMultiTexCoord3xvOES(glMultiTexCoord3xvOES_ARG_EXPAND);
typedef void (*glMultiTexCoord3xvOES_PTR)(glMultiTexCoord3xvOES_ARG_EXPAND);
void glMultiTexCoord4bOES(glMultiTexCoord4bOES_ARG_EXPAND);
typedef void (*glMultiTexCoord4bOES_PTR)(glMultiTexCoord4bOES_ARG_EXPAND);
void glMultiTexCoord4bvOES(glMultiTexCoord4bvOES_ARG_EXPAND);
typedef void (*glMultiTexCoord4bvOES_PTR)(glMultiTexCoord4bvOES_ARG_EXPAND);
void glMultiTexCoord4d(glMultiTexCoord4d_ARG_EXPAND);
typedef void (*glMultiTexCoord4d_PTR)(glMultiTexCoord4d_ARG_EXPAND);
void glMultiTexCoord4dARB(glMultiTexCoord4dARB_ARG_EXPAND);
typedef void (*glMultiTexCoord4dARB_PTR)(glMultiTexCoord4dARB_ARG_EXPAND);
void glMultiTexCoord4dv(glMultiTexCoord4dv_ARG_EXPAND);
typedef void (*glMultiTexCoord4dv_PTR)(glMultiTexCoord4dv_ARG_EXPAND);
void glMultiTexCoord4dvARB(glMultiTexCoord4dvARB_ARG_EXPAND);
typedef void (*glMultiTexCoord4dvARB_PTR)(glMultiTexCoord4dvARB_ARG_EXPAND);
void glMultiTexCoord4f(glMultiTexCoord4f_ARG_EXPAND);
typedef void (*glMultiTexCoord4f_PTR)(glMultiTexCoord4f_ARG_EXPAND);
void glMultiTexCoord4fARB(glMultiTexCoord4fARB_ARG_EXPAND);
typedef void (*glMultiTexCoord4fARB_PTR)(glMultiTexCoord4fARB_ARG_EXPAND);
void glMultiTexCoord4fv(glMultiTexCoord4fv_ARG_EXPAND);
typedef void (*glMultiTexCoord4fv_PTR)(glMultiTexCoord4fv_ARG_EXPAND);
void glMultiTexCoord4fvARB(glMultiTexCoord4fvARB_ARG_EXPAND);
typedef void (*glMultiTexCoord4fvARB_PTR)(glMultiTexCoord4fvARB_ARG_EXPAND);
void glMultiTexCoord4hNV(glMultiTexCoord4hNV_ARG_EXPAND);
typedef void (*glMultiTexCoord4hNV_PTR)(glMultiTexCoord4hNV_ARG_EXPAND);
void glMultiTexCoord4hvNV(glMultiTexCoord4hvNV_ARG_EXPAND);
typedef void (*glMultiTexCoord4hvNV_PTR)(glMultiTexCoord4hvNV_ARG_EXPAND);
void glMultiTexCoord4i(glMultiTexCoord4i_ARG_EXPAND);
typedef void (*glMultiTexCoord4i_PTR)(glMultiTexCoord4i_ARG_EXPAND);
void glMultiTexCoord4iARB(glMultiTexCoord4iARB_ARG_EXPAND);
typedef void (*glMultiTexCoord4iARB_PTR)(glMultiTexCoord4iARB_ARG_EXPAND);
void glMultiTexCoord4iv(glMultiTexCoord4iv_ARG_EXPAND);
typedef void (*glMultiTexCoord4iv_PTR)(glMultiTexCoord4iv_ARG_EXPAND);
void glMultiTexCoord4ivARB(glMultiTexCoord4ivARB_ARG_EXPAND);
typedef void (*glMultiTexCoord4ivARB_PTR)(glMultiTexCoord4ivARB_ARG_EXPAND);
void glMultiTexCoord4s(glMultiTexCoord4s_ARG_EXPAND);
typedef void (*glMultiTexCoord4s_PTR)(glMultiTexCoord4s_ARG_EXPAND);
void glMultiTexCoord4sARB(glMultiTexCoord4sARB_ARG_EXPAND);
typedef void (*glMultiTexCoord4sARB_PTR)(glMultiTexCoord4sARB_ARG_EXPAND);
void glMultiTexCoord4sv(glMultiTexCoord4sv_ARG_EXPAND);
typedef void (*glMultiTexCoord4sv_PTR)(glMultiTexCoord4sv_ARG_EXPAND);
void glMultiTexCoord4svARB(glMultiTexCoord4svARB_ARG_EXPAND);
typedef void (*glMultiTexCoord4svARB_PTR)(glMultiTexCoord4svARB_ARG_EXPAND);
void glMultiTexCoord4x(glMultiTexCoord4x_ARG_EXPAND);
typedef void (*glMultiTexCoord4x_PTR)(glMultiTexCoord4x_ARG_EXPAND);
void glMultiTexCoord4xOES(glMultiTexCoord4xOES_ARG_EXPAND);
typedef void (*glMultiTexCoord4xOES_PTR)(glMultiTexCoord4xOES_ARG_EXPAND);
void glMultiTexCoord4xvOES(glMultiTexCoord4xvOES_ARG_EXPAND);
typedef void (*glMultiTexCoord4xvOES_PTR)(glMultiTexCoord4xvOES_ARG_EXPAND);
void glMultiTexCoordP1ui(glMultiTexCoordP1ui_ARG_EXPAND);
typedef void (*glMultiTexCoordP1ui_PTR)(glMultiTexCoordP1ui_ARG_EXPAND);
void glMultiTexCoordP1uiv(glMultiTexCoordP1uiv_ARG_EXPAND);
typedef void (*glMultiTexCoordP1uiv_PTR)(glMultiTexCoordP1uiv_ARG_EXPAND);
void glMultiTexCoordP2ui(glMultiTexCoordP2ui_ARG_EXPAND);
typedef void (*glMultiTexCoordP2ui_PTR)(glMultiTexCoordP2ui_ARG_EXPAND);
void glMultiTexCoordP2uiv(glMultiTexCoordP2uiv_ARG_EXPAND);
typedef void (*glMultiTexCoordP2uiv_PTR)(glMultiTexCoordP2uiv_ARG_EXPAND);
void glMultiTexCoordP3ui(glMultiTexCoordP3ui_ARG_EXPAND);
typedef void (*glMultiTexCoordP3ui_PTR)(glMultiTexCoordP3ui_ARG_EXPAND);
void glMultiTexCoordP3uiv(glMultiTexCoordP3uiv_ARG_EXPAND);
typedef void (*glMultiTexCoordP3uiv_PTR)(glMultiTexCoordP3uiv_ARG_EXPAND);
void glMultiTexCoordP4ui(glMultiTexCoordP4ui_ARG_EXPAND);
typedef void (*glMultiTexCoordP4ui_PTR)(glMultiTexCoordP4ui_ARG_EXPAND);
void glMultiTexCoordP4uiv(glMultiTexCoordP4uiv_ARG_EXPAND);
typedef void (*glMultiTexCoordP4uiv_PTR)(glMultiTexCoordP4uiv_ARG_EXPAND);
void glMultiTexCoordPointerEXT(glMultiTexCoordPointerEXT_ARG_EXPAND);
typedef void (*glMultiTexCoordPointerEXT_PTR)(glMultiTexCoordPointerEXT_ARG_EXPAND);
void glMultiTexEnvfEXT(glMultiTexEnvfEXT_ARG_EXPAND);
typedef void (*glMultiTexEnvfEXT_PTR)(glMultiTexEnvfEXT_ARG_EXPAND);
void glMultiTexEnvfvEXT(glMultiTexEnvfvEXT_ARG_EXPAND);
typedef void (*glMultiTexEnvfvEXT_PTR)(glMultiTexEnvfvEXT_ARG_EXPAND);
void glMultiTexEnviEXT(glMultiTexEnviEXT_ARG_EXPAND);
typedef void (*glMultiTexEnviEXT_PTR)(glMultiTexEnviEXT_ARG_EXPAND);
void glMultiTexEnvivEXT(glMultiTexEnvivEXT_ARG_EXPAND);
typedef void (*glMultiTexEnvivEXT_PTR)(glMultiTexEnvivEXT_ARG_EXPAND);
void glMultiTexGendEXT(glMultiTexGendEXT_ARG_EXPAND);
typedef void (*glMultiTexGendEXT_PTR)(glMultiTexGendEXT_ARG_EXPAND);
void glMultiTexGendvEXT(glMultiTexGendvEXT_ARG_EXPAND);
typedef void (*glMultiTexGendvEXT_PTR)(glMultiTexGendvEXT_ARG_EXPAND);
void glMultiTexGenfEXT(glMultiTexGenfEXT_ARG_EXPAND);
typedef void (*glMultiTexGenfEXT_PTR)(glMultiTexGenfEXT_ARG_EXPAND);
void glMultiTexGenfvEXT(glMultiTexGenfvEXT_ARG_EXPAND);
typedef void (*glMultiTexGenfvEXT_PTR)(glMultiTexGenfvEXT_ARG_EXPAND);
void glMultiTexGeniEXT(glMultiTexGeniEXT_ARG_EXPAND);
typedef void (*glMultiTexGeniEXT_PTR)(glMultiTexGeniEXT_ARG_EXPAND);
void glMultiTexGenivEXT(glMultiTexGenivEXT_ARG_EXPAND);
typedef void (*glMultiTexGenivEXT_PTR)(glMultiTexGenivEXT_ARG_EXPAND);
void glMultiTexImage1DEXT(glMultiTexImage1DEXT_ARG_EXPAND);
typedef void (*glMultiTexImage1DEXT_PTR)(glMultiTexImage1DEXT_ARG_EXPAND);
void glMultiTexImage2DEXT(glMultiTexImage2DEXT_ARG_EXPAND);
typedef void (*glMultiTexImage2DEXT_PTR)(glMultiTexImage2DEXT_ARG_EXPAND);
void glMultiTexImage3DEXT(glMultiTexImage3DEXT_ARG_EXPAND);
typedef void (*glMultiTexImage3DEXT_PTR)(glMultiTexImage3DEXT_ARG_EXPAND);
void glMultiTexParameterIivEXT(glMultiTexParameterIivEXT_ARG_EXPAND);
typedef void (*glMultiTexParameterIivEXT_PTR)(glMultiTexParameterIivEXT_ARG_EXPAND);
void glMultiTexParameterIuivEXT(glMultiTexParameterIuivEXT_ARG_EXPAND);
typedef void (*glMultiTexParameterIuivEXT_PTR)(glMultiTexParameterIuivEXT_ARG_EXPAND);
void glMultiTexParameterfEXT(glMultiTexParameterfEXT_ARG_EXPAND);
typedef void (*glMultiTexParameterfEXT_PTR)(glMultiTexParameterfEXT_ARG_EXPAND);
void glMultiTexParameterfvEXT(glMultiTexParameterfvEXT_ARG_EXPAND);
typedef void (*glMultiTexParameterfvEXT_PTR)(glMultiTexParameterfvEXT_ARG_EXPAND);
void glMultiTexParameteriEXT(glMultiTexParameteriEXT_ARG_EXPAND);
typedef void (*glMultiTexParameteriEXT_PTR)(glMultiTexParameteriEXT_ARG_EXPAND);
void glMultiTexParameterivEXT(glMultiTexParameterivEXT_ARG_EXPAND);
typedef void (*glMultiTexParameterivEXT_PTR)(glMultiTexParameterivEXT_ARG_EXPAND);
void glMultiTexRenderbufferEXT(glMultiTexRenderbufferEXT_ARG_EXPAND);
typedef void (*glMultiTexRenderbufferEXT_PTR)(glMultiTexRenderbufferEXT_ARG_EXPAND);
void glMultiTexSubImage1DEXT(glMultiTexSubImage1DEXT_ARG_EXPAND);
typedef void (*glMultiTexSubImage1DEXT_PTR)(glMultiTexSubImage1DEXT_ARG_EXPAND);
void glMultiTexSubImage2DEXT(glMultiTexSubImage2DEXT_ARG_EXPAND);
typedef void (*glMultiTexSubImage2DEXT_PTR)(glMultiTexSubImage2DEXT_ARG_EXPAND);
void glMultiTexSubImage3DEXT(glMultiTexSubImage3DEXT_ARG_EXPAND);
typedef void (*glMultiTexSubImage3DEXT_PTR)(glMultiTexSubImage3DEXT_ARG_EXPAND);
void glNamedBufferDataEXT(glNamedBufferDataEXT_ARG_EXPAND);
typedef void (*glNamedBufferDataEXT_PTR)(glNamedBufferDataEXT_ARG_EXPAND);
void glNamedBufferSubDataEXT(glNamedBufferSubDataEXT_ARG_EXPAND);
typedef void (*glNamedBufferSubDataEXT_PTR)(glNamedBufferSubDataEXT_ARG_EXPAND);
void glNamedCopyBufferSubDataEXT(glNamedCopyBufferSubDataEXT_ARG_EXPAND);
typedef void (*glNamedCopyBufferSubDataEXT_PTR)(glNamedCopyBufferSubDataEXT_ARG_EXPAND);
void glNamedFramebufferParameteriEXT(glNamedFramebufferParameteriEXT_ARG_EXPAND);
typedef void (*glNamedFramebufferParameteriEXT_PTR)(glNamedFramebufferParameteriEXT_ARG_EXPAND);
void glNamedFramebufferRenderbufferEXT(glNamedFramebufferRenderbufferEXT_ARG_EXPAND);
typedef void (*glNamedFramebufferRenderbufferEXT_PTR)(glNamedFramebufferRenderbufferEXT_ARG_EXPAND);
void glNamedFramebufferTexture1DEXT(glNamedFramebufferTexture1DEXT_ARG_EXPAND);
typedef void (*glNamedFramebufferTexture1DEXT_PTR)(glNamedFramebufferTexture1DEXT_ARG_EXPAND);
void glNamedFramebufferTexture2DEXT(glNamedFramebufferTexture2DEXT_ARG_EXPAND);
typedef void (*glNamedFramebufferTexture2DEXT_PTR)(glNamedFramebufferTexture2DEXT_ARG_EXPAND);
void glNamedFramebufferTexture3DEXT(glNamedFramebufferTexture3DEXT_ARG_EXPAND);
typedef void (*glNamedFramebufferTexture3DEXT_PTR)(glNamedFramebufferTexture3DEXT_ARG_EXPAND);
void glNamedFramebufferTextureEXT(glNamedFramebufferTextureEXT_ARG_EXPAND);
typedef void (*glNamedFramebufferTextureEXT_PTR)(glNamedFramebufferTextureEXT_ARG_EXPAND);
void glNamedFramebufferTextureFaceEXT(glNamedFramebufferTextureFaceEXT_ARG_EXPAND);
typedef void (*glNamedFramebufferTextureFaceEXT_PTR)(glNamedFramebufferTextureFaceEXT_ARG_EXPAND);
void glNamedFramebufferTextureLayerEXT(glNamedFramebufferTextureLayerEXT_ARG_EXPAND);
typedef void (*glNamedFramebufferTextureLayerEXT_PTR)(glNamedFramebufferTextureLayerEXT_ARG_EXPAND);
void glNamedProgramLocalParameter4dEXT(glNamedProgramLocalParameter4dEXT_ARG_EXPAND);
typedef void (*glNamedProgramLocalParameter4dEXT_PTR)(glNamedProgramLocalParameter4dEXT_ARG_EXPAND);
void glNamedProgramLocalParameter4dvEXT(glNamedProgramLocalParameter4dvEXT_ARG_EXPAND);
typedef void (*glNamedProgramLocalParameter4dvEXT_PTR)(glNamedProgramLocalParameter4dvEXT_ARG_EXPAND);
void glNamedProgramLocalParameter4fEXT(glNamedProgramLocalParameter4fEXT_ARG_EXPAND);
typedef void (*glNamedProgramLocalParameter4fEXT_PTR)(glNamedProgramLocalParameter4fEXT_ARG_EXPAND);
void glNamedProgramLocalParameter4fvEXT(glNamedProgramLocalParameter4fvEXT_ARG_EXPAND);
typedef void (*glNamedProgramLocalParameter4fvEXT_PTR)(glNamedProgramLocalParameter4fvEXT_ARG_EXPAND);
void glNamedProgramLocalParameterI4iEXT(glNamedProgramLocalParameterI4iEXT_ARG_EXPAND);
typedef void (*glNamedProgramLocalParameterI4iEXT_PTR)(glNamedProgramLocalParameterI4iEXT_ARG_EXPAND);
void glNamedProgramLocalParameterI4ivEXT(glNamedProgramLocalParameterI4ivEXT_ARG_EXPAND);
typedef void (*glNamedProgramLocalParameterI4ivEXT_PTR)(glNamedProgramLocalParameterI4ivEXT_ARG_EXPAND);
void glNamedProgramLocalParameterI4uiEXT(glNamedProgramLocalParameterI4uiEXT_ARG_EXPAND);
typedef void (*glNamedProgramLocalParameterI4uiEXT_PTR)(glNamedProgramLocalParameterI4uiEXT_ARG_EXPAND);
void glNamedProgramLocalParameterI4uivEXT(glNamedProgramLocalParameterI4uivEXT_ARG_EXPAND);
typedef void (*glNamedProgramLocalParameterI4uivEXT_PTR)(glNamedProgramLocalParameterI4uivEXT_ARG_EXPAND);
void glNamedProgramLocalParameters4fvEXT(glNamedProgramLocalParameters4fvEXT_ARG_EXPAND);
typedef void (*glNamedProgramLocalParameters4fvEXT_PTR)(glNamedProgramLocalParameters4fvEXT_ARG_EXPAND);
void glNamedProgramLocalParametersI4ivEXT(glNamedProgramLocalParametersI4ivEXT_ARG_EXPAND);
typedef void (*glNamedProgramLocalParametersI4ivEXT_PTR)(glNamedProgramLocalParametersI4ivEXT_ARG_EXPAND);
void glNamedProgramLocalParametersI4uivEXT(glNamedProgramLocalParametersI4uivEXT_ARG_EXPAND);
typedef void (*glNamedProgramLocalParametersI4uivEXT_PTR)(glNamedProgramLocalParametersI4uivEXT_ARG_EXPAND);
void glNamedProgramStringEXT(glNamedProgramStringEXT_ARG_EXPAND);
typedef void (*glNamedProgramStringEXT_PTR)(glNamedProgramStringEXT_ARG_EXPAND);
void glNamedRenderbufferStorageEXT(glNamedRenderbufferStorageEXT_ARG_EXPAND);
typedef void (*glNamedRenderbufferStorageEXT_PTR)(glNamedRenderbufferStorageEXT_ARG_EXPAND);
void glNamedRenderbufferStorageMultisampleCoverageEXT(glNamedRenderbufferStorageMultisampleCoverageEXT_ARG_EXPAND);
typedef void (*glNamedRenderbufferStorageMultisampleCoverageEXT_PTR)(glNamedRenderbufferStorageMultisampleCoverageEXT_ARG_EXPAND);
void glNamedRenderbufferStorageMultisampleEXT(glNamedRenderbufferStorageMultisampleEXT_ARG_EXPAND);
typedef void (*glNamedRenderbufferStorageMultisampleEXT_PTR)(glNamedRenderbufferStorageMultisampleEXT_ARG_EXPAND);
void glNamedStringARB(glNamedStringARB_ARG_EXPAND);
typedef void (*glNamedStringARB_PTR)(glNamedStringARB_ARG_EXPAND);
void glNewList(glNewList_ARG_EXPAND);
typedef void (*glNewList_PTR)(glNewList_ARG_EXPAND);
GLuint glNewObjectBufferATI(glNewObjectBufferATI_ARG_EXPAND);
typedef GLuint (*glNewObjectBufferATI_PTR)(glNewObjectBufferATI_ARG_EXPAND);
void glNormal3b(glNormal3b_ARG_EXPAND);
typedef void (*glNormal3b_PTR)(glNormal3b_ARG_EXPAND);
void glNormal3bv(glNormal3bv_ARG_EXPAND);
typedef void (*glNormal3bv_PTR)(glNormal3bv_ARG_EXPAND);
void glNormal3d(glNormal3d_ARG_EXPAND);
typedef void (*glNormal3d_PTR)(glNormal3d_ARG_EXPAND);
void glNormal3dv(glNormal3dv_ARG_EXPAND);
typedef void (*glNormal3dv_PTR)(glNormal3dv_ARG_EXPAND);
void glNormal3f(glNormal3f_ARG_EXPAND);
typedef void (*glNormal3f_PTR)(glNormal3f_ARG_EXPAND);
void glNormal3fVertex3fSUN(glNormal3fVertex3fSUN_ARG_EXPAND);
typedef void (*glNormal3fVertex3fSUN_PTR)(glNormal3fVertex3fSUN_ARG_EXPAND);
void glNormal3fVertex3fvSUN(glNormal3fVertex3fvSUN_ARG_EXPAND);
typedef void (*glNormal3fVertex3fvSUN_PTR)(glNormal3fVertex3fvSUN_ARG_EXPAND);
void glNormal3fv(glNormal3fv_ARG_EXPAND);
typedef void (*glNormal3fv_PTR)(glNormal3fv_ARG_EXPAND);
void glNormal3hNV(glNormal3hNV_ARG_EXPAND);
typedef void (*glNormal3hNV_PTR)(glNormal3hNV_ARG_EXPAND);
void glNormal3hvNV(glNormal3hvNV_ARG_EXPAND);
typedef void (*glNormal3hvNV_PTR)(glNormal3hvNV_ARG_EXPAND);
void glNormal3i(glNormal3i_ARG_EXPAND);
typedef void (*glNormal3i_PTR)(glNormal3i_ARG_EXPAND);
void glNormal3iv(glNormal3iv_ARG_EXPAND);
typedef void (*glNormal3iv_PTR)(glNormal3iv_ARG_EXPAND);
void glNormal3s(glNormal3s_ARG_EXPAND);
typedef void (*glNormal3s_PTR)(glNormal3s_ARG_EXPAND);
void glNormal3sv(glNormal3sv_ARG_EXPAND);
typedef void (*glNormal3sv_PTR)(glNormal3sv_ARG_EXPAND);
void glNormal3x(glNormal3x_ARG_EXPAND);
typedef void (*glNormal3x_PTR)(glNormal3x_ARG_EXPAND);
void glNormal3xOES(glNormal3xOES_ARG_EXPAND);
typedef void (*glNormal3xOES_PTR)(glNormal3xOES_ARG_EXPAND);
void glNormal3xvOES(glNormal3xvOES_ARG_EXPAND);
typedef void (*glNormal3xvOES_PTR)(glNormal3xvOES_ARG_EXPAND);
void glNormalFormatNV(glNormalFormatNV_ARG_EXPAND);
typedef void (*glNormalFormatNV_PTR)(glNormalFormatNV_ARG_EXPAND);
void glNormalP3ui(glNormalP3ui_ARG_EXPAND);
typedef void (*glNormalP3ui_PTR)(glNormalP3ui_ARG_EXPAND);
void glNormalP3uiv(glNormalP3uiv_ARG_EXPAND);
typedef void (*glNormalP3uiv_PTR)(glNormalP3uiv_ARG_EXPAND);
void glNormalPointer(glNormalPointer_ARG_EXPAND);
typedef void (*glNormalPointer_PTR)(glNormalPointer_ARG_EXPAND);
void glNormalPointerEXT(glNormalPointerEXT_ARG_EXPAND);
typedef void (*glNormalPointerEXT_PTR)(glNormalPointerEXT_ARG_EXPAND);
void glNormalPointerListIBM(glNormalPointerListIBM_ARG_EXPAND);
typedef void (*glNormalPointerListIBM_PTR)(glNormalPointerListIBM_ARG_EXPAND);
void glNormalPointervINTEL(glNormalPointervINTEL_ARG_EXPAND);
typedef void (*glNormalPointervINTEL_PTR)(glNormalPointervINTEL_ARG_EXPAND);
void glNormalStream3bATI(glNormalStream3bATI_ARG_EXPAND);
typedef void (*glNormalStream3bATI_PTR)(glNormalStream3bATI_ARG_EXPAND);
void glNormalStream3bvATI(glNormalStream3bvATI_ARG_EXPAND);
typedef void (*glNormalStream3bvATI_PTR)(glNormalStream3bvATI_ARG_EXPAND);
void glNormalStream3dATI(glNormalStream3dATI_ARG_EXPAND);
typedef void (*glNormalStream3dATI_PTR)(glNormalStream3dATI_ARG_EXPAND);
void glNormalStream3dvATI(glNormalStream3dvATI_ARG_EXPAND);
typedef void (*glNormalStream3dvATI_PTR)(glNormalStream3dvATI_ARG_EXPAND);
void glNormalStream3fATI(glNormalStream3fATI_ARG_EXPAND);
typedef void (*glNormalStream3fATI_PTR)(glNormalStream3fATI_ARG_EXPAND);
void glNormalStream3fvATI(glNormalStream3fvATI_ARG_EXPAND);
typedef void (*glNormalStream3fvATI_PTR)(glNormalStream3fvATI_ARG_EXPAND);
void glNormalStream3iATI(glNormalStream3iATI_ARG_EXPAND);
typedef void (*glNormalStream3iATI_PTR)(glNormalStream3iATI_ARG_EXPAND);
void glNormalStream3ivATI(glNormalStream3ivATI_ARG_EXPAND);
typedef void (*glNormalStream3ivATI_PTR)(glNormalStream3ivATI_ARG_EXPAND);
void glNormalStream3sATI(glNormalStream3sATI_ARG_EXPAND);
typedef void (*glNormalStream3sATI_PTR)(glNormalStream3sATI_ARG_EXPAND);
void glNormalStream3svATI(glNormalStream3svATI_ARG_EXPAND);
typedef void (*glNormalStream3svATI_PTR)(glNormalStream3svATI_ARG_EXPAND);
void glObjectLabel(glObjectLabel_ARG_EXPAND);
typedef void (*glObjectLabel_PTR)(glObjectLabel_ARG_EXPAND);
void glObjectPtrLabel(glObjectPtrLabel_ARG_EXPAND);
typedef void (*glObjectPtrLabel_PTR)(glObjectPtrLabel_ARG_EXPAND);
GLenum glObjectPurgeableAPPLE(glObjectPurgeableAPPLE_ARG_EXPAND);
typedef GLenum (*glObjectPurgeableAPPLE_PTR)(glObjectPurgeableAPPLE_ARG_EXPAND);
GLenum glObjectUnpurgeableAPPLE(glObjectUnpurgeableAPPLE_ARG_EXPAND);
typedef GLenum (*glObjectUnpurgeableAPPLE_PTR)(glObjectUnpurgeableAPPLE_ARG_EXPAND);
void glOrtho(glOrtho_ARG_EXPAND);
typedef void (*glOrtho_PTR)(glOrtho_ARG_EXPAND);
void glOrthof(glOrthof_ARG_EXPAND);
typedef void (*glOrthof_PTR)(glOrthof_ARG_EXPAND);
void glOrthofOES(glOrthofOES_ARG_EXPAND);
typedef void (*glOrthofOES_PTR)(glOrthofOES_ARG_EXPAND);
void glOrthox(glOrthox_ARG_EXPAND);
typedef void (*glOrthox_PTR)(glOrthox_ARG_EXPAND);
void glOrthoxOES(glOrthoxOES_ARG_EXPAND);
typedef void (*glOrthoxOES_PTR)(glOrthoxOES_ARG_EXPAND);
void glPNTrianglesfATI(glPNTrianglesfATI_ARG_EXPAND);
typedef void (*glPNTrianglesfATI_PTR)(glPNTrianglesfATI_ARG_EXPAND);
void glPNTrianglesiATI(glPNTrianglesiATI_ARG_EXPAND);
typedef void (*glPNTrianglesiATI_PTR)(glPNTrianglesiATI_ARG_EXPAND);
void glPassTexCoordATI(glPassTexCoordATI_ARG_EXPAND);
typedef void (*glPassTexCoordATI_PTR)(glPassTexCoordATI_ARG_EXPAND);
void glPassThrough(glPassThrough_ARG_EXPAND);
typedef void (*glPassThrough_PTR)(glPassThrough_ARG_EXPAND);
void glPassThroughxOES(glPassThroughxOES_ARG_EXPAND);
typedef void (*glPassThroughxOES_PTR)(glPassThroughxOES_ARG_EXPAND);
void glPatchParameterfv(glPatchParameterfv_ARG_EXPAND);
typedef void (*glPatchParameterfv_PTR)(glPatchParameterfv_ARG_EXPAND);
void glPatchParameteri(glPatchParameteri_ARG_EXPAND);
typedef void (*glPatchParameteri_PTR)(glPatchParameteri_ARG_EXPAND);
void glPathColorGenNV(glPathColorGenNV_ARG_EXPAND);
typedef void (*glPathColorGenNV_PTR)(glPathColorGenNV_ARG_EXPAND);
void glPathCommandsNV(glPathCommandsNV_ARG_EXPAND);
typedef void (*glPathCommandsNV_PTR)(glPathCommandsNV_ARG_EXPAND);
void glPathCoordsNV(glPathCoordsNV_ARG_EXPAND);
typedef void (*glPathCoordsNV_PTR)(glPathCoordsNV_ARG_EXPAND);
void glPathCoverDepthFuncNV(glPathCoverDepthFuncNV_ARG_EXPAND);
typedef void (*glPathCoverDepthFuncNV_PTR)(glPathCoverDepthFuncNV_ARG_EXPAND);
void glPathDashArrayNV(glPathDashArrayNV_ARG_EXPAND);
typedef void (*glPathDashArrayNV_PTR)(glPathDashArrayNV_ARG_EXPAND);
void glPathFogGenNV(glPathFogGenNV_ARG_EXPAND);
typedef void (*glPathFogGenNV_PTR)(glPathFogGenNV_ARG_EXPAND);
void glPathGlyphRangeNV(glPathGlyphRangeNV_ARG_EXPAND);
typedef void (*glPathGlyphRangeNV_PTR)(glPathGlyphRangeNV_ARG_EXPAND);
void glPathGlyphsNV(glPathGlyphsNV_ARG_EXPAND);
typedef void (*glPathGlyphsNV_PTR)(glPathGlyphsNV_ARG_EXPAND);
void glPathParameterfNV(glPathParameterfNV_ARG_EXPAND);
typedef void (*glPathParameterfNV_PTR)(glPathParameterfNV_ARG_EXPAND);
void glPathParameterfvNV(glPathParameterfvNV_ARG_EXPAND);
typedef void (*glPathParameterfvNV_PTR)(glPathParameterfvNV_ARG_EXPAND);
void glPathParameteriNV(glPathParameteriNV_ARG_EXPAND);
typedef void (*glPathParameteriNV_PTR)(glPathParameteriNV_ARG_EXPAND);
void glPathParameterivNV(glPathParameterivNV_ARG_EXPAND);
typedef void (*glPathParameterivNV_PTR)(glPathParameterivNV_ARG_EXPAND);
void glPathStencilDepthOffsetNV(glPathStencilDepthOffsetNV_ARG_EXPAND);
typedef void (*glPathStencilDepthOffsetNV_PTR)(glPathStencilDepthOffsetNV_ARG_EXPAND);
void glPathStencilFuncNV(glPathStencilFuncNV_ARG_EXPAND);
typedef void (*glPathStencilFuncNV_PTR)(glPathStencilFuncNV_ARG_EXPAND);
void glPathStringNV(glPathStringNV_ARG_EXPAND);
typedef void (*glPathStringNV_PTR)(glPathStringNV_ARG_EXPAND);
void glPathSubCommandsNV(glPathSubCommandsNV_ARG_EXPAND);
typedef void (*glPathSubCommandsNV_PTR)(glPathSubCommandsNV_ARG_EXPAND);
void glPathSubCoordsNV(glPathSubCoordsNV_ARG_EXPAND);
typedef void (*glPathSubCoordsNV_PTR)(glPathSubCoordsNV_ARG_EXPAND);
void glPathTexGenNV(glPathTexGenNV_ARG_EXPAND);
typedef void (*glPathTexGenNV_PTR)(glPathTexGenNV_ARG_EXPAND);
void glPauseTransformFeedback(glPauseTransformFeedback_ARG_EXPAND);
typedef void (*glPauseTransformFeedback_PTR)(glPauseTransformFeedback_ARG_EXPAND);
void glPauseTransformFeedbackNV(glPauseTransformFeedbackNV_ARG_EXPAND);
typedef void (*glPauseTransformFeedbackNV_PTR)(glPauseTransformFeedbackNV_ARG_EXPAND);
void glPixelDataRangeNV(glPixelDataRangeNV_ARG_EXPAND);
typedef void (*glPixelDataRangeNV_PTR)(glPixelDataRangeNV_ARG_EXPAND);
void glPixelMapfv(glPixelMapfv_ARG_EXPAND);
typedef void (*glPixelMapfv_PTR)(glPixelMapfv_ARG_EXPAND);
void glPixelMapuiv(glPixelMapuiv_ARG_EXPAND);
typedef void (*glPixelMapuiv_PTR)(glPixelMapuiv_ARG_EXPAND);
void glPixelMapusv(glPixelMapusv_ARG_EXPAND);
typedef void (*glPixelMapusv_PTR)(glPixelMapusv_ARG_EXPAND);
void glPixelMapx(glPixelMapx_ARG_EXPAND);
typedef void (*glPixelMapx_PTR)(glPixelMapx_ARG_EXPAND);
void glPixelStoref(glPixelStoref_ARG_EXPAND);
typedef void (*glPixelStoref_PTR)(glPixelStoref_ARG_EXPAND);
void glPixelStorei(glPixelStorei_ARG_EXPAND);
typedef void (*glPixelStorei_PTR)(glPixelStorei_ARG_EXPAND);
void glPixelStorex(glPixelStorex_ARG_EXPAND);
typedef void (*glPixelStorex_PTR)(glPixelStorex_ARG_EXPAND);
void glPixelTexGenParameterfSGIS(glPixelTexGenParameterfSGIS_ARG_EXPAND);
typedef void (*glPixelTexGenParameterfSGIS_PTR)(glPixelTexGenParameterfSGIS_ARG_EXPAND);
void glPixelTexGenParameterfvSGIS(glPixelTexGenParameterfvSGIS_ARG_EXPAND);
typedef void (*glPixelTexGenParameterfvSGIS_PTR)(glPixelTexGenParameterfvSGIS_ARG_EXPAND);
void glPixelTexGenParameteriSGIS(glPixelTexGenParameteriSGIS_ARG_EXPAND);
typedef void (*glPixelTexGenParameteriSGIS_PTR)(glPixelTexGenParameteriSGIS_ARG_EXPAND);
void glPixelTexGenParameterivSGIS(glPixelTexGenParameterivSGIS_ARG_EXPAND);
typedef void (*glPixelTexGenParameterivSGIS_PTR)(glPixelTexGenParameterivSGIS_ARG_EXPAND);
void glPixelTexGenSGIX(glPixelTexGenSGIX_ARG_EXPAND);
typedef void (*glPixelTexGenSGIX_PTR)(glPixelTexGenSGIX_ARG_EXPAND);
void glPixelTransferf(glPixelTransferf_ARG_EXPAND);
typedef void (*glPixelTransferf_PTR)(glPixelTransferf_ARG_EXPAND);
void glPixelTransferi(glPixelTransferi_ARG_EXPAND);
typedef void (*glPixelTransferi_PTR)(glPixelTransferi_ARG_EXPAND);
void glPixelTransferxOES(glPixelTransferxOES_ARG_EXPAND);
typedef void (*glPixelTransferxOES_PTR)(glPixelTransferxOES_ARG_EXPAND);
void glPixelTransformParameterfEXT(glPixelTransformParameterfEXT_ARG_EXPAND);
typedef void (*glPixelTransformParameterfEXT_PTR)(glPixelTransformParameterfEXT_ARG_EXPAND);
void glPixelTransformParameterfvEXT(glPixelTransformParameterfvEXT_ARG_EXPAND);
typedef void (*glPixelTransformParameterfvEXT_PTR)(glPixelTransformParameterfvEXT_ARG_EXPAND);
void glPixelTransformParameteriEXT(glPixelTransformParameteriEXT_ARG_EXPAND);
typedef void (*glPixelTransformParameteriEXT_PTR)(glPixelTransformParameteriEXT_ARG_EXPAND);
void glPixelTransformParameterivEXT(glPixelTransformParameterivEXT_ARG_EXPAND);
typedef void (*glPixelTransformParameterivEXT_PTR)(glPixelTransformParameterivEXT_ARG_EXPAND);
void glPixelZoom(glPixelZoom_ARG_EXPAND);
typedef void (*glPixelZoom_PTR)(glPixelZoom_ARG_EXPAND);
void glPixelZoomxOES(glPixelZoomxOES_ARG_EXPAND);
typedef void (*glPixelZoomxOES_PTR)(glPixelZoomxOES_ARG_EXPAND);
GLboolean glPointAlongPathNV(glPointAlongPathNV_ARG_EXPAND);
typedef GLboolean (*glPointAlongPathNV_PTR)(glPointAlongPathNV_ARG_EXPAND);
void glPointParameterf(glPointParameterf_ARG_EXPAND);
typedef void (*glPointParameterf_PTR)(glPointParameterf_ARG_EXPAND);
void glPointParameterfARB(glPointParameterfARB_ARG_EXPAND);
typedef void (*glPointParameterfARB_PTR)(glPointParameterfARB_ARG_EXPAND);
void glPointParameterfEXT(glPointParameterfEXT_ARG_EXPAND);
typedef void (*glPointParameterfEXT_PTR)(glPointParameterfEXT_ARG_EXPAND);
void glPointParameterfSGIS(glPointParameterfSGIS_ARG_EXPAND);
typedef void (*glPointParameterfSGIS_PTR)(glPointParameterfSGIS_ARG_EXPAND);
void glPointParameterfv(glPointParameterfv_ARG_EXPAND);
typedef void (*glPointParameterfv_PTR)(glPointParameterfv_ARG_EXPAND);
void glPointParameterfvARB(glPointParameterfvARB_ARG_EXPAND);
typedef void (*glPointParameterfvARB_PTR)(glPointParameterfvARB_ARG_EXPAND);
void glPointParameterfvEXT(glPointParameterfvEXT_ARG_EXPAND);
typedef void (*glPointParameterfvEXT_PTR)(glPointParameterfvEXT_ARG_EXPAND);
void glPointParameterfvSGIS(glPointParameterfvSGIS_ARG_EXPAND);
typedef void (*glPointParameterfvSGIS_PTR)(glPointParameterfvSGIS_ARG_EXPAND);
void glPointParameteri(glPointParameteri_ARG_EXPAND);
typedef void (*glPointParameteri_PTR)(glPointParameteri_ARG_EXPAND);
void glPointParameteriNV(glPointParameteriNV_ARG_EXPAND);
typedef void (*glPointParameteriNV_PTR)(glPointParameteriNV_ARG_EXPAND);
void glPointParameteriv(glPointParameteriv_ARG_EXPAND);
typedef void (*glPointParameteriv_PTR)(glPointParameteriv_ARG_EXPAND);
void glPointParameterivNV(glPointParameterivNV_ARG_EXPAND);
typedef void (*glPointParameterivNV_PTR)(glPointParameterivNV_ARG_EXPAND);
void glPointParameterx(glPointParameterx_ARG_EXPAND);
typedef void (*glPointParameterx_PTR)(glPointParameterx_ARG_EXPAND);
void glPointParameterxv(glPointParameterxv_ARG_EXPAND);
typedef void (*glPointParameterxv_PTR)(glPointParameterxv_ARG_EXPAND);
void glPointParameterxvOES(glPointParameterxvOES_ARG_EXPAND);
typedef void (*glPointParameterxvOES_PTR)(glPointParameterxvOES_ARG_EXPAND);
void glPointSize(glPointSize_ARG_EXPAND);
typedef void (*glPointSize_PTR)(glPointSize_ARG_EXPAND);
void glPointSizePointerOES(glPointSizePointerOES_ARG_EXPAND);
typedef void (*glPointSizePointerOES_PTR)(glPointSizePointerOES_ARG_EXPAND);
void glPointSizex(glPointSizex_ARG_EXPAND);
typedef void (*glPointSizex_PTR)(glPointSizex_ARG_EXPAND);
void glPointSizexOES(glPointSizexOES_ARG_EXPAND);
typedef void (*glPointSizexOES_PTR)(glPointSizexOES_ARG_EXPAND);
GLint glPollAsyncSGIX(glPollAsyncSGIX_ARG_EXPAND);
typedef GLint (*glPollAsyncSGIX_PTR)(glPollAsyncSGIX_ARG_EXPAND);
GLint glPollInstrumentsSGIX(glPollInstrumentsSGIX_ARG_EXPAND);
typedef GLint (*glPollInstrumentsSGIX_PTR)(glPollInstrumentsSGIX_ARG_EXPAND);
void glPolygonMode(glPolygonMode_ARG_EXPAND);
typedef void (*glPolygonMode_PTR)(glPolygonMode_ARG_EXPAND);
void glPolygonOffset(glPolygonOffset_ARG_EXPAND);
typedef void (*glPolygonOffset_PTR)(glPolygonOffset_ARG_EXPAND);
void glPolygonOffsetEXT(glPolygonOffsetEXT_ARG_EXPAND);
typedef void (*glPolygonOffsetEXT_PTR)(glPolygonOffsetEXT_ARG_EXPAND);
void glPolygonOffsetx(glPolygonOffsetx_ARG_EXPAND);
typedef void (*glPolygonOffsetx_PTR)(glPolygonOffsetx_ARG_EXPAND);
void glPolygonOffsetxOES(glPolygonOffsetxOES_ARG_EXPAND);
typedef void (*glPolygonOffsetxOES_PTR)(glPolygonOffsetxOES_ARG_EXPAND);
void glPolygonStipple(glPolygonStipple_ARG_EXPAND);
typedef void (*glPolygonStipple_PTR)(glPolygonStipple_ARG_EXPAND);
void glPopAttrib(glPopAttrib_ARG_EXPAND);
typedef void (*glPopAttrib_PTR)(glPopAttrib_ARG_EXPAND);
void glPopClientAttrib(glPopClientAttrib_ARG_EXPAND);
typedef void (*glPopClientAttrib_PTR)(glPopClientAttrib_ARG_EXPAND);
void glPopDebugGroup(glPopDebugGroup_ARG_EXPAND);
typedef void (*glPopDebugGroup_PTR)(glPopDebugGroup_ARG_EXPAND);
void glPopMatrix(glPopMatrix_ARG_EXPAND);
typedef void (*glPopMatrix_PTR)(glPopMatrix_ARG_EXPAND);
void glPopName(glPopName_ARG_EXPAND);
typedef void (*glPopName_PTR)(glPopName_ARG_EXPAND);
void glPresentFrameDualFillNV(glPresentFrameDualFillNV_ARG_EXPAND);
typedef void (*glPresentFrameDualFillNV_PTR)(glPresentFrameDualFillNV_ARG_EXPAND);
void glPresentFrameKeyedNV(glPresentFrameKeyedNV_ARG_EXPAND);
typedef void (*glPresentFrameKeyedNV_PTR)(glPresentFrameKeyedNV_ARG_EXPAND);
void glPrimitiveRestartIndex(glPrimitiveRestartIndex_ARG_EXPAND);
typedef void (*glPrimitiveRestartIndex_PTR)(glPrimitiveRestartIndex_ARG_EXPAND);
void glPrimitiveRestartIndexNV(glPrimitiveRestartIndexNV_ARG_EXPAND);
typedef void (*glPrimitiveRestartIndexNV_PTR)(glPrimitiveRestartIndexNV_ARG_EXPAND);
void glPrimitiveRestartNV(glPrimitiveRestartNV_ARG_EXPAND);
typedef void (*glPrimitiveRestartNV_PTR)(glPrimitiveRestartNV_ARG_EXPAND);
void glPrioritizeTextures(glPrioritizeTextures_ARG_EXPAND);
typedef void (*glPrioritizeTextures_PTR)(glPrioritizeTextures_ARG_EXPAND);
void glPrioritizeTexturesEXT(glPrioritizeTexturesEXT_ARG_EXPAND);
typedef void (*glPrioritizeTexturesEXT_PTR)(glPrioritizeTexturesEXT_ARG_EXPAND);
void glPrioritizeTexturesxOES(glPrioritizeTexturesxOES_ARG_EXPAND);
typedef void (*glPrioritizeTexturesxOES_PTR)(glPrioritizeTexturesxOES_ARG_EXPAND);
void glProgramBinary(glProgramBinary_ARG_EXPAND);
typedef void (*glProgramBinary_PTR)(glProgramBinary_ARG_EXPAND);
void glProgramBufferParametersIivNV(glProgramBufferParametersIivNV_ARG_EXPAND);
typedef void (*glProgramBufferParametersIivNV_PTR)(glProgramBufferParametersIivNV_ARG_EXPAND);
void glProgramBufferParametersIuivNV(glProgramBufferParametersIuivNV_ARG_EXPAND);
typedef void (*glProgramBufferParametersIuivNV_PTR)(glProgramBufferParametersIuivNV_ARG_EXPAND);
void glProgramBufferParametersfvNV(glProgramBufferParametersfvNV_ARG_EXPAND);
typedef void (*glProgramBufferParametersfvNV_PTR)(glProgramBufferParametersfvNV_ARG_EXPAND);
void glProgramEnvParameter4dARB(glProgramEnvParameter4dARB_ARG_EXPAND);
typedef void (*glProgramEnvParameter4dARB_PTR)(glProgramEnvParameter4dARB_ARG_EXPAND);
void glProgramEnvParameter4dvARB(glProgramEnvParameter4dvARB_ARG_EXPAND);
typedef void (*glProgramEnvParameter4dvARB_PTR)(glProgramEnvParameter4dvARB_ARG_EXPAND);
void glProgramEnvParameter4fARB(glProgramEnvParameter4fARB_ARG_EXPAND);
typedef void (*glProgramEnvParameter4fARB_PTR)(glProgramEnvParameter4fARB_ARG_EXPAND);
void glProgramEnvParameter4fvARB(glProgramEnvParameter4fvARB_ARG_EXPAND);
typedef void (*glProgramEnvParameter4fvARB_PTR)(glProgramEnvParameter4fvARB_ARG_EXPAND);
void glProgramEnvParameterI4iNV(glProgramEnvParameterI4iNV_ARG_EXPAND);
typedef void (*glProgramEnvParameterI4iNV_PTR)(glProgramEnvParameterI4iNV_ARG_EXPAND);
void glProgramEnvParameterI4ivNV(glProgramEnvParameterI4ivNV_ARG_EXPAND);
typedef void (*glProgramEnvParameterI4ivNV_PTR)(glProgramEnvParameterI4ivNV_ARG_EXPAND);
void glProgramEnvParameterI4uiNV(glProgramEnvParameterI4uiNV_ARG_EXPAND);
typedef void (*glProgramEnvParameterI4uiNV_PTR)(glProgramEnvParameterI4uiNV_ARG_EXPAND);
void glProgramEnvParameterI4uivNV(glProgramEnvParameterI4uivNV_ARG_EXPAND);
typedef void (*glProgramEnvParameterI4uivNV_PTR)(glProgramEnvParameterI4uivNV_ARG_EXPAND);
void glProgramEnvParameters4fvEXT(glProgramEnvParameters4fvEXT_ARG_EXPAND);
typedef void (*glProgramEnvParameters4fvEXT_PTR)(glProgramEnvParameters4fvEXT_ARG_EXPAND);
void glProgramEnvParametersI4ivNV(glProgramEnvParametersI4ivNV_ARG_EXPAND);
typedef void (*glProgramEnvParametersI4ivNV_PTR)(glProgramEnvParametersI4ivNV_ARG_EXPAND);
void glProgramEnvParametersI4uivNV(glProgramEnvParametersI4uivNV_ARG_EXPAND);
typedef void (*glProgramEnvParametersI4uivNV_PTR)(glProgramEnvParametersI4uivNV_ARG_EXPAND);
void glProgramLocalParameter4dARB(glProgramLocalParameter4dARB_ARG_EXPAND);
typedef void (*glProgramLocalParameter4dARB_PTR)(glProgramLocalParameter4dARB_ARG_EXPAND);
void glProgramLocalParameter4dvARB(glProgramLocalParameter4dvARB_ARG_EXPAND);
typedef void (*glProgramLocalParameter4dvARB_PTR)(glProgramLocalParameter4dvARB_ARG_EXPAND);
void glProgramLocalParameter4fARB(glProgramLocalParameter4fARB_ARG_EXPAND);
typedef void (*glProgramLocalParameter4fARB_PTR)(glProgramLocalParameter4fARB_ARG_EXPAND);
void glProgramLocalParameter4fvARB(glProgramLocalParameter4fvARB_ARG_EXPAND);
typedef void (*glProgramLocalParameter4fvARB_PTR)(glProgramLocalParameter4fvARB_ARG_EXPAND);
void glProgramLocalParameterI4iNV(glProgramLocalParameterI4iNV_ARG_EXPAND);
typedef void (*glProgramLocalParameterI4iNV_PTR)(glProgramLocalParameterI4iNV_ARG_EXPAND);
void glProgramLocalParameterI4ivNV(glProgramLocalParameterI4ivNV_ARG_EXPAND);
typedef void (*glProgramLocalParameterI4ivNV_PTR)(glProgramLocalParameterI4ivNV_ARG_EXPAND);
void glProgramLocalParameterI4uiNV(glProgramLocalParameterI4uiNV_ARG_EXPAND);
typedef void (*glProgramLocalParameterI4uiNV_PTR)(glProgramLocalParameterI4uiNV_ARG_EXPAND);
void glProgramLocalParameterI4uivNV(glProgramLocalParameterI4uivNV_ARG_EXPAND);
typedef void (*glProgramLocalParameterI4uivNV_PTR)(glProgramLocalParameterI4uivNV_ARG_EXPAND);
void glProgramLocalParameters4fvEXT(glProgramLocalParameters4fvEXT_ARG_EXPAND);
typedef void (*glProgramLocalParameters4fvEXT_PTR)(glProgramLocalParameters4fvEXT_ARG_EXPAND);
void glProgramLocalParametersI4ivNV(glProgramLocalParametersI4ivNV_ARG_EXPAND);
typedef void (*glProgramLocalParametersI4ivNV_PTR)(glProgramLocalParametersI4ivNV_ARG_EXPAND);
void glProgramLocalParametersI4uivNV(glProgramLocalParametersI4uivNV_ARG_EXPAND);
typedef void (*glProgramLocalParametersI4uivNV_PTR)(glProgramLocalParametersI4uivNV_ARG_EXPAND);
void glProgramNamedParameter4dNV(glProgramNamedParameter4dNV_ARG_EXPAND);
typedef void (*glProgramNamedParameter4dNV_PTR)(glProgramNamedParameter4dNV_ARG_EXPAND);
void glProgramNamedParameter4dvNV(glProgramNamedParameter4dvNV_ARG_EXPAND);
typedef void (*glProgramNamedParameter4dvNV_PTR)(glProgramNamedParameter4dvNV_ARG_EXPAND);
void glProgramNamedParameter4fNV(glProgramNamedParameter4fNV_ARG_EXPAND);
typedef void (*glProgramNamedParameter4fNV_PTR)(glProgramNamedParameter4fNV_ARG_EXPAND);
void glProgramNamedParameter4fvNV(glProgramNamedParameter4fvNV_ARG_EXPAND);
typedef void (*glProgramNamedParameter4fvNV_PTR)(glProgramNamedParameter4fvNV_ARG_EXPAND);
void glProgramParameter4dNV(glProgramParameter4dNV_ARG_EXPAND);
typedef void (*glProgramParameter4dNV_PTR)(glProgramParameter4dNV_ARG_EXPAND);
void glProgramParameter4dvNV(glProgramParameter4dvNV_ARG_EXPAND);
typedef void (*glProgramParameter4dvNV_PTR)(glProgramParameter4dvNV_ARG_EXPAND);
void glProgramParameter4fNV(glProgramParameter4fNV_ARG_EXPAND);
typedef void (*glProgramParameter4fNV_PTR)(glProgramParameter4fNV_ARG_EXPAND);
void glProgramParameter4fvNV(glProgramParameter4fvNV_ARG_EXPAND);
typedef void (*glProgramParameter4fvNV_PTR)(glProgramParameter4fvNV_ARG_EXPAND);
void glProgramParameteri(glProgramParameteri_ARG_EXPAND);
typedef void (*glProgramParameteri_PTR)(glProgramParameteri_ARG_EXPAND);
void glProgramParameteriARB(glProgramParameteriARB_ARG_EXPAND);
typedef void (*glProgramParameteriARB_PTR)(glProgramParameteriARB_ARG_EXPAND);
void glProgramParameteriEXT(glProgramParameteriEXT_ARG_EXPAND);
typedef void (*glProgramParameteriEXT_PTR)(glProgramParameteriEXT_ARG_EXPAND);
void glProgramParameters4dvNV(glProgramParameters4dvNV_ARG_EXPAND);
typedef void (*glProgramParameters4dvNV_PTR)(glProgramParameters4dvNV_ARG_EXPAND);
void glProgramParameters4fvNV(glProgramParameters4fvNV_ARG_EXPAND);
typedef void (*glProgramParameters4fvNV_PTR)(glProgramParameters4fvNV_ARG_EXPAND);
void glProgramStringARB(glProgramStringARB_ARG_EXPAND);
typedef void (*glProgramStringARB_PTR)(glProgramStringARB_ARG_EXPAND);
void glProgramSubroutineParametersuivNV(glProgramSubroutineParametersuivNV_ARG_EXPAND);
typedef void (*glProgramSubroutineParametersuivNV_PTR)(glProgramSubroutineParametersuivNV_ARG_EXPAND);
void glProgramUniform1d(glProgramUniform1d_ARG_EXPAND);
typedef void (*glProgramUniform1d_PTR)(glProgramUniform1d_ARG_EXPAND);
void glProgramUniform1dEXT(glProgramUniform1dEXT_ARG_EXPAND);
typedef void (*glProgramUniform1dEXT_PTR)(glProgramUniform1dEXT_ARG_EXPAND);
void glProgramUniform1dv(glProgramUniform1dv_ARG_EXPAND);
typedef void (*glProgramUniform1dv_PTR)(glProgramUniform1dv_ARG_EXPAND);
void glProgramUniform1dvEXT(glProgramUniform1dvEXT_ARG_EXPAND);
typedef void (*glProgramUniform1dvEXT_PTR)(glProgramUniform1dvEXT_ARG_EXPAND);
void glProgramUniform1f(glProgramUniform1f_ARG_EXPAND);
typedef void (*glProgramUniform1f_PTR)(glProgramUniform1f_ARG_EXPAND);
void glProgramUniform1fEXT(glProgramUniform1fEXT_ARG_EXPAND);
typedef void (*glProgramUniform1fEXT_PTR)(glProgramUniform1fEXT_ARG_EXPAND);
void glProgramUniform1fv(glProgramUniform1fv_ARG_EXPAND);
typedef void (*glProgramUniform1fv_PTR)(glProgramUniform1fv_ARG_EXPAND);
void glProgramUniform1fvEXT(glProgramUniform1fvEXT_ARG_EXPAND);
typedef void (*glProgramUniform1fvEXT_PTR)(glProgramUniform1fvEXT_ARG_EXPAND);
void glProgramUniform1i(glProgramUniform1i_ARG_EXPAND);
typedef void (*glProgramUniform1i_PTR)(glProgramUniform1i_ARG_EXPAND);
void glProgramUniform1i64NV(glProgramUniform1i64NV_ARG_EXPAND);
typedef void (*glProgramUniform1i64NV_PTR)(glProgramUniform1i64NV_ARG_EXPAND);
void glProgramUniform1i64vNV(glProgramUniform1i64vNV_ARG_EXPAND);
typedef void (*glProgramUniform1i64vNV_PTR)(glProgramUniform1i64vNV_ARG_EXPAND);
void glProgramUniform1iEXT(glProgramUniform1iEXT_ARG_EXPAND);
typedef void (*glProgramUniform1iEXT_PTR)(glProgramUniform1iEXT_ARG_EXPAND);
void glProgramUniform1iv(glProgramUniform1iv_ARG_EXPAND);
typedef void (*glProgramUniform1iv_PTR)(glProgramUniform1iv_ARG_EXPAND);
void glProgramUniform1ivEXT(glProgramUniform1ivEXT_ARG_EXPAND);
typedef void (*glProgramUniform1ivEXT_PTR)(glProgramUniform1ivEXT_ARG_EXPAND);
void glProgramUniform1ui(glProgramUniform1ui_ARG_EXPAND);
typedef void (*glProgramUniform1ui_PTR)(glProgramUniform1ui_ARG_EXPAND);
void glProgramUniform1ui64NV(glProgramUniform1ui64NV_ARG_EXPAND);
typedef void (*glProgramUniform1ui64NV_PTR)(glProgramUniform1ui64NV_ARG_EXPAND);
void glProgramUniform1ui64vNV(glProgramUniform1ui64vNV_ARG_EXPAND);
typedef void (*glProgramUniform1ui64vNV_PTR)(glProgramUniform1ui64vNV_ARG_EXPAND);
void glProgramUniform1uiEXT(glProgramUniform1uiEXT_ARG_EXPAND);
typedef void (*glProgramUniform1uiEXT_PTR)(glProgramUniform1uiEXT_ARG_EXPAND);
void glProgramUniform1uiv(glProgramUniform1uiv_ARG_EXPAND);
typedef void (*glProgramUniform1uiv_PTR)(glProgramUniform1uiv_ARG_EXPAND);
void glProgramUniform1uivEXT(glProgramUniform1uivEXT_ARG_EXPAND);
typedef void (*glProgramUniform1uivEXT_PTR)(glProgramUniform1uivEXT_ARG_EXPAND);
void glProgramUniform2d(glProgramUniform2d_ARG_EXPAND);
typedef void (*glProgramUniform2d_PTR)(glProgramUniform2d_ARG_EXPAND);
void glProgramUniform2dEXT(glProgramUniform2dEXT_ARG_EXPAND);
typedef void (*glProgramUniform2dEXT_PTR)(glProgramUniform2dEXT_ARG_EXPAND);
void glProgramUniform2dv(glProgramUniform2dv_ARG_EXPAND);
typedef void (*glProgramUniform2dv_PTR)(glProgramUniform2dv_ARG_EXPAND);
void glProgramUniform2dvEXT(glProgramUniform2dvEXT_ARG_EXPAND);
typedef void (*glProgramUniform2dvEXT_PTR)(glProgramUniform2dvEXT_ARG_EXPAND);
void glProgramUniform2f(glProgramUniform2f_ARG_EXPAND);
typedef void (*glProgramUniform2f_PTR)(glProgramUniform2f_ARG_EXPAND);
void glProgramUniform2fEXT(glProgramUniform2fEXT_ARG_EXPAND);
typedef void (*glProgramUniform2fEXT_PTR)(glProgramUniform2fEXT_ARG_EXPAND);
void glProgramUniform2fv(glProgramUniform2fv_ARG_EXPAND);
typedef void (*glProgramUniform2fv_PTR)(glProgramUniform2fv_ARG_EXPAND);
void glProgramUniform2fvEXT(glProgramUniform2fvEXT_ARG_EXPAND);
typedef void (*glProgramUniform2fvEXT_PTR)(glProgramUniform2fvEXT_ARG_EXPAND);
void glProgramUniform2i(glProgramUniform2i_ARG_EXPAND);
typedef void (*glProgramUniform2i_PTR)(glProgramUniform2i_ARG_EXPAND);
void glProgramUniform2i64NV(glProgramUniform2i64NV_ARG_EXPAND);
typedef void (*glProgramUniform2i64NV_PTR)(glProgramUniform2i64NV_ARG_EXPAND);
void glProgramUniform2i64vNV(glProgramUniform2i64vNV_ARG_EXPAND);
typedef void (*glProgramUniform2i64vNV_PTR)(glProgramUniform2i64vNV_ARG_EXPAND);
void glProgramUniform2iEXT(glProgramUniform2iEXT_ARG_EXPAND);
typedef void (*glProgramUniform2iEXT_PTR)(glProgramUniform2iEXT_ARG_EXPAND);
void glProgramUniform2iv(glProgramUniform2iv_ARG_EXPAND);
typedef void (*glProgramUniform2iv_PTR)(glProgramUniform2iv_ARG_EXPAND);
void glProgramUniform2ivEXT(glProgramUniform2ivEXT_ARG_EXPAND);
typedef void (*glProgramUniform2ivEXT_PTR)(glProgramUniform2ivEXT_ARG_EXPAND);
void glProgramUniform2ui(glProgramUniform2ui_ARG_EXPAND);
typedef void (*glProgramUniform2ui_PTR)(glProgramUniform2ui_ARG_EXPAND);
void glProgramUniform2ui64NV(glProgramUniform2ui64NV_ARG_EXPAND);
typedef void (*glProgramUniform2ui64NV_PTR)(glProgramUniform2ui64NV_ARG_EXPAND);
void glProgramUniform2ui64vNV(glProgramUniform2ui64vNV_ARG_EXPAND);
typedef void (*glProgramUniform2ui64vNV_PTR)(glProgramUniform2ui64vNV_ARG_EXPAND);
void glProgramUniform2uiEXT(glProgramUniform2uiEXT_ARG_EXPAND);
typedef void (*glProgramUniform2uiEXT_PTR)(glProgramUniform2uiEXT_ARG_EXPAND);
void glProgramUniform2uiv(glProgramUniform2uiv_ARG_EXPAND);
typedef void (*glProgramUniform2uiv_PTR)(glProgramUniform2uiv_ARG_EXPAND);
void glProgramUniform2uivEXT(glProgramUniform2uivEXT_ARG_EXPAND);
typedef void (*glProgramUniform2uivEXT_PTR)(glProgramUniform2uivEXT_ARG_EXPAND);
void glProgramUniform3d(glProgramUniform3d_ARG_EXPAND);
typedef void (*glProgramUniform3d_PTR)(glProgramUniform3d_ARG_EXPAND);
void glProgramUniform3dEXT(glProgramUniform3dEXT_ARG_EXPAND);
typedef void (*glProgramUniform3dEXT_PTR)(glProgramUniform3dEXT_ARG_EXPAND);
void glProgramUniform3dv(glProgramUniform3dv_ARG_EXPAND);
typedef void (*glProgramUniform3dv_PTR)(glProgramUniform3dv_ARG_EXPAND);
void glProgramUniform3dvEXT(glProgramUniform3dvEXT_ARG_EXPAND);
typedef void (*glProgramUniform3dvEXT_PTR)(glProgramUniform3dvEXT_ARG_EXPAND);
void glProgramUniform3f(glProgramUniform3f_ARG_EXPAND);
typedef void (*glProgramUniform3f_PTR)(glProgramUniform3f_ARG_EXPAND);
void glProgramUniform3fEXT(glProgramUniform3fEXT_ARG_EXPAND);
typedef void (*glProgramUniform3fEXT_PTR)(glProgramUniform3fEXT_ARG_EXPAND);
void glProgramUniform3fv(glProgramUniform3fv_ARG_EXPAND);
typedef void (*glProgramUniform3fv_PTR)(glProgramUniform3fv_ARG_EXPAND);
void glProgramUniform3fvEXT(glProgramUniform3fvEXT_ARG_EXPAND);
typedef void (*glProgramUniform3fvEXT_PTR)(glProgramUniform3fvEXT_ARG_EXPAND);
void glProgramUniform3i(glProgramUniform3i_ARG_EXPAND);
typedef void (*glProgramUniform3i_PTR)(glProgramUniform3i_ARG_EXPAND);
void glProgramUniform3i64NV(glProgramUniform3i64NV_ARG_EXPAND);
typedef void (*glProgramUniform3i64NV_PTR)(glProgramUniform3i64NV_ARG_EXPAND);
void glProgramUniform3i64vNV(glProgramUniform3i64vNV_ARG_EXPAND);
typedef void (*glProgramUniform3i64vNV_PTR)(glProgramUniform3i64vNV_ARG_EXPAND);
void glProgramUniform3iEXT(glProgramUniform3iEXT_ARG_EXPAND);
typedef void (*glProgramUniform3iEXT_PTR)(glProgramUniform3iEXT_ARG_EXPAND);
void glProgramUniform3iv(glProgramUniform3iv_ARG_EXPAND);
typedef void (*glProgramUniform3iv_PTR)(glProgramUniform3iv_ARG_EXPAND);
void glProgramUniform3ivEXT(glProgramUniform3ivEXT_ARG_EXPAND);
typedef void (*glProgramUniform3ivEXT_PTR)(glProgramUniform3ivEXT_ARG_EXPAND);
void glProgramUniform3ui(glProgramUniform3ui_ARG_EXPAND);
typedef void (*glProgramUniform3ui_PTR)(glProgramUniform3ui_ARG_EXPAND);
void glProgramUniform3ui64NV(glProgramUniform3ui64NV_ARG_EXPAND);
typedef void (*glProgramUniform3ui64NV_PTR)(glProgramUniform3ui64NV_ARG_EXPAND);
void glProgramUniform3ui64vNV(glProgramUniform3ui64vNV_ARG_EXPAND);
typedef void (*glProgramUniform3ui64vNV_PTR)(glProgramUniform3ui64vNV_ARG_EXPAND);
void glProgramUniform3uiEXT(glProgramUniform3uiEXT_ARG_EXPAND);
typedef void (*glProgramUniform3uiEXT_PTR)(glProgramUniform3uiEXT_ARG_EXPAND);
void glProgramUniform3uiv(glProgramUniform3uiv_ARG_EXPAND);
typedef void (*glProgramUniform3uiv_PTR)(glProgramUniform3uiv_ARG_EXPAND);
void glProgramUniform3uivEXT(glProgramUniform3uivEXT_ARG_EXPAND);
typedef void (*glProgramUniform3uivEXT_PTR)(glProgramUniform3uivEXT_ARG_EXPAND);
void glProgramUniform4d(glProgramUniform4d_ARG_EXPAND);
typedef void (*glProgramUniform4d_PTR)(glProgramUniform4d_ARG_EXPAND);
void glProgramUniform4dEXT(glProgramUniform4dEXT_ARG_EXPAND);
typedef void (*glProgramUniform4dEXT_PTR)(glProgramUniform4dEXT_ARG_EXPAND);
void glProgramUniform4dv(glProgramUniform4dv_ARG_EXPAND);
typedef void (*glProgramUniform4dv_PTR)(glProgramUniform4dv_ARG_EXPAND);
void glProgramUniform4dvEXT(glProgramUniform4dvEXT_ARG_EXPAND);
typedef void (*glProgramUniform4dvEXT_PTR)(glProgramUniform4dvEXT_ARG_EXPAND);
void glProgramUniform4f(glProgramUniform4f_ARG_EXPAND);
typedef void (*glProgramUniform4f_PTR)(glProgramUniform4f_ARG_EXPAND);
void glProgramUniform4fEXT(glProgramUniform4fEXT_ARG_EXPAND);
typedef void (*glProgramUniform4fEXT_PTR)(glProgramUniform4fEXT_ARG_EXPAND);
void glProgramUniform4fv(glProgramUniform4fv_ARG_EXPAND);
typedef void (*glProgramUniform4fv_PTR)(glProgramUniform4fv_ARG_EXPAND);
void glProgramUniform4fvEXT(glProgramUniform4fvEXT_ARG_EXPAND);
typedef void (*glProgramUniform4fvEXT_PTR)(glProgramUniform4fvEXT_ARG_EXPAND);
void glProgramUniform4i(glProgramUniform4i_ARG_EXPAND);
typedef void (*glProgramUniform4i_PTR)(glProgramUniform4i_ARG_EXPAND);
void glProgramUniform4i64NV(glProgramUniform4i64NV_ARG_EXPAND);
typedef void (*glProgramUniform4i64NV_PTR)(glProgramUniform4i64NV_ARG_EXPAND);
void glProgramUniform4i64vNV(glProgramUniform4i64vNV_ARG_EXPAND);
typedef void (*glProgramUniform4i64vNV_PTR)(glProgramUniform4i64vNV_ARG_EXPAND);
void glProgramUniform4iEXT(glProgramUniform4iEXT_ARG_EXPAND);
typedef void (*glProgramUniform4iEXT_PTR)(glProgramUniform4iEXT_ARG_EXPAND);
void glProgramUniform4iv(glProgramUniform4iv_ARG_EXPAND);
typedef void (*glProgramUniform4iv_PTR)(glProgramUniform4iv_ARG_EXPAND);
void glProgramUniform4ivEXT(glProgramUniform4ivEXT_ARG_EXPAND);
typedef void (*glProgramUniform4ivEXT_PTR)(glProgramUniform4ivEXT_ARG_EXPAND);
void glProgramUniform4ui(glProgramUniform4ui_ARG_EXPAND);
typedef void (*glProgramUniform4ui_PTR)(glProgramUniform4ui_ARG_EXPAND);
void glProgramUniform4ui64NV(glProgramUniform4ui64NV_ARG_EXPAND);
typedef void (*glProgramUniform4ui64NV_PTR)(glProgramUniform4ui64NV_ARG_EXPAND);
void glProgramUniform4ui64vNV(glProgramUniform4ui64vNV_ARG_EXPAND);
typedef void (*glProgramUniform4ui64vNV_PTR)(glProgramUniform4ui64vNV_ARG_EXPAND);
void glProgramUniform4uiEXT(glProgramUniform4uiEXT_ARG_EXPAND);
typedef void (*glProgramUniform4uiEXT_PTR)(glProgramUniform4uiEXT_ARG_EXPAND);
void glProgramUniform4uiv(glProgramUniform4uiv_ARG_EXPAND);
typedef void (*glProgramUniform4uiv_PTR)(glProgramUniform4uiv_ARG_EXPAND);
void glProgramUniform4uivEXT(glProgramUniform4uivEXT_ARG_EXPAND);
typedef void (*glProgramUniform4uivEXT_PTR)(glProgramUniform4uivEXT_ARG_EXPAND);
void glProgramUniformHandleui64NV(glProgramUniformHandleui64NV_ARG_EXPAND);
typedef void (*glProgramUniformHandleui64NV_PTR)(glProgramUniformHandleui64NV_ARG_EXPAND);
void glProgramUniformHandleui64vNV(glProgramUniformHandleui64vNV_ARG_EXPAND);
typedef void (*glProgramUniformHandleui64vNV_PTR)(glProgramUniformHandleui64vNV_ARG_EXPAND);
void glProgramUniformMatrix2dv(glProgramUniformMatrix2dv_ARG_EXPAND);
typedef void (*glProgramUniformMatrix2dv_PTR)(glProgramUniformMatrix2dv_ARG_EXPAND);
void glProgramUniformMatrix2dvEXT(glProgramUniformMatrix2dvEXT_ARG_EXPAND);
typedef void (*glProgramUniformMatrix2dvEXT_PTR)(glProgramUniformMatrix2dvEXT_ARG_EXPAND);
void glProgramUniformMatrix2fv(glProgramUniformMatrix2fv_ARG_EXPAND);
typedef void (*glProgramUniformMatrix2fv_PTR)(glProgramUniformMatrix2fv_ARG_EXPAND);
void glProgramUniformMatrix2fvEXT(glProgramUniformMatrix2fvEXT_ARG_EXPAND);
typedef void (*glProgramUniformMatrix2fvEXT_PTR)(glProgramUniformMatrix2fvEXT_ARG_EXPAND);
void glProgramUniformMatrix2x3dv(glProgramUniformMatrix2x3dv_ARG_EXPAND);
typedef void (*glProgramUniformMatrix2x3dv_PTR)(glProgramUniformMatrix2x3dv_ARG_EXPAND);
void glProgramUniformMatrix2x3dvEXT(glProgramUniformMatrix2x3dvEXT_ARG_EXPAND);
typedef void (*glProgramUniformMatrix2x3dvEXT_PTR)(glProgramUniformMatrix2x3dvEXT_ARG_EXPAND);
void glProgramUniformMatrix2x3fv(glProgramUniformMatrix2x3fv_ARG_EXPAND);
typedef void (*glProgramUniformMatrix2x3fv_PTR)(glProgramUniformMatrix2x3fv_ARG_EXPAND);
void glProgramUniformMatrix2x3fvEXT(glProgramUniformMatrix2x3fvEXT_ARG_EXPAND);
typedef void (*glProgramUniformMatrix2x3fvEXT_PTR)(glProgramUniformMatrix2x3fvEXT_ARG_EXPAND);
void glProgramUniformMatrix2x4dv(glProgramUniformMatrix2x4dv_ARG_EXPAND);
typedef void (*glProgramUniformMatrix2x4dv_PTR)(glProgramUniformMatrix2x4dv_ARG_EXPAND);
void glProgramUniformMatrix2x4dvEXT(glProgramUniformMatrix2x4dvEXT_ARG_EXPAND);
typedef void (*glProgramUniformMatrix2x4dvEXT_PTR)(glProgramUniformMatrix2x4dvEXT_ARG_EXPAND);
void glProgramUniformMatrix2x4fv(glProgramUniformMatrix2x4fv_ARG_EXPAND);
typedef void (*glProgramUniformMatrix2x4fv_PTR)(glProgramUniformMatrix2x4fv_ARG_EXPAND);
void glProgramUniformMatrix2x4fvEXT(glProgramUniformMatrix2x4fvEXT_ARG_EXPAND);
typedef void (*glProgramUniformMatrix2x4fvEXT_PTR)(glProgramUniformMatrix2x4fvEXT_ARG_EXPAND);
void glProgramUniformMatrix3dv(glProgramUniformMatrix3dv_ARG_EXPAND);
typedef void (*glProgramUniformMatrix3dv_PTR)(glProgramUniformMatrix3dv_ARG_EXPAND);
void glProgramUniformMatrix3dvEXT(glProgramUniformMatrix3dvEXT_ARG_EXPAND);
typedef void (*glProgramUniformMatrix3dvEXT_PTR)(glProgramUniformMatrix3dvEXT_ARG_EXPAND);
void glProgramUniformMatrix3fv(glProgramUniformMatrix3fv_ARG_EXPAND);
typedef void (*glProgramUniformMatrix3fv_PTR)(glProgramUniformMatrix3fv_ARG_EXPAND);
void glProgramUniformMatrix3fvEXT(glProgramUniformMatrix3fvEXT_ARG_EXPAND);
typedef void (*glProgramUniformMatrix3fvEXT_PTR)(glProgramUniformMatrix3fvEXT_ARG_EXPAND);
void glProgramUniformMatrix3x2dv(glProgramUniformMatrix3x2dv_ARG_EXPAND);
typedef void (*glProgramUniformMatrix3x2dv_PTR)(glProgramUniformMatrix3x2dv_ARG_EXPAND);
void glProgramUniformMatrix3x2dvEXT(glProgramUniformMatrix3x2dvEXT_ARG_EXPAND);
typedef void (*glProgramUniformMatrix3x2dvEXT_PTR)(glProgramUniformMatrix3x2dvEXT_ARG_EXPAND);
void glProgramUniformMatrix3x2fv(glProgramUniformMatrix3x2fv_ARG_EXPAND);
typedef void (*glProgramUniformMatrix3x2fv_PTR)(glProgramUniformMatrix3x2fv_ARG_EXPAND);
void glProgramUniformMatrix3x2fvEXT(glProgramUniformMatrix3x2fvEXT_ARG_EXPAND);
typedef void (*glProgramUniformMatrix3x2fvEXT_PTR)(glProgramUniformMatrix3x2fvEXT_ARG_EXPAND);
void glProgramUniformMatrix3x4dv(glProgramUniformMatrix3x4dv_ARG_EXPAND);
typedef void (*glProgramUniformMatrix3x4dv_PTR)(glProgramUniformMatrix3x4dv_ARG_EXPAND);
void glProgramUniformMatrix3x4dvEXT(glProgramUniformMatrix3x4dvEXT_ARG_EXPAND);
typedef void (*glProgramUniformMatrix3x4dvEXT_PTR)(glProgramUniformMatrix3x4dvEXT_ARG_EXPAND);
void glProgramUniformMatrix3x4fv(glProgramUniformMatrix3x4fv_ARG_EXPAND);
typedef void (*glProgramUniformMatrix3x4fv_PTR)(glProgramUniformMatrix3x4fv_ARG_EXPAND);
void glProgramUniformMatrix3x4fvEXT(glProgramUniformMatrix3x4fvEXT_ARG_EXPAND);
typedef void (*glProgramUniformMatrix3x4fvEXT_PTR)(glProgramUniformMatrix3x4fvEXT_ARG_EXPAND);
void glProgramUniformMatrix4dv(glProgramUniformMatrix4dv_ARG_EXPAND);
typedef void (*glProgramUniformMatrix4dv_PTR)(glProgramUniformMatrix4dv_ARG_EXPAND);
void glProgramUniformMatrix4dvEXT(glProgramUniformMatrix4dvEXT_ARG_EXPAND);
typedef void (*glProgramUniformMatrix4dvEXT_PTR)(glProgramUniformMatrix4dvEXT_ARG_EXPAND);
void glProgramUniformMatrix4fv(glProgramUniformMatrix4fv_ARG_EXPAND);
typedef void (*glProgramUniformMatrix4fv_PTR)(glProgramUniformMatrix4fv_ARG_EXPAND);
void glProgramUniformMatrix4fvEXT(glProgramUniformMatrix4fvEXT_ARG_EXPAND);
typedef void (*glProgramUniformMatrix4fvEXT_PTR)(glProgramUniformMatrix4fvEXT_ARG_EXPAND);
void glProgramUniformMatrix4x2dv(glProgramUniformMatrix4x2dv_ARG_EXPAND);
typedef void (*glProgramUniformMatrix4x2dv_PTR)(glProgramUniformMatrix4x2dv_ARG_EXPAND);
void glProgramUniformMatrix4x2dvEXT(glProgramUniformMatrix4x2dvEXT_ARG_EXPAND);
typedef void (*glProgramUniformMatrix4x2dvEXT_PTR)(glProgramUniformMatrix4x2dvEXT_ARG_EXPAND);
void glProgramUniformMatrix4x2fv(glProgramUniformMatrix4x2fv_ARG_EXPAND);
typedef void (*glProgramUniformMatrix4x2fv_PTR)(glProgramUniformMatrix4x2fv_ARG_EXPAND);
void glProgramUniformMatrix4x2fvEXT(glProgramUniformMatrix4x2fvEXT_ARG_EXPAND);
typedef void (*glProgramUniformMatrix4x2fvEXT_PTR)(glProgramUniformMatrix4x2fvEXT_ARG_EXPAND);
void glProgramUniformMatrix4x3dv(glProgramUniformMatrix4x3dv_ARG_EXPAND);
typedef void (*glProgramUniformMatrix4x3dv_PTR)(glProgramUniformMatrix4x3dv_ARG_EXPAND);
void glProgramUniformMatrix4x3dvEXT(glProgramUniformMatrix4x3dvEXT_ARG_EXPAND);
typedef void (*glProgramUniformMatrix4x3dvEXT_PTR)(glProgramUniformMatrix4x3dvEXT_ARG_EXPAND);
void glProgramUniformMatrix4x3fv(glProgramUniformMatrix4x3fv_ARG_EXPAND);
typedef void (*glProgramUniformMatrix4x3fv_PTR)(glProgramUniformMatrix4x3fv_ARG_EXPAND);
void glProgramUniformMatrix4x3fvEXT(glProgramUniformMatrix4x3fvEXT_ARG_EXPAND);
typedef void (*glProgramUniformMatrix4x3fvEXT_PTR)(glProgramUniformMatrix4x3fvEXT_ARG_EXPAND);
void glProgramUniformui64NV(glProgramUniformui64NV_ARG_EXPAND);
typedef void (*glProgramUniformui64NV_PTR)(glProgramUniformui64NV_ARG_EXPAND);
void glProgramUniformui64vNV(glProgramUniformui64vNV_ARG_EXPAND);
typedef void (*glProgramUniformui64vNV_PTR)(glProgramUniformui64vNV_ARG_EXPAND);
void glProgramVertexLimitNV(glProgramVertexLimitNV_ARG_EXPAND);
typedef void (*glProgramVertexLimitNV_PTR)(glProgramVertexLimitNV_ARG_EXPAND);
void glProvokingVertex(glProvokingVertex_ARG_EXPAND);
typedef void (*glProvokingVertex_PTR)(glProvokingVertex_ARG_EXPAND);
void glProvokingVertexEXT(glProvokingVertexEXT_ARG_EXPAND);
typedef void (*glProvokingVertexEXT_PTR)(glProvokingVertexEXT_ARG_EXPAND);
void glPushAttrib(glPushAttrib_ARG_EXPAND);
typedef void (*glPushAttrib_PTR)(glPushAttrib_ARG_EXPAND);
void glPushClientAttrib(glPushClientAttrib_ARG_EXPAND);
typedef void (*glPushClientAttrib_PTR)(glPushClientAttrib_ARG_EXPAND);
void glPushClientAttribDefaultEXT(glPushClientAttribDefaultEXT_ARG_EXPAND);
typedef void (*glPushClientAttribDefaultEXT_PTR)(glPushClientAttribDefaultEXT_ARG_EXPAND);
void glPushDebugGroup(glPushDebugGroup_ARG_EXPAND);
typedef void (*glPushDebugGroup_PTR)(glPushDebugGroup_ARG_EXPAND);
void glPushMatrix(glPushMatrix_ARG_EXPAND);
typedef void (*glPushMatrix_PTR)(glPushMatrix_ARG_EXPAND);
void glPushName(glPushName_ARG_EXPAND);
typedef void (*glPushName_PTR)(glPushName_ARG_EXPAND);
void glQueryCounter(glQueryCounter_ARG_EXPAND);
typedef void (*glQueryCounter_PTR)(glQueryCounter_ARG_EXPAND);
GLbitfield glQueryMatrixxOES(glQueryMatrixxOES_ARG_EXPAND);
typedef GLbitfield (*glQueryMatrixxOES_PTR)(glQueryMatrixxOES_ARG_EXPAND);
void glRasterPos2d(glRasterPos2d_ARG_EXPAND);
typedef void (*glRasterPos2d_PTR)(glRasterPos2d_ARG_EXPAND);
void glRasterPos2dv(glRasterPos2dv_ARG_EXPAND);
typedef void (*glRasterPos2dv_PTR)(glRasterPos2dv_ARG_EXPAND);
void glRasterPos2f(glRasterPos2f_ARG_EXPAND);
typedef void (*glRasterPos2f_PTR)(glRasterPos2f_ARG_EXPAND);
void glRasterPos2fv(glRasterPos2fv_ARG_EXPAND);
typedef void (*glRasterPos2fv_PTR)(glRasterPos2fv_ARG_EXPAND);
void glRasterPos2i(glRasterPos2i_ARG_EXPAND);
typedef void (*glRasterPos2i_PTR)(glRasterPos2i_ARG_EXPAND);
void glRasterPos2iv(glRasterPos2iv_ARG_EXPAND);
typedef void (*glRasterPos2iv_PTR)(glRasterPos2iv_ARG_EXPAND);
void glRasterPos2s(glRasterPos2s_ARG_EXPAND);
typedef void (*glRasterPos2s_PTR)(glRasterPos2s_ARG_EXPAND);
void glRasterPos2sv(glRasterPos2sv_ARG_EXPAND);
typedef void (*glRasterPos2sv_PTR)(glRasterPos2sv_ARG_EXPAND);
void glRasterPos2xOES(glRasterPos2xOES_ARG_EXPAND);
typedef void (*glRasterPos2xOES_PTR)(glRasterPos2xOES_ARG_EXPAND);
void glRasterPos2xvOES(glRasterPos2xvOES_ARG_EXPAND);
typedef void (*glRasterPos2xvOES_PTR)(glRasterPos2xvOES_ARG_EXPAND);
void glRasterPos3d(glRasterPos3d_ARG_EXPAND);
typedef void (*glRasterPos3d_PTR)(glRasterPos3d_ARG_EXPAND);
void glRasterPos3dv(glRasterPos3dv_ARG_EXPAND);
typedef void (*glRasterPos3dv_PTR)(glRasterPos3dv_ARG_EXPAND);
void glRasterPos3f(glRasterPos3f_ARG_EXPAND);
typedef void (*glRasterPos3f_PTR)(glRasterPos3f_ARG_EXPAND);
void glRasterPos3fv(glRasterPos3fv_ARG_EXPAND);
typedef void (*glRasterPos3fv_PTR)(glRasterPos3fv_ARG_EXPAND);
void glRasterPos3i(glRasterPos3i_ARG_EXPAND);
typedef void (*glRasterPos3i_PTR)(glRasterPos3i_ARG_EXPAND);
void glRasterPos3iv(glRasterPos3iv_ARG_EXPAND);
typedef void (*glRasterPos3iv_PTR)(glRasterPos3iv_ARG_EXPAND);
void glRasterPos3s(glRasterPos3s_ARG_EXPAND);
typedef void (*glRasterPos3s_PTR)(glRasterPos3s_ARG_EXPAND);
void glRasterPos3sv(glRasterPos3sv_ARG_EXPAND);
typedef void (*glRasterPos3sv_PTR)(glRasterPos3sv_ARG_EXPAND);
void glRasterPos3xOES(glRasterPos3xOES_ARG_EXPAND);
typedef void (*glRasterPos3xOES_PTR)(glRasterPos3xOES_ARG_EXPAND);
void glRasterPos3xvOES(glRasterPos3xvOES_ARG_EXPAND);
typedef void (*glRasterPos3xvOES_PTR)(glRasterPos3xvOES_ARG_EXPAND);
void glRasterPos4d(glRasterPos4d_ARG_EXPAND);
typedef void (*glRasterPos4d_PTR)(glRasterPos4d_ARG_EXPAND);
void glRasterPos4dv(glRasterPos4dv_ARG_EXPAND);
typedef void (*glRasterPos4dv_PTR)(glRasterPos4dv_ARG_EXPAND);
void glRasterPos4f(glRasterPos4f_ARG_EXPAND);
typedef void (*glRasterPos4f_PTR)(glRasterPos4f_ARG_EXPAND);
void glRasterPos4fv(glRasterPos4fv_ARG_EXPAND);
typedef void (*glRasterPos4fv_PTR)(glRasterPos4fv_ARG_EXPAND);
void glRasterPos4i(glRasterPos4i_ARG_EXPAND);
typedef void (*glRasterPos4i_PTR)(glRasterPos4i_ARG_EXPAND);
void glRasterPos4iv(glRasterPos4iv_ARG_EXPAND);
typedef void (*glRasterPos4iv_PTR)(glRasterPos4iv_ARG_EXPAND);
void glRasterPos4s(glRasterPos4s_ARG_EXPAND);
typedef void (*glRasterPos4s_PTR)(glRasterPos4s_ARG_EXPAND);
void glRasterPos4sv(glRasterPos4sv_ARG_EXPAND);
typedef void (*glRasterPos4sv_PTR)(glRasterPos4sv_ARG_EXPAND);
void glRasterPos4xOES(glRasterPos4xOES_ARG_EXPAND);
typedef void (*glRasterPos4xOES_PTR)(glRasterPos4xOES_ARG_EXPAND);
void glRasterPos4xvOES(glRasterPos4xvOES_ARG_EXPAND);
typedef void (*glRasterPos4xvOES_PTR)(glRasterPos4xvOES_ARG_EXPAND);
void glReadBuffer(glReadBuffer_ARG_EXPAND);
typedef void (*glReadBuffer_PTR)(glReadBuffer_ARG_EXPAND);
void glReadInstrumentsSGIX(glReadInstrumentsSGIX_ARG_EXPAND);
typedef void (*glReadInstrumentsSGIX_PTR)(glReadInstrumentsSGIX_ARG_EXPAND);
void glReadPixels(glReadPixels_ARG_EXPAND);
typedef void (*glReadPixels_PTR)(glReadPixels_ARG_EXPAND);
void glReadnPixelsARB(glReadnPixelsARB_ARG_EXPAND);
typedef void (*glReadnPixelsARB_PTR)(glReadnPixelsARB_ARG_EXPAND);
void glRectd(glRectd_ARG_EXPAND);
typedef void (*glRectd_PTR)(glRectd_ARG_EXPAND);
void glRectdv(glRectdv_ARG_EXPAND);
typedef void (*glRectdv_PTR)(glRectdv_ARG_EXPAND);
void glRectf(glRectf_ARG_EXPAND);
typedef void (*glRectf_PTR)(glRectf_ARG_EXPAND);
void glRectfv(glRectfv_ARG_EXPAND);
typedef void (*glRectfv_PTR)(glRectfv_ARG_EXPAND);
void glRecti(glRecti_ARG_EXPAND);
typedef void (*glRecti_PTR)(glRecti_ARG_EXPAND);
void glRectiv(glRectiv_ARG_EXPAND);
typedef void (*glRectiv_PTR)(glRectiv_ARG_EXPAND);
void glRects(glRects_ARG_EXPAND);
typedef void (*glRects_PTR)(glRects_ARG_EXPAND);
void glRectsv(glRectsv_ARG_EXPAND);
typedef void (*glRectsv_PTR)(glRectsv_ARG_EXPAND);
void glRectxOES(glRectxOES_ARG_EXPAND);
typedef void (*glRectxOES_PTR)(glRectxOES_ARG_EXPAND);
void glRectxvOES(glRectxvOES_ARG_EXPAND);
typedef void (*glRectxvOES_PTR)(glRectxvOES_ARG_EXPAND);
void glReferencePlaneSGIX(glReferencePlaneSGIX_ARG_EXPAND);
typedef void (*glReferencePlaneSGIX_PTR)(glReferencePlaneSGIX_ARG_EXPAND);
void glReleaseShaderCompiler(glReleaseShaderCompiler_ARG_EXPAND);
typedef void (*glReleaseShaderCompiler_PTR)(glReleaseShaderCompiler_ARG_EXPAND);
GLint glRenderMode(glRenderMode_ARG_EXPAND);
typedef GLint (*glRenderMode_PTR)(glRenderMode_ARG_EXPAND);
void glRenderbufferStorage(glRenderbufferStorage_ARG_EXPAND);
typedef void (*glRenderbufferStorage_PTR)(glRenderbufferStorage_ARG_EXPAND);
void glRenderbufferStorageEXT(glRenderbufferStorageEXT_ARG_EXPAND);
typedef void (*glRenderbufferStorageEXT_PTR)(glRenderbufferStorageEXT_ARG_EXPAND);
void glRenderbufferStorageMultisample(glRenderbufferStorageMultisample_ARG_EXPAND);
typedef void (*glRenderbufferStorageMultisample_PTR)(glRenderbufferStorageMultisample_ARG_EXPAND);
void glRenderbufferStorageMultisampleCoverageNV(glRenderbufferStorageMultisampleCoverageNV_ARG_EXPAND);
typedef void (*glRenderbufferStorageMultisampleCoverageNV_PTR)(glRenderbufferStorageMultisampleCoverageNV_ARG_EXPAND);
void glRenderbufferStorageMultisampleEXT(glRenderbufferStorageMultisampleEXT_ARG_EXPAND);
typedef void (*glRenderbufferStorageMultisampleEXT_PTR)(glRenderbufferStorageMultisampleEXT_ARG_EXPAND);
void glReplacementCodePointerSUN(glReplacementCodePointerSUN_ARG_EXPAND);
typedef void (*glReplacementCodePointerSUN_PTR)(glReplacementCodePointerSUN_ARG_EXPAND);
void glReplacementCodeubSUN(glReplacementCodeubSUN_ARG_EXPAND);
typedef void (*glReplacementCodeubSUN_PTR)(glReplacementCodeubSUN_ARG_EXPAND);
void glReplacementCodeubvSUN(glReplacementCodeubvSUN_ARG_EXPAND);
typedef void (*glReplacementCodeubvSUN_PTR)(glReplacementCodeubvSUN_ARG_EXPAND);
void glReplacementCodeuiColor3fVertex3fSUN(glReplacementCodeuiColor3fVertex3fSUN_ARG_EXPAND);
typedef void (*glReplacementCodeuiColor3fVertex3fSUN_PTR)(glReplacementCodeuiColor3fVertex3fSUN_ARG_EXPAND);
void glReplacementCodeuiColor3fVertex3fvSUN(glReplacementCodeuiColor3fVertex3fvSUN_ARG_EXPAND);
typedef void (*glReplacementCodeuiColor3fVertex3fvSUN_PTR)(glReplacementCodeuiColor3fVertex3fvSUN_ARG_EXPAND);
void glReplacementCodeuiColor4fNormal3fVertex3fSUN(glReplacementCodeuiColor4fNormal3fVertex3fSUN_ARG_EXPAND);
typedef void (*glReplacementCodeuiColor4fNormal3fVertex3fSUN_PTR)(glReplacementCodeuiColor4fNormal3fVertex3fSUN_ARG_EXPAND);
void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(glReplacementCodeuiColor4fNormal3fVertex3fvSUN_ARG_EXPAND);
typedef void (*glReplacementCodeuiColor4fNormal3fVertex3fvSUN_PTR)(glReplacementCodeuiColor4fNormal3fVertex3fvSUN_ARG_EXPAND);
void glReplacementCodeuiColor4ubVertex3fSUN(glReplacementCodeuiColor4ubVertex3fSUN_ARG_EXPAND);
typedef void (*glReplacementCodeuiColor4ubVertex3fSUN_PTR)(glReplacementCodeuiColor4ubVertex3fSUN_ARG_EXPAND);
void glReplacementCodeuiColor4ubVertex3fvSUN(glReplacementCodeuiColor4ubVertex3fvSUN_ARG_EXPAND);
typedef void (*glReplacementCodeuiColor4ubVertex3fvSUN_PTR)(glReplacementCodeuiColor4ubVertex3fvSUN_ARG_EXPAND);
void glReplacementCodeuiNormal3fVertex3fSUN(glReplacementCodeuiNormal3fVertex3fSUN_ARG_EXPAND);
typedef void (*glReplacementCodeuiNormal3fVertex3fSUN_PTR)(glReplacementCodeuiNormal3fVertex3fSUN_ARG_EXPAND);
void glReplacementCodeuiNormal3fVertex3fvSUN(glReplacementCodeuiNormal3fVertex3fvSUN_ARG_EXPAND);
typedef void (*glReplacementCodeuiNormal3fVertex3fvSUN_PTR)(glReplacementCodeuiNormal3fVertex3fvSUN_ARG_EXPAND);
void glReplacementCodeuiSUN(glReplacementCodeuiSUN_ARG_EXPAND);
typedef void (*glReplacementCodeuiSUN_PTR)(glReplacementCodeuiSUN_ARG_EXPAND);
void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_ARG_EXPAND);
typedef void (*glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_PTR)(glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_ARG_EXPAND);
void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_ARG_EXPAND);
typedef void (*glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_PTR)(glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_ARG_EXPAND);
void glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_ARG_EXPAND);
typedef void (*glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_PTR)(glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_ARG_EXPAND);
void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_ARG_EXPAND);
typedef void (*glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_PTR)(glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_ARG_EXPAND);
void glReplacementCodeuiTexCoord2fVertex3fSUN(glReplacementCodeuiTexCoord2fVertex3fSUN_ARG_EXPAND);
typedef void (*glReplacementCodeuiTexCoord2fVertex3fSUN_PTR)(glReplacementCodeuiTexCoord2fVertex3fSUN_ARG_EXPAND);
void glReplacementCodeuiTexCoord2fVertex3fvSUN(glReplacementCodeuiTexCoord2fVertex3fvSUN_ARG_EXPAND);
typedef void (*glReplacementCodeuiTexCoord2fVertex3fvSUN_PTR)(glReplacementCodeuiTexCoord2fVertex3fvSUN_ARG_EXPAND);
void glReplacementCodeuiVertex3fSUN(glReplacementCodeuiVertex3fSUN_ARG_EXPAND);
typedef void (*glReplacementCodeuiVertex3fSUN_PTR)(glReplacementCodeuiVertex3fSUN_ARG_EXPAND);
void glReplacementCodeuiVertex3fvSUN(glReplacementCodeuiVertex3fvSUN_ARG_EXPAND);
typedef void (*glReplacementCodeuiVertex3fvSUN_PTR)(glReplacementCodeuiVertex3fvSUN_ARG_EXPAND);
void glReplacementCodeuivSUN(glReplacementCodeuivSUN_ARG_EXPAND);
typedef void (*glReplacementCodeuivSUN_PTR)(glReplacementCodeuivSUN_ARG_EXPAND);
void glReplacementCodeusSUN(glReplacementCodeusSUN_ARG_EXPAND);
typedef void (*glReplacementCodeusSUN_PTR)(glReplacementCodeusSUN_ARG_EXPAND);
void glReplacementCodeusvSUN(glReplacementCodeusvSUN_ARG_EXPAND);
typedef void (*glReplacementCodeusvSUN_PTR)(glReplacementCodeusvSUN_ARG_EXPAND);
void glRequestResidentProgramsNV(glRequestResidentProgramsNV_ARG_EXPAND);
typedef void (*glRequestResidentProgramsNV_PTR)(glRequestResidentProgramsNV_ARG_EXPAND);
void glResetHistogram(glResetHistogram_ARG_EXPAND);
typedef void (*glResetHistogram_PTR)(glResetHistogram_ARG_EXPAND);
void glResetHistogramEXT(glResetHistogramEXT_ARG_EXPAND);
typedef void (*glResetHistogramEXT_PTR)(glResetHistogramEXT_ARG_EXPAND);
void glResetMinmax(glResetMinmax_ARG_EXPAND);
typedef void (*glResetMinmax_PTR)(glResetMinmax_ARG_EXPAND);
void glResetMinmaxEXT(glResetMinmaxEXT_ARG_EXPAND);
typedef void (*glResetMinmaxEXT_PTR)(glResetMinmaxEXT_ARG_EXPAND);
void glResizeBuffersMESA(glResizeBuffersMESA_ARG_EXPAND);
typedef void (*glResizeBuffersMESA_PTR)(glResizeBuffersMESA_ARG_EXPAND);
void glResumeTransformFeedback(glResumeTransformFeedback_ARG_EXPAND);
typedef void (*glResumeTransformFeedback_PTR)(glResumeTransformFeedback_ARG_EXPAND);
void glResumeTransformFeedbackNV(glResumeTransformFeedbackNV_ARG_EXPAND);
typedef void (*glResumeTransformFeedbackNV_PTR)(glResumeTransformFeedbackNV_ARG_EXPAND);
void glRotated(glRotated_ARG_EXPAND);
typedef void (*glRotated_PTR)(glRotated_ARG_EXPAND);
void glRotatef(glRotatef_ARG_EXPAND);
typedef void (*glRotatef_PTR)(glRotatef_ARG_EXPAND);
void glRotatex(glRotatex_ARG_EXPAND);
typedef void (*glRotatex_PTR)(glRotatex_ARG_EXPAND);
void glRotatexOES(glRotatexOES_ARG_EXPAND);
typedef void (*glRotatexOES_PTR)(glRotatexOES_ARG_EXPAND);
void glSampleCoverage(glSampleCoverage_ARG_EXPAND);
typedef void (*glSampleCoverage_PTR)(glSampleCoverage_ARG_EXPAND);
void glSampleCoverageARB(glSampleCoverageARB_ARG_EXPAND);
typedef void (*glSampleCoverageARB_PTR)(glSampleCoverageARB_ARG_EXPAND);
void glSampleCoverageOES(glSampleCoverageOES_ARG_EXPAND);
typedef void (*glSampleCoverageOES_PTR)(glSampleCoverageOES_ARG_EXPAND);
void glSampleCoveragex(glSampleCoveragex_ARG_EXPAND);
typedef void (*glSampleCoveragex_PTR)(glSampleCoveragex_ARG_EXPAND);
void glSampleMapATI(glSampleMapATI_ARG_EXPAND);
typedef void (*glSampleMapATI_PTR)(glSampleMapATI_ARG_EXPAND);
void glSampleMaskEXT(glSampleMaskEXT_ARG_EXPAND);
typedef void (*glSampleMaskEXT_PTR)(glSampleMaskEXT_ARG_EXPAND);
void glSampleMaskIndexedNV(glSampleMaskIndexedNV_ARG_EXPAND);
typedef void (*glSampleMaskIndexedNV_PTR)(glSampleMaskIndexedNV_ARG_EXPAND);
void glSampleMaskSGIS(glSampleMaskSGIS_ARG_EXPAND);
typedef void (*glSampleMaskSGIS_PTR)(glSampleMaskSGIS_ARG_EXPAND);
void glSampleMaski(glSampleMaski_ARG_EXPAND);
typedef void (*glSampleMaski_PTR)(glSampleMaski_ARG_EXPAND);
void glSamplePatternEXT(glSamplePatternEXT_ARG_EXPAND);
typedef void (*glSamplePatternEXT_PTR)(glSamplePatternEXT_ARG_EXPAND);
void glSamplePatternSGIS(glSamplePatternSGIS_ARG_EXPAND);
typedef void (*glSamplePatternSGIS_PTR)(glSamplePatternSGIS_ARG_EXPAND);
void glSamplerParameterIiv(glSamplerParameterIiv_ARG_EXPAND);
typedef void (*glSamplerParameterIiv_PTR)(glSamplerParameterIiv_ARG_EXPAND);
void glSamplerParameterIuiv(glSamplerParameterIuiv_ARG_EXPAND);
typedef void (*glSamplerParameterIuiv_PTR)(glSamplerParameterIuiv_ARG_EXPAND);
void glSamplerParameterf(glSamplerParameterf_ARG_EXPAND);
typedef void (*glSamplerParameterf_PTR)(glSamplerParameterf_ARG_EXPAND);
void glSamplerParameterfv(glSamplerParameterfv_ARG_EXPAND);
typedef void (*glSamplerParameterfv_PTR)(glSamplerParameterfv_ARG_EXPAND);
void glSamplerParameteri(glSamplerParameteri_ARG_EXPAND);
typedef void (*glSamplerParameteri_PTR)(glSamplerParameteri_ARG_EXPAND);
void glSamplerParameteriv(glSamplerParameteriv_ARG_EXPAND);
typedef void (*glSamplerParameteriv_PTR)(glSamplerParameteriv_ARG_EXPAND);
void glScaled(glScaled_ARG_EXPAND);
typedef void (*glScaled_PTR)(glScaled_ARG_EXPAND);
void glScalef(glScalef_ARG_EXPAND);
typedef void (*glScalef_PTR)(glScalef_ARG_EXPAND);
void glScalex(glScalex_ARG_EXPAND);
typedef void (*glScalex_PTR)(glScalex_ARG_EXPAND);
void glScalexOES(glScalexOES_ARG_EXPAND);
typedef void (*glScalexOES_PTR)(glScalexOES_ARG_EXPAND);
void glScissor(glScissor_ARG_EXPAND);
typedef void (*glScissor_PTR)(glScissor_ARG_EXPAND);
void glScissorArrayv(glScissorArrayv_ARG_EXPAND);
typedef void (*glScissorArrayv_PTR)(glScissorArrayv_ARG_EXPAND);
void glScissorIndexed(glScissorIndexed_ARG_EXPAND);
typedef void (*glScissorIndexed_PTR)(glScissorIndexed_ARG_EXPAND);
void glScissorIndexedv(glScissorIndexedv_ARG_EXPAND);
typedef void (*glScissorIndexedv_PTR)(glScissorIndexedv_ARG_EXPAND);
void glSecondaryColor3b(glSecondaryColor3b_ARG_EXPAND);
typedef void (*glSecondaryColor3b_PTR)(glSecondaryColor3b_ARG_EXPAND);
void glSecondaryColor3bEXT(glSecondaryColor3bEXT_ARG_EXPAND);
typedef void (*glSecondaryColor3bEXT_PTR)(glSecondaryColor3bEXT_ARG_EXPAND);
void glSecondaryColor3bv(glSecondaryColor3bv_ARG_EXPAND);
typedef void (*glSecondaryColor3bv_PTR)(glSecondaryColor3bv_ARG_EXPAND);
void glSecondaryColor3bvEXT(glSecondaryColor3bvEXT_ARG_EXPAND);
typedef void (*glSecondaryColor3bvEXT_PTR)(glSecondaryColor3bvEXT_ARG_EXPAND);
void glSecondaryColor3d(glSecondaryColor3d_ARG_EXPAND);
typedef void (*glSecondaryColor3d_PTR)(glSecondaryColor3d_ARG_EXPAND);
void glSecondaryColor3dEXT(glSecondaryColor3dEXT_ARG_EXPAND);
typedef void (*glSecondaryColor3dEXT_PTR)(glSecondaryColor3dEXT_ARG_EXPAND);
void glSecondaryColor3dv(glSecondaryColor3dv_ARG_EXPAND);
typedef void (*glSecondaryColor3dv_PTR)(glSecondaryColor3dv_ARG_EXPAND);
void glSecondaryColor3dvEXT(glSecondaryColor3dvEXT_ARG_EXPAND);
typedef void (*glSecondaryColor3dvEXT_PTR)(glSecondaryColor3dvEXT_ARG_EXPAND);
void glSecondaryColor3f(glSecondaryColor3f_ARG_EXPAND);
typedef void (*glSecondaryColor3f_PTR)(glSecondaryColor3f_ARG_EXPAND);
void glSecondaryColor3fEXT(glSecondaryColor3fEXT_ARG_EXPAND);
typedef void (*glSecondaryColor3fEXT_PTR)(glSecondaryColor3fEXT_ARG_EXPAND);
void glSecondaryColor3fv(glSecondaryColor3fv_ARG_EXPAND);
typedef void (*glSecondaryColor3fv_PTR)(glSecondaryColor3fv_ARG_EXPAND);
void glSecondaryColor3fvEXT(glSecondaryColor3fvEXT_ARG_EXPAND);
typedef void (*glSecondaryColor3fvEXT_PTR)(glSecondaryColor3fvEXT_ARG_EXPAND);
void glSecondaryColor3hNV(glSecondaryColor3hNV_ARG_EXPAND);
typedef void (*glSecondaryColor3hNV_PTR)(glSecondaryColor3hNV_ARG_EXPAND);
void glSecondaryColor3hvNV(glSecondaryColor3hvNV_ARG_EXPAND);
typedef void (*glSecondaryColor3hvNV_PTR)(glSecondaryColor3hvNV_ARG_EXPAND);
void glSecondaryColor3i(glSecondaryColor3i_ARG_EXPAND);
typedef void (*glSecondaryColor3i_PTR)(glSecondaryColor3i_ARG_EXPAND);
void glSecondaryColor3iEXT(glSecondaryColor3iEXT_ARG_EXPAND);
typedef void (*glSecondaryColor3iEXT_PTR)(glSecondaryColor3iEXT_ARG_EXPAND);
void glSecondaryColor3iv(glSecondaryColor3iv_ARG_EXPAND);
typedef void (*glSecondaryColor3iv_PTR)(glSecondaryColor3iv_ARG_EXPAND);
void glSecondaryColor3ivEXT(glSecondaryColor3ivEXT_ARG_EXPAND);
typedef void (*glSecondaryColor3ivEXT_PTR)(glSecondaryColor3ivEXT_ARG_EXPAND);
void glSecondaryColor3s(glSecondaryColor3s_ARG_EXPAND);
typedef void (*glSecondaryColor3s_PTR)(glSecondaryColor3s_ARG_EXPAND);
void glSecondaryColor3sEXT(glSecondaryColor3sEXT_ARG_EXPAND);
typedef void (*glSecondaryColor3sEXT_PTR)(glSecondaryColor3sEXT_ARG_EXPAND);
void glSecondaryColor3sv(glSecondaryColor3sv_ARG_EXPAND);
typedef void (*glSecondaryColor3sv_PTR)(glSecondaryColor3sv_ARG_EXPAND);
void glSecondaryColor3svEXT(glSecondaryColor3svEXT_ARG_EXPAND);
typedef void (*glSecondaryColor3svEXT_PTR)(glSecondaryColor3svEXT_ARG_EXPAND);
void glSecondaryColor3ub(glSecondaryColor3ub_ARG_EXPAND);
typedef void (*glSecondaryColor3ub_PTR)(glSecondaryColor3ub_ARG_EXPAND);
void glSecondaryColor3ubEXT(glSecondaryColor3ubEXT_ARG_EXPAND);
typedef void (*glSecondaryColor3ubEXT_PTR)(glSecondaryColor3ubEXT_ARG_EXPAND);
void glSecondaryColor3ubv(glSecondaryColor3ubv_ARG_EXPAND);
typedef void (*glSecondaryColor3ubv_PTR)(glSecondaryColor3ubv_ARG_EXPAND);
void glSecondaryColor3ubvEXT(glSecondaryColor3ubvEXT_ARG_EXPAND);
typedef void (*glSecondaryColor3ubvEXT_PTR)(glSecondaryColor3ubvEXT_ARG_EXPAND);
void glSecondaryColor3ui(glSecondaryColor3ui_ARG_EXPAND);
typedef void (*glSecondaryColor3ui_PTR)(glSecondaryColor3ui_ARG_EXPAND);
void glSecondaryColor3uiEXT(glSecondaryColor3uiEXT_ARG_EXPAND);
typedef void (*glSecondaryColor3uiEXT_PTR)(glSecondaryColor3uiEXT_ARG_EXPAND);
void glSecondaryColor3uiv(glSecondaryColor3uiv_ARG_EXPAND);
typedef void (*glSecondaryColor3uiv_PTR)(glSecondaryColor3uiv_ARG_EXPAND);
void glSecondaryColor3uivEXT(glSecondaryColor3uivEXT_ARG_EXPAND);
typedef void (*glSecondaryColor3uivEXT_PTR)(glSecondaryColor3uivEXT_ARG_EXPAND);
void glSecondaryColor3us(glSecondaryColor3us_ARG_EXPAND);
typedef void (*glSecondaryColor3us_PTR)(glSecondaryColor3us_ARG_EXPAND);
void glSecondaryColor3usEXT(glSecondaryColor3usEXT_ARG_EXPAND);
typedef void (*glSecondaryColor3usEXT_PTR)(glSecondaryColor3usEXT_ARG_EXPAND);
void glSecondaryColor3usv(glSecondaryColor3usv_ARG_EXPAND);
typedef void (*glSecondaryColor3usv_PTR)(glSecondaryColor3usv_ARG_EXPAND);
void glSecondaryColor3usvEXT(glSecondaryColor3usvEXT_ARG_EXPAND);
typedef void (*glSecondaryColor3usvEXT_PTR)(glSecondaryColor3usvEXT_ARG_EXPAND);
void glSecondaryColorFormatNV(glSecondaryColorFormatNV_ARG_EXPAND);
typedef void (*glSecondaryColorFormatNV_PTR)(glSecondaryColorFormatNV_ARG_EXPAND);
void glSecondaryColorP3ui(glSecondaryColorP3ui_ARG_EXPAND);
typedef void (*glSecondaryColorP3ui_PTR)(glSecondaryColorP3ui_ARG_EXPAND);
void glSecondaryColorP3uiv(glSecondaryColorP3uiv_ARG_EXPAND);
typedef void (*glSecondaryColorP3uiv_PTR)(glSecondaryColorP3uiv_ARG_EXPAND);
void glSecondaryColorPointer(glSecondaryColorPointer_ARG_EXPAND);
typedef void (*glSecondaryColorPointer_PTR)(glSecondaryColorPointer_ARG_EXPAND);
void glSecondaryColorPointerEXT(glSecondaryColorPointerEXT_ARG_EXPAND);
typedef void (*glSecondaryColorPointerEXT_PTR)(glSecondaryColorPointerEXT_ARG_EXPAND);
void glSecondaryColorPointerListIBM(glSecondaryColorPointerListIBM_ARG_EXPAND);
typedef void (*glSecondaryColorPointerListIBM_PTR)(glSecondaryColorPointerListIBM_ARG_EXPAND);
void glSelectBuffer(glSelectBuffer_ARG_EXPAND);
typedef void (*glSelectBuffer_PTR)(glSelectBuffer_ARG_EXPAND);
void glSelectPerfMonitorCountersAMD(glSelectPerfMonitorCountersAMD_ARG_EXPAND);
typedef void (*glSelectPerfMonitorCountersAMD_PTR)(glSelectPerfMonitorCountersAMD_ARG_EXPAND);
void glSeparableFilter2D(glSeparableFilter2D_ARG_EXPAND);
typedef void (*glSeparableFilter2D_PTR)(glSeparableFilter2D_ARG_EXPAND);
void glSeparableFilter2DEXT(glSeparableFilter2DEXT_ARG_EXPAND);
typedef void (*glSeparableFilter2DEXT_PTR)(glSeparableFilter2DEXT_ARG_EXPAND);
void glSetFenceAPPLE(glSetFenceAPPLE_ARG_EXPAND);
typedef void (*glSetFenceAPPLE_PTR)(glSetFenceAPPLE_ARG_EXPAND);
void glSetFenceNV(glSetFenceNV_ARG_EXPAND);
typedef void (*glSetFenceNV_PTR)(glSetFenceNV_ARG_EXPAND);
void glSetFragmentShaderConstantATI(glSetFragmentShaderConstantATI_ARG_EXPAND);
typedef void (*glSetFragmentShaderConstantATI_PTR)(glSetFragmentShaderConstantATI_ARG_EXPAND);
void glSetInvariantEXT(glSetInvariantEXT_ARG_EXPAND);
typedef void (*glSetInvariantEXT_PTR)(glSetInvariantEXT_ARG_EXPAND);
void glSetLocalConstantEXT(glSetLocalConstantEXT_ARG_EXPAND);
typedef void (*glSetLocalConstantEXT_PTR)(glSetLocalConstantEXT_ARG_EXPAND);
void glSetMultisamplefvAMD(glSetMultisamplefvAMD_ARG_EXPAND);
typedef void (*glSetMultisamplefvAMD_PTR)(glSetMultisamplefvAMD_ARG_EXPAND);
void glShadeModel(glShadeModel_ARG_EXPAND);
typedef void (*glShadeModel_PTR)(glShadeModel_ARG_EXPAND);
void glShaderBinary(glShaderBinary_ARG_EXPAND);
typedef void (*glShaderBinary_PTR)(glShaderBinary_ARG_EXPAND);
void glShaderOp1EXT(glShaderOp1EXT_ARG_EXPAND);
typedef void (*glShaderOp1EXT_PTR)(glShaderOp1EXT_ARG_EXPAND);
void glShaderOp2EXT(glShaderOp2EXT_ARG_EXPAND);
typedef void (*glShaderOp2EXT_PTR)(glShaderOp2EXT_ARG_EXPAND);
void glShaderOp3EXT(glShaderOp3EXT_ARG_EXPAND);
typedef void (*glShaderOp3EXT_PTR)(glShaderOp3EXT_ARG_EXPAND);
void glShaderSource(glShaderSource_ARG_EXPAND);
typedef void (*glShaderSource_PTR)(glShaderSource_ARG_EXPAND);
void glShaderSourceARB(glShaderSourceARB_ARG_EXPAND);
typedef void (*glShaderSourceARB_PTR)(glShaderSourceARB_ARG_EXPAND);
void glShaderStorageBlockBinding(glShaderStorageBlockBinding_ARG_EXPAND);
typedef void (*glShaderStorageBlockBinding_PTR)(glShaderStorageBlockBinding_ARG_EXPAND);
void glSharpenTexFuncSGIS(glSharpenTexFuncSGIS_ARG_EXPAND);
typedef void (*glSharpenTexFuncSGIS_PTR)(glSharpenTexFuncSGIS_ARG_EXPAND);
void glSpriteParameterfSGIX(glSpriteParameterfSGIX_ARG_EXPAND);
typedef void (*glSpriteParameterfSGIX_PTR)(glSpriteParameterfSGIX_ARG_EXPAND);
void glSpriteParameterfvSGIX(glSpriteParameterfvSGIX_ARG_EXPAND);
typedef void (*glSpriteParameterfvSGIX_PTR)(glSpriteParameterfvSGIX_ARG_EXPAND);
void glSpriteParameteriSGIX(glSpriteParameteriSGIX_ARG_EXPAND);
typedef void (*glSpriteParameteriSGIX_PTR)(glSpriteParameteriSGIX_ARG_EXPAND);
void glSpriteParameterivSGIX(glSpriteParameterivSGIX_ARG_EXPAND);
typedef void (*glSpriteParameterivSGIX_PTR)(glSpriteParameterivSGIX_ARG_EXPAND);
void glStartInstrumentsSGIX(glStartInstrumentsSGIX_ARG_EXPAND);
typedef void (*glStartInstrumentsSGIX_PTR)(glStartInstrumentsSGIX_ARG_EXPAND);
void glStencilClearTagEXT(glStencilClearTagEXT_ARG_EXPAND);
typedef void (*glStencilClearTagEXT_PTR)(glStencilClearTagEXT_ARG_EXPAND);
void glStencilFillPathInstancedNV(glStencilFillPathInstancedNV_ARG_EXPAND);
typedef void (*glStencilFillPathInstancedNV_PTR)(glStencilFillPathInstancedNV_ARG_EXPAND);
void glStencilFillPathNV(glStencilFillPathNV_ARG_EXPAND);
typedef void (*glStencilFillPathNV_PTR)(glStencilFillPathNV_ARG_EXPAND);
void glStencilFunc(glStencilFunc_ARG_EXPAND);
typedef void (*glStencilFunc_PTR)(glStencilFunc_ARG_EXPAND);
void glStencilFuncSeparate(glStencilFuncSeparate_ARG_EXPAND);
typedef void (*glStencilFuncSeparate_PTR)(glStencilFuncSeparate_ARG_EXPAND);
void glStencilFuncSeparateATI(glStencilFuncSeparateATI_ARG_EXPAND);
typedef void (*glStencilFuncSeparateATI_PTR)(glStencilFuncSeparateATI_ARG_EXPAND);
void glStencilMask(glStencilMask_ARG_EXPAND);
typedef void (*glStencilMask_PTR)(glStencilMask_ARG_EXPAND);
void glStencilMaskSeparate(glStencilMaskSeparate_ARG_EXPAND);
typedef void (*glStencilMaskSeparate_PTR)(glStencilMaskSeparate_ARG_EXPAND);
void glStencilOp(glStencilOp_ARG_EXPAND);
typedef void (*glStencilOp_PTR)(glStencilOp_ARG_EXPAND);
void glStencilOpSeparate(glStencilOpSeparate_ARG_EXPAND);
typedef void (*glStencilOpSeparate_PTR)(glStencilOpSeparate_ARG_EXPAND);
void glStencilOpSeparateATI(glStencilOpSeparateATI_ARG_EXPAND);
typedef void (*glStencilOpSeparateATI_PTR)(glStencilOpSeparateATI_ARG_EXPAND);
void glStencilOpValueAMD(glStencilOpValueAMD_ARG_EXPAND);
typedef void (*glStencilOpValueAMD_PTR)(glStencilOpValueAMD_ARG_EXPAND);
void glStencilStrokePathInstancedNV(glStencilStrokePathInstancedNV_ARG_EXPAND);
typedef void (*glStencilStrokePathInstancedNV_PTR)(glStencilStrokePathInstancedNV_ARG_EXPAND);
void glStencilStrokePathNV(glStencilStrokePathNV_ARG_EXPAND);
typedef void (*glStencilStrokePathNV_PTR)(glStencilStrokePathNV_ARG_EXPAND);
void glStopInstrumentsSGIX(glStopInstrumentsSGIX_ARG_EXPAND);
typedef void (*glStopInstrumentsSGIX_PTR)(glStopInstrumentsSGIX_ARG_EXPAND);
void glStringMarkerGREMEDY(glStringMarkerGREMEDY_ARG_EXPAND);
typedef void (*glStringMarkerGREMEDY_PTR)(glStringMarkerGREMEDY_ARG_EXPAND);
void glSwizzleEXT(glSwizzleEXT_ARG_EXPAND);
typedef void (*glSwizzleEXT_PTR)(glSwizzleEXT_ARG_EXPAND);
void glSyncTextureINTEL(glSyncTextureINTEL_ARG_EXPAND);
typedef void (*glSyncTextureINTEL_PTR)(glSyncTextureINTEL_ARG_EXPAND);
void glTagSampleBufferSGIX(glTagSampleBufferSGIX_ARG_EXPAND);
typedef void (*glTagSampleBufferSGIX_PTR)(glTagSampleBufferSGIX_ARG_EXPAND);
void glTangent3bEXT(glTangent3bEXT_ARG_EXPAND);
typedef void (*glTangent3bEXT_PTR)(glTangent3bEXT_ARG_EXPAND);
void glTangent3bvEXT(glTangent3bvEXT_ARG_EXPAND);
typedef void (*glTangent3bvEXT_PTR)(glTangent3bvEXT_ARG_EXPAND);
void glTangent3dEXT(glTangent3dEXT_ARG_EXPAND);
typedef void (*glTangent3dEXT_PTR)(glTangent3dEXT_ARG_EXPAND);
void glTangent3dvEXT(glTangent3dvEXT_ARG_EXPAND);
typedef void (*glTangent3dvEXT_PTR)(glTangent3dvEXT_ARG_EXPAND);
void glTangent3fEXT(glTangent3fEXT_ARG_EXPAND);
typedef void (*glTangent3fEXT_PTR)(glTangent3fEXT_ARG_EXPAND);
void glTangent3fvEXT(glTangent3fvEXT_ARG_EXPAND);
typedef void (*glTangent3fvEXT_PTR)(glTangent3fvEXT_ARG_EXPAND);
void glTangent3iEXT(glTangent3iEXT_ARG_EXPAND);
typedef void (*glTangent3iEXT_PTR)(glTangent3iEXT_ARG_EXPAND);
void glTangent3ivEXT(glTangent3ivEXT_ARG_EXPAND);
typedef void (*glTangent3ivEXT_PTR)(glTangent3ivEXT_ARG_EXPAND);
void glTangent3sEXT(glTangent3sEXT_ARG_EXPAND);
typedef void (*glTangent3sEXT_PTR)(glTangent3sEXT_ARG_EXPAND);
void glTangent3svEXT(glTangent3svEXT_ARG_EXPAND);
typedef void (*glTangent3svEXT_PTR)(glTangent3svEXT_ARG_EXPAND);
void glTangentPointerEXT(glTangentPointerEXT_ARG_EXPAND);
typedef void (*glTangentPointerEXT_PTR)(glTangentPointerEXT_ARG_EXPAND);
void glTbufferMask3DFX(glTbufferMask3DFX_ARG_EXPAND);
typedef void (*glTbufferMask3DFX_PTR)(glTbufferMask3DFX_ARG_EXPAND);
void glTessellationFactorAMD(glTessellationFactorAMD_ARG_EXPAND);
typedef void (*glTessellationFactorAMD_PTR)(glTessellationFactorAMD_ARG_EXPAND);
void glTessellationModeAMD(glTessellationModeAMD_ARG_EXPAND);
typedef void (*glTessellationModeAMD_PTR)(glTessellationModeAMD_ARG_EXPAND);
GLboolean glTestFenceAPPLE(glTestFenceAPPLE_ARG_EXPAND);
typedef GLboolean (*glTestFenceAPPLE_PTR)(glTestFenceAPPLE_ARG_EXPAND);
GLboolean glTestFenceNV(glTestFenceNV_ARG_EXPAND);
typedef GLboolean (*glTestFenceNV_PTR)(glTestFenceNV_ARG_EXPAND);
GLboolean glTestObjectAPPLE(glTestObjectAPPLE_ARG_EXPAND);
typedef GLboolean (*glTestObjectAPPLE_PTR)(glTestObjectAPPLE_ARG_EXPAND);
void glTexBuffer(glTexBuffer_ARG_EXPAND);
typedef void (*glTexBuffer_PTR)(glTexBuffer_ARG_EXPAND);
void glTexBufferARB(glTexBufferARB_ARG_EXPAND);
typedef void (*glTexBufferARB_PTR)(glTexBufferARB_ARG_EXPAND);
void glTexBufferEXT(glTexBufferEXT_ARG_EXPAND);
typedef void (*glTexBufferEXT_PTR)(glTexBufferEXT_ARG_EXPAND);
void glTexBufferRange(glTexBufferRange_ARG_EXPAND);
typedef void (*glTexBufferRange_PTR)(glTexBufferRange_ARG_EXPAND);
void glTexBumpParameterfvATI(glTexBumpParameterfvATI_ARG_EXPAND);
typedef void (*glTexBumpParameterfvATI_PTR)(glTexBumpParameterfvATI_ARG_EXPAND);
void glTexBumpParameterivATI(glTexBumpParameterivATI_ARG_EXPAND);
typedef void (*glTexBumpParameterivATI_PTR)(glTexBumpParameterivATI_ARG_EXPAND);
void glTexCoord1bOES(glTexCoord1bOES_ARG_EXPAND);
typedef void (*glTexCoord1bOES_PTR)(glTexCoord1bOES_ARG_EXPAND);
void glTexCoord1bvOES(glTexCoord1bvOES_ARG_EXPAND);
typedef void (*glTexCoord1bvOES_PTR)(glTexCoord1bvOES_ARG_EXPAND);
void glTexCoord1d(glTexCoord1d_ARG_EXPAND);
typedef void (*glTexCoord1d_PTR)(glTexCoord1d_ARG_EXPAND);
void glTexCoord1dv(glTexCoord1dv_ARG_EXPAND);
typedef void (*glTexCoord1dv_PTR)(glTexCoord1dv_ARG_EXPAND);
void glTexCoord1f(glTexCoord1f_ARG_EXPAND);
typedef void (*glTexCoord1f_PTR)(glTexCoord1f_ARG_EXPAND);
void glTexCoord1fv(glTexCoord1fv_ARG_EXPAND);
typedef void (*glTexCoord1fv_PTR)(glTexCoord1fv_ARG_EXPAND);
void glTexCoord1hNV(glTexCoord1hNV_ARG_EXPAND);
typedef void (*glTexCoord1hNV_PTR)(glTexCoord1hNV_ARG_EXPAND);
void glTexCoord1hvNV(glTexCoord1hvNV_ARG_EXPAND);
typedef void (*glTexCoord1hvNV_PTR)(glTexCoord1hvNV_ARG_EXPAND);
void glTexCoord1i(glTexCoord1i_ARG_EXPAND);
typedef void (*glTexCoord1i_PTR)(glTexCoord1i_ARG_EXPAND);
void glTexCoord1iv(glTexCoord1iv_ARG_EXPAND);
typedef void (*glTexCoord1iv_PTR)(glTexCoord1iv_ARG_EXPAND);
void glTexCoord1s(glTexCoord1s_ARG_EXPAND);
typedef void (*glTexCoord1s_PTR)(glTexCoord1s_ARG_EXPAND);
void glTexCoord1sv(glTexCoord1sv_ARG_EXPAND);
typedef void (*glTexCoord1sv_PTR)(glTexCoord1sv_ARG_EXPAND);
void glTexCoord1xOES(glTexCoord1xOES_ARG_EXPAND);
typedef void (*glTexCoord1xOES_PTR)(glTexCoord1xOES_ARG_EXPAND);
void glTexCoord1xvOES(glTexCoord1xvOES_ARG_EXPAND);
typedef void (*glTexCoord1xvOES_PTR)(glTexCoord1xvOES_ARG_EXPAND);
void glTexCoord2bOES(glTexCoord2bOES_ARG_EXPAND);
typedef void (*glTexCoord2bOES_PTR)(glTexCoord2bOES_ARG_EXPAND);
void glTexCoord2bvOES(glTexCoord2bvOES_ARG_EXPAND);
typedef void (*glTexCoord2bvOES_PTR)(glTexCoord2bvOES_ARG_EXPAND);
void glTexCoord2d(glTexCoord2d_ARG_EXPAND);
typedef void (*glTexCoord2d_PTR)(glTexCoord2d_ARG_EXPAND);
void glTexCoord2dv(glTexCoord2dv_ARG_EXPAND);
typedef void (*glTexCoord2dv_PTR)(glTexCoord2dv_ARG_EXPAND);
void glTexCoord2f(glTexCoord2f_ARG_EXPAND);
typedef void (*glTexCoord2f_PTR)(glTexCoord2f_ARG_EXPAND);
void glTexCoord2fColor3fVertex3fSUN(glTexCoord2fColor3fVertex3fSUN_ARG_EXPAND);
typedef void (*glTexCoord2fColor3fVertex3fSUN_PTR)(glTexCoord2fColor3fVertex3fSUN_ARG_EXPAND);
void glTexCoord2fColor3fVertex3fvSUN(glTexCoord2fColor3fVertex3fvSUN_ARG_EXPAND);
typedef void (*glTexCoord2fColor3fVertex3fvSUN_PTR)(glTexCoord2fColor3fVertex3fvSUN_ARG_EXPAND);
void glTexCoord2fColor4fNormal3fVertex3fSUN(glTexCoord2fColor4fNormal3fVertex3fSUN_ARG_EXPAND);
typedef void (*glTexCoord2fColor4fNormal3fVertex3fSUN_PTR)(glTexCoord2fColor4fNormal3fVertex3fSUN_ARG_EXPAND);
void glTexCoord2fColor4fNormal3fVertex3fvSUN(glTexCoord2fColor4fNormal3fVertex3fvSUN_ARG_EXPAND);
typedef void (*glTexCoord2fColor4fNormal3fVertex3fvSUN_PTR)(glTexCoord2fColor4fNormal3fVertex3fvSUN_ARG_EXPAND);
void glTexCoord2fColor4ubVertex3fSUN(glTexCoord2fColor4ubVertex3fSUN_ARG_EXPAND);
typedef void (*glTexCoord2fColor4ubVertex3fSUN_PTR)(glTexCoord2fColor4ubVertex3fSUN_ARG_EXPAND);
void glTexCoord2fColor4ubVertex3fvSUN(glTexCoord2fColor4ubVertex3fvSUN_ARG_EXPAND);
typedef void (*glTexCoord2fColor4ubVertex3fvSUN_PTR)(glTexCoord2fColor4ubVertex3fvSUN_ARG_EXPAND);
void glTexCoord2fNormal3fVertex3fSUN(glTexCoord2fNormal3fVertex3fSUN_ARG_EXPAND);
typedef void (*glTexCoord2fNormal3fVertex3fSUN_PTR)(glTexCoord2fNormal3fVertex3fSUN_ARG_EXPAND);
void glTexCoord2fNormal3fVertex3fvSUN(glTexCoord2fNormal3fVertex3fvSUN_ARG_EXPAND);
typedef void (*glTexCoord2fNormal3fVertex3fvSUN_PTR)(glTexCoord2fNormal3fVertex3fvSUN_ARG_EXPAND);
void glTexCoord2fVertex3fSUN(glTexCoord2fVertex3fSUN_ARG_EXPAND);
typedef void (*glTexCoord2fVertex3fSUN_PTR)(glTexCoord2fVertex3fSUN_ARG_EXPAND);
void glTexCoord2fVertex3fvSUN(glTexCoord2fVertex3fvSUN_ARG_EXPAND);
typedef void (*glTexCoord2fVertex3fvSUN_PTR)(glTexCoord2fVertex3fvSUN_ARG_EXPAND);
void glTexCoord2fv(glTexCoord2fv_ARG_EXPAND);
typedef void (*glTexCoord2fv_PTR)(glTexCoord2fv_ARG_EXPAND);
void glTexCoord2hNV(glTexCoord2hNV_ARG_EXPAND);
typedef void (*glTexCoord2hNV_PTR)(glTexCoord2hNV_ARG_EXPAND);
void glTexCoord2hvNV(glTexCoord2hvNV_ARG_EXPAND);
typedef void (*glTexCoord2hvNV_PTR)(glTexCoord2hvNV_ARG_EXPAND);
void glTexCoord2i(glTexCoord2i_ARG_EXPAND);
typedef void (*glTexCoord2i_PTR)(glTexCoord2i_ARG_EXPAND);
void glTexCoord2iv(glTexCoord2iv_ARG_EXPAND);
typedef void (*glTexCoord2iv_PTR)(glTexCoord2iv_ARG_EXPAND);
void glTexCoord2s(glTexCoord2s_ARG_EXPAND);
typedef void (*glTexCoord2s_PTR)(glTexCoord2s_ARG_EXPAND);
void glTexCoord2sv(glTexCoord2sv_ARG_EXPAND);
typedef void (*glTexCoord2sv_PTR)(glTexCoord2sv_ARG_EXPAND);
void glTexCoord2xOES(glTexCoord2xOES_ARG_EXPAND);
typedef void (*glTexCoord2xOES_PTR)(glTexCoord2xOES_ARG_EXPAND);
void glTexCoord2xvOES(glTexCoord2xvOES_ARG_EXPAND);
typedef void (*glTexCoord2xvOES_PTR)(glTexCoord2xvOES_ARG_EXPAND);
void glTexCoord3bOES(glTexCoord3bOES_ARG_EXPAND);
typedef void (*glTexCoord3bOES_PTR)(glTexCoord3bOES_ARG_EXPAND);
void glTexCoord3bvOES(glTexCoord3bvOES_ARG_EXPAND);
typedef void (*glTexCoord3bvOES_PTR)(glTexCoord3bvOES_ARG_EXPAND);
void glTexCoord3d(glTexCoord3d_ARG_EXPAND);
typedef void (*glTexCoord3d_PTR)(glTexCoord3d_ARG_EXPAND);
void glTexCoord3dv(glTexCoord3dv_ARG_EXPAND);
typedef void (*glTexCoord3dv_PTR)(glTexCoord3dv_ARG_EXPAND);
void glTexCoord3f(glTexCoord3f_ARG_EXPAND);
typedef void (*glTexCoord3f_PTR)(glTexCoord3f_ARG_EXPAND);
void glTexCoord3fv(glTexCoord3fv_ARG_EXPAND);
typedef void (*glTexCoord3fv_PTR)(glTexCoord3fv_ARG_EXPAND);
void glTexCoord3hNV(glTexCoord3hNV_ARG_EXPAND);
typedef void (*glTexCoord3hNV_PTR)(glTexCoord3hNV_ARG_EXPAND);
void glTexCoord3hvNV(glTexCoord3hvNV_ARG_EXPAND);
typedef void (*glTexCoord3hvNV_PTR)(glTexCoord3hvNV_ARG_EXPAND);
void glTexCoord3i(glTexCoord3i_ARG_EXPAND);
typedef void (*glTexCoord3i_PTR)(glTexCoord3i_ARG_EXPAND);
void glTexCoord3iv(glTexCoord3iv_ARG_EXPAND);
typedef void (*glTexCoord3iv_PTR)(glTexCoord3iv_ARG_EXPAND);
void glTexCoord3s(glTexCoord3s_ARG_EXPAND);
typedef void (*glTexCoord3s_PTR)(glTexCoord3s_ARG_EXPAND);
void glTexCoord3sv(glTexCoord3sv_ARG_EXPAND);
typedef void (*glTexCoord3sv_PTR)(glTexCoord3sv_ARG_EXPAND);
void glTexCoord3xOES(glTexCoord3xOES_ARG_EXPAND);
typedef void (*glTexCoord3xOES_PTR)(glTexCoord3xOES_ARG_EXPAND);
void glTexCoord3xvOES(glTexCoord3xvOES_ARG_EXPAND);
typedef void (*glTexCoord3xvOES_PTR)(glTexCoord3xvOES_ARG_EXPAND);
void glTexCoord4bOES(glTexCoord4bOES_ARG_EXPAND);
typedef void (*glTexCoord4bOES_PTR)(glTexCoord4bOES_ARG_EXPAND);
void glTexCoord4bvOES(glTexCoord4bvOES_ARG_EXPAND);
typedef void (*glTexCoord4bvOES_PTR)(glTexCoord4bvOES_ARG_EXPAND);
void glTexCoord4d(glTexCoord4d_ARG_EXPAND);
typedef void (*glTexCoord4d_PTR)(glTexCoord4d_ARG_EXPAND);
void glTexCoord4dv(glTexCoord4dv_ARG_EXPAND);
typedef void (*glTexCoord4dv_PTR)(glTexCoord4dv_ARG_EXPAND);
void glTexCoord4f(glTexCoord4f_ARG_EXPAND);
typedef void (*glTexCoord4f_PTR)(glTexCoord4f_ARG_EXPAND);
void glTexCoord4fColor4fNormal3fVertex4fSUN(glTexCoord4fColor4fNormal3fVertex4fSUN_ARG_EXPAND);
typedef void (*glTexCoord4fColor4fNormal3fVertex4fSUN_PTR)(glTexCoord4fColor4fNormal3fVertex4fSUN_ARG_EXPAND);
void glTexCoord4fColor4fNormal3fVertex4fvSUN(glTexCoord4fColor4fNormal3fVertex4fvSUN_ARG_EXPAND);
typedef void (*glTexCoord4fColor4fNormal3fVertex4fvSUN_PTR)(glTexCoord4fColor4fNormal3fVertex4fvSUN_ARG_EXPAND);
void glTexCoord4fVertex4fSUN(glTexCoord4fVertex4fSUN_ARG_EXPAND);
typedef void (*glTexCoord4fVertex4fSUN_PTR)(glTexCoord4fVertex4fSUN_ARG_EXPAND);
void glTexCoord4fVertex4fvSUN(glTexCoord4fVertex4fvSUN_ARG_EXPAND);
typedef void (*glTexCoord4fVertex4fvSUN_PTR)(glTexCoord4fVertex4fvSUN_ARG_EXPAND);
void glTexCoord4fv(glTexCoord4fv_ARG_EXPAND);
typedef void (*glTexCoord4fv_PTR)(glTexCoord4fv_ARG_EXPAND);
void glTexCoord4hNV(glTexCoord4hNV_ARG_EXPAND);
typedef void (*glTexCoord4hNV_PTR)(glTexCoord4hNV_ARG_EXPAND);
void glTexCoord4hvNV(glTexCoord4hvNV_ARG_EXPAND);
typedef void (*glTexCoord4hvNV_PTR)(glTexCoord4hvNV_ARG_EXPAND);
void glTexCoord4i(glTexCoord4i_ARG_EXPAND);
typedef void (*glTexCoord4i_PTR)(glTexCoord4i_ARG_EXPAND);
void glTexCoord4iv(glTexCoord4iv_ARG_EXPAND);
typedef void (*glTexCoord4iv_PTR)(glTexCoord4iv_ARG_EXPAND);
void glTexCoord4s(glTexCoord4s_ARG_EXPAND);
typedef void (*glTexCoord4s_PTR)(glTexCoord4s_ARG_EXPAND);
void glTexCoord4sv(glTexCoord4sv_ARG_EXPAND);
typedef void (*glTexCoord4sv_PTR)(glTexCoord4sv_ARG_EXPAND);
void glTexCoord4xOES(glTexCoord4xOES_ARG_EXPAND);
typedef void (*glTexCoord4xOES_PTR)(glTexCoord4xOES_ARG_EXPAND);
void glTexCoord4xvOES(glTexCoord4xvOES_ARG_EXPAND);
typedef void (*glTexCoord4xvOES_PTR)(glTexCoord4xvOES_ARG_EXPAND);
void glTexCoordFormatNV(glTexCoordFormatNV_ARG_EXPAND);
typedef void (*glTexCoordFormatNV_PTR)(glTexCoordFormatNV_ARG_EXPAND);
void glTexCoordP1ui(glTexCoordP1ui_ARG_EXPAND);
typedef void (*glTexCoordP1ui_PTR)(glTexCoordP1ui_ARG_EXPAND);
void glTexCoordP1uiv(glTexCoordP1uiv_ARG_EXPAND);
typedef void (*glTexCoordP1uiv_PTR)(glTexCoordP1uiv_ARG_EXPAND);
void glTexCoordP2ui(glTexCoordP2ui_ARG_EXPAND);
typedef void (*glTexCoordP2ui_PTR)(glTexCoordP2ui_ARG_EXPAND);
void glTexCoordP2uiv(glTexCoordP2uiv_ARG_EXPAND);
typedef void (*glTexCoordP2uiv_PTR)(glTexCoordP2uiv_ARG_EXPAND);
void glTexCoordP3ui(glTexCoordP3ui_ARG_EXPAND);
typedef void (*glTexCoordP3ui_PTR)(glTexCoordP3ui_ARG_EXPAND);
void glTexCoordP3uiv(glTexCoordP3uiv_ARG_EXPAND);
typedef void (*glTexCoordP3uiv_PTR)(glTexCoordP3uiv_ARG_EXPAND);
void glTexCoordP4ui(glTexCoordP4ui_ARG_EXPAND);
typedef void (*glTexCoordP4ui_PTR)(glTexCoordP4ui_ARG_EXPAND);
void glTexCoordP4uiv(glTexCoordP4uiv_ARG_EXPAND);
typedef void (*glTexCoordP4uiv_PTR)(glTexCoordP4uiv_ARG_EXPAND);
void glTexCoordPointer(glTexCoordPointer_ARG_EXPAND);
typedef void (*glTexCoordPointer_PTR)(glTexCoordPointer_ARG_EXPAND);
void glTexCoordPointerEXT(glTexCoordPointerEXT_ARG_EXPAND);
typedef void (*glTexCoordPointerEXT_PTR)(glTexCoordPointerEXT_ARG_EXPAND);
void glTexCoordPointerListIBM(glTexCoordPointerListIBM_ARG_EXPAND);
typedef void (*glTexCoordPointerListIBM_PTR)(glTexCoordPointerListIBM_ARG_EXPAND);
void glTexCoordPointervINTEL(glTexCoordPointervINTEL_ARG_EXPAND);
typedef void (*glTexCoordPointervINTEL_PTR)(glTexCoordPointervINTEL_ARG_EXPAND);
void glTexEnvf(glTexEnvf_ARG_EXPAND);
typedef void (*glTexEnvf_PTR)(glTexEnvf_ARG_EXPAND);
void glTexEnvfv(glTexEnvfv_ARG_EXPAND);
typedef void (*glTexEnvfv_PTR)(glTexEnvfv_ARG_EXPAND);
void glTexEnvi(glTexEnvi_ARG_EXPAND);
typedef void (*glTexEnvi_PTR)(glTexEnvi_ARG_EXPAND);
void glTexEnviv(glTexEnviv_ARG_EXPAND);
typedef void (*glTexEnviv_PTR)(glTexEnviv_ARG_EXPAND);
void glTexEnvx(glTexEnvx_ARG_EXPAND);
typedef void (*glTexEnvx_PTR)(glTexEnvx_ARG_EXPAND);
void glTexEnvxOES(glTexEnvxOES_ARG_EXPAND);
typedef void (*glTexEnvxOES_PTR)(glTexEnvxOES_ARG_EXPAND);
void glTexEnvxv(glTexEnvxv_ARG_EXPAND);
typedef void (*glTexEnvxv_PTR)(glTexEnvxv_ARG_EXPAND);
void glTexEnvxvOES(glTexEnvxvOES_ARG_EXPAND);
typedef void (*glTexEnvxvOES_PTR)(glTexEnvxvOES_ARG_EXPAND);
void glTexFilterFuncSGIS(glTexFilterFuncSGIS_ARG_EXPAND);
typedef void (*glTexFilterFuncSGIS_PTR)(glTexFilterFuncSGIS_ARG_EXPAND);
void glTexGend(glTexGend_ARG_EXPAND);
typedef void (*glTexGend_PTR)(glTexGend_ARG_EXPAND);
void glTexGendv(glTexGendv_ARG_EXPAND);
typedef void (*glTexGendv_PTR)(glTexGendv_ARG_EXPAND);
void glTexGenf(glTexGenf_ARG_EXPAND);
typedef void (*glTexGenf_PTR)(glTexGenf_ARG_EXPAND);
void glTexGenfv(glTexGenfv_ARG_EXPAND);
typedef void (*glTexGenfv_PTR)(glTexGenfv_ARG_EXPAND);
void glTexGeni(glTexGeni_ARG_EXPAND);
typedef void (*glTexGeni_PTR)(glTexGeni_ARG_EXPAND);
void glTexGeniv(glTexGeniv_ARG_EXPAND);
typedef void (*glTexGeniv_PTR)(glTexGeniv_ARG_EXPAND);
void glTexGenxOES(glTexGenxOES_ARG_EXPAND);
typedef void (*glTexGenxOES_PTR)(glTexGenxOES_ARG_EXPAND);
void glTexGenxvOES(glTexGenxvOES_ARG_EXPAND);
typedef void (*glTexGenxvOES_PTR)(glTexGenxvOES_ARG_EXPAND);
void glTexImage1D(glTexImage1D_ARG_EXPAND);
typedef void (*glTexImage1D_PTR)(glTexImage1D_ARG_EXPAND);
void glTexImage2D(glTexImage2D_ARG_EXPAND);
typedef void (*glTexImage2D_PTR)(glTexImage2D_ARG_EXPAND);
void glTexImage2DMultisample(glTexImage2DMultisample_ARG_EXPAND);
typedef void (*glTexImage2DMultisample_PTR)(glTexImage2DMultisample_ARG_EXPAND);
void glTexImage2DMultisampleCoverageNV(glTexImage2DMultisampleCoverageNV_ARG_EXPAND);
typedef void (*glTexImage2DMultisampleCoverageNV_PTR)(glTexImage2DMultisampleCoverageNV_ARG_EXPAND);
void glTexImage3D(glTexImage3D_ARG_EXPAND);
typedef void (*glTexImage3D_PTR)(glTexImage3D_ARG_EXPAND);
void glTexImage3DEXT(glTexImage3DEXT_ARG_EXPAND);
typedef void (*glTexImage3DEXT_PTR)(glTexImage3DEXT_ARG_EXPAND);
void glTexImage3DMultisample(glTexImage3DMultisample_ARG_EXPAND);
typedef void (*glTexImage3DMultisample_PTR)(glTexImage3DMultisample_ARG_EXPAND);
void glTexImage3DMultisampleCoverageNV(glTexImage3DMultisampleCoverageNV_ARG_EXPAND);
typedef void (*glTexImage3DMultisampleCoverageNV_PTR)(glTexImage3DMultisampleCoverageNV_ARG_EXPAND);
void glTexImage4DSGIS(glTexImage4DSGIS_ARG_EXPAND);
typedef void (*glTexImage4DSGIS_PTR)(glTexImage4DSGIS_ARG_EXPAND);
void glTexParameterIiv(glTexParameterIiv_ARG_EXPAND);
typedef void (*glTexParameterIiv_PTR)(glTexParameterIiv_ARG_EXPAND);
void glTexParameterIivEXT(glTexParameterIivEXT_ARG_EXPAND);
typedef void (*glTexParameterIivEXT_PTR)(glTexParameterIivEXT_ARG_EXPAND);
void glTexParameterIuiv(glTexParameterIuiv_ARG_EXPAND);
typedef void (*glTexParameterIuiv_PTR)(glTexParameterIuiv_ARG_EXPAND);
void glTexParameterIuivEXT(glTexParameterIuivEXT_ARG_EXPAND);
typedef void (*glTexParameterIuivEXT_PTR)(glTexParameterIuivEXT_ARG_EXPAND);
void glTexParameterf(glTexParameterf_ARG_EXPAND);
typedef void (*glTexParameterf_PTR)(glTexParameterf_ARG_EXPAND);
void glTexParameterfv(glTexParameterfv_ARG_EXPAND);
typedef void (*glTexParameterfv_PTR)(glTexParameterfv_ARG_EXPAND);
void glTexParameteri(glTexParameteri_ARG_EXPAND);
typedef void (*glTexParameteri_PTR)(glTexParameteri_ARG_EXPAND);
void glTexParameteriv(glTexParameteriv_ARG_EXPAND);
typedef void (*glTexParameteriv_PTR)(glTexParameteriv_ARG_EXPAND);
void glTexParameterx(glTexParameterx_ARG_EXPAND);
typedef void (*glTexParameterx_PTR)(glTexParameterx_ARG_EXPAND);
void glTexParameterxOES(glTexParameterxOES_ARG_EXPAND);
typedef void (*glTexParameterxOES_PTR)(glTexParameterxOES_ARG_EXPAND);
void glTexParameterxv(glTexParameterxv_ARG_EXPAND);
typedef void (*glTexParameterxv_PTR)(glTexParameterxv_ARG_EXPAND);
void glTexParameterxvOES(glTexParameterxvOES_ARG_EXPAND);
typedef void (*glTexParameterxvOES_PTR)(glTexParameterxvOES_ARG_EXPAND);
void glTexRenderbufferNV(glTexRenderbufferNV_ARG_EXPAND);
typedef void (*glTexRenderbufferNV_PTR)(glTexRenderbufferNV_ARG_EXPAND);
void glTexStorage1D(glTexStorage1D_ARG_EXPAND);
typedef void (*glTexStorage1D_PTR)(glTexStorage1D_ARG_EXPAND);
void glTexStorage2D(glTexStorage2D_ARG_EXPAND);
typedef void (*glTexStorage2D_PTR)(glTexStorage2D_ARG_EXPAND);
void glTexStorage2DMultisample(glTexStorage2DMultisample_ARG_EXPAND);
typedef void (*glTexStorage2DMultisample_PTR)(glTexStorage2DMultisample_ARG_EXPAND);
void glTexStorage3D(glTexStorage3D_ARG_EXPAND);
typedef void (*glTexStorage3D_PTR)(glTexStorage3D_ARG_EXPAND);
void glTexStorage3DMultisample(glTexStorage3DMultisample_ARG_EXPAND);
typedef void (*glTexStorage3DMultisample_PTR)(glTexStorage3DMultisample_ARG_EXPAND);
void glTexStorageSparseAMD(glTexStorageSparseAMD_ARG_EXPAND);
typedef void (*glTexStorageSparseAMD_PTR)(glTexStorageSparseAMD_ARG_EXPAND);
void glTexSubImage1D(glTexSubImage1D_ARG_EXPAND);
typedef void (*glTexSubImage1D_PTR)(glTexSubImage1D_ARG_EXPAND);
void glTexSubImage1DEXT(glTexSubImage1DEXT_ARG_EXPAND);
typedef void (*glTexSubImage1DEXT_PTR)(glTexSubImage1DEXT_ARG_EXPAND);
void glTexSubImage2D(glTexSubImage2D_ARG_EXPAND);
typedef void (*glTexSubImage2D_PTR)(glTexSubImage2D_ARG_EXPAND);
void glTexSubImage2DEXT(glTexSubImage2DEXT_ARG_EXPAND);
typedef void (*glTexSubImage2DEXT_PTR)(glTexSubImage2DEXT_ARG_EXPAND);
void glTexSubImage3D(glTexSubImage3D_ARG_EXPAND);
typedef void (*glTexSubImage3D_PTR)(glTexSubImage3D_ARG_EXPAND);
void glTexSubImage3DEXT(glTexSubImage3DEXT_ARG_EXPAND);
typedef void (*glTexSubImage3DEXT_PTR)(glTexSubImage3DEXT_ARG_EXPAND);
void glTexSubImage4DSGIS(glTexSubImage4DSGIS_ARG_EXPAND);
typedef void (*glTexSubImage4DSGIS_PTR)(glTexSubImage4DSGIS_ARG_EXPAND);
void glTextureBarrierNV(glTextureBarrierNV_ARG_EXPAND);
typedef void (*glTextureBarrierNV_PTR)(glTextureBarrierNV_ARG_EXPAND);
void glTextureBufferEXT(glTextureBufferEXT_ARG_EXPAND);
typedef void (*glTextureBufferEXT_PTR)(glTextureBufferEXT_ARG_EXPAND);
void glTextureBufferRangeEXT(glTextureBufferRangeEXT_ARG_EXPAND);
typedef void (*glTextureBufferRangeEXT_PTR)(glTextureBufferRangeEXT_ARG_EXPAND);
void glTextureColorMaskSGIS(glTextureColorMaskSGIS_ARG_EXPAND);
typedef void (*glTextureColorMaskSGIS_PTR)(glTextureColorMaskSGIS_ARG_EXPAND);
void glTextureImage1DEXT(glTextureImage1DEXT_ARG_EXPAND);
typedef void (*glTextureImage1DEXT_PTR)(glTextureImage1DEXT_ARG_EXPAND);
void glTextureImage2DEXT(glTextureImage2DEXT_ARG_EXPAND);
typedef void (*glTextureImage2DEXT_PTR)(glTextureImage2DEXT_ARG_EXPAND);
void glTextureImage2DMultisampleCoverageNV(glTextureImage2DMultisampleCoverageNV_ARG_EXPAND);
typedef void (*glTextureImage2DMultisampleCoverageNV_PTR)(glTextureImage2DMultisampleCoverageNV_ARG_EXPAND);
void glTextureImage2DMultisampleNV(glTextureImage2DMultisampleNV_ARG_EXPAND);
typedef void (*glTextureImage2DMultisampleNV_PTR)(glTextureImage2DMultisampleNV_ARG_EXPAND);
void glTextureImage3DEXT(glTextureImage3DEXT_ARG_EXPAND);
typedef void (*glTextureImage3DEXT_PTR)(glTextureImage3DEXT_ARG_EXPAND);
void glTextureImage3DMultisampleCoverageNV(glTextureImage3DMultisampleCoverageNV_ARG_EXPAND);
typedef void (*glTextureImage3DMultisampleCoverageNV_PTR)(glTextureImage3DMultisampleCoverageNV_ARG_EXPAND);
void glTextureImage3DMultisampleNV(glTextureImage3DMultisampleNV_ARG_EXPAND);
typedef void (*glTextureImage3DMultisampleNV_PTR)(glTextureImage3DMultisampleNV_ARG_EXPAND);
void glTextureLightEXT(glTextureLightEXT_ARG_EXPAND);
typedef void (*glTextureLightEXT_PTR)(glTextureLightEXT_ARG_EXPAND);
void glTextureMaterialEXT(glTextureMaterialEXT_ARG_EXPAND);
typedef void (*glTextureMaterialEXT_PTR)(glTextureMaterialEXT_ARG_EXPAND);
void glTextureNormalEXT(glTextureNormalEXT_ARG_EXPAND);
typedef void (*glTextureNormalEXT_PTR)(glTextureNormalEXT_ARG_EXPAND);
void glTextureParameterIivEXT(glTextureParameterIivEXT_ARG_EXPAND);
typedef void (*glTextureParameterIivEXT_PTR)(glTextureParameterIivEXT_ARG_EXPAND);
void glTextureParameterIuivEXT(glTextureParameterIuivEXT_ARG_EXPAND);
typedef void (*glTextureParameterIuivEXT_PTR)(glTextureParameterIuivEXT_ARG_EXPAND);
void glTextureParameterfEXT(glTextureParameterfEXT_ARG_EXPAND);
typedef void (*glTextureParameterfEXT_PTR)(glTextureParameterfEXT_ARG_EXPAND);
void glTextureParameterfvEXT(glTextureParameterfvEXT_ARG_EXPAND);
typedef void (*glTextureParameterfvEXT_PTR)(glTextureParameterfvEXT_ARG_EXPAND);
void glTextureParameteriEXT(glTextureParameteriEXT_ARG_EXPAND);
typedef void (*glTextureParameteriEXT_PTR)(glTextureParameteriEXT_ARG_EXPAND);
void glTextureParameterivEXT(glTextureParameterivEXT_ARG_EXPAND);
typedef void (*glTextureParameterivEXT_PTR)(glTextureParameterivEXT_ARG_EXPAND);
void glTextureRangeAPPLE(glTextureRangeAPPLE_ARG_EXPAND);
typedef void (*glTextureRangeAPPLE_PTR)(glTextureRangeAPPLE_ARG_EXPAND);
void glTextureRenderbufferEXT(glTextureRenderbufferEXT_ARG_EXPAND);
typedef void (*glTextureRenderbufferEXT_PTR)(glTextureRenderbufferEXT_ARG_EXPAND);
void glTextureStorage1DEXT(glTextureStorage1DEXT_ARG_EXPAND);
typedef void (*glTextureStorage1DEXT_PTR)(glTextureStorage1DEXT_ARG_EXPAND);
void glTextureStorage2DEXT(glTextureStorage2DEXT_ARG_EXPAND);
typedef void (*glTextureStorage2DEXT_PTR)(glTextureStorage2DEXT_ARG_EXPAND);
void glTextureStorage2DMultisampleEXT(glTextureStorage2DMultisampleEXT_ARG_EXPAND);
typedef void (*glTextureStorage2DMultisampleEXT_PTR)(glTextureStorage2DMultisampleEXT_ARG_EXPAND);
void glTextureStorage3DEXT(glTextureStorage3DEXT_ARG_EXPAND);
typedef void (*glTextureStorage3DEXT_PTR)(glTextureStorage3DEXT_ARG_EXPAND);
void glTextureStorage3DMultisampleEXT(glTextureStorage3DMultisampleEXT_ARG_EXPAND);
typedef void (*glTextureStorage3DMultisampleEXT_PTR)(glTextureStorage3DMultisampleEXT_ARG_EXPAND);
void glTextureStorageSparseAMD(glTextureStorageSparseAMD_ARG_EXPAND);
typedef void (*glTextureStorageSparseAMD_PTR)(glTextureStorageSparseAMD_ARG_EXPAND);
void glTextureSubImage1DEXT(glTextureSubImage1DEXT_ARG_EXPAND);
typedef void (*glTextureSubImage1DEXT_PTR)(glTextureSubImage1DEXT_ARG_EXPAND);
void glTextureSubImage2DEXT(glTextureSubImage2DEXT_ARG_EXPAND);
typedef void (*glTextureSubImage2DEXT_PTR)(glTextureSubImage2DEXT_ARG_EXPAND);
void glTextureSubImage3DEXT(glTextureSubImage3DEXT_ARG_EXPAND);
typedef void (*glTextureSubImage3DEXT_PTR)(glTextureSubImage3DEXT_ARG_EXPAND);
void glTextureView(glTextureView_ARG_EXPAND);
typedef void (*glTextureView_PTR)(glTextureView_ARG_EXPAND);
void glTrackMatrixNV(glTrackMatrixNV_ARG_EXPAND);
typedef void (*glTrackMatrixNV_PTR)(glTrackMatrixNV_ARG_EXPAND);
void glTransformFeedbackAttribsNV(glTransformFeedbackAttribsNV_ARG_EXPAND);
typedef void (*glTransformFeedbackAttribsNV_PTR)(glTransformFeedbackAttribsNV_ARG_EXPAND);
void glTransformFeedbackStreamAttribsNV(glTransformFeedbackStreamAttribsNV_ARG_EXPAND);
typedef void (*glTransformFeedbackStreamAttribsNV_PTR)(glTransformFeedbackStreamAttribsNV_ARG_EXPAND);
void glTransformFeedbackVaryings(glTransformFeedbackVaryings_ARG_EXPAND);
typedef void (*glTransformFeedbackVaryings_PTR)(glTransformFeedbackVaryings_ARG_EXPAND);
void glTransformFeedbackVaryingsEXT(glTransformFeedbackVaryingsEXT_ARG_EXPAND);
typedef void (*glTransformFeedbackVaryingsEXT_PTR)(glTransformFeedbackVaryingsEXT_ARG_EXPAND);
void glTransformFeedbackVaryingsNV(glTransformFeedbackVaryingsNV_ARG_EXPAND);
typedef void (*glTransformFeedbackVaryingsNV_PTR)(glTransformFeedbackVaryingsNV_ARG_EXPAND);
void glTransformPathNV(glTransformPathNV_ARG_EXPAND);
typedef void (*glTransformPathNV_PTR)(glTransformPathNV_ARG_EXPAND);
void glTranslated(glTranslated_ARG_EXPAND);
typedef void (*glTranslated_PTR)(glTranslated_ARG_EXPAND);
void glTranslatef(glTranslatef_ARG_EXPAND);
typedef void (*glTranslatef_PTR)(glTranslatef_ARG_EXPAND);
void glTranslatex(glTranslatex_ARG_EXPAND);
typedef void (*glTranslatex_PTR)(glTranslatex_ARG_EXPAND);
void glTranslatexOES(glTranslatexOES_ARG_EXPAND);
typedef void (*glTranslatexOES_PTR)(glTranslatexOES_ARG_EXPAND);
void glUniform1d(glUniform1d_ARG_EXPAND);
typedef void (*glUniform1d_PTR)(glUniform1d_ARG_EXPAND);
void glUniform1dv(glUniform1dv_ARG_EXPAND);
typedef void (*glUniform1dv_PTR)(glUniform1dv_ARG_EXPAND);
void glUniform1f(glUniform1f_ARG_EXPAND);
typedef void (*glUniform1f_PTR)(glUniform1f_ARG_EXPAND);
void glUniform1fARB(glUniform1fARB_ARG_EXPAND);
typedef void (*glUniform1fARB_PTR)(glUniform1fARB_ARG_EXPAND);
void glUniform1fv(glUniform1fv_ARG_EXPAND);
typedef void (*glUniform1fv_PTR)(glUniform1fv_ARG_EXPAND);
void glUniform1fvARB(glUniform1fvARB_ARG_EXPAND);
typedef void (*glUniform1fvARB_PTR)(glUniform1fvARB_ARG_EXPAND);
void glUniform1i(glUniform1i_ARG_EXPAND);
typedef void (*glUniform1i_PTR)(glUniform1i_ARG_EXPAND);
void glUniform1i64NV(glUniform1i64NV_ARG_EXPAND);
typedef void (*glUniform1i64NV_PTR)(glUniform1i64NV_ARG_EXPAND);
void glUniform1i64vNV(glUniform1i64vNV_ARG_EXPAND);
typedef void (*glUniform1i64vNV_PTR)(glUniform1i64vNV_ARG_EXPAND);
void glUniform1iARB(glUniform1iARB_ARG_EXPAND);
typedef void (*glUniform1iARB_PTR)(glUniform1iARB_ARG_EXPAND);
void glUniform1iv(glUniform1iv_ARG_EXPAND);
typedef void (*glUniform1iv_PTR)(glUniform1iv_ARG_EXPAND);
void glUniform1ivARB(glUniform1ivARB_ARG_EXPAND);
typedef void (*glUniform1ivARB_PTR)(glUniform1ivARB_ARG_EXPAND);
void glUniform1ui(glUniform1ui_ARG_EXPAND);
typedef void (*glUniform1ui_PTR)(glUniform1ui_ARG_EXPAND);
void glUniform1ui64NV(glUniform1ui64NV_ARG_EXPAND);
typedef void (*glUniform1ui64NV_PTR)(glUniform1ui64NV_ARG_EXPAND);
void glUniform1ui64vNV(glUniform1ui64vNV_ARG_EXPAND);
typedef void (*glUniform1ui64vNV_PTR)(glUniform1ui64vNV_ARG_EXPAND);
void glUniform1uiEXT(glUniform1uiEXT_ARG_EXPAND);
typedef void (*glUniform1uiEXT_PTR)(glUniform1uiEXT_ARG_EXPAND);
void glUniform1uiv(glUniform1uiv_ARG_EXPAND);
typedef void (*glUniform1uiv_PTR)(glUniform1uiv_ARG_EXPAND);
void glUniform1uivEXT(glUniform1uivEXT_ARG_EXPAND);
typedef void (*glUniform1uivEXT_PTR)(glUniform1uivEXT_ARG_EXPAND);
void glUniform2d(glUniform2d_ARG_EXPAND);
typedef void (*glUniform2d_PTR)(glUniform2d_ARG_EXPAND);
void glUniform2dv(glUniform2dv_ARG_EXPAND);
typedef void (*glUniform2dv_PTR)(glUniform2dv_ARG_EXPAND);
void glUniform2f(glUniform2f_ARG_EXPAND);
typedef void (*glUniform2f_PTR)(glUniform2f_ARG_EXPAND);
void glUniform2fARB(glUniform2fARB_ARG_EXPAND);
typedef void (*glUniform2fARB_PTR)(glUniform2fARB_ARG_EXPAND);
void glUniform2fv(glUniform2fv_ARG_EXPAND);
typedef void (*glUniform2fv_PTR)(glUniform2fv_ARG_EXPAND);
void glUniform2fvARB(glUniform2fvARB_ARG_EXPAND);
typedef void (*glUniform2fvARB_PTR)(glUniform2fvARB_ARG_EXPAND);
void glUniform2i(glUniform2i_ARG_EXPAND);
typedef void (*glUniform2i_PTR)(glUniform2i_ARG_EXPAND);
void glUniform2i64NV(glUniform2i64NV_ARG_EXPAND);
typedef void (*glUniform2i64NV_PTR)(glUniform2i64NV_ARG_EXPAND);
void glUniform2i64vNV(glUniform2i64vNV_ARG_EXPAND);
typedef void (*glUniform2i64vNV_PTR)(glUniform2i64vNV_ARG_EXPAND);
void glUniform2iARB(glUniform2iARB_ARG_EXPAND);
typedef void (*glUniform2iARB_PTR)(glUniform2iARB_ARG_EXPAND);
void glUniform2iv(glUniform2iv_ARG_EXPAND);
typedef void (*glUniform2iv_PTR)(glUniform2iv_ARG_EXPAND);
void glUniform2ivARB(glUniform2ivARB_ARG_EXPAND);
typedef void (*glUniform2ivARB_PTR)(glUniform2ivARB_ARG_EXPAND);
void glUniform2ui(glUniform2ui_ARG_EXPAND);
typedef void (*glUniform2ui_PTR)(glUniform2ui_ARG_EXPAND);
void glUniform2ui64NV(glUniform2ui64NV_ARG_EXPAND);
typedef void (*glUniform2ui64NV_PTR)(glUniform2ui64NV_ARG_EXPAND);
void glUniform2ui64vNV(glUniform2ui64vNV_ARG_EXPAND);
typedef void (*glUniform2ui64vNV_PTR)(glUniform2ui64vNV_ARG_EXPAND);
void glUniform2uiEXT(glUniform2uiEXT_ARG_EXPAND);
typedef void (*glUniform2uiEXT_PTR)(glUniform2uiEXT_ARG_EXPAND);
void glUniform2uiv(glUniform2uiv_ARG_EXPAND);
typedef void (*glUniform2uiv_PTR)(glUniform2uiv_ARG_EXPAND);
void glUniform2uivEXT(glUniform2uivEXT_ARG_EXPAND);
typedef void (*glUniform2uivEXT_PTR)(glUniform2uivEXT_ARG_EXPAND);
void glUniform3d(glUniform3d_ARG_EXPAND);
typedef void (*glUniform3d_PTR)(glUniform3d_ARG_EXPAND);
void glUniform3dv(glUniform3dv_ARG_EXPAND);
typedef void (*glUniform3dv_PTR)(glUniform3dv_ARG_EXPAND);
void glUniform3f(glUniform3f_ARG_EXPAND);
typedef void (*glUniform3f_PTR)(glUniform3f_ARG_EXPAND);
void glUniform3fARB(glUniform3fARB_ARG_EXPAND);
typedef void (*glUniform3fARB_PTR)(glUniform3fARB_ARG_EXPAND);
void glUniform3fv(glUniform3fv_ARG_EXPAND);
typedef void (*glUniform3fv_PTR)(glUniform3fv_ARG_EXPAND);
void glUniform3fvARB(glUniform3fvARB_ARG_EXPAND);
typedef void (*glUniform3fvARB_PTR)(glUniform3fvARB_ARG_EXPAND);
void glUniform3i(glUniform3i_ARG_EXPAND);
typedef void (*glUniform3i_PTR)(glUniform3i_ARG_EXPAND);
void glUniform3i64NV(glUniform3i64NV_ARG_EXPAND);
typedef void (*glUniform3i64NV_PTR)(glUniform3i64NV_ARG_EXPAND);
void glUniform3i64vNV(glUniform3i64vNV_ARG_EXPAND);
typedef void (*glUniform3i64vNV_PTR)(glUniform3i64vNV_ARG_EXPAND);
void glUniform3iARB(glUniform3iARB_ARG_EXPAND);
typedef void (*glUniform3iARB_PTR)(glUniform3iARB_ARG_EXPAND);
void glUniform3iv(glUniform3iv_ARG_EXPAND);
typedef void (*glUniform3iv_PTR)(glUniform3iv_ARG_EXPAND);
void glUniform3ivARB(glUniform3ivARB_ARG_EXPAND);
typedef void (*glUniform3ivARB_PTR)(glUniform3ivARB_ARG_EXPAND);
void glUniform3ui(glUniform3ui_ARG_EXPAND);
typedef void (*glUniform3ui_PTR)(glUniform3ui_ARG_EXPAND);
void glUniform3ui64NV(glUniform3ui64NV_ARG_EXPAND);
typedef void (*glUniform3ui64NV_PTR)(glUniform3ui64NV_ARG_EXPAND);
void glUniform3ui64vNV(glUniform3ui64vNV_ARG_EXPAND);
typedef void (*glUniform3ui64vNV_PTR)(glUniform3ui64vNV_ARG_EXPAND);
void glUniform3uiEXT(glUniform3uiEXT_ARG_EXPAND);
typedef void (*glUniform3uiEXT_PTR)(glUniform3uiEXT_ARG_EXPAND);
void glUniform3uiv(glUniform3uiv_ARG_EXPAND);
typedef void (*glUniform3uiv_PTR)(glUniform3uiv_ARG_EXPAND);
void glUniform3uivEXT(glUniform3uivEXT_ARG_EXPAND);
typedef void (*glUniform3uivEXT_PTR)(glUniform3uivEXT_ARG_EXPAND);
void glUniform4d(glUniform4d_ARG_EXPAND);
typedef void (*glUniform4d_PTR)(glUniform4d_ARG_EXPAND);
void glUniform4dv(glUniform4dv_ARG_EXPAND);
typedef void (*glUniform4dv_PTR)(glUniform4dv_ARG_EXPAND);
void glUniform4f(glUniform4f_ARG_EXPAND);
typedef void (*glUniform4f_PTR)(glUniform4f_ARG_EXPAND);
void glUniform4fARB(glUniform4fARB_ARG_EXPAND);
typedef void (*glUniform4fARB_PTR)(glUniform4fARB_ARG_EXPAND);
void glUniform4fv(glUniform4fv_ARG_EXPAND);
typedef void (*glUniform4fv_PTR)(glUniform4fv_ARG_EXPAND);
void glUniform4fvARB(glUniform4fvARB_ARG_EXPAND);
typedef void (*glUniform4fvARB_PTR)(glUniform4fvARB_ARG_EXPAND);
void glUniform4i(glUniform4i_ARG_EXPAND);
typedef void (*glUniform4i_PTR)(glUniform4i_ARG_EXPAND);
void glUniform4i64NV(glUniform4i64NV_ARG_EXPAND);
typedef void (*glUniform4i64NV_PTR)(glUniform4i64NV_ARG_EXPAND);
void glUniform4i64vNV(glUniform4i64vNV_ARG_EXPAND);
typedef void (*glUniform4i64vNV_PTR)(glUniform4i64vNV_ARG_EXPAND);
void glUniform4iARB(glUniform4iARB_ARG_EXPAND);
typedef void (*glUniform4iARB_PTR)(glUniform4iARB_ARG_EXPAND);
void glUniform4iv(glUniform4iv_ARG_EXPAND);
typedef void (*glUniform4iv_PTR)(glUniform4iv_ARG_EXPAND);
void glUniform4ivARB(glUniform4ivARB_ARG_EXPAND);
typedef void (*glUniform4ivARB_PTR)(glUniform4ivARB_ARG_EXPAND);
void glUniform4ui(glUniform4ui_ARG_EXPAND);
typedef void (*glUniform4ui_PTR)(glUniform4ui_ARG_EXPAND);
void glUniform4ui64NV(glUniform4ui64NV_ARG_EXPAND);
typedef void (*glUniform4ui64NV_PTR)(glUniform4ui64NV_ARG_EXPAND);
void glUniform4ui64vNV(glUniform4ui64vNV_ARG_EXPAND);
typedef void (*glUniform4ui64vNV_PTR)(glUniform4ui64vNV_ARG_EXPAND);
void glUniform4uiEXT(glUniform4uiEXT_ARG_EXPAND);
typedef void (*glUniform4uiEXT_PTR)(glUniform4uiEXT_ARG_EXPAND);
void glUniform4uiv(glUniform4uiv_ARG_EXPAND);
typedef void (*glUniform4uiv_PTR)(glUniform4uiv_ARG_EXPAND);
void glUniform4uivEXT(glUniform4uivEXT_ARG_EXPAND);
typedef void (*glUniform4uivEXT_PTR)(glUniform4uivEXT_ARG_EXPAND);
void glUniformBlockBinding(glUniformBlockBinding_ARG_EXPAND);
typedef void (*glUniformBlockBinding_PTR)(glUniformBlockBinding_ARG_EXPAND);
void glUniformBufferEXT(glUniformBufferEXT_ARG_EXPAND);
typedef void (*glUniformBufferEXT_PTR)(glUniformBufferEXT_ARG_EXPAND);
void glUniformHandleui64NV(glUniformHandleui64NV_ARG_EXPAND);
typedef void (*glUniformHandleui64NV_PTR)(glUniformHandleui64NV_ARG_EXPAND);
void glUniformHandleui64vNV(glUniformHandleui64vNV_ARG_EXPAND);
typedef void (*glUniformHandleui64vNV_PTR)(glUniformHandleui64vNV_ARG_EXPAND);
void glUniformMatrix2dv(glUniformMatrix2dv_ARG_EXPAND);
typedef void (*glUniformMatrix2dv_PTR)(glUniformMatrix2dv_ARG_EXPAND);
void glUniformMatrix2fv(glUniformMatrix2fv_ARG_EXPAND);
typedef void (*glUniformMatrix2fv_PTR)(glUniformMatrix2fv_ARG_EXPAND);
void glUniformMatrix2fvARB(glUniformMatrix2fvARB_ARG_EXPAND);
typedef void (*glUniformMatrix2fvARB_PTR)(glUniformMatrix2fvARB_ARG_EXPAND);
void glUniformMatrix2x3dv(glUniformMatrix2x3dv_ARG_EXPAND);
typedef void (*glUniformMatrix2x3dv_PTR)(glUniformMatrix2x3dv_ARG_EXPAND);
void glUniformMatrix2x3fv(glUniformMatrix2x3fv_ARG_EXPAND);
typedef void (*glUniformMatrix2x3fv_PTR)(glUniformMatrix2x3fv_ARG_EXPAND);
void glUniformMatrix2x4dv(glUniformMatrix2x4dv_ARG_EXPAND);
typedef void (*glUniformMatrix2x4dv_PTR)(glUniformMatrix2x4dv_ARG_EXPAND);
void glUniformMatrix2x4fv(glUniformMatrix2x4fv_ARG_EXPAND);
typedef void (*glUniformMatrix2x4fv_PTR)(glUniformMatrix2x4fv_ARG_EXPAND);
void glUniformMatrix3dv(glUniformMatrix3dv_ARG_EXPAND);
typedef void (*glUniformMatrix3dv_PTR)(glUniformMatrix3dv_ARG_EXPAND);
void glUniformMatrix3fv(glUniformMatrix3fv_ARG_EXPAND);
typedef void (*glUniformMatrix3fv_PTR)(glUniformMatrix3fv_ARG_EXPAND);
void glUniformMatrix3fvARB(glUniformMatrix3fvARB_ARG_EXPAND);
typedef void (*glUniformMatrix3fvARB_PTR)(glUniformMatrix3fvARB_ARG_EXPAND);
void glUniformMatrix3x2dv(glUniformMatrix3x2dv_ARG_EXPAND);
typedef void (*glUniformMatrix3x2dv_PTR)(glUniformMatrix3x2dv_ARG_EXPAND);
void glUniformMatrix3x2fv(glUniformMatrix3x2fv_ARG_EXPAND);
typedef void (*glUniformMatrix3x2fv_PTR)(glUniformMatrix3x2fv_ARG_EXPAND);
void glUniformMatrix3x4dv(glUniformMatrix3x4dv_ARG_EXPAND);
typedef void (*glUniformMatrix3x4dv_PTR)(glUniformMatrix3x4dv_ARG_EXPAND);
void glUniformMatrix3x4fv(glUniformMatrix3x4fv_ARG_EXPAND);
typedef void (*glUniformMatrix3x4fv_PTR)(glUniformMatrix3x4fv_ARG_EXPAND);
void glUniformMatrix4dv(glUniformMatrix4dv_ARG_EXPAND);
typedef void (*glUniformMatrix4dv_PTR)(glUniformMatrix4dv_ARG_EXPAND);
void glUniformMatrix4fv(glUniformMatrix4fv_ARG_EXPAND);
typedef void (*glUniformMatrix4fv_PTR)(glUniformMatrix4fv_ARG_EXPAND);
void glUniformMatrix4fvARB(glUniformMatrix4fvARB_ARG_EXPAND);
typedef void (*glUniformMatrix4fvARB_PTR)(glUniformMatrix4fvARB_ARG_EXPAND);
void glUniformMatrix4x2dv(glUniformMatrix4x2dv_ARG_EXPAND);
typedef void (*glUniformMatrix4x2dv_PTR)(glUniformMatrix4x2dv_ARG_EXPAND);
void glUniformMatrix4x2fv(glUniformMatrix4x2fv_ARG_EXPAND);
typedef void (*glUniformMatrix4x2fv_PTR)(glUniformMatrix4x2fv_ARG_EXPAND);
void glUniformMatrix4x3dv(glUniformMatrix4x3dv_ARG_EXPAND);
typedef void (*glUniformMatrix4x3dv_PTR)(glUniformMatrix4x3dv_ARG_EXPAND);
void glUniformMatrix4x3fv(glUniformMatrix4x3fv_ARG_EXPAND);
typedef void (*glUniformMatrix4x3fv_PTR)(glUniformMatrix4x3fv_ARG_EXPAND);
void glUniformSubroutinesuiv(glUniformSubroutinesuiv_ARG_EXPAND);
typedef void (*glUniformSubroutinesuiv_PTR)(glUniformSubroutinesuiv_ARG_EXPAND);
void glUniformui64NV(glUniformui64NV_ARG_EXPAND);
typedef void (*glUniformui64NV_PTR)(glUniformui64NV_ARG_EXPAND);
void glUniformui64vNV(glUniformui64vNV_ARG_EXPAND);
typedef void (*glUniformui64vNV_PTR)(glUniformui64vNV_ARG_EXPAND);
void glUnlockArraysEXT(glUnlockArraysEXT_ARG_EXPAND);
typedef void (*glUnlockArraysEXT_PTR)(glUnlockArraysEXT_ARG_EXPAND);
GLboolean glUnmapBuffer(glUnmapBuffer_ARG_EXPAND);
typedef GLboolean (*glUnmapBuffer_PTR)(glUnmapBuffer_ARG_EXPAND);
GLboolean glUnmapBufferARB(glUnmapBufferARB_ARG_EXPAND);
typedef GLboolean (*glUnmapBufferARB_PTR)(glUnmapBufferARB_ARG_EXPAND);
GLboolean glUnmapNamedBufferEXT(glUnmapNamedBufferEXT_ARG_EXPAND);
typedef GLboolean (*glUnmapNamedBufferEXT_PTR)(glUnmapNamedBufferEXT_ARG_EXPAND);
void glUnmapObjectBufferATI(glUnmapObjectBufferATI_ARG_EXPAND);
typedef void (*glUnmapObjectBufferATI_PTR)(glUnmapObjectBufferATI_ARG_EXPAND);
void glUnmapTexture2DINTEL(glUnmapTexture2DINTEL_ARG_EXPAND);
typedef void (*glUnmapTexture2DINTEL_PTR)(glUnmapTexture2DINTEL_ARG_EXPAND);
void glUpdateObjectBufferATI(glUpdateObjectBufferATI_ARG_EXPAND);
typedef void (*glUpdateObjectBufferATI_PTR)(glUpdateObjectBufferATI_ARG_EXPAND);
void glUseProgram(glUseProgram_ARG_EXPAND);
typedef void (*glUseProgram_PTR)(glUseProgram_ARG_EXPAND);
void glUseProgramObjectARB(glUseProgramObjectARB_ARG_EXPAND);
typedef void (*glUseProgramObjectARB_PTR)(glUseProgramObjectARB_ARG_EXPAND);
void glUseProgramStages(glUseProgramStages_ARG_EXPAND);
typedef void (*glUseProgramStages_PTR)(glUseProgramStages_ARG_EXPAND);
void glUseShaderProgramEXT(glUseShaderProgramEXT_ARG_EXPAND);
typedef void (*glUseShaderProgramEXT_PTR)(glUseShaderProgramEXT_ARG_EXPAND);
void glVDPAUFiniNV(glVDPAUFiniNV_ARG_EXPAND);
typedef void (*glVDPAUFiniNV_PTR)(glVDPAUFiniNV_ARG_EXPAND);
void glVDPAUGetSurfaceivNV(glVDPAUGetSurfaceivNV_ARG_EXPAND);
typedef void (*glVDPAUGetSurfaceivNV_PTR)(glVDPAUGetSurfaceivNV_ARG_EXPAND);
void glVDPAUInitNV(glVDPAUInitNV_ARG_EXPAND);
typedef void (*glVDPAUInitNV_PTR)(glVDPAUInitNV_ARG_EXPAND);
void glVDPAUIsSurfaceNV(glVDPAUIsSurfaceNV_ARG_EXPAND);
typedef void (*glVDPAUIsSurfaceNV_PTR)(glVDPAUIsSurfaceNV_ARG_EXPAND);
void glVDPAUMapSurfacesNV(glVDPAUMapSurfacesNV_ARG_EXPAND);
typedef void (*glVDPAUMapSurfacesNV_PTR)(glVDPAUMapSurfacesNV_ARG_EXPAND);
GLvdpauSurfaceNV glVDPAURegisterOutputSurfaceNV(glVDPAURegisterOutputSurfaceNV_ARG_EXPAND);
typedef GLvdpauSurfaceNV (*glVDPAURegisterOutputSurfaceNV_PTR)(glVDPAURegisterOutputSurfaceNV_ARG_EXPAND);
GLvdpauSurfaceNV glVDPAURegisterVideoSurfaceNV(glVDPAURegisterVideoSurfaceNV_ARG_EXPAND);
typedef GLvdpauSurfaceNV (*glVDPAURegisterVideoSurfaceNV_PTR)(glVDPAURegisterVideoSurfaceNV_ARG_EXPAND);
void glVDPAUSurfaceAccessNV(glVDPAUSurfaceAccessNV_ARG_EXPAND);
typedef void (*glVDPAUSurfaceAccessNV_PTR)(glVDPAUSurfaceAccessNV_ARG_EXPAND);
void glVDPAUUnmapSurfacesNV(glVDPAUUnmapSurfacesNV_ARG_EXPAND);
typedef void (*glVDPAUUnmapSurfacesNV_PTR)(glVDPAUUnmapSurfacesNV_ARG_EXPAND);
void glVDPAUUnregisterSurfaceNV(glVDPAUUnregisterSurfaceNV_ARG_EXPAND);
typedef void (*glVDPAUUnregisterSurfaceNV_PTR)(glVDPAUUnregisterSurfaceNV_ARG_EXPAND);
void glValidateProgram(glValidateProgram_ARG_EXPAND);
typedef void (*glValidateProgram_PTR)(glValidateProgram_ARG_EXPAND);
void glValidateProgramARB(glValidateProgramARB_ARG_EXPAND);
typedef void (*glValidateProgramARB_PTR)(glValidateProgramARB_ARG_EXPAND);
void glValidateProgramPipeline(glValidateProgramPipeline_ARG_EXPAND);
typedef void (*glValidateProgramPipeline_PTR)(glValidateProgramPipeline_ARG_EXPAND);
void glVariantArrayObjectATI(glVariantArrayObjectATI_ARG_EXPAND);
typedef void (*glVariantArrayObjectATI_PTR)(glVariantArrayObjectATI_ARG_EXPAND);
void glVariantPointerEXT(glVariantPointerEXT_ARG_EXPAND);
typedef void (*glVariantPointerEXT_PTR)(glVariantPointerEXT_ARG_EXPAND);
void glVariantbvEXT(glVariantbvEXT_ARG_EXPAND);
typedef void (*glVariantbvEXT_PTR)(glVariantbvEXT_ARG_EXPAND);
void glVariantdvEXT(glVariantdvEXT_ARG_EXPAND);
typedef void (*glVariantdvEXT_PTR)(glVariantdvEXT_ARG_EXPAND);
void glVariantfvEXT(glVariantfvEXT_ARG_EXPAND);
typedef void (*glVariantfvEXT_PTR)(glVariantfvEXT_ARG_EXPAND);
void glVariantivEXT(glVariantivEXT_ARG_EXPAND);
typedef void (*glVariantivEXT_PTR)(glVariantivEXT_ARG_EXPAND);
void glVariantsvEXT(glVariantsvEXT_ARG_EXPAND);
typedef void (*glVariantsvEXT_PTR)(glVariantsvEXT_ARG_EXPAND);
void glVariantubvEXT(glVariantubvEXT_ARG_EXPAND);
typedef void (*glVariantubvEXT_PTR)(glVariantubvEXT_ARG_EXPAND);
void glVariantuivEXT(glVariantuivEXT_ARG_EXPAND);
typedef void (*glVariantuivEXT_PTR)(glVariantuivEXT_ARG_EXPAND);
void glVariantusvEXT(glVariantusvEXT_ARG_EXPAND);
typedef void (*glVariantusvEXT_PTR)(glVariantusvEXT_ARG_EXPAND);
void glVertex2bOES(glVertex2bOES_ARG_EXPAND);
typedef void (*glVertex2bOES_PTR)(glVertex2bOES_ARG_EXPAND);
void glVertex2bvOES(glVertex2bvOES_ARG_EXPAND);
typedef void (*glVertex2bvOES_PTR)(glVertex2bvOES_ARG_EXPAND);
void glVertex2d(glVertex2d_ARG_EXPAND);
typedef void (*glVertex2d_PTR)(glVertex2d_ARG_EXPAND);
void glVertex2dv(glVertex2dv_ARG_EXPAND);
typedef void (*glVertex2dv_PTR)(glVertex2dv_ARG_EXPAND);
void glVertex2f(glVertex2f_ARG_EXPAND);
typedef void (*glVertex2f_PTR)(glVertex2f_ARG_EXPAND);
void glVertex2fv(glVertex2fv_ARG_EXPAND);
typedef void (*glVertex2fv_PTR)(glVertex2fv_ARG_EXPAND);
void glVertex2hNV(glVertex2hNV_ARG_EXPAND);
typedef void (*glVertex2hNV_PTR)(glVertex2hNV_ARG_EXPAND);
void glVertex2hvNV(glVertex2hvNV_ARG_EXPAND);
typedef void (*glVertex2hvNV_PTR)(glVertex2hvNV_ARG_EXPAND);
void glVertex2i(glVertex2i_ARG_EXPAND);
typedef void (*glVertex2i_PTR)(glVertex2i_ARG_EXPAND);
void glVertex2iv(glVertex2iv_ARG_EXPAND);
typedef void (*glVertex2iv_PTR)(glVertex2iv_ARG_EXPAND);
void glVertex2s(glVertex2s_ARG_EXPAND);
typedef void (*glVertex2s_PTR)(glVertex2s_ARG_EXPAND);
void glVertex2sv(glVertex2sv_ARG_EXPAND);
typedef void (*glVertex2sv_PTR)(glVertex2sv_ARG_EXPAND);
void glVertex2xOES(glVertex2xOES_ARG_EXPAND);
typedef void (*glVertex2xOES_PTR)(glVertex2xOES_ARG_EXPAND);
void glVertex2xvOES(glVertex2xvOES_ARG_EXPAND);
typedef void (*glVertex2xvOES_PTR)(glVertex2xvOES_ARG_EXPAND);
void glVertex3bOES(glVertex3bOES_ARG_EXPAND);
typedef void (*glVertex3bOES_PTR)(glVertex3bOES_ARG_EXPAND);
void glVertex3bvOES(glVertex3bvOES_ARG_EXPAND);
typedef void (*glVertex3bvOES_PTR)(glVertex3bvOES_ARG_EXPAND);
void glVertex3d(glVertex3d_ARG_EXPAND);
typedef void (*glVertex3d_PTR)(glVertex3d_ARG_EXPAND);
void glVertex3dv(glVertex3dv_ARG_EXPAND);
typedef void (*glVertex3dv_PTR)(glVertex3dv_ARG_EXPAND);
void glVertex3f(glVertex3f_ARG_EXPAND);
typedef void (*glVertex3f_PTR)(glVertex3f_ARG_EXPAND);
void glVertex3fv(glVertex3fv_ARG_EXPAND);
typedef void (*glVertex3fv_PTR)(glVertex3fv_ARG_EXPAND);
void glVertex3hNV(glVertex3hNV_ARG_EXPAND);
typedef void (*glVertex3hNV_PTR)(glVertex3hNV_ARG_EXPAND);
void glVertex3hvNV(glVertex3hvNV_ARG_EXPAND);
typedef void (*glVertex3hvNV_PTR)(glVertex3hvNV_ARG_EXPAND);
void glVertex3i(glVertex3i_ARG_EXPAND);
typedef void (*glVertex3i_PTR)(glVertex3i_ARG_EXPAND);
void glVertex3iv(glVertex3iv_ARG_EXPAND);
typedef void (*glVertex3iv_PTR)(glVertex3iv_ARG_EXPAND);
void glVertex3s(glVertex3s_ARG_EXPAND);
typedef void (*glVertex3s_PTR)(glVertex3s_ARG_EXPAND);
void glVertex3sv(glVertex3sv_ARG_EXPAND);
typedef void (*glVertex3sv_PTR)(glVertex3sv_ARG_EXPAND);
void glVertex3xOES(glVertex3xOES_ARG_EXPAND);
typedef void (*glVertex3xOES_PTR)(glVertex3xOES_ARG_EXPAND);
void glVertex3xvOES(glVertex3xvOES_ARG_EXPAND);
typedef void (*glVertex3xvOES_PTR)(glVertex3xvOES_ARG_EXPAND);
void glVertex4bOES(glVertex4bOES_ARG_EXPAND);
typedef void (*glVertex4bOES_PTR)(glVertex4bOES_ARG_EXPAND);
void glVertex4bvOES(glVertex4bvOES_ARG_EXPAND);
typedef void (*glVertex4bvOES_PTR)(glVertex4bvOES_ARG_EXPAND);
void glVertex4d(glVertex4d_ARG_EXPAND);
typedef void (*glVertex4d_PTR)(glVertex4d_ARG_EXPAND);
void glVertex4dv(glVertex4dv_ARG_EXPAND);
typedef void (*glVertex4dv_PTR)(glVertex4dv_ARG_EXPAND);
void glVertex4f(glVertex4f_ARG_EXPAND);
typedef void (*glVertex4f_PTR)(glVertex4f_ARG_EXPAND);
void glVertex4fv(glVertex4fv_ARG_EXPAND);
typedef void (*glVertex4fv_PTR)(glVertex4fv_ARG_EXPAND);
void glVertex4hNV(glVertex4hNV_ARG_EXPAND);
typedef void (*glVertex4hNV_PTR)(glVertex4hNV_ARG_EXPAND);
void glVertex4hvNV(glVertex4hvNV_ARG_EXPAND);
typedef void (*glVertex4hvNV_PTR)(glVertex4hvNV_ARG_EXPAND);
void glVertex4i(glVertex4i_ARG_EXPAND);
typedef void (*glVertex4i_PTR)(glVertex4i_ARG_EXPAND);
void glVertex4iv(glVertex4iv_ARG_EXPAND);
typedef void (*glVertex4iv_PTR)(glVertex4iv_ARG_EXPAND);
void glVertex4s(glVertex4s_ARG_EXPAND);
typedef void (*glVertex4s_PTR)(glVertex4s_ARG_EXPAND);
void glVertex4sv(glVertex4sv_ARG_EXPAND);
typedef void (*glVertex4sv_PTR)(glVertex4sv_ARG_EXPAND);
void glVertex4xOES(glVertex4xOES_ARG_EXPAND);
typedef void (*glVertex4xOES_PTR)(glVertex4xOES_ARG_EXPAND);
void glVertex4xvOES(glVertex4xvOES_ARG_EXPAND);
typedef void (*glVertex4xvOES_PTR)(glVertex4xvOES_ARG_EXPAND);
void glVertexArrayBindVertexBufferEXT(glVertexArrayBindVertexBufferEXT_ARG_EXPAND);
typedef void (*glVertexArrayBindVertexBufferEXT_PTR)(glVertexArrayBindVertexBufferEXT_ARG_EXPAND);
void glVertexArrayColorOffsetEXT(glVertexArrayColorOffsetEXT_ARG_EXPAND);
typedef void (*glVertexArrayColorOffsetEXT_PTR)(glVertexArrayColorOffsetEXT_ARG_EXPAND);
void glVertexArrayEdgeFlagOffsetEXT(glVertexArrayEdgeFlagOffsetEXT_ARG_EXPAND);
typedef void (*glVertexArrayEdgeFlagOffsetEXT_PTR)(glVertexArrayEdgeFlagOffsetEXT_ARG_EXPAND);
void glVertexArrayFogCoordOffsetEXT(glVertexArrayFogCoordOffsetEXT_ARG_EXPAND);
typedef void (*glVertexArrayFogCoordOffsetEXT_PTR)(glVertexArrayFogCoordOffsetEXT_ARG_EXPAND);
void glVertexArrayIndexOffsetEXT(glVertexArrayIndexOffsetEXT_ARG_EXPAND);
typedef void (*glVertexArrayIndexOffsetEXT_PTR)(glVertexArrayIndexOffsetEXT_ARG_EXPAND);
void glVertexArrayMultiTexCoordOffsetEXT(glVertexArrayMultiTexCoordOffsetEXT_ARG_EXPAND);
typedef void (*glVertexArrayMultiTexCoordOffsetEXT_PTR)(glVertexArrayMultiTexCoordOffsetEXT_ARG_EXPAND);
void glVertexArrayNormalOffsetEXT(glVertexArrayNormalOffsetEXT_ARG_EXPAND);
typedef void (*glVertexArrayNormalOffsetEXT_PTR)(glVertexArrayNormalOffsetEXT_ARG_EXPAND);
void glVertexArrayParameteriAPPLE(glVertexArrayParameteriAPPLE_ARG_EXPAND);
typedef void (*glVertexArrayParameteriAPPLE_PTR)(glVertexArrayParameteriAPPLE_ARG_EXPAND);
void glVertexArrayRangeAPPLE(glVertexArrayRangeAPPLE_ARG_EXPAND);
typedef void (*glVertexArrayRangeAPPLE_PTR)(glVertexArrayRangeAPPLE_ARG_EXPAND);
void glVertexArrayRangeNV(glVertexArrayRangeNV_ARG_EXPAND);
typedef void (*glVertexArrayRangeNV_PTR)(glVertexArrayRangeNV_ARG_EXPAND);
void glVertexArraySecondaryColorOffsetEXT(glVertexArraySecondaryColorOffsetEXT_ARG_EXPAND);
typedef void (*glVertexArraySecondaryColorOffsetEXT_PTR)(glVertexArraySecondaryColorOffsetEXT_ARG_EXPAND);
void glVertexArrayTexCoordOffsetEXT(glVertexArrayTexCoordOffsetEXT_ARG_EXPAND);
typedef void (*glVertexArrayTexCoordOffsetEXT_PTR)(glVertexArrayTexCoordOffsetEXT_ARG_EXPAND);
void glVertexArrayVertexAttribBindingEXT(glVertexArrayVertexAttribBindingEXT_ARG_EXPAND);
typedef void (*glVertexArrayVertexAttribBindingEXT_PTR)(glVertexArrayVertexAttribBindingEXT_ARG_EXPAND);
void glVertexArrayVertexAttribFormatEXT(glVertexArrayVertexAttribFormatEXT_ARG_EXPAND);
typedef void (*glVertexArrayVertexAttribFormatEXT_PTR)(glVertexArrayVertexAttribFormatEXT_ARG_EXPAND);
void glVertexArrayVertexAttribIFormatEXT(glVertexArrayVertexAttribIFormatEXT_ARG_EXPAND);
typedef void (*glVertexArrayVertexAttribIFormatEXT_PTR)(glVertexArrayVertexAttribIFormatEXT_ARG_EXPAND);
void glVertexArrayVertexAttribIOffsetEXT(glVertexArrayVertexAttribIOffsetEXT_ARG_EXPAND);
typedef void (*glVertexArrayVertexAttribIOffsetEXT_PTR)(glVertexArrayVertexAttribIOffsetEXT_ARG_EXPAND);
void glVertexArrayVertexAttribLFormatEXT(glVertexArrayVertexAttribLFormatEXT_ARG_EXPAND);
typedef void (*glVertexArrayVertexAttribLFormatEXT_PTR)(glVertexArrayVertexAttribLFormatEXT_ARG_EXPAND);
void glVertexArrayVertexAttribLOffsetEXT(glVertexArrayVertexAttribLOffsetEXT_ARG_EXPAND);
typedef void (*glVertexArrayVertexAttribLOffsetEXT_PTR)(glVertexArrayVertexAttribLOffsetEXT_ARG_EXPAND);
void glVertexArrayVertexAttribOffsetEXT(glVertexArrayVertexAttribOffsetEXT_ARG_EXPAND);
typedef void (*glVertexArrayVertexAttribOffsetEXT_PTR)(glVertexArrayVertexAttribOffsetEXT_ARG_EXPAND);
void glVertexArrayVertexBindingDivisorEXT(glVertexArrayVertexBindingDivisorEXT_ARG_EXPAND);
typedef void (*glVertexArrayVertexBindingDivisorEXT_PTR)(glVertexArrayVertexBindingDivisorEXT_ARG_EXPAND);
void glVertexArrayVertexOffsetEXT(glVertexArrayVertexOffsetEXT_ARG_EXPAND);
typedef void (*glVertexArrayVertexOffsetEXT_PTR)(glVertexArrayVertexOffsetEXT_ARG_EXPAND);
void glVertexAttrib1d(glVertexAttrib1d_ARG_EXPAND);
typedef void (*glVertexAttrib1d_PTR)(glVertexAttrib1d_ARG_EXPAND);
void glVertexAttrib1dARB(glVertexAttrib1dARB_ARG_EXPAND);
typedef void (*glVertexAttrib1dARB_PTR)(glVertexAttrib1dARB_ARG_EXPAND);
void glVertexAttrib1dNV(glVertexAttrib1dNV_ARG_EXPAND);
typedef void (*glVertexAttrib1dNV_PTR)(glVertexAttrib1dNV_ARG_EXPAND);
void glVertexAttrib1dv(glVertexAttrib1dv_ARG_EXPAND);
typedef void (*glVertexAttrib1dv_PTR)(glVertexAttrib1dv_ARG_EXPAND);
void glVertexAttrib1dvARB(glVertexAttrib1dvARB_ARG_EXPAND);
typedef void (*glVertexAttrib1dvARB_PTR)(glVertexAttrib1dvARB_ARG_EXPAND);
void glVertexAttrib1dvNV(glVertexAttrib1dvNV_ARG_EXPAND);
typedef void (*glVertexAttrib1dvNV_PTR)(glVertexAttrib1dvNV_ARG_EXPAND);
void glVertexAttrib1f(glVertexAttrib1f_ARG_EXPAND);
typedef void (*glVertexAttrib1f_PTR)(glVertexAttrib1f_ARG_EXPAND);
void glVertexAttrib1fARB(glVertexAttrib1fARB_ARG_EXPAND);
typedef void (*glVertexAttrib1fARB_PTR)(glVertexAttrib1fARB_ARG_EXPAND);
void glVertexAttrib1fNV(glVertexAttrib1fNV_ARG_EXPAND);
typedef void (*glVertexAttrib1fNV_PTR)(glVertexAttrib1fNV_ARG_EXPAND);
void glVertexAttrib1fv(glVertexAttrib1fv_ARG_EXPAND);
typedef void (*glVertexAttrib1fv_PTR)(glVertexAttrib1fv_ARG_EXPAND);
void glVertexAttrib1fvARB(glVertexAttrib1fvARB_ARG_EXPAND);
typedef void (*glVertexAttrib1fvARB_PTR)(glVertexAttrib1fvARB_ARG_EXPAND);
void glVertexAttrib1fvNV(glVertexAttrib1fvNV_ARG_EXPAND);
typedef void (*glVertexAttrib1fvNV_PTR)(glVertexAttrib1fvNV_ARG_EXPAND);
void glVertexAttrib1hNV(glVertexAttrib1hNV_ARG_EXPAND);
typedef void (*glVertexAttrib1hNV_PTR)(glVertexAttrib1hNV_ARG_EXPAND);
void glVertexAttrib1hvNV(glVertexAttrib1hvNV_ARG_EXPAND);
typedef void (*glVertexAttrib1hvNV_PTR)(glVertexAttrib1hvNV_ARG_EXPAND);
void glVertexAttrib1s(glVertexAttrib1s_ARG_EXPAND);
typedef void (*glVertexAttrib1s_PTR)(glVertexAttrib1s_ARG_EXPAND);
void glVertexAttrib1sARB(glVertexAttrib1sARB_ARG_EXPAND);
typedef void (*glVertexAttrib1sARB_PTR)(glVertexAttrib1sARB_ARG_EXPAND);
void glVertexAttrib1sNV(glVertexAttrib1sNV_ARG_EXPAND);
typedef void (*glVertexAttrib1sNV_PTR)(glVertexAttrib1sNV_ARG_EXPAND);
void glVertexAttrib1sv(glVertexAttrib1sv_ARG_EXPAND);
typedef void (*glVertexAttrib1sv_PTR)(glVertexAttrib1sv_ARG_EXPAND);
void glVertexAttrib1svARB(glVertexAttrib1svARB_ARG_EXPAND);
typedef void (*glVertexAttrib1svARB_PTR)(glVertexAttrib1svARB_ARG_EXPAND);
void glVertexAttrib1svNV(glVertexAttrib1svNV_ARG_EXPAND);
typedef void (*glVertexAttrib1svNV_PTR)(glVertexAttrib1svNV_ARG_EXPAND);
void glVertexAttrib2d(glVertexAttrib2d_ARG_EXPAND);
typedef void (*glVertexAttrib2d_PTR)(glVertexAttrib2d_ARG_EXPAND);
void glVertexAttrib2dARB(glVertexAttrib2dARB_ARG_EXPAND);
typedef void (*glVertexAttrib2dARB_PTR)(glVertexAttrib2dARB_ARG_EXPAND);
void glVertexAttrib2dNV(glVertexAttrib2dNV_ARG_EXPAND);
typedef void (*glVertexAttrib2dNV_PTR)(glVertexAttrib2dNV_ARG_EXPAND);
void glVertexAttrib2dv(glVertexAttrib2dv_ARG_EXPAND);
typedef void (*glVertexAttrib2dv_PTR)(glVertexAttrib2dv_ARG_EXPAND);
void glVertexAttrib2dvARB(glVertexAttrib2dvARB_ARG_EXPAND);
typedef void (*glVertexAttrib2dvARB_PTR)(glVertexAttrib2dvARB_ARG_EXPAND);
void glVertexAttrib2dvNV(glVertexAttrib2dvNV_ARG_EXPAND);
typedef void (*glVertexAttrib2dvNV_PTR)(glVertexAttrib2dvNV_ARG_EXPAND);
void glVertexAttrib2f(glVertexAttrib2f_ARG_EXPAND);
typedef void (*glVertexAttrib2f_PTR)(glVertexAttrib2f_ARG_EXPAND);
void glVertexAttrib2fARB(glVertexAttrib2fARB_ARG_EXPAND);
typedef void (*glVertexAttrib2fARB_PTR)(glVertexAttrib2fARB_ARG_EXPAND);
void glVertexAttrib2fNV(glVertexAttrib2fNV_ARG_EXPAND);
typedef void (*glVertexAttrib2fNV_PTR)(glVertexAttrib2fNV_ARG_EXPAND);
void glVertexAttrib2fv(glVertexAttrib2fv_ARG_EXPAND);
typedef void (*glVertexAttrib2fv_PTR)(glVertexAttrib2fv_ARG_EXPAND);
void glVertexAttrib2fvARB(glVertexAttrib2fvARB_ARG_EXPAND);
typedef void (*glVertexAttrib2fvARB_PTR)(glVertexAttrib2fvARB_ARG_EXPAND);
void glVertexAttrib2fvNV(glVertexAttrib2fvNV_ARG_EXPAND);
typedef void (*glVertexAttrib2fvNV_PTR)(glVertexAttrib2fvNV_ARG_EXPAND);
void glVertexAttrib2hNV(glVertexAttrib2hNV_ARG_EXPAND);
typedef void (*glVertexAttrib2hNV_PTR)(glVertexAttrib2hNV_ARG_EXPAND);
void glVertexAttrib2hvNV(glVertexAttrib2hvNV_ARG_EXPAND);
typedef void (*glVertexAttrib2hvNV_PTR)(glVertexAttrib2hvNV_ARG_EXPAND);
void glVertexAttrib2s(glVertexAttrib2s_ARG_EXPAND);
typedef void (*glVertexAttrib2s_PTR)(glVertexAttrib2s_ARG_EXPAND);
void glVertexAttrib2sARB(glVertexAttrib2sARB_ARG_EXPAND);
typedef void (*glVertexAttrib2sARB_PTR)(glVertexAttrib2sARB_ARG_EXPAND);
void glVertexAttrib2sNV(glVertexAttrib2sNV_ARG_EXPAND);
typedef void (*glVertexAttrib2sNV_PTR)(glVertexAttrib2sNV_ARG_EXPAND);
void glVertexAttrib2sv(glVertexAttrib2sv_ARG_EXPAND);
typedef void (*glVertexAttrib2sv_PTR)(glVertexAttrib2sv_ARG_EXPAND);
void glVertexAttrib2svARB(glVertexAttrib2svARB_ARG_EXPAND);
typedef void (*glVertexAttrib2svARB_PTR)(glVertexAttrib2svARB_ARG_EXPAND);
void glVertexAttrib2svNV(glVertexAttrib2svNV_ARG_EXPAND);
typedef void (*glVertexAttrib2svNV_PTR)(glVertexAttrib2svNV_ARG_EXPAND);
void glVertexAttrib3d(glVertexAttrib3d_ARG_EXPAND);
typedef void (*glVertexAttrib3d_PTR)(glVertexAttrib3d_ARG_EXPAND);
void glVertexAttrib3dARB(glVertexAttrib3dARB_ARG_EXPAND);
typedef void (*glVertexAttrib3dARB_PTR)(glVertexAttrib3dARB_ARG_EXPAND);
void glVertexAttrib3dNV(glVertexAttrib3dNV_ARG_EXPAND);
typedef void (*glVertexAttrib3dNV_PTR)(glVertexAttrib3dNV_ARG_EXPAND);
void glVertexAttrib3dv(glVertexAttrib3dv_ARG_EXPAND);
typedef void (*glVertexAttrib3dv_PTR)(glVertexAttrib3dv_ARG_EXPAND);
void glVertexAttrib3dvARB(glVertexAttrib3dvARB_ARG_EXPAND);
typedef void (*glVertexAttrib3dvARB_PTR)(glVertexAttrib3dvARB_ARG_EXPAND);
void glVertexAttrib3dvNV(glVertexAttrib3dvNV_ARG_EXPAND);
typedef void (*glVertexAttrib3dvNV_PTR)(glVertexAttrib3dvNV_ARG_EXPAND);
void glVertexAttrib3f(glVertexAttrib3f_ARG_EXPAND);
typedef void (*glVertexAttrib3f_PTR)(glVertexAttrib3f_ARG_EXPAND);
void glVertexAttrib3fARB(glVertexAttrib3fARB_ARG_EXPAND);
typedef void (*glVertexAttrib3fARB_PTR)(glVertexAttrib3fARB_ARG_EXPAND);
void glVertexAttrib3fNV(glVertexAttrib3fNV_ARG_EXPAND);
typedef void (*glVertexAttrib3fNV_PTR)(glVertexAttrib3fNV_ARG_EXPAND);
void glVertexAttrib3fv(glVertexAttrib3fv_ARG_EXPAND);
typedef void (*glVertexAttrib3fv_PTR)(glVertexAttrib3fv_ARG_EXPAND);
void glVertexAttrib3fvARB(glVertexAttrib3fvARB_ARG_EXPAND);
typedef void (*glVertexAttrib3fvARB_PTR)(glVertexAttrib3fvARB_ARG_EXPAND);
void glVertexAttrib3fvNV(glVertexAttrib3fvNV_ARG_EXPAND);
typedef void (*glVertexAttrib3fvNV_PTR)(glVertexAttrib3fvNV_ARG_EXPAND);
void glVertexAttrib3hNV(glVertexAttrib3hNV_ARG_EXPAND);
typedef void (*glVertexAttrib3hNV_PTR)(glVertexAttrib3hNV_ARG_EXPAND);
void glVertexAttrib3hvNV(glVertexAttrib3hvNV_ARG_EXPAND);
typedef void (*glVertexAttrib3hvNV_PTR)(glVertexAttrib3hvNV_ARG_EXPAND);
void glVertexAttrib3s(glVertexAttrib3s_ARG_EXPAND);
typedef void (*glVertexAttrib3s_PTR)(glVertexAttrib3s_ARG_EXPAND);
void glVertexAttrib3sARB(glVertexAttrib3sARB_ARG_EXPAND);
typedef void (*glVertexAttrib3sARB_PTR)(glVertexAttrib3sARB_ARG_EXPAND);
void glVertexAttrib3sNV(glVertexAttrib3sNV_ARG_EXPAND);
typedef void (*glVertexAttrib3sNV_PTR)(glVertexAttrib3sNV_ARG_EXPAND);
void glVertexAttrib3sv(glVertexAttrib3sv_ARG_EXPAND);
typedef void (*glVertexAttrib3sv_PTR)(glVertexAttrib3sv_ARG_EXPAND);
void glVertexAttrib3svARB(glVertexAttrib3svARB_ARG_EXPAND);
typedef void (*glVertexAttrib3svARB_PTR)(glVertexAttrib3svARB_ARG_EXPAND);
void glVertexAttrib3svNV(glVertexAttrib3svNV_ARG_EXPAND);
typedef void (*glVertexAttrib3svNV_PTR)(glVertexAttrib3svNV_ARG_EXPAND);
void glVertexAttrib4Nbv(glVertexAttrib4Nbv_ARG_EXPAND);
typedef void (*glVertexAttrib4Nbv_PTR)(glVertexAttrib4Nbv_ARG_EXPAND);
void glVertexAttrib4NbvARB(glVertexAttrib4NbvARB_ARG_EXPAND);
typedef void (*glVertexAttrib4NbvARB_PTR)(glVertexAttrib4NbvARB_ARG_EXPAND);
void glVertexAttrib4Niv(glVertexAttrib4Niv_ARG_EXPAND);
typedef void (*glVertexAttrib4Niv_PTR)(glVertexAttrib4Niv_ARG_EXPAND);
void glVertexAttrib4NivARB(glVertexAttrib4NivARB_ARG_EXPAND);
typedef void (*glVertexAttrib4NivARB_PTR)(glVertexAttrib4NivARB_ARG_EXPAND);
void glVertexAttrib4Nsv(glVertexAttrib4Nsv_ARG_EXPAND);
typedef void (*glVertexAttrib4Nsv_PTR)(glVertexAttrib4Nsv_ARG_EXPAND);
void glVertexAttrib4NsvARB(glVertexAttrib4NsvARB_ARG_EXPAND);
typedef void (*glVertexAttrib4NsvARB_PTR)(glVertexAttrib4NsvARB_ARG_EXPAND);
void glVertexAttrib4Nub(glVertexAttrib4Nub_ARG_EXPAND);
typedef void (*glVertexAttrib4Nub_PTR)(glVertexAttrib4Nub_ARG_EXPAND);
void glVertexAttrib4NubARB(glVertexAttrib4NubARB_ARG_EXPAND);
typedef void (*glVertexAttrib4NubARB_PTR)(glVertexAttrib4NubARB_ARG_EXPAND);
void glVertexAttrib4Nubv(glVertexAttrib4Nubv_ARG_EXPAND);
typedef void (*glVertexAttrib4Nubv_PTR)(glVertexAttrib4Nubv_ARG_EXPAND);
void glVertexAttrib4NubvARB(glVertexAttrib4NubvARB_ARG_EXPAND);
typedef void (*glVertexAttrib4NubvARB_PTR)(glVertexAttrib4NubvARB_ARG_EXPAND);
void glVertexAttrib4Nuiv(glVertexAttrib4Nuiv_ARG_EXPAND);
typedef void (*glVertexAttrib4Nuiv_PTR)(glVertexAttrib4Nuiv_ARG_EXPAND);
void glVertexAttrib4NuivARB(glVertexAttrib4NuivARB_ARG_EXPAND);
typedef void (*glVertexAttrib4NuivARB_PTR)(glVertexAttrib4NuivARB_ARG_EXPAND);
void glVertexAttrib4Nusv(glVertexAttrib4Nusv_ARG_EXPAND);
typedef void (*glVertexAttrib4Nusv_PTR)(glVertexAttrib4Nusv_ARG_EXPAND);
void glVertexAttrib4NusvARB(glVertexAttrib4NusvARB_ARG_EXPAND);
typedef void (*glVertexAttrib4NusvARB_PTR)(glVertexAttrib4NusvARB_ARG_EXPAND);
void glVertexAttrib4bv(glVertexAttrib4bv_ARG_EXPAND);
typedef void (*glVertexAttrib4bv_PTR)(glVertexAttrib4bv_ARG_EXPAND);
void glVertexAttrib4bvARB(glVertexAttrib4bvARB_ARG_EXPAND);
typedef void (*glVertexAttrib4bvARB_PTR)(glVertexAttrib4bvARB_ARG_EXPAND);
void glVertexAttrib4d(glVertexAttrib4d_ARG_EXPAND);
typedef void (*glVertexAttrib4d_PTR)(glVertexAttrib4d_ARG_EXPAND);
void glVertexAttrib4dARB(glVertexAttrib4dARB_ARG_EXPAND);
typedef void (*glVertexAttrib4dARB_PTR)(glVertexAttrib4dARB_ARG_EXPAND);
void glVertexAttrib4dNV(glVertexAttrib4dNV_ARG_EXPAND);
typedef void (*glVertexAttrib4dNV_PTR)(glVertexAttrib4dNV_ARG_EXPAND);
void glVertexAttrib4dv(glVertexAttrib4dv_ARG_EXPAND);
typedef void (*glVertexAttrib4dv_PTR)(glVertexAttrib4dv_ARG_EXPAND);
void glVertexAttrib4dvARB(glVertexAttrib4dvARB_ARG_EXPAND);
typedef void (*glVertexAttrib4dvARB_PTR)(glVertexAttrib4dvARB_ARG_EXPAND);
void glVertexAttrib4dvNV(glVertexAttrib4dvNV_ARG_EXPAND);
typedef void (*glVertexAttrib4dvNV_PTR)(glVertexAttrib4dvNV_ARG_EXPAND);
void glVertexAttrib4f(glVertexAttrib4f_ARG_EXPAND);
typedef void (*glVertexAttrib4f_PTR)(glVertexAttrib4f_ARG_EXPAND);
void glVertexAttrib4fARB(glVertexAttrib4fARB_ARG_EXPAND);
typedef void (*glVertexAttrib4fARB_PTR)(glVertexAttrib4fARB_ARG_EXPAND);
void glVertexAttrib4fNV(glVertexAttrib4fNV_ARG_EXPAND);
typedef void (*glVertexAttrib4fNV_PTR)(glVertexAttrib4fNV_ARG_EXPAND);
void glVertexAttrib4fv(glVertexAttrib4fv_ARG_EXPAND);
typedef void (*glVertexAttrib4fv_PTR)(glVertexAttrib4fv_ARG_EXPAND);
void glVertexAttrib4fvARB(glVertexAttrib4fvARB_ARG_EXPAND);
typedef void (*glVertexAttrib4fvARB_PTR)(glVertexAttrib4fvARB_ARG_EXPAND);
void glVertexAttrib4fvNV(glVertexAttrib4fvNV_ARG_EXPAND);
typedef void (*glVertexAttrib4fvNV_PTR)(glVertexAttrib4fvNV_ARG_EXPAND);
void glVertexAttrib4hNV(glVertexAttrib4hNV_ARG_EXPAND);
typedef void (*glVertexAttrib4hNV_PTR)(glVertexAttrib4hNV_ARG_EXPAND);
void glVertexAttrib4hvNV(glVertexAttrib4hvNV_ARG_EXPAND);
typedef void (*glVertexAttrib4hvNV_PTR)(glVertexAttrib4hvNV_ARG_EXPAND);
void glVertexAttrib4iv(glVertexAttrib4iv_ARG_EXPAND);
typedef void (*glVertexAttrib4iv_PTR)(glVertexAttrib4iv_ARG_EXPAND);
void glVertexAttrib4ivARB(glVertexAttrib4ivARB_ARG_EXPAND);
typedef void (*glVertexAttrib4ivARB_PTR)(glVertexAttrib4ivARB_ARG_EXPAND);
void glVertexAttrib4s(glVertexAttrib4s_ARG_EXPAND);
typedef void (*glVertexAttrib4s_PTR)(glVertexAttrib4s_ARG_EXPAND);
void glVertexAttrib4sARB(glVertexAttrib4sARB_ARG_EXPAND);
typedef void (*glVertexAttrib4sARB_PTR)(glVertexAttrib4sARB_ARG_EXPAND);
void glVertexAttrib4sNV(glVertexAttrib4sNV_ARG_EXPAND);
typedef void (*glVertexAttrib4sNV_PTR)(glVertexAttrib4sNV_ARG_EXPAND);
void glVertexAttrib4sv(glVertexAttrib4sv_ARG_EXPAND);
typedef void (*glVertexAttrib4sv_PTR)(glVertexAttrib4sv_ARG_EXPAND);
void glVertexAttrib4svARB(glVertexAttrib4svARB_ARG_EXPAND);
typedef void (*glVertexAttrib4svARB_PTR)(glVertexAttrib4svARB_ARG_EXPAND);
void glVertexAttrib4svNV(glVertexAttrib4svNV_ARG_EXPAND);
typedef void (*glVertexAttrib4svNV_PTR)(glVertexAttrib4svNV_ARG_EXPAND);
void glVertexAttrib4ubNV(glVertexAttrib4ubNV_ARG_EXPAND);
typedef void (*glVertexAttrib4ubNV_PTR)(glVertexAttrib4ubNV_ARG_EXPAND);
void glVertexAttrib4ubv(glVertexAttrib4ubv_ARG_EXPAND);
typedef void (*glVertexAttrib4ubv_PTR)(glVertexAttrib4ubv_ARG_EXPAND);
void glVertexAttrib4ubvARB(glVertexAttrib4ubvARB_ARG_EXPAND);
typedef void (*glVertexAttrib4ubvARB_PTR)(glVertexAttrib4ubvARB_ARG_EXPAND);
void glVertexAttrib4ubvNV(glVertexAttrib4ubvNV_ARG_EXPAND);
typedef void (*glVertexAttrib4ubvNV_PTR)(glVertexAttrib4ubvNV_ARG_EXPAND);
void glVertexAttrib4uiv(glVertexAttrib4uiv_ARG_EXPAND);
typedef void (*glVertexAttrib4uiv_PTR)(glVertexAttrib4uiv_ARG_EXPAND);
void glVertexAttrib4uivARB(glVertexAttrib4uivARB_ARG_EXPAND);
typedef void (*glVertexAttrib4uivARB_PTR)(glVertexAttrib4uivARB_ARG_EXPAND);
void glVertexAttrib4usv(glVertexAttrib4usv_ARG_EXPAND);
typedef void (*glVertexAttrib4usv_PTR)(glVertexAttrib4usv_ARG_EXPAND);
void glVertexAttrib4usvARB(glVertexAttrib4usvARB_ARG_EXPAND);
typedef void (*glVertexAttrib4usvARB_PTR)(glVertexAttrib4usvARB_ARG_EXPAND);
void glVertexAttribArrayObjectATI(glVertexAttribArrayObjectATI_ARG_EXPAND);
typedef void (*glVertexAttribArrayObjectATI_PTR)(glVertexAttribArrayObjectATI_ARG_EXPAND);
void glVertexAttribBinding(glVertexAttribBinding_ARG_EXPAND);
typedef void (*glVertexAttribBinding_PTR)(glVertexAttribBinding_ARG_EXPAND);
void glVertexAttribDivisor(glVertexAttribDivisor_ARG_EXPAND);
typedef void (*glVertexAttribDivisor_PTR)(glVertexAttribDivisor_ARG_EXPAND);
void glVertexAttribDivisorARB(glVertexAttribDivisorARB_ARG_EXPAND);
typedef void (*glVertexAttribDivisorARB_PTR)(glVertexAttribDivisorARB_ARG_EXPAND);
void glVertexAttribFormat(glVertexAttribFormat_ARG_EXPAND);
typedef void (*glVertexAttribFormat_PTR)(glVertexAttribFormat_ARG_EXPAND);
void glVertexAttribFormatNV(glVertexAttribFormatNV_ARG_EXPAND);
typedef void (*glVertexAttribFormatNV_PTR)(glVertexAttribFormatNV_ARG_EXPAND);
void glVertexAttribI1i(glVertexAttribI1i_ARG_EXPAND);
typedef void (*glVertexAttribI1i_PTR)(glVertexAttribI1i_ARG_EXPAND);
void glVertexAttribI1iEXT(glVertexAttribI1iEXT_ARG_EXPAND);
typedef void (*glVertexAttribI1iEXT_PTR)(glVertexAttribI1iEXT_ARG_EXPAND);
void glVertexAttribI1iv(glVertexAttribI1iv_ARG_EXPAND);
typedef void (*glVertexAttribI1iv_PTR)(glVertexAttribI1iv_ARG_EXPAND);
void glVertexAttribI1ivEXT(glVertexAttribI1ivEXT_ARG_EXPAND);
typedef void (*glVertexAttribI1ivEXT_PTR)(glVertexAttribI1ivEXT_ARG_EXPAND);
void glVertexAttribI1ui(glVertexAttribI1ui_ARG_EXPAND);
typedef void (*glVertexAttribI1ui_PTR)(glVertexAttribI1ui_ARG_EXPAND);
void glVertexAttribI1uiEXT(glVertexAttribI1uiEXT_ARG_EXPAND);
typedef void (*glVertexAttribI1uiEXT_PTR)(glVertexAttribI1uiEXT_ARG_EXPAND);
void glVertexAttribI1uiv(glVertexAttribI1uiv_ARG_EXPAND);
typedef void (*glVertexAttribI1uiv_PTR)(glVertexAttribI1uiv_ARG_EXPAND);
void glVertexAttribI1uivEXT(glVertexAttribI1uivEXT_ARG_EXPAND);
typedef void (*glVertexAttribI1uivEXT_PTR)(glVertexAttribI1uivEXT_ARG_EXPAND);
void glVertexAttribI2i(glVertexAttribI2i_ARG_EXPAND);
typedef void (*glVertexAttribI2i_PTR)(glVertexAttribI2i_ARG_EXPAND);
void glVertexAttribI2iEXT(glVertexAttribI2iEXT_ARG_EXPAND);
typedef void (*glVertexAttribI2iEXT_PTR)(glVertexAttribI2iEXT_ARG_EXPAND);
void glVertexAttribI2iv(glVertexAttribI2iv_ARG_EXPAND);
typedef void (*glVertexAttribI2iv_PTR)(glVertexAttribI2iv_ARG_EXPAND);
void glVertexAttribI2ivEXT(glVertexAttribI2ivEXT_ARG_EXPAND);
typedef void (*glVertexAttribI2ivEXT_PTR)(glVertexAttribI2ivEXT_ARG_EXPAND);
void glVertexAttribI2ui(glVertexAttribI2ui_ARG_EXPAND);
typedef void (*glVertexAttribI2ui_PTR)(glVertexAttribI2ui_ARG_EXPAND);
void glVertexAttribI2uiEXT(glVertexAttribI2uiEXT_ARG_EXPAND);
typedef void (*glVertexAttribI2uiEXT_PTR)(glVertexAttribI2uiEXT_ARG_EXPAND);
void glVertexAttribI2uiv(glVertexAttribI2uiv_ARG_EXPAND);
typedef void (*glVertexAttribI2uiv_PTR)(glVertexAttribI2uiv_ARG_EXPAND);
void glVertexAttribI2uivEXT(glVertexAttribI2uivEXT_ARG_EXPAND);
typedef void (*glVertexAttribI2uivEXT_PTR)(glVertexAttribI2uivEXT_ARG_EXPAND);
void glVertexAttribI3i(glVertexAttribI3i_ARG_EXPAND);
typedef void (*glVertexAttribI3i_PTR)(glVertexAttribI3i_ARG_EXPAND);
void glVertexAttribI3iEXT(glVertexAttribI3iEXT_ARG_EXPAND);
typedef void (*glVertexAttribI3iEXT_PTR)(glVertexAttribI3iEXT_ARG_EXPAND);
void glVertexAttribI3iv(glVertexAttribI3iv_ARG_EXPAND);
typedef void (*glVertexAttribI3iv_PTR)(glVertexAttribI3iv_ARG_EXPAND);
void glVertexAttribI3ivEXT(glVertexAttribI3ivEXT_ARG_EXPAND);
typedef void (*glVertexAttribI3ivEXT_PTR)(glVertexAttribI3ivEXT_ARG_EXPAND);
void glVertexAttribI3ui(glVertexAttribI3ui_ARG_EXPAND);
typedef void (*glVertexAttribI3ui_PTR)(glVertexAttribI3ui_ARG_EXPAND);
void glVertexAttribI3uiEXT(glVertexAttribI3uiEXT_ARG_EXPAND);
typedef void (*glVertexAttribI3uiEXT_PTR)(glVertexAttribI3uiEXT_ARG_EXPAND);
void glVertexAttribI3uiv(glVertexAttribI3uiv_ARG_EXPAND);
typedef void (*glVertexAttribI3uiv_PTR)(glVertexAttribI3uiv_ARG_EXPAND);
void glVertexAttribI3uivEXT(glVertexAttribI3uivEXT_ARG_EXPAND);
typedef void (*glVertexAttribI3uivEXT_PTR)(glVertexAttribI3uivEXT_ARG_EXPAND);
void glVertexAttribI4bv(glVertexAttribI4bv_ARG_EXPAND);
typedef void (*glVertexAttribI4bv_PTR)(glVertexAttribI4bv_ARG_EXPAND);
void glVertexAttribI4bvEXT(glVertexAttribI4bvEXT_ARG_EXPAND);
typedef void (*glVertexAttribI4bvEXT_PTR)(glVertexAttribI4bvEXT_ARG_EXPAND);
void glVertexAttribI4i(glVertexAttribI4i_ARG_EXPAND);
typedef void (*glVertexAttribI4i_PTR)(glVertexAttribI4i_ARG_EXPAND);
void glVertexAttribI4iEXT(glVertexAttribI4iEXT_ARG_EXPAND);
typedef void (*glVertexAttribI4iEXT_PTR)(glVertexAttribI4iEXT_ARG_EXPAND);
void glVertexAttribI4iv(glVertexAttribI4iv_ARG_EXPAND);
typedef void (*glVertexAttribI4iv_PTR)(glVertexAttribI4iv_ARG_EXPAND);
void glVertexAttribI4ivEXT(glVertexAttribI4ivEXT_ARG_EXPAND);
typedef void (*glVertexAttribI4ivEXT_PTR)(glVertexAttribI4ivEXT_ARG_EXPAND);
void glVertexAttribI4sv(glVertexAttribI4sv_ARG_EXPAND);
typedef void (*glVertexAttribI4sv_PTR)(glVertexAttribI4sv_ARG_EXPAND);
void glVertexAttribI4svEXT(glVertexAttribI4svEXT_ARG_EXPAND);
typedef void (*glVertexAttribI4svEXT_PTR)(glVertexAttribI4svEXT_ARG_EXPAND);
void glVertexAttribI4ubv(glVertexAttribI4ubv_ARG_EXPAND);
typedef void (*glVertexAttribI4ubv_PTR)(glVertexAttribI4ubv_ARG_EXPAND);
void glVertexAttribI4ubvEXT(glVertexAttribI4ubvEXT_ARG_EXPAND);
typedef void (*glVertexAttribI4ubvEXT_PTR)(glVertexAttribI4ubvEXT_ARG_EXPAND);
void glVertexAttribI4ui(glVertexAttribI4ui_ARG_EXPAND);
typedef void (*glVertexAttribI4ui_PTR)(glVertexAttribI4ui_ARG_EXPAND);
void glVertexAttribI4uiEXT(glVertexAttribI4uiEXT_ARG_EXPAND);
typedef void (*glVertexAttribI4uiEXT_PTR)(glVertexAttribI4uiEXT_ARG_EXPAND);
void glVertexAttribI4uiv(glVertexAttribI4uiv_ARG_EXPAND);
typedef void (*glVertexAttribI4uiv_PTR)(glVertexAttribI4uiv_ARG_EXPAND);
void glVertexAttribI4uivEXT(glVertexAttribI4uivEXT_ARG_EXPAND);
typedef void (*glVertexAttribI4uivEXT_PTR)(glVertexAttribI4uivEXT_ARG_EXPAND);
void glVertexAttribI4usv(glVertexAttribI4usv_ARG_EXPAND);
typedef void (*glVertexAttribI4usv_PTR)(glVertexAttribI4usv_ARG_EXPAND);
void glVertexAttribI4usvEXT(glVertexAttribI4usvEXT_ARG_EXPAND);
typedef void (*glVertexAttribI4usvEXT_PTR)(glVertexAttribI4usvEXT_ARG_EXPAND);
void glVertexAttribIFormat(glVertexAttribIFormat_ARG_EXPAND);
typedef void (*glVertexAttribIFormat_PTR)(glVertexAttribIFormat_ARG_EXPAND);
void glVertexAttribIFormatNV(glVertexAttribIFormatNV_ARG_EXPAND);
typedef void (*glVertexAttribIFormatNV_PTR)(glVertexAttribIFormatNV_ARG_EXPAND);
void glVertexAttribIPointer(glVertexAttribIPointer_ARG_EXPAND);
typedef void (*glVertexAttribIPointer_PTR)(glVertexAttribIPointer_ARG_EXPAND);
void glVertexAttribIPointerEXT(glVertexAttribIPointerEXT_ARG_EXPAND);
typedef void (*glVertexAttribIPointerEXT_PTR)(glVertexAttribIPointerEXT_ARG_EXPAND);
void glVertexAttribL1d(glVertexAttribL1d_ARG_EXPAND);
typedef void (*glVertexAttribL1d_PTR)(glVertexAttribL1d_ARG_EXPAND);
void glVertexAttribL1dEXT(glVertexAttribL1dEXT_ARG_EXPAND);
typedef void (*glVertexAttribL1dEXT_PTR)(glVertexAttribL1dEXT_ARG_EXPAND);
void glVertexAttribL1dv(glVertexAttribL1dv_ARG_EXPAND);
typedef void (*glVertexAttribL1dv_PTR)(glVertexAttribL1dv_ARG_EXPAND);
void glVertexAttribL1dvEXT(glVertexAttribL1dvEXT_ARG_EXPAND);
typedef void (*glVertexAttribL1dvEXT_PTR)(glVertexAttribL1dvEXT_ARG_EXPAND);
void glVertexAttribL1i64NV(glVertexAttribL1i64NV_ARG_EXPAND);
typedef void (*glVertexAttribL1i64NV_PTR)(glVertexAttribL1i64NV_ARG_EXPAND);
void glVertexAttribL1i64vNV(glVertexAttribL1i64vNV_ARG_EXPAND);
typedef void (*glVertexAttribL1i64vNV_PTR)(glVertexAttribL1i64vNV_ARG_EXPAND);
void glVertexAttribL1ui64NV(glVertexAttribL1ui64NV_ARG_EXPAND);
typedef void (*glVertexAttribL1ui64NV_PTR)(glVertexAttribL1ui64NV_ARG_EXPAND);
void glVertexAttribL1ui64vNV(glVertexAttribL1ui64vNV_ARG_EXPAND);
typedef void (*glVertexAttribL1ui64vNV_PTR)(glVertexAttribL1ui64vNV_ARG_EXPAND);
void glVertexAttribL2d(glVertexAttribL2d_ARG_EXPAND);
typedef void (*glVertexAttribL2d_PTR)(glVertexAttribL2d_ARG_EXPAND);
void glVertexAttribL2dEXT(glVertexAttribL2dEXT_ARG_EXPAND);
typedef void (*glVertexAttribL2dEXT_PTR)(glVertexAttribL2dEXT_ARG_EXPAND);
void glVertexAttribL2dv(glVertexAttribL2dv_ARG_EXPAND);
typedef void (*glVertexAttribL2dv_PTR)(glVertexAttribL2dv_ARG_EXPAND);
void glVertexAttribL2dvEXT(glVertexAttribL2dvEXT_ARG_EXPAND);
typedef void (*glVertexAttribL2dvEXT_PTR)(glVertexAttribL2dvEXT_ARG_EXPAND);
void glVertexAttribL2i64NV(glVertexAttribL2i64NV_ARG_EXPAND);
typedef void (*glVertexAttribL2i64NV_PTR)(glVertexAttribL2i64NV_ARG_EXPAND);
void glVertexAttribL2i64vNV(glVertexAttribL2i64vNV_ARG_EXPAND);
typedef void (*glVertexAttribL2i64vNV_PTR)(glVertexAttribL2i64vNV_ARG_EXPAND);
void glVertexAttribL2ui64NV(glVertexAttribL2ui64NV_ARG_EXPAND);
typedef void (*glVertexAttribL2ui64NV_PTR)(glVertexAttribL2ui64NV_ARG_EXPAND);
void glVertexAttribL2ui64vNV(glVertexAttribL2ui64vNV_ARG_EXPAND);
typedef void (*glVertexAttribL2ui64vNV_PTR)(glVertexAttribL2ui64vNV_ARG_EXPAND);
void glVertexAttribL3d(glVertexAttribL3d_ARG_EXPAND);
typedef void (*glVertexAttribL3d_PTR)(glVertexAttribL3d_ARG_EXPAND);
void glVertexAttribL3dEXT(glVertexAttribL3dEXT_ARG_EXPAND);
typedef void (*glVertexAttribL3dEXT_PTR)(glVertexAttribL3dEXT_ARG_EXPAND);
void glVertexAttribL3dv(glVertexAttribL3dv_ARG_EXPAND);
typedef void (*glVertexAttribL3dv_PTR)(glVertexAttribL3dv_ARG_EXPAND);
void glVertexAttribL3dvEXT(glVertexAttribL3dvEXT_ARG_EXPAND);
typedef void (*glVertexAttribL3dvEXT_PTR)(glVertexAttribL3dvEXT_ARG_EXPAND);
void glVertexAttribL3i64NV(glVertexAttribL3i64NV_ARG_EXPAND);
typedef void (*glVertexAttribL3i64NV_PTR)(glVertexAttribL3i64NV_ARG_EXPAND);
void glVertexAttribL3i64vNV(glVertexAttribL3i64vNV_ARG_EXPAND);
typedef void (*glVertexAttribL3i64vNV_PTR)(glVertexAttribL3i64vNV_ARG_EXPAND);
void glVertexAttribL3ui64NV(glVertexAttribL3ui64NV_ARG_EXPAND);
typedef void (*glVertexAttribL3ui64NV_PTR)(glVertexAttribL3ui64NV_ARG_EXPAND);
void glVertexAttribL3ui64vNV(glVertexAttribL3ui64vNV_ARG_EXPAND);
typedef void (*glVertexAttribL3ui64vNV_PTR)(glVertexAttribL3ui64vNV_ARG_EXPAND);
void glVertexAttribL4d(glVertexAttribL4d_ARG_EXPAND);
typedef void (*glVertexAttribL4d_PTR)(glVertexAttribL4d_ARG_EXPAND);
void glVertexAttribL4dEXT(glVertexAttribL4dEXT_ARG_EXPAND);
typedef void (*glVertexAttribL4dEXT_PTR)(glVertexAttribL4dEXT_ARG_EXPAND);
void glVertexAttribL4dv(glVertexAttribL4dv_ARG_EXPAND);
typedef void (*glVertexAttribL4dv_PTR)(glVertexAttribL4dv_ARG_EXPAND);
void glVertexAttribL4dvEXT(glVertexAttribL4dvEXT_ARG_EXPAND);
typedef void (*glVertexAttribL4dvEXT_PTR)(glVertexAttribL4dvEXT_ARG_EXPAND);
void glVertexAttribL4i64NV(glVertexAttribL4i64NV_ARG_EXPAND);
typedef void (*glVertexAttribL4i64NV_PTR)(glVertexAttribL4i64NV_ARG_EXPAND);
void glVertexAttribL4i64vNV(glVertexAttribL4i64vNV_ARG_EXPAND);
typedef void (*glVertexAttribL4i64vNV_PTR)(glVertexAttribL4i64vNV_ARG_EXPAND);
void glVertexAttribL4ui64NV(glVertexAttribL4ui64NV_ARG_EXPAND);
typedef void (*glVertexAttribL4ui64NV_PTR)(glVertexAttribL4ui64NV_ARG_EXPAND);
void glVertexAttribL4ui64vNV(glVertexAttribL4ui64vNV_ARG_EXPAND);
typedef void (*glVertexAttribL4ui64vNV_PTR)(glVertexAttribL4ui64vNV_ARG_EXPAND);
void glVertexAttribLFormat(glVertexAttribLFormat_ARG_EXPAND);
typedef void (*glVertexAttribLFormat_PTR)(glVertexAttribLFormat_ARG_EXPAND);
void glVertexAttribLFormatNV(glVertexAttribLFormatNV_ARG_EXPAND);
typedef void (*glVertexAttribLFormatNV_PTR)(glVertexAttribLFormatNV_ARG_EXPAND);
void glVertexAttribLPointer(glVertexAttribLPointer_ARG_EXPAND);
typedef void (*glVertexAttribLPointer_PTR)(glVertexAttribLPointer_ARG_EXPAND);
void glVertexAttribLPointerEXT(glVertexAttribLPointerEXT_ARG_EXPAND);
typedef void (*glVertexAttribLPointerEXT_PTR)(glVertexAttribLPointerEXT_ARG_EXPAND);
void glVertexAttribP1ui(glVertexAttribP1ui_ARG_EXPAND);
typedef void (*glVertexAttribP1ui_PTR)(glVertexAttribP1ui_ARG_EXPAND);
void glVertexAttribP1uiv(glVertexAttribP1uiv_ARG_EXPAND);
typedef void (*glVertexAttribP1uiv_PTR)(glVertexAttribP1uiv_ARG_EXPAND);
void glVertexAttribP2ui(glVertexAttribP2ui_ARG_EXPAND);
typedef void (*glVertexAttribP2ui_PTR)(glVertexAttribP2ui_ARG_EXPAND);
void glVertexAttribP2uiv(glVertexAttribP2uiv_ARG_EXPAND);
typedef void (*glVertexAttribP2uiv_PTR)(glVertexAttribP2uiv_ARG_EXPAND);
void glVertexAttribP3ui(glVertexAttribP3ui_ARG_EXPAND);
typedef void (*glVertexAttribP3ui_PTR)(glVertexAttribP3ui_ARG_EXPAND);
void glVertexAttribP3uiv(glVertexAttribP3uiv_ARG_EXPAND);
typedef void (*glVertexAttribP3uiv_PTR)(glVertexAttribP3uiv_ARG_EXPAND);
void glVertexAttribP4ui(glVertexAttribP4ui_ARG_EXPAND);
typedef void (*glVertexAttribP4ui_PTR)(glVertexAttribP4ui_ARG_EXPAND);
void glVertexAttribP4uiv(glVertexAttribP4uiv_ARG_EXPAND);
typedef void (*glVertexAttribP4uiv_PTR)(glVertexAttribP4uiv_ARG_EXPAND);
void glVertexAttribPointer(glVertexAttribPointer_ARG_EXPAND);
typedef void (*glVertexAttribPointer_PTR)(glVertexAttribPointer_ARG_EXPAND);
void glVertexAttribPointerARB(glVertexAttribPointerARB_ARG_EXPAND);
typedef void (*glVertexAttribPointerARB_PTR)(glVertexAttribPointerARB_ARG_EXPAND);
void glVertexAttribPointerNV(glVertexAttribPointerNV_ARG_EXPAND);
typedef void (*glVertexAttribPointerNV_PTR)(glVertexAttribPointerNV_ARG_EXPAND);
void glVertexAttribs1dvNV(glVertexAttribs1dvNV_ARG_EXPAND);
typedef void (*glVertexAttribs1dvNV_PTR)(glVertexAttribs1dvNV_ARG_EXPAND);
void glVertexAttribs1fvNV(glVertexAttribs1fvNV_ARG_EXPAND);
typedef void (*glVertexAttribs1fvNV_PTR)(glVertexAttribs1fvNV_ARG_EXPAND);
void glVertexAttribs1hvNV(glVertexAttribs1hvNV_ARG_EXPAND);
typedef void (*glVertexAttribs1hvNV_PTR)(glVertexAttribs1hvNV_ARG_EXPAND);
void glVertexAttribs1svNV(glVertexAttribs1svNV_ARG_EXPAND);
typedef void (*glVertexAttribs1svNV_PTR)(glVertexAttribs1svNV_ARG_EXPAND);
void glVertexAttribs2dvNV(glVertexAttribs2dvNV_ARG_EXPAND);
typedef void (*glVertexAttribs2dvNV_PTR)(glVertexAttribs2dvNV_ARG_EXPAND);
void glVertexAttribs2fvNV(glVertexAttribs2fvNV_ARG_EXPAND);
typedef void (*glVertexAttribs2fvNV_PTR)(glVertexAttribs2fvNV_ARG_EXPAND);
void glVertexAttribs2hvNV(glVertexAttribs2hvNV_ARG_EXPAND);
typedef void (*glVertexAttribs2hvNV_PTR)(glVertexAttribs2hvNV_ARG_EXPAND);
void glVertexAttribs2svNV(glVertexAttribs2svNV_ARG_EXPAND);
typedef void (*glVertexAttribs2svNV_PTR)(glVertexAttribs2svNV_ARG_EXPAND);
void glVertexAttribs3dvNV(glVertexAttribs3dvNV_ARG_EXPAND);
typedef void (*glVertexAttribs3dvNV_PTR)(glVertexAttribs3dvNV_ARG_EXPAND);
void glVertexAttribs3fvNV(glVertexAttribs3fvNV_ARG_EXPAND);
typedef void (*glVertexAttribs3fvNV_PTR)(glVertexAttribs3fvNV_ARG_EXPAND);
void glVertexAttribs3hvNV(glVertexAttribs3hvNV_ARG_EXPAND);
typedef void (*glVertexAttribs3hvNV_PTR)(glVertexAttribs3hvNV_ARG_EXPAND);
void glVertexAttribs3svNV(glVertexAttribs3svNV_ARG_EXPAND);
typedef void (*glVertexAttribs3svNV_PTR)(glVertexAttribs3svNV_ARG_EXPAND);
void glVertexAttribs4dvNV(glVertexAttribs4dvNV_ARG_EXPAND);
typedef void (*glVertexAttribs4dvNV_PTR)(glVertexAttribs4dvNV_ARG_EXPAND);
void glVertexAttribs4fvNV(glVertexAttribs4fvNV_ARG_EXPAND);
typedef void (*glVertexAttribs4fvNV_PTR)(glVertexAttribs4fvNV_ARG_EXPAND);
void glVertexAttribs4hvNV(glVertexAttribs4hvNV_ARG_EXPAND);
typedef void (*glVertexAttribs4hvNV_PTR)(glVertexAttribs4hvNV_ARG_EXPAND);
void glVertexAttribs4svNV(glVertexAttribs4svNV_ARG_EXPAND);
typedef void (*glVertexAttribs4svNV_PTR)(glVertexAttribs4svNV_ARG_EXPAND);
void glVertexAttribs4ubvNV(glVertexAttribs4ubvNV_ARG_EXPAND);
typedef void (*glVertexAttribs4ubvNV_PTR)(glVertexAttribs4ubvNV_ARG_EXPAND);
void glVertexBindingDivisor(glVertexBindingDivisor_ARG_EXPAND);
typedef void (*glVertexBindingDivisor_PTR)(glVertexBindingDivisor_ARG_EXPAND);
void glVertexBlendARB(glVertexBlendARB_ARG_EXPAND);
typedef void (*glVertexBlendARB_PTR)(glVertexBlendARB_ARG_EXPAND);
void glVertexBlendEnvfATI(glVertexBlendEnvfATI_ARG_EXPAND);
typedef void (*glVertexBlendEnvfATI_PTR)(glVertexBlendEnvfATI_ARG_EXPAND);
void glVertexBlendEnviATI(glVertexBlendEnviATI_ARG_EXPAND);
typedef void (*glVertexBlendEnviATI_PTR)(glVertexBlendEnviATI_ARG_EXPAND);
void glVertexFormatNV(glVertexFormatNV_ARG_EXPAND);
typedef void (*glVertexFormatNV_PTR)(glVertexFormatNV_ARG_EXPAND);
void glVertexP2ui(glVertexP2ui_ARG_EXPAND);
typedef void (*glVertexP2ui_PTR)(glVertexP2ui_ARG_EXPAND);
void glVertexP2uiv(glVertexP2uiv_ARG_EXPAND);
typedef void (*glVertexP2uiv_PTR)(glVertexP2uiv_ARG_EXPAND);
void glVertexP3ui(glVertexP3ui_ARG_EXPAND);
typedef void (*glVertexP3ui_PTR)(glVertexP3ui_ARG_EXPAND);
void glVertexP3uiv(glVertexP3uiv_ARG_EXPAND);
typedef void (*glVertexP3uiv_PTR)(glVertexP3uiv_ARG_EXPAND);
void glVertexP4ui(glVertexP4ui_ARG_EXPAND);
typedef void (*glVertexP4ui_PTR)(glVertexP4ui_ARG_EXPAND);
void glVertexP4uiv(glVertexP4uiv_ARG_EXPAND);
typedef void (*glVertexP4uiv_PTR)(glVertexP4uiv_ARG_EXPAND);
void glVertexPointer(glVertexPointer_ARG_EXPAND);
typedef void (*glVertexPointer_PTR)(glVertexPointer_ARG_EXPAND);
void glVertexPointerEXT(glVertexPointerEXT_ARG_EXPAND);
typedef void (*glVertexPointerEXT_PTR)(glVertexPointerEXT_ARG_EXPAND);
void glVertexPointerListIBM(glVertexPointerListIBM_ARG_EXPAND);
typedef void (*glVertexPointerListIBM_PTR)(glVertexPointerListIBM_ARG_EXPAND);
void glVertexPointervINTEL(glVertexPointervINTEL_ARG_EXPAND);
typedef void (*glVertexPointervINTEL_PTR)(glVertexPointervINTEL_ARG_EXPAND);
void glVertexStream1dATI(glVertexStream1dATI_ARG_EXPAND);
typedef void (*glVertexStream1dATI_PTR)(glVertexStream1dATI_ARG_EXPAND);
void glVertexStream1dvATI(glVertexStream1dvATI_ARG_EXPAND);
typedef void (*glVertexStream1dvATI_PTR)(glVertexStream1dvATI_ARG_EXPAND);
void glVertexStream1fATI(glVertexStream1fATI_ARG_EXPAND);
typedef void (*glVertexStream1fATI_PTR)(glVertexStream1fATI_ARG_EXPAND);
void glVertexStream1fvATI(glVertexStream1fvATI_ARG_EXPAND);
typedef void (*glVertexStream1fvATI_PTR)(glVertexStream1fvATI_ARG_EXPAND);
void glVertexStream1iATI(glVertexStream1iATI_ARG_EXPAND);
typedef void (*glVertexStream1iATI_PTR)(glVertexStream1iATI_ARG_EXPAND);
void glVertexStream1ivATI(glVertexStream1ivATI_ARG_EXPAND);
typedef void (*glVertexStream1ivATI_PTR)(glVertexStream1ivATI_ARG_EXPAND);
void glVertexStream1sATI(glVertexStream1sATI_ARG_EXPAND);
typedef void (*glVertexStream1sATI_PTR)(glVertexStream1sATI_ARG_EXPAND);
void glVertexStream1svATI(glVertexStream1svATI_ARG_EXPAND);
typedef void (*glVertexStream1svATI_PTR)(glVertexStream1svATI_ARG_EXPAND);
void glVertexStream2dATI(glVertexStream2dATI_ARG_EXPAND);
typedef void (*glVertexStream2dATI_PTR)(glVertexStream2dATI_ARG_EXPAND);
void glVertexStream2dvATI(glVertexStream2dvATI_ARG_EXPAND);
typedef void (*glVertexStream2dvATI_PTR)(glVertexStream2dvATI_ARG_EXPAND);
void glVertexStream2fATI(glVertexStream2fATI_ARG_EXPAND);
typedef void (*glVertexStream2fATI_PTR)(glVertexStream2fATI_ARG_EXPAND);
void glVertexStream2fvATI(glVertexStream2fvATI_ARG_EXPAND);
typedef void (*glVertexStream2fvATI_PTR)(glVertexStream2fvATI_ARG_EXPAND);
void glVertexStream2iATI(glVertexStream2iATI_ARG_EXPAND);
typedef void (*glVertexStream2iATI_PTR)(glVertexStream2iATI_ARG_EXPAND);
void glVertexStream2ivATI(glVertexStream2ivATI_ARG_EXPAND);
typedef void (*glVertexStream2ivATI_PTR)(glVertexStream2ivATI_ARG_EXPAND);
void glVertexStream2sATI(glVertexStream2sATI_ARG_EXPAND);
typedef void (*glVertexStream2sATI_PTR)(glVertexStream2sATI_ARG_EXPAND);
void glVertexStream2svATI(glVertexStream2svATI_ARG_EXPAND);
typedef void (*glVertexStream2svATI_PTR)(glVertexStream2svATI_ARG_EXPAND);
void glVertexStream3dATI(glVertexStream3dATI_ARG_EXPAND);
typedef void (*glVertexStream3dATI_PTR)(glVertexStream3dATI_ARG_EXPAND);
void glVertexStream3dvATI(glVertexStream3dvATI_ARG_EXPAND);
typedef void (*glVertexStream3dvATI_PTR)(glVertexStream3dvATI_ARG_EXPAND);
void glVertexStream3fATI(glVertexStream3fATI_ARG_EXPAND);
typedef void (*glVertexStream3fATI_PTR)(glVertexStream3fATI_ARG_EXPAND);
void glVertexStream3fvATI(glVertexStream3fvATI_ARG_EXPAND);
typedef void (*glVertexStream3fvATI_PTR)(glVertexStream3fvATI_ARG_EXPAND);
void glVertexStream3iATI(glVertexStream3iATI_ARG_EXPAND);
typedef void (*glVertexStream3iATI_PTR)(glVertexStream3iATI_ARG_EXPAND);
void glVertexStream3ivATI(glVertexStream3ivATI_ARG_EXPAND);
typedef void (*glVertexStream3ivATI_PTR)(glVertexStream3ivATI_ARG_EXPAND);
void glVertexStream3sATI(glVertexStream3sATI_ARG_EXPAND);
typedef void (*glVertexStream3sATI_PTR)(glVertexStream3sATI_ARG_EXPAND);
void glVertexStream3svATI(glVertexStream3svATI_ARG_EXPAND);
typedef void (*glVertexStream3svATI_PTR)(glVertexStream3svATI_ARG_EXPAND);
void glVertexStream4dATI(glVertexStream4dATI_ARG_EXPAND);
typedef void (*glVertexStream4dATI_PTR)(glVertexStream4dATI_ARG_EXPAND);
void glVertexStream4dvATI(glVertexStream4dvATI_ARG_EXPAND);
typedef void (*glVertexStream4dvATI_PTR)(glVertexStream4dvATI_ARG_EXPAND);
void glVertexStream4fATI(glVertexStream4fATI_ARG_EXPAND);
typedef void (*glVertexStream4fATI_PTR)(glVertexStream4fATI_ARG_EXPAND);
void glVertexStream4fvATI(glVertexStream4fvATI_ARG_EXPAND);
typedef void (*glVertexStream4fvATI_PTR)(glVertexStream4fvATI_ARG_EXPAND);
void glVertexStream4iATI(glVertexStream4iATI_ARG_EXPAND);
typedef void (*glVertexStream4iATI_PTR)(glVertexStream4iATI_ARG_EXPAND);
void glVertexStream4ivATI(glVertexStream4ivATI_ARG_EXPAND);
typedef void (*glVertexStream4ivATI_PTR)(glVertexStream4ivATI_ARG_EXPAND);
void glVertexStream4sATI(glVertexStream4sATI_ARG_EXPAND);
typedef void (*glVertexStream4sATI_PTR)(glVertexStream4sATI_ARG_EXPAND);
void glVertexStream4svATI(glVertexStream4svATI_ARG_EXPAND);
typedef void (*glVertexStream4svATI_PTR)(glVertexStream4svATI_ARG_EXPAND);
void glVertexWeightPointerEXT(glVertexWeightPointerEXT_ARG_EXPAND);
typedef void (*glVertexWeightPointerEXT_PTR)(glVertexWeightPointerEXT_ARG_EXPAND);
void glVertexWeightfEXT(glVertexWeightfEXT_ARG_EXPAND);
typedef void (*glVertexWeightfEXT_PTR)(glVertexWeightfEXT_ARG_EXPAND);
void glVertexWeightfvEXT(glVertexWeightfvEXT_ARG_EXPAND);
typedef void (*glVertexWeightfvEXT_PTR)(glVertexWeightfvEXT_ARG_EXPAND);
void glVertexWeighthNV(glVertexWeighthNV_ARG_EXPAND);
typedef void (*glVertexWeighthNV_PTR)(glVertexWeighthNV_ARG_EXPAND);
void glVertexWeighthvNV(glVertexWeighthvNV_ARG_EXPAND);
typedef void (*glVertexWeighthvNV_PTR)(glVertexWeighthvNV_ARG_EXPAND);
GLenum glVideoCaptureNV(glVideoCaptureNV_ARG_EXPAND);
typedef GLenum (*glVideoCaptureNV_PTR)(glVideoCaptureNV_ARG_EXPAND);
void glVideoCaptureStreamParameterdvNV(glVideoCaptureStreamParameterdvNV_ARG_EXPAND);
typedef void (*glVideoCaptureStreamParameterdvNV_PTR)(glVideoCaptureStreamParameterdvNV_ARG_EXPAND);
void glVideoCaptureStreamParameterfvNV(glVideoCaptureStreamParameterfvNV_ARG_EXPAND);
typedef void (*glVideoCaptureStreamParameterfvNV_PTR)(glVideoCaptureStreamParameterfvNV_ARG_EXPAND);
void glVideoCaptureStreamParameterivNV(glVideoCaptureStreamParameterivNV_ARG_EXPAND);
typedef void (*glVideoCaptureStreamParameterivNV_PTR)(glVideoCaptureStreamParameterivNV_ARG_EXPAND);
void glViewport(glViewport_ARG_EXPAND);
typedef void (*glViewport_PTR)(glViewport_ARG_EXPAND);
void glViewportArrayv(glViewportArrayv_ARG_EXPAND);
typedef void (*glViewportArrayv_PTR)(glViewportArrayv_ARG_EXPAND);
void glViewportIndexedf(glViewportIndexedf_ARG_EXPAND);
typedef void (*glViewportIndexedf_PTR)(glViewportIndexedf_ARG_EXPAND);
void glViewportIndexedfv(glViewportIndexedfv_ARG_EXPAND);
typedef void (*glViewportIndexedfv_PTR)(glViewportIndexedfv_ARG_EXPAND);
void glWaitSync(glWaitSync_ARG_EXPAND);
typedef void (*glWaitSync_PTR)(glWaitSync_ARG_EXPAND);
void glWeightPathsNV(glWeightPathsNV_ARG_EXPAND);
typedef void (*glWeightPathsNV_PTR)(glWeightPathsNV_ARG_EXPAND);
void glWeightPointerARB(glWeightPointerARB_ARG_EXPAND);
typedef void (*glWeightPointerARB_PTR)(glWeightPointerARB_ARG_EXPAND);
void glWeightbvARB(glWeightbvARB_ARG_EXPAND);
typedef void (*glWeightbvARB_PTR)(glWeightbvARB_ARG_EXPAND);
void glWeightdvARB(glWeightdvARB_ARG_EXPAND);
typedef void (*glWeightdvARB_PTR)(glWeightdvARB_ARG_EXPAND);
void glWeightfvARB(glWeightfvARB_ARG_EXPAND);
typedef void (*glWeightfvARB_PTR)(glWeightfvARB_ARG_EXPAND);
void glWeightivARB(glWeightivARB_ARG_EXPAND);
typedef void (*glWeightivARB_PTR)(glWeightivARB_ARG_EXPAND);
void glWeightsvARB(glWeightsvARB_ARG_EXPAND);
typedef void (*glWeightsvARB_PTR)(glWeightsvARB_ARG_EXPAND);
void glWeightubvARB(glWeightubvARB_ARG_EXPAND);
typedef void (*glWeightubvARB_PTR)(glWeightubvARB_ARG_EXPAND);
void glWeightuivARB(glWeightuivARB_ARG_EXPAND);
typedef void (*glWeightuivARB_PTR)(glWeightuivARB_ARG_EXPAND);
void glWeightusvARB(glWeightusvARB_ARG_EXPAND);
typedef void (*glWeightusvARB_PTR)(glWeightusvARB_ARG_EXPAND);
void glWindowPos2d(glWindowPos2d_ARG_EXPAND);
typedef void (*glWindowPos2d_PTR)(glWindowPos2d_ARG_EXPAND);
void glWindowPos2dARB(glWindowPos2dARB_ARG_EXPAND);
typedef void (*glWindowPos2dARB_PTR)(glWindowPos2dARB_ARG_EXPAND);
void glWindowPos2dMESA(glWindowPos2dMESA_ARG_EXPAND);
typedef void (*glWindowPos2dMESA_PTR)(glWindowPos2dMESA_ARG_EXPAND);
void glWindowPos2dv(glWindowPos2dv_ARG_EXPAND);
typedef void (*glWindowPos2dv_PTR)(glWindowPos2dv_ARG_EXPAND);
void glWindowPos2dvARB(glWindowPos2dvARB_ARG_EXPAND);
typedef void (*glWindowPos2dvARB_PTR)(glWindowPos2dvARB_ARG_EXPAND);
void glWindowPos2dvMESA(glWindowPos2dvMESA_ARG_EXPAND);
typedef void (*glWindowPos2dvMESA_PTR)(glWindowPos2dvMESA_ARG_EXPAND);
void glWindowPos2f(glWindowPos2f_ARG_EXPAND);
typedef void (*glWindowPos2f_PTR)(glWindowPos2f_ARG_EXPAND);
void glWindowPos2fARB(glWindowPos2fARB_ARG_EXPAND);
typedef void (*glWindowPos2fARB_PTR)(glWindowPos2fARB_ARG_EXPAND);
void glWindowPos2fMESA(glWindowPos2fMESA_ARG_EXPAND);
typedef void (*glWindowPos2fMESA_PTR)(glWindowPos2fMESA_ARG_EXPAND);
void glWindowPos2fv(glWindowPos2fv_ARG_EXPAND);
typedef void (*glWindowPos2fv_PTR)(glWindowPos2fv_ARG_EXPAND);
void glWindowPos2fvARB(glWindowPos2fvARB_ARG_EXPAND);
typedef void (*glWindowPos2fvARB_PTR)(glWindowPos2fvARB_ARG_EXPAND);
void glWindowPos2fvMESA(glWindowPos2fvMESA_ARG_EXPAND);
typedef void (*glWindowPos2fvMESA_PTR)(glWindowPos2fvMESA_ARG_EXPAND);
void glWindowPos2i(glWindowPos2i_ARG_EXPAND);
typedef void (*glWindowPos2i_PTR)(glWindowPos2i_ARG_EXPAND);
void glWindowPos2iARB(glWindowPos2iARB_ARG_EXPAND);
typedef void (*glWindowPos2iARB_PTR)(glWindowPos2iARB_ARG_EXPAND);
void glWindowPos2iMESA(glWindowPos2iMESA_ARG_EXPAND);
typedef void (*glWindowPos2iMESA_PTR)(glWindowPos2iMESA_ARG_EXPAND);
void glWindowPos2iv(glWindowPos2iv_ARG_EXPAND);
typedef void (*glWindowPos2iv_PTR)(glWindowPos2iv_ARG_EXPAND);
void glWindowPos2ivARB(glWindowPos2ivARB_ARG_EXPAND);
typedef void (*glWindowPos2ivARB_PTR)(glWindowPos2ivARB_ARG_EXPAND);
void glWindowPos2ivMESA(glWindowPos2ivMESA_ARG_EXPAND);
typedef void (*glWindowPos2ivMESA_PTR)(glWindowPos2ivMESA_ARG_EXPAND);
void glWindowPos2s(glWindowPos2s_ARG_EXPAND);
typedef void (*glWindowPos2s_PTR)(glWindowPos2s_ARG_EXPAND);
void glWindowPos2sARB(glWindowPos2sARB_ARG_EXPAND);
typedef void (*glWindowPos2sARB_PTR)(glWindowPos2sARB_ARG_EXPAND);
void glWindowPos2sMESA(glWindowPos2sMESA_ARG_EXPAND);
typedef void (*glWindowPos2sMESA_PTR)(glWindowPos2sMESA_ARG_EXPAND);
void glWindowPos2sv(glWindowPos2sv_ARG_EXPAND);
typedef void (*glWindowPos2sv_PTR)(glWindowPos2sv_ARG_EXPAND);
void glWindowPos2svARB(glWindowPos2svARB_ARG_EXPAND);
typedef void (*glWindowPos2svARB_PTR)(glWindowPos2svARB_ARG_EXPAND);
void glWindowPos2svMESA(glWindowPos2svMESA_ARG_EXPAND);
typedef void (*glWindowPos2svMESA_PTR)(glWindowPos2svMESA_ARG_EXPAND);
void glWindowPos3d(glWindowPos3d_ARG_EXPAND);
typedef void (*glWindowPos3d_PTR)(glWindowPos3d_ARG_EXPAND);
void glWindowPos3dARB(glWindowPos3dARB_ARG_EXPAND);
typedef void (*glWindowPos3dARB_PTR)(glWindowPos3dARB_ARG_EXPAND);
void glWindowPos3dMESA(glWindowPos3dMESA_ARG_EXPAND);
typedef void (*glWindowPos3dMESA_PTR)(glWindowPos3dMESA_ARG_EXPAND);
void glWindowPos3dv(glWindowPos3dv_ARG_EXPAND);
typedef void (*glWindowPos3dv_PTR)(glWindowPos3dv_ARG_EXPAND);
void glWindowPos3dvARB(glWindowPos3dvARB_ARG_EXPAND);
typedef void (*glWindowPos3dvARB_PTR)(glWindowPos3dvARB_ARG_EXPAND);
void glWindowPos3dvMESA(glWindowPos3dvMESA_ARG_EXPAND);
typedef void (*glWindowPos3dvMESA_PTR)(glWindowPos3dvMESA_ARG_EXPAND);
void glWindowPos3f(glWindowPos3f_ARG_EXPAND);
typedef void (*glWindowPos3f_PTR)(glWindowPos3f_ARG_EXPAND);
void glWindowPos3fARB(glWindowPos3fARB_ARG_EXPAND);
typedef void (*glWindowPos3fARB_PTR)(glWindowPos3fARB_ARG_EXPAND);
void glWindowPos3fMESA(glWindowPos3fMESA_ARG_EXPAND);
typedef void (*glWindowPos3fMESA_PTR)(glWindowPos3fMESA_ARG_EXPAND);
void glWindowPos3fv(glWindowPos3fv_ARG_EXPAND);
typedef void (*glWindowPos3fv_PTR)(glWindowPos3fv_ARG_EXPAND);
void glWindowPos3fvARB(glWindowPos3fvARB_ARG_EXPAND);
typedef void (*glWindowPos3fvARB_PTR)(glWindowPos3fvARB_ARG_EXPAND);
void glWindowPos3fvMESA(glWindowPos3fvMESA_ARG_EXPAND);
typedef void (*glWindowPos3fvMESA_PTR)(glWindowPos3fvMESA_ARG_EXPAND);
void glWindowPos3i(glWindowPos3i_ARG_EXPAND);
typedef void (*glWindowPos3i_PTR)(glWindowPos3i_ARG_EXPAND);
void glWindowPos3iARB(glWindowPos3iARB_ARG_EXPAND);
typedef void (*glWindowPos3iARB_PTR)(glWindowPos3iARB_ARG_EXPAND);
void glWindowPos3iMESA(glWindowPos3iMESA_ARG_EXPAND);
typedef void (*glWindowPos3iMESA_PTR)(glWindowPos3iMESA_ARG_EXPAND);
void glWindowPos3iv(glWindowPos3iv_ARG_EXPAND);
typedef void (*glWindowPos3iv_PTR)(glWindowPos3iv_ARG_EXPAND);
void glWindowPos3ivARB(glWindowPos3ivARB_ARG_EXPAND);
typedef void (*glWindowPos3ivARB_PTR)(glWindowPos3ivARB_ARG_EXPAND);
void glWindowPos3ivMESA(glWindowPos3ivMESA_ARG_EXPAND);
typedef void (*glWindowPos3ivMESA_PTR)(glWindowPos3ivMESA_ARG_EXPAND);
void glWindowPos3s(glWindowPos3s_ARG_EXPAND);
typedef void (*glWindowPos3s_PTR)(glWindowPos3s_ARG_EXPAND);
void glWindowPos3sARB(glWindowPos3sARB_ARG_EXPAND);
typedef void (*glWindowPos3sARB_PTR)(glWindowPos3sARB_ARG_EXPAND);
void glWindowPos3sMESA(glWindowPos3sMESA_ARG_EXPAND);
typedef void (*glWindowPos3sMESA_PTR)(glWindowPos3sMESA_ARG_EXPAND);
void glWindowPos3sv(glWindowPos3sv_ARG_EXPAND);
typedef void (*glWindowPos3sv_PTR)(glWindowPos3sv_ARG_EXPAND);
void glWindowPos3svARB(glWindowPos3svARB_ARG_EXPAND);
typedef void (*glWindowPos3svARB_PTR)(glWindowPos3svARB_ARG_EXPAND);
void glWindowPos3svMESA(glWindowPos3svMESA_ARG_EXPAND);
typedef void (*glWindowPos3svMESA_PTR)(glWindowPos3svMESA_ARG_EXPAND);
void glWindowPos4dMESA(glWindowPos4dMESA_ARG_EXPAND);
typedef void (*glWindowPos4dMESA_PTR)(glWindowPos4dMESA_ARG_EXPAND);
void glWindowPos4dvMESA(glWindowPos4dvMESA_ARG_EXPAND);
typedef void (*glWindowPos4dvMESA_PTR)(glWindowPos4dvMESA_ARG_EXPAND);
void glWindowPos4fMESA(glWindowPos4fMESA_ARG_EXPAND);
typedef void (*glWindowPos4fMESA_PTR)(glWindowPos4fMESA_ARG_EXPAND);
void glWindowPos4fvMESA(glWindowPos4fvMESA_ARG_EXPAND);
typedef void (*glWindowPos4fvMESA_PTR)(glWindowPos4fvMESA_ARG_EXPAND);
void glWindowPos4iMESA(glWindowPos4iMESA_ARG_EXPAND);
typedef void (*glWindowPos4iMESA_PTR)(glWindowPos4iMESA_ARG_EXPAND);
void glWindowPos4ivMESA(glWindowPos4ivMESA_ARG_EXPAND);
typedef void (*glWindowPos4ivMESA_PTR)(glWindowPos4ivMESA_ARG_EXPAND);
void glWindowPos4sMESA(glWindowPos4sMESA_ARG_EXPAND);
typedef void (*glWindowPos4sMESA_PTR)(glWindowPos4sMESA_ARG_EXPAND);
void glWindowPos4svMESA(glWindowPos4svMESA_ARG_EXPAND);
typedef void (*glWindowPos4svMESA_PTR)(glWindowPos4svMESA_ARG_EXPAND);
void glWriteMaskEXT(glWriteMaskEXT_ARG_EXPAND);
typedef void (*glWriteMaskEXT_PTR)(glWriteMaskEXT_ARG_EXPAND);
Bool glXAssociateDMPbufferSGIX(glXAssociateDMPbufferSGIX_ARG_EXPAND);
typedef Bool (*glXAssociateDMPbufferSGIX_PTR)(glXAssociateDMPbufferSGIX_ARG_EXPAND);
int glXBindChannelToWindowSGIX(glXBindChannelToWindowSGIX_ARG_EXPAND);
typedef int (*glXBindChannelToWindowSGIX_PTR)(glXBindChannelToWindowSGIX_ARG_EXPAND);
int glXBindHyperpipeSGIX(glXBindHyperpipeSGIX_ARG_EXPAND);
typedef int (*glXBindHyperpipeSGIX_PTR)(glXBindHyperpipeSGIX_ARG_EXPAND);
Bool glXBindSwapBarrierNV(glXBindSwapBarrierNV_ARG_EXPAND);
typedef Bool (*glXBindSwapBarrierNV_PTR)(glXBindSwapBarrierNV_ARG_EXPAND);
void glXBindSwapBarrierSGIX(glXBindSwapBarrierSGIX_ARG_EXPAND);
typedef void (*glXBindSwapBarrierSGIX_PTR)(glXBindSwapBarrierSGIX_ARG_EXPAND);
void glXBindTexImageEXT(glXBindTexImageEXT_ARG_EXPAND);
typedef void (*glXBindTexImageEXT_PTR)(glXBindTexImageEXT_ARG_EXPAND);
int glXBindVideoCaptureDeviceNV(glXBindVideoCaptureDeviceNV_ARG_EXPAND);
typedef int (*glXBindVideoCaptureDeviceNV_PTR)(glXBindVideoCaptureDeviceNV_ARG_EXPAND);
int glXBindVideoDeviceNV(glXBindVideoDeviceNV_ARG_EXPAND);
typedef int (*glXBindVideoDeviceNV_PTR)(glXBindVideoDeviceNV_ARG_EXPAND);
int glXBindVideoImageNV(glXBindVideoImageNV_ARG_EXPAND);
typedef int (*glXBindVideoImageNV_PTR)(glXBindVideoImageNV_ARG_EXPAND);
void glXChangeDrawableAttributes(glXChangeDrawableAttributes_ARG_EXPAND);
typedef void (*glXChangeDrawableAttributes_PTR)(glXChangeDrawableAttributes_ARG_EXPAND);
void glXChangeDrawableAttributesSGIX(glXChangeDrawableAttributesSGIX_ARG_EXPAND);
typedef void (*glXChangeDrawableAttributesSGIX_PTR)(glXChangeDrawableAttributesSGIX_ARG_EXPAND);
int glXChannelRectSGIX(glXChannelRectSGIX_ARG_EXPAND);
typedef int (*glXChannelRectSGIX_PTR)(glXChannelRectSGIX_ARG_EXPAND);
int glXChannelRectSyncSGIX(glXChannelRectSyncSGIX_ARG_EXPAND);
typedef int (*glXChannelRectSyncSGIX_PTR)(glXChannelRectSyncSGIX_ARG_EXPAND);
GLXFBConfig * glXChooseFBConfig(glXChooseFBConfig_ARG_EXPAND);
typedef GLXFBConfig * (*glXChooseFBConfig_PTR)(glXChooseFBConfig_ARG_EXPAND);
GLXFBConfigSGIX * glXChooseFBConfigSGIX(glXChooseFBConfigSGIX_ARG_EXPAND);
typedef GLXFBConfigSGIX * (*glXChooseFBConfigSGIX_PTR)(glXChooseFBConfigSGIX_ARG_EXPAND);
XVisualInfo * glXChooseVisual(glXChooseVisual_ARG_EXPAND);
typedef XVisualInfo * (*glXChooseVisual_PTR)(glXChooseVisual_ARG_EXPAND);
void glXClientInfo(glXClientInfo_ARG_EXPAND);
typedef void (*glXClientInfo_PTR)(glXClientInfo_ARG_EXPAND);
void glXCopyContext(glXCopyContext_ARG_EXPAND);
typedef void (*glXCopyContext_PTR)(glXCopyContext_ARG_EXPAND);
void glXCopyImageSubDataNV(glXCopyImageSubDataNV_ARG_EXPAND);
typedef void (*glXCopyImageSubDataNV_PTR)(glXCopyImageSubDataNV_ARG_EXPAND);
void glXCopySubBufferMESA(glXCopySubBufferMESA_ARG_EXPAND);
typedef void (*glXCopySubBufferMESA_PTR)(glXCopySubBufferMESA_ARG_EXPAND);
GLXContext glXCreateContext(glXCreateContext_ARG_EXPAND);
typedef GLXContext (*glXCreateContext_PTR)(glXCreateContext_ARG_EXPAND);
GLXContext glXCreateContextAttribsARB(glXCreateContextAttribsARB_ARG_EXPAND);
typedef GLXContext (*glXCreateContextAttribsARB_PTR)(glXCreateContextAttribsARB_ARG_EXPAND);
GLXContext glXCreateContextWithConfigSGIX(glXCreateContextWithConfigSGIX_ARG_EXPAND);
typedef GLXContext (*glXCreateContextWithConfigSGIX_PTR)(glXCreateContextWithConfigSGIX_ARG_EXPAND);
GLXPbufferSGIX glXCreateGLXPbufferSGIX(glXCreateGLXPbufferSGIX_ARG_EXPAND);
typedef GLXPbufferSGIX (*glXCreateGLXPbufferSGIX_PTR)(glXCreateGLXPbufferSGIX_ARG_EXPAND);
GLXPixmap glXCreateGLXPixmap(glXCreateGLXPixmap_ARG_EXPAND);
typedef GLXPixmap (*glXCreateGLXPixmap_PTR)(glXCreateGLXPixmap_ARG_EXPAND);
GLXPixmap glXCreateGLXPixmapMESA(glXCreateGLXPixmapMESA_ARG_EXPAND);
typedef GLXPixmap (*glXCreateGLXPixmapMESA_PTR)(glXCreateGLXPixmapMESA_ARG_EXPAND);
GLXPixmap glXCreateGLXPixmapWithConfigSGIX(glXCreateGLXPixmapWithConfigSGIX_ARG_EXPAND);
typedef GLXPixmap (*glXCreateGLXPixmapWithConfigSGIX_PTR)(glXCreateGLXPixmapWithConfigSGIX_ARG_EXPAND);
GLXVideoSourceSGIX glXCreateGLXVideoSourceSGIX(glXCreateGLXVideoSourceSGIX_ARG_EXPAND);
typedef GLXVideoSourceSGIX (*glXCreateGLXVideoSourceSGIX_PTR)(glXCreateGLXVideoSourceSGIX_ARG_EXPAND);
GLXContext glXCreateNewContext(glXCreateNewContext_ARG_EXPAND);
typedef GLXContext (*glXCreateNewContext_PTR)(glXCreateNewContext_ARG_EXPAND);
GLXPbuffer glXCreatePbuffer(glXCreatePbuffer_ARG_EXPAND);
typedef GLXPbuffer (*glXCreatePbuffer_PTR)(glXCreatePbuffer_ARG_EXPAND);
GLXPixmap glXCreatePixmap(glXCreatePixmap_ARG_EXPAND);
typedef GLXPixmap (*glXCreatePixmap_PTR)(glXCreatePixmap_ARG_EXPAND);
GLXWindow glXCreateWindow(glXCreateWindow_ARG_EXPAND);
typedef GLXWindow (*glXCreateWindow_PTR)(glXCreateWindow_ARG_EXPAND);
void glXCushionSGI(glXCushionSGI_ARG_EXPAND);
typedef void (*glXCushionSGI_PTR)(glXCushionSGI_ARG_EXPAND);
void glXDestroyContext(glXDestroyContext_ARG_EXPAND);
typedef void (*glXDestroyContext_PTR)(glXDestroyContext_ARG_EXPAND);
void glXDestroyGLXPbufferSGIX(glXDestroyGLXPbufferSGIX_ARG_EXPAND);
typedef void (*glXDestroyGLXPbufferSGIX_PTR)(glXDestroyGLXPbufferSGIX_ARG_EXPAND);
void glXDestroyGLXPixmap(glXDestroyGLXPixmap_ARG_EXPAND);
typedef void (*glXDestroyGLXPixmap_PTR)(glXDestroyGLXPixmap_ARG_EXPAND);
void glXDestroyGLXVideoSourceSGIX(glXDestroyGLXVideoSourceSGIX_ARG_EXPAND);
typedef void (*glXDestroyGLXVideoSourceSGIX_PTR)(glXDestroyGLXVideoSourceSGIX_ARG_EXPAND);
int glXDestroyHyperpipeConfigSGIX(glXDestroyHyperpipeConfigSGIX_ARG_EXPAND);
typedef int (*glXDestroyHyperpipeConfigSGIX_PTR)(glXDestroyHyperpipeConfigSGIX_ARG_EXPAND);
void glXDestroyPbuffer(glXDestroyPbuffer_ARG_EXPAND);
typedef void (*glXDestroyPbuffer_PTR)(glXDestroyPbuffer_ARG_EXPAND);
void glXDestroyPixmap(glXDestroyPixmap_ARG_EXPAND);
typedef void (*glXDestroyPixmap_PTR)(glXDestroyPixmap_ARG_EXPAND);
void glXDestroyWindow(glXDestroyWindow_ARG_EXPAND);
typedef void (*glXDestroyWindow_PTR)(glXDestroyWindow_ARG_EXPAND);
GLXVideoCaptureDeviceNV * glXEnumerateVideoCaptureDevicesNV(glXEnumerateVideoCaptureDevicesNV_ARG_EXPAND);
typedef GLXVideoCaptureDeviceNV * (*glXEnumerateVideoCaptureDevicesNV_PTR)(glXEnumerateVideoCaptureDevicesNV_ARG_EXPAND);
unsigned int * glXEnumerateVideoDevicesNV(glXEnumerateVideoDevicesNV_ARG_EXPAND);
typedef unsigned int * (*glXEnumerateVideoDevicesNV_PTR)(glXEnumerateVideoDevicesNV_ARG_EXPAND);
void glXFreeContextEXT(glXFreeContextEXT_ARG_EXPAND);
typedef void (*glXFreeContextEXT_PTR)(glXFreeContextEXT_ARG_EXPAND);
unsigned int glXGetAGPOffsetMESA(glXGetAGPOffsetMESA_ARG_EXPAND);
typedef unsigned int (*glXGetAGPOffsetMESA_PTR)(glXGetAGPOffsetMESA_ARG_EXPAND);
const char * glXGetClientString(glXGetClientString_ARG_EXPAND);
typedef const char * (*glXGetClientString_PTR)(glXGetClientString_ARG_EXPAND);
int glXGetConfig(glXGetConfig_ARG_EXPAND);
typedef int (*glXGetConfig_PTR)(glXGetConfig_ARG_EXPAND);
GLXContextID glXGetContextIDEXT(glXGetContextIDEXT_ARG_EXPAND);
typedef GLXContextID (*glXGetContextIDEXT_PTR)(glXGetContextIDEXT_ARG_EXPAND);
GLXContext glXGetCurrentContext(glXGetCurrentContext_ARG_EXPAND);
typedef GLXContext (*glXGetCurrentContext_PTR)(glXGetCurrentContext_ARG_EXPAND);
Display * glXGetCurrentDisplay(glXGetCurrentDisplay_ARG_EXPAND);
typedef Display * (*glXGetCurrentDisplay_PTR)(glXGetCurrentDisplay_ARG_EXPAND);
Display * glXGetCurrentDisplayEXT(glXGetCurrentDisplayEXT_ARG_EXPAND);
typedef Display * (*glXGetCurrentDisplayEXT_PTR)(glXGetCurrentDisplayEXT_ARG_EXPAND);
GLXDrawable glXGetCurrentDrawable(glXGetCurrentDrawable_ARG_EXPAND);
typedef GLXDrawable (*glXGetCurrentDrawable_PTR)(glXGetCurrentDrawable_ARG_EXPAND);
GLXDrawable glXGetCurrentReadDrawable(glXGetCurrentReadDrawable_ARG_EXPAND);
typedef GLXDrawable (*glXGetCurrentReadDrawable_PTR)(glXGetCurrentReadDrawable_ARG_EXPAND);
GLXDrawable glXGetCurrentReadDrawableSGI(glXGetCurrentReadDrawableSGI_ARG_EXPAND);
typedef GLXDrawable (*glXGetCurrentReadDrawableSGI_PTR)(glXGetCurrentReadDrawableSGI_ARG_EXPAND);
void glXGetDrawableAttributes(glXGetDrawableAttributes_ARG_EXPAND);
typedef void (*glXGetDrawableAttributes_PTR)(glXGetDrawableAttributes_ARG_EXPAND);
void glXGetDrawableAttributesSGIX(glXGetDrawableAttributesSGIX_ARG_EXPAND);
typedef void (*glXGetDrawableAttributesSGIX_PTR)(glXGetDrawableAttributesSGIX_ARG_EXPAND);
int glXGetFBConfigAttrib(glXGetFBConfigAttrib_ARG_EXPAND);
typedef int (*glXGetFBConfigAttrib_PTR)(glXGetFBConfigAttrib_ARG_EXPAND);
int glXGetFBConfigAttribSGIX(glXGetFBConfigAttribSGIX_ARG_EXPAND);
typedef int (*glXGetFBConfigAttribSGIX_PTR)(glXGetFBConfigAttribSGIX_ARG_EXPAND);
GLXFBConfigSGIX glXGetFBConfigFromVisualSGIX(glXGetFBConfigFromVisualSGIX_ARG_EXPAND);
typedef GLXFBConfigSGIX (*glXGetFBConfigFromVisualSGIX_PTR)(glXGetFBConfigFromVisualSGIX_ARG_EXPAND);
GLXFBConfig * glXGetFBConfigs(glXGetFBConfigs_ARG_EXPAND);
typedef GLXFBConfig * (*glXGetFBConfigs_PTR)(glXGetFBConfigs_ARG_EXPAND);
void glXGetFBConfigsSGIX(glXGetFBConfigsSGIX_ARG_EXPAND);
typedef void (*glXGetFBConfigsSGIX_PTR)(glXGetFBConfigsSGIX_ARG_EXPAND);
Bool glXGetMscRateOML(glXGetMscRateOML_ARG_EXPAND);
typedef Bool (*glXGetMscRateOML_PTR)(glXGetMscRateOML_ARG_EXPAND);
__GLXextFuncPtr glXGetProcAddress(glXGetProcAddress_ARG_EXPAND);
typedef __GLXextFuncPtr (*glXGetProcAddress_PTR)(glXGetProcAddress_ARG_EXPAND);
__GLXextFuncPtr glXGetProcAddressARB(glXGetProcAddressARB_ARG_EXPAND);
typedef __GLXextFuncPtr (*glXGetProcAddressARB_PTR)(glXGetProcAddressARB_ARG_EXPAND);
void glXGetSelectedEvent(glXGetSelectedEvent_ARG_EXPAND);
typedef void (*glXGetSelectedEvent_PTR)(glXGetSelectedEvent_ARG_EXPAND);
void glXGetSelectedEventSGIX(glXGetSelectedEventSGIX_ARG_EXPAND);
typedef void (*glXGetSelectedEventSGIX_PTR)(glXGetSelectedEventSGIX_ARG_EXPAND);
Bool glXGetSyncValuesOML(glXGetSyncValuesOML_ARG_EXPAND);
typedef Bool (*glXGetSyncValuesOML_PTR)(glXGetSyncValuesOML_ARG_EXPAND);
Status glXGetTransparentIndexSUN(glXGetTransparentIndexSUN_ARG_EXPAND);
typedef Status (*glXGetTransparentIndexSUN_PTR)(glXGetTransparentIndexSUN_ARG_EXPAND);
int glXGetVideoDeviceNV(glXGetVideoDeviceNV_ARG_EXPAND);
typedef int (*glXGetVideoDeviceNV_PTR)(glXGetVideoDeviceNV_ARG_EXPAND);
int glXGetVideoInfoNV(glXGetVideoInfoNV_ARG_EXPAND);
typedef int (*glXGetVideoInfoNV_PTR)(glXGetVideoInfoNV_ARG_EXPAND);
int glXGetVideoSyncSGI(glXGetVideoSyncSGI_ARG_EXPAND);
typedef int (*glXGetVideoSyncSGI_PTR)(glXGetVideoSyncSGI_ARG_EXPAND);
void glXGetVisualConfigs(glXGetVisualConfigs_ARG_EXPAND);
typedef void (*glXGetVisualConfigs_PTR)(glXGetVisualConfigs_ARG_EXPAND);
XVisualInfo * glXGetVisualFromFBConfig(glXGetVisualFromFBConfig_ARG_EXPAND);
typedef XVisualInfo * (*glXGetVisualFromFBConfig_PTR)(glXGetVisualFromFBConfig_ARG_EXPAND);
XVisualInfo * glXGetVisualFromFBConfigSGIX(glXGetVisualFromFBConfigSGIX_ARG_EXPAND);
typedef XVisualInfo * (*glXGetVisualFromFBConfigSGIX_PTR)(glXGetVisualFromFBConfigSGIX_ARG_EXPAND);
int glXHyperpipeAttribSGIX(glXHyperpipeAttribSGIX_ARG_EXPAND);
typedef int (*glXHyperpipeAttribSGIX_PTR)(glXHyperpipeAttribSGIX_ARG_EXPAND);
int glXHyperpipeConfigSGIX(glXHyperpipeConfigSGIX_ARG_EXPAND);
typedef int (*glXHyperpipeConfigSGIX_PTR)(glXHyperpipeConfigSGIX_ARG_EXPAND);
GLXContext glXImportContextEXT(glXImportContextEXT_ARG_EXPAND);
typedef GLXContext (*glXImportContextEXT_PTR)(glXImportContextEXT_ARG_EXPAND);
Bool glXIsDirect(glXIsDirect_ARG_EXPAND);
typedef Bool (*glXIsDirect_PTR)(glXIsDirect_ARG_EXPAND);
Bool glXJoinSwapGroupNV(glXJoinSwapGroupNV_ARG_EXPAND);
typedef Bool (*glXJoinSwapGroupNV_PTR)(glXJoinSwapGroupNV_ARG_EXPAND);
void glXJoinSwapGroupSGIX(glXJoinSwapGroupSGIX_ARG_EXPAND);
typedef void (*glXJoinSwapGroupSGIX_PTR)(glXJoinSwapGroupSGIX_ARG_EXPAND);
void glXLockVideoCaptureDeviceNV(glXLockVideoCaptureDeviceNV_ARG_EXPAND);
typedef void (*glXLockVideoCaptureDeviceNV_PTR)(glXLockVideoCaptureDeviceNV_ARG_EXPAND);
Bool glXMakeContextCurrent(glXMakeContextCurrent_ARG_EXPAND);
typedef Bool (*glXMakeContextCurrent_PTR)(glXMakeContextCurrent_ARG_EXPAND);
Bool glXMakeCurrent(glXMakeCurrent_ARG_EXPAND);
typedef Bool (*glXMakeCurrent_PTR)(glXMakeCurrent_ARG_EXPAND);
Bool glXMakeCurrentReadSGI(glXMakeCurrentReadSGI_ARG_EXPAND);
typedef Bool (*glXMakeCurrentReadSGI_PTR)(glXMakeCurrentReadSGI_ARG_EXPAND);
int glXQueryChannelDeltasSGIX(glXQueryChannelDeltasSGIX_ARG_EXPAND);
typedef int (*glXQueryChannelDeltasSGIX_PTR)(glXQueryChannelDeltasSGIX_ARG_EXPAND);
int glXQueryChannelRectSGIX(glXQueryChannelRectSGIX_ARG_EXPAND);
typedef int (*glXQueryChannelRectSGIX_PTR)(glXQueryChannelRectSGIX_ARG_EXPAND);
int glXQueryContext(glXQueryContext_ARG_EXPAND);
typedef int (*glXQueryContext_PTR)(glXQueryContext_ARG_EXPAND);
int glXQueryContextInfoEXT(glXQueryContextInfoEXT_ARG_EXPAND);
typedef int (*glXQueryContextInfoEXT_PTR)(glXQueryContextInfoEXT_ARG_EXPAND);
void glXQueryDrawable(glXQueryDrawable_ARG_EXPAND);
typedef void (*glXQueryDrawable_PTR)(glXQueryDrawable_ARG_EXPAND);
Bool glXQueryExtension(glXQueryExtension_ARG_EXPAND);
typedef Bool (*glXQueryExtension_PTR)(glXQueryExtension_ARG_EXPAND);
const char * glXQueryExtensionsString(glXQueryExtensionsString_ARG_EXPAND);
typedef const char * (*glXQueryExtensionsString_PTR)(glXQueryExtensionsString_ARG_EXPAND);
Bool glXQueryFrameCountNV(glXQueryFrameCountNV_ARG_EXPAND);
typedef Bool (*glXQueryFrameCountNV_PTR)(glXQueryFrameCountNV_ARG_EXPAND);
int glXQueryGLXPbufferSGIX(glXQueryGLXPbufferSGIX_ARG_EXPAND);
typedef int (*glXQueryGLXPbufferSGIX_PTR)(glXQueryGLXPbufferSGIX_ARG_EXPAND);
int glXQueryHyperpipeAttribSGIX(glXQueryHyperpipeAttribSGIX_ARG_EXPAND);
typedef int (*glXQueryHyperpipeAttribSGIX_PTR)(glXQueryHyperpipeAttribSGIX_ARG_EXPAND);
int glXQueryHyperpipeBestAttribSGIX(glXQueryHyperpipeBestAttribSGIX_ARG_EXPAND);
typedef int (*glXQueryHyperpipeBestAttribSGIX_PTR)(glXQueryHyperpipeBestAttribSGIX_ARG_EXPAND);
GLXHyperpipeConfigSGIX * glXQueryHyperpipeConfigSGIX(glXQueryHyperpipeConfigSGIX_ARG_EXPAND);
typedef GLXHyperpipeConfigSGIX * (*glXQueryHyperpipeConfigSGIX_PTR)(glXQueryHyperpipeConfigSGIX_ARG_EXPAND);
GLXHyperpipeNetworkSGIX * glXQueryHyperpipeNetworkSGIX(glXQueryHyperpipeNetworkSGIX_ARG_EXPAND);
typedef GLXHyperpipeNetworkSGIX * (*glXQueryHyperpipeNetworkSGIX_PTR)(glXQueryHyperpipeNetworkSGIX_ARG_EXPAND);
Bool glXQueryMaxSwapBarriersSGIX(glXQueryMaxSwapBarriersSGIX_ARG_EXPAND);
typedef Bool (*glXQueryMaxSwapBarriersSGIX_PTR)(glXQueryMaxSwapBarriersSGIX_ARG_EXPAND);
Bool glXQueryMaxSwapGroupsNV(glXQueryMaxSwapGroupsNV_ARG_EXPAND);
typedef Bool (*glXQueryMaxSwapGroupsNV_PTR)(glXQueryMaxSwapGroupsNV_ARG_EXPAND);
const char * glXQueryServerString(glXQueryServerString_ARG_EXPAND);
typedef const char * (*glXQueryServerString_PTR)(glXQueryServerString_ARG_EXPAND);
Bool glXQuerySwapGroupNV(glXQuerySwapGroupNV_ARG_EXPAND);
typedef Bool (*glXQuerySwapGroupNV_PTR)(glXQuerySwapGroupNV_ARG_EXPAND);
Bool glXQueryVersion(glXQueryVersion_ARG_EXPAND);
typedef Bool (*glXQueryVersion_PTR)(glXQueryVersion_ARG_EXPAND);
int glXQueryVideoCaptureDeviceNV(glXQueryVideoCaptureDeviceNV_ARG_EXPAND);
typedef int (*glXQueryVideoCaptureDeviceNV_PTR)(glXQueryVideoCaptureDeviceNV_ARG_EXPAND);
Bool glXReleaseBuffersMESA(glXReleaseBuffersMESA_ARG_EXPAND);
typedef Bool (*glXReleaseBuffersMESA_PTR)(glXReleaseBuffersMESA_ARG_EXPAND);
void glXReleaseTexImageEXT(glXReleaseTexImageEXT_ARG_EXPAND);
typedef void (*glXReleaseTexImageEXT_PTR)(glXReleaseTexImageEXT_ARG_EXPAND);
void glXReleaseVideoCaptureDeviceNV(glXReleaseVideoCaptureDeviceNV_ARG_EXPAND);
typedef void (*glXReleaseVideoCaptureDeviceNV_PTR)(glXReleaseVideoCaptureDeviceNV_ARG_EXPAND);
int glXReleaseVideoDeviceNV(glXReleaseVideoDeviceNV_ARG_EXPAND);
typedef int (*glXReleaseVideoDeviceNV_PTR)(glXReleaseVideoDeviceNV_ARG_EXPAND);
int glXReleaseVideoImageNV(glXReleaseVideoImageNV_ARG_EXPAND);
typedef int (*glXReleaseVideoImageNV_PTR)(glXReleaseVideoImageNV_ARG_EXPAND);
void glXRender(glXRender_ARG_EXPAND);
typedef void (*glXRender_PTR)(glXRender_ARG_EXPAND);
void glXRenderLarge(glXRenderLarge_ARG_EXPAND);
typedef void (*glXRenderLarge_PTR)(glXRenderLarge_ARG_EXPAND);
Bool glXResetFrameCountNV(glXResetFrameCountNV_ARG_EXPAND);
typedef Bool (*glXResetFrameCountNV_PTR)(glXResetFrameCountNV_ARG_EXPAND);
void glXSelectEvent(glXSelectEvent_ARG_EXPAND);
typedef void (*glXSelectEvent_PTR)(glXSelectEvent_ARG_EXPAND);
void glXSelectEventSGIX(glXSelectEventSGIX_ARG_EXPAND);
typedef void (*glXSelectEventSGIX_PTR)(glXSelectEventSGIX_ARG_EXPAND);
int glXSendPbufferToVideoNV(glXSendPbufferToVideoNV_ARG_EXPAND);
typedef int (*glXSendPbufferToVideoNV_PTR)(glXSendPbufferToVideoNV_ARG_EXPAND);
Bool glXSet3DfxModeMESA(glXSet3DfxModeMESA_ARG_EXPAND);
typedef Bool (*glXSet3DfxModeMESA_PTR)(glXSet3DfxModeMESA_ARG_EXPAND);
void glXSwapBuffers(glXSwapBuffers_ARG_EXPAND);
typedef void (*glXSwapBuffers_PTR)(glXSwapBuffers_ARG_EXPAND);
int64_t glXSwapBuffersMscOML(glXSwapBuffersMscOML_ARG_EXPAND);
typedef int64_t (*glXSwapBuffersMscOML_PTR)(glXSwapBuffersMscOML_ARG_EXPAND);
void glXSwapIntervalEXT(glXSwapIntervalEXT_ARG_EXPAND);
typedef void (*glXSwapIntervalEXT_PTR)(glXSwapIntervalEXT_ARG_EXPAND);
int glXSwapIntervalMESA(glXSwapIntervalMESA_ARG_EXPAND);
typedef int (*glXSwapIntervalMESA_PTR)(glXSwapIntervalMESA_ARG_EXPAND);
int glXSwapIntervalSGI(glXSwapIntervalSGI_ARG_EXPAND);
typedef int (*glXSwapIntervalSGI_PTR)(glXSwapIntervalSGI_ARG_EXPAND);
void glXUseXFont(glXUseXFont_ARG_EXPAND);
typedef void (*glXUseXFont_PTR)(glXUseXFont_ARG_EXPAND);
void glXVendorPrivate(glXVendorPrivate_ARG_EXPAND);
typedef void (*glXVendorPrivate_PTR)(glXVendorPrivate_ARG_EXPAND);
void glXVendorPrivateWithReply(glXVendorPrivateWithReply_ARG_EXPAND);
typedef void (*glXVendorPrivateWithReply_PTR)(glXVendorPrivateWithReply_ARG_EXPAND);
Bool glXWaitForMscOML(glXWaitForMscOML_ARG_EXPAND);
typedef Bool (*glXWaitForMscOML_PTR)(glXWaitForMscOML_ARG_EXPAND);
Bool glXWaitForSbcOML(glXWaitForSbcOML_ARG_EXPAND);
typedef Bool (*glXWaitForSbcOML_PTR)(glXWaitForSbcOML_ARG_EXPAND);
void glXWaitGL(glXWaitGL_ARG_EXPAND);
typedef void (*glXWaitGL_PTR)(glXWaitGL_ARG_EXPAND);
int glXWaitVideoSyncSGI(glXWaitVideoSyncSGI_ARG_EXPAND);
typedef int (*glXWaitVideoSyncSGI_PTR)(glXWaitVideoSyncSGI_ARG_EXPAND);
void glXWaitX(glXWaitX_ARG_EXPAND);
typedef void (*glXWaitX_PTR)(glXWaitX_ARG_EXPAND);


#define pack_eglBindAPI(api) ({ \
    eglBindAPI_PACKED *packed_data = malloc(sizeof(eglBindAPI_PACKED)); \
    packed_data->index = eglBindAPI_INDEX; \
    packed_data->args.a1 = (EGLenum)api; \
    (packed_call_t *)packed_data; \
})
#define pack_eglBindTexImage(dpy, surface, buffer) ({ \
    eglBindTexImage_PACKED *packed_data = malloc(sizeof(eglBindTexImage_PACKED)); \
    packed_data->index = eglBindTexImage_INDEX; \
    packed_data->args.a1 = (EGLDisplay)dpy; \
    packed_data->args.a2 = (EGLSurface)surface; \
    packed_data->args.a3 = (EGLint)buffer; \
    (packed_call_t *)packed_data; \
})
#define pack_eglChooseConfig(dpy, attrib_list, configs, config_size, num_config) ({ \
    eglChooseConfig_PACKED *packed_data = malloc(sizeof(eglChooseConfig_PACKED)); \
    packed_data->index = eglChooseConfig_INDEX; \
    packed_data->args.a1 = (EGLDisplay)dpy; \
    packed_data->args.a2 = (EGLint *)attrib_list; \
    packed_data->args.a3 = (EGLConfig *)configs; \
    packed_data->args.a4 = (EGLint)config_size; \
    packed_data->args.a5 = (EGLint *)num_config; \
    (packed_call_t *)packed_data; \
})
#define pack_eglClientWaitSyncKHR(dpy, sync, flags, timeout) ({ \
    eglClientWaitSyncKHR_PACKED *packed_data = malloc(sizeof(eglClientWaitSyncKHR_PACKED)); \
    packed_data->index = eglClientWaitSyncKHR_INDEX; \
    packed_data->args.a1 = (EGLDisplay)dpy; \
    packed_data->args.a2 = (EGLSyncKHR)sync; \
    packed_data->args.a3 = (EGLint)flags; \
    packed_data->args.a4 = (EGLTimeKHR)timeout; \
    (packed_call_t *)packed_data; \
})
#define pack_eglClientWaitSyncNV(sync, flags, timeout) ({ \
    eglClientWaitSyncNV_PACKED *packed_data = malloc(sizeof(eglClientWaitSyncNV_PACKED)); \
    packed_data->index = eglClientWaitSyncNV_INDEX; \
    packed_data->args.a1 = (EGLSyncNV)sync; \
    packed_data->args.a2 = (EGLint)flags; \
    packed_data->args.a3 = (EGLTimeNV)timeout; \
    (packed_call_t *)packed_data; \
})
#define pack_eglCopyBuffers(dpy, surface, target) ({ \
    eglCopyBuffers_PACKED *packed_data = malloc(sizeof(eglCopyBuffers_PACKED)); \
    packed_data->index = eglCopyBuffers_INDEX; \
    packed_data->args.a1 = (EGLDisplay)dpy; \
    packed_data->args.a2 = (EGLSurface)surface; \
    packed_data->args.a3 = (EGLNativePixmapType)target; \
    (packed_call_t *)packed_data; \
})
#define pack_eglCreateContext(dpy, config, share_context, attrib_list) ({ \
    eglCreateContext_PACKED *packed_data = malloc(sizeof(eglCreateContext_PACKED)); \
    packed_data->index = eglCreateContext_INDEX; \
    packed_data->args.a1 = (EGLDisplay)dpy; \
    packed_data->args.a2 = (EGLConfig)config; \
    packed_data->args.a3 = (EGLContext)share_context; \
    packed_data->args.a4 = (EGLint *)attrib_list; \
    (packed_call_t *)packed_data; \
})
#define pack_eglCreateDRMImageMESA(dpy, attrib_list) ({ \
    eglCreateDRMImageMESA_PACKED *packed_data = malloc(sizeof(eglCreateDRMImageMESA_PACKED)); \
    packed_data->index = eglCreateDRMImageMESA_INDEX; \
    packed_data->args.a1 = (EGLDisplay)dpy; \
    packed_data->args.a2 = (EGLint *)attrib_list; \
    (packed_call_t *)packed_data; \
})
#define pack_eglCreateFenceSyncNV(dpy, condition, attrib_list) ({ \
    eglCreateFenceSyncNV_PACKED *packed_data = malloc(sizeof(eglCreateFenceSyncNV_PACKED)); \
    packed_data->index = eglCreateFenceSyncNV_INDEX; \
    packed_data->args.a1 = (EGLDisplay)dpy; \
    packed_data->args.a2 = (EGLenum)condition; \
    packed_data->args.a3 = (EGLint *)attrib_list; \
    (packed_call_t *)packed_data; \
})
#define pack_eglCreateImageKHR(dpy, ctx, target, buffer, attrib_list) ({ \
    eglCreateImageKHR_PACKED *packed_data = malloc(sizeof(eglCreateImageKHR_PACKED)); \
    packed_data->index = eglCreateImageKHR_INDEX; \
    packed_data->args.a1 = (EGLDisplay)dpy; \
    packed_data->args.a2 = (EGLContext)ctx; \
    packed_data->args.a3 = (EGLenum)target; \
    packed_data->args.a4 = (EGLClientBuffer)buffer; \
    packed_data->args.a5 = (EGLint *)attrib_list; \
    (packed_call_t *)packed_data; \
})
#define pack_eglCreatePbufferFromClientBuffer(dpy, buftype, buffer, config, attrib_list) ({ \
    eglCreatePbufferFromClientBuffer_PACKED *packed_data = malloc(sizeof(eglCreatePbufferFromClientBuffer_PACKED)); \
    packed_data->index = eglCreatePbufferFromClientBuffer_INDEX; \
    packed_data->args.a1 = (EGLDisplay)dpy; \
    packed_data->args.a2 = (EGLenum)buftype; \
    packed_data->args.a3 = (EGLClientBuffer)buffer; \
    packed_data->args.a4 = (EGLConfig)config; \
    packed_data->args.a5 = (EGLint *)attrib_list; \
    (packed_call_t *)packed_data; \
})
#define pack_eglCreatePbufferSurface(dpy, config, attrib_list) ({ \
    eglCreatePbufferSurface_PACKED *packed_data = malloc(sizeof(eglCreatePbufferSurface_PACKED)); \
    packed_data->index = eglCreatePbufferSurface_INDEX; \
    packed_data->args.a1 = (EGLDisplay)dpy; \
    packed_data->args.a2 = (EGLConfig)config; \
    packed_data->args.a3 = (EGLint *)attrib_list; \
    (packed_call_t *)packed_data; \
})
#define pack_eglCreatePixmapSurface(dpy, config, pixmap, attrib_list) ({ \
    eglCreatePixmapSurface_PACKED *packed_data = malloc(sizeof(eglCreatePixmapSurface_PACKED)); \
    packed_data->index = eglCreatePixmapSurface_INDEX; \
    packed_data->args.a1 = (EGLDisplay)dpy; \
    packed_data->args.a2 = (EGLConfig)config; \
    packed_data->args.a3 = (EGLNativePixmapType)pixmap; \
    packed_data->args.a4 = (EGLint *)attrib_list; \
    (packed_call_t *)packed_data; \
})
#define pack_eglCreatePixmapSurfaceHI(dpy, config, pixmap) ({ \
    eglCreatePixmapSurfaceHI_PACKED *packed_data = malloc(sizeof(eglCreatePixmapSurfaceHI_PACKED)); \
    packed_data->index = eglCreatePixmapSurfaceHI_INDEX; \
    packed_data->args.a1 = (EGLDisplay)dpy; \
    packed_data->args.a2 = (EGLConfig)config; \
    packed_data->args.a3 = (struct EGLClientPixmapHI *)pixmap; \
    (packed_call_t *)packed_data; \
})
#define pack_eglCreateStreamFromFileDescriptorKHR(dpy, file_descriptor) ({ \
    eglCreateStreamFromFileDescriptorKHR_PACKED *packed_data = malloc(sizeof(eglCreateStreamFromFileDescriptorKHR_PACKED)); \
    packed_data->index = eglCreateStreamFromFileDescriptorKHR_INDEX; \
    packed_data->args.a1 = (EGLDisplay)dpy; \
    packed_data->args.a2 = (EGLNativeFileDescriptorKHR)file_descriptor; \
    (packed_call_t *)packed_data; \
})
#define pack_eglCreateStreamKHR(dpy, attrib_list) ({ \
    eglCreateStreamKHR_PACKED *packed_data = malloc(sizeof(eglCreateStreamKHR_PACKED)); \
    packed_data->index = eglCreateStreamKHR_INDEX; \
    packed_data->args.a1 = (EGLDisplay)dpy; \
    packed_data->args.a2 = (EGLint *)attrib_list; \
    (packed_call_t *)packed_data; \
})
#define pack_eglCreateStreamProducerSurfaceKHR(dpy, config, stream, attrib_list) ({ \
    eglCreateStreamProducerSurfaceKHR_PACKED *packed_data = malloc(sizeof(eglCreateStreamProducerSurfaceKHR_PACKED)); \
    packed_data->index = eglCreateStreamProducerSurfaceKHR_INDEX; \
    packed_data->args.a1 = (EGLDisplay)dpy; \
    packed_data->args.a2 = (EGLConfig)config; \
    packed_data->args.a3 = (EGLStreamKHR)stream; \
    packed_data->args.a4 = (EGLint *)attrib_list; \
    (packed_call_t *)packed_data; \
})
#define pack_eglCreateSyncKHR(dpy, type, attrib_list) ({ \
    eglCreateSyncKHR_PACKED *packed_data = malloc(sizeof(eglCreateSyncKHR_PACKED)); \
    packed_data->index = eglCreateSyncKHR_INDEX; \
    packed_data->args.a1 = (EGLDisplay)dpy; \
    packed_data->args.a2 = (EGLenum)type; \
    packed_data->args.a3 = (EGLint *)attrib_list; \
    (packed_call_t *)packed_data; \
})
#define pack_eglCreateWindowSurface(dpy, config, win, attrib_list) ({ \
    eglCreateWindowSurface_PACKED *packed_data = malloc(sizeof(eglCreateWindowSurface_PACKED)); \
    packed_data->index = eglCreateWindowSurface_INDEX; \
    packed_data->args.a1 = (EGLDisplay)dpy; \
    packed_data->args.a2 = (EGLConfig)config; \
    packed_data->args.a3 = (EGLNativeWindowType)win; \
    packed_data->args.a4 = (EGLint *)attrib_list; \
    (packed_call_t *)packed_data; \
})
#define pack_eglDestroyContext(dpy, ctx) ({ \
    eglDestroyContext_PACKED *packed_data = malloc(sizeof(eglDestroyContext_PACKED)); \
    packed_data->index = eglDestroyContext_INDEX; \
    packed_data->args.a1 = (EGLDisplay)dpy; \
    packed_data->args.a2 = (EGLContext)ctx; \
    (packed_call_t *)packed_data; \
})
#define pack_eglDestroyImageKHR(dpy, image) ({ \
    eglDestroyImageKHR_PACKED *packed_data = malloc(sizeof(eglDestroyImageKHR_PACKED)); \
    packed_data->index = eglDestroyImageKHR_INDEX; \
    packed_data->args.a1 = (EGLDisplay)dpy; \
    packed_data->args.a2 = (EGLImageKHR)image; \
    (packed_call_t *)packed_data; \
})
#define pack_eglDestroyStreamKHR(dpy, stream) ({ \
    eglDestroyStreamKHR_PACKED *packed_data = malloc(sizeof(eglDestroyStreamKHR_PACKED)); \
    packed_data->index = eglDestroyStreamKHR_INDEX; \
    packed_data->args.a1 = (EGLDisplay)dpy; \
    packed_data->args.a2 = (EGLStreamKHR)stream; \
    (packed_call_t *)packed_data; \
})
#define pack_eglDestroySurface(dpy, surface) ({ \
    eglDestroySurface_PACKED *packed_data = malloc(sizeof(eglDestroySurface_PACKED)); \
    packed_data->index = eglDestroySurface_INDEX; \
    packed_data->args.a1 = (EGLDisplay)dpy; \
    packed_data->args.a2 = (EGLSurface)surface; \
    (packed_call_t *)packed_data; \
})
#define pack_eglDestroySyncKHR(dpy, sync) ({ \
    eglDestroySyncKHR_PACKED *packed_data = malloc(sizeof(eglDestroySyncKHR_PACKED)); \
    packed_data->index = eglDestroySyncKHR_INDEX; \
    packed_data->args.a1 = (EGLDisplay)dpy; \
    packed_data->args.a2 = (EGLSyncKHR)sync; \
    (packed_call_t *)packed_data; \
})
#define pack_eglDestroySyncNV(sync) ({ \
    eglDestroySyncNV_PACKED *packed_data = malloc(sizeof(eglDestroySyncNV_PACKED)); \
    packed_data->index = eglDestroySyncNV_INDEX; \
    packed_data->args.a1 = (EGLSyncNV)sync; \
    (packed_call_t *)packed_data; \
})
#define pack_eglDupNativeFenceFDANDROID(dpy, sync) ({ \
    eglDupNativeFenceFDANDROID_PACKED *packed_data = malloc(sizeof(eglDupNativeFenceFDANDROID_PACKED)); \
    packed_data->index = eglDupNativeFenceFDANDROID_INDEX; \
    packed_data->args.a1 = (EGLDisplay)dpy; \
    packed_data->args.a2 = (EGLSyncKHR)sync; \
    (packed_call_t *)packed_data; \
})
#define pack_eglExportDRMImageMESA(dpy, image, name, handle, stride) ({ \
    eglExportDRMImageMESA_PACKED *packed_data = malloc(sizeof(eglExportDRMImageMESA_PACKED)); \
    packed_data->index = eglExportDRMImageMESA_INDEX; \
    packed_data->args.a1 = (EGLDisplay)dpy; \
    packed_data->args.a2 = (EGLImageKHR)image; \
    packed_data->args.a3 = (EGLint *)name; \
    packed_data->args.a4 = (EGLint *)handle; \
    packed_data->args.a5 = (EGLint *)stride; \
    (packed_call_t *)packed_data; \
})
#define pack_eglFenceNV(sync) ({ \
    eglFenceNV_PACKED *packed_data = malloc(sizeof(eglFenceNV_PACKED)); \
    packed_data->index = eglFenceNV_INDEX; \
    packed_data->args.a1 = (EGLSyncNV)sync; \
    (packed_call_t *)packed_data; \
})
#define pack_eglGetConfigAttrib(dpy, config, attribute, value) ({ \
    eglGetConfigAttrib_PACKED *packed_data = malloc(sizeof(eglGetConfigAttrib_PACKED)); \
    packed_data->index = eglGetConfigAttrib_INDEX; \
    packed_data->args.a1 = (EGLDisplay)dpy; \
    packed_data->args.a2 = (EGLConfig)config; \
    packed_data->args.a3 = (EGLint)attribute; \
    packed_data->args.a4 = (EGLint *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_eglGetConfigs(dpy, configs, config_size, num_config) ({ \
    eglGetConfigs_PACKED *packed_data = malloc(sizeof(eglGetConfigs_PACKED)); \
    packed_data->index = eglGetConfigs_INDEX; \
    packed_data->args.a1 = (EGLDisplay)dpy; \
    packed_data->args.a2 = (EGLConfig *)configs; \
    packed_data->args.a3 = (EGLint)config_size; \
    packed_data->args.a4 = (EGLint *)num_config; \
    (packed_call_t *)packed_data; \
})
#define pack_eglGetCurrentContext() ({ \
    eglGetCurrentContext_PACKED *packed_data = malloc(sizeof(eglGetCurrentContext_PACKED)); \
    packed_data->index = eglGetCurrentContext_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_eglGetCurrentDisplay() ({ \
    eglGetCurrentDisplay_PACKED *packed_data = malloc(sizeof(eglGetCurrentDisplay_PACKED)); \
    packed_data->index = eglGetCurrentDisplay_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_eglGetCurrentSurface(readdraw) ({ \
    eglGetCurrentSurface_PACKED *packed_data = malloc(sizeof(eglGetCurrentSurface_PACKED)); \
    packed_data->index = eglGetCurrentSurface_INDEX; \
    packed_data->args.a1 = (EGLint)readdraw; \
    (packed_call_t *)packed_data; \
})
#define pack_eglGetDisplay(display_id) ({ \
    eglGetDisplay_PACKED *packed_data = malloc(sizeof(eglGetDisplay_PACKED)); \
    packed_data->index = eglGetDisplay_INDEX; \
    packed_data->args.a1 = (EGLNativeDisplayType)display_id; \
    (packed_call_t *)packed_data; \
})
#define pack_eglGetError() ({ \
    eglGetError_PACKED *packed_data = malloc(sizeof(eglGetError_PACKED)); \
    packed_data->index = eglGetError_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_eglGetProcAddress(procname) ({ \
    eglGetProcAddress_PACKED *packed_data = malloc(sizeof(eglGetProcAddress_PACKED)); \
    packed_data->index = eglGetProcAddress_INDEX; \
    packed_data->args.a1 = (char *)procname; \
    (packed_call_t *)packed_data; \
})
#define pack_eglGetStreamFileDescriptorKHR(dpy, stream) ({ \
    eglGetStreamFileDescriptorKHR_PACKED *packed_data = malloc(sizeof(eglGetStreamFileDescriptorKHR_PACKED)); \
    packed_data->index = eglGetStreamFileDescriptorKHR_INDEX; \
    packed_data->args.a1 = (EGLDisplay)dpy; \
    packed_data->args.a2 = (EGLStreamKHR)stream; \
    (packed_call_t *)packed_data; \
})
#define pack_eglGetSyncAttribKHR(dpy, sync, attribute, value) ({ \
    eglGetSyncAttribKHR_PACKED *packed_data = malloc(sizeof(eglGetSyncAttribKHR_PACKED)); \
    packed_data->index = eglGetSyncAttribKHR_INDEX; \
    packed_data->args.a1 = (EGLDisplay)dpy; \
    packed_data->args.a2 = (EGLSyncKHR)sync; \
    packed_data->args.a3 = (EGLint)attribute; \
    packed_data->args.a4 = (EGLint *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_eglGetSyncAttribNV(sync, attribute, value) ({ \
    eglGetSyncAttribNV_PACKED *packed_data = malloc(sizeof(eglGetSyncAttribNV_PACKED)); \
    packed_data->index = eglGetSyncAttribNV_INDEX; \
    packed_data->args.a1 = (EGLSyncNV)sync; \
    packed_data->args.a2 = (EGLint)attribute; \
    packed_data->args.a3 = (EGLint *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_eglGetSystemTimeFrequencyNV() ({ \
    eglGetSystemTimeFrequencyNV_PACKED *packed_data = malloc(sizeof(eglGetSystemTimeFrequencyNV_PACKED)); \
    packed_data->index = eglGetSystemTimeFrequencyNV_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_eglGetSystemTimeNV() ({ \
    eglGetSystemTimeNV_PACKED *packed_data = malloc(sizeof(eglGetSystemTimeNV_PACKED)); \
    packed_data->index = eglGetSystemTimeNV_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_eglInitialize(dpy, major, minor) ({ \
    eglInitialize_PACKED *packed_data = malloc(sizeof(eglInitialize_PACKED)); \
    packed_data->index = eglInitialize_INDEX; \
    packed_data->args.a1 = (EGLDisplay)dpy; \
    packed_data->args.a2 = (EGLint *)major; \
    packed_data->args.a3 = (EGLint *)minor; \
    (packed_call_t *)packed_data; \
})
#define pack_eglLockSurfaceKHR(display, surface, attrib_list) ({ \
    eglLockSurfaceKHR_PACKED *packed_data = malloc(sizeof(eglLockSurfaceKHR_PACKED)); \
    packed_data->index = eglLockSurfaceKHR_INDEX; \
    packed_data->args.a1 = (EGLDisplay)display; \
    packed_data->args.a2 = (EGLSurface)surface; \
    packed_data->args.a3 = (EGLint *)attrib_list; \
    (packed_call_t *)packed_data; \
})
#define pack_eglMakeCurrent(dpy, draw, read, ctx) ({ \
    eglMakeCurrent_PACKED *packed_data = malloc(sizeof(eglMakeCurrent_PACKED)); \
    packed_data->index = eglMakeCurrent_INDEX; \
    packed_data->args.a1 = (EGLDisplay)dpy; \
    packed_data->args.a2 = (EGLSurface)draw; \
    packed_data->args.a3 = (EGLSurface)read; \
    packed_data->args.a4 = (EGLContext)ctx; \
    (packed_call_t *)packed_data; \
})
#define pack_eglPostSubBufferNV(dpy, surface, x, y, width, height) ({ \
    eglPostSubBufferNV_PACKED *packed_data = malloc(sizeof(eglPostSubBufferNV_PACKED)); \
    packed_data->index = eglPostSubBufferNV_INDEX; \
    packed_data->args.a1 = (EGLDisplay)dpy; \
    packed_data->args.a2 = (EGLSurface)surface; \
    packed_data->args.a3 = (EGLint)x; \
    packed_data->args.a4 = (EGLint)y; \
    packed_data->args.a5 = (EGLint)width; \
    packed_data->args.a6 = (EGLint)height; \
    (packed_call_t *)packed_data; \
})
#define pack_eglQueryAPI() ({ \
    eglQueryAPI_PACKED *packed_data = malloc(sizeof(eglQueryAPI_PACKED)); \
    packed_data->index = eglQueryAPI_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_eglQueryContext(dpy, ctx, attribute, value) ({ \
    eglQueryContext_PACKED *packed_data = malloc(sizeof(eglQueryContext_PACKED)); \
    packed_data->index = eglQueryContext_INDEX; \
    packed_data->args.a1 = (EGLDisplay)dpy; \
    packed_data->args.a2 = (EGLContext)ctx; \
    packed_data->args.a3 = (EGLint)attribute; \
    packed_data->args.a4 = (EGLint *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_eglQueryNativeDisplayNV(dpy, display_id) ({ \
    eglQueryNativeDisplayNV_PACKED *packed_data = malloc(sizeof(eglQueryNativeDisplayNV_PACKED)); \
    packed_data->index = eglQueryNativeDisplayNV_INDEX; \
    packed_data->args.a1 = (EGLDisplay)dpy; \
    packed_data->args.a2 = (EGLNativeDisplayType *)display_id; \
    (packed_call_t *)packed_data; \
})
#define pack_eglQueryNativePixmapNV(dpy, surf, pixmap) ({ \
    eglQueryNativePixmapNV_PACKED *packed_data = malloc(sizeof(eglQueryNativePixmapNV_PACKED)); \
    packed_data->index = eglQueryNativePixmapNV_INDEX; \
    packed_data->args.a1 = (EGLDisplay)dpy; \
    packed_data->args.a2 = (EGLSurface)surf; \
    packed_data->args.a3 = (EGLNativePixmapType *)pixmap; \
    (packed_call_t *)packed_data; \
})
#define pack_eglQueryNativeWindowNV(dpy, surf, window) ({ \
    eglQueryNativeWindowNV_PACKED *packed_data = malloc(sizeof(eglQueryNativeWindowNV_PACKED)); \
    packed_data->index = eglQueryNativeWindowNV_INDEX; \
    packed_data->args.a1 = (EGLDisplay)dpy; \
    packed_data->args.a2 = (EGLSurface)surf; \
    packed_data->args.a3 = (EGLNativeWindowType *)window; \
    (packed_call_t *)packed_data; \
})
#define pack_eglQueryStreamKHR(dpy, stream, attribute, value) ({ \
    eglQueryStreamKHR_PACKED *packed_data = malloc(sizeof(eglQueryStreamKHR_PACKED)); \
    packed_data->index = eglQueryStreamKHR_INDEX; \
    packed_data->args.a1 = (EGLDisplay)dpy; \
    packed_data->args.a2 = (EGLStreamKHR)stream; \
    packed_data->args.a3 = (EGLenum)attribute; \
    packed_data->args.a4 = (EGLint *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_eglQueryStreamTimeKHR(dpy, stream, attribute, value) ({ \
    eglQueryStreamTimeKHR_PACKED *packed_data = malloc(sizeof(eglQueryStreamTimeKHR_PACKED)); \
    packed_data->index = eglQueryStreamTimeKHR_INDEX; \
    packed_data->args.a1 = (EGLDisplay)dpy; \
    packed_data->args.a2 = (EGLStreamKHR)stream; \
    packed_data->args.a3 = (EGLenum)attribute; \
    packed_data->args.a4 = (EGLTimeKHR *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_eglQueryStreamu64KHR(dpy, stream, attribute, value) ({ \
    eglQueryStreamu64KHR_PACKED *packed_data = malloc(sizeof(eglQueryStreamu64KHR_PACKED)); \
    packed_data->index = eglQueryStreamu64KHR_INDEX; \
    packed_data->args.a1 = (EGLDisplay)dpy; \
    packed_data->args.a2 = (EGLStreamKHR)stream; \
    packed_data->args.a3 = (EGLenum)attribute; \
    packed_data->args.a4 = (EGLuint64KHR *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_eglQueryString(dpy, name) ({ \
    eglQueryString_PACKED *packed_data = malloc(sizeof(eglQueryString_PACKED)); \
    packed_data->index = eglQueryString_INDEX; \
    packed_data->args.a1 = (EGLDisplay)dpy; \
    packed_data->args.a2 = (EGLint)name; \
    (packed_call_t *)packed_data; \
})
#define pack_eglQuerySurface(dpy, surface, attribute, value) ({ \
    eglQuerySurface_PACKED *packed_data = malloc(sizeof(eglQuerySurface_PACKED)); \
    packed_data->index = eglQuerySurface_INDEX; \
    packed_data->args.a1 = (EGLDisplay)dpy; \
    packed_data->args.a2 = (EGLSurface)surface; \
    packed_data->args.a3 = (EGLint)attribute; \
    packed_data->args.a4 = (EGLint *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_eglQuerySurfacePointerANGLE(dpy, surface, attribute, value) ({ \
    eglQuerySurfacePointerANGLE_PACKED *packed_data = malloc(sizeof(eglQuerySurfacePointerANGLE_PACKED)); \
    packed_data->index = eglQuerySurfacePointerANGLE_INDEX; \
    packed_data->args.a1 = (EGLDisplay)dpy; \
    packed_data->args.a2 = (EGLSurface)surface; \
    packed_data->args.a3 = (EGLint)attribute; \
    packed_data->args.a4 = (void **)value; \
    (packed_call_t *)packed_data; \
})
#define pack_eglReleaseTexImage(dpy, surface, buffer) ({ \
    eglReleaseTexImage_PACKED *packed_data = malloc(sizeof(eglReleaseTexImage_PACKED)); \
    packed_data->index = eglReleaseTexImage_INDEX; \
    packed_data->args.a1 = (EGLDisplay)dpy; \
    packed_data->args.a2 = (EGLSurface)surface; \
    packed_data->args.a3 = (EGLint)buffer; \
    (packed_call_t *)packed_data; \
})
#define pack_eglReleaseThread() ({ \
    eglReleaseThread_PACKED *packed_data = malloc(sizeof(eglReleaseThread_PACKED)); \
    packed_data->index = eglReleaseThread_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_eglSignalSyncKHR(dpy, sync, mode) ({ \
    eglSignalSyncKHR_PACKED *packed_data = malloc(sizeof(eglSignalSyncKHR_PACKED)); \
    packed_data->index = eglSignalSyncKHR_INDEX; \
    packed_data->args.a1 = (EGLDisplay)dpy; \
    packed_data->args.a2 = (EGLSyncKHR)sync; \
    packed_data->args.a3 = (EGLenum)mode; \
    (packed_call_t *)packed_data; \
})
#define pack_eglSignalSyncNV(sync, mode) ({ \
    eglSignalSyncNV_PACKED *packed_data = malloc(sizeof(eglSignalSyncNV_PACKED)); \
    packed_data->index = eglSignalSyncNV_INDEX; \
    packed_data->args.a1 = (EGLSyncNV)sync; \
    packed_data->args.a2 = (EGLenum)mode; \
    (packed_call_t *)packed_data; \
})
#define pack_eglStreamAttribKHR(dpy, stream, attribute, value) ({ \
    eglStreamAttribKHR_PACKED *packed_data = malloc(sizeof(eglStreamAttribKHR_PACKED)); \
    packed_data->index = eglStreamAttribKHR_INDEX; \
    packed_data->args.a1 = (EGLDisplay)dpy; \
    packed_data->args.a2 = (EGLStreamKHR)stream; \
    packed_data->args.a3 = (EGLenum)attribute; \
    packed_data->args.a4 = (EGLint)value; \
    (packed_call_t *)packed_data; \
})
#define pack_eglStreamConsumerAcquireKHR(dpy, stream) ({ \
    eglStreamConsumerAcquireKHR_PACKED *packed_data = malloc(sizeof(eglStreamConsumerAcquireKHR_PACKED)); \
    packed_data->index = eglStreamConsumerAcquireKHR_INDEX; \
    packed_data->args.a1 = (EGLDisplay)dpy; \
    packed_data->args.a2 = (EGLStreamKHR)stream; \
    (packed_call_t *)packed_data; \
})
#define pack_eglStreamConsumerGLTextureExternalKHR(dpy, stream) ({ \
    eglStreamConsumerGLTextureExternalKHR_PACKED *packed_data = malloc(sizeof(eglStreamConsumerGLTextureExternalKHR_PACKED)); \
    packed_data->index = eglStreamConsumerGLTextureExternalKHR_INDEX; \
    packed_data->args.a1 = (EGLDisplay)dpy; \
    packed_data->args.a2 = (EGLStreamKHR)stream; \
    (packed_call_t *)packed_data; \
})
#define pack_eglStreamConsumerReleaseKHR(dpy, stream) ({ \
    eglStreamConsumerReleaseKHR_PACKED *packed_data = malloc(sizeof(eglStreamConsumerReleaseKHR_PACKED)); \
    packed_data->index = eglStreamConsumerReleaseKHR_INDEX; \
    packed_data->args.a1 = (EGLDisplay)dpy; \
    packed_data->args.a2 = (EGLStreamKHR)stream; \
    (packed_call_t *)packed_data; \
})
#define pack_eglSurfaceAttrib(dpy, surface, attribute, value) ({ \
    eglSurfaceAttrib_PACKED *packed_data = malloc(sizeof(eglSurfaceAttrib_PACKED)); \
    packed_data->index = eglSurfaceAttrib_INDEX; \
    packed_data->args.a1 = (EGLDisplay)dpy; \
    packed_data->args.a2 = (EGLSurface)surface; \
    packed_data->args.a3 = (EGLint)attribute; \
    packed_data->args.a4 = (EGLint)value; \
    (packed_call_t *)packed_data; \
})
#define pack_eglSwapBuffers(dpy, surface) ({ \
    eglSwapBuffers_PACKED *packed_data = malloc(sizeof(eglSwapBuffers_PACKED)); \
    packed_data->index = eglSwapBuffers_INDEX; \
    packed_data->args.a1 = (EGLDisplay)dpy; \
    packed_data->args.a2 = (EGLSurface)surface; \
    (packed_call_t *)packed_data; \
})
#define pack_eglSwapBuffersWithDamageEXT(dpy, surface, rects, n_rects) ({ \
    eglSwapBuffersWithDamageEXT_PACKED *packed_data = malloc(sizeof(eglSwapBuffersWithDamageEXT_PACKED)); \
    packed_data->index = eglSwapBuffersWithDamageEXT_INDEX; \
    packed_data->args.a1 = (EGLDisplay)dpy; \
    packed_data->args.a2 = (EGLSurface)surface; \
    packed_data->args.a3 = (EGLint *)rects; \
    packed_data->args.a4 = (EGLint)n_rects; \
    (packed_call_t *)packed_data; \
})
#define pack_eglSwapInterval(dpy, interval) ({ \
    eglSwapInterval_PACKED *packed_data = malloc(sizeof(eglSwapInterval_PACKED)); \
    packed_data->index = eglSwapInterval_INDEX; \
    packed_data->args.a1 = (EGLDisplay)dpy; \
    packed_data->args.a2 = (EGLint)interval; \
    (packed_call_t *)packed_data; \
})
#define pack_eglTerminate(dpy) ({ \
    eglTerminate_PACKED *packed_data = malloc(sizeof(eglTerminate_PACKED)); \
    packed_data->index = eglTerminate_INDEX; \
    packed_data->args.a1 = (EGLDisplay)dpy; \
    (packed_call_t *)packed_data; \
})
#define pack_eglUnlockSurfaceKHR(display, surface) ({ \
    eglUnlockSurfaceKHR_PACKED *packed_data = malloc(sizeof(eglUnlockSurfaceKHR_PACKED)); \
    packed_data->index = eglUnlockSurfaceKHR_INDEX; \
    packed_data->args.a1 = (EGLDisplay)display; \
    packed_data->args.a2 = (EGLSurface)surface; \
    (packed_call_t *)packed_data; \
})
#define pack_eglWaitClient() ({ \
    eglWaitClient_PACKED *packed_data = malloc(sizeof(eglWaitClient_PACKED)); \
    packed_data->index = eglWaitClient_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_eglWaitGL() ({ \
    eglWaitGL_PACKED *packed_data = malloc(sizeof(eglWaitGL_PACKED)); \
    packed_data->index = eglWaitGL_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_eglWaitNative(engine) ({ \
    eglWaitNative_PACKED *packed_data = malloc(sizeof(eglWaitNative_PACKED)); \
    packed_data->index = eglWaitNative_INDEX; \
    packed_data->args.a1 = (EGLint)engine; \
    (packed_call_t *)packed_data; \
})
#define pack_eglWaitSyncKHR(dpy, sync, flags) ({ \
    eglWaitSyncKHR_PACKED *packed_data = malloc(sizeof(eglWaitSyncKHR_PACKED)); \
    packed_data->index = eglWaitSyncKHR_INDEX; \
    packed_data->args.a1 = (EGLDisplay)dpy; \
    packed_data->args.a2 = (EGLSyncKHR)sync; \
    packed_data->args.a3 = (EGLint)flags; \
    (packed_call_t *)packed_data; \
})
#define pack_glAccum(op, value) ({ \
    glAccum_PACKED *packed_data = malloc(sizeof(glAccum_PACKED)); \
    packed_data->index = glAccum_INDEX; \
    packed_data->args.a1 = (GLenum)op; \
    packed_data->args.a2 = (GLfloat)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glAccumxOES(op, value) ({ \
    glAccumxOES_PACKED *packed_data = malloc(sizeof(glAccumxOES_PACKED)); \
    packed_data->index = glAccumxOES_INDEX; \
    packed_data->args.a1 = (GLenum)op; \
    packed_data->args.a2 = (GLfixed)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glActiveProgramEXT(program) ({ \
    glActiveProgramEXT_PACKED *packed_data = malloc(sizeof(glActiveProgramEXT_PACKED)); \
    packed_data->index = glActiveProgramEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    (packed_call_t *)packed_data; \
})
#define pack_glActiveShaderProgram(pipeline, program) ({ \
    glActiveShaderProgram_PACKED *packed_data = malloc(sizeof(glActiveShaderProgram_PACKED)); \
    packed_data->index = glActiveShaderProgram_INDEX; \
    packed_data->args.a1 = (GLuint)pipeline; \
    packed_data->args.a2 = (GLuint)program; \
    (packed_call_t *)packed_data; \
})
#define pack_glActiveStencilFaceEXT(face) ({ \
    glActiveStencilFaceEXT_PACKED *packed_data = malloc(sizeof(glActiveStencilFaceEXT_PACKED)); \
    packed_data->index = glActiveStencilFaceEXT_INDEX; \
    packed_data->args.a1 = (GLenum)face; \
    (packed_call_t *)packed_data; \
})
#define pack_glActiveTexture(texture) ({ \
    glActiveTexture_PACKED *packed_data = malloc(sizeof(glActiveTexture_PACKED)); \
    packed_data->index = glActiveTexture_INDEX; \
    packed_data->args.a1 = (GLenum)texture; \
    (packed_call_t *)packed_data; \
})
#define pack_glActiveTextureARB(texture) ({ \
    glActiveTextureARB_PACKED *packed_data = malloc(sizeof(glActiveTextureARB_PACKED)); \
    packed_data->index = glActiveTextureARB_INDEX; \
    packed_data->args.a1 = (GLenum)texture; \
    (packed_call_t *)packed_data; \
})
#define pack_glActiveVaryingNV(program, name) ({ \
    glActiveVaryingNV_PACKED *packed_data = malloc(sizeof(glActiveVaryingNV_PACKED)); \
    packed_data->index = glActiveVaryingNV_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLchar *)name; \
    (packed_call_t *)packed_data; \
})
#define pack_glAlphaFragmentOp1ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod) ({ \
    glAlphaFragmentOp1ATI_PACKED *packed_data = malloc(sizeof(glAlphaFragmentOp1ATI_PACKED)); \
    packed_data->index = glAlphaFragmentOp1ATI_INDEX; \
    packed_data->args.a1 = (GLenum)op; \
    packed_data->args.a2 = (GLuint)dst; \
    packed_data->args.a3 = (GLuint)dstMod; \
    packed_data->args.a4 = (GLuint)arg1; \
    packed_data->args.a5 = (GLuint)arg1Rep; \
    packed_data->args.a6 = (GLuint)arg1Mod; \
    (packed_call_t *)packed_data; \
})
#define pack_glAlphaFragmentOp2ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod) ({ \
    glAlphaFragmentOp2ATI_PACKED *packed_data = malloc(sizeof(glAlphaFragmentOp2ATI_PACKED)); \
    packed_data->index = glAlphaFragmentOp2ATI_INDEX; \
    packed_data->args.a1 = (GLenum)op; \
    packed_data->args.a2 = (GLuint)dst; \
    packed_data->args.a3 = (GLuint)dstMod; \
    packed_data->args.a4 = (GLuint)arg1; \
    packed_data->args.a5 = (GLuint)arg1Rep; \
    packed_data->args.a6 = (GLuint)arg1Mod; \
    packed_data->args.a7 = (GLuint)arg2; \
    packed_data->args.a8 = (GLuint)arg2Rep; \
    packed_data->args.a9 = (GLuint)arg2Mod; \
    (packed_call_t *)packed_data; \
})
#define pack_glAlphaFragmentOp3ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod) ({ \
    glAlphaFragmentOp3ATI_PACKED *packed_data = malloc(sizeof(glAlphaFragmentOp3ATI_PACKED)); \
    packed_data->index = glAlphaFragmentOp3ATI_INDEX; \
    packed_data->args.a1 = (GLenum)op; \
    packed_data->args.a2 = (GLuint)dst; \
    packed_data->args.a3 = (GLuint)dstMod; \
    packed_data->args.a4 = (GLuint)arg1; \
    packed_data->args.a5 = (GLuint)arg1Rep; \
    packed_data->args.a6 = (GLuint)arg1Mod; \
    packed_data->args.a7 = (GLuint)arg2; \
    packed_data->args.a8 = (GLuint)arg2Rep; \
    packed_data->args.a9 = (GLuint)arg2Mod; \
    packed_data->args.a10 = (GLuint)arg3; \
    packed_data->args.a11 = (GLuint)arg3Rep; \
    packed_data->args.a12 = (GLuint)arg3Mod; \
    (packed_call_t *)packed_data; \
})
#define pack_glAlphaFunc(func, ref) ({ \
    glAlphaFunc_PACKED *packed_data = malloc(sizeof(glAlphaFunc_PACKED)); \
    packed_data->index = glAlphaFunc_INDEX; \
    packed_data->args.a1 = (GLenum)func; \
    packed_data->args.a2 = (GLclampf)ref; \
    (packed_call_t *)packed_data; \
})
#define pack_glAlphaFuncx(func, ref) ({ \
    glAlphaFuncx_PACKED *packed_data = malloc(sizeof(glAlphaFuncx_PACKED)); \
    packed_data->index = glAlphaFuncx_INDEX; \
    packed_data->args.a1 = (GLenum)func; \
    packed_data->args.a2 = (GLclampx)ref; \
    (packed_call_t *)packed_data; \
})
#define pack_glAlphaFuncxOES(func, ref) ({ \
    glAlphaFuncxOES_PACKED *packed_data = malloc(sizeof(glAlphaFuncxOES_PACKED)); \
    packed_data->index = glAlphaFuncxOES_INDEX; \
    packed_data->args.a1 = (GLenum)func; \
    packed_data->args.a2 = (GLfixed)ref; \
    (packed_call_t *)packed_data; \
})
#define pack_glApplyTextureEXT(mode) ({ \
    glApplyTextureEXT_PACKED *packed_data = malloc(sizeof(glApplyTextureEXT_PACKED)); \
    packed_data->index = glApplyTextureEXT_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    (packed_call_t *)packed_data; \
})
#define pack_glAreProgramsResidentNV(n, programs, residences) ({ \
    glAreProgramsResidentNV_PACKED *packed_data = malloc(sizeof(glAreProgramsResidentNV_PACKED)); \
    packed_data->index = glAreProgramsResidentNV_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLuint *)programs; \
    packed_data->args.a3 = (GLboolean *)residences; \
    (packed_call_t *)packed_data; \
})
#define pack_glAreTexturesResident(n, textures, residences) ({ \
    glAreTexturesResident_PACKED *packed_data = malloc(sizeof(glAreTexturesResident_PACKED)); \
    packed_data->index = glAreTexturesResident_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLuint *)textures; \
    packed_data->args.a3 = (GLboolean *)residences; \
    (packed_call_t *)packed_data; \
})
#define pack_glAreTexturesResidentEXT(n, textures, residences) ({ \
    glAreTexturesResidentEXT_PACKED *packed_data = malloc(sizeof(glAreTexturesResidentEXT_PACKED)); \
    packed_data->index = glAreTexturesResidentEXT_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLuint *)textures; \
    packed_data->args.a3 = (GLboolean *)residences; \
    (packed_call_t *)packed_data; \
})
#define pack_glArrayElement(i) ({ \
    glArrayElement_PACKED *packed_data = malloc(sizeof(glArrayElement_PACKED)); \
    packed_data->index = glArrayElement_INDEX; \
    packed_data->args.a1 = (GLint)i; \
    (packed_call_t *)packed_data; \
})
#define pack_glArrayElementEXT(i) ({ \
    glArrayElementEXT_PACKED *packed_data = malloc(sizeof(glArrayElementEXT_PACKED)); \
    packed_data->index = glArrayElementEXT_INDEX; \
    packed_data->args.a1 = (GLint)i; \
    (packed_call_t *)packed_data; \
})
#define pack_glArrayObjectATI(array, size, type, stride, buffer, offset) ({ \
    glArrayObjectATI_PACKED *packed_data = malloc(sizeof(glArrayObjectATI_PACKED)); \
    packed_data->index = glArrayObjectATI_INDEX; \
    packed_data->args.a1 = (GLenum)array; \
    packed_data->args.a2 = (GLint)size; \
    packed_data->args.a3 = (GLenum)type; \
    packed_data->args.a4 = (GLsizei)stride; \
    packed_data->args.a5 = (GLuint)buffer; \
    packed_data->args.a6 = (GLuint)offset; \
    (packed_call_t *)packed_data; \
})
#define pack_glAsyncMarkerSGIX(marker) ({ \
    glAsyncMarkerSGIX_PACKED *packed_data = malloc(sizeof(glAsyncMarkerSGIX_PACKED)); \
    packed_data->index = glAsyncMarkerSGIX_INDEX; \
    packed_data->args.a1 = (GLuint)marker; \
    (packed_call_t *)packed_data; \
})
#define pack_glAttachObjectARB(containerObj, obj) ({ \
    glAttachObjectARB_PACKED *packed_data = malloc(sizeof(glAttachObjectARB_PACKED)); \
    packed_data->index = glAttachObjectARB_INDEX; \
    packed_data->args.a1 = (GLhandleARB)containerObj; \
    packed_data->args.a2 = (GLhandleARB)obj; \
    (packed_call_t *)packed_data; \
})
#define pack_glAttachShader(program, shader) ({ \
    glAttachShader_PACKED *packed_data = malloc(sizeof(glAttachShader_PACKED)); \
    packed_data->index = glAttachShader_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLuint)shader; \
    (packed_call_t *)packed_data; \
})
#define pack_glBegin(mode) ({ \
    glBegin_PACKED *packed_data = malloc(sizeof(glBegin_PACKED)); \
    packed_data->index = glBegin_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    (packed_call_t *)packed_data; \
})
#define pack_glBeginConditionalRender(id, mode) ({ \
    glBeginConditionalRender_PACKED *packed_data = malloc(sizeof(glBeginConditionalRender_PACKED)); \
    packed_data->index = glBeginConditionalRender_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    packed_data->args.a2 = (GLenum)mode; \
    (packed_call_t *)packed_data; \
})
#define pack_glBeginConditionalRenderNV(id, mode) ({ \
    glBeginConditionalRenderNV_PACKED *packed_data = malloc(sizeof(glBeginConditionalRenderNV_PACKED)); \
    packed_data->index = glBeginConditionalRenderNV_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    packed_data->args.a2 = (GLenum)mode; \
    (packed_call_t *)packed_data; \
})
#define pack_glBeginConditionalRenderNVX(id) ({ \
    glBeginConditionalRenderNVX_PACKED *packed_data = malloc(sizeof(glBeginConditionalRenderNVX_PACKED)); \
    packed_data->index = glBeginConditionalRenderNVX_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    (packed_call_t *)packed_data; \
})
#define pack_glBeginFragmentShaderATI() ({ \
    glBeginFragmentShaderATI_PACKED *packed_data = malloc(sizeof(glBeginFragmentShaderATI_PACKED)); \
    packed_data->index = glBeginFragmentShaderATI_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glBeginOcclusionQueryNV(id) ({ \
    glBeginOcclusionQueryNV_PACKED *packed_data = malloc(sizeof(glBeginOcclusionQueryNV_PACKED)); \
    packed_data->index = glBeginOcclusionQueryNV_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    (packed_call_t *)packed_data; \
})
#define pack_glBeginPerfMonitorAMD(monitor) ({ \
    glBeginPerfMonitorAMD_PACKED *packed_data = malloc(sizeof(glBeginPerfMonitorAMD_PACKED)); \
    packed_data->index = glBeginPerfMonitorAMD_INDEX; \
    packed_data->args.a1 = (GLuint)monitor; \
    (packed_call_t *)packed_data; \
})
#define pack_glBeginQuery(target, id) ({ \
    glBeginQuery_PACKED *packed_data = malloc(sizeof(glBeginQuery_PACKED)); \
    packed_data->index = glBeginQuery_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)id; \
    (packed_call_t *)packed_data; \
})
#define pack_glBeginQueryARB(target, id) ({ \
    glBeginQueryARB_PACKED *packed_data = malloc(sizeof(glBeginQueryARB_PACKED)); \
    packed_data->index = glBeginQueryARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)id; \
    (packed_call_t *)packed_data; \
})
#define pack_glBeginQueryIndexed(target, index, id) ({ \
    glBeginQueryIndexed_PACKED *packed_data = malloc(sizeof(glBeginQueryIndexed_PACKED)); \
    packed_data->index = glBeginQueryIndexed_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLuint)id; \
    (packed_call_t *)packed_data; \
})
#define pack_glBeginTransformFeedback(primitiveMode) ({ \
    glBeginTransformFeedback_PACKED *packed_data = malloc(sizeof(glBeginTransformFeedback_PACKED)); \
    packed_data->index = glBeginTransformFeedback_INDEX; \
    packed_data->args.a1 = (GLenum)primitiveMode; \
    (packed_call_t *)packed_data; \
})
#define pack_glBeginTransformFeedbackEXT(primitiveMode) ({ \
    glBeginTransformFeedbackEXT_PACKED *packed_data = malloc(sizeof(glBeginTransformFeedbackEXT_PACKED)); \
    packed_data->index = glBeginTransformFeedbackEXT_INDEX; \
    packed_data->args.a1 = (GLenum)primitiveMode; \
    (packed_call_t *)packed_data; \
})
#define pack_glBeginTransformFeedbackNV(primitiveMode) ({ \
    glBeginTransformFeedbackNV_PACKED *packed_data = malloc(sizeof(glBeginTransformFeedbackNV_PACKED)); \
    packed_data->index = glBeginTransformFeedbackNV_INDEX; \
    packed_data->args.a1 = (GLenum)primitiveMode; \
    (packed_call_t *)packed_data; \
})
#define pack_glBeginVertexShaderEXT() ({ \
    glBeginVertexShaderEXT_PACKED *packed_data = malloc(sizeof(glBeginVertexShaderEXT_PACKED)); \
    packed_data->index = glBeginVertexShaderEXT_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glBeginVideoCaptureNV(video_capture_slot) ({ \
    glBeginVideoCaptureNV_PACKED *packed_data = malloc(sizeof(glBeginVideoCaptureNV_PACKED)); \
    packed_data->index = glBeginVideoCaptureNV_INDEX; \
    packed_data->args.a1 = (GLuint)video_capture_slot; \
    (packed_call_t *)packed_data; \
})
#define pack_glBindAttribLocation(program, index, name) ({ \
    glBindAttribLocation_PACKED *packed_data = malloc(sizeof(glBindAttribLocation_PACKED)); \
    packed_data->index = glBindAttribLocation_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLchar *)name; \
    (packed_call_t *)packed_data; \
})
#define pack_glBindAttribLocationARB(programObj, index, name) ({ \
    glBindAttribLocationARB_PACKED *packed_data = malloc(sizeof(glBindAttribLocationARB_PACKED)); \
    packed_data->index = glBindAttribLocationARB_INDEX; \
    packed_data->args.a1 = (GLhandleARB)programObj; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLcharARB *)name; \
    (packed_call_t *)packed_data; \
})
#define pack_glBindBuffer(target, buffer) ({ \
    glBindBuffer_PACKED *packed_data = malloc(sizeof(glBindBuffer_PACKED)); \
    packed_data->index = glBindBuffer_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)buffer; \
    (packed_call_t *)packed_data; \
})
#define pack_glBindBufferARB(target, buffer) ({ \
    glBindBufferARB_PACKED *packed_data = malloc(sizeof(glBindBufferARB_PACKED)); \
    packed_data->index = glBindBufferARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)buffer; \
    (packed_call_t *)packed_data; \
})
#define pack_glBindBufferBase(target, index, buffer) ({ \
    glBindBufferBase_PACKED *packed_data = malloc(sizeof(glBindBufferBase_PACKED)); \
    packed_data->index = glBindBufferBase_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLuint)buffer; \
    (packed_call_t *)packed_data; \
})
#define pack_glBindBufferBaseEXT(target, index, buffer) ({ \
    glBindBufferBaseEXT_PACKED *packed_data = malloc(sizeof(glBindBufferBaseEXT_PACKED)); \
    packed_data->index = glBindBufferBaseEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLuint)buffer; \
    (packed_call_t *)packed_data; \
})
#define pack_glBindBufferBaseNV(target, index, buffer) ({ \
    glBindBufferBaseNV_PACKED *packed_data = malloc(sizeof(glBindBufferBaseNV_PACKED)); \
    packed_data->index = glBindBufferBaseNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLuint)buffer; \
    (packed_call_t *)packed_data; \
})
#define pack_glBindBufferOffsetEXT(target, index, buffer, offset) ({ \
    glBindBufferOffsetEXT_PACKED *packed_data = malloc(sizeof(glBindBufferOffsetEXT_PACKED)); \
    packed_data->index = glBindBufferOffsetEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLuint)buffer; \
    packed_data->args.a4 = (GLintptr)offset; \
    (packed_call_t *)packed_data; \
})
#define pack_glBindBufferOffsetNV(target, index, buffer, offset) ({ \
    glBindBufferOffsetNV_PACKED *packed_data = malloc(sizeof(glBindBufferOffsetNV_PACKED)); \
    packed_data->index = glBindBufferOffsetNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLuint)buffer; \
    packed_data->args.a4 = (GLintptr)offset; \
    (packed_call_t *)packed_data; \
})
#define pack_glBindBufferRange(target, index, buffer, offset, size) ({ \
    glBindBufferRange_PACKED *packed_data = malloc(sizeof(glBindBufferRange_PACKED)); \
    packed_data->index = glBindBufferRange_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLuint)buffer; \
    packed_data->args.a4 = (GLintptr)offset; \
    packed_data->args.a5 = (GLsizeiptr)size; \
    (packed_call_t *)packed_data; \
})
#define pack_glBindBufferRangeEXT(target, index, buffer, offset, size) ({ \
    glBindBufferRangeEXT_PACKED *packed_data = malloc(sizeof(glBindBufferRangeEXT_PACKED)); \
    packed_data->index = glBindBufferRangeEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLuint)buffer; \
    packed_data->args.a4 = (GLintptr)offset; \
    packed_data->args.a5 = (GLsizeiptr)size; \
    (packed_call_t *)packed_data; \
})
#define pack_glBindBufferRangeNV(target, index, buffer, offset, size) ({ \
    glBindBufferRangeNV_PACKED *packed_data = malloc(sizeof(glBindBufferRangeNV_PACKED)); \
    packed_data->index = glBindBufferRangeNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLuint)buffer; \
    packed_data->args.a4 = (GLintptr)offset; \
    packed_data->args.a5 = (GLsizeiptr)size; \
    (packed_call_t *)packed_data; \
})
#define pack_glBindFragDataLocation(program, color, name) ({ \
    glBindFragDataLocation_PACKED *packed_data = malloc(sizeof(glBindFragDataLocation_PACKED)); \
    packed_data->index = glBindFragDataLocation_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLuint)color; \
    packed_data->args.a3 = (GLchar *)name; \
    (packed_call_t *)packed_data; \
})
#define pack_glBindFragDataLocationEXT(program, color, name) ({ \
    glBindFragDataLocationEXT_PACKED *packed_data = malloc(sizeof(glBindFragDataLocationEXT_PACKED)); \
    packed_data->index = glBindFragDataLocationEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLuint)color; \
    packed_data->args.a3 = (GLchar *)name; \
    (packed_call_t *)packed_data; \
})
#define pack_glBindFragDataLocationIndexed(program, colorNumber, index, name) ({ \
    glBindFragDataLocationIndexed_PACKED *packed_data = malloc(sizeof(glBindFragDataLocationIndexed_PACKED)); \
    packed_data->index = glBindFragDataLocationIndexed_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLuint)colorNumber; \
    packed_data->args.a3 = (GLuint)index; \
    packed_data->args.a4 = (GLchar *)name; \
    (packed_call_t *)packed_data; \
})
#define pack_glBindFragmentShaderATI(id) ({ \
    glBindFragmentShaderATI_PACKED *packed_data = malloc(sizeof(glBindFragmentShaderATI_PACKED)); \
    packed_data->index = glBindFragmentShaderATI_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    (packed_call_t *)packed_data; \
})
#define pack_glBindFramebuffer(target, framebuffer) ({ \
    glBindFramebuffer_PACKED *packed_data = malloc(sizeof(glBindFramebuffer_PACKED)); \
    packed_data->index = glBindFramebuffer_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)framebuffer; \
    (packed_call_t *)packed_data; \
})
#define pack_glBindFramebufferEXT(target, framebuffer) ({ \
    glBindFramebufferEXT_PACKED *packed_data = malloc(sizeof(glBindFramebufferEXT_PACKED)); \
    packed_data->index = glBindFramebufferEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)framebuffer; \
    (packed_call_t *)packed_data; \
})
#define pack_glBindImageTexture(unit, texture, level, layered, layer, access, format) ({ \
    glBindImageTexture_PACKED *packed_data = malloc(sizeof(glBindImageTexture_PACKED)); \
    packed_data->index = glBindImageTexture_INDEX; \
    packed_data->args.a1 = (GLuint)unit; \
    packed_data->args.a2 = (GLuint)texture; \
    packed_data->args.a3 = (GLint)level; \
    packed_data->args.a4 = (GLboolean)layered; \
    packed_data->args.a5 = (GLint)layer; \
    packed_data->args.a6 = (GLenum)access; \
    packed_data->args.a7 = (GLenum)format; \
    (packed_call_t *)packed_data; \
})
#define pack_glBindImageTextureEXT(index, texture, level, layered, layer, access, format) ({ \
    glBindImageTextureEXT_PACKED *packed_data = malloc(sizeof(glBindImageTextureEXT_PACKED)); \
    packed_data->index = glBindImageTextureEXT_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLuint)texture; \
    packed_data->args.a3 = (GLint)level; \
    packed_data->args.a4 = (GLboolean)layered; \
    packed_data->args.a5 = (GLint)layer; \
    packed_data->args.a6 = (GLenum)access; \
    packed_data->args.a7 = (GLint)format; \
    (packed_call_t *)packed_data; \
})
#define pack_glBindLightParameterEXT(light, value) ({ \
    glBindLightParameterEXT_PACKED *packed_data = malloc(sizeof(glBindLightParameterEXT_PACKED)); \
    packed_data->index = glBindLightParameterEXT_INDEX; \
    packed_data->args.a1 = (GLenum)light; \
    packed_data->args.a2 = (GLenum)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glBindMaterialParameterEXT(face, value) ({ \
    glBindMaterialParameterEXT_PACKED *packed_data = malloc(sizeof(glBindMaterialParameterEXT_PACKED)); \
    packed_data->index = glBindMaterialParameterEXT_INDEX; \
    packed_data->args.a1 = (GLenum)face; \
    packed_data->args.a2 = (GLenum)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glBindMultiTextureEXT(texunit, target, texture) ({ \
    glBindMultiTextureEXT_PACKED *packed_data = malloc(sizeof(glBindMultiTextureEXT_PACKED)); \
    packed_data->index = glBindMultiTextureEXT_INDEX; \
    packed_data->args.a1 = (GLenum)texunit; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLuint)texture; \
    (packed_call_t *)packed_data; \
})
#define pack_glBindParameterEXT(value) ({ \
    glBindParameterEXT_PACKED *packed_data = malloc(sizeof(glBindParameterEXT_PACKED)); \
    packed_data->index = glBindParameterEXT_INDEX; \
    packed_data->args.a1 = (GLenum)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glBindProgramARB(target, program) ({ \
    glBindProgramARB_PACKED *packed_data = malloc(sizeof(glBindProgramARB_PACKED)); \
    packed_data->index = glBindProgramARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)program; \
    (packed_call_t *)packed_data; \
})
#define pack_glBindProgramNV(target, id) ({ \
    glBindProgramNV_PACKED *packed_data = malloc(sizeof(glBindProgramNV_PACKED)); \
    packed_data->index = glBindProgramNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)id; \
    (packed_call_t *)packed_data; \
})
#define pack_glBindProgramPipeline(pipeline) ({ \
    glBindProgramPipeline_PACKED *packed_data = malloc(sizeof(glBindProgramPipeline_PACKED)); \
    packed_data->index = glBindProgramPipeline_INDEX; \
    packed_data->args.a1 = (GLuint)pipeline; \
    (packed_call_t *)packed_data; \
})
#define pack_glBindRenderbuffer(target, renderbuffer) ({ \
    glBindRenderbuffer_PACKED *packed_data = malloc(sizeof(glBindRenderbuffer_PACKED)); \
    packed_data->index = glBindRenderbuffer_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)renderbuffer; \
    (packed_call_t *)packed_data; \
})
#define pack_glBindRenderbufferEXT(target, renderbuffer) ({ \
    glBindRenderbufferEXT_PACKED *packed_data = malloc(sizeof(glBindRenderbufferEXT_PACKED)); \
    packed_data->index = glBindRenderbufferEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)renderbuffer; \
    (packed_call_t *)packed_data; \
})
#define pack_glBindSampler(unit, sampler) ({ \
    glBindSampler_PACKED *packed_data = malloc(sizeof(glBindSampler_PACKED)); \
    packed_data->index = glBindSampler_INDEX; \
    packed_data->args.a1 = (GLuint)unit; \
    packed_data->args.a2 = (GLuint)sampler; \
    (packed_call_t *)packed_data; \
})
#define pack_glBindTexGenParameterEXT(unit, coord, value) ({ \
    glBindTexGenParameterEXT_PACKED *packed_data = malloc(sizeof(glBindTexGenParameterEXT_PACKED)); \
    packed_data->index = glBindTexGenParameterEXT_INDEX; \
    packed_data->args.a1 = (GLenum)unit; \
    packed_data->args.a2 = (GLenum)coord; \
    packed_data->args.a3 = (GLenum)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glBindTexture(target, texture) ({ \
    glBindTexture_PACKED *packed_data = malloc(sizeof(glBindTexture_PACKED)); \
    packed_data->index = glBindTexture_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)texture; \
    (packed_call_t *)packed_data; \
})
#define pack_glBindTextureEXT(target, texture) ({ \
    glBindTextureEXT_PACKED *packed_data = malloc(sizeof(glBindTextureEXT_PACKED)); \
    packed_data->index = glBindTextureEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)texture; \
    (packed_call_t *)packed_data; \
})
#define pack_glBindTextureUnitParameterEXT(unit, value) ({ \
    glBindTextureUnitParameterEXT_PACKED *packed_data = malloc(sizeof(glBindTextureUnitParameterEXT_PACKED)); \
    packed_data->index = glBindTextureUnitParameterEXT_INDEX; \
    packed_data->args.a1 = (GLenum)unit; \
    packed_data->args.a2 = (GLenum)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glBindTransformFeedback(target, id) ({ \
    glBindTransformFeedback_PACKED *packed_data = malloc(sizeof(glBindTransformFeedback_PACKED)); \
    packed_data->index = glBindTransformFeedback_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)id; \
    (packed_call_t *)packed_data; \
})
#define pack_glBindTransformFeedbackNV(target, id) ({ \
    glBindTransformFeedbackNV_PACKED *packed_data = malloc(sizeof(glBindTransformFeedbackNV_PACKED)); \
    packed_data->index = glBindTransformFeedbackNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)id; \
    (packed_call_t *)packed_data; \
})
#define pack_glBindVertexArray(array) ({ \
    glBindVertexArray_PACKED *packed_data = malloc(sizeof(glBindVertexArray_PACKED)); \
    packed_data->index = glBindVertexArray_INDEX; \
    packed_data->args.a1 = (GLuint)array; \
    (packed_call_t *)packed_data; \
})
#define pack_glBindVertexArrayAPPLE(array) ({ \
    glBindVertexArrayAPPLE_PACKED *packed_data = malloc(sizeof(glBindVertexArrayAPPLE_PACKED)); \
    packed_data->index = glBindVertexArrayAPPLE_INDEX; \
    packed_data->args.a1 = (GLuint)array; \
    (packed_call_t *)packed_data; \
})
#define pack_glBindVertexBuffer(bindingindex, buffer, offset, stride) ({ \
    glBindVertexBuffer_PACKED *packed_data = malloc(sizeof(glBindVertexBuffer_PACKED)); \
    packed_data->index = glBindVertexBuffer_INDEX; \
    packed_data->args.a1 = (GLuint)bindingindex; \
    packed_data->args.a2 = (GLuint)buffer; \
    packed_data->args.a3 = (GLintptr)offset; \
    packed_data->args.a4 = (GLsizei)stride; \
    (packed_call_t *)packed_data; \
})
#define pack_glBindVertexShaderEXT(id) ({ \
    glBindVertexShaderEXT_PACKED *packed_data = malloc(sizeof(glBindVertexShaderEXT_PACKED)); \
    packed_data->index = glBindVertexShaderEXT_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    (packed_call_t *)packed_data; \
})
#define pack_glBindVideoCaptureStreamBufferNV(video_capture_slot, stream, frame_region, offset) ({ \
    glBindVideoCaptureStreamBufferNV_PACKED *packed_data = malloc(sizeof(glBindVideoCaptureStreamBufferNV_PACKED)); \
    packed_data->index = glBindVideoCaptureStreamBufferNV_INDEX; \
    packed_data->args.a1 = (GLuint)video_capture_slot; \
    packed_data->args.a2 = (GLuint)stream; \
    packed_data->args.a3 = (GLenum)frame_region; \
    packed_data->args.a4 = (GLintptrARB)offset; \
    (packed_call_t *)packed_data; \
})
#define pack_glBindVideoCaptureStreamTextureNV(video_capture_slot, stream, frame_region, target, texture) ({ \
    glBindVideoCaptureStreamTextureNV_PACKED *packed_data = malloc(sizeof(glBindVideoCaptureStreamTextureNV_PACKED)); \
    packed_data->index = glBindVideoCaptureStreamTextureNV_INDEX; \
    packed_data->args.a1 = (GLuint)video_capture_slot; \
    packed_data->args.a2 = (GLuint)stream; \
    packed_data->args.a3 = (GLenum)frame_region; \
    packed_data->args.a4 = (GLenum)target; \
    packed_data->args.a5 = (GLuint)texture; \
    (packed_call_t *)packed_data; \
})
#define pack_glBinormal3bEXT(bx, by, bz) ({ \
    glBinormal3bEXT_PACKED *packed_data = malloc(sizeof(glBinormal3bEXT_PACKED)); \
    packed_data->index = glBinormal3bEXT_INDEX; \
    packed_data->args.a1 = (GLbyte)bx; \
    packed_data->args.a2 = (GLbyte)by; \
    packed_data->args.a3 = (GLbyte)bz; \
    (packed_call_t *)packed_data; \
})
#define pack_glBinormal3bvEXT(v) ({ \
    glBinormal3bvEXT_PACKED *packed_data = malloc(sizeof(glBinormal3bvEXT_PACKED)); \
    packed_data->index = glBinormal3bvEXT_INDEX; \
    packed_data->args.a1 = (GLbyte *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glBinormal3dEXT(bx, by, bz) ({ \
    glBinormal3dEXT_PACKED *packed_data = malloc(sizeof(glBinormal3dEXT_PACKED)); \
    packed_data->index = glBinormal3dEXT_INDEX; \
    packed_data->args.a1 = (GLdouble)bx; \
    packed_data->args.a2 = (GLdouble)by; \
    packed_data->args.a3 = (GLdouble)bz; \
    (packed_call_t *)packed_data; \
})
#define pack_glBinormal3dvEXT(v) ({ \
    glBinormal3dvEXT_PACKED *packed_data = malloc(sizeof(glBinormal3dvEXT_PACKED)); \
    packed_data->index = glBinormal3dvEXT_INDEX; \
    packed_data->args.a1 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glBinormal3fEXT(bx, by, bz) ({ \
    glBinormal3fEXT_PACKED *packed_data = malloc(sizeof(glBinormal3fEXT_PACKED)); \
    packed_data->index = glBinormal3fEXT_INDEX; \
    packed_data->args.a1 = (GLfloat)bx; \
    packed_data->args.a2 = (GLfloat)by; \
    packed_data->args.a3 = (GLfloat)bz; \
    (packed_call_t *)packed_data; \
})
#define pack_glBinormal3fvEXT(v) ({ \
    glBinormal3fvEXT_PACKED *packed_data = malloc(sizeof(glBinormal3fvEXT_PACKED)); \
    packed_data->index = glBinormal3fvEXT_INDEX; \
    packed_data->args.a1 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glBinormal3iEXT(bx, by, bz) ({ \
    glBinormal3iEXT_PACKED *packed_data = malloc(sizeof(glBinormal3iEXT_PACKED)); \
    packed_data->index = glBinormal3iEXT_INDEX; \
    packed_data->args.a1 = (GLint)bx; \
    packed_data->args.a2 = (GLint)by; \
    packed_data->args.a3 = (GLint)bz; \
    (packed_call_t *)packed_data; \
})
#define pack_glBinormal3ivEXT(v) ({ \
    glBinormal3ivEXT_PACKED *packed_data = malloc(sizeof(glBinormal3ivEXT_PACKED)); \
    packed_data->index = glBinormal3ivEXT_INDEX; \
    packed_data->args.a1 = (GLint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glBinormal3sEXT(bx, by, bz) ({ \
    glBinormal3sEXT_PACKED *packed_data = malloc(sizeof(glBinormal3sEXT_PACKED)); \
    packed_data->index = glBinormal3sEXT_INDEX; \
    packed_data->args.a1 = (GLshort)bx; \
    packed_data->args.a2 = (GLshort)by; \
    packed_data->args.a3 = (GLshort)bz; \
    (packed_call_t *)packed_data; \
})
#define pack_glBinormal3svEXT(v) ({ \
    glBinormal3svEXT_PACKED *packed_data = malloc(sizeof(glBinormal3svEXT_PACKED)); \
    packed_data->index = glBinormal3svEXT_INDEX; \
    packed_data->args.a1 = (GLshort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glBinormalPointerEXT(type, stride, pointer) ({ \
    glBinormalPointerEXT_PACKED *packed_data = malloc(sizeof(glBinormalPointerEXT_PACKED)); \
    packed_data->index = glBinormalPointerEXT_INDEX; \
    packed_data->args.a1 = (GLenum)type; \
    packed_data->args.a2 = (GLsizei)stride; \
    packed_data->args.a3 = (GLvoid *)pointer; \
    (packed_call_t *)packed_data; \
})
#define pack_glBitmap(width, height, xorig, yorig, xmove, ymove, bitmap) ({ \
    glBitmap_PACKED *packed_data = malloc(sizeof(glBitmap_PACKED)); \
    packed_data->index = glBitmap_INDEX; \
    packed_data->args.a1 = (GLsizei)width; \
    packed_data->args.a2 = (GLsizei)height; \
    packed_data->args.a3 = (GLfloat)xorig; \
    packed_data->args.a4 = (GLfloat)yorig; \
    packed_data->args.a5 = (GLfloat)xmove; \
    packed_data->args.a6 = (GLfloat)ymove; \
    packed_data->args.a7 = (GLubyte *)bitmap; \
    (packed_call_t *)packed_data; \
})
#define pack_glBitmapxOES(width, height, xorig, yorig, xmove, ymove, bitmap) ({ \
    glBitmapxOES_PACKED *packed_data = malloc(sizeof(glBitmapxOES_PACKED)); \
    packed_data->index = glBitmapxOES_INDEX; \
    packed_data->args.a1 = (GLsizei)width; \
    packed_data->args.a2 = (GLsizei)height; \
    packed_data->args.a3 = (GLfixed)xorig; \
    packed_data->args.a4 = (GLfixed)yorig; \
    packed_data->args.a5 = (GLfixed)xmove; \
    packed_data->args.a6 = (GLfixed)ymove; \
    packed_data->args.a7 = (GLubyte *)bitmap; \
    (packed_call_t *)packed_data; \
})
#define pack_glBlendColor(red, green, blue, alpha) ({ \
    glBlendColor_PACKED *packed_data = malloc(sizeof(glBlendColor_PACKED)); \
    packed_data->index = glBlendColor_INDEX; \
    packed_data->args.a1 = (GLfloat)red; \
    packed_data->args.a2 = (GLfloat)green; \
    packed_data->args.a3 = (GLfloat)blue; \
    packed_data->args.a4 = (GLfloat)alpha; \
    (packed_call_t *)packed_data; \
})
#define pack_glBlendColorEXT(red, green, blue, alpha) ({ \
    glBlendColorEXT_PACKED *packed_data = malloc(sizeof(glBlendColorEXT_PACKED)); \
    packed_data->index = glBlendColorEXT_INDEX; \
    packed_data->args.a1 = (GLfloat)red; \
    packed_data->args.a2 = (GLfloat)green; \
    packed_data->args.a3 = (GLfloat)blue; \
    packed_data->args.a4 = (GLfloat)alpha; \
    (packed_call_t *)packed_data; \
})
#define pack_glBlendColorOES(red, green, blue, alpha) ({ \
    glBlendColorOES_PACKED *packed_data = malloc(sizeof(glBlendColorOES_PACKED)); \
    packed_data->index = glBlendColorOES_INDEX; \
    packed_data->args.a1 = (GLclampf)red; \
    packed_data->args.a2 = (GLclampf)green; \
    packed_data->args.a3 = (GLclampf)blue; \
    packed_data->args.a4 = (GLclampf)alpha; \
    (packed_call_t *)packed_data; \
})
#define pack_glBlendColorxOES(red, green, blue, alpha) ({ \
    glBlendColorxOES_PACKED *packed_data = malloc(sizeof(glBlendColorxOES_PACKED)); \
    packed_data->index = glBlendColorxOES_INDEX; \
    packed_data->args.a1 = (GLfixed)red; \
    packed_data->args.a2 = (GLfixed)green; \
    packed_data->args.a3 = (GLfixed)blue; \
    packed_data->args.a4 = (GLfixed)alpha; \
    (packed_call_t *)packed_data; \
})
#define pack_glBlendEquation(mode) ({ \
    glBlendEquation_PACKED *packed_data = malloc(sizeof(glBlendEquation_PACKED)); \
    packed_data->index = glBlendEquation_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    (packed_call_t *)packed_data; \
})
#define pack_glBlendEquationEXT(mode) ({ \
    glBlendEquationEXT_PACKED *packed_data = malloc(sizeof(glBlendEquationEXT_PACKED)); \
    packed_data->index = glBlendEquationEXT_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    (packed_call_t *)packed_data; \
})
#define pack_glBlendEquationIndexedAMD(buf, mode) ({ \
    glBlendEquationIndexedAMD_PACKED *packed_data = malloc(sizeof(glBlendEquationIndexedAMD_PACKED)); \
    packed_data->index = glBlendEquationIndexedAMD_INDEX; \
    packed_data->args.a1 = (GLuint)buf; \
    packed_data->args.a2 = (GLenum)mode; \
    (packed_call_t *)packed_data; \
})
#define pack_glBlendEquationOES(mode) ({ \
    glBlendEquationOES_PACKED *packed_data = malloc(sizeof(glBlendEquationOES_PACKED)); \
    packed_data->index = glBlendEquationOES_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    (packed_call_t *)packed_data; \
})
#define pack_glBlendEquationSeparate(modeRGB, modeAlpha) ({ \
    glBlendEquationSeparate_PACKED *packed_data = malloc(sizeof(glBlendEquationSeparate_PACKED)); \
    packed_data->index = glBlendEquationSeparate_INDEX; \
    packed_data->args.a1 = (GLenum)modeRGB; \
    packed_data->args.a2 = (GLenum)modeAlpha; \
    (packed_call_t *)packed_data; \
})
#define pack_glBlendEquationSeparateEXT(modeRGB, modeAlpha) ({ \
    glBlendEquationSeparateEXT_PACKED *packed_data = malloc(sizeof(glBlendEquationSeparateEXT_PACKED)); \
    packed_data->index = glBlendEquationSeparateEXT_INDEX; \
    packed_data->args.a1 = (GLenum)modeRGB; \
    packed_data->args.a2 = (GLenum)modeAlpha; \
    (packed_call_t *)packed_data; \
})
#define pack_glBlendEquationSeparateIndexedAMD(buf, modeRGB, modeAlpha) ({ \
    glBlendEquationSeparateIndexedAMD_PACKED *packed_data = malloc(sizeof(glBlendEquationSeparateIndexedAMD_PACKED)); \
    packed_data->index = glBlendEquationSeparateIndexedAMD_INDEX; \
    packed_data->args.a1 = (GLuint)buf; \
    packed_data->args.a2 = (GLenum)modeRGB; \
    packed_data->args.a3 = (GLenum)modeAlpha; \
    (packed_call_t *)packed_data; \
})
#define pack_glBlendEquationSeparateOES(modeRGB, modeAlpha) ({ \
    glBlendEquationSeparateOES_PACKED *packed_data = malloc(sizeof(glBlendEquationSeparateOES_PACKED)); \
    packed_data->index = glBlendEquationSeparateOES_INDEX; \
    packed_data->args.a1 = (GLenum)modeRGB; \
    packed_data->args.a2 = (GLenum)modeAlpha; \
    (packed_call_t *)packed_data; \
})
#define pack_glBlendEquationSeparatei(buf, modeRGB, modeAlpha) ({ \
    glBlendEquationSeparatei_PACKED *packed_data = malloc(sizeof(glBlendEquationSeparatei_PACKED)); \
    packed_data->index = glBlendEquationSeparatei_INDEX; \
    packed_data->args.a1 = (GLuint)buf; \
    packed_data->args.a2 = (GLenum)modeRGB; \
    packed_data->args.a3 = (GLenum)modeAlpha; \
    (packed_call_t *)packed_data; \
})
#define pack_glBlendEquationSeparateiARB(buf, modeRGB, modeAlpha) ({ \
    glBlendEquationSeparateiARB_PACKED *packed_data = malloc(sizeof(glBlendEquationSeparateiARB_PACKED)); \
    packed_data->index = glBlendEquationSeparateiARB_INDEX; \
    packed_data->args.a1 = (GLuint)buf; \
    packed_data->args.a2 = (GLenum)modeRGB; \
    packed_data->args.a3 = (GLenum)modeAlpha; \
    (packed_call_t *)packed_data; \
})
#define pack_glBlendEquationi(buf, mode) ({ \
    glBlendEquationi_PACKED *packed_data = malloc(sizeof(glBlendEquationi_PACKED)); \
    packed_data->index = glBlendEquationi_INDEX; \
    packed_data->args.a1 = (GLuint)buf; \
    packed_data->args.a2 = (GLenum)mode; \
    (packed_call_t *)packed_data; \
})
#define pack_glBlendEquationiARB(buf, mode) ({ \
    glBlendEquationiARB_PACKED *packed_data = malloc(sizeof(glBlendEquationiARB_PACKED)); \
    packed_data->index = glBlendEquationiARB_INDEX; \
    packed_data->args.a1 = (GLuint)buf; \
    packed_data->args.a2 = (GLenum)mode; \
    (packed_call_t *)packed_data; \
})
#define pack_glBlendFunc(sfactor, dfactor) ({ \
    glBlendFunc_PACKED *packed_data = malloc(sizeof(glBlendFunc_PACKED)); \
    packed_data->index = glBlendFunc_INDEX; \
    packed_data->args.a1 = (GLenum)sfactor; \
    packed_data->args.a2 = (GLenum)dfactor; \
    (packed_call_t *)packed_data; \
})
#define pack_glBlendFuncIndexedAMD(buf, src, dst) ({ \
    glBlendFuncIndexedAMD_PACKED *packed_data = malloc(sizeof(glBlendFuncIndexedAMD_PACKED)); \
    packed_data->index = glBlendFuncIndexedAMD_INDEX; \
    packed_data->args.a1 = (GLuint)buf; \
    packed_data->args.a2 = (GLenum)src; \
    packed_data->args.a3 = (GLenum)dst; \
    (packed_call_t *)packed_data; \
})
#define pack_glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) ({ \
    glBlendFuncSeparate_PACKED *packed_data = malloc(sizeof(glBlendFuncSeparate_PACKED)); \
    packed_data->index = glBlendFuncSeparate_INDEX; \
    packed_data->args.a1 = (GLenum)sfactorRGB; \
    packed_data->args.a2 = (GLenum)dfactorRGB; \
    packed_data->args.a3 = (GLenum)sfactorAlpha; \
    packed_data->args.a4 = (GLenum)dfactorAlpha; \
    (packed_call_t *)packed_data; \
})
#define pack_glBlendFuncSeparateEXT(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) ({ \
    glBlendFuncSeparateEXT_PACKED *packed_data = malloc(sizeof(glBlendFuncSeparateEXT_PACKED)); \
    packed_data->index = glBlendFuncSeparateEXT_INDEX; \
    packed_data->args.a1 = (GLenum)sfactorRGB; \
    packed_data->args.a2 = (GLenum)dfactorRGB; \
    packed_data->args.a3 = (GLenum)sfactorAlpha; \
    packed_data->args.a4 = (GLenum)dfactorAlpha; \
    (packed_call_t *)packed_data; \
})
#define pack_glBlendFuncSeparateINGR(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) ({ \
    glBlendFuncSeparateINGR_PACKED *packed_data = malloc(sizeof(glBlendFuncSeparateINGR_PACKED)); \
    packed_data->index = glBlendFuncSeparateINGR_INDEX; \
    packed_data->args.a1 = (GLenum)sfactorRGB; \
    packed_data->args.a2 = (GLenum)dfactorRGB; \
    packed_data->args.a3 = (GLenum)sfactorAlpha; \
    packed_data->args.a4 = (GLenum)dfactorAlpha; \
    (packed_call_t *)packed_data; \
})
#define pack_glBlendFuncSeparateIndexedAMD(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) ({ \
    glBlendFuncSeparateIndexedAMD_PACKED *packed_data = malloc(sizeof(glBlendFuncSeparateIndexedAMD_PACKED)); \
    packed_data->index = glBlendFuncSeparateIndexedAMD_INDEX; \
    packed_data->args.a1 = (GLuint)buf; \
    packed_data->args.a2 = (GLenum)srcRGB; \
    packed_data->args.a3 = (GLenum)dstRGB; \
    packed_data->args.a4 = (GLenum)srcAlpha; \
    packed_data->args.a5 = (GLenum)dstAlpha; \
    (packed_call_t *)packed_data; \
})
#define pack_glBlendFuncSeparateOES(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) ({ \
    glBlendFuncSeparateOES_PACKED *packed_data = malloc(sizeof(glBlendFuncSeparateOES_PACKED)); \
    packed_data->index = glBlendFuncSeparateOES_INDEX; \
    packed_data->args.a1 = (GLenum)sfactorRGB; \
    packed_data->args.a2 = (GLenum)dfactorRGB; \
    packed_data->args.a3 = (GLenum)sfactorAlpha; \
    packed_data->args.a4 = (GLenum)dfactorAlpha; \
    (packed_call_t *)packed_data; \
})
#define pack_glBlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) ({ \
    glBlendFuncSeparatei_PACKED *packed_data = malloc(sizeof(glBlendFuncSeparatei_PACKED)); \
    packed_data->index = glBlendFuncSeparatei_INDEX; \
    packed_data->args.a1 = (GLuint)buf; \
    packed_data->args.a2 = (GLenum)srcRGB; \
    packed_data->args.a3 = (GLenum)dstRGB; \
    packed_data->args.a4 = (GLenum)srcAlpha; \
    packed_data->args.a5 = (GLenum)dstAlpha; \
    (packed_call_t *)packed_data; \
})
#define pack_glBlendFuncSeparateiARB(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) ({ \
    glBlendFuncSeparateiARB_PACKED *packed_data = malloc(sizeof(glBlendFuncSeparateiARB_PACKED)); \
    packed_data->index = glBlendFuncSeparateiARB_INDEX; \
    packed_data->args.a1 = (GLuint)buf; \
    packed_data->args.a2 = (GLenum)srcRGB; \
    packed_data->args.a3 = (GLenum)dstRGB; \
    packed_data->args.a4 = (GLenum)srcAlpha; \
    packed_data->args.a5 = (GLenum)dstAlpha; \
    (packed_call_t *)packed_data; \
})
#define pack_glBlendFunci(buf, src, dst) ({ \
    glBlendFunci_PACKED *packed_data = malloc(sizeof(glBlendFunci_PACKED)); \
    packed_data->index = glBlendFunci_INDEX; \
    packed_data->args.a1 = (GLuint)buf; \
    packed_data->args.a2 = (GLenum)src; \
    packed_data->args.a3 = (GLenum)dst; \
    (packed_call_t *)packed_data; \
})
#define pack_glBlendFunciARB(buf, src, dst) ({ \
    glBlendFunciARB_PACKED *packed_data = malloc(sizeof(glBlendFunciARB_PACKED)); \
    packed_data->index = glBlendFunciARB_INDEX; \
    packed_data->args.a1 = (GLuint)buf; \
    packed_data->args.a2 = (GLenum)src; \
    packed_data->args.a3 = (GLenum)dst; \
    (packed_call_t *)packed_data; \
})
#define pack_glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) ({ \
    glBlitFramebuffer_PACKED *packed_data = malloc(sizeof(glBlitFramebuffer_PACKED)); \
    packed_data->index = glBlitFramebuffer_INDEX; \
    packed_data->args.a1 = (GLint)srcX0; \
    packed_data->args.a2 = (GLint)srcY0; \
    packed_data->args.a3 = (GLint)srcX1; \
    packed_data->args.a4 = (GLint)srcY1; \
    packed_data->args.a5 = (GLint)dstX0; \
    packed_data->args.a6 = (GLint)dstY0; \
    packed_data->args.a7 = (GLint)dstX1; \
    packed_data->args.a8 = (GLint)dstY1; \
    packed_data->args.a9 = (GLbitfield)mask; \
    packed_data->args.a10 = (GLenum)filter; \
    (packed_call_t *)packed_data; \
})
#define pack_glBlitFramebufferEXT(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) ({ \
    glBlitFramebufferEXT_PACKED *packed_data = malloc(sizeof(glBlitFramebufferEXT_PACKED)); \
    packed_data->index = glBlitFramebufferEXT_INDEX; \
    packed_data->args.a1 = (GLint)srcX0; \
    packed_data->args.a2 = (GLint)srcY0; \
    packed_data->args.a3 = (GLint)srcX1; \
    packed_data->args.a4 = (GLint)srcY1; \
    packed_data->args.a5 = (GLint)dstX0; \
    packed_data->args.a6 = (GLint)dstY0; \
    packed_data->args.a7 = (GLint)dstX1; \
    packed_data->args.a8 = (GLint)dstY1; \
    packed_data->args.a9 = (GLbitfield)mask; \
    packed_data->args.a10 = (GLenum)filter; \
    (packed_call_t *)packed_data; \
})
#define pack_glBufferAddressRangeNV(pname, index, address, length) ({ \
    glBufferAddressRangeNV_PACKED *packed_data = malloc(sizeof(glBufferAddressRangeNV_PACKED)); \
    packed_data->index = glBufferAddressRangeNV_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLuint64EXT)address; \
    packed_data->args.a4 = (GLsizeiptr)length; \
    (packed_call_t *)packed_data; \
})
#define pack_glBufferData(target, size, data, usage) ({ \
    glBufferData_PACKED *packed_data = malloc(sizeof(glBufferData_PACKED)); \
    packed_data->index = glBufferData_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLsizeiptr)size; \
    packed_data->args.a3 = (GLvoid *)data; \
    packed_data->args.a4 = (GLenum)usage; \
    (packed_call_t *)packed_data; \
})
#define pack_glBufferDataARB(target, size, data, usage) ({ \
    glBufferDataARB_PACKED *packed_data = malloc(sizeof(glBufferDataARB_PACKED)); \
    packed_data->index = glBufferDataARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLsizeiptrARB)size; \
    packed_data->args.a3 = (GLvoid *)data; \
    packed_data->args.a4 = (GLenum)usage; \
    (packed_call_t *)packed_data; \
})
#define pack_glBufferParameteriAPPLE(target, pname, param) ({ \
    glBufferParameteriAPPLE_PACKED *packed_data = malloc(sizeof(glBufferParameteriAPPLE_PACKED)); \
    packed_data->index = glBufferParameteriAPPLE_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glBufferSubData(target, offset, size, data) ({ \
    glBufferSubData_PACKED *packed_data = malloc(sizeof(glBufferSubData_PACKED)); \
    packed_data->index = glBufferSubData_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLintptr)offset; \
    packed_data->args.a3 = (GLsizeiptr)size; \
    packed_data->args.a4 = (GLvoid *)data; \
    (packed_call_t *)packed_data; \
})
#define pack_glBufferSubDataARB(target, offset, size, data) ({ \
    glBufferSubDataARB_PACKED *packed_data = malloc(sizeof(glBufferSubDataARB_PACKED)); \
    packed_data->index = glBufferSubDataARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLintptrARB)offset; \
    packed_data->args.a3 = (GLsizeiptrARB)size; \
    packed_data->args.a4 = (GLvoid *)data; \
    (packed_call_t *)packed_data; \
})
#define pack_glCallList(list) ({ \
    glCallList_PACKED *packed_data = malloc(sizeof(glCallList_PACKED)); \
    packed_data->index = glCallList_INDEX; \
    packed_data->args.a1 = (GLuint)list; \
    (packed_call_t *)packed_data; \
})
#define pack_glCallLists(n, type, lists) ({ \
    glCallLists_PACKED *packed_data = malloc(sizeof(glCallLists_PACKED)); \
    packed_data->index = glCallLists_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLenum)type; \
    packed_data->args.a3 = (GLvoid *)lists; \
    (packed_call_t *)packed_data; \
})
#define pack_glCheckFramebufferStatus(target) ({ \
    glCheckFramebufferStatus_PACKED *packed_data = malloc(sizeof(glCheckFramebufferStatus_PACKED)); \
    packed_data->index = glCheckFramebufferStatus_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    (packed_call_t *)packed_data; \
})
#define pack_glCheckFramebufferStatusEXT(target) ({ \
    glCheckFramebufferStatusEXT_PACKED *packed_data = malloc(sizeof(glCheckFramebufferStatusEXT_PACKED)); \
    packed_data->index = glCheckFramebufferStatusEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    (packed_call_t *)packed_data; \
})
#define pack_glCheckNamedFramebufferStatusEXT(framebuffer, target) ({ \
    glCheckNamedFramebufferStatusEXT_PACKED *packed_data = malloc(sizeof(glCheckNamedFramebufferStatusEXT_PACKED)); \
    packed_data->index = glCheckNamedFramebufferStatusEXT_INDEX; \
    packed_data->args.a1 = (GLuint)framebuffer; \
    packed_data->args.a2 = (GLenum)target; \
    (packed_call_t *)packed_data; \
})
#define pack_glClampColor(target, clamp) ({ \
    glClampColor_PACKED *packed_data = malloc(sizeof(glClampColor_PACKED)); \
    packed_data->index = glClampColor_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)clamp; \
    (packed_call_t *)packed_data; \
})
#define pack_glClampColorARB(target, clamp) ({ \
    glClampColorARB_PACKED *packed_data = malloc(sizeof(glClampColorARB_PACKED)); \
    packed_data->index = glClampColorARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)clamp; \
    (packed_call_t *)packed_data; \
})
#define pack_glClear(mask) ({ \
    glClear_PACKED *packed_data = malloc(sizeof(glClear_PACKED)); \
    packed_data->index = glClear_INDEX; \
    packed_data->args.a1 = (GLbitfield)mask; \
    (packed_call_t *)packed_data; \
})
#define pack_glClearAccum(red, green, blue, alpha) ({ \
    glClearAccum_PACKED *packed_data = malloc(sizeof(glClearAccum_PACKED)); \
    packed_data->index = glClearAccum_INDEX; \
    packed_data->args.a1 = (GLfloat)red; \
    packed_data->args.a2 = (GLfloat)green; \
    packed_data->args.a3 = (GLfloat)blue; \
    packed_data->args.a4 = (GLfloat)alpha; \
    (packed_call_t *)packed_data; \
})
#define pack_glClearAccumxOES(red, green, blue, alpha) ({ \
    glClearAccumxOES_PACKED *packed_data = malloc(sizeof(glClearAccumxOES_PACKED)); \
    packed_data->index = glClearAccumxOES_INDEX; \
    packed_data->args.a1 = (GLfixed)red; \
    packed_data->args.a2 = (GLfixed)green; \
    packed_data->args.a3 = (GLfixed)blue; \
    packed_data->args.a4 = (GLfixed)alpha; \
    (packed_call_t *)packed_data; \
})
#define pack_glClearBufferData(target, internalformat, format, type, data) ({ \
    glClearBufferData_PACKED *packed_data = malloc(sizeof(glClearBufferData_PACKED)); \
    packed_data->index = glClearBufferData_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)internalformat; \
    packed_data->args.a3 = (GLenum)format; \
    packed_data->args.a4 = (GLenum)type; \
    packed_data->args.a5 = (void *)data; \
    (packed_call_t *)packed_data; \
})
#define pack_glClearBufferSubData(target, internalformat, offset, size, format, type, data) ({ \
    glClearBufferSubData_PACKED *packed_data = malloc(sizeof(glClearBufferSubData_PACKED)); \
    packed_data->index = glClearBufferSubData_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)internalformat; \
    packed_data->args.a3 = (GLintptr)offset; \
    packed_data->args.a4 = (GLsizeiptr)size; \
    packed_data->args.a5 = (GLenum)format; \
    packed_data->args.a6 = (GLenum)type; \
    packed_data->args.a7 = (void *)data; \
    (packed_call_t *)packed_data; \
})
#define pack_glClearBufferfi(buffer, drawbuffer, depth, stencil) ({ \
    glClearBufferfi_PACKED *packed_data = malloc(sizeof(glClearBufferfi_PACKED)); \
    packed_data->index = glClearBufferfi_INDEX; \
    packed_data->args.a1 = (GLenum)buffer; \
    packed_data->args.a2 = (GLint)drawbuffer; \
    packed_data->args.a3 = (GLfloat)depth; \
    packed_data->args.a4 = (GLint)stencil; \
    (packed_call_t *)packed_data; \
})
#define pack_glClearBufferfv(buffer, drawbuffer, value) ({ \
    glClearBufferfv_PACKED *packed_data = malloc(sizeof(glClearBufferfv_PACKED)); \
    packed_data->index = glClearBufferfv_INDEX; \
    packed_data->args.a1 = (GLenum)buffer; \
    packed_data->args.a2 = (GLint)drawbuffer; \
    packed_data->args.a3 = (GLfloat *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glClearBufferiv(buffer, drawbuffer, value) ({ \
    glClearBufferiv_PACKED *packed_data = malloc(sizeof(glClearBufferiv_PACKED)); \
    packed_data->index = glClearBufferiv_INDEX; \
    packed_data->args.a1 = (GLenum)buffer; \
    packed_data->args.a2 = (GLint)drawbuffer; \
    packed_data->args.a3 = (GLint *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glClearBufferuiv(buffer, drawbuffer, value) ({ \
    glClearBufferuiv_PACKED *packed_data = malloc(sizeof(glClearBufferuiv_PACKED)); \
    packed_data->index = glClearBufferuiv_INDEX; \
    packed_data->args.a1 = (GLenum)buffer; \
    packed_data->args.a2 = (GLint)drawbuffer; \
    packed_data->args.a3 = (GLuint *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glClearColor(red, green, blue, alpha) ({ \
    glClearColor_PACKED *packed_data = malloc(sizeof(glClearColor_PACKED)); \
    packed_data->index = glClearColor_INDEX; \
    packed_data->args.a1 = (GLclampf)red; \
    packed_data->args.a2 = (GLclampf)green; \
    packed_data->args.a3 = (GLclampf)blue; \
    packed_data->args.a4 = (GLclampf)alpha; \
    (packed_call_t *)packed_data; \
})
#define pack_glClearColorIiEXT(red, green, blue, alpha) ({ \
    glClearColorIiEXT_PACKED *packed_data = malloc(sizeof(glClearColorIiEXT_PACKED)); \
    packed_data->index = glClearColorIiEXT_INDEX; \
    packed_data->args.a1 = (GLint)red; \
    packed_data->args.a2 = (GLint)green; \
    packed_data->args.a3 = (GLint)blue; \
    packed_data->args.a4 = (GLint)alpha; \
    (packed_call_t *)packed_data; \
})
#define pack_glClearColorIuiEXT(red, green, blue, alpha) ({ \
    glClearColorIuiEXT_PACKED *packed_data = malloc(sizeof(glClearColorIuiEXT_PACKED)); \
    packed_data->index = glClearColorIuiEXT_INDEX; \
    packed_data->args.a1 = (GLuint)red; \
    packed_data->args.a2 = (GLuint)green; \
    packed_data->args.a3 = (GLuint)blue; \
    packed_data->args.a4 = (GLuint)alpha; \
    (packed_call_t *)packed_data; \
})
#define pack_glClearColorx(red, green, blue, alpha) ({ \
    glClearColorx_PACKED *packed_data = malloc(sizeof(glClearColorx_PACKED)); \
    packed_data->index = glClearColorx_INDEX; \
    packed_data->args.a1 = (GLclampx)red; \
    packed_data->args.a2 = (GLclampx)green; \
    packed_data->args.a3 = (GLclampx)blue; \
    packed_data->args.a4 = (GLclampx)alpha; \
    (packed_call_t *)packed_data; \
})
#define pack_glClearColorxOES(red, green, blue, alpha) ({ \
    glClearColorxOES_PACKED *packed_data = malloc(sizeof(glClearColorxOES_PACKED)); \
    packed_data->index = glClearColorxOES_INDEX; \
    packed_data->args.a1 = (GLfixed)red; \
    packed_data->args.a2 = (GLfixed)green; \
    packed_data->args.a3 = (GLfixed)blue; \
    packed_data->args.a4 = (GLfixed)alpha; \
    (packed_call_t *)packed_data; \
})
#define pack_glClearDepth(depth) ({ \
    glClearDepth_PACKED *packed_data = malloc(sizeof(glClearDepth_PACKED)); \
    packed_data->index = glClearDepth_INDEX; \
    packed_data->args.a1 = (GLdouble)depth; \
    (packed_call_t *)packed_data; \
})
#define pack_glClearDepthdNV(depth) ({ \
    glClearDepthdNV_PACKED *packed_data = malloc(sizeof(glClearDepthdNV_PACKED)); \
    packed_data->index = glClearDepthdNV_INDEX; \
    packed_data->args.a1 = (GLdouble)depth; \
    (packed_call_t *)packed_data; \
})
#define pack_glClearDepthf(depth) ({ \
    glClearDepthf_PACKED *packed_data = malloc(sizeof(glClearDepthf_PACKED)); \
    packed_data->index = glClearDepthf_INDEX; \
    packed_data->args.a1 = (GLclampf)depth; \
    (packed_call_t *)packed_data; \
})
#define pack_glClearDepthfOES(depth) ({ \
    glClearDepthfOES_PACKED *packed_data = malloc(sizeof(glClearDepthfOES_PACKED)); \
    packed_data->index = glClearDepthfOES_INDEX; \
    packed_data->args.a1 = (GLclampf)depth; \
    (packed_call_t *)packed_data; \
})
#define pack_glClearDepthx(depth) ({ \
    glClearDepthx_PACKED *packed_data = malloc(sizeof(glClearDepthx_PACKED)); \
    packed_data->index = glClearDepthx_INDEX; \
    packed_data->args.a1 = (GLclampx)depth; \
    (packed_call_t *)packed_data; \
})
#define pack_glClearDepthxOES(depth) ({ \
    glClearDepthxOES_PACKED *packed_data = malloc(sizeof(glClearDepthxOES_PACKED)); \
    packed_data->index = glClearDepthxOES_INDEX; \
    packed_data->args.a1 = (GLfixed)depth; \
    (packed_call_t *)packed_data; \
})
#define pack_glClearIndex(c) ({ \
    glClearIndex_PACKED *packed_data = malloc(sizeof(glClearIndex_PACKED)); \
    packed_data->index = glClearIndex_INDEX; \
    packed_data->args.a1 = (GLfloat)c; \
    (packed_call_t *)packed_data; \
})
#define pack_glClearNamedBufferDataEXT(buffer, internalformat, format, type, data) ({ \
    glClearNamedBufferDataEXT_PACKED *packed_data = malloc(sizeof(glClearNamedBufferDataEXT_PACKED)); \
    packed_data->index = glClearNamedBufferDataEXT_INDEX; \
    packed_data->args.a1 = (GLuint)buffer; \
    packed_data->args.a2 = (GLenum)internalformat; \
    packed_data->args.a3 = (GLenum)format; \
    packed_data->args.a4 = (GLenum)type; \
    packed_data->args.a5 = (void *)data; \
    (packed_call_t *)packed_data; \
})
#define pack_glClearNamedBufferSubDataEXT(buffer, internalformat, format, type, offset, size, data) ({ \
    glClearNamedBufferSubDataEXT_PACKED *packed_data = malloc(sizeof(glClearNamedBufferSubDataEXT_PACKED)); \
    packed_data->index = glClearNamedBufferSubDataEXT_INDEX; \
    packed_data->args.a1 = (GLuint)buffer; \
    packed_data->args.a2 = (GLenum)internalformat; \
    packed_data->args.a3 = (GLenum)format; \
    packed_data->args.a4 = (GLenum)type; \
    packed_data->args.a5 = (GLsizeiptr)offset; \
    packed_data->args.a6 = (GLsizeiptr)size; \
    packed_data->args.a7 = (void *)data; \
    (packed_call_t *)packed_data; \
})
#define pack_glClearStencil(s) ({ \
    glClearStencil_PACKED *packed_data = malloc(sizeof(glClearStencil_PACKED)); \
    packed_data->index = glClearStencil_INDEX; \
    packed_data->args.a1 = (GLint)s; \
    (packed_call_t *)packed_data; \
})
#define pack_glClientActiveTexture(texture) ({ \
    glClientActiveTexture_PACKED *packed_data = malloc(sizeof(glClientActiveTexture_PACKED)); \
    packed_data->index = glClientActiveTexture_INDEX; \
    packed_data->args.a1 = (GLenum)texture; \
    (packed_call_t *)packed_data; \
})
#define pack_glClientActiveTextureARB(texture) ({ \
    glClientActiveTextureARB_PACKED *packed_data = malloc(sizeof(glClientActiveTextureARB_PACKED)); \
    packed_data->index = glClientActiveTextureARB_INDEX; \
    packed_data->args.a1 = (GLenum)texture; \
    (packed_call_t *)packed_data; \
})
#define pack_glClientActiveVertexStreamATI(stream) ({ \
    glClientActiveVertexStreamATI_PACKED *packed_data = malloc(sizeof(glClientActiveVertexStreamATI_PACKED)); \
    packed_data->index = glClientActiveVertexStreamATI_INDEX; \
    packed_data->args.a1 = (GLenum)stream; \
    (packed_call_t *)packed_data; \
})
#define pack_glClientAttribDefaultEXT(mask) ({ \
    glClientAttribDefaultEXT_PACKED *packed_data = malloc(sizeof(glClientAttribDefaultEXT_PACKED)); \
    packed_data->index = glClientAttribDefaultEXT_INDEX; \
    packed_data->args.a1 = (GLbitfield)mask; \
    (packed_call_t *)packed_data; \
})
#define pack_glClientWaitSync(sync, flags, timeout) ({ \
    glClientWaitSync_PACKED *packed_data = malloc(sizeof(glClientWaitSync_PACKED)); \
    packed_data->index = glClientWaitSync_INDEX; \
    packed_data->args.a1 = (GLsync)sync; \
    packed_data->args.a2 = (GLbitfield)flags; \
    packed_data->args.a3 = (GLuint64)timeout; \
    (packed_call_t *)packed_data; \
})
#define pack_glClipPlane(plane, equation) ({ \
    glClipPlane_PACKED *packed_data = malloc(sizeof(glClipPlane_PACKED)); \
    packed_data->index = glClipPlane_INDEX; \
    packed_data->args.a1 = (GLenum)plane; \
    packed_data->args.a2 = (GLdouble *)equation; \
    (packed_call_t *)packed_data; \
})
#define pack_glClipPlanef(plane, equation) ({ \
    glClipPlanef_PACKED *packed_data = malloc(sizeof(glClipPlanef_PACKED)); \
    packed_data->index = glClipPlanef_INDEX; \
    packed_data->args.a1 = (GLenum)plane; \
    packed_data->args.a2 = (GLfloat *)equation; \
    (packed_call_t *)packed_data; \
})
#define pack_glClipPlanefOES(plane, equation) ({ \
    glClipPlanefOES_PACKED *packed_data = malloc(sizeof(glClipPlanefOES_PACKED)); \
    packed_data->index = glClipPlanefOES_INDEX; \
    packed_data->args.a1 = (GLenum)plane; \
    packed_data->args.a2 = (GLfloat *)equation; \
    (packed_call_t *)packed_data; \
})
#define pack_glClipPlanex(plane, equation) ({ \
    glClipPlanex_PACKED *packed_data = malloc(sizeof(glClipPlanex_PACKED)); \
    packed_data->index = glClipPlanex_INDEX; \
    packed_data->args.a1 = (GLenum)plane; \
    packed_data->args.a2 = (GLfixed *)equation; \
    (packed_call_t *)packed_data; \
})
#define pack_glClipPlanexOES(plane, equation) ({ \
    glClipPlanexOES_PACKED *packed_data = malloc(sizeof(glClipPlanexOES_PACKED)); \
    packed_data->index = glClipPlanexOES_INDEX; \
    packed_data->args.a1 = (GLenum)plane; \
    packed_data->args.a2 = (GLfixed *)equation; \
    (packed_call_t *)packed_data; \
})
#define pack_glColor3b(red, green, blue) ({ \
    glColor3b_PACKED *packed_data = malloc(sizeof(glColor3b_PACKED)); \
    packed_data->index = glColor3b_INDEX; \
    packed_data->args.a1 = (GLbyte)red; \
    packed_data->args.a2 = (GLbyte)green; \
    packed_data->args.a3 = (GLbyte)blue; \
    (packed_call_t *)packed_data; \
})
#define pack_glColor3bv(v) ({ \
    glColor3bv_PACKED *packed_data = malloc(sizeof(glColor3bv_PACKED)); \
    packed_data->index = glColor3bv_INDEX; \
    packed_data->args.a1 = (GLbyte *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glColor3d(red, green, blue) ({ \
    glColor3d_PACKED *packed_data = malloc(sizeof(glColor3d_PACKED)); \
    packed_data->index = glColor3d_INDEX; \
    packed_data->args.a1 = (GLdouble)red; \
    packed_data->args.a2 = (GLdouble)green; \
    packed_data->args.a3 = (GLdouble)blue; \
    (packed_call_t *)packed_data; \
})
#define pack_glColor3dv(v) ({ \
    glColor3dv_PACKED *packed_data = malloc(sizeof(glColor3dv_PACKED)); \
    packed_data->index = glColor3dv_INDEX; \
    packed_data->args.a1 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glColor3f(red, green, blue) ({ \
    glColor3f_PACKED *packed_data = malloc(sizeof(glColor3f_PACKED)); \
    packed_data->index = glColor3f_INDEX; \
    packed_data->args.a1 = (GLfloat)red; \
    packed_data->args.a2 = (GLfloat)green; \
    packed_data->args.a3 = (GLfloat)blue; \
    (packed_call_t *)packed_data; \
})
#define pack_glColor3fVertex3fSUN(r, g, b, x, y, z) ({ \
    glColor3fVertex3fSUN_PACKED *packed_data = malloc(sizeof(glColor3fVertex3fSUN_PACKED)); \
    packed_data->index = glColor3fVertex3fSUN_INDEX; \
    packed_data->args.a1 = (GLfloat)r; \
    packed_data->args.a2 = (GLfloat)g; \
    packed_data->args.a3 = (GLfloat)b; \
    packed_data->args.a4 = (GLfloat)x; \
    packed_data->args.a5 = (GLfloat)y; \
    packed_data->args.a6 = (GLfloat)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glColor3fVertex3fvSUN(c, v) ({ \
    glColor3fVertex3fvSUN_PACKED *packed_data = malloc(sizeof(glColor3fVertex3fvSUN_PACKED)); \
    packed_data->index = glColor3fVertex3fvSUN_INDEX; \
    packed_data->args.a1 = (GLfloat *)c; \
    packed_data->args.a2 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glColor3fv(v) ({ \
    glColor3fv_PACKED *packed_data = malloc(sizeof(glColor3fv_PACKED)); \
    packed_data->index = glColor3fv_INDEX; \
    packed_data->args.a1 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glColor3hNV(red, green, blue) ({ \
    glColor3hNV_PACKED *packed_data = malloc(sizeof(glColor3hNV_PACKED)); \
    packed_data->index = glColor3hNV_INDEX; \
    packed_data->args.a1 = (GLhalfNV)red; \
    packed_data->args.a2 = (GLhalfNV)green; \
    packed_data->args.a3 = (GLhalfNV)blue; \
    (packed_call_t *)packed_data; \
})
#define pack_glColor3hvNV(v) ({ \
    glColor3hvNV_PACKED *packed_data = malloc(sizeof(glColor3hvNV_PACKED)); \
    packed_data->index = glColor3hvNV_INDEX; \
    packed_data->args.a1 = (GLhalfNV *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glColor3i(red, green, blue) ({ \
    glColor3i_PACKED *packed_data = malloc(sizeof(glColor3i_PACKED)); \
    packed_data->index = glColor3i_INDEX; \
    packed_data->args.a1 = (GLint)red; \
    packed_data->args.a2 = (GLint)green; \
    packed_data->args.a3 = (GLint)blue; \
    (packed_call_t *)packed_data; \
})
#define pack_glColor3iv(v) ({ \
    glColor3iv_PACKED *packed_data = malloc(sizeof(glColor3iv_PACKED)); \
    packed_data->index = glColor3iv_INDEX; \
    packed_data->args.a1 = (GLint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glColor3s(red, green, blue) ({ \
    glColor3s_PACKED *packed_data = malloc(sizeof(glColor3s_PACKED)); \
    packed_data->index = glColor3s_INDEX; \
    packed_data->args.a1 = (GLshort)red; \
    packed_data->args.a2 = (GLshort)green; \
    packed_data->args.a3 = (GLshort)blue; \
    (packed_call_t *)packed_data; \
})
#define pack_glColor3sv(v) ({ \
    glColor3sv_PACKED *packed_data = malloc(sizeof(glColor3sv_PACKED)); \
    packed_data->index = glColor3sv_INDEX; \
    packed_data->args.a1 = (GLshort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glColor3ub(red, green, blue) ({ \
    glColor3ub_PACKED *packed_data = malloc(sizeof(glColor3ub_PACKED)); \
    packed_data->index = glColor3ub_INDEX; \
    packed_data->args.a1 = (GLubyte)red; \
    packed_data->args.a2 = (GLubyte)green; \
    packed_data->args.a3 = (GLubyte)blue; \
    (packed_call_t *)packed_data; \
})
#define pack_glColor3ubv(v) ({ \
    glColor3ubv_PACKED *packed_data = malloc(sizeof(glColor3ubv_PACKED)); \
    packed_data->index = glColor3ubv_INDEX; \
    packed_data->args.a1 = (GLubyte *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glColor3ui(red, green, blue) ({ \
    glColor3ui_PACKED *packed_data = malloc(sizeof(glColor3ui_PACKED)); \
    packed_data->index = glColor3ui_INDEX; \
    packed_data->args.a1 = (GLuint)red; \
    packed_data->args.a2 = (GLuint)green; \
    packed_data->args.a3 = (GLuint)blue; \
    (packed_call_t *)packed_data; \
})
#define pack_glColor3uiv(v) ({ \
    glColor3uiv_PACKED *packed_data = malloc(sizeof(glColor3uiv_PACKED)); \
    packed_data->index = glColor3uiv_INDEX; \
    packed_data->args.a1 = (GLuint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glColor3us(red, green, blue) ({ \
    glColor3us_PACKED *packed_data = malloc(sizeof(glColor3us_PACKED)); \
    packed_data->index = glColor3us_INDEX; \
    packed_data->args.a1 = (GLushort)red; \
    packed_data->args.a2 = (GLushort)green; \
    packed_data->args.a3 = (GLushort)blue; \
    (packed_call_t *)packed_data; \
})
#define pack_glColor3usv(v) ({ \
    glColor3usv_PACKED *packed_data = malloc(sizeof(glColor3usv_PACKED)); \
    packed_data->index = glColor3usv_INDEX; \
    packed_data->args.a1 = (GLushort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glColor3xOES(red, green, blue) ({ \
    glColor3xOES_PACKED *packed_data = malloc(sizeof(glColor3xOES_PACKED)); \
    packed_data->index = glColor3xOES_INDEX; \
    packed_data->args.a1 = (GLfixed)red; \
    packed_data->args.a2 = (GLfixed)green; \
    packed_data->args.a3 = (GLfixed)blue; \
    (packed_call_t *)packed_data; \
})
#define pack_glColor3xvOES(components) ({ \
    glColor3xvOES_PACKED *packed_data = malloc(sizeof(glColor3xvOES_PACKED)); \
    packed_data->index = glColor3xvOES_INDEX; \
    packed_data->args.a1 = (GLfixed *)components; \
    (packed_call_t *)packed_data; \
})
#define pack_glColor4b(red, green, blue, alpha) ({ \
    glColor4b_PACKED *packed_data = malloc(sizeof(glColor4b_PACKED)); \
    packed_data->index = glColor4b_INDEX; \
    packed_data->args.a1 = (GLbyte)red; \
    packed_data->args.a2 = (GLbyte)green; \
    packed_data->args.a3 = (GLbyte)blue; \
    packed_data->args.a4 = (GLbyte)alpha; \
    (packed_call_t *)packed_data; \
})
#define pack_glColor4bv(v) ({ \
    glColor4bv_PACKED *packed_data = malloc(sizeof(glColor4bv_PACKED)); \
    packed_data->index = glColor4bv_INDEX; \
    packed_data->args.a1 = (GLbyte *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glColor4d(red, green, blue, alpha) ({ \
    glColor4d_PACKED *packed_data = malloc(sizeof(glColor4d_PACKED)); \
    packed_data->index = glColor4d_INDEX; \
    packed_data->args.a1 = (GLdouble)red; \
    packed_data->args.a2 = (GLdouble)green; \
    packed_data->args.a3 = (GLdouble)blue; \
    packed_data->args.a4 = (GLdouble)alpha; \
    (packed_call_t *)packed_data; \
})
#define pack_glColor4dv(v) ({ \
    glColor4dv_PACKED *packed_data = malloc(sizeof(glColor4dv_PACKED)); \
    packed_data->index = glColor4dv_INDEX; \
    packed_data->args.a1 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glColor4f(red, green, blue, alpha) ({ \
    glColor4f_PACKED *packed_data = malloc(sizeof(glColor4f_PACKED)); \
    packed_data->index = glColor4f_INDEX; \
    packed_data->args.a1 = (GLfloat)red; \
    packed_data->args.a2 = (GLfloat)green; \
    packed_data->args.a3 = (GLfloat)blue; \
    packed_data->args.a4 = (GLfloat)alpha; \
    (packed_call_t *)packed_data; \
})
#define pack_glColor4fNormal3fVertex3fSUN(r, g, b, a, nx, ny, nz, x, y, z) ({ \
    glColor4fNormal3fVertex3fSUN_PACKED *packed_data = malloc(sizeof(glColor4fNormal3fVertex3fSUN_PACKED)); \
    packed_data->index = glColor4fNormal3fVertex3fSUN_INDEX; \
    packed_data->args.a1 = (GLfloat)r; \
    packed_data->args.a2 = (GLfloat)g; \
    packed_data->args.a3 = (GLfloat)b; \
    packed_data->args.a4 = (GLfloat)a; \
    packed_data->args.a5 = (GLfloat)nx; \
    packed_data->args.a6 = (GLfloat)ny; \
    packed_data->args.a7 = (GLfloat)nz; \
    packed_data->args.a8 = (GLfloat)x; \
    packed_data->args.a9 = (GLfloat)y; \
    packed_data->args.a10 = (GLfloat)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glColor4fNormal3fVertex3fvSUN(c, n, v) ({ \
    glColor4fNormal3fVertex3fvSUN_PACKED *packed_data = malloc(sizeof(glColor4fNormal3fVertex3fvSUN_PACKED)); \
    packed_data->index = glColor4fNormal3fVertex3fvSUN_INDEX; \
    packed_data->args.a1 = (GLfloat *)c; \
    packed_data->args.a2 = (GLfloat *)n; \
    packed_data->args.a3 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glColor4fv(v) ({ \
    glColor4fv_PACKED *packed_data = malloc(sizeof(glColor4fv_PACKED)); \
    packed_data->index = glColor4fv_INDEX; \
    packed_data->args.a1 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glColor4hNV(red, green, blue, alpha) ({ \
    glColor4hNV_PACKED *packed_data = malloc(sizeof(glColor4hNV_PACKED)); \
    packed_data->index = glColor4hNV_INDEX; \
    packed_data->args.a1 = (GLhalfNV)red; \
    packed_data->args.a2 = (GLhalfNV)green; \
    packed_data->args.a3 = (GLhalfNV)blue; \
    packed_data->args.a4 = (GLhalfNV)alpha; \
    (packed_call_t *)packed_data; \
})
#define pack_glColor4hvNV(v) ({ \
    glColor4hvNV_PACKED *packed_data = malloc(sizeof(glColor4hvNV_PACKED)); \
    packed_data->index = glColor4hvNV_INDEX; \
    packed_data->args.a1 = (GLhalfNV *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glColor4i(red, green, blue, alpha) ({ \
    glColor4i_PACKED *packed_data = malloc(sizeof(glColor4i_PACKED)); \
    packed_data->index = glColor4i_INDEX; \
    packed_data->args.a1 = (GLint)red; \
    packed_data->args.a2 = (GLint)green; \
    packed_data->args.a3 = (GLint)blue; \
    packed_data->args.a4 = (GLint)alpha; \
    (packed_call_t *)packed_data; \
})
#define pack_glColor4iv(v) ({ \
    glColor4iv_PACKED *packed_data = malloc(sizeof(glColor4iv_PACKED)); \
    packed_data->index = glColor4iv_INDEX; \
    packed_data->args.a1 = (GLint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glColor4s(red, green, blue, alpha) ({ \
    glColor4s_PACKED *packed_data = malloc(sizeof(glColor4s_PACKED)); \
    packed_data->index = glColor4s_INDEX; \
    packed_data->args.a1 = (GLshort)red; \
    packed_data->args.a2 = (GLshort)green; \
    packed_data->args.a3 = (GLshort)blue; \
    packed_data->args.a4 = (GLshort)alpha; \
    (packed_call_t *)packed_data; \
})
#define pack_glColor4sv(v) ({ \
    glColor4sv_PACKED *packed_data = malloc(sizeof(glColor4sv_PACKED)); \
    packed_data->index = glColor4sv_INDEX; \
    packed_data->args.a1 = (GLshort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glColor4ub(red, green, blue, alpha) ({ \
    glColor4ub_PACKED *packed_data = malloc(sizeof(glColor4ub_PACKED)); \
    packed_data->index = glColor4ub_INDEX; \
    packed_data->args.a1 = (GLubyte)red; \
    packed_data->args.a2 = (GLubyte)green; \
    packed_data->args.a3 = (GLubyte)blue; \
    packed_data->args.a4 = (GLubyte)alpha; \
    (packed_call_t *)packed_data; \
})
#define pack_glColor4ubVertex2fSUN(r, g, b, a, x, y) ({ \
    glColor4ubVertex2fSUN_PACKED *packed_data = malloc(sizeof(glColor4ubVertex2fSUN_PACKED)); \
    packed_data->index = glColor4ubVertex2fSUN_INDEX; \
    packed_data->args.a1 = (GLubyte)r; \
    packed_data->args.a2 = (GLubyte)g; \
    packed_data->args.a3 = (GLubyte)b; \
    packed_data->args.a4 = (GLubyte)a; \
    packed_data->args.a5 = (GLfloat)x; \
    packed_data->args.a6 = (GLfloat)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glColor4ubVertex2fvSUN(c, v) ({ \
    glColor4ubVertex2fvSUN_PACKED *packed_data = malloc(sizeof(glColor4ubVertex2fvSUN_PACKED)); \
    packed_data->index = glColor4ubVertex2fvSUN_INDEX; \
    packed_data->args.a1 = (GLubyte *)c; \
    packed_data->args.a2 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glColor4ubVertex3fSUN(r, g, b, a, x, y, z) ({ \
    glColor4ubVertex3fSUN_PACKED *packed_data = malloc(sizeof(glColor4ubVertex3fSUN_PACKED)); \
    packed_data->index = glColor4ubVertex3fSUN_INDEX; \
    packed_data->args.a1 = (GLubyte)r; \
    packed_data->args.a2 = (GLubyte)g; \
    packed_data->args.a3 = (GLubyte)b; \
    packed_data->args.a4 = (GLubyte)a; \
    packed_data->args.a5 = (GLfloat)x; \
    packed_data->args.a6 = (GLfloat)y; \
    packed_data->args.a7 = (GLfloat)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glColor4ubVertex3fvSUN(c, v) ({ \
    glColor4ubVertex3fvSUN_PACKED *packed_data = malloc(sizeof(glColor4ubVertex3fvSUN_PACKED)); \
    packed_data->index = glColor4ubVertex3fvSUN_INDEX; \
    packed_data->args.a1 = (GLubyte *)c; \
    packed_data->args.a2 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glColor4ubv(v) ({ \
    glColor4ubv_PACKED *packed_data = malloc(sizeof(glColor4ubv_PACKED)); \
    packed_data->index = glColor4ubv_INDEX; \
    packed_data->args.a1 = (GLubyte *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glColor4ui(red, green, blue, alpha) ({ \
    glColor4ui_PACKED *packed_data = malloc(sizeof(glColor4ui_PACKED)); \
    packed_data->index = glColor4ui_INDEX; \
    packed_data->args.a1 = (GLuint)red; \
    packed_data->args.a2 = (GLuint)green; \
    packed_data->args.a3 = (GLuint)blue; \
    packed_data->args.a4 = (GLuint)alpha; \
    (packed_call_t *)packed_data; \
})
#define pack_glColor4uiv(v) ({ \
    glColor4uiv_PACKED *packed_data = malloc(sizeof(glColor4uiv_PACKED)); \
    packed_data->index = glColor4uiv_INDEX; \
    packed_data->args.a1 = (GLuint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glColor4us(red, green, blue, alpha) ({ \
    glColor4us_PACKED *packed_data = malloc(sizeof(glColor4us_PACKED)); \
    packed_data->index = glColor4us_INDEX; \
    packed_data->args.a1 = (GLushort)red; \
    packed_data->args.a2 = (GLushort)green; \
    packed_data->args.a3 = (GLushort)blue; \
    packed_data->args.a4 = (GLushort)alpha; \
    (packed_call_t *)packed_data; \
})
#define pack_glColor4usv(v) ({ \
    glColor4usv_PACKED *packed_data = malloc(sizeof(glColor4usv_PACKED)); \
    packed_data->index = glColor4usv_INDEX; \
    packed_data->args.a1 = (GLushort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glColor4x(red, green, blue, alpha) ({ \
    glColor4x_PACKED *packed_data = malloc(sizeof(glColor4x_PACKED)); \
    packed_data->index = glColor4x_INDEX; \
    packed_data->args.a1 = (GLfixed)red; \
    packed_data->args.a2 = (GLfixed)green; \
    packed_data->args.a3 = (GLfixed)blue; \
    packed_data->args.a4 = (GLfixed)alpha; \
    (packed_call_t *)packed_data; \
})
#define pack_glColor4xOES(red, green, blue, alpha) ({ \
    glColor4xOES_PACKED *packed_data = malloc(sizeof(glColor4xOES_PACKED)); \
    packed_data->index = glColor4xOES_INDEX; \
    packed_data->args.a1 = (GLfixed)red; \
    packed_data->args.a2 = (GLfixed)green; \
    packed_data->args.a3 = (GLfixed)blue; \
    packed_data->args.a4 = (GLfixed)alpha; \
    (packed_call_t *)packed_data; \
})
#define pack_glColor4xvOES(components) ({ \
    glColor4xvOES_PACKED *packed_data = malloc(sizeof(glColor4xvOES_PACKED)); \
    packed_data->index = glColor4xvOES_INDEX; \
    packed_data->args.a1 = (GLfixed *)components; \
    (packed_call_t *)packed_data; \
})
#define pack_glColorFormatNV(size, type, stride) ({ \
    glColorFormatNV_PACKED *packed_data = malloc(sizeof(glColorFormatNV_PACKED)); \
    packed_data->index = glColorFormatNV_INDEX; \
    packed_data->args.a1 = (GLint)size; \
    packed_data->args.a2 = (GLenum)type; \
    packed_data->args.a3 = (GLsizei)stride; \
    (packed_call_t *)packed_data; \
})
#define pack_glColorFragmentOp1ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod) ({ \
    glColorFragmentOp1ATI_PACKED *packed_data = malloc(sizeof(glColorFragmentOp1ATI_PACKED)); \
    packed_data->index = glColorFragmentOp1ATI_INDEX; \
    packed_data->args.a1 = (GLenum)op; \
    packed_data->args.a2 = (GLuint)dst; \
    packed_data->args.a3 = (GLuint)dstMask; \
    packed_data->args.a4 = (GLuint)dstMod; \
    packed_data->args.a5 = (GLuint)arg1; \
    packed_data->args.a6 = (GLuint)arg1Rep; \
    packed_data->args.a7 = (GLuint)arg1Mod; \
    (packed_call_t *)packed_data; \
})
#define pack_glColorFragmentOp2ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod) ({ \
    glColorFragmentOp2ATI_PACKED *packed_data = malloc(sizeof(glColorFragmentOp2ATI_PACKED)); \
    packed_data->index = glColorFragmentOp2ATI_INDEX; \
    packed_data->args.a1 = (GLenum)op; \
    packed_data->args.a2 = (GLuint)dst; \
    packed_data->args.a3 = (GLuint)dstMask; \
    packed_data->args.a4 = (GLuint)dstMod; \
    packed_data->args.a5 = (GLuint)arg1; \
    packed_data->args.a6 = (GLuint)arg1Rep; \
    packed_data->args.a7 = (GLuint)arg1Mod; \
    packed_data->args.a8 = (GLuint)arg2; \
    packed_data->args.a9 = (GLuint)arg2Rep; \
    packed_data->args.a10 = (GLuint)arg2Mod; \
    (packed_call_t *)packed_data; \
})
#define pack_glColorFragmentOp3ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod) ({ \
    glColorFragmentOp3ATI_PACKED *packed_data = malloc(sizeof(glColorFragmentOp3ATI_PACKED)); \
    packed_data->index = glColorFragmentOp3ATI_INDEX; \
    packed_data->args.a1 = (GLenum)op; \
    packed_data->args.a2 = (GLuint)dst; \
    packed_data->args.a3 = (GLuint)dstMask; \
    packed_data->args.a4 = (GLuint)dstMod; \
    packed_data->args.a5 = (GLuint)arg1; \
    packed_data->args.a6 = (GLuint)arg1Rep; \
    packed_data->args.a7 = (GLuint)arg1Mod; \
    packed_data->args.a8 = (GLuint)arg2; \
    packed_data->args.a9 = (GLuint)arg2Rep; \
    packed_data->args.a10 = (GLuint)arg2Mod; \
    packed_data->args.a11 = (GLuint)arg3; \
    packed_data->args.a12 = (GLuint)arg3Rep; \
    packed_data->args.a13 = (GLuint)arg3Mod; \
    (packed_call_t *)packed_data; \
})
#define pack_glColorMask(red, green, blue, alpha) ({ \
    glColorMask_PACKED *packed_data = malloc(sizeof(glColorMask_PACKED)); \
    packed_data->index = glColorMask_INDEX; \
    packed_data->args.a1 = (GLboolean)red; \
    packed_data->args.a2 = (GLboolean)green; \
    packed_data->args.a3 = (GLboolean)blue; \
    packed_data->args.a4 = (GLboolean)alpha; \
    (packed_call_t *)packed_data; \
})
#define pack_glColorMaskIndexedEXT(index, r, g, b, a) ({ \
    glColorMaskIndexedEXT_PACKED *packed_data = malloc(sizeof(glColorMaskIndexedEXT_PACKED)); \
    packed_data->index = glColorMaskIndexedEXT_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLboolean)r; \
    packed_data->args.a3 = (GLboolean)g; \
    packed_data->args.a4 = (GLboolean)b; \
    packed_data->args.a5 = (GLboolean)a; \
    (packed_call_t *)packed_data; \
})
#define pack_glColorMaski(index, r, g, b, a) ({ \
    glColorMaski_PACKED *packed_data = malloc(sizeof(glColorMaski_PACKED)); \
    packed_data->index = glColorMaski_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLboolean)r; \
    packed_data->args.a3 = (GLboolean)g; \
    packed_data->args.a4 = (GLboolean)b; \
    packed_data->args.a5 = (GLboolean)a; \
    (packed_call_t *)packed_data; \
})
#define pack_glColorMaterial(face, mode) ({ \
    glColorMaterial_PACKED *packed_data = malloc(sizeof(glColorMaterial_PACKED)); \
    packed_data->index = glColorMaterial_INDEX; \
    packed_data->args.a1 = (GLenum)face; \
    packed_data->args.a2 = (GLenum)mode; \
    (packed_call_t *)packed_data; \
})
#define pack_glColorP3ui(type, color) ({ \
    glColorP3ui_PACKED *packed_data = malloc(sizeof(glColorP3ui_PACKED)); \
    packed_data->index = glColorP3ui_INDEX; \
    packed_data->args.a1 = (GLenum)type; \
    packed_data->args.a2 = (GLuint)color; \
    (packed_call_t *)packed_data; \
})
#define pack_glColorP3uiv(type, color) ({ \
    glColorP3uiv_PACKED *packed_data = malloc(sizeof(glColorP3uiv_PACKED)); \
    packed_data->index = glColorP3uiv_INDEX; \
    packed_data->args.a1 = (GLenum)type; \
    packed_data->args.a2 = (GLuint *)color; \
    (packed_call_t *)packed_data; \
})
#define pack_glColorP4ui(type, color) ({ \
    glColorP4ui_PACKED *packed_data = malloc(sizeof(glColorP4ui_PACKED)); \
    packed_data->index = glColorP4ui_INDEX; \
    packed_data->args.a1 = (GLenum)type; \
    packed_data->args.a2 = (GLuint)color; \
    (packed_call_t *)packed_data; \
})
#define pack_glColorP4uiv(type, color) ({ \
    glColorP4uiv_PACKED *packed_data = malloc(sizeof(glColorP4uiv_PACKED)); \
    packed_data->index = glColorP4uiv_INDEX; \
    packed_data->args.a1 = (GLenum)type; \
    packed_data->args.a2 = (GLuint *)color; \
    (packed_call_t *)packed_data; \
})
#define pack_glColorPointer(size, type, stride, pointer) ({ \
    glColorPointer_PACKED *packed_data = malloc(sizeof(glColorPointer_PACKED)); \
    packed_data->index = glColorPointer_INDEX; \
    packed_data->args.a1 = (GLint)size; \
    packed_data->args.a2 = (GLenum)type; \
    packed_data->args.a3 = (GLsizei)stride; \
    packed_data->args.a4 = (GLvoid *)pointer; \
    (packed_call_t *)packed_data; \
})
#define pack_glColorPointerEXT(size, type, stride, count, pointer) ({ \
    glColorPointerEXT_PACKED *packed_data = malloc(sizeof(glColorPointerEXT_PACKED)); \
    packed_data->index = glColorPointerEXT_INDEX; \
    packed_data->args.a1 = (GLint)size; \
    packed_data->args.a2 = (GLenum)type; \
    packed_data->args.a3 = (GLsizei)stride; \
    packed_data->args.a4 = (GLsizei)count; \
    packed_data->args.a5 = (GLvoid *)pointer; \
    (packed_call_t *)packed_data; \
})
#define pack_glColorPointerListIBM(size, type, stride, pointer, ptrstride) ({ \
    glColorPointerListIBM_PACKED *packed_data = malloc(sizeof(glColorPointerListIBM_PACKED)); \
    packed_data->index = glColorPointerListIBM_INDEX; \
    packed_data->args.a1 = (GLint)size; \
    packed_data->args.a2 = (GLenum)type; \
    packed_data->args.a3 = (GLint)stride; \
    packed_data->args.a4 = (GLvoid *)pointer; \
    packed_data->args.a5 = (GLint)ptrstride; \
    (packed_call_t *)packed_data; \
})
#define pack_glColorPointervINTEL(size, type, pointer) ({ \
    glColorPointervINTEL_PACKED *packed_data = malloc(sizeof(glColorPointervINTEL_PACKED)); \
    packed_data->index = glColorPointervINTEL_INDEX; \
    packed_data->args.a1 = (GLint)size; \
    packed_data->args.a2 = (GLenum)type; \
    packed_data->args.a3 = (GLvoid *)pointer; \
    (packed_call_t *)packed_data; \
})
#define pack_glColorSubTable(target, start, count, format, type, data) ({ \
    glColorSubTable_PACKED *packed_data = malloc(sizeof(glColorSubTable_PACKED)); \
    packed_data->index = glColorSubTable_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLsizei)start; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLenum)format; \
    packed_data->args.a5 = (GLenum)type; \
    packed_data->args.a6 = (GLvoid *)data; \
    (packed_call_t *)packed_data; \
})
#define pack_glColorSubTableEXT(target, start, count, format, type, data) ({ \
    glColorSubTableEXT_PACKED *packed_data = malloc(sizeof(glColorSubTableEXT_PACKED)); \
    packed_data->index = glColorSubTableEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLsizei)start; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLenum)format; \
    packed_data->args.a5 = (GLenum)type; \
    packed_data->args.a6 = (GLvoid *)data; \
    (packed_call_t *)packed_data; \
})
#define pack_glColorTable(target, internalformat, width, format, type, table) ({ \
    glColorTable_PACKED *packed_data = malloc(sizeof(glColorTable_PACKED)); \
    packed_data->index = glColorTable_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)internalformat; \
    packed_data->args.a3 = (GLsizei)width; \
    packed_data->args.a4 = (GLenum)format; \
    packed_data->args.a5 = (GLenum)type; \
    packed_data->args.a6 = (GLvoid *)table; \
    (packed_call_t *)packed_data; \
})
#define pack_glColorTableEXT(target, internalFormat, width, format, type, table) ({ \
    glColorTableEXT_PACKED *packed_data = malloc(sizeof(glColorTableEXT_PACKED)); \
    packed_data->index = glColorTableEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)internalFormat; \
    packed_data->args.a3 = (GLsizei)width; \
    packed_data->args.a4 = (GLenum)format; \
    packed_data->args.a5 = (GLenum)type; \
    packed_data->args.a6 = (GLvoid *)table; \
    (packed_call_t *)packed_data; \
})
#define pack_glColorTableParameterfv(target, pname, params) ({ \
    glColorTableParameterfv_PACKED *packed_data = malloc(sizeof(glColorTableParameterfv_PACKED)); \
    packed_data->index = glColorTableParameterfv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glColorTableParameterfvSGI(target, pname, params) ({ \
    glColorTableParameterfvSGI_PACKED *packed_data = malloc(sizeof(glColorTableParameterfvSGI_PACKED)); \
    packed_data->index = glColorTableParameterfvSGI_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glColorTableParameteriv(target, pname, params) ({ \
    glColorTableParameteriv_PACKED *packed_data = malloc(sizeof(glColorTableParameteriv_PACKED)); \
    packed_data->index = glColorTableParameteriv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glColorTableParameterivSGI(target, pname, params) ({ \
    glColorTableParameterivSGI_PACKED *packed_data = malloc(sizeof(glColorTableParameterivSGI_PACKED)); \
    packed_data->index = glColorTableParameterivSGI_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glColorTableSGI(target, internalformat, width, format, type, table) ({ \
    glColorTableSGI_PACKED *packed_data = malloc(sizeof(glColorTableSGI_PACKED)); \
    packed_data->index = glColorTableSGI_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)internalformat; \
    packed_data->args.a3 = (GLsizei)width; \
    packed_data->args.a4 = (GLenum)format; \
    packed_data->args.a5 = (GLenum)type; \
    packed_data->args.a6 = (GLvoid *)table; \
    (packed_call_t *)packed_data; \
})
#define pack_glCombinerInputNV(stage, portion, variable, input, mapping, componentUsage) ({ \
    glCombinerInputNV_PACKED *packed_data = malloc(sizeof(glCombinerInputNV_PACKED)); \
    packed_data->index = glCombinerInputNV_INDEX; \
    packed_data->args.a1 = (GLenum)stage; \
    packed_data->args.a2 = (GLenum)portion; \
    packed_data->args.a3 = (GLenum)variable; \
    packed_data->args.a4 = (GLenum)input; \
    packed_data->args.a5 = (GLenum)mapping; \
    packed_data->args.a6 = (GLenum)componentUsage; \
    (packed_call_t *)packed_data; \
})
#define pack_glCombinerOutputNV(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum) ({ \
    glCombinerOutputNV_PACKED *packed_data = malloc(sizeof(glCombinerOutputNV_PACKED)); \
    packed_data->index = glCombinerOutputNV_INDEX; \
    packed_data->args.a1 = (GLenum)stage; \
    packed_data->args.a2 = (GLenum)portion; \
    packed_data->args.a3 = (GLenum)abOutput; \
    packed_data->args.a4 = (GLenum)cdOutput; \
    packed_data->args.a5 = (GLenum)sumOutput; \
    packed_data->args.a6 = (GLenum)scale; \
    packed_data->args.a7 = (GLenum)bias; \
    packed_data->args.a8 = (GLboolean)abDotProduct; \
    packed_data->args.a9 = (GLboolean)cdDotProduct; \
    packed_data->args.a10 = (GLboolean)muxSum; \
    (packed_call_t *)packed_data; \
})
#define pack_glCombinerParameterfNV(pname, param) ({ \
    glCombinerParameterfNV_PACKED *packed_data = malloc(sizeof(glCombinerParameterfNV_PACKED)); \
    packed_data->index = glCombinerParameterfNV_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLfloat)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glCombinerParameterfvNV(pname, params) ({ \
    glCombinerParameterfvNV_PACKED *packed_data = malloc(sizeof(glCombinerParameterfvNV_PACKED)); \
    packed_data->index = glCombinerParameterfvNV_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glCombinerParameteriNV(pname, param) ({ \
    glCombinerParameteriNV_PACKED *packed_data = malloc(sizeof(glCombinerParameteriNV_PACKED)); \
    packed_data->index = glCombinerParameteriNV_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLint)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glCombinerParameterivNV(pname, params) ({ \
    glCombinerParameterivNV_PACKED *packed_data = malloc(sizeof(glCombinerParameterivNV_PACKED)); \
    packed_data->index = glCombinerParameterivNV_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glCombinerStageParameterfvNV(stage, pname, params) ({ \
    glCombinerStageParameterfvNV_PACKED *packed_data = malloc(sizeof(glCombinerStageParameterfvNV_PACKED)); \
    packed_data->index = glCombinerStageParameterfvNV_INDEX; \
    packed_data->args.a1 = (GLenum)stage; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glCompileShader(shader) ({ \
    glCompileShader_PACKED *packed_data = malloc(sizeof(glCompileShader_PACKED)); \
    packed_data->index = glCompileShader_INDEX; \
    packed_data->args.a1 = (GLuint)shader; \
    (packed_call_t *)packed_data; \
})
#define pack_glCompileShaderARB(shaderObj) ({ \
    glCompileShaderARB_PACKED *packed_data = malloc(sizeof(glCompileShaderARB_PACKED)); \
    packed_data->index = glCompileShaderARB_INDEX; \
    packed_data->args.a1 = (GLhandleARB)shaderObj; \
    (packed_call_t *)packed_data; \
})
#define pack_glCompileShaderIncludeARB(shader, count, path, length) ({ \
    glCompileShaderIncludeARB_PACKED *packed_data = malloc(sizeof(glCompileShaderIncludeARB_PACKED)); \
    packed_data->index = glCompileShaderIncludeARB_INDEX; \
    packed_data->args.a1 = (GLuint)shader; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLchar *)path; \
    packed_data->args.a4 = (GLint *)length; \
    (packed_call_t *)packed_data; \
})
#define pack_glCompressedMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, imageSize, bits) ({ \
    glCompressedMultiTexImage1DEXT_PACKED *packed_data = malloc(sizeof(glCompressedMultiTexImage1DEXT_PACKED)); \
    packed_data->index = glCompressedMultiTexImage1DEXT_INDEX; \
    packed_data->args.a1 = (GLenum)texunit; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLint)level; \
    packed_data->args.a4 = (GLenum)internalformat; \
    packed_data->args.a5 = (GLsizei)width; \
    packed_data->args.a6 = (GLint)border; \
    packed_data->args.a7 = (GLsizei)imageSize; \
    packed_data->args.a8 = (GLvoid *)bits; \
    (packed_call_t *)packed_data; \
})
#define pack_glCompressedMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, imageSize, bits) ({ \
    glCompressedMultiTexImage2DEXT_PACKED *packed_data = malloc(sizeof(glCompressedMultiTexImage2DEXT_PACKED)); \
    packed_data->index = glCompressedMultiTexImage2DEXT_INDEX; \
    packed_data->args.a1 = (GLenum)texunit; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLint)level; \
    packed_data->args.a4 = (GLenum)internalformat; \
    packed_data->args.a5 = (GLsizei)width; \
    packed_data->args.a6 = (GLsizei)height; \
    packed_data->args.a7 = (GLint)border; \
    packed_data->args.a8 = (GLsizei)imageSize; \
    packed_data->args.a9 = (GLvoid *)bits; \
    (packed_call_t *)packed_data; \
})
#define pack_glCompressedMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits) ({ \
    glCompressedMultiTexImage3DEXT_PACKED *packed_data = malloc(sizeof(glCompressedMultiTexImage3DEXT_PACKED)); \
    packed_data->index = glCompressedMultiTexImage3DEXT_INDEX; \
    packed_data->args.a1 = (GLenum)texunit; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLint)level; \
    packed_data->args.a4 = (GLenum)internalformat; \
    packed_data->args.a5 = (GLsizei)width; \
    packed_data->args.a6 = (GLsizei)height; \
    packed_data->args.a7 = (GLsizei)depth; \
    packed_data->args.a8 = (GLint)border; \
    packed_data->args.a9 = (GLsizei)imageSize; \
    packed_data->args.a10 = (GLvoid *)bits; \
    (packed_call_t *)packed_data; \
})
#define pack_glCompressedMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, imageSize, bits) ({ \
    glCompressedMultiTexSubImage1DEXT_PACKED *packed_data = malloc(sizeof(glCompressedMultiTexSubImage1DEXT_PACKED)); \
    packed_data->index = glCompressedMultiTexSubImage1DEXT_INDEX; \
    packed_data->args.a1 = (GLenum)texunit; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLint)level; \
    packed_data->args.a4 = (GLint)xoffset; \
    packed_data->args.a5 = (GLsizei)width; \
    packed_data->args.a6 = (GLenum)format; \
    packed_data->args.a7 = (GLsizei)imageSize; \
    packed_data->args.a8 = (GLvoid *)bits; \
    (packed_call_t *)packed_data; \
})
#define pack_glCompressedMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits) ({ \
    glCompressedMultiTexSubImage2DEXT_PACKED *packed_data = malloc(sizeof(glCompressedMultiTexSubImage2DEXT_PACKED)); \
    packed_data->index = glCompressedMultiTexSubImage2DEXT_INDEX; \
    packed_data->args.a1 = (GLenum)texunit; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLint)level; \
    packed_data->args.a4 = (GLint)xoffset; \
    packed_data->args.a5 = (GLint)yoffset; \
    packed_data->args.a6 = (GLsizei)width; \
    packed_data->args.a7 = (GLsizei)height; \
    packed_data->args.a8 = (GLenum)format; \
    packed_data->args.a9 = (GLsizei)imageSize; \
    packed_data->args.a10 = (GLvoid *)bits; \
    (packed_call_t *)packed_data; \
})
#define pack_glCompressedMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits) ({ \
    glCompressedMultiTexSubImage3DEXT_PACKED *packed_data = malloc(sizeof(glCompressedMultiTexSubImage3DEXT_PACKED)); \
    packed_data->index = glCompressedMultiTexSubImage3DEXT_INDEX; \
    packed_data->args.a1 = (GLenum)texunit; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLint)level; \
    packed_data->args.a4 = (GLint)xoffset; \
    packed_data->args.a5 = (GLint)yoffset; \
    packed_data->args.a6 = (GLint)zoffset; \
    packed_data->args.a7 = (GLsizei)width; \
    packed_data->args.a8 = (GLsizei)height; \
    packed_data->args.a9 = (GLsizei)depth; \
    packed_data->args.a10 = (GLenum)format; \
    packed_data->args.a11 = (GLsizei)imageSize; \
    packed_data->args.a12 = (GLvoid *)bits; \
    (packed_call_t *)packed_data; \
})
#define pack_glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data) ({ \
    glCompressedTexImage1D_PACKED *packed_data = malloc(sizeof(glCompressedTexImage1D_PACKED)); \
    packed_data->index = glCompressedTexImage1D_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint)level; \
    packed_data->args.a3 = (GLenum)internalformat; \
    packed_data->args.a4 = (GLsizei)width; \
    packed_data->args.a5 = (GLint)border; \
    packed_data->args.a6 = (GLsizei)imageSize; \
    packed_data->args.a7 = (GLvoid *)data; \
    (packed_call_t *)packed_data; \
})
#define pack_glCompressedTexImage1DARB(target, level, internalformat, width, border, imageSize, data) ({ \
    glCompressedTexImage1DARB_PACKED *packed_data = malloc(sizeof(glCompressedTexImage1DARB_PACKED)); \
    packed_data->index = glCompressedTexImage1DARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint)level; \
    packed_data->args.a3 = (GLenum)internalformat; \
    packed_data->args.a4 = (GLsizei)width; \
    packed_data->args.a5 = (GLint)border; \
    packed_data->args.a6 = (GLsizei)imageSize; \
    packed_data->args.a7 = (GLvoid *)data; \
    (packed_call_t *)packed_data; \
})
#define pack_glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data) ({ \
    glCompressedTexImage2D_PACKED *packed_data = malloc(sizeof(glCompressedTexImage2D_PACKED)); \
    packed_data->index = glCompressedTexImage2D_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint)level; \
    packed_data->args.a3 = (GLenum)internalformat; \
    packed_data->args.a4 = (GLsizei)width; \
    packed_data->args.a5 = (GLsizei)height; \
    packed_data->args.a6 = (GLint)border; \
    packed_data->args.a7 = (GLsizei)imageSize; \
    packed_data->args.a8 = (GLvoid *)data; \
    (packed_call_t *)packed_data; \
})
#define pack_glCompressedTexImage2DARB(target, level, internalformat, width, height, border, imageSize, data) ({ \
    glCompressedTexImage2DARB_PACKED *packed_data = malloc(sizeof(glCompressedTexImage2DARB_PACKED)); \
    packed_data->index = glCompressedTexImage2DARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint)level; \
    packed_data->args.a3 = (GLenum)internalformat; \
    packed_data->args.a4 = (GLsizei)width; \
    packed_data->args.a5 = (GLsizei)height; \
    packed_data->args.a6 = (GLint)border; \
    packed_data->args.a7 = (GLsizei)imageSize; \
    packed_data->args.a8 = (GLvoid *)data; \
    (packed_call_t *)packed_data; \
})
#define pack_glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data) ({ \
    glCompressedTexImage3D_PACKED *packed_data = malloc(sizeof(glCompressedTexImage3D_PACKED)); \
    packed_data->index = glCompressedTexImage3D_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint)level; \
    packed_data->args.a3 = (GLenum)internalformat; \
    packed_data->args.a4 = (GLsizei)width; \
    packed_data->args.a5 = (GLsizei)height; \
    packed_data->args.a6 = (GLsizei)depth; \
    packed_data->args.a7 = (GLint)border; \
    packed_data->args.a8 = (GLsizei)imageSize; \
    packed_data->args.a9 = (GLvoid *)data; \
    (packed_call_t *)packed_data; \
})
#define pack_glCompressedTexImage3DARB(target, level, internalformat, width, height, depth, border, imageSize, data) ({ \
    glCompressedTexImage3DARB_PACKED *packed_data = malloc(sizeof(glCompressedTexImage3DARB_PACKED)); \
    packed_data->index = glCompressedTexImage3DARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint)level; \
    packed_data->args.a3 = (GLenum)internalformat; \
    packed_data->args.a4 = (GLsizei)width; \
    packed_data->args.a5 = (GLsizei)height; \
    packed_data->args.a6 = (GLsizei)depth; \
    packed_data->args.a7 = (GLint)border; \
    packed_data->args.a8 = (GLsizei)imageSize; \
    packed_data->args.a9 = (GLvoid *)data; \
    (packed_call_t *)packed_data; \
})
#define pack_glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data) ({ \
    glCompressedTexSubImage1D_PACKED *packed_data = malloc(sizeof(glCompressedTexSubImage1D_PACKED)); \
    packed_data->index = glCompressedTexSubImage1D_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint)level; \
    packed_data->args.a3 = (GLint)xoffset; \
    packed_data->args.a4 = (GLsizei)width; \
    packed_data->args.a5 = (GLenum)format; \
    packed_data->args.a6 = (GLsizei)imageSize; \
    packed_data->args.a7 = (GLvoid *)data; \
    (packed_call_t *)packed_data; \
})
#define pack_glCompressedTexSubImage1DARB(target, level, xoffset, width, format, imageSize, data) ({ \
    glCompressedTexSubImage1DARB_PACKED *packed_data = malloc(sizeof(glCompressedTexSubImage1DARB_PACKED)); \
    packed_data->index = glCompressedTexSubImage1DARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint)level; \
    packed_data->args.a3 = (GLint)xoffset; \
    packed_data->args.a4 = (GLsizei)width; \
    packed_data->args.a5 = (GLenum)format; \
    packed_data->args.a6 = (GLsizei)imageSize; \
    packed_data->args.a7 = (GLvoid *)data; \
    (packed_call_t *)packed_data; \
})
#define pack_glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) ({ \
    glCompressedTexSubImage2D_PACKED *packed_data = malloc(sizeof(glCompressedTexSubImage2D_PACKED)); \
    packed_data->index = glCompressedTexSubImage2D_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint)level; \
    packed_data->args.a3 = (GLint)xoffset; \
    packed_data->args.a4 = (GLint)yoffset; \
    packed_data->args.a5 = (GLsizei)width; \
    packed_data->args.a6 = (GLsizei)height; \
    packed_data->args.a7 = (GLenum)format; \
    packed_data->args.a8 = (GLsizei)imageSize; \
    packed_data->args.a9 = (GLvoid *)data; \
    (packed_call_t *)packed_data; \
})
#define pack_glCompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imageSize, data) ({ \
    glCompressedTexSubImage2DARB_PACKED *packed_data = malloc(sizeof(glCompressedTexSubImage2DARB_PACKED)); \
    packed_data->index = glCompressedTexSubImage2DARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint)level; \
    packed_data->args.a3 = (GLint)xoffset; \
    packed_data->args.a4 = (GLint)yoffset; \
    packed_data->args.a5 = (GLsizei)width; \
    packed_data->args.a6 = (GLsizei)height; \
    packed_data->args.a7 = (GLenum)format; \
    packed_data->args.a8 = (GLsizei)imageSize; \
    packed_data->args.a9 = (GLvoid *)data; \
    (packed_call_t *)packed_data; \
})
#define pack_glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) ({ \
    glCompressedTexSubImage3D_PACKED *packed_data = malloc(sizeof(glCompressedTexSubImage3D_PACKED)); \
    packed_data->index = glCompressedTexSubImage3D_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint)level; \
    packed_data->args.a3 = (GLint)xoffset; \
    packed_data->args.a4 = (GLint)yoffset; \
    packed_data->args.a5 = (GLint)zoffset; \
    packed_data->args.a6 = (GLsizei)width; \
    packed_data->args.a7 = (GLsizei)height; \
    packed_data->args.a8 = (GLsizei)depth; \
    packed_data->args.a9 = (GLenum)format; \
    packed_data->args.a10 = (GLsizei)imageSize; \
    packed_data->args.a11 = (GLvoid *)data; \
    (packed_call_t *)packed_data; \
})
#define pack_glCompressedTexSubImage3DARB(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) ({ \
    glCompressedTexSubImage3DARB_PACKED *packed_data = malloc(sizeof(glCompressedTexSubImage3DARB_PACKED)); \
    packed_data->index = glCompressedTexSubImage3DARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint)level; \
    packed_data->args.a3 = (GLint)xoffset; \
    packed_data->args.a4 = (GLint)yoffset; \
    packed_data->args.a5 = (GLint)zoffset; \
    packed_data->args.a6 = (GLsizei)width; \
    packed_data->args.a7 = (GLsizei)height; \
    packed_data->args.a8 = (GLsizei)depth; \
    packed_data->args.a9 = (GLenum)format; \
    packed_data->args.a10 = (GLsizei)imageSize; \
    packed_data->args.a11 = (GLvoid *)data; \
    (packed_call_t *)packed_data; \
})
#define pack_glCompressedTextureImage1DEXT(texture, target, level, internalformat, width, border, imageSize, bits) ({ \
    glCompressedTextureImage1DEXT_PACKED *packed_data = malloc(sizeof(glCompressedTextureImage1DEXT_PACKED)); \
    packed_data->index = glCompressedTextureImage1DEXT_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLint)level; \
    packed_data->args.a4 = (GLenum)internalformat; \
    packed_data->args.a5 = (GLsizei)width; \
    packed_data->args.a6 = (GLint)border; \
    packed_data->args.a7 = (GLsizei)imageSize; \
    packed_data->args.a8 = (GLvoid *)bits; \
    (packed_call_t *)packed_data; \
})
#define pack_glCompressedTextureImage2DEXT(texture, target, level, internalformat, width, height, border, imageSize, bits) ({ \
    glCompressedTextureImage2DEXT_PACKED *packed_data = malloc(sizeof(glCompressedTextureImage2DEXT_PACKED)); \
    packed_data->index = glCompressedTextureImage2DEXT_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLint)level; \
    packed_data->args.a4 = (GLenum)internalformat; \
    packed_data->args.a5 = (GLsizei)width; \
    packed_data->args.a6 = (GLsizei)height; \
    packed_data->args.a7 = (GLint)border; \
    packed_data->args.a8 = (GLsizei)imageSize; \
    packed_data->args.a9 = (GLvoid *)bits; \
    (packed_call_t *)packed_data; \
})
#define pack_glCompressedTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, imageSize, bits) ({ \
    glCompressedTextureImage3DEXT_PACKED *packed_data = malloc(sizeof(glCompressedTextureImage3DEXT_PACKED)); \
    packed_data->index = glCompressedTextureImage3DEXT_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLint)level; \
    packed_data->args.a4 = (GLenum)internalformat; \
    packed_data->args.a5 = (GLsizei)width; \
    packed_data->args.a6 = (GLsizei)height; \
    packed_data->args.a7 = (GLsizei)depth; \
    packed_data->args.a8 = (GLint)border; \
    packed_data->args.a9 = (GLsizei)imageSize; \
    packed_data->args.a10 = (GLvoid *)bits; \
    (packed_call_t *)packed_data; \
})
#define pack_glCompressedTextureSubImage1DEXT(texture, target, level, xoffset, width, format, imageSize, bits) ({ \
    glCompressedTextureSubImage1DEXT_PACKED *packed_data = malloc(sizeof(glCompressedTextureSubImage1DEXT_PACKED)); \
    packed_data->index = glCompressedTextureSubImage1DEXT_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLint)level; \
    packed_data->args.a4 = (GLint)xoffset; \
    packed_data->args.a5 = (GLsizei)width; \
    packed_data->args.a6 = (GLenum)format; \
    packed_data->args.a7 = (GLsizei)imageSize; \
    packed_data->args.a8 = (GLvoid *)bits; \
    (packed_call_t *)packed_data; \
})
#define pack_glCompressedTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits) ({ \
    glCompressedTextureSubImage2DEXT_PACKED *packed_data = malloc(sizeof(glCompressedTextureSubImage2DEXT_PACKED)); \
    packed_data->index = glCompressedTextureSubImage2DEXT_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLint)level; \
    packed_data->args.a4 = (GLint)xoffset; \
    packed_data->args.a5 = (GLint)yoffset; \
    packed_data->args.a6 = (GLsizei)width; \
    packed_data->args.a7 = (GLsizei)height; \
    packed_data->args.a8 = (GLenum)format; \
    packed_data->args.a9 = (GLsizei)imageSize; \
    packed_data->args.a10 = (GLvoid *)bits; \
    (packed_call_t *)packed_data; \
})
#define pack_glCompressedTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits) ({ \
    glCompressedTextureSubImage3DEXT_PACKED *packed_data = malloc(sizeof(glCompressedTextureSubImage3DEXT_PACKED)); \
    packed_data->index = glCompressedTextureSubImage3DEXT_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLint)level; \
    packed_data->args.a4 = (GLint)xoffset; \
    packed_data->args.a5 = (GLint)yoffset; \
    packed_data->args.a6 = (GLint)zoffset; \
    packed_data->args.a7 = (GLsizei)width; \
    packed_data->args.a8 = (GLsizei)height; \
    packed_data->args.a9 = (GLsizei)depth; \
    packed_data->args.a10 = (GLenum)format; \
    packed_data->args.a11 = (GLsizei)imageSize; \
    packed_data->args.a12 = (GLvoid *)bits; \
    (packed_call_t *)packed_data; \
})
#define pack_glConvolutionFilter1D(target, internalformat, width, format, type, image) ({ \
    glConvolutionFilter1D_PACKED *packed_data = malloc(sizeof(glConvolutionFilter1D_PACKED)); \
    packed_data->index = glConvolutionFilter1D_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)internalformat; \
    packed_data->args.a3 = (GLsizei)width; \
    packed_data->args.a4 = (GLenum)format; \
    packed_data->args.a5 = (GLenum)type; \
    packed_data->args.a6 = (GLvoid *)image; \
    (packed_call_t *)packed_data; \
})
#define pack_glConvolutionFilter1DEXT(target, internalformat, width, format, type, image) ({ \
    glConvolutionFilter1DEXT_PACKED *packed_data = malloc(sizeof(glConvolutionFilter1DEXT_PACKED)); \
    packed_data->index = glConvolutionFilter1DEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)internalformat; \
    packed_data->args.a3 = (GLsizei)width; \
    packed_data->args.a4 = (GLenum)format; \
    packed_data->args.a5 = (GLenum)type; \
    packed_data->args.a6 = (GLvoid *)image; \
    (packed_call_t *)packed_data; \
})
#define pack_glConvolutionFilter2D(target, internalformat, width, height, format, type, image) ({ \
    glConvolutionFilter2D_PACKED *packed_data = malloc(sizeof(glConvolutionFilter2D_PACKED)); \
    packed_data->index = glConvolutionFilter2D_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)internalformat; \
    packed_data->args.a3 = (GLsizei)width; \
    packed_data->args.a4 = (GLsizei)height; \
    packed_data->args.a5 = (GLenum)format; \
    packed_data->args.a6 = (GLenum)type; \
    packed_data->args.a7 = (GLvoid *)image; \
    (packed_call_t *)packed_data; \
})
#define pack_glConvolutionFilter2DEXT(target, internalformat, width, height, format, type, image) ({ \
    glConvolutionFilter2DEXT_PACKED *packed_data = malloc(sizeof(glConvolutionFilter2DEXT_PACKED)); \
    packed_data->index = glConvolutionFilter2DEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)internalformat; \
    packed_data->args.a3 = (GLsizei)width; \
    packed_data->args.a4 = (GLsizei)height; \
    packed_data->args.a5 = (GLenum)format; \
    packed_data->args.a6 = (GLenum)type; \
    packed_data->args.a7 = (GLvoid *)image; \
    (packed_call_t *)packed_data; \
})
#define pack_glConvolutionParameterf(target, pname, params) ({ \
    glConvolutionParameterf_PACKED *packed_data = malloc(sizeof(glConvolutionParameterf_PACKED)); \
    packed_data->index = glConvolutionParameterf_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glConvolutionParameterfEXT(target, pname, params) ({ \
    glConvolutionParameterfEXT_PACKED *packed_data = malloc(sizeof(glConvolutionParameterfEXT_PACKED)); \
    packed_data->index = glConvolutionParameterfEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glConvolutionParameterfv(target, pname, params) ({ \
    glConvolutionParameterfv_PACKED *packed_data = malloc(sizeof(glConvolutionParameterfv_PACKED)); \
    packed_data->index = glConvolutionParameterfv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glConvolutionParameterfvEXT(target, pname, params) ({ \
    glConvolutionParameterfvEXT_PACKED *packed_data = malloc(sizeof(glConvolutionParameterfvEXT_PACKED)); \
    packed_data->index = glConvolutionParameterfvEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glConvolutionParameteri(target, pname, params) ({ \
    glConvolutionParameteri_PACKED *packed_data = malloc(sizeof(glConvolutionParameteri_PACKED)); \
    packed_data->index = glConvolutionParameteri_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glConvolutionParameteriEXT(target, pname, params) ({ \
    glConvolutionParameteriEXT_PACKED *packed_data = malloc(sizeof(glConvolutionParameteriEXT_PACKED)); \
    packed_data->index = glConvolutionParameteriEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glConvolutionParameteriv(target, pname, params) ({ \
    glConvolutionParameteriv_PACKED *packed_data = malloc(sizeof(glConvolutionParameteriv_PACKED)); \
    packed_data->index = glConvolutionParameteriv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glConvolutionParameterivEXT(target, pname, params) ({ \
    glConvolutionParameterivEXT_PACKED *packed_data = malloc(sizeof(glConvolutionParameterivEXT_PACKED)); \
    packed_data->index = glConvolutionParameterivEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glConvolutionParameterxOES(target, pname, param) ({ \
    glConvolutionParameterxOES_PACKED *packed_data = malloc(sizeof(glConvolutionParameterxOES_PACKED)); \
    packed_data->index = glConvolutionParameterxOES_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfixed)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glConvolutionParameterxvOES(target, pname, params) ({ \
    glConvolutionParameterxvOES_PACKED *packed_data = malloc(sizeof(glConvolutionParameterxvOES_PACKED)); \
    packed_data->index = glConvolutionParameterxvOES_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfixed *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size) ({ \
    glCopyBufferSubData_PACKED *packed_data = malloc(sizeof(glCopyBufferSubData_PACKED)); \
    packed_data->index = glCopyBufferSubData_INDEX; \
    packed_data->args.a1 = (GLenum)readTarget; \
    packed_data->args.a2 = (GLenum)writeTarget; \
    packed_data->args.a3 = (GLintptr)readOffset; \
    packed_data->args.a4 = (GLintptr)writeOffset; \
    packed_data->args.a5 = (GLsizeiptr)size; \
    (packed_call_t *)packed_data; \
})
#define pack_glCopyColorSubTable(target, start, x, y, width) ({ \
    glCopyColorSubTable_PACKED *packed_data = malloc(sizeof(glCopyColorSubTable_PACKED)); \
    packed_data->index = glCopyColorSubTable_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLsizei)start; \
    packed_data->args.a3 = (GLint)x; \
    packed_data->args.a4 = (GLint)y; \
    packed_data->args.a5 = (GLsizei)width; \
    (packed_call_t *)packed_data; \
})
#define pack_glCopyColorSubTableEXT(target, start, x, y, width) ({ \
    glCopyColorSubTableEXT_PACKED *packed_data = malloc(sizeof(glCopyColorSubTableEXT_PACKED)); \
    packed_data->index = glCopyColorSubTableEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLsizei)start; \
    packed_data->args.a3 = (GLint)x; \
    packed_data->args.a4 = (GLint)y; \
    packed_data->args.a5 = (GLsizei)width; \
    (packed_call_t *)packed_data; \
})
#define pack_glCopyColorTable(target, internalformat, x, y, width) ({ \
    glCopyColorTable_PACKED *packed_data = malloc(sizeof(glCopyColorTable_PACKED)); \
    packed_data->index = glCopyColorTable_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)internalformat; \
    packed_data->args.a3 = (GLint)x; \
    packed_data->args.a4 = (GLint)y; \
    packed_data->args.a5 = (GLsizei)width; \
    (packed_call_t *)packed_data; \
})
#define pack_glCopyColorTableSGI(target, internalformat, x, y, width) ({ \
    glCopyColorTableSGI_PACKED *packed_data = malloc(sizeof(glCopyColorTableSGI_PACKED)); \
    packed_data->index = glCopyColorTableSGI_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)internalformat; \
    packed_data->args.a3 = (GLint)x; \
    packed_data->args.a4 = (GLint)y; \
    packed_data->args.a5 = (GLsizei)width; \
    (packed_call_t *)packed_data; \
})
#define pack_glCopyConvolutionFilter1D(target, internalformat, x, y, width) ({ \
    glCopyConvolutionFilter1D_PACKED *packed_data = malloc(sizeof(glCopyConvolutionFilter1D_PACKED)); \
    packed_data->index = glCopyConvolutionFilter1D_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)internalformat; \
    packed_data->args.a3 = (GLint)x; \
    packed_data->args.a4 = (GLint)y; \
    packed_data->args.a5 = (GLsizei)width; \
    (packed_call_t *)packed_data; \
})
#define pack_glCopyConvolutionFilter1DEXT(target, internalformat, x, y, width) ({ \
    glCopyConvolutionFilter1DEXT_PACKED *packed_data = malloc(sizeof(glCopyConvolutionFilter1DEXT_PACKED)); \
    packed_data->index = glCopyConvolutionFilter1DEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)internalformat; \
    packed_data->args.a3 = (GLint)x; \
    packed_data->args.a4 = (GLint)y; \
    packed_data->args.a5 = (GLsizei)width; \
    (packed_call_t *)packed_data; \
})
#define pack_glCopyConvolutionFilter2D(target, internalformat, x, y, width, height) ({ \
    glCopyConvolutionFilter2D_PACKED *packed_data = malloc(sizeof(glCopyConvolutionFilter2D_PACKED)); \
    packed_data->index = glCopyConvolutionFilter2D_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)internalformat; \
    packed_data->args.a3 = (GLint)x; \
    packed_data->args.a4 = (GLint)y; \
    packed_data->args.a5 = (GLsizei)width; \
    packed_data->args.a6 = (GLsizei)height; \
    (packed_call_t *)packed_data; \
})
#define pack_glCopyConvolutionFilter2DEXT(target, internalformat, x, y, width, height) ({ \
    glCopyConvolutionFilter2DEXT_PACKED *packed_data = malloc(sizeof(glCopyConvolutionFilter2DEXT_PACKED)); \
    packed_data->index = glCopyConvolutionFilter2DEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)internalformat; \
    packed_data->args.a3 = (GLint)x; \
    packed_data->args.a4 = (GLint)y; \
    packed_data->args.a5 = (GLsizei)width; \
    packed_data->args.a6 = (GLsizei)height; \
    (packed_call_t *)packed_data; \
})
#define pack_glCopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth) ({ \
    glCopyImageSubData_PACKED *packed_data = malloc(sizeof(glCopyImageSubData_PACKED)); \
    packed_data->index = glCopyImageSubData_INDEX; \
    packed_data->args.a1 = (GLuint)srcName; \
    packed_data->args.a2 = (GLenum)srcTarget; \
    packed_data->args.a3 = (GLint)srcLevel; \
    packed_data->args.a4 = (GLint)srcX; \
    packed_data->args.a5 = (GLint)srcY; \
    packed_data->args.a6 = (GLint)srcZ; \
    packed_data->args.a7 = (GLuint)dstName; \
    packed_data->args.a8 = (GLenum)dstTarget; \
    packed_data->args.a9 = (GLint)dstLevel; \
    packed_data->args.a10 = (GLint)dstX; \
    packed_data->args.a11 = (GLint)dstY; \
    packed_data->args.a12 = (GLint)dstZ; \
    packed_data->args.a13 = (GLsizei)srcWidth; \
    packed_data->args.a14 = (GLsizei)srcHeight; \
    packed_data->args.a15 = (GLsizei)srcDepth; \
    (packed_call_t *)packed_data; \
})
#define pack_glCopyImageSubDataNV(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth) ({ \
    glCopyImageSubDataNV_PACKED *packed_data = malloc(sizeof(glCopyImageSubDataNV_PACKED)); \
    packed_data->index = glCopyImageSubDataNV_INDEX; \
    packed_data->args.a1 = (GLuint)srcName; \
    packed_data->args.a2 = (GLenum)srcTarget; \
    packed_data->args.a3 = (GLint)srcLevel; \
    packed_data->args.a4 = (GLint)srcX; \
    packed_data->args.a5 = (GLint)srcY; \
    packed_data->args.a6 = (GLint)srcZ; \
    packed_data->args.a7 = (GLuint)dstName; \
    packed_data->args.a8 = (GLenum)dstTarget; \
    packed_data->args.a9 = (GLint)dstLevel; \
    packed_data->args.a10 = (GLint)dstX; \
    packed_data->args.a11 = (GLint)dstY; \
    packed_data->args.a12 = (GLint)dstZ; \
    packed_data->args.a13 = (GLsizei)width; \
    packed_data->args.a14 = (GLsizei)height; \
    packed_data->args.a15 = (GLsizei)depth; \
    (packed_call_t *)packed_data; \
})
#define pack_glCopyMultiTexImage1DEXT(texunit, target, level, internalformat, x, y, width, border) ({ \
    glCopyMultiTexImage1DEXT_PACKED *packed_data = malloc(sizeof(glCopyMultiTexImage1DEXT_PACKED)); \
    packed_data->index = glCopyMultiTexImage1DEXT_INDEX; \
    packed_data->args.a1 = (GLenum)texunit; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLint)level; \
    packed_data->args.a4 = (GLenum)internalformat; \
    packed_data->args.a5 = (GLint)x; \
    packed_data->args.a6 = (GLint)y; \
    packed_data->args.a7 = (GLsizei)width; \
    packed_data->args.a8 = (GLint)border; \
    (packed_call_t *)packed_data; \
})
#define pack_glCopyMultiTexImage2DEXT(texunit, target, level, internalformat, x, y, width, height, border) ({ \
    glCopyMultiTexImage2DEXT_PACKED *packed_data = malloc(sizeof(glCopyMultiTexImage2DEXT_PACKED)); \
    packed_data->index = glCopyMultiTexImage2DEXT_INDEX; \
    packed_data->args.a1 = (GLenum)texunit; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLint)level; \
    packed_data->args.a4 = (GLenum)internalformat; \
    packed_data->args.a5 = (GLint)x; \
    packed_data->args.a6 = (GLint)y; \
    packed_data->args.a7 = (GLsizei)width; \
    packed_data->args.a8 = (GLsizei)height; \
    packed_data->args.a9 = (GLint)border; \
    (packed_call_t *)packed_data; \
})
#define pack_glCopyMultiTexSubImage1DEXT(texunit, target, level, xoffset, x, y, width) ({ \
    glCopyMultiTexSubImage1DEXT_PACKED *packed_data = malloc(sizeof(glCopyMultiTexSubImage1DEXT_PACKED)); \
    packed_data->index = glCopyMultiTexSubImage1DEXT_INDEX; \
    packed_data->args.a1 = (GLenum)texunit; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLint)level; \
    packed_data->args.a4 = (GLint)xoffset; \
    packed_data->args.a5 = (GLint)x; \
    packed_data->args.a6 = (GLint)y; \
    packed_data->args.a7 = (GLsizei)width; \
    (packed_call_t *)packed_data; \
})
#define pack_glCopyMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, x, y, width, height) ({ \
    glCopyMultiTexSubImage2DEXT_PACKED *packed_data = malloc(sizeof(glCopyMultiTexSubImage2DEXT_PACKED)); \
    packed_data->index = glCopyMultiTexSubImage2DEXT_INDEX; \
    packed_data->args.a1 = (GLenum)texunit; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLint)level; \
    packed_data->args.a4 = (GLint)xoffset; \
    packed_data->args.a5 = (GLint)yoffset; \
    packed_data->args.a6 = (GLint)x; \
    packed_data->args.a7 = (GLint)y; \
    packed_data->args.a8 = (GLsizei)width; \
    packed_data->args.a9 = (GLsizei)height; \
    (packed_call_t *)packed_data; \
})
#define pack_glCopyMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height) ({ \
    glCopyMultiTexSubImage3DEXT_PACKED *packed_data = malloc(sizeof(glCopyMultiTexSubImage3DEXT_PACKED)); \
    packed_data->index = glCopyMultiTexSubImage3DEXT_INDEX; \
    packed_data->args.a1 = (GLenum)texunit; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLint)level; \
    packed_data->args.a4 = (GLint)xoffset; \
    packed_data->args.a5 = (GLint)yoffset; \
    packed_data->args.a6 = (GLint)zoffset; \
    packed_data->args.a7 = (GLint)x; \
    packed_data->args.a8 = (GLint)y; \
    packed_data->args.a9 = (GLsizei)width; \
    packed_data->args.a10 = (GLsizei)height; \
    (packed_call_t *)packed_data; \
})
#define pack_glCopyPathNV(resultPath, srcPath) ({ \
    glCopyPathNV_PACKED *packed_data = malloc(sizeof(glCopyPathNV_PACKED)); \
    packed_data->index = glCopyPathNV_INDEX; \
    packed_data->args.a1 = (GLuint)resultPath; \
    packed_data->args.a2 = (GLuint)srcPath; \
    (packed_call_t *)packed_data; \
})
#define pack_glCopyPixels(x, y, width, height, type) ({ \
    glCopyPixels_PACKED *packed_data = malloc(sizeof(glCopyPixels_PACKED)); \
    packed_data->index = glCopyPixels_INDEX; \
    packed_data->args.a1 = (GLint)x; \
    packed_data->args.a2 = (GLint)y; \
    packed_data->args.a3 = (GLsizei)width; \
    packed_data->args.a4 = (GLsizei)height; \
    packed_data->args.a5 = (GLenum)type; \
    (packed_call_t *)packed_data; \
})
#define pack_glCopyTexImage1D(target, level, internalformat, x, y, width, border) ({ \
    glCopyTexImage1D_PACKED *packed_data = malloc(sizeof(glCopyTexImage1D_PACKED)); \
    packed_data->index = glCopyTexImage1D_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint)level; \
    packed_data->args.a3 = (GLenum)internalformat; \
    packed_data->args.a4 = (GLint)x; \
    packed_data->args.a5 = (GLint)y; \
    packed_data->args.a6 = (GLsizei)width; \
    packed_data->args.a7 = (GLint)border; \
    (packed_call_t *)packed_data; \
})
#define pack_glCopyTexImage1DEXT(target, level, internalformat, x, y, width, border) ({ \
    glCopyTexImage1DEXT_PACKED *packed_data = malloc(sizeof(glCopyTexImage1DEXT_PACKED)); \
    packed_data->index = glCopyTexImage1DEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint)level; \
    packed_data->args.a3 = (GLenum)internalformat; \
    packed_data->args.a4 = (GLint)x; \
    packed_data->args.a5 = (GLint)y; \
    packed_data->args.a6 = (GLsizei)width; \
    packed_data->args.a7 = (GLint)border; \
    (packed_call_t *)packed_data; \
})
#define pack_glCopyTexImage2D(target, level, internalformat, x, y, width, height, border) ({ \
    glCopyTexImage2D_PACKED *packed_data = malloc(sizeof(glCopyTexImage2D_PACKED)); \
    packed_data->index = glCopyTexImage2D_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint)level; \
    packed_data->args.a3 = (GLenum)internalformat; \
    packed_data->args.a4 = (GLint)x; \
    packed_data->args.a5 = (GLint)y; \
    packed_data->args.a6 = (GLsizei)width; \
    packed_data->args.a7 = (GLsizei)height; \
    packed_data->args.a8 = (GLint)border; \
    (packed_call_t *)packed_data; \
})
#define pack_glCopyTexImage2DEXT(target, level, internalformat, x, y, width, height, border) ({ \
    glCopyTexImage2DEXT_PACKED *packed_data = malloc(sizeof(glCopyTexImage2DEXT_PACKED)); \
    packed_data->index = glCopyTexImage2DEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint)level; \
    packed_data->args.a3 = (GLenum)internalformat; \
    packed_data->args.a4 = (GLint)x; \
    packed_data->args.a5 = (GLint)y; \
    packed_data->args.a6 = (GLsizei)width; \
    packed_data->args.a7 = (GLsizei)height; \
    packed_data->args.a8 = (GLint)border; \
    (packed_call_t *)packed_data; \
})
#define pack_glCopyTexSubImage1D(target, level, xoffset, x, y, width) ({ \
    glCopyTexSubImage1D_PACKED *packed_data = malloc(sizeof(glCopyTexSubImage1D_PACKED)); \
    packed_data->index = glCopyTexSubImage1D_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint)level; \
    packed_data->args.a3 = (GLint)xoffset; \
    packed_data->args.a4 = (GLint)x; \
    packed_data->args.a5 = (GLint)y; \
    packed_data->args.a6 = (GLsizei)width; \
    (packed_call_t *)packed_data; \
})
#define pack_glCopyTexSubImage1DEXT(target, level, xoffset, x, y, width) ({ \
    glCopyTexSubImage1DEXT_PACKED *packed_data = malloc(sizeof(glCopyTexSubImage1DEXT_PACKED)); \
    packed_data->index = glCopyTexSubImage1DEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint)level; \
    packed_data->args.a3 = (GLint)xoffset; \
    packed_data->args.a4 = (GLint)x; \
    packed_data->args.a5 = (GLint)y; \
    packed_data->args.a6 = (GLsizei)width; \
    (packed_call_t *)packed_data; \
})
#define pack_glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height) ({ \
    glCopyTexSubImage2D_PACKED *packed_data = malloc(sizeof(glCopyTexSubImage2D_PACKED)); \
    packed_data->index = glCopyTexSubImage2D_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint)level; \
    packed_data->args.a3 = (GLint)xoffset; \
    packed_data->args.a4 = (GLint)yoffset; \
    packed_data->args.a5 = (GLint)x; \
    packed_data->args.a6 = (GLint)y; \
    packed_data->args.a7 = (GLsizei)width; \
    packed_data->args.a8 = (GLsizei)height; \
    (packed_call_t *)packed_data; \
})
#define pack_glCopyTexSubImage2DEXT(target, level, xoffset, yoffset, x, y, width, height) ({ \
    glCopyTexSubImage2DEXT_PACKED *packed_data = malloc(sizeof(glCopyTexSubImage2DEXT_PACKED)); \
    packed_data->index = glCopyTexSubImage2DEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint)level; \
    packed_data->args.a3 = (GLint)xoffset; \
    packed_data->args.a4 = (GLint)yoffset; \
    packed_data->args.a5 = (GLint)x; \
    packed_data->args.a6 = (GLint)y; \
    packed_data->args.a7 = (GLsizei)width; \
    packed_data->args.a8 = (GLsizei)height; \
    (packed_call_t *)packed_data; \
})
#define pack_glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height) ({ \
    glCopyTexSubImage3D_PACKED *packed_data = malloc(sizeof(glCopyTexSubImage3D_PACKED)); \
    packed_data->index = glCopyTexSubImage3D_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint)level; \
    packed_data->args.a3 = (GLint)xoffset; \
    packed_data->args.a4 = (GLint)yoffset; \
    packed_data->args.a5 = (GLint)zoffset; \
    packed_data->args.a6 = (GLint)x; \
    packed_data->args.a7 = (GLint)y; \
    packed_data->args.a8 = (GLsizei)width; \
    packed_data->args.a9 = (GLsizei)height; \
    (packed_call_t *)packed_data; \
})
#define pack_glCopyTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, x, y, width, height) ({ \
    glCopyTexSubImage3DEXT_PACKED *packed_data = malloc(sizeof(glCopyTexSubImage3DEXT_PACKED)); \
    packed_data->index = glCopyTexSubImage3DEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint)level; \
    packed_data->args.a3 = (GLint)xoffset; \
    packed_data->args.a4 = (GLint)yoffset; \
    packed_data->args.a5 = (GLint)zoffset; \
    packed_data->args.a6 = (GLint)x; \
    packed_data->args.a7 = (GLint)y; \
    packed_data->args.a8 = (GLsizei)width; \
    packed_data->args.a9 = (GLsizei)height; \
    (packed_call_t *)packed_data; \
})
#define pack_glCopyTextureImage1DEXT(texture, target, level, internalformat, x, y, width, border) ({ \
    glCopyTextureImage1DEXT_PACKED *packed_data = malloc(sizeof(glCopyTextureImage1DEXT_PACKED)); \
    packed_data->index = glCopyTextureImage1DEXT_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLint)level; \
    packed_data->args.a4 = (GLenum)internalformat; \
    packed_data->args.a5 = (GLint)x; \
    packed_data->args.a6 = (GLint)y; \
    packed_data->args.a7 = (GLsizei)width; \
    packed_data->args.a8 = (GLint)border; \
    (packed_call_t *)packed_data; \
})
#define pack_glCopyTextureImage2DEXT(texture, target, level, internalformat, x, y, width, height, border) ({ \
    glCopyTextureImage2DEXT_PACKED *packed_data = malloc(sizeof(glCopyTextureImage2DEXT_PACKED)); \
    packed_data->index = glCopyTextureImage2DEXT_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLint)level; \
    packed_data->args.a4 = (GLenum)internalformat; \
    packed_data->args.a5 = (GLint)x; \
    packed_data->args.a6 = (GLint)y; \
    packed_data->args.a7 = (GLsizei)width; \
    packed_data->args.a8 = (GLsizei)height; \
    packed_data->args.a9 = (GLint)border; \
    (packed_call_t *)packed_data; \
})
#define pack_glCopyTextureSubImage1DEXT(texture, target, level, xoffset, x, y, width) ({ \
    glCopyTextureSubImage1DEXT_PACKED *packed_data = malloc(sizeof(glCopyTextureSubImage1DEXT_PACKED)); \
    packed_data->index = glCopyTextureSubImage1DEXT_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLint)level; \
    packed_data->args.a4 = (GLint)xoffset; \
    packed_data->args.a5 = (GLint)x; \
    packed_data->args.a6 = (GLint)y; \
    packed_data->args.a7 = (GLsizei)width; \
    (packed_call_t *)packed_data; \
})
#define pack_glCopyTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, x, y, width, height) ({ \
    glCopyTextureSubImage2DEXT_PACKED *packed_data = malloc(sizeof(glCopyTextureSubImage2DEXT_PACKED)); \
    packed_data->index = glCopyTextureSubImage2DEXT_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLint)level; \
    packed_data->args.a4 = (GLint)xoffset; \
    packed_data->args.a5 = (GLint)yoffset; \
    packed_data->args.a6 = (GLint)x; \
    packed_data->args.a7 = (GLint)y; \
    packed_data->args.a8 = (GLsizei)width; \
    packed_data->args.a9 = (GLsizei)height; \
    (packed_call_t *)packed_data; \
})
#define pack_glCopyTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height) ({ \
    glCopyTextureSubImage3DEXT_PACKED *packed_data = malloc(sizeof(glCopyTextureSubImage3DEXT_PACKED)); \
    packed_data->index = glCopyTextureSubImage3DEXT_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLint)level; \
    packed_data->args.a4 = (GLint)xoffset; \
    packed_data->args.a5 = (GLint)yoffset; \
    packed_data->args.a6 = (GLint)zoffset; \
    packed_data->args.a7 = (GLint)x; \
    packed_data->args.a8 = (GLint)y; \
    packed_data->args.a9 = (GLsizei)width; \
    packed_data->args.a10 = (GLsizei)height; \
    (packed_call_t *)packed_data; \
})
#define pack_glCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues) ({ \
    glCoverFillPathInstancedNV_PACKED *packed_data = malloc(sizeof(glCoverFillPathInstancedNV_PACKED)); \
    packed_data->index = glCoverFillPathInstancedNV_INDEX; \
    packed_data->args.a1 = (GLsizei)numPaths; \
    packed_data->args.a2 = (GLenum)pathNameType; \
    packed_data->args.a3 = (GLvoid *)paths; \
    packed_data->args.a4 = (GLuint)pathBase; \
    packed_data->args.a5 = (GLenum)coverMode; \
    packed_data->args.a6 = (GLenum)transformType; \
    packed_data->args.a7 = (GLfloat *)transformValues; \
    (packed_call_t *)packed_data; \
})
#define pack_glCoverFillPathNV(path, coverMode) ({ \
    glCoverFillPathNV_PACKED *packed_data = malloc(sizeof(glCoverFillPathNV_PACKED)); \
    packed_data->index = glCoverFillPathNV_INDEX; \
    packed_data->args.a1 = (GLuint)path; \
    packed_data->args.a2 = (GLenum)coverMode; \
    (packed_call_t *)packed_data; \
})
#define pack_glCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues) ({ \
    glCoverStrokePathInstancedNV_PACKED *packed_data = malloc(sizeof(glCoverStrokePathInstancedNV_PACKED)); \
    packed_data->index = glCoverStrokePathInstancedNV_INDEX; \
    packed_data->args.a1 = (GLsizei)numPaths; \
    packed_data->args.a2 = (GLenum)pathNameType; \
    packed_data->args.a3 = (GLvoid *)paths; \
    packed_data->args.a4 = (GLuint)pathBase; \
    packed_data->args.a5 = (GLenum)coverMode; \
    packed_data->args.a6 = (GLenum)transformType; \
    packed_data->args.a7 = (GLfloat *)transformValues; \
    (packed_call_t *)packed_data; \
})
#define pack_glCoverStrokePathNV(path, coverMode) ({ \
    glCoverStrokePathNV_PACKED *packed_data = malloc(sizeof(glCoverStrokePathNV_PACKED)); \
    packed_data->index = glCoverStrokePathNV_INDEX; \
    packed_data->args.a1 = (GLuint)path; \
    packed_data->args.a2 = (GLenum)coverMode; \
    (packed_call_t *)packed_data; \
})
#define pack_glCreateProgram() ({ \
    glCreateProgram_PACKED *packed_data = malloc(sizeof(glCreateProgram_PACKED)); \
    packed_data->index = glCreateProgram_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glCreateProgramObjectARB() ({ \
    glCreateProgramObjectARB_PACKED *packed_data = malloc(sizeof(glCreateProgramObjectARB_PACKED)); \
    packed_data->index = glCreateProgramObjectARB_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glCreateShader(type) ({ \
    glCreateShader_PACKED *packed_data = malloc(sizeof(glCreateShader_PACKED)); \
    packed_data->index = glCreateShader_INDEX; \
    packed_data->args.a1 = (GLenum)type; \
    (packed_call_t *)packed_data; \
})
#define pack_glCreateShaderObjectARB(shaderType) ({ \
    glCreateShaderObjectARB_PACKED *packed_data = malloc(sizeof(glCreateShaderObjectARB_PACKED)); \
    packed_data->index = glCreateShaderObjectARB_INDEX; \
    packed_data->args.a1 = (GLenum)shaderType; \
    (packed_call_t *)packed_data; \
})
#define pack_glCreateShaderProgramEXT(type, string) ({ \
    glCreateShaderProgramEXT_PACKED *packed_data = malloc(sizeof(glCreateShaderProgramEXT_PACKED)); \
    packed_data->index = glCreateShaderProgramEXT_INDEX; \
    packed_data->args.a1 = (GLenum)type; \
    packed_data->args.a2 = (GLchar *)string; \
    (packed_call_t *)packed_data; \
})
#define pack_glCreateShaderProgramv(type, count, strings) ({ \
    glCreateShaderProgramv_PACKED *packed_data = malloc(sizeof(glCreateShaderProgramv_PACKED)); \
    packed_data->index = glCreateShaderProgramv_INDEX; \
    packed_data->args.a1 = (GLenum)type; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLchar*const *)strings; \
    (packed_call_t *)packed_data; \
})
#define pack_glCreateSyncFromCLeventARB(context, event, flags) ({ \
    glCreateSyncFromCLeventARB_PACKED *packed_data = malloc(sizeof(glCreateSyncFromCLeventARB_PACKED)); \
    packed_data->index = glCreateSyncFromCLeventARB_INDEX; \
    packed_data->args.a1 = (struct _cl_context *)context; \
    packed_data->args.a2 = (struct _cl_event *)event; \
    packed_data->args.a3 = (GLbitfield)flags; \
    (packed_call_t *)packed_data; \
})
#define pack_glCullFace(mode) ({ \
    glCullFace_PACKED *packed_data = malloc(sizeof(glCullFace_PACKED)); \
    packed_data->index = glCullFace_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    (packed_call_t *)packed_data; \
})
#define pack_glCullParameterdvEXT(pname, params) ({ \
    glCullParameterdvEXT_PACKED *packed_data = malloc(sizeof(glCullParameterdvEXT_PACKED)); \
    packed_data->index = glCullParameterdvEXT_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLdouble *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glCullParameterfvEXT(pname, params) ({ \
    glCullParameterfvEXT_PACKED *packed_data = malloc(sizeof(glCullParameterfvEXT_PACKED)); \
    packed_data->index = glCullParameterfvEXT_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glCurrentPaletteMatrixARB(index) ({ \
    glCurrentPaletteMatrixARB_PACKED *packed_data = malloc(sizeof(glCurrentPaletteMatrixARB_PACKED)); \
    packed_data->index = glCurrentPaletteMatrixARB_INDEX; \
    packed_data->args.a1 = (GLint)index; \
    (packed_call_t *)packed_data; \
})
#define pack_glDebugMessageCallback(callback, userParam) ({ \
    glDebugMessageCallback_PACKED *packed_data = malloc(sizeof(glDebugMessageCallback_PACKED)); \
    packed_data->index = glDebugMessageCallback_INDEX; \
    packed_data->args.a1 = (GLDEBUGPROC)callback; \
    packed_data->args.a2 = (void *)userParam; \
    (packed_call_t *)packed_data; \
})
#define pack_glDebugMessageCallbackAMD(callback, userParam) ({ \
    glDebugMessageCallbackAMD_PACKED *packed_data = malloc(sizeof(glDebugMessageCallbackAMD_PACKED)); \
    packed_data->index = glDebugMessageCallbackAMD_INDEX; \
    packed_data->args.a1 = (GLDEBUGPROCAMD)callback; \
    packed_data->args.a2 = (GLvoid *)userParam; \
    (packed_call_t *)packed_data; \
})
#define pack_glDebugMessageCallbackARB(callback, userParam) ({ \
    glDebugMessageCallbackARB_PACKED *packed_data = malloc(sizeof(glDebugMessageCallbackARB_PACKED)); \
    packed_data->index = glDebugMessageCallbackARB_INDEX; \
    packed_data->args.a1 = (GLDEBUGPROCARB)callback; \
    packed_data->args.a2 = (GLvoid *)userParam; \
    (packed_call_t *)packed_data; \
})
#define pack_glDebugMessageControl(source, type, severity, count, ids, enabled) ({ \
    glDebugMessageControl_PACKED *packed_data = malloc(sizeof(glDebugMessageControl_PACKED)); \
    packed_data->index = glDebugMessageControl_INDEX; \
    packed_data->args.a1 = (GLenum)source; \
    packed_data->args.a2 = (GLenum)type; \
    packed_data->args.a3 = (GLenum)severity; \
    packed_data->args.a4 = (GLsizei)count; \
    packed_data->args.a5 = (GLuint *)ids; \
    packed_data->args.a6 = (GLboolean)enabled; \
    (packed_call_t *)packed_data; \
})
#define pack_glDebugMessageControlARB(source, type, severity, count, ids, enabled) ({ \
    glDebugMessageControlARB_PACKED *packed_data = malloc(sizeof(glDebugMessageControlARB_PACKED)); \
    packed_data->index = glDebugMessageControlARB_INDEX; \
    packed_data->args.a1 = (GLenum)source; \
    packed_data->args.a2 = (GLenum)type; \
    packed_data->args.a3 = (GLenum)severity; \
    packed_data->args.a4 = (GLsizei)count; \
    packed_data->args.a5 = (GLuint *)ids; \
    packed_data->args.a6 = (GLboolean)enabled; \
    (packed_call_t *)packed_data; \
})
#define pack_glDebugMessageEnableAMD(category, severity, count, ids, enabled) ({ \
    glDebugMessageEnableAMD_PACKED *packed_data = malloc(sizeof(glDebugMessageEnableAMD_PACKED)); \
    packed_data->index = glDebugMessageEnableAMD_INDEX; \
    packed_data->args.a1 = (GLenum)category; \
    packed_data->args.a2 = (GLenum)severity; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLuint *)ids; \
    packed_data->args.a5 = (GLboolean)enabled; \
    (packed_call_t *)packed_data; \
})
#define pack_glDebugMessageInsert(source, type, id, severity, length, buf) ({ \
    glDebugMessageInsert_PACKED *packed_data = malloc(sizeof(glDebugMessageInsert_PACKED)); \
    packed_data->index = glDebugMessageInsert_INDEX; \
    packed_data->args.a1 = (GLenum)source; \
    packed_data->args.a2 = (GLenum)type; \
    packed_data->args.a3 = (GLuint)id; \
    packed_data->args.a4 = (GLenum)severity; \
    packed_data->args.a5 = (GLsizei)length; \
    packed_data->args.a6 = (GLchar *)buf; \
    (packed_call_t *)packed_data; \
})
#define pack_glDebugMessageInsertAMD(category, severity, id, length, buf) ({ \
    glDebugMessageInsertAMD_PACKED *packed_data = malloc(sizeof(glDebugMessageInsertAMD_PACKED)); \
    packed_data->index = glDebugMessageInsertAMD_INDEX; \
    packed_data->args.a1 = (GLenum)category; \
    packed_data->args.a2 = (GLenum)severity; \
    packed_data->args.a3 = (GLuint)id; \
    packed_data->args.a4 = (GLsizei)length; \
    packed_data->args.a5 = (GLchar *)buf; \
    (packed_call_t *)packed_data; \
})
#define pack_glDebugMessageInsertARB(source, type, id, severity, length, buf) ({ \
    glDebugMessageInsertARB_PACKED *packed_data = malloc(sizeof(glDebugMessageInsertARB_PACKED)); \
    packed_data->index = glDebugMessageInsertARB_INDEX; \
    packed_data->args.a1 = (GLenum)source; \
    packed_data->args.a2 = (GLenum)type; \
    packed_data->args.a3 = (GLuint)id; \
    packed_data->args.a4 = (GLenum)severity; \
    packed_data->args.a5 = (GLsizei)length; \
    packed_data->args.a6 = (GLchar *)buf; \
    (packed_call_t *)packed_data; \
})
#define pack_glDeformSGIX(mask) ({ \
    glDeformSGIX_PACKED *packed_data = malloc(sizeof(glDeformSGIX_PACKED)); \
    packed_data->index = glDeformSGIX_INDEX; \
    packed_data->args.a1 = (GLbitfield)mask; \
    (packed_call_t *)packed_data; \
})
#define pack_glDeformationMap3dSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points) ({ \
    glDeformationMap3dSGIX_PACKED *packed_data = malloc(sizeof(glDeformationMap3dSGIX_PACKED)); \
    packed_data->index = glDeformationMap3dSGIX_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLdouble)u1; \
    packed_data->args.a3 = (GLdouble)u2; \
    packed_data->args.a4 = (GLint)ustride; \
    packed_data->args.a5 = (GLint)uorder; \
    packed_data->args.a6 = (GLdouble)v1; \
    packed_data->args.a7 = (GLdouble)v2; \
    packed_data->args.a8 = (GLint)vstride; \
    packed_data->args.a9 = (GLint)vorder; \
    packed_data->args.a10 = (GLdouble)w1; \
    packed_data->args.a11 = (GLdouble)w2; \
    packed_data->args.a12 = (GLint)wstride; \
    packed_data->args.a13 = (GLint)worder; \
    packed_data->args.a14 = (GLdouble *)points; \
    (packed_call_t *)packed_data; \
})
#define pack_glDeformationMap3fSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points) ({ \
    glDeformationMap3fSGIX_PACKED *packed_data = malloc(sizeof(glDeformationMap3fSGIX_PACKED)); \
    packed_data->index = glDeformationMap3fSGIX_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLfloat)u1; \
    packed_data->args.a3 = (GLfloat)u2; \
    packed_data->args.a4 = (GLint)ustride; \
    packed_data->args.a5 = (GLint)uorder; \
    packed_data->args.a6 = (GLfloat)v1; \
    packed_data->args.a7 = (GLfloat)v2; \
    packed_data->args.a8 = (GLint)vstride; \
    packed_data->args.a9 = (GLint)vorder; \
    packed_data->args.a10 = (GLfloat)w1; \
    packed_data->args.a11 = (GLfloat)w2; \
    packed_data->args.a12 = (GLint)wstride; \
    packed_data->args.a13 = (GLint)worder; \
    packed_data->args.a14 = (GLfloat *)points; \
    (packed_call_t *)packed_data; \
})
#define pack_glDeleteAsyncMarkersSGIX(marker, range) ({ \
    glDeleteAsyncMarkersSGIX_PACKED *packed_data = malloc(sizeof(glDeleteAsyncMarkersSGIX_PACKED)); \
    packed_data->index = glDeleteAsyncMarkersSGIX_INDEX; \
    packed_data->args.a1 = (GLuint)marker; \
    packed_data->args.a2 = (GLsizei)range; \
    (packed_call_t *)packed_data; \
})
#define pack_glDeleteBuffers(n, buffers) ({ \
    glDeleteBuffers_PACKED *packed_data = malloc(sizeof(glDeleteBuffers_PACKED)); \
    packed_data->index = glDeleteBuffers_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLuint *)buffers; \
    (packed_call_t *)packed_data; \
})
#define pack_glDeleteBuffersARB(n, buffers) ({ \
    glDeleteBuffersARB_PACKED *packed_data = malloc(sizeof(glDeleteBuffersARB_PACKED)); \
    packed_data->index = glDeleteBuffersARB_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLuint *)buffers; \
    (packed_call_t *)packed_data; \
})
#define pack_glDeleteFencesAPPLE(n, fences) ({ \
    glDeleteFencesAPPLE_PACKED *packed_data = malloc(sizeof(glDeleteFencesAPPLE_PACKED)); \
    packed_data->index = glDeleteFencesAPPLE_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLuint *)fences; \
    (packed_call_t *)packed_data; \
})
#define pack_glDeleteFencesNV(n, fences) ({ \
    glDeleteFencesNV_PACKED *packed_data = malloc(sizeof(glDeleteFencesNV_PACKED)); \
    packed_data->index = glDeleteFencesNV_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLuint *)fences; \
    (packed_call_t *)packed_data; \
})
#define pack_glDeleteFragmentShaderATI(id) ({ \
    glDeleteFragmentShaderATI_PACKED *packed_data = malloc(sizeof(glDeleteFragmentShaderATI_PACKED)); \
    packed_data->index = glDeleteFragmentShaderATI_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    (packed_call_t *)packed_data; \
})
#define pack_glDeleteFramebuffers(n, framebuffers) ({ \
    glDeleteFramebuffers_PACKED *packed_data = malloc(sizeof(glDeleteFramebuffers_PACKED)); \
    packed_data->index = glDeleteFramebuffers_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLuint *)framebuffers; \
    (packed_call_t *)packed_data; \
})
#define pack_glDeleteFramebuffersEXT(n, framebuffers) ({ \
    glDeleteFramebuffersEXT_PACKED *packed_data = malloc(sizeof(glDeleteFramebuffersEXT_PACKED)); \
    packed_data->index = glDeleteFramebuffersEXT_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLuint *)framebuffers; \
    (packed_call_t *)packed_data; \
})
#define pack_glDeleteLists(list, range) ({ \
    glDeleteLists_PACKED *packed_data = malloc(sizeof(glDeleteLists_PACKED)); \
    packed_data->index = glDeleteLists_INDEX; \
    packed_data->args.a1 = (GLuint)list; \
    packed_data->args.a2 = (GLsizei)range; \
    (packed_call_t *)packed_data; \
})
#define pack_glDeleteNamedStringARB(namelen, name) ({ \
    glDeleteNamedStringARB_PACKED *packed_data = malloc(sizeof(glDeleteNamedStringARB_PACKED)); \
    packed_data->index = glDeleteNamedStringARB_INDEX; \
    packed_data->args.a1 = (GLint)namelen; \
    packed_data->args.a2 = (GLchar *)name; \
    (packed_call_t *)packed_data; \
})
#define pack_glDeleteNamesAMD(identifier, num, names) ({ \
    glDeleteNamesAMD_PACKED *packed_data = malloc(sizeof(glDeleteNamesAMD_PACKED)); \
    packed_data->index = glDeleteNamesAMD_INDEX; \
    packed_data->args.a1 = (GLenum)identifier; \
    packed_data->args.a2 = (GLuint)num; \
    packed_data->args.a3 = (GLuint *)names; \
    (packed_call_t *)packed_data; \
})
#define pack_glDeleteObjectARB(obj) ({ \
    glDeleteObjectARB_PACKED *packed_data = malloc(sizeof(glDeleteObjectARB_PACKED)); \
    packed_data->index = glDeleteObjectARB_INDEX; \
    packed_data->args.a1 = (GLhandleARB)obj; \
    (packed_call_t *)packed_data; \
})
#define pack_glDeleteOcclusionQueriesNV(n, ids) ({ \
    glDeleteOcclusionQueriesNV_PACKED *packed_data = malloc(sizeof(glDeleteOcclusionQueriesNV_PACKED)); \
    packed_data->index = glDeleteOcclusionQueriesNV_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLuint *)ids; \
    (packed_call_t *)packed_data; \
})
#define pack_glDeletePathsNV(path, range) ({ \
    glDeletePathsNV_PACKED *packed_data = malloc(sizeof(glDeletePathsNV_PACKED)); \
    packed_data->index = glDeletePathsNV_INDEX; \
    packed_data->args.a1 = (GLuint)path; \
    packed_data->args.a2 = (GLsizei)range; \
    (packed_call_t *)packed_data; \
})
#define pack_glDeletePerfMonitorsAMD(n, monitors) ({ \
    glDeletePerfMonitorsAMD_PACKED *packed_data = malloc(sizeof(glDeletePerfMonitorsAMD_PACKED)); \
    packed_data->index = glDeletePerfMonitorsAMD_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLuint *)monitors; \
    (packed_call_t *)packed_data; \
})
#define pack_glDeleteProgram(program) ({ \
    glDeleteProgram_PACKED *packed_data = malloc(sizeof(glDeleteProgram_PACKED)); \
    packed_data->index = glDeleteProgram_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    (packed_call_t *)packed_data; \
})
#define pack_glDeleteProgramPipelines(n, pipelines) ({ \
    glDeleteProgramPipelines_PACKED *packed_data = malloc(sizeof(glDeleteProgramPipelines_PACKED)); \
    packed_data->index = glDeleteProgramPipelines_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLuint *)pipelines; \
    (packed_call_t *)packed_data; \
})
#define pack_glDeleteProgramsARB(n, programs) ({ \
    glDeleteProgramsARB_PACKED *packed_data = malloc(sizeof(glDeleteProgramsARB_PACKED)); \
    packed_data->index = glDeleteProgramsARB_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLuint *)programs; \
    (packed_call_t *)packed_data; \
})
#define pack_glDeleteProgramsNV(n, programs) ({ \
    glDeleteProgramsNV_PACKED *packed_data = malloc(sizeof(glDeleteProgramsNV_PACKED)); \
    packed_data->index = glDeleteProgramsNV_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLuint *)programs; \
    (packed_call_t *)packed_data; \
})
#define pack_glDeleteQueries(n, ids) ({ \
    glDeleteQueries_PACKED *packed_data = malloc(sizeof(glDeleteQueries_PACKED)); \
    packed_data->index = glDeleteQueries_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLuint *)ids; \
    (packed_call_t *)packed_data; \
})
#define pack_glDeleteQueriesARB(n, ids) ({ \
    glDeleteQueriesARB_PACKED *packed_data = malloc(sizeof(glDeleteQueriesARB_PACKED)); \
    packed_data->index = glDeleteQueriesARB_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLuint *)ids; \
    (packed_call_t *)packed_data; \
})
#define pack_glDeleteRenderbuffers(n, renderbuffers) ({ \
    glDeleteRenderbuffers_PACKED *packed_data = malloc(sizeof(glDeleteRenderbuffers_PACKED)); \
    packed_data->index = glDeleteRenderbuffers_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLuint *)renderbuffers; \
    (packed_call_t *)packed_data; \
})
#define pack_glDeleteRenderbuffersEXT(n, renderbuffers) ({ \
    glDeleteRenderbuffersEXT_PACKED *packed_data = malloc(sizeof(glDeleteRenderbuffersEXT_PACKED)); \
    packed_data->index = glDeleteRenderbuffersEXT_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLuint *)renderbuffers; \
    (packed_call_t *)packed_data; \
})
#define pack_glDeleteSamplers(count, samplers) ({ \
    glDeleteSamplers_PACKED *packed_data = malloc(sizeof(glDeleteSamplers_PACKED)); \
    packed_data->index = glDeleteSamplers_INDEX; \
    packed_data->args.a1 = (GLsizei)count; \
    packed_data->args.a2 = (GLuint *)samplers; \
    (packed_call_t *)packed_data; \
})
#define pack_glDeleteShader(shader) ({ \
    glDeleteShader_PACKED *packed_data = malloc(sizeof(glDeleteShader_PACKED)); \
    packed_data->index = glDeleteShader_INDEX; \
    packed_data->args.a1 = (GLuint)shader; \
    (packed_call_t *)packed_data; \
})
#define pack_glDeleteSync(sync) ({ \
    glDeleteSync_PACKED *packed_data = malloc(sizeof(glDeleteSync_PACKED)); \
    packed_data->index = glDeleteSync_INDEX; \
    packed_data->args.a1 = (GLsync)sync; \
    (packed_call_t *)packed_data; \
})
#define pack_glDeleteTextures(n, textures) ({ \
    glDeleteTextures_PACKED *packed_data = malloc(sizeof(glDeleteTextures_PACKED)); \
    packed_data->index = glDeleteTextures_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLuint *)textures; \
    (packed_call_t *)packed_data; \
})
#define pack_glDeleteTexturesEXT(n, textures) ({ \
    glDeleteTexturesEXT_PACKED *packed_data = malloc(sizeof(glDeleteTexturesEXT_PACKED)); \
    packed_data->index = glDeleteTexturesEXT_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLuint *)textures; \
    (packed_call_t *)packed_data; \
})
#define pack_glDeleteTransformFeedbacks(n, ids) ({ \
    glDeleteTransformFeedbacks_PACKED *packed_data = malloc(sizeof(glDeleteTransformFeedbacks_PACKED)); \
    packed_data->index = glDeleteTransformFeedbacks_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLuint *)ids; \
    (packed_call_t *)packed_data; \
})
#define pack_glDeleteTransformFeedbacksNV(n, ids) ({ \
    glDeleteTransformFeedbacksNV_PACKED *packed_data = malloc(sizeof(glDeleteTransformFeedbacksNV_PACKED)); \
    packed_data->index = glDeleteTransformFeedbacksNV_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLuint *)ids; \
    (packed_call_t *)packed_data; \
})
#define pack_glDeleteVertexArrays(n, arrays) ({ \
    glDeleteVertexArrays_PACKED *packed_data = malloc(sizeof(glDeleteVertexArrays_PACKED)); \
    packed_data->index = glDeleteVertexArrays_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLuint *)arrays; \
    (packed_call_t *)packed_data; \
})
#define pack_glDeleteVertexArraysAPPLE(n, arrays) ({ \
    glDeleteVertexArraysAPPLE_PACKED *packed_data = malloc(sizeof(glDeleteVertexArraysAPPLE_PACKED)); \
    packed_data->index = glDeleteVertexArraysAPPLE_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLuint *)arrays; \
    (packed_call_t *)packed_data; \
})
#define pack_glDeleteVertexShaderEXT(id) ({ \
    glDeleteVertexShaderEXT_PACKED *packed_data = malloc(sizeof(glDeleteVertexShaderEXT_PACKED)); \
    packed_data->index = glDeleteVertexShaderEXT_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    (packed_call_t *)packed_data; \
})
#define pack_glDepthBoundsEXT(zmin, zmax) ({ \
    glDepthBoundsEXT_PACKED *packed_data = malloc(sizeof(glDepthBoundsEXT_PACKED)); \
    packed_data->index = glDepthBoundsEXT_INDEX; \
    packed_data->args.a1 = (GLclampd)zmin; \
    packed_data->args.a2 = (GLclampd)zmax; \
    (packed_call_t *)packed_data; \
})
#define pack_glDepthBoundsdNV(zmin, zmax) ({ \
    glDepthBoundsdNV_PACKED *packed_data = malloc(sizeof(glDepthBoundsdNV_PACKED)); \
    packed_data->index = glDepthBoundsdNV_INDEX; \
    packed_data->args.a1 = (GLdouble)zmin; \
    packed_data->args.a2 = (GLdouble)zmax; \
    (packed_call_t *)packed_data; \
})
#define pack_glDepthFunc(func) ({ \
    glDepthFunc_PACKED *packed_data = malloc(sizeof(glDepthFunc_PACKED)); \
    packed_data->index = glDepthFunc_INDEX; \
    packed_data->args.a1 = (GLenum)func; \
    (packed_call_t *)packed_data; \
})
#define pack_glDepthMask(flag) ({ \
    glDepthMask_PACKED *packed_data = malloc(sizeof(glDepthMask_PACKED)); \
    packed_data->index = glDepthMask_INDEX; \
    packed_data->args.a1 = (GLboolean)flag; \
    (packed_call_t *)packed_data; \
})
#define pack_glDepthRange(near, far) ({ \
    glDepthRange_PACKED *packed_data = malloc(sizeof(glDepthRange_PACKED)); \
    packed_data->index = glDepthRange_INDEX; \
    packed_data->args.a1 = (GLdouble)near; \
    packed_data->args.a2 = (GLdouble)far; \
    (packed_call_t *)packed_data; \
})
#define pack_glDepthRangeArrayv(first, count, v) ({ \
    glDepthRangeArrayv_PACKED *packed_data = malloc(sizeof(glDepthRangeArrayv_PACKED)); \
    packed_data->index = glDepthRangeArrayv_INDEX; \
    packed_data->args.a1 = (GLuint)first; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glDepthRangeIndexed(index, n, f) ({ \
    glDepthRangeIndexed_PACKED *packed_data = malloc(sizeof(glDepthRangeIndexed_PACKED)); \
    packed_data->index = glDepthRangeIndexed_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLdouble)n; \
    packed_data->args.a3 = (GLdouble)f; \
    (packed_call_t *)packed_data; \
})
#define pack_glDepthRangedNV(zNear, zFar) ({ \
    glDepthRangedNV_PACKED *packed_data = malloc(sizeof(glDepthRangedNV_PACKED)); \
    packed_data->index = glDepthRangedNV_INDEX; \
    packed_data->args.a1 = (GLdouble)zNear; \
    packed_data->args.a2 = (GLdouble)zFar; \
    (packed_call_t *)packed_data; \
})
#define pack_glDepthRangef(near, far) ({ \
    glDepthRangef_PACKED *packed_data = malloc(sizeof(glDepthRangef_PACKED)); \
    packed_data->index = glDepthRangef_INDEX; \
    packed_data->args.a1 = (GLclampf)near; \
    packed_data->args.a2 = (GLclampf)far; \
    (packed_call_t *)packed_data; \
})
#define pack_glDepthRangefOES(n, f) ({ \
    glDepthRangefOES_PACKED *packed_data = malloc(sizeof(glDepthRangefOES_PACKED)); \
    packed_data->index = glDepthRangefOES_INDEX; \
    packed_data->args.a1 = (GLclampf)n; \
    packed_data->args.a2 = (GLclampf)f; \
    (packed_call_t *)packed_data; \
})
#define pack_glDepthRangex(near, far) ({ \
    glDepthRangex_PACKED *packed_data = malloc(sizeof(glDepthRangex_PACKED)); \
    packed_data->index = glDepthRangex_INDEX; \
    packed_data->args.a1 = (GLclampx)near; \
    packed_data->args.a2 = (GLclampx)far; \
    (packed_call_t *)packed_data; \
})
#define pack_glDepthRangexOES(n, f) ({ \
    glDepthRangexOES_PACKED *packed_data = malloc(sizeof(glDepthRangexOES_PACKED)); \
    packed_data->index = glDepthRangexOES_INDEX; \
    packed_data->args.a1 = (GLfixed)n; \
    packed_data->args.a2 = (GLfixed)f; \
    (packed_call_t *)packed_data; \
})
#define pack_glDetachObjectARB(containerObj, attachedObj) ({ \
    glDetachObjectARB_PACKED *packed_data = malloc(sizeof(glDetachObjectARB_PACKED)); \
    packed_data->index = glDetachObjectARB_INDEX; \
    packed_data->args.a1 = (GLhandleARB)containerObj; \
    packed_data->args.a2 = (GLhandleARB)attachedObj; \
    (packed_call_t *)packed_data; \
})
#define pack_glDetachShader(program, shader) ({ \
    glDetachShader_PACKED *packed_data = malloc(sizeof(glDetachShader_PACKED)); \
    packed_data->index = glDetachShader_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLuint)shader; \
    (packed_call_t *)packed_data; \
})
#define pack_glDetailTexFuncSGIS(target, n, points) ({ \
    glDetailTexFuncSGIS_PACKED *packed_data = malloc(sizeof(glDetailTexFuncSGIS_PACKED)); \
    packed_data->index = glDetailTexFuncSGIS_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLsizei)n; \
    packed_data->args.a3 = (GLfloat *)points; \
    (packed_call_t *)packed_data; \
})
#define pack_glDisable(cap) ({ \
    glDisable_PACKED *packed_data = malloc(sizeof(glDisable_PACKED)); \
    packed_data->index = glDisable_INDEX; \
    packed_data->args.a1 = (GLenum)cap; \
    (packed_call_t *)packed_data; \
})
#define pack_glDisableClientState(array) ({ \
    glDisableClientState_PACKED *packed_data = malloc(sizeof(glDisableClientState_PACKED)); \
    packed_data->index = glDisableClientState_INDEX; \
    packed_data->args.a1 = (GLenum)array; \
    (packed_call_t *)packed_data; \
})
#define pack_glDisableClientStateIndexedEXT(array, index) ({ \
    glDisableClientStateIndexedEXT_PACKED *packed_data = malloc(sizeof(glDisableClientStateIndexedEXT_PACKED)); \
    packed_data->index = glDisableClientStateIndexedEXT_INDEX; \
    packed_data->args.a1 = (GLenum)array; \
    packed_data->args.a2 = (GLuint)index; \
    (packed_call_t *)packed_data; \
})
#define pack_glDisableClientStateiEXT(array, index) ({ \
    glDisableClientStateiEXT_PACKED *packed_data = malloc(sizeof(glDisableClientStateiEXT_PACKED)); \
    packed_data->index = glDisableClientStateiEXT_INDEX; \
    packed_data->args.a1 = (GLenum)array; \
    packed_data->args.a2 = (GLuint)index; \
    (packed_call_t *)packed_data; \
})
#define pack_glDisableIndexedEXT(target, index) ({ \
    glDisableIndexedEXT_PACKED *packed_data = malloc(sizeof(glDisableIndexedEXT_PACKED)); \
    packed_data->index = glDisableIndexedEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    (packed_call_t *)packed_data; \
})
#define pack_glDisableVariantClientStateEXT(id) ({ \
    glDisableVariantClientStateEXT_PACKED *packed_data = malloc(sizeof(glDisableVariantClientStateEXT_PACKED)); \
    packed_data->index = glDisableVariantClientStateEXT_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    (packed_call_t *)packed_data; \
})
#define pack_glDisableVertexArrayAttribEXT(vaobj, index) ({ \
    glDisableVertexArrayAttribEXT_PACKED *packed_data = malloc(sizeof(glDisableVertexArrayAttribEXT_PACKED)); \
    packed_data->index = glDisableVertexArrayAttribEXT_INDEX; \
    packed_data->args.a1 = (GLuint)vaobj; \
    packed_data->args.a2 = (GLuint)index; \
    (packed_call_t *)packed_data; \
})
#define pack_glDisableVertexArrayEXT(vaobj, array) ({ \
    glDisableVertexArrayEXT_PACKED *packed_data = malloc(sizeof(glDisableVertexArrayEXT_PACKED)); \
    packed_data->index = glDisableVertexArrayEXT_INDEX; \
    packed_data->args.a1 = (GLuint)vaobj; \
    packed_data->args.a2 = (GLenum)array; \
    (packed_call_t *)packed_data; \
})
#define pack_glDisableVertexAttribAPPLE(index, pname) ({ \
    glDisableVertexAttribAPPLE_PACKED *packed_data = malloc(sizeof(glDisableVertexAttribAPPLE_PACKED)); \
    packed_data->index = glDisableVertexAttribAPPLE_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLenum)pname; \
    (packed_call_t *)packed_data; \
})
#define pack_glDisableVertexAttribArray(index) ({ \
    glDisableVertexAttribArray_PACKED *packed_data = malloc(sizeof(glDisableVertexAttribArray_PACKED)); \
    packed_data->index = glDisableVertexAttribArray_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    (packed_call_t *)packed_data; \
})
#define pack_glDisableVertexAttribArrayARB(index) ({ \
    glDisableVertexAttribArrayARB_PACKED *packed_data = malloc(sizeof(glDisableVertexAttribArrayARB_PACKED)); \
    packed_data->index = glDisableVertexAttribArrayARB_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    (packed_call_t *)packed_data; \
})
#define pack_glDisablei(target, index) ({ \
    glDisablei_PACKED *packed_data = malloc(sizeof(glDisablei_PACKED)); \
    packed_data->index = glDisablei_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    (packed_call_t *)packed_data; \
})
#define pack_glDispatchCompute(num_groups_x, num_groups_y, num_groups_z) ({ \
    glDispatchCompute_PACKED *packed_data = malloc(sizeof(glDispatchCompute_PACKED)); \
    packed_data->index = glDispatchCompute_INDEX; \
    packed_data->args.a1 = (GLuint)num_groups_x; \
    packed_data->args.a2 = (GLuint)num_groups_y; \
    packed_data->args.a3 = (GLuint)num_groups_z; \
    (packed_call_t *)packed_data; \
})
#define pack_glDispatchComputeIndirect(indirect) ({ \
    glDispatchComputeIndirect_PACKED *packed_data = malloc(sizeof(glDispatchComputeIndirect_PACKED)); \
    packed_data->index = glDispatchComputeIndirect_INDEX; \
    packed_data->args.a1 = (GLintptr)indirect; \
    (packed_call_t *)packed_data; \
})
#define pack_glDrawArrays(mode, first, count) ({ \
    glDrawArrays_PACKED *packed_data = malloc(sizeof(glDrawArrays_PACKED)); \
    packed_data->index = glDrawArrays_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLint)first; \
    packed_data->args.a3 = (GLsizei)count; \
    (packed_call_t *)packed_data; \
})
#define pack_glDrawArraysEXT(mode, first, count) ({ \
    glDrawArraysEXT_PACKED *packed_data = malloc(sizeof(glDrawArraysEXT_PACKED)); \
    packed_data->index = glDrawArraysEXT_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLint)first; \
    packed_data->args.a3 = (GLsizei)count; \
    (packed_call_t *)packed_data; \
})
#define pack_glDrawArraysIndirect(mode, indirect) ({ \
    glDrawArraysIndirect_PACKED *packed_data = malloc(sizeof(glDrawArraysIndirect_PACKED)); \
    packed_data->index = glDrawArraysIndirect_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLvoid *)indirect; \
    (packed_call_t *)packed_data; \
})
#define pack_glDrawArraysInstanced(mode, first, count, instancecount) ({ \
    glDrawArraysInstanced_PACKED *packed_data = malloc(sizeof(glDrawArraysInstanced_PACKED)); \
    packed_data->index = glDrawArraysInstanced_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLint)first; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLsizei)instancecount; \
    (packed_call_t *)packed_data; \
})
#define pack_glDrawArraysInstancedARB(mode, first, count, primcount) ({ \
    glDrawArraysInstancedARB_PACKED *packed_data = malloc(sizeof(glDrawArraysInstancedARB_PACKED)); \
    packed_data->index = glDrawArraysInstancedARB_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLint)first; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLsizei)primcount; \
    (packed_call_t *)packed_data; \
})
#define pack_glDrawArraysInstancedBaseInstance(mode, first, count, instancecount, baseinstance) ({ \
    glDrawArraysInstancedBaseInstance_PACKED *packed_data = malloc(sizeof(glDrawArraysInstancedBaseInstance_PACKED)); \
    packed_data->index = glDrawArraysInstancedBaseInstance_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLint)first; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLsizei)instancecount; \
    packed_data->args.a5 = (GLuint)baseinstance; \
    (packed_call_t *)packed_data; \
})
#define pack_glDrawArraysInstancedEXT(mode, start, count, primcount) ({ \
    glDrawArraysInstancedEXT_PACKED *packed_data = malloc(sizeof(glDrawArraysInstancedEXT_PACKED)); \
    packed_data->index = glDrawArraysInstancedEXT_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLint)start; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLsizei)primcount; \
    (packed_call_t *)packed_data; \
})
#define pack_glDrawBuffer(mode) ({ \
    glDrawBuffer_PACKED *packed_data = malloc(sizeof(glDrawBuffer_PACKED)); \
    packed_data->index = glDrawBuffer_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    (packed_call_t *)packed_data; \
})
#define pack_glDrawBuffers(n, bufs) ({ \
    glDrawBuffers_PACKED *packed_data = malloc(sizeof(glDrawBuffers_PACKED)); \
    packed_data->index = glDrawBuffers_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLenum *)bufs; \
    (packed_call_t *)packed_data; \
})
#define pack_glDrawBuffersARB(n, bufs) ({ \
    glDrawBuffersARB_PACKED *packed_data = malloc(sizeof(glDrawBuffersARB_PACKED)); \
    packed_data->index = glDrawBuffersARB_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLenum *)bufs; \
    (packed_call_t *)packed_data; \
})
#define pack_glDrawBuffersATI(n, bufs) ({ \
    glDrawBuffersATI_PACKED *packed_data = malloc(sizeof(glDrawBuffersATI_PACKED)); \
    packed_data->index = glDrawBuffersATI_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLenum *)bufs; \
    (packed_call_t *)packed_data; \
})
#define pack_glDrawElementArrayAPPLE(mode, first, count) ({ \
    glDrawElementArrayAPPLE_PACKED *packed_data = malloc(sizeof(glDrawElementArrayAPPLE_PACKED)); \
    packed_data->index = glDrawElementArrayAPPLE_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLint)first; \
    packed_data->args.a3 = (GLsizei)count; \
    (packed_call_t *)packed_data; \
})
#define pack_glDrawElementArrayATI(mode, count) ({ \
    glDrawElementArrayATI_PACKED *packed_data = malloc(sizeof(glDrawElementArrayATI_PACKED)); \
    packed_data->index = glDrawElementArrayATI_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLsizei)count; \
    (packed_call_t *)packed_data; \
})
#define pack_glDrawElements(mode, count, type, indices) ({ \
    glDrawElements_PACKED *packed_data = malloc(sizeof(glDrawElements_PACKED)); \
    packed_data->index = glDrawElements_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLenum)type; \
    packed_data->args.a4 = (GLvoid *)indices; \
    (packed_call_t *)packed_data; \
})
#define pack_glDrawElementsBaseVertex(mode, count, type, indices, basevertex) ({ \
    glDrawElementsBaseVertex_PACKED *packed_data = malloc(sizeof(glDrawElementsBaseVertex_PACKED)); \
    packed_data->index = glDrawElementsBaseVertex_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLenum)type; \
    packed_data->args.a4 = (GLvoid *)indices; \
    packed_data->args.a5 = (GLint)basevertex; \
    (packed_call_t *)packed_data; \
})
#define pack_glDrawElementsIndirect(mode, type, indirect) ({ \
    glDrawElementsIndirect_PACKED *packed_data = malloc(sizeof(glDrawElementsIndirect_PACKED)); \
    packed_data->index = glDrawElementsIndirect_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLenum)type; \
    packed_data->args.a3 = (GLvoid *)indirect; \
    (packed_call_t *)packed_data; \
})
#define pack_glDrawElementsInstanced(mode, count, type, indices, instancecount) ({ \
    glDrawElementsInstanced_PACKED *packed_data = malloc(sizeof(glDrawElementsInstanced_PACKED)); \
    packed_data->index = glDrawElementsInstanced_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLenum)type; \
    packed_data->args.a4 = (GLvoid *)indices; \
    packed_data->args.a5 = (GLsizei)instancecount; \
    (packed_call_t *)packed_data; \
})
#define pack_glDrawElementsInstancedARB(mode, count, type, indices, primcount) ({ \
    glDrawElementsInstancedARB_PACKED *packed_data = malloc(sizeof(glDrawElementsInstancedARB_PACKED)); \
    packed_data->index = glDrawElementsInstancedARB_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLenum)type; \
    packed_data->args.a4 = (GLvoid *)indices; \
    packed_data->args.a5 = (GLsizei)primcount; \
    (packed_call_t *)packed_data; \
})
#define pack_glDrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance) ({ \
    glDrawElementsInstancedBaseInstance_PACKED *packed_data = malloc(sizeof(glDrawElementsInstancedBaseInstance_PACKED)); \
    packed_data->index = glDrawElementsInstancedBaseInstance_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLenum)type; \
    packed_data->args.a4 = (void *)indices; \
    packed_data->args.a5 = (GLsizei)instancecount; \
    packed_data->args.a6 = (GLuint)baseinstance; \
    (packed_call_t *)packed_data; \
})
#define pack_glDrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex) ({ \
    glDrawElementsInstancedBaseVertex_PACKED *packed_data = malloc(sizeof(glDrawElementsInstancedBaseVertex_PACKED)); \
    packed_data->index = glDrawElementsInstancedBaseVertex_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLenum)type; \
    packed_data->args.a4 = (GLvoid *)indices; \
    packed_data->args.a5 = (GLsizei)instancecount; \
    packed_data->args.a6 = (GLint)basevertex; \
    (packed_call_t *)packed_data; \
})
#define pack_glDrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance) ({ \
    glDrawElementsInstancedBaseVertexBaseInstance_PACKED *packed_data = malloc(sizeof(glDrawElementsInstancedBaseVertexBaseInstance_PACKED)); \
    packed_data->index = glDrawElementsInstancedBaseVertexBaseInstance_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLenum)type; \
    packed_data->args.a4 = (void *)indices; \
    packed_data->args.a5 = (GLsizei)instancecount; \
    packed_data->args.a6 = (GLint)basevertex; \
    packed_data->args.a7 = (GLuint)baseinstance; \
    (packed_call_t *)packed_data; \
})
#define pack_glDrawElementsInstancedEXT(mode, count, type, indices, primcount) ({ \
    glDrawElementsInstancedEXT_PACKED *packed_data = malloc(sizeof(glDrawElementsInstancedEXT_PACKED)); \
    packed_data->index = glDrawElementsInstancedEXT_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLenum)type; \
    packed_data->args.a4 = (GLvoid *)indices; \
    packed_data->args.a5 = (GLsizei)primcount; \
    (packed_call_t *)packed_data; \
})
#define pack_glDrawMeshArraysSUN(mode, first, count, width) ({ \
    glDrawMeshArraysSUN_PACKED *packed_data = malloc(sizeof(glDrawMeshArraysSUN_PACKED)); \
    packed_data->index = glDrawMeshArraysSUN_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLint)first; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLsizei)width; \
    (packed_call_t *)packed_data; \
})
#define pack_glDrawPixels(width, height, format, type, pixels) ({ \
    glDrawPixels_PACKED *packed_data = malloc(sizeof(glDrawPixels_PACKED)); \
    packed_data->index = glDrawPixels_INDEX; \
    packed_data->args.a1 = (GLsizei)width; \
    packed_data->args.a2 = (GLsizei)height; \
    packed_data->args.a3 = (GLenum)format; \
    packed_data->args.a4 = (GLenum)type; \
    packed_data->args.a5 = (GLvoid *)pixels; \
    (packed_call_t *)packed_data; \
})
#define pack_glDrawRangeElementArrayAPPLE(mode, start, end, first, count) ({ \
    glDrawRangeElementArrayAPPLE_PACKED *packed_data = malloc(sizeof(glDrawRangeElementArrayAPPLE_PACKED)); \
    packed_data->index = glDrawRangeElementArrayAPPLE_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLuint)start; \
    packed_data->args.a3 = (GLuint)end; \
    packed_data->args.a4 = (GLint)first; \
    packed_data->args.a5 = (GLsizei)count; \
    (packed_call_t *)packed_data; \
})
#define pack_glDrawRangeElementArrayATI(mode, start, end, count) ({ \
    glDrawRangeElementArrayATI_PACKED *packed_data = malloc(sizeof(glDrawRangeElementArrayATI_PACKED)); \
    packed_data->index = glDrawRangeElementArrayATI_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLuint)start; \
    packed_data->args.a3 = (GLuint)end; \
    packed_data->args.a4 = (GLsizei)count; \
    (packed_call_t *)packed_data; \
})
#define pack_glDrawRangeElements(mode, start, end, count, type, indices) ({ \
    glDrawRangeElements_PACKED *packed_data = malloc(sizeof(glDrawRangeElements_PACKED)); \
    packed_data->index = glDrawRangeElements_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLuint)start; \
    packed_data->args.a3 = (GLuint)end; \
    packed_data->args.a4 = (GLsizei)count; \
    packed_data->args.a5 = (GLenum)type; \
    packed_data->args.a6 = (GLvoid *)indices; \
    (packed_call_t *)packed_data; \
})
#define pack_glDrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex) ({ \
    glDrawRangeElementsBaseVertex_PACKED *packed_data = malloc(sizeof(glDrawRangeElementsBaseVertex_PACKED)); \
    packed_data->index = glDrawRangeElementsBaseVertex_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLuint)start; \
    packed_data->args.a3 = (GLuint)end; \
    packed_data->args.a4 = (GLsizei)count; \
    packed_data->args.a5 = (GLenum)type; \
    packed_data->args.a6 = (GLvoid *)indices; \
    packed_data->args.a7 = (GLint)basevertex; \
    (packed_call_t *)packed_data; \
})
#define pack_glDrawRangeElementsEXT(mode, start, end, count, type, indices) ({ \
    glDrawRangeElementsEXT_PACKED *packed_data = malloc(sizeof(glDrawRangeElementsEXT_PACKED)); \
    packed_data->index = glDrawRangeElementsEXT_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLuint)start; \
    packed_data->args.a3 = (GLuint)end; \
    packed_data->args.a4 = (GLsizei)count; \
    packed_data->args.a5 = (GLenum)type; \
    packed_data->args.a6 = (GLvoid *)indices; \
    (packed_call_t *)packed_data; \
})
#define pack_glDrawTextureNV(texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1) ({ \
    glDrawTextureNV_PACKED *packed_data = malloc(sizeof(glDrawTextureNV_PACKED)); \
    packed_data->index = glDrawTextureNV_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    packed_data->args.a2 = (GLuint)sampler; \
    packed_data->args.a3 = (GLfloat)x0; \
    packed_data->args.a4 = (GLfloat)y0; \
    packed_data->args.a5 = (GLfloat)x1; \
    packed_data->args.a6 = (GLfloat)y1; \
    packed_data->args.a7 = (GLfloat)z; \
    packed_data->args.a8 = (GLfloat)s0; \
    packed_data->args.a9 = (GLfloat)t0; \
    packed_data->args.a10 = (GLfloat)s1; \
    packed_data->args.a11 = (GLfloat)t1; \
    (packed_call_t *)packed_data; \
})
#define pack_glDrawTransformFeedback(mode, id) ({ \
    glDrawTransformFeedback_PACKED *packed_data = malloc(sizeof(glDrawTransformFeedback_PACKED)); \
    packed_data->index = glDrawTransformFeedback_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLuint)id; \
    (packed_call_t *)packed_data; \
})
#define pack_glDrawTransformFeedbackInstanced(mode, id, instancecount) ({ \
    glDrawTransformFeedbackInstanced_PACKED *packed_data = malloc(sizeof(glDrawTransformFeedbackInstanced_PACKED)); \
    packed_data->index = glDrawTransformFeedbackInstanced_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLuint)id; \
    packed_data->args.a3 = (GLsizei)instancecount; \
    (packed_call_t *)packed_data; \
})
#define pack_glDrawTransformFeedbackNV(mode, id) ({ \
    glDrawTransformFeedbackNV_PACKED *packed_data = malloc(sizeof(glDrawTransformFeedbackNV_PACKED)); \
    packed_data->index = glDrawTransformFeedbackNV_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLuint)id; \
    (packed_call_t *)packed_data; \
})
#define pack_glDrawTransformFeedbackStream(mode, id, stream) ({ \
    glDrawTransformFeedbackStream_PACKED *packed_data = malloc(sizeof(glDrawTransformFeedbackStream_PACKED)); \
    packed_data->index = glDrawTransformFeedbackStream_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLuint)id; \
    packed_data->args.a3 = (GLuint)stream; \
    (packed_call_t *)packed_data; \
})
#define pack_glDrawTransformFeedbackStreamInstanced(mode, id, stream, instancecount) ({ \
    glDrawTransformFeedbackStreamInstanced_PACKED *packed_data = malloc(sizeof(glDrawTransformFeedbackStreamInstanced_PACKED)); \
    packed_data->index = glDrawTransformFeedbackStreamInstanced_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLuint)id; \
    packed_data->args.a3 = (GLuint)stream; \
    packed_data->args.a4 = (GLsizei)instancecount; \
    (packed_call_t *)packed_data; \
})
#define pack_glEdgeFlag(flag) ({ \
    glEdgeFlag_PACKED *packed_data = malloc(sizeof(glEdgeFlag_PACKED)); \
    packed_data->index = glEdgeFlag_INDEX; \
    packed_data->args.a1 = (GLboolean)flag; \
    (packed_call_t *)packed_data; \
})
#define pack_glEdgeFlagFormatNV(stride) ({ \
    glEdgeFlagFormatNV_PACKED *packed_data = malloc(sizeof(glEdgeFlagFormatNV_PACKED)); \
    packed_data->index = glEdgeFlagFormatNV_INDEX; \
    packed_data->args.a1 = (GLsizei)stride; \
    (packed_call_t *)packed_data; \
})
#define pack_glEdgeFlagPointer(stride, pointer) ({ \
    glEdgeFlagPointer_PACKED *packed_data = malloc(sizeof(glEdgeFlagPointer_PACKED)); \
    packed_data->index = glEdgeFlagPointer_INDEX; \
    packed_data->args.a1 = (GLsizei)stride; \
    packed_data->args.a2 = (GLvoid *)pointer; \
    (packed_call_t *)packed_data; \
})
#define pack_glEdgeFlagPointerEXT(stride, count, pointer) ({ \
    glEdgeFlagPointerEXT_PACKED *packed_data = malloc(sizeof(glEdgeFlagPointerEXT_PACKED)); \
    packed_data->index = glEdgeFlagPointerEXT_INDEX; \
    packed_data->args.a1 = (GLsizei)stride; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLboolean *)pointer; \
    (packed_call_t *)packed_data; \
})
#define pack_glEdgeFlagPointerListIBM(stride, pointer, ptrstride) ({ \
    glEdgeFlagPointerListIBM_PACKED *packed_data = malloc(sizeof(glEdgeFlagPointerListIBM_PACKED)); \
    packed_data->index = glEdgeFlagPointerListIBM_INDEX; \
    packed_data->args.a1 = (GLint)stride; \
    packed_data->args.a2 = (GLboolean *)pointer; \
    packed_data->args.a3 = (GLint)ptrstride; \
    (packed_call_t *)packed_data; \
})
#define pack_glEdgeFlagv(flag) ({ \
    glEdgeFlagv_PACKED *packed_data = malloc(sizeof(glEdgeFlagv_PACKED)); \
    packed_data->index = glEdgeFlagv_INDEX; \
    packed_data->args.a1 = (GLboolean *)flag; \
    (packed_call_t *)packed_data; \
})
#define pack_glElementPointerAPPLE(type, pointer) ({ \
    glElementPointerAPPLE_PACKED *packed_data = malloc(sizeof(glElementPointerAPPLE_PACKED)); \
    packed_data->index = glElementPointerAPPLE_INDEX; \
    packed_data->args.a1 = (GLenum)type; \
    packed_data->args.a2 = (GLvoid *)pointer; \
    (packed_call_t *)packed_data; \
})
#define pack_glElementPointerATI(type, pointer) ({ \
    glElementPointerATI_PACKED *packed_data = malloc(sizeof(glElementPointerATI_PACKED)); \
    packed_data->index = glElementPointerATI_INDEX; \
    packed_data->args.a1 = (GLenum)type; \
    packed_data->args.a2 = (GLvoid *)pointer; \
    (packed_call_t *)packed_data; \
})
#define pack_glEnable(cap) ({ \
    glEnable_PACKED *packed_data = malloc(sizeof(glEnable_PACKED)); \
    packed_data->index = glEnable_INDEX; \
    packed_data->args.a1 = (GLenum)cap; \
    (packed_call_t *)packed_data; \
})
#define pack_glEnableClientState(array) ({ \
    glEnableClientState_PACKED *packed_data = malloc(sizeof(glEnableClientState_PACKED)); \
    packed_data->index = glEnableClientState_INDEX; \
    packed_data->args.a1 = (GLenum)array; \
    (packed_call_t *)packed_data; \
})
#define pack_glEnableClientStateIndexedEXT(array, index) ({ \
    glEnableClientStateIndexedEXT_PACKED *packed_data = malloc(sizeof(glEnableClientStateIndexedEXT_PACKED)); \
    packed_data->index = glEnableClientStateIndexedEXT_INDEX; \
    packed_data->args.a1 = (GLenum)array; \
    packed_data->args.a2 = (GLuint)index; \
    (packed_call_t *)packed_data; \
})
#define pack_glEnableClientStateiEXT(array, index) ({ \
    glEnableClientStateiEXT_PACKED *packed_data = malloc(sizeof(glEnableClientStateiEXT_PACKED)); \
    packed_data->index = glEnableClientStateiEXT_INDEX; \
    packed_data->args.a1 = (GLenum)array; \
    packed_data->args.a2 = (GLuint)index; \
    (packed_call_t *)packed_data; \
})
#define pack_glEnableIndexedEXT(target, index) ({ \
    glEnableIndexedEXT_PACKED *packed_data = malloc(sizeof(glEnableIndexedEXT_PACKED)); \
    packed_data->index = glEnableIndexedEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    (packed_call_t *)packed_data; \
})
#define pack_glEnableVariantClientStateEXT(id) ({ \
    glEnableVariantClientStateEXT_PACKED *packed_data = malloc(sizeof(glEnableVariantClientStateEXT_PACKED)); \
    packed_data->index = glEnableVariantClientStateEXT_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    (packed_call_t *)packed_data; \
})
#define pack_glEnableVertexArrayAttribEXT(vaobj, index) ({ \
    glEnableVertexArrayAttribEXT_PACKED *packed_data = malloc(sizeof(glEnableVertexArrayAttribEXT_PACKED)); \
    packed_data->index = glEnableVertexArrayAttribEXT_INDEX; \
    packed_data->args.a1 = (GLuint)vaobj; \
    packed_data->args.a2 = (GLuint)index; \
    (packed_call_t *)packed_data; \
})
#define pack_glEnableVertexArrayEXT(vaobj, array) ({ \
    glEnableVertexArrayEXT_PACKED *packed_data = malloc(sizeof(glEnableVertexArrayEXT_PACKED)); \
    packed_data->index = glEnableVertexArrayEXT_INDEX; \
    packed_data->args.a1 = (GLuint)vaobj; \
    packed_data->args.a2 = (GLenum)array; \
    (packed_call_t *)packed_data; \
})
#define pack_glEnableVertexAttribAPPLE(index, pname) ({ \
    glEnableVertexAttribAPPLE_PACKED *packed_data = malloc(sizeof(glEnableVertexAttribAPPLE_PACKED)); \
    packed_data->index = glEnableVertexAttribAPPLE_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLenum)pname; \
    (packed_call_t *)packed_data; \
})
#define pack_glEnableVertexAttribArray(index) ({ \
    glEnableVertexAttribArray_PACKED *packed_data = malloc(sizeof(glEnableVertexAttribArray_PACKED)); \
    packed_data->index = glEnableVertexAttribArray_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    (packed_call_t *)packed_data; \
})
#define pack_glEnableVertexAttribArrayARB(index) ({ \
    glEnableVertexAttribArrayARB_PACKED *packed_data = malloc(sizeof(glEnableVertexAttribArrayARB_PACKED)); \
    packed_data->index = glEnableVertexAttribArrayARB_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    (packed_call_t *)packed_data; \
})
#define pack_glEnablei(target, index) ({ \
    glEnablei_PACKED *packed_data = malloc(sizeof(glEnablei_PACKED)); \
    packed_data->index = glEnablei_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    (packed_call_t *)packed_data; \
})
#define pack_glEnd() ({ \
    glEnd_PACKED *packed_data = malloc(sizeof(glEnd_PACKED)); \
    packed_data->index = glEnd_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glEndConditionalRender() ({ \
    glEndConditionalRender_PACKED *packed_data = malloc(sizeof(glEndConditionalRender_PACKED)); \
    packed_data->index = glEndConditionalRender_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glEndConditionalRenderNV() ({ \
    glEndConditionalRenderNV_PACKED *packed_data = malloc(sizeof(glEndConditionalRenderNV_PACKED)); \
    packed_data->index = glEndConditionalRenderNV_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glEndConditionalRenderNVX() ({ \
    glEndConditionalRenderNVX_PACKED *packed_data = malloc(sizeof(glEndConditionalRenderNVX_PACKED)); \
    packed_data->index = glEndConditionalRenderNVX_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glEndFragmentShaderATI() ({ \
    glEndFragmentShaderATI_PACKED *packed_data = malloc(sizeof(glEndFragmentShaderATI_PACKED)); \
    packed_data->index = glEndFragmentShaderATI_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glEndList() ({ \
    glEndList_PACKED *packed_data = malloc(sizeof(glEndList_PACKED)); \
    packed_data->index = glEndList_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glEndOcclusionQueryNV() ({ \
    glEndOcclusionQueryNV_PACKED *packed_data = malloc(sizeof(glEndOcclusionQueryNV_PACKED)); \
    packed_data->index = glEndOcclusionQueryNV_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glEndPerfMonitorAMD(monitor) ({ \
    glEndPerfMonitorAMD_PACKED *packed_data = malloc(sizeof(glEndPerfMonitorAMD_PACKED)); \
    packed_data->index = glEndPerfMonitorAMD_INDEX; \
    packed_data->args.a1 = (GLuint)monitor; \
    (packed_call_t *)packed_data; \
})
#define pack_glEndQuery(target) ({ \
    glEndQuery_PACKED *packed_data = malloc(sizeof(glEndQuery_PACKED)); \
    packed_data->index = glEndQuery_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    (packed_call_t *)packed_data; \
})
#define pack_glEndQueryARB(target) ({ \
    glEndQueryARB_PACKED *packed_data = malloc(sizeof(glEndQueryARB_PACKED)); \
    packed_data->index = glEndQueryARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    (packed_call_t *)packed_data; \
})
#define pack_glEndQueryIndexed(target, index) ({ \
    glEndQueryIndexed_PACKED *packed_data = malloc(sizeof(glEndQueryIndexed_PACKED)); \
    packed_data->index = glEndQueryIndexed_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    (packed_call_t *)packed_data; \
})
#define pack_glEndTransformFeedback() ({ \
    glEndTransformFeedback_PACKED *packed_data = malloc(sizeof(glEndTransformFeedback_PACKED)); \
    packed_data->index = glEndTransformFeedback_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glEndTransformFeedbackEXT() ({ \
    glEndTransformFeedbackEXT_PACKED *packed_data = malloc(sizeof(glEndTransformFeedbackEXT_PACKED)); \
    packed_data->index = glEndTransformFeedbackEXT_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glEndTransformFeedbackNV() ({ \
    glEndTransformFeedbackNV_PACKED *packed_data = malloc(sizeof(glEndTransformFeedbackNV_PACKED)); \
    packed_data->index = glEndTransformFeedbackNV_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glEndVertexShaderEXT() ({ \
    glEndVertexShaderEXT_PACKED *packed_data = malloc(sizeof(glEndVertexShaderEXT_PACKED)); \
    packed_data->index = glEndVertexShaderEXT_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glEndVideoCaptureNV(video_capture_slot) ({ \
    glEndVideoCaptureNV_PACKED *packed_data = malloc(sizeof(glEndVideoCaptureNV_PACKED)); \
    packed_data->index = glEndVideoCaptureNV_INDEX; \
    packed_data->args.a1 = (GLuint)video_capture_slot; \
    (packed_call_t *)packed_data; \
})
#define pack_glEvalCoord1d(u) ({ \
    glEvalCoord1d_PACKED *packed_data = malloc(sizeof(glEvalCoord1d_PACKED)); \
    packed_data->index = glEvalCoord1d_INDEX; \
    packed_data->args.a1 = (GLdouble)u; \
    (packed_call_t *)packed_data; \
})
#define pack_glEvalCoord1dv(u) ({ \
    glEvalCoord1dv_PACKED *packed_data = malloc(sizeof(glEvalCoord1dv_PACKED)); \
    packed_data->index = glEvalCoord1dv_INDEX; \
    packed_data->args.a1 = (GLdouble *)u; \
    (packed_call_t *)packed_data; \
})
#define pack_glEvalCoord1f(u) ({ \
    glEvalCoord1f_PACKED *packed_data = malloc(sizeof(glEvalCoord1f_PACKED)); \
    packed_data->index = glEvalCoord1f_INDEX; \
    packed_data->args.a1 = (GLfloat)u; \
    (packed_call_t *)packed_data; \
})
#define pack_glEvalCoord1fv(u) ({ \
    glEvalCoord1fv_PACKED *packed_data = malloc(sizeof(glEvalCoord1fv_PACKED)); \
    packed_data->index = glEvalCoord1fv_INDEX; \
    packed_data->args.a1 = (GLfloat *)u; \
    (packed_call_t *)packed_data; \
})
#define pack_glEvalCoord1xOES(u) ({ \
    glEvalCoord1xOES_PACKED *packed_data = malloc(sizeof(glEvalCoord1xOES_PACKED)); \
    packed_data->index = glEvalCoord1xOES_INDEX; \
    packed_data->args.a1 = (GLfixed)u; \
    (packed_call_t *)packed_data; \
})
#define pack_glEvalCoord1xvOES(coords) ({ \
    glEvalCoord1xvOES_PACKED *packed_data = malloc(sizeof(glEvalCoord1xvOES_PACKED)); \
    packed_data->index = glEvalCoord1xvOES_INDEX; \
    packed_data->args.a1 = (GLfixed *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glEvalCoord2d(u, v) ({ \
    glEvalCoord2d_PACKED *packed_data = malloc(sizeof(glEvalCoord2d_PACKED)); \
    packed_data->index = glEvalCoord2d_INDEX; \
    packed_data->args.a1 = (GLdouble)u; \
    packed_data->args.a2 = (GLdouble)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glEvalCoord2dv(u) ({ \
    glEvalCoord2dv_PACKED *packed_data = malloc(sizeof(glEvalCoord2dv_PACKED)); \
    packed_data->index = glEvalCoord2dv_INDEX; \
    packed_data->args.a1 = (GLdouble *)u; \
    (packed_call_t *)packed_data; \
})
#define pack_glEvalCoord2f(u, v) ({ \
    glEvalCoord2f_PACKED *packed_data = malloc(sizeof(glEvalCoord2f_PACKED)); \
    packed_data->index = glEvalCoord2f_INDEX; \
    packed_data->args.a1 = (GLfloat)u; \
    packed_data->args.a2 = (GLfloat)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glEvalCoord2fv(u) ({ \
    glEvalCoord2fv_PACKED *packed_data = malloc(sizeof(glEvalCoord2fv_PACKED)); \
    packed_data->index = glEvalCoord2fv_INDEX; \
    packed_data->args.a1 = (GLfloat *)u; \
    (packed_call_t *)packed_data; \
})
#define pack_glEvalCoord2xOES(u, v) ({ \
    glEvalCoord2xOES_PACKED *packed_data = malloc(sizeof(glEvalCoord2xOES_PACKED)); \
    packed_data->index = glEvalCoord2xOES_INDEX; \
    packed_data->args.a1 = (GLfixed)u; \
    packed_data->args.a2 = (GLfixed)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glEvalCoord2xvOES(coords) ({ \
    glEvalCoord2xvOES_PACKED *packed_data = malloc(sizeof(glEvalCoord2xvOES_PACKED)); \
    packed_data->index = glEvalCoord2xvOES_INDEX; \
    packed_data->args.a1 = (GLfixed *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glEvalMapsNV(target, mode) ({ \
    glEvalMapsNV_PACKED *packed_data = malloc(sizeof(glEvalMapsNV_PACKED)); \
    packed_data->index = glEvalMapsNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)mode; \
    (packed_call_t *)packed_data; \
})
#define pack_glEvalMesh1(mode, i1, i2) ({ \
    glEvalMesh1_PACKED *packed_data = malloc(sizeof(glEvalMesh1_PACKED)); \
    packed_data->index = glEvalMesh1_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLint)i1; \
    packed_data->args.a3 = (GLint)i2; \
    (packed_call_t *)packed_data; \
})
#define pack_glEvalMesh2(mode, i1, i2, j1, j2) ({ \
    glEvalMesh2_PACKED *packed_data = malloc(sizeof(glEvalMesh2_PACKED)); \
    packed_data->index = glEvalMesh2_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLint)i1; \
    packed_data->args.a3 = (GLint)i2; \
    packed_data->args.a4 = (GLint)j1; \
    packed_data->args.a5 = (GLint)j2; \
    (packed_call_t *)packed_data; \
})
#define pack_glEvalPoint1(i) ({ \
    glEvalPoint1_PACKED *packed_data = malloc(sizeof(glEvalPoint1_PACKED)); \
    packed_data->index = glEvalPoint1_INDEX; \
    packed_data->args.a1 = (GLint)i; \
    (packed_call_t *)packed_data; \
})
#define pack_glEvalPoint2(i, j) ({ \
    glEvalPoint2_PACKED *packed_data = malloc(sizeof(glEvalPoint2_PACKED)); \
    packed_data->index = glEvalPoint2_INDEX; \
    packed_data->args.a1 = (GLint)i; \
    packed_data->args.a2 = (GLint)j; \
    (packed_call_t *)packed_data; \
})
#define pack_glExecuteProgramNV(target, id, params) ({ \
    glExecuteProgramNV_PACKED *packed_data = malloc(sizeof(glExecuteProgramNV_PACKED)); \
    packed_data->index = glExecuteProgramNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)id; \
    packed_data->args.a3 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glExtractComponentEXT(res, src, num) ({ \
    glExtractComponentEXT_PACKED *packed_data = malloc(sizeof(glExtractComponentEXT_PACKED)); \
    packed_data->index = glExtractComponentEXT_INDEX; \
    packed_data->args.a1 = (GLuint)res; \
    packed_data->args.a2 = (GLuint)src; \
    packed_data->args.a3 = (GLuint)num; \
    (packed_call_t *)packed_data; \
})
#define pack_glFeedbackBuffer(size, type, buffer) ({ \
    glFeedbackBuffer_PACKED *packed_data = malloc(sizeof(glFeedbackBuffer_PACKED)); \
    packed_data->index = glFeedbackBuffer_INDEX; \
    packed_data->args.a1 = (GLsizei)size; \
    packed_data->args.a2 = (GLenum)type; \
    packed_data->args.a3 = (GLfloat *)buffer; \
    (packed_call_t *)packed_data; \
})
#define pack_glFeedbackBufferxOES(n, type, buffer) ({ \
    glFeedbackBufferxOES_PACKED *packed_data = malloc(sizeof(glFeedbackBufferxOES_PACKED)); \
    packed_data->index = glFeedbackBufferxOES_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLenum)type; \
    packed_data->args.a3 = (GLfixed *)buffer; \
    (packed_call_t *)packed_data; \
})
#define pack_glFenceSync(condition, flags) ({ \
    glFenceSync_PACKED *packed_data = malloc(sizeof(glFenceSync_PACKED)); \
    packed_data->index = glFenceSync_INDEX; \
    packed_data->args.a1 = (GLenum)condition; \
    packed_data->args.a2 = (GLbitfield)flags; \
    (packed_call_t *)packed_data; \
})
#define pack_glFinalCombinerInputNV(variable, input, mapping, componentUsage) ({ \
    glFinalCombinerInputNV_PACKED *packed_data = malloc(sizeof(glFinalCombinerInputNV_PACKED)); \
    packed_data->index = glFinalCombinerInputNV_INDEX; \
    packed_data->args.a1 = (GLenum)variable; \
    packed_data->args.a2 = (GLenum)input; \
    packed_data->args.a3 = (GLenum)mapping; \
    packed_data->args.a4 = (GLenum)componentUsage; \
    (packed_call_t *)packed_data; \
})
#define pack_glFinish() ({ \
    glFinish_PACKED *packed_data = malloc(sizeof(glFinish_PACKED)); \
    packed_data->index = glFinish_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glFinishAsyncSGIX(markerp) ({ \
    glFinishAsyncSGIX_PACKED *packed_data = malloc(sizeof(glFinishAsyncSGIX_PACKED)); \
    packed_data->index = glFinishAsyncSGIX_INDEX; \
    packed_data->args.a1 = (GLuint *)markerp; \
    (packed_call_t *)packed_data; \
})
#define pack_glFinishFenceAPPLE(fence) ({ \
    glFinishFenceAPPLE_PACKED *packed_data = malloc(sizeof(glFinishFenceAPPLE_PACKED)); \
    packed_data->index = glFinishFenceAPPLE_INDEX; \
    packed_data->args.a1 = (GLuint)fence; \
    (packed_call_t *)packed_data; \
})
#define pack_glFinishFenceNV(fence) ({ \
    glFinishFenceNV_PACKED *packed_data = malloc(sizeof(glFinishFenceNV_PACKED)); \
    packed_data->index = glFinishFenceNV_INDEX; \
    packed_data->args.a1 = (GLuint)fence; \
    (packed_call_t *)packed_data; \
})
#define pack_glFinishObjectAPPLE(object, name) ({ \
    glFinishObjectAPPLE_PACKED *packed_data = malloc(sizeof(glFinishObjectAPPLE_PACKED)); \
    packed_data->index = glFinishObjectAPPLE_INDEX; \
    packed_data->args.a1 = (GLenum)object; \
    packed_data->args.a2 = (GLint)name; \
    (packed_call_t *)packed_data; \
})
#define pack_glFinishTextureSUNX() ({ \
    glFinishTextureSUNX_PACKED *packed_data = malloc(sizeof(glFinishTextureSUNX_PACKED)); \
    packed_data->index = glFinishTextureSUNX_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glFlush() ({ \
    glFlush_PACKED *packed_data = malloc(sizeof(glFlush_PACKED)); \
    packed_data->index = glFlush_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glFlushMappedBufferRange(target, offset, length) ({ \
    glFlushMappedBufferRange_PACKED *packed_data = malloc(sizeof(glFlushMappedBufferRange_PACKED)); \
    packed_data->index = glFlushMappedBufferRange_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLintptr)offset; \
    packed_data->args.a3 = (GLsizeiptr)length; \
    (packed_call_t *)packed_data; \
})
#define pack_glFlushMappedBufferRangeAPPLE(target, offset, size) ({ \
    glFlushMappedBufferRangeAPPLE_PACKED *packed_data = malloc(sizeof(glFlushMappedBufferRangeAPPLE_PACKED)); \
    packed_data->index = glFlushMappedBufferRangeAPPLE_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLintptr)offset; \
    packed_data->args.a3 = (GLsizeiptr)size; \
    (packed_call_t *)packed_data; \
})
#define pack_glFlushMappedNamedBufferRangeEXT(buffer, offset, length) ({ \
    glFlushMappedNamedBufferRangeEXT_PACKED *packed_data = malloc(sizeof(glFlushMappedNamedBufferRangeEXT_PACKED)); \
    packed_data->index = glFlushMappedNamedBufferRangeEXT_INDEX; \
    packed_data->args.a1 = (GLuint)buffer; \
    packed_data->args.a2 = (GLintptr)offset; \
    packed_data->args.a3 = (GLsizeiptr)length; \
    (packed_call_t *)packed_data; \
})
#define pack_glFlushPixelDataRangeNV(target) ({ \
    glFlushPixelDataRangeNV_PACKED *packed_data = malloc(sizeof(glFlushPixelDataRangeNV_PACKED)); \
    packed_data->index = glFlushPixelDataRangeNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    (packed_call_t *)packed_data; \
})
#define pack_glFlushRasterSGIX() ({ \
    glFlushRasterSGIX_PACKED *packed_data = malloc(sizeof(glFlushRasterSGIX_PACKED)); \
    packed_data->index = glFlushRasterSGIX_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glFlushStaticDataIBM(target) ({ \
    glFlushStaticDataIBM_PACKED *packed_data = malloc(sizeof(glFlushStaticDataIBM_PACKED)); \
    packed_data->index = glFlushStaticDataIBM_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    (packed_call_t *)packed_data; \
})
#define pack_glFlushVertexArrayRangeAPPLE(length, pointer) ({ \
    glFlushVertexArrayRangeAPPLE_PACKED *packed_data = malloc(sizeof(glFlushVertexArrayRangeAPPLE_PACKED)); \
    packed_data->index = glFlushVertexArrayRangeAPPLE_INDEX; \
    packed_data->args.a1 = (GLsizei)length; \
    packed_data->args.a2 = (GLvoid *)pointer; \
    (packed_call_t *)packed_data; \
})
#define pack_glFlushVertexArrayRangeNV() ({ \
    glFlushVertexArrayRangeNV_PACKED *packed_data = malloc(sizeof(glFlushVertexArrayRangeNV_PACKED)); \
    packed_data->index = glFlushVertexArrayRangeNV_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glFogCoordFormatNV(type, stride) ({ \
    glFogCoordFormatNV_PACKED *packed_data = malloc(sizeof(glFogCoordFormatNV_PACKED)); \
    packed_data->index = glFogCoordFormatNV_INDEX; \
    packed_data->args.a1 = (GLenum)type; \
    packed_data->args.a2 = (GLsizei)stride; \
    (packed_call_t *)packed_data; \
})
#define pack_glFogCoordPointer(type, stride, pointer) ({ \
    glFogCoordPointer_PACKED *packed_data = malloc(sizeof(glFogCoordPointer_PACKED)); \
    packed_data->index = glFogCoordPointer_INDEX; \
    packed_data->args.a1 = (GLenum)type; \
    packed_data->args.a2 = (GLsizei)stride; \
    packed_data->args.a3 = (GLvoid *)pointer; \
    (packed_call_t *)packed_data; \
})
#define pack_glFogCoordPointerEXT(type, stride, pointer) ({ \
    glFogCoordPointerEXT_PACKED *packed_data = malloc(sizeof(glFogCoordPointerEXT_PACKED)); \
    packed_data->index = glFogCoordPointerEXT_INDEX; \
    packed_data->args.a1 = (GLenum)type; \
    packed_data->args.a2 = (GLsizei)stride; \
    packed_data->args.a3 = (GLvoid *)pointer; \
    (packed_call_t *)packed_data; \
})
#define pack_glFogCoordPointerListIBM(type, stride, pointer, ptrstride) ({ \
    glFogCoordPointerListIBM_PACKED *packed_data = malloc(sizeof(glFogCoordPointerListIBM_PACKED)); \
    packed_data->index = glFogCoordPointerListIBM_INDEX; \
    packed_data->args.a1 = (GLenum)type; \
    packed_data->args.a2 = (GLint)stride; \
    packed_data->args.a3 = (GLvoid *)pointer; \
    packed_data->args.a4 = (GLint)ptrstride; \
    (packed_call_t *)packed_data; \
})
#define pack_glFogCoordd(coord) ({ \
    glFogCoordd_PACKED *packed_data = malloc(sizeof(glFogCoordd_PACKED)); \
    packed_data->index = glFogCoordd_INDEX; \
    packed_data->args.a1 = (GLdouble)coord; \
    (packed_call_t *)packed_data; \
})
#define pack_glFogCoorddEXT(coord) ({ \
    glFogCoorddEXT_PACKED *packed_data = malloc(sizeof(glFogCoorddEXT_PACKED)); \
    packed_data->index = glFogCoorddEXT_INDEX; \
    packed_data->args.a1 = (GLdouble)coord; \
    (packed_call_t *)packed_data; \
})
#define pack_glFogCoorddv(coord) ({ \
    glFogCoorddv_PACKED *packed_data = malloc(sizeof(glFogCoorddv_PACKED)); \
    packed_data->index = glFogCoorddv_INDEX; \
    packed_data->args.a1 = (GLdouble *)coord; \
    (packed_call_t *)packed_data; \
})
#define pack_glFogCoorddvEXT(coord) ({ \
    glFogCoorddvEXT_PACKED *packed_data = malloc(sizeof(glFogCoorddvEXT_PACKED)); \
    packed_data->index = glFogCoorddvEXT_INDEX; \
    packed_data->args.a1 = (GLdouble *)coord; \
    (packed_call_t *)packed_data; \
})
#define pack_glFogCoordf(coord) ({ \
    glFogCoordf_PACKED *packed_data = malloc(sizeof(glFogCoordf_PACKED)); \
    packed_data->index = glFogCoordf_INDEX; \
    packed_data->args.a1 = (GLfloat)coord; \
    (packed_call_t *)packed_data; \
})
#define pack_glFogCoordfEXT(coord) ({ \
    glFogCoordfEXT_PACKED *packed_data = malloc(sizeof(glFogCoordfEXT_PACKED)); \
    packed_data->index = glFogCoordfEXT_INDEX; \
    packed_data->args.a1 = (GLfloat)coord; \
    (packed_call_t *)packed_data; \
})
#define pack_glFogCoordfv(coord) ({ \
    glFogCoordfv_PACKED *packed_data = malloc(sizeof(glFogCoordfv_PACKED)); \
    packed_data->index = glFogCoordfv_INDEX; \
    packed_data->args.a1 = (GLfloat *)coord; \
    (packed_call_t *)packed_data; \
})
#define pack_glFogCoordfvEXT(coord) ({ \
    glFogCoordfvEXT_PACKED *packed_data = malloc(sizeof(glFogCoordfvEXT_PACKED)); \
    packed_data->index = glFogCoordfvEXT_INDEX; \
    packed_data->args.a1 = (GLfloat *)coord; \
    (packed_call_t *)packed_data; \
})
#define pack_glFogCoordhNV(fog) ({ \
    glFogCoordhNV_PACKED *packed_data = malloc(sizeof(glFogCoordhNV_PACKED)); \
    packed_data->index = glFogCoordhNV_INDEX; \
    packed_data->args.a1 = (GLhalfNV)fog; \
    (packed_call_t *)packed_data; \
})
#define pack_glFogCoordhvNV(fog) ({ \
    glFogCoordhvNV_PACKED *packed_data = malloc(sizeof(glFogCoordhvNV_PACKED)); \
    packed_data->index = glFogCoordhvNV_INDEX; \
    packed_data->args.a1 = (GLhalfNV *)fog; \
    (packed_call_t *)packed_data; \
})
#define pack_glFogFuncSGIS(n, points) ({ \
    glFogFuncSGIS_PACKED *packed_data = malloc(sizeof(glFogFuncSGIS_PACKED)); \
    packed_data->index = glFogFuncSGIS_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLfloat *)points; \
    (packed_call_t *)packed_data; \
})
#define pack_glFogf(pname, param) ({ \
    glFogf_PACKED *packed_data = malloc(sizeof(glFogf_PACKED)); \
    packed_data->index = glFogf_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLfloat)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glFogfv(pname, params) ({ \
    glFogfv_PACKED *packed_data = malloc(sizeof(glFogfv_PACKED)); \
    packed_data->index = glFogfv_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glFogi(pname, param) ({ \
    glFogi_PACKED *packed_data = malloc(sizeof(glFogi_PACKED)); \
    packed_data->index = glFogi_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLint)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glFogiv(pname, params) ({ \
    glFogiv_PACKED *packed_data = malloc(sizeof(glFogiv_PACKED)); \
    packed_data->index = glFogiv_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glFogx(pname, param) ({ \
    glFogx_PACKED *packed_data = malloc(sizeof(glFogx_PACKED)); \
    packed_data->index = glFogx_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLfixed)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glFogxOES(pname, param) ({ \
    glFogxOES_PACKED *packed_data = malloc(sizeof(glFogxOES_PACKED)); \
    packed_data->index = glFogxOES_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLfixed)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glFogxv(pname, params) ({ \
    glFogxv_PACKED *packed_data = malloc(sizeof(glFogxv_PACKED)); \
    packed_data->index = glFogxv_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLfixed *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glFogxvOES(pname, param) ({ \
    glFogxvOES_PACKED *packed_data = malloc(sizeof(glFogxvOES_PACKED)); \
    packed_data->index = glFogxvOES_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLfixed *)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glFragmentColorMaterialSGIX(face, mode) ({ \
    glFragmentColorMaterialSGIX_PACKED *packed_data = malloc(sizeof(glFragmentColorMaterialSGIX_PACKED)); \
    packed_data->index = glFragmentColorMaterialSGIX_INDEX; \
    packed_data->args.a1 = (GLenum)face; \
    packed_data->args.a2 = (GLenum)mode; \
    (packed_call_t *)packed_data; \
})
#define pack_glFragmentLightModelfSGIX(pname, param) ({ \
    glFragmentLightModelfSGIX_PACKED *packed_data = malloc(sizeof(glFragmentLightModelfSGIX_PACKED)); \
    packed_data->index = glFragmentLightModelfSGIX_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLfloat)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glFragmentLightModelfvSGIX(pname, params) ({ \
    glFragmentLightModelfvSGIX_PACKED *packed_data = malloc(sizeof(glFragmentLightModelfvSGIX_PACKED)); \
    packed_data->index = glFragmentLightModelfvSGIX_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glFragmentLightModeliSGIX(pname, param) ({ \
    glFragmentLightModeliSGIX_PACKED *packed_data = malloc(sizeof(glFragmentLightModeliSGIX_PACKED)); \
    packed_data->index = glFragmentLightModeliSGIX_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLint)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glFragmentLightModelivSGIX(pname, params) ({ \
    glFragmentLightModelivSGIX_PACKED *packed_data = malloc(sizeof(glFragmentLightModelivSGIX_PACKED)); \
    packed_data->index = glFragmentLightModelivSGIX_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glFragmentLightfSGIX(light, pname, param) ({ \
    glFragmentLightfSGIX_PACKED *packed_data = malloc(sizeof(glFragmentLightfSGIX_PACKED)); \
    packed_data->index = glFragmentLightfSGIX_INDEX; \
    packed_data->args.a1 = (GLenum)light; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glFragmentLightfvSGIX(light, pname, params) ({ \
    glFragmentLightfvSGIX_PACKED *packed_data = malloc(sizeof(glFragmentLightfvSGIX_PACKED)); \
    packed_data->index = glFragmentLightfvSGIX_INDEX; \
    packed_data->args.a1 = (GLenum)light; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glFragmentLightiSGIX(light, pname, param) ({ \
    glFragmentLightiSGIX_PACKED *packed_data = malloc(sizeof(glFragmentLightiSGIX_PACKED)); \
    packed_data->index = glFragmentLightiSGIX_INDEX; \
    packed_data->args.a1 = (GLenum)light; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glFragmentLightivSGIX(light, pname, params) ({ \
    glFragmentLightivSGIX_PACKED *packed_data = malloc(sizeof(glFragmentLightivSGIX_PACKED)); \
    packed_data->index = glFragmentLightivSGIX_INDEX; \
    packed_data->args.a1 = (GLenum)light; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glFragmentMaterialfSGIX(face, pname, param) ({ \
    glFragmentMaterialfSGIX_PACKED *packed_data = malloc(sizeof(glFragmentMaterialfSGIX_PACKED)); \
    packed_data->index = glFragmentMaterialfSGIX_INDEX; \
    packed_data->args.a1 = (GLenum)face; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glFragmentMaterialfvSGIX(face, pname, params) ({ \
    glFragmentMaterialfvSGIX_PACKED *packed_data = malloc(sizeof(glFragmentMaterialfvSGIX_PACKED)); \
    packed_data->index = glFragmentMaterialfvSGIX_INDEX; \
    packed_data->args.a1 = (GLenum)face; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glFragmentMaterialiSGIX(face, pname, param) ({ \
    glFragmentMaterialiSGIX_PACKED *packed_data = malloc(sizeof(glFragmentMaterialiSGIX_PACKED)); \
    packed_data->index = glFragmentMaterialiSGIX_INDEX; \
    packed_data->args.a1 = (GLenum)face; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glFragmentMaterialivSGIX(face, pname, params) ({ \
    glFragmentMaterialivSGIX_PACKED *packed_data = malloc(sizeof(glFragmentMaterialivSGIX_PACKED)); \
    packed_data->index = glFragmentMaterialivSGIX_INDEX; \
    packed_data->args.a1 = (GLenum)face; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glFrameTerminatorGREMEDY() ({ \
    glFrameTerminatorGREMEDY_PACKED *packed_data = malloc(sizeof(glFrameTerminatorGREMEDY_PACKED)); \
    packed_data->index = glFrameTerminatorGREMEDY_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glFrameZoomSGIX(factor) ({ \
    glFrameZoomSGIX_PACKED *packed_data = malloc(sizeof(glFrameZoomSGIX_PACKED)); \
    packed_data->index = glFrameZoomSGIX_INDEX; \
    packed_data->args.a1 = (GLint)factor; \
    (packed_call_t *)packed_data; \
})
#define pack_glFramebufferDrawBufferEXT(framebuffer, mode) ({ \
    glFramebufferDrawBufferEXT_PACKED *packed_data = malloc(sizeof(glFramebufferDrawBufferEXT_PACKED)); \
    packed_data->index = glFramebufferDrawBufferEXT_INDEX; \
    packed_data->args.a1 = (GLuint)framebuffer; \
    packed_data->args.a2 = (GLenum)mode; \
    (packed_call_t *)packed_data; \
})
#define pack_glFramebufferDrawBuffersEXT(framebuffer, n, bufs) ({ \
    glFramebufferDrawBuffersEXT_PACKED *packed_data = malloc(sizeof(glFramebufferDrawBuffersEXT_PACKED)); \
    packed_data->index = glFramebufferDrawBuffersEXT_INDEX; \
    packed_data->args.a1 = (GLuint)framebuffer; \
    packed_data->args.a2 = (GLsizei)n; \
    packed_data->args.a3 = (GLenum *)bufs; \
    (packed_call_t *)packed_data; \
})
#define pack_glFramebufferParameteri(target, pname, param) ({ \
    glFramebufferParameteri_PACKED *packed_data = malloc(sizeof(glFramebufferParameteri_PACKED)); \
    packed_data->index = glFramebufferParameteri_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glFramebufferReadBufferEXT(framebuffer, mode) ({ \
    glFramebufferReadBufferEXT_PACKED *packed_data = malloc(sizeof(glFramebufferReadBufferEXT_PACKED)); \
    packed_data->index = glFramebufferReadBufferEXT_INDEX; \
    packed_data->args.a1 = (GLuint)framebuffer; \
    packed_data->args.a2 = (GLenum)mode; \
    (packed_call_t *)packed_data; \
})
#define pack_glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) ({ \
    glFramebufferRenderbuffer_PACKED *packed_data = malloc(sizeof(glFramebufferRenderbuffer_PACKED)); \
    packed_data->index = glFramebufferRenderbuffer_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)attachment; \
    packed_data->args.a3 = (GLenum)renderbuffertarget; \
    packed_data->args.a4 = (GLuint)renderbuffer; \
    (packed_call_t *)packed_data; \
})
#define pack_glFramebufferRenderbufferEXT(target, attachment, renderbuffertarget, renderbuffer) ({ \
    glFramebufferRenderbufferEXT_PACKED *packed_data = malloc(sizeof(glFramebufferRenderbufferEXT_PACKED)); \
    packed_data->index = glFramebufferRenderbufferEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)attachment; \
    packed_data->args.a3 = (GLenum)renderbuffertarget; \
    packed_data->args.a4 = (GLuint)renderbuffer; \
    (packed_call_t *)packed_data; \
})
#define pack_glFramebufferTexture(target, attachment, texture, level) ({ \
    glFramebufferTexture_PACKED *packed_data = malloc(sizeof(glFramebufferTexture_PACKED)); \
    packed_data->index = glFramebufferTexture_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)attachment; \
    packed_data->args.a3 = (GLuint)texture; \
    packed_data->args.a4 = (GLint)level; \
    (packed_call_t *)packed_data; \
})
#define pack_glFramebufferTexture1D(target, attachment, textarget, texture, level) ({ \
    glFramebufferTexture1D_PACKED *packed_data = malloc(sizeof(glFramebufferTexture1D_PACKED)); \
    packed_data->index = glFramebufferTexture1D_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)attachment; \
    packed_data->args.a3 = (GLenum)textarget; \
    packed_data->args.a4 = (GLuint)texture; \
    packed_data->args.a5 = (GLint)level; \
    (packed_call_t *)packed_data; \
})
#define pack_glFramebufferTexture1DEXT(target, attachment, textarget, texture, level) ({ \
    glFramebufferTexture1DEXT_PACKED *packed_data = malloc(sizeof(glFramebufferTexture1DEXT_PACKED)); \
    packed_data->index = glFramebufferTexture1DEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)attachment; \
    packed_data->args.a3 = (GLenum)textarget; \
    packed_data->args.a4 = (GLuint)texture; \
    packed_data->args.a5 = (GLint)level; \
    (packed_call_t *)packed_data; \
})
#define pack_glFramebufferTexture2D(target, attachment, textarget, texture, level) ({ \
    glFramebufferTexture2D_PACKED *packed_data = malloc(sizeof(glFramebufferTexture2D_PACKED)); \
    packed_data->index = glFramebufferTexture2D_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)attachment; \
    packed_data->args.a3 = (GLenum)textarget; \
    packed_data->args.a4 = (GLuint)texture; \
    packed_data->args.a5 = (GLint)level; \
    (packed_call_t *)packed_data; \
})
#define pack_glFramebufferTexture2DEXT(target, attachment, textarget, texture, level) ({ \
    glFramebufferTexture2DEXT_PACKED *packed_data = malloc(sizeof(glFramebufferTexture2DEXT_PACKED)); \
    packed_data->index = glFramebufferTexture2DEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)attachment; \
    packed_data->args.a3 = (GLenum)textarget; \
    packed_data->args.a4 = (GLuint)texture; \
    packed_data->args.a5 = (GLint)level; \
    (packed_call_t *)packed_data; \
})
#define pack_glFramebufferTexture3D(target, attachment, textarget, texture, level, zoffset) ({ \
    glFramebufferTexture3D_PACKED *packed_data = malloc(sizeof(glFramebufferTexture3D_PACKED)); \
    packed_data->index = glFramebufferTexture3D_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)attachment; \
    packed_data->args.a3 = (GLenum)textarget; \
    packed_data->args.a4 = (GLuint)texture; \
    packed_data->args.a5 = (GLint)level; \
    packed_data->args.a6 = (GLint)zoffset; \
    (packed_call_t *)packed_data; \
})
#define pack_glFramebufferTexture3DEXT(target, attachment, textarget, texture, level, zoffset) ({ \
    glFramebufferTexture3DEXT_PACKED *packed_data = malloc(sizeof(glFramebufferTexture3DEXT_PACKED)); \
    packed_data->index = glFramebufferTexture3DEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)attachment; \
    packed_data->args.a3 = (GLenum)textarget; \
    packed_data->args.a4 = (GLuint)texture; \
    packed_data->args.a5 = (GLint)level; \
    packed_data->args.a6 = (GLint)zoffset; \
    (packed_call_t *)packed_data; \
})
#define pack_glFramebufferTextureARB(target, attachment, texture, level) ({ \
    glFramebufferTextureARB_PACKED *packed_data = malloc(sizeof(glFramebufferTextureARB_PACKED)); \
    packed_data->index = glFramebufferTextureARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)attachment; \
    packed_data->args.a3 = (GLuint)texture; \
    packed_data->args.a4 = (GLint)level; \
    (packed_call_t *)packed_data; \
})
#define pack_glFramebufferTextureEXT(target, attachment, texture, level) ({ \
    glFramebufferTextureEXT_PACKED *packed_data = malloc(sizeof(glFramebufferTextureEXT_PACKED)); \
    packed_data->index = glFramebufferTextureEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)attachment; \
    packed_data->args.a3 = (GLuint)texture; \
    packed_data->args.a4 = (GLint)level; \
    (packed_call_t *)packed_data; \
})
#define pack_glFramebufferTextureFaceARB(target, attachment, texture, level, face) ({ \
    glFramebufferTextureFaceARB_PACKED *packed_data = malloc(sizeof(glFramebufferTextureFaceARB_PACKED)); \
    packed_data->index = glFramebufferTextureFaceARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)attachment; \
    packed_data->args.a3 = (GLuint)texture; \
    packed_data->args.a4 = (GLint)level; \
    packed_data->args.a5 = (GLenum)face; \
    (packed_call_t *)packed_data; \
})
#define pack_glFramebufferTextureFaceEXT(target, attachment, texture, level, face) ({ \
    glFramebufferTextureFaceEXT_PACKED *packed_data = malloc(sizeof(glFramebufferTextureFaceEXT_PACKED)); \
    packed_data->index = glFramebufferTextureFaceEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)attachment; \
    packed_data->args.a3 = (GLuint)texture; \
    packed_data->args.a4 = (GLint)level; \
    packed_data->args.a5 = (GLenum)face; \
    (packed_call_t *)packed_data; \
})
#define pack_glFramebufferTextureLayer(target, attachment, texture, level, layer) ({ \
    glFramebufferTextureLayer_PACKED *packed_data = malloc(sizeof(glFramebufferTextureLayer_PACKED)); \
    packed_data->index = glFramebufferTextureLayer_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)attachment; \
    packed_data->args.a3 = (GLuint)texture; \
    packed_data->args.a4 = (GLint)level; \
    packed_data->args.a5 = (GLint)layer; \
    (packed_call_t *)packed_data; \
})
#define pack_glFramebufferTextureLayerARB(target, attachment, texture, level, layer) ({ \
    glFramebufferTextureLayerARB_PACKED *packed_data = malloc(sizeof(glFramebufferTextureLayerARB_PACKED)); \
    packed_data->index = glFramebufferTextureLayerARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)attachment; \
    packed_data->args.a3 = (GLuint)texture; \
    packed_data->args.a4 = (GLint)level; \
    packed_data->args.a5 = (GLint)layer; \
    (packed_call_t *)packed_data; \
})
#define pack_glFramebufferTextureLayerEXT(target, attachment, texture, level, layer) ({ \
    glFramebufferTextureLayerEXT_PACKED *packed_data = malloc(sizeof(glFramebufferTextureLayerEXT_PACKED)); \
    packed_data->index = glFramebufferTextureLayerEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)attachment; \
    packed_data->args.a3 = (GLuint)texture; \
    packed_data->args.a4 = (GLint)level; \
    packed_data->args.a5 = (GLint)layer; \
    (packed_call_t *)packed_data; \
})
#define pack_glFreeObjectBufferATI(buffer) ({ \
    glFreeObjectBufferATI_PACKED *packed_data = malloc(sizeof(glFreeObjectBufferATI_PACKED)); \
    packed_data->index = glFreeObjectBufferATI_INDEX; \
    packed_data->args.a1 = (GLuint)buffer; \
    (packed_call_t *)packed_data; \
})
#define pack_glFrontFace(mode) ({ \
    glFrontFace_PACKED *packed_data = malloc(sizeof(glFrontFace_PACKED)); \
    packed_data->index = glFrontFace_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    (packed_call_t *)packed_data; \
})
#define pack_glFrustum(left, right, bottom, top, zNear, zFar) ({ \
    glFrustum_PACKED *packed_data = malloc(sizeof(glFrustum_PACKED)); \
    packed_data->index = glFrustum_INDEX; \
    packed_data->args.a1 = (GLdouble)left; \
    packed_data->args.a2 = (GLdouble)right; \
    packed_data->args.a3 = (GLdouble)bottom; \
    packed_data->args.a4 = (GLdouble)top; \
    packed_data->args.a5 = (GLdouble)zNear; \
    packed_data->args.a6 = (GLdouble)zFar; \
    (packed_call_t *)packed_data; \
})
#define pack_glFrustumf(left, right, bottom, top, near, far) ({ \
    glFrustumf_PACKED *packed_data = malloc(sizeof(glFrustumf_PACKED)); \
    packed_data->index = glFrustumf_INDEX; \
    packed_data->args.a1 = (GLfloat)left; \
    packed_data->args.a2 = (GLfloat)right; \
    packed_data->args.a3 = (GLfloat)bottom; \
    packed_data->args.a4 = (GLfloat)top; \
    packed_data->args.a5 = (GLfloat)near; \
    packed_data->args.a6 = (GLfloat)far; \
    (packed_call_t *)packed_data; \
})
#define pack_glFrustumfOES(l, r, b, t, n, f) ({ \
    glFrustumfOES_PACKED *packed_data = malloc(sizeof(glFrustumfOES_PACKED)); \
    packed_data->index = glFrustumfOES_INDEX; \
    packed_data->args.a1 = (GLfloat)l; \
    packed_data->args.a2 = (GLfloat)r; \
    packed_data->args.a3 = (GLfloat)b; \
    packed_data->args.a4 = (GLfloat)t; \
    packed_data->args.a5 = (GLfloat)n; \
    packed_data->args.a6 = (GLfloat)f; \
    (packed_call_t *)packed_data; \
})
#define pack_glFrustumx(left, right, bottom, top, near, far) ({ \
    glFrustumx_PACKED *packed_data = malloc(sizeof(glFrustumx_PACKED)); \
    packed_data->index = glFrustumx_INDEX; \
    packed_data->args.a1 = (GLfixed)left; \
    packed_data->args.a2 = (GLfixed)right; \
    packed_data->args.a3 = (GLfixed)bottom; \
    packed_data->args.a4 = (GLfixed)top; \
    packed_data->args.a5 = (GLfixed)near; \
    packed_data->args.a6 = (GLfixed)far; \
    (packed_call_t *)packed_data; \
})
#define pack_glFrustumxOES(l, r, b, t, n, f) ({ \
    glFrustumxOES_PACKED *packed_data = malloc(sizeof(glFrustumxOES_PACKED)); \
    packed_data->index = glFrustumxOES_INDEX; \
    packed_data->args.a1 = (GLfixed)l; \
    packed_data->args.a2 = (GLfixed)r; \
    packed_data->args.a3 = (GLfixed)b; \
    packed_data->args.a4 = (GLfixed)t; \
    packed_data->args.a5 = (GLfixed)n; \
    packed_data->args.a6 = (GLfixed)f; \
    (packed_call_t *)packed_data; \
})
#define pack_glGenAsyncMarkersSGIX(range) ({ \
    glGenAsyncMarkersSGIX_PACKED *packed_data = malloc(sizeof(glGenAsyncMarkersSGIX_PACKED)); \
    packed_data->index = glGenAsyncMarkersSGIX_INDEX; \
    packed_data->args.a1 = (GLsizei)range; \
    (packed_call_t *)packed_data; \
})
#define pack_glGenBuffers(n, buffers) ({ \
    glGenBuffers_PACKED *packed_data = malloc(sizeof(glGenBuffers_PACKED)); \
    packed_data->index = glGenBuffers_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLuint *)buffers; \
    (packed_call_t *)packed_data; \
})
#define pack_glGenBuffersARB(n, buffers) ({ \
    glGenBuffersARB_PACKED *packed_data = malloc(sizeof(glGenBuffersARB_PACKED)); \
    packed_data->index = glGenBuffersARB_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLuint *)buffers; \
    (packed_call_t *)packed_data; \
})
#define pack_glGenFencesAPPLE(n, fences) ({ \
    glGenFencesAPPLE_PACKED *packed_data = malloc(sizeof(glGenFencesAPPLE_PACKED)); \
    packed_data->index = glGenFencesAPPLE_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLuint *)fences; \
    (packed_call_t *)packed_data; \
})
#define pack_glGenFencesNV(n, fences) ({ \
    glGenFencesNV_PACKED *packed_data = malloc(sizeof(glGenFencesNV_PACKED)); \
    packed_data->index = glGenFencesNV_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLuint *)fences; \
    (packed_call_t *)packed_data; \
})
#define pack_glGenFragmentShadersATI(range) ({ \
    glGenFragmentShadersATI_PACKED *packed_data = malloc(sizeof(glGenFragmentShadersATI_PACKED)); \
    packed_data->index = glGenFragmentShadersATI_INDEX; \
    packed_data->args.a1 = (GLuint)range; \
    (packed_call_t *)packed_data; \
})
#define pack_glGenFramebuffers(n, framebuffers) ({ \
    glGenFramebuffers_PACKED *packed_data = malloc(sizeof(glGenFramebuffers_PACKED)); \
    packed_data->index = glGenFramebuffers_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLuint *)framebuffers; \
    (packed_call_t *)packed_data; \
})
#define pack_glGenFramebuffersEXT(n, framebuffers) ({ \
    glGenFramebuffersEXT_PACKED *packed_data = malloc(sizeof(glGenFramebuffersEXT_PACKED)); \
    packed_data->index = glGenFramebuffersEXT_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLuint *)framebuffers; \
    (packed_call_t *)packed_data; \
})
#define pack_glGenLists(range) ({ \
    glGenLists_PACKED *packed_data = malloc(sizeof(glGenLists_PACKED)); \
    packed_data->index = glGenLists_INDEX; \
    packed_data->args.a1 = (GLsizei)range; \
    (packed_call_t *)packed_data; \
})
#define pack_glGenNamesAMD(identifier, num, names) ({ \
    glGenNamesAMD_PACKED *packed_data = malloc(sizeof(glGenNamesAMD_PACKED)); \
    packed_data->index = glGenNamesAMD_INDEX; \
    packed_data->args.a1 = (GLenum)identifier; \
    packed_data->args.a2 = (GLuint)num; \
    packed_data->args.a3 = (GLuint *)names; \
    (packed_call_t *)packed_data; \
})
#define pack_glGenOcclusionQueriesNV(n, ids) ({ \
    glGenOcclusionQueriesNV_PACKED *packed_data = malloc(sizeof(glGenOcclusionQueriesNV_PACKED)); \
    packed_data->index = glGenOcclusionQueriesNV_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLuint *)ids; \
    (packed_call_t *)packed_data; \
})
#define pack_glGenPathsNV(range) ({ \
    glGenPathsNV_PACKED *packed_data = malloc(sizeof(glGenPathsNV_PACKED)); \
    packed_data->index = glGenPathsNV_INDEX; \
    packed_data->args.a1 = (GLsizei)range; \
    (packed_call_t *)packed_data; \
})
#define pack_glGenPerfMonitorsAMD(n, monitors) ({ \
    glGenPerfMonitorsAMD_PACKED *packed_data = malloc(sizeof(glGenPerfMonitorsAMD_PACKED)); \
    packed_data->index = glGenPerfMonitorsAMD_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLuint *)monitors; \
    (packed_call_t *)packed_data; \
})
#define pack_glGenProgramPipelines(n, pipelines) ({ \
    glGenProgramPipelines_PACKED *packed_data = malloc(sizeof(glGenProgramPipelines_PACKED)); \
    packed_data->index = glGenProgramPipelines_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLuint *)pipelines; \
    (packed_call_t *)packed_data; \
})
#define pack_glGenProgramsARB(n, programs) ({ \
    glGenProgramsARB_PACKED *packed_data = malloc(sizeof(glGenProgramsARB_PACKED)); \
    packed_data->index = glGenProgramsARB_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLuint *)programs; \
    (packed_call_t *)packed_data; \
})
#define pack_glGenProgramsNV(n, programs) ({ \
    glGenProgramsNV_PACKED *packed_data = malloc(sizeof(glGenProgramsNV_PACKED)); \
    packed_data->index = glGenProgramsNV_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLuint *)programs; \
    (packed_call_t *)packed_data; \
})
#define pack_glGenQueries(n, ids) ({ \
    glGenQueries_PACKED *packed_data = malloc(sizeof(glGenQueries_PACKED)); \
    packed_data->index = glGenQueries_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLuint *)ids; \
    (packed_call_t *)packed_data; \
})
#define pack_glGenQueriesARB(n, ids) ({ \
    glGenQueriesARB_PACKED *packed_data = malloc(sizeof(glGenQueriesARB_PACKED)); \
    packed_data->index = glGenQueriesARB_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLuint *)ids; \
    (packed_call_t *)packed_data; \
})
#define pack_glGenRenderbuffers(n, renderbuffers) ({ \
    glGenRenderbuffers_PACKED *packed_data = malloc(sizeof(glGenRenderbuffers_PACKED)); \
    packed_data->index = glGenRenderbuffers_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLuint *)renderbuffers; \
    (packed_call_t *)packed_data; \
})
#define pack_glGenRenderbuffersEXT(n, renderbuffers) ({ \
    glGenRenderbuffersEXT_PACKED *packed_data = malloc(sizeof(glGenRenderbuffersEXT_PACKED)); \
    packed_data->index = glGenRenderbuffersEXT_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLuint *)renderbuffers; \
    (packed_call_t *)packed_data; \
})
#define pack_glGenSamplers(count, samplers) ({ \
    glGenSamplers_PACKED *packed_data = malloc(sizeof(glGenSamplers_PACKED)); \
    packed_data->index = glGenSamplers_INDEX; \
    packed_data->args.a1 = (GLsizei)count; \
    packed_data->args.a2 = (GLuint *)samplers; \
    (packed_call_t *)packed_data; \
})
#define pack_glGenSymbolsEXT(datatype, storagetype, range, components) ({ \
    glGenSymbolsEXT_PACKED *packed_data = malloc(sizeof(glGenSymbolsEXT_PACKED)); \
    packed_data->index = glGenSymbolsEXT_INDEX; \
    packed_data->args.a1 = (GLenum)datatype; \
    packed_data->args.a2 = (GLenum)storagetype; \
    packed_data->args.a3 = (GLenum)range; \
    packed_data->args.a4 = (GLuint)components; \
    (packed_call_t *)packed_data; \
})
#define pack_glGenTextures(n, textures) ({ \
    glGenTextures_PACKED *packed_data = malloc(sizeof(glGenTextures_PACKED)); \
    packed_data->index = glGenTextures_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLuint *)textures; \
    (packed_call_t *)packed_data; \
})
#define pack_glGenTexturesEXT(n, textures) ({ \
    glGenTexturesEXT_PACKED *packed_data = malloc(sizeof(glGenTexturesEXT_PACKED)); \
    packed_data->index = glGenTexturesEXT_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLuint *)textures; \
    (packed_call_t *)packed_data; \
})
#define pack_glGenTransformFeedbacks(n, ids) ({ \
    glGenTransformFeedbacks_PACKED *packed_data = malloc(sizeof(glGenTransformFeedbacks_PACKED)); \
    packed_data->index = glGenTransformFeedbacks_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLuint *)ids; \
    (packed_call_t *)packed_data; \
})
#define pack_glGenTransformFeedbacksNV(n, ids) ({ \
    glGenTransformFeedbacksNV_PACKED *packed_data = malloc(sizeof(glGenTransformFeedbacksNV_PACKED)); \
    packed_data->index = glGenTransformFeedbacksNV_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLuint *)ids; \
    (packed_call_t *)packed_data; \
})
#define pack_glGenVertexArrays(n, arrays) ({ \
    glGenVertexArrays_PACKED *packed_data = malloc(sizeof(glGenVertexArrays_PACKED)); \
    packed_data->index = glGenVertexArrays_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLuint *)arrays; \
    (packed_call_t *)packed_data; \
})
#define pack_glGenVertexArraysAPPLE(n, arrays) ({ \
    glGenVertexArraysAPPLE_PACKED *packed_data = malloc(sizeof(glGenVertexArraysAPPLE_PACKED)); \
    packed_data->index = glGenVertexArraysAPPLE_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLuint *)arrays; \
    (packed_call_t *)packed_data; \
})
#define pack_glGenVertexShadersEXT(range) ({ \
    glGenVertexShadersEXT_PACKED *packed_data = malloc(sizeof(glGenVertexShadersEXT_PACKED)); \
    packed_data->index = glGenVertexShadersEXT_INDEX; \
    packed_data->args.a1 = (GLuint)range; \
    (packed_call_t *)packed_data; \
})
#define pack_glGenerateMipmap(target) ({ \
    glGenerateMipmap_PACKED *packed_data = malloc(sizeof(glGenerateMipmap_PACKED)); \
    packed_data->index = glGenerateMipmap_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    (packed_call_t *)packed_data; \
})
#define pack_glGenerateMipmapEXT(target) ({ \
    glGenerateMipmapEXT_PACKED *packed_data = malloc(sizeof(glGenerateMipmapEXT_PACKED)); \
    packed_data->index = glGenerateMipmapEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    (packed_call_t *)packed_data; \
})
#define pack_glGenerateMultiTexMipmapEXT(texunit, target) ({ \
    glGenerateMultiTexMipmapEXT_PACKED *packed_data = malloc(sizeof(glGenerateMultiTexMipmapEXT_PACKED)); \
    packed_data->index = glGenerateMultiTexMipmapEXT_INDEX; \
    packed_data->args.a1 = (GLenum)texunit; \
    packed_data->args.a2 = (GLenum)target; \
    (packed_call_t *)packed_data; \
})
#define pack_glGenerateTextureMipmapEXT(texture, target) ({ \
    glGenerateTextureMipmapEXT_PACKED *packed_data = malloc(sizeof(glGenerateTextureMipmapEXT_PACKED)); \
    packed_data->index = glGenerateTextureMipmapEXT_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    packed_data->args.a2 = (GLenum)target; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetActiveAtomicCounterBufferiv(program, bufferIndex, pname, params) ({ \
    glGetActiveAtomicCounterBufferiv_PACKED *packed_data = malloc(sizeof(glGetActiveAtomicCounterBufferiv_PACKED)); \
    packed_data->index = glGetActiveAtomicCounterBufferiv_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLuint)bufferIndex; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetActiveAttrib(program, index, bufSize, length, size, type, name) ({ \
    glGetActiveAttrib_PACKED *packed_data = malloc(sizeof(glGetActiveAttrib_PACKED)); \
    packed_data->index = glGetActiveAttrib_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLsizei)bufSize; \
    packed_data->args.a4 = (GLsizei *)length; \
    packed_data->args.a5 = (GLint *)size; \
    packed_data->args.a6 = (GLenum *)type; \
    packed_data->args.a7 = (GLchar *)name; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetActiveAttribARB(programObj, index, maxLength, length, size, type, name) ({ \
    glGetActiveAttribARB_PACKED *packed_data = malloc(sizeof(glGetActiveAttribARB_PACKED)); \
    packed_data->index = glGetActiveAttribARB_INDEX; \
    packed_data->args.a1 = (GLhandleARB)programObj; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLsizei)maxLength; \
    packed_data->args.a4 = (GLsizei *)length; \
    packed_data->args.a5 = (GLint *)size; \
    packed_data->args.a6 = (GLenum *)type; \
    packed_data->args.a7 = (GLcharARB *)name; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetActiveSubroutineName(program, shadertype, index, bufsize, length, name) ({ \
    glGetActiveSubroutineName_PACKED *packed_data = malloc(sizeof(glGetActiveSubroutineName_PACKED)); \
    packed_data->index = glGetActiveSubroutineName_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLenum)shadertype; \
    packed_data->args.a3 = (GLuint)index; \
    packed_data->args.a4 = (GLsizei)bufsize; \
    packed_data->args.a5 = (GLsizei *)length; \
    packed_data->args.a6 = (GLchar *)name; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetActiveSubroutineUniformName(program, shadertype, index, bufsize, length, name) ({ \
    glGetActiveSubroutineUniformName_PACKED *packed_data = malloc(sizeof(glGetActiveSubroutineUniformName_PACKED)); \
    packed_data->index = glGetActiveSubroutineUniformName_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLenum)shadertype; \
    packed_data->args.a3 = (GLuint)index; \
    packed_data->args.a4 = (GLsizei)bufsize; \
    packed_data->args.a5 = (GLsizei *)length; \
    packed_data->args.a6 = (GLchar *)name; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetActiveSubroutineUniformiv(program, shadertype, index, pname, values) ({ \
    glGetActiveSubroutineUniformiv_PACKED *packed_data = malloc(sizeof(glGetActiveSubroutineUniformiv_PACKED)); \
    packed_data->index = glGetActiveSubroutineUniformiv_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLenum)shadertype; \
    packed_data->args.a3 = (GLuint)index; \
    packed_data->args.a4 = (GLenum)pname; \
    packed_data->args.a5 = (GLint *)values; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetActiveUniform(program, index, bufSize, length, size, type, name) ({ \
    glGetActiveUniform_PACKED *packed_data = malloc(sizeof(glGetActiveUniform_PACKED)); \
    packed_data->index = glGetActiveUniform_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLsizei)bufSize; \
    packed_data->args.a4 = (GLsizei *)length; \
    packed_data->args.a5 = (GLint *)size; \
    packed_data->args.a6 = (GLenum *)type; \
    packed_data->args.a7 = (GLchar *)name; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetActiveUniformARB(programObj, index, maxLength, length, size, type, name) ({ \
    glGetActiveUniformARB_PACKED *packed_data = malloc(sizeof(glGetActiveUniformARB_PACKED)); \
    packed_data->index = glGetActiveUniformARB_INDEX; \
    packed_data->args.a1 = (GLhandleARB)programObj; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLsizei)maxLength; \
    packed_data->args.a4 = (GLsizei *)length; \
    packed_data->args.a5 = (GLint *)size; \
    packed_data->args.a6 = (GLenum *)type; \
    packed_data->args.a7 = (GLcharARB *)name; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName) ({ \
    glGetActiveUniformBlockName_PACKED *packed_data = malloc(sizeof(glGetActiveUniformBlockName_PACKED)); \
    packed_data->index = glGetActiveUniformBlockName_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLuint)uniformBlockIndex; \
    packed_data->args.a3 = (GLsizei)bufSize; \
    packed_data->args.a4 = (GLsizei *)length; \
    packed_data->args.a5 = (GLchar *)uniformBlockName; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params) ({ \
    glGetActiveUniformBlockiv_PACKED *packed_data = malloc(sizeof(glGetActiveUniformBlockiv_PACKED)); \
    packed_data->index = glGetActiveUniformBlockiv_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLuint)uniformBlockIndex; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetActiveUniformName(program, uniformIndex, bufSize, length, uniformName) ({ \
    glGetActiveUniformName_PACKED *packed_data = malloc(sizeof(glGetActiveUniformName_PACKED)); \
    packed_data->index = glGetActiveUniformName_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLuint)uniformIndex; \
    packed_data->args.a3 = (GLsizei)bufSize; \
    packed_data->args.a4 = (GLsizei *)length; \
    packed_data->args.a5 = (GLchar *)uniformName; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params) ({ \
    glGetActiveUniformsiv_PACKED *packed_data = malloc(sizeof(glGetActiveUniformsiv_PACKED)); \
    packed_data->index = glGetActiveUniformsiv_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLsizei)uniformCount; \
    packed_data->args.a3 = (GLuint *)uniformIndices; \
    packed_data->args.a4 = (GLenum)pname; \
    packed_data->args.a5 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetActiveVaryingNV(program, index, bufSize, length, size, type, name) ({ \
    glGetActiveVaryingNV_PACKED *packed_data = malloc(sizeof(glGetActiveVaryingNV_PACKED)); \
    packed_data->index = glGetActiveVaryingNV_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLsizei)bufSize; \
    packed_data->args.a4 = (GLsizei *)length; \
    packed_data->args.a5 = (GLsizei *)size; \
    packed_data->args.a6 = (GLenum *)type; \
    packed_data->args.a7 = (GLchar *)name; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetArrayObjectfvATI(array, pname, params) ({ \
    glGetArrayObjectfvATI_PACKED *packed_data = malloc(sizeof(glGetArrayObjectfvATI_PACKED)); \
    packed_data->index = glGetArrayObjectfvATI_INDEX; \
    packed_data->args.a1 = (GLenum)array; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetArrayObjectivATI(array, pname, params) ({ \
    glGetArrayObjectivATI_PACKED *packed_data = malloc(sizeof(glGetArrayObjectivATI_PACKED)); \
    packed_data->index = glGetArrayObjectivATI_INDEX; \
    packed_data->args.a1 = (GLenum)array; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetAttachedObjectsARB(containerObj, maxCount, count, obj) ({ \
    glGetAttachedObjectsARB_PACKED *packed_data = malloc(sizeof(glGetAttachedObjectsARB_PACKED)); \
    packed_data->index = glGetAttachedObjectsARB_INDEX; \
    packed_data->args.a1 = (GLhandleARB)containerObj; \
    packed_data->args.a2 = (GLsizei)maxCount; \
    packed_data->args.a3 = (GLsizei *)count; \
    packed_data->args.a4 = (GLhandleARB *)obj; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetAttachedShaders(program, maxCount, count, obj) ({ \
    glGetAttachedShaders_PACKED *packed_data = malloc(sizeof(glGetAttachedShaders_PACKED)); \
    packed_data->index = glGetAttachedShaders_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLsizei)maxCount; \
    packed_data->args.a3 = (GLsizei *)count; \
    packed_data->args.a4 = (GLuint *)obj; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetAttribLocation(program, name) ({ \
    glGetAttribLocation_PACKED *packed_data = malloc(sizeof(glGetAttribLocation_PACKED)); \
    packed_data->index = glGetAttribLocation_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLchar *)name; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetAttribLocationARB(programObj, name) ({ \
    glGetAttribLocationARB_PACKED *packed_data = malloc(sizeof(glGetAttribLocationARB_PACKED)); \
    packed_data->index = glGetAttribLocationARB_INDEX; \
    packed_data->args.a1 = (GLhandleARB)programObj; \
    packed_data->args.a2 = (GLcharARB *)name; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetBooleanIndexedvEXT(target, index, data) ({ \
    glGetBooleanIndexedvEXT_PACKED *packed_data = malloc(sizeof(glGetBooleanIndexedvEXT_PACKED)); \
    packed_data->index = glGetBooleanIndexedvEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLboolean *)data; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetBooleani_v(target, index, data) ({ \
    glGetBooleani_v_PACKED *packed_data = malloc(sizeof(glGetBooleani_v_PACKED)); \
    packed_data->index = glGetBooleani_v_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLboolean *)data; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetBooleanv(pname, params) ({ \
    glGetBooleanv_PACKED *packed_data = malloc(sizeof(glGetBooleanv_PACKED)); \
    packed_data->index = glGetBooleanv_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLboolean *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetBufferParameteri64v(target, pname, params) ({ \
    glGetBufferParameteri64v_PACKED *packed_data = malloc(sizeof(glGetBufferParameteri64v_PACKED)); \
    packed_data->index = glGetBufferParameteri64v_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint64 *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetBufferParameteriv(target, pname, params) ({ \
    glGetBufferParameteriv_PACKED *packed_data = malloc(sizeof(glGetBufferParameteriv_PACKED)); \
    packed_data->index = glGetBufferParameteriv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetBufferParameterivARB(target, pname, params) ({ \
    glGetBufferParameterivARB_PACKED *packed_data = malloc(sizeof(glGetBufferParameterivARB_PACKED)); \
    packed_data->index = glGetBufferParameterivARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetBufferParameterui64vNV(target, pname, params) ({ \
    glGetBufferParameterui64vNV_PACKED *packed_data = malloc(sizeof(glGetBufferParameterui64vNV_PACKED)); \
    packed_data->index = glGetBufferParameterui64vNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLuint64EXT *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetBufferPointerv(target, pname, params) ({ \
    glGetBufferPointerv_PACKED *packed_data = malloc(sizeof(glGetBufferPointerv_PACKED)); \
    packed_data->index = glGetBufferPointerv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLvoid *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetBufferPointervARB(target, pname, params) ({ \
    glGetBufferPointervARB_PACKED *packed_data = malloc(sizeof(glGetBufferPointervARB_PACKED)); \
    packed_data->index = glGetBufferPointervARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLvoid *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetBufferSubData(target, offset, size, data) ({ \
    glGetBufferSubData_PACKED *packed_data = malloc(sizeof(glGetBufferSubData_PACKED)); \
    packed_data->index = glGetBufferSubData_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLintptr)offset; \
    packed_data->args.a3 = (GLsizeiptr)size; \
    packed_data->args.a4 = (GLvoid *)data; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetBufferSubDataARB(target, offset, size, data) ({ \
    glGetBufferSubDataARB_PACKED *packed_data = malloc(sizeof(glGetBufferSubDataARB_PACKED)); \
    packed_data->index = glGetBufferSubDataARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLintptrARB)offset; \
    packed_data->args.a3 = (GLsizeiptrARB)size; \
    packed_data->args.a4 = (GLvoid *)data; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetClipPlane(plane, equation) ({ \
    glGetClipPlane_PACKED *packed_data = malloc(sizeof(glGetClipPlane_PACKED)); \
    packed_data->index = glGetClipPlane_INDEX; \
    packed_data->args.a1 = (GLenum)plane; \
    packed_data->args.a2 = (GLdouble *)equation; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetClipPlanef(plane, equation) ({ \
    glGetClipPlanef_PACKED *packed_data = malloc(sizeof(glGetClipPlanef_PACKED)); \
    packed_data->index = glGetClipPlanef_INDEX; \
    packed_data->args.a1 = (GLenum)plane; \
    packed_data->args.a2 = (GLfloat *)equation; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetClipPlanefOES(plane, equation) ({ \
    glGetClipPlanefOES_PACKED *packed_data = malloc(sizeof(glGetClipPlanefOES_PACKED)); \
    packed_data->index = glGetClipPlanefOES_INDEX; \
    packed_data->args.a1 = (GLenum)plane; \
    packed_data->args.a2 = (GLfloat *)equation; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetClipPlanex(plane, equation) ({ \
    glGetClipPlanex_PACKED *packed_data = malloc(sizeof(glGetClipPlanex_PACKED)); \
    packed_data->index = glGetClipPlanex_INDEX; \
    packed_data->args.a1 = (GLenum)plane; \
    packed_data->args.a2 = (GLfixed *)equation; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetClipPlanexOES(plane, equation) ({ \
    glGetClipPlanexOES_PACKED *packed_data = malloc(sizeof(glGetClipPlanexOES_PACKED)); \
    packed_data->index = glGetClipPlanexOES_INDEX; \
    packed_data->args.a1 = (GLenum)plane; \
    packed_data->args.a2 = (GLfixed *)equation; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetColorTable(target, format, type, table) ({ \
    glGetColorTable_PACKED *packed_data = malloc(sizeof(glGetColorTable_PACKED)); \
    packed_data->index = glGetColorTable_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)format; \
    packed_data->args.a3 = (GLenum)type; \
    packed_data->args.a4 = (GLvoid *)table; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetColorTableEXT(target, format, type, data) ({ \
    glGetColorTableEXT_PACKED *packed_data = malloc(sizeof(glGetColorTableEXT_PACKED)); \
    packed_data->index = glGetColorTableEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)format; \
    packed_data->args.a3 = (GLenum)type; \
    packed_data->args.a4 = (GLvoid *)data; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetColorTableParameterfv(target, pname, params) ({ \
    glGetColorTableParameterfv_PACKED *packed_data = malloc(sizeof(glGetColorTableParameterfv_PACKED)); \
    packed_data->index = glGetColorTableParameterfv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetColorTableParameterfvEXT(target, pname, params) ({ \
    glGetColorTableParameterfvEXT_PACKED *packed_data = malloc(sizeof(glGetColorTableParameterfvEXT_PACKED)); \
    packed_data->index = glGetColorTableParameterfvEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetColorTableParameterfvSGI(target, pname, params) ({ \
    glGetColorTableParameterfvSGI_PACKED *packed_data = malloc(sizeof(glGetColorTableParameterfvSGI_PACKED)); \
    packed_data->index = glGetColorTableParameterfvSGI_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetColorTableParameteriv(target, pname, params) ({ \
    glGetColorTableParameteriv_PACKED *packed_data = malloc(sizeof(glGetColorTableParameteriv_PACKED)); \
    packed_data->index = glGetColorTableParameteriv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetColorTableParameterivEXT(target, pname, params) ({ \
    glGetColorTableParameterivEXT_PACKED *packed_data = malloc(sizeof(glGetColorTableParameterivEXT_PACKED)); \
    packed_data->index = glGetColorTableParameterivEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetColorTableParameterivSGI(target, pname, params) ({ \
    glGetColorTableParameterivSGI_PACKED *packed_data = malloc(sizeof(glGetColorTableParameterivSGI_PACKED)); \
    packed_data->index = glGetColorTableParameterivSGI_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetColorTableSGI(target, format, type, table) ({ \
    glGetColorTableSGI_PACKED *packed_data = malloc(sizeof(glGetColorTableSGI_PACKED)); \
    packed_data->index = glGetColorTableSGI_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)format; \
    packed_data->args.a3 = (GLenum)type; \
    packed_data->args.a4 = (GLvoid *)table; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetCombinerInputParameterfvNV(stage, portion, variable, pname, params) ({ \
    glGetCombinerInputParameterfvNV_PACKED *packed_data = malloc(sizeof(glGetCombinerInputParameterfvNV_PACKED)); \
    packed_data->index = glGetCombinerInputParameterfvNV_INDEX; \
    packed_data->args.a1 = (GLenum)stage; \
    packed_data->args.a2 = (GLenum)portion; \
    packed_data->args.a3 = (GLenum)variable; \
    packed_data->args.a4 = (GLenum)pname; \
    packed_data->args.a5 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetCombinerInputParameterivNV(stage, portion, variable, pname, params) ({ \
    glGetCombinerInputParameterivNV_PACKED *packed_data = malloc(sizeof(glGetCombinerInputParameterivNV_PACKED)); \
    packed_data->index = glGetCombinerInputParameterivNV_INDEX; \
    packed_data->args.a1 = (GLenum)stage; \
    packed_data->args.a2 = (GLenum)portion; \
    packed_data->args.a3 = (GLenum)variable; \
    packed_data->args.a4 = (GLenum)pname; \
    packed_data->args.a5 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetCombinerOutputParameterfvNV(stage, portion, pname, params) ({ \
    glGetCombinerOutputParameterfvNV_PACKED *packed_data = malloc(sizeof(glGetCombinerOutputParameterfvNV_PACKED)); \
    packed_data->index = glGetCombinerOutputParameterfvNV_INDEX; \
    packed_data->args.a1 = (GLenum)stage; \
    packed_data->args.a2 = (GLenum)portion; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetCombinerOutputParameterivNV(stage, portion, pname, params) ({ \
    glGetCombinerOutputParameterivNV_PACKED *packed_data = malloc(sizeof(glGetCombinerOutputParameterivNV_PACKED)); \
    packed_data->index = glGetCombinerOutputParameterivNV_INDEX; \
    packed_data->args.a1 = (GLenum)stage; \
    packed_data->args.a2 = (GLenum)portion; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetCombinerStageParameterfvNV(stage, pname, params) ({ \
    glGetCombinerStageParameterfvNV_PACKED *packed_data = malloc(sizeof(glGetCombinerStageParameterfvNV_PACKED)); \
    packed_data->index = glGetCombinerStageParameterfvNV_INDEX; \
    packed_data->args.a1 = (GLenum)stage; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetCompressedMultiTexImageEXT(texunit, target, lod, img) ({ \
    glGetCompressedMultiTexImageEXT_PACKED *packed_data = malloc(sizeof(glGetCompressedMultiTexImageEXT_PACKED)); \
    packed_data->index = glGetCompressedMultiTexImageEXT_INDEX; \
    packed_data->args.a1 = (GLenum)texunit; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLint)lod; \
    packed_data->args.a4 = (GLvoid *)img; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetCompressedTexImage(target, level, img) ({ \
    glGetCompressedTexImage_PACKED *packed_data = malloc(sizeof(glGetCompressedTexImage_PACKED)); \
    packed_data->index = glGetCompressedTexImage_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint)level; \
    packed_data->args.a3 = (GLvoid *)img; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetCompressedTexImageARB(target, level, img) ({ \
    glGetCompressedTexImageARB_PACKED *packed_data = malloc(sizeof(glGetCompressedTexImageARB_PACKED)); \
    packed_data->index = glGetCompressedTexImageARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint)level; \
    packed_data->args.a3 = (GLvoid *)img; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetCompressedTextureImageEXT(texture, target, lod, img) ({ \
    glGetCompressedTextureImageEXT_PACKED *packed_data = malloc(sizeof(glGetCompressedTextureImageEXT_PACKED)); \
    packed_data->index = glGetCompressedTextureImageEXT_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLint)lod; \
    packed_data->args.a4 = (GLvoid *)img; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetConvolutionFilter(target, format, type, image) ({ \
    glGetConvolutionFilter_PACKED *packed_data = malloc(sizeof(glGetConvolutionFilter_PACKED)); \
    packed_data->index = glGetConvolutionFilter_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)format; \
    packed_data->args.a3 = (GLenum)type; \
    packed_data->args.a4 = (GLvoid *)image; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetConvolutionFilterEXT(target, format, type, image) ({ \
    glGetConvolutionFilterEXT_PACKED *packed_data = malloc(sizeof(glGetConvolutionFilterEXT_PACKED)); \
    packed_data->index = glGetConvolutionFilterEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)format; \
    packed_data->args.a3 = (GLenum)type; \
    packed_data->args.a4 = (GLvoid *)image; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetConvolutionParameterfv(target, pname, params) ({ \
    glGetConvolutionParameterfv_PACKED *packed_data = malloc(sizeof(glGetConvolutionParameterfv_PACKED)); \
    packed_data->index = glGetConvolutionParameterfv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetConvolutionParameterfvEXT(target, pname, params) ({ \
    glGetConvolutionParameterfvEXT_PACKED *packed_data = malloc(sizeof(glGetConvolutionParameterfvEXT_PACKED)); \
    packed_data->index = glGetConvolutionParameterfvEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetConvolutionParameteriv(target, pname, params) ({ \
    glGetConvolutionParameteriv_PACKED *packed_data = malloc(sizeof(glGetConvolutionParameteriv_PACKED)); \
    packed_data->index = glGetConvolutionParameteriv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetConvolutionParameterivEXT(target, pname, params) ({ \
    glGetConvolutionParameterivEXT_PACKED *packed_data = malloc(sizeof(glGetConvolutionParameterivEXT_PACKED)); \
    packed_data->index = glGetConvolutionParameterivEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetConvolutionParameterxvOES(target, pname, params) ({ \
    glGetConvolutionParameterxvOES_PACKED *packed_data = malloc(sizeof(glGetConvolutionParameterxvOES_PACKED)); \
    packed_data->index = glGetConvolutionParameterxvOES_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfixed *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetDebugMessageLog(count, bufsize, sources, types, ids, severities, lengths, messageLog) ({ \
    glGetDebugMessageLog_PACKED *packed_data = malloc(sizeof(glGetDebugMessageLog_PACKED)); \
    packed_data->index = glGetDebugMessageLog_INDEX; \
    packed_data->args.a1 = (GLuint)count; \
    packed_data->args.a2 = (GLsizei)bufsize; \
    packed_data->args.a3 = (GLenum *)sources; \
    packed_data->args.a4 = (GLenum *)types; \
    packed_data->args.a5 = (GLuint *)ids; \
    packed_data->args.a6 = (GLenum *)severities; \
    packed_data->args.a7 = (GLsizei *)lengths; \
    packed_data->args.a8 = (GLchar *)messageLog; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetDebugMessageLogAMD(count, bufsize, categories, severities, ids, lengths, message) ({ \
    glGetDebugMessageLogAMD_PACKED *packed_data = malloc(sizeof(glGetDebugMessageLogAMD_PACKED)); \
    packed_data->index = glGetDebugMessageLogAMD_INDEX; \
    packed_data->args.a1 = (GLuint)count; \
    packed_data->args.a2 = (GLsizei)bufsize; \
    packed_data->args.a3 = (GLenum *)categories; \
    packed_data->args.a4 = (GLuint *)severities; \
    packed_data->args.a5 = (GLuint *)ids; \
    packed_data->args.a6 = (GLsizei *)lengths; \
    packed_data->args.a7 = (GLchar *)message; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetDebugMessageLogARB(count, bufsize, sources, types, ids, severities, lengths, messageLog) ({ \
    glGetDebugMessageLogARB_PACKED *packed_data = malloc(sizeof(glGetDebugMessageLogARB_PACKED)); \
    packed_data->index = glGetDebugMessageLogARB_INDEX; \
    packed_data->args.a1 = (GLuint)count; \
    packed_data->args.a2 = (GLsizei)bufsize; \
    packed_data->args.a3 = (GLenum *)sources; \
    packed_data->args.a4 = (GLenum *)types; \
    packed_data->args.a5 = (GLuint *)ids; \
    packed_data->args.a6 = (GLenum *)severities; \
    packed_data->args.a7 = (GLsizei *)lengths; \
    packed_data->args.a8 = (GLchar *)messageLog; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetDetailTexFuncSGIS(target, points) ({ \
    glGetDetailTexFuncSGIS_PACKED *packed_data = malloc(sizeof(glGetDetailTexFuncSGIS_PACKED)); \
    packed_data->index = glGetDetailTexFuncSGIS_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLfloat *)points; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetDoubleIndexedvEXT(target, index, data) ({ \
    glGetDoubleIndexedvEXT_PACKED *packed_data = malloc(sizeof(glGetDoubleIndexedvEXT_PACKED)); \
    packed_data->index = glGetDoubleIndexedvEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLdouble *)data; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetDoublei_v(target, index, data) ({ \
    glGetDoublei_v_PACKED *packed_data = malloc(sizeof(glGetDoublei_v_PACKED)); \
    packed_data->index = glGetDoublei_v_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLdouble *)data; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetDoublei_vEXT(target, index, data) ({ \
    glGetDoublei_vEXT_PACKED *packed_data = malloc(sizeof(glGetDoublei_vEXT_PACKED)); \
    packed_data->index = glGetDoublei_vEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLdouble *)data; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetDoublev(pname, params) ({ \
    glGetDoublev_PACKED *packed_data = malloc(sizeof(glGetDoublev_PACKED)); \
    packed_data->index = glGetDoublev_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLdouble *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetError() ({ \
    glGetError_PACKED *packed_data = malloc(sizeof(glGetError_PACKED)); \
    packed_data->index = glGetError_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetFenceivNV(fence, pname, params) ({ \
    glGetFenceivNV_PACKED *packed_data = malloc(sizeof(glGetFenceivNV_PACKED)); \
    packed_data->index = glGetFenceivNV_INDEX; \
    packed_data->args.a1 = (GLuint)fence; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetFinalCombinerInputParameterfvNV(variable, pname, params) ({ \
    glGetFinalCombinerInputParameterfvNV_PACKED *packed_data = malloc(sizeof(glGetFinalCombinerInputParameterfvNV_PACKED)); \
    packed_data->index = glGetFinalCombinerInputParameterfvNV_INDEX; \
    packed_data->args.a1 = (GLenum)variable; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetFinalCombinerInputParameterivNV(variable, pname, params) ({ \
    glGetFinalCombinerInputParameterivNV_PACKED *packed_data = malloc(sizeof(glGetFinalCombinerInputParameterivNV_PACKED)); \
    packed_data->index = glGetFinalCombinerInputParameterivNV_INDEX; \
    packed_data->args.a1 = (GLenum)variable; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetFixedv(pname, params) ({ \
    glGetFixedv_PACKED *packed_data = malloc(sizeof(glGetFixedv_PACKED)); \
    packed_data->index = glGetFixedv_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLfixed *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetFixedvOES(pname, params) ({ \
    glGetFixedvOES_PACKED *packed_data = malloc(sizeof(glGetFixedvOES_PACKED)); \
    packed_data->index = glGetFixedvOES_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLfixed *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetFloatIndexedvEXT(target, index, data) ({ \
    glGetFloatIndexedvEXT_PACKED *packed_data = malloc(sizeof(glGetFloatIndexedvEXT_PACKED)); \
    packed_data->index = glGetFloatIndexedvEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLfloat *)data; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetFloati_v(target, index, data) ({ \
    glGetFloati_v_PACKED *packed_data = malloc(sizeof(glGetFloati_v_PACKED)); \
    packed_data->index = glGetFloati_v_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLfloat *)data; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetFloati_vEXT(target, index, data) ({ \
    glGetFloati_vEXT_PACKED *packed_data = malloc(sizeof(glGetFloati_vEXT_PACKED)); \
    packed_data->index = glGetFloati_vEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLfloat *)data; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetFloatv(pname, params) ({ \
    glGetFloatv_PACKED *packed_data = malloc(sizeof(glGetFloatv_PACKED)); \
    packed_data->index = glGetFloatv_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetFogFuncSGIS(points) ({ \
    glGetFogFuncSGIS_PACKED *packed_data = malloc(sizeof(glGetFogFuncSGIS_PACKED)); \
    packed_data->index = glGetFogFuncSGIS_INDEX; \
    packed_data->args.a1 = (GLfloat *)points; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetFragDataIndex(program, name) ({ \
    glGetFragDataIndex_PACKED *packed_data = malloc(sizeof(glGetFragDataIndex_PACKED)); \
    packed_data->index = glGetFragDataIndex_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLchar *)name; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetFragDataLocation(program, name) ({ \
    glGetFragDataLocation_PACKED *packed_data = malloc(sizeof(glGetFragDataLocation_PACKED)); \
    packed_data->index = glGetFragDataLocation_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLchar *)name; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetFragDataLocationEXT(program, name) ({ \
    glGetFragDataLocationEXT_PACKED *packed_data = malloc(sizeof(glGetFragDataLocationEXT_PACKED)); \
    packed_data->index = glGetFragDataLocationEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLchar *)name; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetFragmentLightfvSGIX(light, pname, params) ({ \
    glGetFragmentLightfvSGIX_PACKED *packed_data = malloc(sizeof(glGetFragmentLightfvSGIX_PACKED)); \
    packed_data->index = glGetFragmentLightfvSGIX_INDEX; \
    packed_data->args.a1 = (GLenum)light; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetFragmentLightivSGIX(light, pname, params) ({ \
    glGetFragmentLightivSGIX_PACKED *packed_data = malloc(sizeof(glGetFragmentLightivSGIX_PACKED)); \
    packed_data->index = glGetFragmentLightivSGIX_INDEX; \
    packed_data->args.a1 = (GLenum)light; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetFragmentMaterialfvSGIX(face, pname, params) ({ \
    glGetFragmentMaterialfvSGIX_PACKED *packed_data = malloc(sizeof(glGetFragmentMaterialfvSGIX_PACKED)); \
    packed_data->index = glGetFragmentMaterialfvSGIX_INDEX; \
    packed_data->args.a1 = (GLenum)face; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetFragmentMaterialivSGIX(face, pname, params) ({ \
    glGetFragmentMaterialivSGIX_PACKED *packed_data = malloc(sizeof(glGetFragmentMaterialivSGIX_PACKED)); \
    packed_data->index = glGetFragmentMaterialivSGIX_INDEX; \
    packed_data->args.a1 = (GLenum)face; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) ({ \
    glGetFramebufferAttachmentParameteriv_PACKED *packed_data = malloc(sizeof(glGetFramebufferAttachmentParameteriv_PACKED)); \
    packed_data->index = glGetFramebufferAttachmentParameteriv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)attachment; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetFramebufferAttachmentParameterivEXT(target, attachment, pname, params) ({ \
    glGetFramebufferAttachmentParameterivEXT_PACKED *packed_data = malloc(sizeof(glGetFramebufferAttachmentParameterivEXT_PACKED)); \
    packed_data->index = glGetFramebufferAttachmentParameterivEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)attachment; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetFramebufferParameteriv(target, pname, params) ({ \
    glGetFramebufferParameteriv_PACKED *packed_data = malloc(sizeof(glGetFramebufferParameteriv_PACKED)); \
    packed_data->index = glGetFramebufferParameteriv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetFramebufferParameterivEXT(framebuffer, pname, params) ({ \
    glGetFramebufferParameterivEXT_PACKED *packed_data = malloc(sizeof(glGetFramebufferParameterivEXT_PACKED)); \
    packed_data->index = glGetFramebufferParameterivEXT_INDEX; \
    packed_data->args.a1 = (GLuint)framebuffer; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetGraphicsResetStatusARB() ({ \
    glGetGraphicsResetStatusARB_PACKED *packed_data = malloc(sizeof(glGetGraphicsResetStatusARB_PACKED)); \
    packed_data->index = glGetGraphicsResetStatusARB_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetHandleARB(pname) ({ \
    glGetHandleARB_PACKED *packed_data = malloc(sizeof(glGetHandleARB_PACKED)); \
    packed_data->index = glGetHandleARB_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetHistogram(target, reset, format, type, values) ({ \
    glGetHistogram_PACKED *packed_data = malloc(sizeof(glGetHistogram_PACKED)); \
    packed_data->index = glGetHistogram_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLboolean)reset; \
    packed_data->args.a3 = (GLenum)format; \
    packed_data->args.a4 = (GLenum)type; \
    packed_data->args.a5 = (GLvoid *)values; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetHistogramEXT(target, reset, format, type, values) ({ \
    glGetHistogramEXT_PACKED *packed_data = malloc(sizeof(glGetHistogramEXT_PACKED)); \
    packed_data->index = glGetHistogramEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLboolean)reset; \
    packed_data->args.a3 = (GLenum)format; \
    packed_data->args.a4 = (GLenum)type; \
    packed_data->args.a5 = (GLvoid *)values; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetHistogramParameterfv(target, pname, params) ({ \
    glGetHistogramParameterfv_PACKED *packed_data = malloc(sizeof(glGetHistogramParameterfv_PACKED)); \
    packed_data->index = glGetHistogramParameterfv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetHistogramParameterfvEXT(target, pname, params) ({ \
    glGetHistogramParameterfvEXT_PACKED *packed_data = malloc(sizeof(glGetHistogramParameterfvEXT_PACKED)); \
    packed_data->index = glGetHistogramParameterfvEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetHistogramParameteriv(target, pname, params) ({ \
    glGetHistogramParameteriv_PACKED *packed_data = malloc(sizeof(glGetHistogramParameteriv_PACKED)); \
    packed_data->index = glGetHistogramParameteriv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetHistogramParameterivEXT(target, pname, params) ({ \
    glGetHistogramParameterivEXT_PACKED *packed_data = malloc(sizeof(glGetHistogramParameterivEXT_PACKED)); \
    packed_data->index = glGetHistogramParameterivEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetHistogramParameterxvOES(target, pname, params) ({ \
    glGetHistogramParameterxvOES_PACKED *packed_data = malloc(sizeof(glGetHistogramParameterxvOES_PACKED)); \
    packed_data->index = glGetHistogramParameterxvOES_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfixed *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetImageHandleNV(texture, level, layered, layer, format) ({ \
    glGetImageHandleNV_PACKED *packed_data = malloc(sizeof(glGetImageHandleNV_PACKED)); \
    packed_data->index = glGetImageHandleNV_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    packed_data->args.a2 = (GLint)level; \
    packed_data->args.a3 = (GLboolean)layered; \
    packed_data->args.a4 = (GLint)layer; \
    packed_data->args.a5 = (GLenum)format; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetImageTransformParameterfvHP(target, pname, params) ({ \
    glGetImageTransformParameterfvHP_PACKED *packed_data = malloc(sizeof(glGetImageTransformParameterfvHP_PACKED)); \
    packed_data->index = glGetImageTransformParameterfvHP_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetImageTransformParameterivHP(target, pname, params) ({ \
    glGetImageTransformParameterivHP_PACKED *packed_data = malloc(sizeof(glGetImageTransformParameterivHP_PACKED)); \
    packed_data->index = glGetImageTransformParameterivHP_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetInfoLogARB(obj, maxLength, length, infoLog) ({ \
    glGetInfoLogARB_PACKED *packed_data = malloc(sizeof(glGetInfoLogARB_PACKED)); \
    packed_data->index = glGetInfoLogARB_INDEX; \
    packed_data->args.a1 = (GLhandleARB)obj; \
    packed_data->args.a2 = (GLsizei)maxLength; \
    packed_data->args.a3 = (GLsizei *)length; \
    packed_data->args.a4 = (GLcharARB *)infoLog; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetInstrumentsSGIX() ({ \
    glGetInstrumentsSGIX_PACKED *packed_data = malloc(sizeof(glGetInstrumentsSGIX_PACKED)); \
    packed_data->index = glGetInstrumentsSGIX_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetInteger64i_v(target, index, data) ({ \
    glGetInteger64i_v_PACKED *packed_data = malloc(sizeof(glGetInteger64i_v_PACKED)); \
    packed_data->index = glGetInteger64i_v_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLint64 *)data; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetInteger64v(pname, params) ({ \
    glGetInteger64v_PACKED *packed_data = malloc(sizeof(glGetInteger64v_PACKED)); \
    packed_data->index = glGetInteger64v_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLint64 *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetIntegerIndexedvEXT(target, index, data) ({ \
    glGetIntegerIndexedvEXT_PACKED *packed_data = malloc(sizeof(glGetIntegerIndexedvEXT_PACKED)); \
    packed_data->index = glGetIntegerIndexedvEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLint *)data; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetIntegeri_v(target, index, data) ({ \
    glGetIntegeri_v_PACKED *packed_data = malloc(sizeof(glGetIntegeri_v_PACKED)); \
    packed_data->index = glGetIntegeri_v_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLint *)data; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetIntegerui64i_vNV(value, index, result) ({ \
    glGetIntegerui64i_vNV_PACKED *packed_data = malloc(sizeof(glGetIntegerui64i_vNV_PACKED)); \
    packed_data->index = glGetIntegerui64i_vNV_INDEX; \
    packed_data->args.a1 = (GLenum)value; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLuint64EXT *)result; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetIntegerui64vNV(value, result) ({ \
    glGetIntegerui64vNV_PACKED *packed_data = malloc(sizeof(glGetIntegerui64vNV_PACKED)); \
    packed_data->index = glGetIntegerui64vNV_INDEX; \
    packed_data->args.a1 = (GLenum)value; \
    packed_data->args.a2 = (GLuint64EXT *)result; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetIntegerv(pname, params) ({ \
    glGetIntegerv_PACKED *packed_data = malloc(sizeof(glGetIntegerv_PACKED)); \
    packed_data->index = glGetIntegerv_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetInternalformati64v(target, internalformat, pname, bufSize, params) ({ \
    glGetInternalformati64v_PACKED *packed_data = malloc(sizeof(glGetInternalformati64v_PACKED)); \
    packed_data->index = glGetInternalformati64v_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)internalformat; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLsizei)bufSize; \
    packed_data->args.a5 = (GLint64 *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetInternalformativ(target, internalformat, pname, bufSize, params) ({ \
    glGetInternalformativ_PACKED *packed_data = malloc(sizeof(glGetInternalformativ_PACKED)); \
    packed_data->index = glGetInternalformativ_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)internalformat; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLsizei)bufSize; \
    packed_data->args.a5 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetInvariantBooleanvEXT(id, value, data) ({ \
    glGetInvariantBooleanvEXT_PACKED *packed_data = malloc(sizeof(glGetInvariantBooleanvEXT_PACKED)); \
    packed_data->index = glGetInvariantBooleanvEXT_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    packed_data->args.a2 = (GLenum)value; \
    packed_data->args.a3 = (GLboolean *)data; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetInvariantFloatvEXT(id, value, data) ({ \
    glGetInvariantFloatvEXT_PACKED *packed_data = malloc(sizeof(glGetInvariantFloatvEXT_PACKED)); \
    packed_data->index = glGetInvariantFloatvEXT_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    packed_data->args.a2 = (GLenum)value; \
    packed_data->args.a3 = (GLfloat *)data; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetInvariantIntegervEXT(id, value, data) ({ \
    glGetInvariantIntegervEXT_PACKED *packed_data = malloc(sizeof(glGetInvariantIntegervEXT_PACKED)); \
    packed_data->index = glGetInvariantIntegervEXT_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    packed_data->args.a2 = (GLenum)value; \
    packed_data->args.a3 = (GLint *)data; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetLightfv(light, pname, params) ({ \
    glGetLightfv_PACKED *packed_data = malloc(sizeof(glGetLightfv_PACKED)); \
    packed_data->index = glGetLightfv_INDEX; \
    packed_data->args.a1 = (GLenum)light; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetLightiv(light, pname, params) ({ \
    glGetLightiv_PACKED *packed_data = malloc(sizeof(glGetLightiv_PACKED)); \
    packed_data->index = glGetLightiv_INDEX; \
    packed_data->args.a1 = (GLenum)light; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetLightxOES(light, pname, params) ({ \
    glGetLightxOES_PACKED *packed_data = malloc(sizeof(glGetLightxOES_PACKED)); \
    packed_data->index = glGetLightxOES_INDEX; \
    packed_data->args.a1 = (GLenum)light; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfixed *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetLightxv(light, pname, params) ({ \
    glGetLightxv_PACKED *packed_data = malloc(sizeof(glGetLightxv_PACKED)); \
    packed_data->index = glGetLightxv_INDEX; \
    packed_data->args.a1 = (GLenum)light; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfixed *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetListParameterfvSGIX(list, pname, params) ({ \
    glGetListParameterfvSGIX_PACKED *packed_data = malloc(sizeof(glGetListParameterfvSGIX_PACKED)); \
    packed_data->index = glGetListParameterfvSGIX_INDEX; \
    packed_data->args.a1 = (GLuint)list; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetListParameterivSGIX(list, pname, params) ({ \
    glGetListParameterivSGIX_PACKED *packed_data = malloc(sizeof(glGetListParameterivSGIX_PACKED)); \
    packed_data->index = glGetListParameterivSGIX_INDEX; \
    packed_data->args.a1 = (GLuint)list; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetLocalConstantBooleanvEXT(id, value, data) ({ \
    glGetLocalConstantBooleanvEXT_PACKED *packed_data = malloc(sizeof(glGetLocalConstantBooleanvEXT_PACKED)); \
    packed_data->index = glGetLocalConstantBooleanvEXT_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    packed_data->args.a2 = (GLenum)value; \
    packed_data->args.a3 = (GLboolean *)data; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetLocalConstantFloatvEXT(id, value, data) ({ \
    glGetLocalConstantFloatvEXT_PACKED *packed_data = malloc(sizeof(glGetLocalConstantFloatvEXT_PACKED)); \
    packed_data->index = glGetLocalConstantFloatvEXT_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    packed_data->args.a2 = (GLenum)value; \
    packed_data->args.a3 = (GLfloat *)data; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetLocalConstantIntegervEXT(id, value, data) ({ \
    glGetLocalConstantIntegervEXT_PACKED *packed_data = malloc(sizeof(glGetLocalConstantIntegervEXT_PACKED)); \
    packed_data->index = glGetLocalConstantIntegervEXT_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    packed_data->args.a2 = (GLenum)value; \
    packed_data->args.a3 = (GLint *)data; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetMapAttribParameterfvNV(target, index, pname, params) ({ \
    glGetMapAttribParameterfvNV_PACKED *packed_data = malloc(sizeof(glGetMapAttribParameterfvNV_PACKED)); \
    packed_data->index = glGetMapAttribParameterfvNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetMapAttribParameterivNV(target, index, pname, params) ({ \
    glGetMapAttribParameterivNV_PACKED *packed_data = malloc(sizeof(glGetMapAttribParameterivNV_PACKED)); \
    packed_data->index = glGetMapAttribParameterivNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetMapControlPointsNV(target, index, type, ustride, vstride, packed, points) ({ \
    glGetMapControlPointsNV_PACKED *packed_data = malloc(sizeof(glGetMapControlPointsNV_PACKED)); \
    packed_data->index = glGetMapControlPointsNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLenum)type; \
    packed_data->args.a4 = (GLsizei)ustride; \
    packed_data->args.a5 = (GLsizei)vstride; \
    packed_data->args.a6 = (GLboolean)packed; \
    packed_data->args.a7 = (GLvoid *)points; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetMapParameterfvNV(target, pname, params) ({ \
    glGetMapParameterfvNV_PACKED *packed_data = malloc(sizeof(glGetMapParameterfvNV_PACKED)); \
    packed_data->index = glGetMapParameterfvNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetMapParameterivNV(target, pname, params) ({ \
    glGetMapParameterivNV_PACKED *packed_data = malloc(sizeof(glGetMapParameterivNV_PACKED)); \
    packed_data->index = glGetMapParameterivNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetMapdv(target, query, v) ({ \
    glGetMapdv_PACKED *packed_data = malloc(sizeof(glGetMapdv_PACKED)); \
    packed_data->index = glGetMapdv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)query; \
    packed_data->args.a3 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetMapfv(target, query, v) ({ \
    glGetMapfv_PACKED *packed_data = malloc(sizeof(glGetMapfv_PACKED)); \
    packed_data->index = glGetMapfv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)query; \
    packed_data->args.a3 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetMapiv(target, query, v) ({ \
    glGetMapiv_PACKED *packed_data = malloc(sizeof(glGetMapiv_PACKED)); \
    packed_data->index = glGetMapiv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)query; \
    packed_data->args.a3 = (GLint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetMapxvOES(target, query, v) ({ \
    glGetMapxvOES_PACKED *packed_data = malloc(sizeof(glGetMapxvOES_PACKED)); \
    packed_data->index = glGetMapxvOES_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)query; \
    packed_data->args.a3 = (GLfixed *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetMaterialfv(face, pname, params) ({ \
    glGetMaterialfv_PACKED *packed_data = malloc(sizeof(glGetMaterialfv_PACKED)); \
    packed_data->index = glGetMaterialfv_INDEX; \
    packed_data->args.a1 = (GLenum)face; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetMaterialiv(face, pname, params) ({ \
    glGetMaterialiv_PACKED *packed_data = malloc(sizeof(glGetMaterialiv_PACKED)); \
    packed_data->index = glGetMaterialiv_INDEX; \
    packed_data->args.a1 = (GLenum)face; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetMaterialxOES(face, pname, param) ({ \
    glGetMaterialxOES_PACKED *packed_data = malloc(sizeof(glGetMaterialxOES_PACKED)); \
    packed_data->index = glGetMaterialxOES_INDEX; \
    packed_data->args.a1 = (GLenum)face; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfixed)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetMaterialxv(face, pname, params) ({ \
    glGetMaterialxv_PACKED *packed_data = malloc(sizeof(glGetMaterialxv_PACKED)); \
    packed_data->index = glGetMaterialxv_INDEX; \
    packed_data->args.a1 = (GLenum)face; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfixed *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetMinmax(target, reset, format, type, values) ({ \
    glGetMinmax_PACKED *packed_data = malloc(sizeof(glGetMinmax_PACKED)); \
    packed_data->index = glGetMinmax_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLboolean)reset; \
    packed_data->args.a3 = (GLenum)format; \
    packed_data->args.a4 = (GLenum)type; \
    packed_data->args.a5 = (GLvoid *)values; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetMinmaxEXT(target, reset, format, type, values) ({ \
    glGetMinmaxEXT_PACKED *packed_data = malloc(sizeof(glGetMinmaxEXT_PACKED)); \
    packed_data->index = glGetMinmaxEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLboolean)reset; \
    packed_data->args.a3 = (GLenum)format; \
    packed_data->args.a4 = (GLenum)type; \
    packed_data->args.a5 = (GLvoid *)values; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetMinmaxParameterfv(target, pname, params) ({ \
    glGetMinmaxParameterfv_PACKED *packed_data = malloc(sizeof(glGetMinmaxParameterfv_PACKED)); \
    packed_data->index = glGetMinmaxParameterfv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetMinmaxParameterfvEXT(target, pname, params) ({ \
    glGetMinmaxParameterfvEXT_PACKED *packed_data = malloc(sizeof(glGetMinmaxParameterfvEXT_PACKED)); \
    packed_data->index = glGetMinmaxParameterfvEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetMinmaxParameteriv(target, pname, params) ({ \
    glGetMinmaxParameteriv_PACKED *packed_data = malloc(sizeof(glGetMinmaxParameteriv_PACKED)); \
    packed_data->index = glGetMinmaxParameteriv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetMinmaxParameterivEXT(target, pname, params) ({ \
    glGetMinmaxParameterivEXT_PACKED *packed_data = malloc(sizeof(glGetMinmaxParameterivEXT_PACKED)); \
    packed_data->index = glGetMinmaxParameterivEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetMultiTexEnvfvEXT(texunit, target, pname, params) ({ \
    glGetMultiTexEnvfvEXT_PACKED *packed_data = malloc(sizeof(glGetMultiTexEnvfvEXT_PACKED)); \
    packed_data->index = glGetMultiTexEnvfvEXT_INDEX; \
    packed_data->args.a1 = (GLenum)texunit; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetMultiTexEnvivEXT(texunit, target, pname, params) ({ \
    glGetMultiTexEnvivEXT_PACKED *packed_data = malloc(sizeof(glGetMultiTexEnvivEXT_PACKED)); \
    packed_data->index = glGetMultiTexEnvivEXT_INDEX; \
    packed_data->args.a1 = (GLenum)texunit; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetMultiTexGendvEXT(texunit, coord, pname, params) ({ \
    glGetMultiTexGendvEXT_PACKED *packed_data = malloc(sizeof(glGetMultiTexGendvEXT_PACKED)); \
    packed_data->index = glGetMultiTexGendvEXT_INDEX; \
    packed_data->args.a1 = (GLenum)texunit; \
    packed_data->args.a2 = (GLenum)coord; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLdouble *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetMultiTexGenfvEXT(texunit, coord, pname, params) ({ \
    glGetMultiTexGenfvEXT_PACKED *packed_data = malloc(sizeof(glGetMultiTexGenfvEXT_PACKED)); \
    packed_data->index = glGetMultiTexGenfvEXT_INDEX; \
    packed_data->args.a1 = (GLenum)texunit; \
    packed_data->args.a2 = (GLenum)coord; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetMultiTexGenivEXT(texunit, coord, pname, params) ({ \
    glGetMultiTexGenivEXT_PACKED *packed_data = malloc(sizeof(glGetMultiTexGenivEXT_PACKED)); \
    packed_data->index = glGetMultiTexGenivEXT_INDEX; \
    packed_data->args.a1 = (GLenum)texunit; \
    packed_data->args.a2 = (GLenum)coord; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetMultiTexImageEXT(texunit, target, level, format, type, pixels) ({ \
    glGetMultiTexImageEXT_PACKED *packed_data = malloc(sizeof(glGetMultiTexImageEXT_PACKED)); \
    packed_data->index = glGetMultiTexImageEXT_INDEX; \
    packed_data->args.a1 = (GLenum)texunit; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLint)level; \
    packed_data->args.a4 = (GLenum)format; \
    packed_data->args.a5 = (GLenum)type; \
    packed_data->args.a6 = (GLvoid *)pixels; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetMultiTexLevelParameterfvEXT(texunit, target, level, pname, params) ({ \
    glGetMultiTexLevelParameterfvEXT_PACKED *packed_data = malloc(sizeof(glGetMultiTexLevelParameterfvEXT_PACKED)); \
    packed_data->index = glGetMultiTexLevelParameterfvEXT_INDEX; \
    packed_data->args.a1 = (GLenum)texunit; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLint)level; \
    packed_data->args.a4 = (GLenum)pname; \
    packed_data->args.a5 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetMultiTexLevelParameterivEXT(texunit, target, level, pname, params) ({ \
    glGetMultiTexLevelParameterivEXT_PACKED *packed_data = malloc(sizeof(glGetMultiTexLevelParameterivEXT_PACKED)); \
    packed_data->index = glGetMultiTexLevelParameterivEXT_INDEX; \
    packed_data->args.a1 = (GLenum)texunit; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLint)level; \
    packed_data->args.a4 = (GLenum)pname; \
    packed_data->args.a5 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetMultiTexParameterIivEXT(texunit, target, pname, params) ({ \
    glGetMultiTexParameterIivEXT_PACKED *packed_data = malloc(sizeof(glGetMultiTexParameterIivEXT_PACKED)); \
    packed_data->index = glGetMultiTexParameterIivEXT_INDEX; \
    packed_data->args.a1 = (GLenum)texunit; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetMultiTexParameterIuivEXT(texunit, target, pname, params) ({ \
    glGetMultiTexParameterIuivEXT_PACKED *packed_data = malloc(sizeof(glGetMultiTexParameterIuivEXT_PACKED)); \
    packed_data->index = glGetMultiTexParameterIuivEXT_INDEX; \
    packed_data->args.a1 = (GLenum)texunit; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLuint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetMultiTexParameterfvEXT(texunit, target, pname, params) ({ \
    glGetMultiTexParameterfvEXT_PACKED *packed_data = malloc(sizeof(glGetMultiTexParameterfvEXT_PACKED)); \
    packed_data->index = glGetMultiTexParameterfvEXT_INDEX; \
    packed_data->args.a1 = (GLenum)texunit; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetMultiTexParameterivEXT(texunit, target, pname, params) ({ \
    glGetMultiTexParameterivEXT_PACKED *packed_data = malloc(sizeof(glGetMultiTexParameterivEXT_PACKED)); \
    packed_data->index = glGetMultiTexParameterivEXT_INDEX; \
    packed_data->args.a1 = (GLenum)texunit; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetMultisamplefv(pname, index, val) ({ \
    glGetMultisamplefv_PACKED *packed_data = malloc(sizeof(glGetMultisamplefv_PACKED)); \
    packed_data->index = glGetMultisamplefv_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLfloat *)val; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetMultisamplefvNV(pname, index, val) ({ \
    glGetMultisamplefvNV_PACKED *packed_data = malloc(sizeof(glGetMultisamplefvNV_PACKED)); \
    packed_data->index = glGetMultisamplefvNV_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLfloat *)val; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetNamedBufferParameterivEXT(buffer, pname, params) ({ \
    glGetNamedBufferParameterivEXT_PACKED *packed_data = malloc(sizeof(glGetNamedBufferParameterivEXT_PACKED)); \
    packed_data->index = glGetNamedBufferParameterivEXT_INDEX; \
    packed_data->args.a1 = (GLuint)buffer; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetNamedBufferParameterui64vNV(buffer, pname, params) ({ \
    glGetNamedBufferParameterui64vNV_PACKED *packed_data = malloc(sizeof(glGetNamedBufferParameterui64vNV_PACKED)); \
    packed_data->index = glGetNamedBufferParameterui64vNV_INDEX; \
    packed_data->args.a1 = (GLuint)buffer; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLuint64EXT *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetNamedBufferPointervEXT(buffer, pname, params) ({ \
    glGetNamedBufferPointervEXT_PACKED *packed_data = malloc(sizeof(glGetNamedBufferPointervEXT_PACKED)); \
    packed_data->index = glGetNamedBufferPointervEXT_INDEX; \
    packed_data->args.a1 = (GLuint)buffer; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLvoid *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetNamedBufferSubDataEXT(buffer, offset, size, data) ({ \
    glGetNamedBufferSubDataEXT_PACKED *packed_data = malloc(sizeof(glGetNamedBufferSubDataEXT_PACKED)); \
    packed_data->index = glGetNamedBufferSubDataEXT_INDEX; \
    packed_data->args.a1 = (GLuint)buffer; \
    packed_data->args.a2 = (GLintptr)offset; \
    packed_data->args.a3 = (GLsizeiptr)size; \
    packed_data->args.a4 = (GLvoid *)data; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetNamedFramebufferAttachmentParameterivEXT(framebuffer, attachment, pname, params) ({ \
    glGetNamedFramebufferAttachmentParameterivEXT_PACKED *packed_data = malloc(sizeof(glGetNamedFramebufferAttachmentParameterivEXT_PACKED)); \
    packed_data->index = glGetNamedFramebufferAttachmentParameterivEXT_INDEX; \
    packed_data->args.a1 = (GLuint)framebuffer; \
    packed_data->args.a2 = (GLenum)attachment; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetNamedFramebufferParameterivEXT(framebuffer, pname, params) ({ \
    glGetNamedFramebufferParameterivEXT_PACKED *packed_data = malloc(sizeof(glGetNamedFramebufferParameterivEXT_PACKED)); \
    packed_data->index = glGetNamedFramebufferParameterivEXT_INDEX; \
    packed_data->args.a1 = (GLuint)framebuffer; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetNamedProgramLocalParameterIivEXT(program, target, index, params) ({ \
    glGetNamedProgramLocalParameterIivEXT_PACKED *packed_data = malloc(sizeof(glGetNamedProgramLocalParameterIivEXT_PACKED)); \
    packed_data->index = glGetNamedProgramLocalParameterIivEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLuint)index; \
    packed_data->args.a4 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetNamedProgramLocalParameterIuivEXT(program, target, index, params) ({ \
    glGetNamedProgramLocalParameterIuivEXT_PACKED *packed_data = malloc(sizeof(glGetNamedProgramLocalParameterIuivEXT_PACKED)); \
    packed_data->index = glGetNamedProgramLocalParameterIuivEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLuint)index; \
    packed_data->args.a4 = (GLuint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetNamedProgramLocalParameterdvEXT(program, target, index, params) ({ \
    glGetNamedProgramLocalParameterdvEXT_PACKED *packed_data = malloc(sizeof(glGetNamedProgramLocalParameterdvEXT_PACKED)); \
    packed_data->index = glGetNamedProgramLocalParameterdvEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLuint)index; \
    packed_data->args.a4 = (GLdouble *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetNamedProgramLocalParameterfvEXT(program, target, index, params) ({ \
    glGetNamedProgramLocalParameterfvEXT_PACKED *packed_data = malloc(sizeof(glGetNamedProgramLocalParameterfvEXT_PACKED)); \
    packed_data->index = glGetNamedProgramLocalParameterfvEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLuint)index; \
    packed_data->args.a4 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetNamedProgramStringEXT(program, target, pname, string) ({ \
    glGetNamedProgramStringEXT_PACKED *packed_data = malloc(sizeof(glGetNamedProgramStringEXT_PACKED)); \
    packed_data->index = glGetNamedProgramStringEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLvoid *)string; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetNamedProgramivEXT(program, target, pname, params) ({ \
    glGetNamedProgramivEXT_PACKED *packed_data = malloc(sizeof(glGetNamedProgramivEXT_PACKED)); \
    packed_data->index = glGetNamedProgramivEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetNamedRenderbufferParameterivEXT(renderbuffer, pname, params) ({ \
    glGetNamedRenderbufferParameterivEXT_PACKED *packed_data = malloc(sizeof(glGetNamedRenderbufferParameterivEXT_PACKED)); \
    packed_data->index = glGetNamedRenderbufferParameterivEXT_INDEX; \
    packed_data->args.a1 = (GLuint)renderbuffer; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetNamedStringARB(namelen, name, bufSize, stringlen, string) ({ \
    glGetNamedStringARB_PACKED *packed_data = malloc(sizeof(glGetNamedStringARB_PACKED)); \
    packed_data->index = glGetNamedStringARB_INDEX; \
    packed_data->args.a1 = (GLint)namelen; \
    packed_data->args.a2 = (GLchar *)name; \
    packed_data->args.a3 = (GLsizei)bufSize; \
    packed_data->args.a4 = (GLint *)stringlen; \
    packed_data->args.a5 = (GLchar *)string; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetNamedStringivARB(namelen, name, pname, params) ({ \
    glGetNamedStringivARB_PACKED *packed_data = malloc(sizeof(glGetNamedStringivARB_PACKED)); \
    packed_data->index = glGetNamedStringivARB_INDEX; \
    packed_data->args.a1 = (GLint)namelen; \
    packed_data->args.a2 = (GLchar *)name; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetObjectBufferfvATI(buffer, pname, params) ({ \
    glGetObjectBufferfvATI_PACKED *packed_data = malloc(sizeof(glGetObjectBufferfvATI_PACKED)); \
    packed_data->index = glGetObjectBufferfvATI_INDEX; \
    packed_data->args.a1 = (GLuint)buffer; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetObjectBufferivATI(buffer, pname, params) ({ \
    glGetObjectBufferivATI_PACKED *packed_data = malloc(sizeof(glGetObjectBufferivATI_PACKED)); \
    packed_data->index = glGetObjectBufferivATI_INDEX; \
    packed_data->args.a1 = (GLuint)buffer; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetObjectLabel(identifier, name, bufSize, length, label) ({ \
    glGetObjectLabel_PACKED *packed_data = malloc(sizeof(glGetObjectLabel_PACKED)); \
    packed_data->index = glGetObjectLabel_INDEX; \
    packed_data->args.a1 = (GLenum)identifier; \
    packed_data->args.a2 = (GLuint)name; \
    packed_data->args.a3 = (GLsizei)bufSize; \
    packed_data->args.a4 = (GLsizei *)length; \
    packed_data->args.a5 = (GLchar *)label; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetObjectParameterfvARB(obj, pname, params) ({ \
    glGetObjectParameterfvARB_PACKED *packed_data = malloc(sizeof(glGetObjectParameterfvARB_PACKED)); \
    packed_data->index = glGetObjectParameterfvARB_INDEX; \
    packed_data->args.a1 = (GLhandleARB)obj; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetObjectParameterivAPPLE(objectType, name, pname, params) ({ \
    glGetObjectParameterivAPPLE_PACKED *packed_data = malloc(sizeof(glGetObjectParameterivAPPLE_PACKED)); \
    packed_data->index = glGetObjectParameterivAPPLE_INDEX; \
    packed_data->args.a1 = (GLenum)objectType; \
    packed_data->args.a2 = (GLuint)name; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetObjectParameterivARB(obj, pname, params) ({ \
    glGetObjectParameterivARB_PACKED *packed_data = malloc(sizeof(glGetObjectParameterivARB_PACKED)); \
    packed_data->index = glGetObjectParameterivARB_INDEX; \
    packed_data->args.a1 = (GLhandleARB)obj; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetObjectPtrLabel(ptr, bufSize, length, label) ({ \
    glGetObjectPtrLabel_PACKED *packed_data = malloc(sizeof(glGetObjectPtrLabel_PACKED)); \
    packed_data->index = glGetObjectPtrLabel_INDEX; \
    packed_data->args.a1 = (void *)ptr; \
    packed_data->args.a2 = (GLsizei)bufSize; \
    packed_data->args.a3 = (GLsizei *)length; \
    packed_data->args.a4 = (GLchar *)label; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetOcclusionQueryivNV(id, pname, params) ({ \
    glGetOcclusionQueryivNV_PACKED *packed_data = malloc(sizeof(glGetOcclusionQueryivNV_PACKED)); \
    packed_data->index = glGetOcclusionQueryivNV_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetOcclusionQueryuivNV(id, pname, params) ({ \
    glGetOcclusionQueryuivNV_PACKED *packed_data = malloc(sizeof(glGetOcclusionQueryuivNV_PACKED)); \
    packed_data->index = glGetOcclusionQueryuivNV_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLuint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetPathColorGenfvNV(color, pname, value) ({ \
    glGetPathColorGenfvNV_PACKED *packed_data = malloc(sizeof(glGetPathColorGenfvNV_PACKED)); \
    packed_data->index = glGetPathColorGenfvNV_INDEX; \
    packed_data->args.a1 = (GLenum)color; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetPathColorGenivNV(color, pname, value) ({ \
    glGetPathColorGenivNV_PACKED *packed_data = malloc(sizeof(glGetPathColorGenivNV_PACKED)); \
    packed_data->index = glGetPathColorGenivNV_INDEX; \
    packed_data->args.a1 = (GLenum)color; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetPathCommandsNV(path, commands) ({ \
    glGetPathCommandsNV_PACKED *packed_data = malloc(sizeof(glGetPathCommandsNV_PACKED)); \
    packed_data->index = glGetPathCommandsNV_INDEX; \
    packed_data->args.a1 = (GLuint)path; \
    packed_data->args.a2 = (GLubyte *)commands; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetPathCoordsNV(path, coords) ({ \
    glGetPathCoordsNV_PACKED *packed_data = malloc(sizeof(glGetPathCoordsNV_PACKED)); \
    packed_data->index = glGetPathCoordsNV_INDEX; \
    packed_data->args.a1 = (GLuint)path; \
    packed_data->args.a2 = (GLfloat *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetPathDashArrayNV(path, dashArray) ({ \
    glGetPathDashArrayNV_PACKED *packed_data = malloc(sizeof(glGetPathDashArrayNV_PACKED)); \
    packed_data->index = glGetPathDashArrayNV_INDEX; \
    packed_data->args.a1 = (GLuint)path; \
    packed_data->args.a2 = (GLfloat *)dashArray; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetPathLengthNV(path, startSegment, numSegments) ({ \
    glGetPathLengthNV_PACKED *packed_data = malloc(sizeof(glGetPathLengthNV_PACKED)); \
    packed_data->index = glGetPathLengthNV_INDEX; \
    packed_data->args.a1 = (GLuint)path; \
    packed_data->args.a2 = (GLsizei)startSegment; \
    packed_data->args.a3 = (GLsizei)numSegments; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetPathMetricRangeNV(metricQueryMask, firstPathName, numPaths, stride, metrics) ({ \
    glGetPathMetricRangeNV_PACKED *packed_data = malloc(sizeof(glGetPathMetricRangeNV_PACKED)); \
    packed_data->index = glGetPathMetricRangeNV_INDEX; \
    packed_data->args.a1 = (GLbitfield)metricQueryMask; \
    packed_data->args.a2 = (GLuint)firstPathName; \
    packed_data->args.a3 = (GLsizei)numPaths; \
    packed_data->args.a4 = (GLsizei)stride; \
    packed_data->args.a5 = (GLfloat *)metrics; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics) ({ \
    glGetPathMetricsNV_PACKED *packed_data = malloc(sizeof(glGetPathMetricsNV_PACKED)); \
    packed_data->index = glGetPathMetricsNV_INDEX; \
    packed_data->args.a1 = (GLbitfield)metricQueryMask; \
    packed_data->args.a2 = (GLsizei)numPaths; \
    packed_data->args.a3 = (GLenum)pathNameType; \
    packed_data->args.a4 = (GLvoid *)paths; \
    packed_data->args.a5 = (GLuint)pathBase; \
    packed_data->args.a6 = (GLsizei)stride; \
    packed_data->args.a7 = (GLfloat *)metrics; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetPathParameterfvNV(path, pname, value) ({ \
    glGetPathParameterfvNV_PACKED *packed_data = malloc(sizeof(glGetPathParameterfvNV_PACKED)); \
    packed_data->index = glGetPathParameterfvNV_INDEX; \
    packed_data->args.a1 = (GLuint)path; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetPathParameterivNV(path, pname, value) ({ \
    glGetPathParameterivNV_PACKED *packed_data = malloc(sizeof(glGetPathParameterivNV_PACKED)); \
    packed_data->index = glGetPathParameterivNV_INDEX; \
    packed_data->args.a1 = (GLuint)path; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetPathSpacingNV(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing) ({ \
    glGetPathSpacingNV_PACKED *packed_data = malloc(sizeof(glGetPathSpacingNV_PACKED)); \
    packed_data->index = glGetPathSpacingNV_INDEX; \
    packed_data->args.a1 = (GLenum)pathListMode; \
    packed_data->args.a2 = (GLsizei)numPaths; \
    packed_data->args.a3 = (GLenum)pathNameType; \
    packed_data->args.a4 = (GLvoid *)paths; \
    packed_data->args.a5 = (GLuint)pathBase; \
    packed_data->args.a6 = (GLfloat)advanceScale; \
    packed_data->args.a7 = (GLfloat)kerningScale; \
    packed_data->args.a8 = (GLenum)transformType; \
    packed_data->args.a9 = (GLfloat *)returnedSpacing; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetPathTexGenfvNV(texCoordSet, pname, value) ({ \
    glGetPathTexGenfvNV_PACKED *packed_data = malloc(sizeof(glGetPathTexGenfvNV_PACKED)); \
    packed_data->index = glGetPathTexGenfvNV_INDEX; \
    packed_data->args.a1 = (GLenum)texCoordSet; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetPathTexGenivNV(texCoordSet, pname, value) ({ \
    glGetPathTexGenivNV_PACKED *packed_data = malloc(sizeof(glGetPathTexGenivNV_PACKED)); \
    packed_data->index = glGetPathTexGenivNV_INDEX; \
    packed_data->args.a1 = (GLenum)texCoordSet; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data, bytesWritten) ({ \
    glGetPerfMonitorCounterDataAMD_PACKED *packed_data = malloc(sizeof(glGetPerfMonitorCounterDataAMD_PACKED)); \
    packed_data->index = glGetPerfMonitorCounterDataAMD_INDEX; \
    packed_data->args.a1 = (GLuint)monitor; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLsizei)dataSize; \
    packed_data->args.a4 = (GLuint *)data; \
    packed_data->args.a5 = (GLint *)bytesWritten; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetPerfMonitorCounterInfoAMD(group, counter, pname, data) ({ \
    glGetPerfMonitorCounterInfoAMD_PACKED *packed_data = malloc(sizeof(glGetPerfMonitorCounterInfoAMD_PACKED)); \
    packed_data->index = glGetPerfMonitorCounterInfoAMD_INDEX; \
    packed_data->args.a1 = (GLuint)group; \
    packed_data->args.a2 = (GLuint)counter; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLvoid *)data; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetPerfMonitorCounterStringAMD(group, counter, bufSize, length, counterString) ({ \
    glGetPerfMonitorCounterStringAMD_PACKED *packed_data = malloc(sizeof(glGetPerfMonitorCounterStringAMD_PACKED)); \
    packed_data->index = glGetPerfMonitorCounterStringAMD_INDEX; \
    packed_data->args.a1 = (GLuint)group; \
    packed_data->args.a2 = (GLuint)counter; \
    packed_data->args.a3 = (GLsizei)bufSize; \
    packed_data->args.a4 = (GLsizei *)length; \
    packed_data->args.a5 = (GLchar *)counterString; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetPerfMonitorCountersAMD(group, numCounters, maxActiveCounters, counterSize, counters) ({ \
    glGetPerfMonitorCountersAMD_PACKED *packed_data = malloc(sizeof(glGetPerfMonitorCountersAMD_PACKED)); \
    packed_data->index = glGetPerfMonitorCountersAMD_INDEX; \
    packed_data->args.a1 = (GLuint)group; \
    packed_data->args.a2 = (GLint *)numCounters; \
    packed_data->args.a3 = (GLint *)maxActiveCounters; \
    packed_data->args.a4 = (GLsizei)counterSize; \
    packed_data->args.a5 = (GLuint *)counters; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetPerfMonitorGroupStringAMD(group, bufSize, length, groupString) ({ \
    glGetPerfMonitorGroupStringAMD_PACKED *packed_data = malloc(sizeof(glGetPerfMonitorGroupStringAMD_PACKED)); \
    packed_data->index = glGetPerfMonitorGroupStringAMD_INDEX; \
    packed_data->args.a1 = (GLuint)group; \
    packed_data->args.a2 = (GLsizei)bufSize; \
    packed_data->args.a3 = (GLsizei *)length; \
    packed_data->args.a4 = (GLchar *)groupString; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetPerfMonitorGroupsAMD(numGroups, groupsSize, groups) ({ \
    glGetPerfMonitorGroupsAMD_PACKED *packed_data = malloc(sizeof(glGetPerfMonitorGroupsAMD_PACKED)); \
    packed_data->index = glGetPerfMonitorGroupsAMD_INDEX; \
    packed_data->args.a1 = (GLint *)numGroups; \
    packed_data->args.a2 = (GLsizei)groupsSize; \
    packed_data->args.a3 = (GLuint *)groups; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetPixelMapfv(map, values) ({ \
    glGetPixelMapfv_PACKED *packed_data = malloc(sizeof(glGetPixelMapfv_PACKED)); \
    packed_data->index = glGetPixelMapfv_INDEX; \
    packed_data->args.a1 = (GLenum)map; \
    packed_data->args.a2 = (GLfloat *)values; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetPixelMapuiv(map, values) ({ \
    glGetPixelMapuiv_PACKED *packed_data = malloc(sizeof(glGetPixelMapuiv_PACKED)); \
    packed_data->index = glGetPixelMapuiv_INDEX; \
    packed_data->args.a1 = (GLenum)map; \
    packed_data->args.a2 = (GLuint *)values; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetPixelMapusv(map, values) ({ \
    glGetPixelMapusv_PACKED *packed_data = malloc(sizeof(glGetPixelMapusv_PACKED)); \
    packed_data->index = glGetPixelMapusv_INDEX; \
    packed_data->args.a1 = (GLenum)map; \
    packed_data->args.a2 = (GLushort *)values; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetPixelMapxv(map, size, values) ({ \
    glGetPixelMapxv_PACKED *packed_data = malloc(sizeof(glGetPixelMapxv_PACKED)); \
    packed_data->index = glGetPixelMapxv_INDEX; \
    packed_data->args.a1 = (GLenum)map; \
    packed_data->args.a2 = (GLint)size; \
    packed_data->args.a3 = (GLfixed *)values; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetPixelTexGenParameterfvSGIS(pname, params) ({ \
    glGetPixelTexGenParameterfvSGIS_PACKED *packed_data = malloc(sizeof(glGetPixelTexGenParameterfvSGIS_PACKED)); \
    packed_data->index = glGetPixelTexGenParameterfvSGIS_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetPixelTexGenParameterivSGIS(pname, params) ({ \
    glGetPixelTexGenParameterivSGIS_PACKED *packed_data = malloc(sizeof(glGetPixelTexGenParameterivSGIS_PACKED)); \
    packed_data->index = glGetPixelTexGenParameterivSGIS_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetPixelTransformParameterfvEXT(target, pname, params) ({ \
    glGetPixelTransformParameterfvEXT_PACKED *packed_data = malloc(sizeof(glGetPixelTransformParameterfvEXT_PACKED)); \
    packed_data->index = glGetPixelTransformParameterfvEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetPixelTransformParameterivEXT(target, pname, params) ({ \
    glGetPixelTransformParameterivEXT_PACKED *packed_data = malloc(sizeof(glGetPixelTransformParameterivEXT_PACKED)); \
    packed_data->index = glGetPixelTransformParameterivEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetPointerIndexedvEXT(target, index, data) ({ \
    glGetPointerIndexedvEXT_PACKED *packed_data = malloc(sizeof(glGetPointerIndexedvEXT_PACKED)); \
    packed_data->index = glGetPointerIndexedvEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLvoid *)data; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetPointeri_vEXT(target, index, data) ({ \
    glGetPointeri_vEXT_PACKED *packed_data = malloc(sizeof(glGetPointeri_vEXT_PACKED)); \
    packed_data->index = glGetPointeri_vEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLvoid *)data; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetPointerv(pname, params) ({ \
    glGetPointerv_PACKED *packed_data = malloc(sizeof(glGetPointerv_PACKED)); \
    packed_data->index = glGetPointerv_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLvoid **)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetPointervEXT(pname, params) ({ \
    glGetPointervEXT_PACKED *packed_data = malloc(sizeof(glGetPointervEXT_PACKED)); \
    packed_data->index = glGetPointervEXT_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLvoid *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetPolygonStipple(mask) ({ \
    glGetPolygonStipple_PACKED *packed_data = malloc(sizeof(glGetPolygonStipple_PACKED)); \
    packed_data->index = glGetPolygonStipple_INDEX; \
    packed_data->args.a1 = (GLubyte *)mask; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetProgramBinary(program, bufSize, length, binaryFormat, binary) ({ \
    glGetProgramBinary_PACKED *packed_data = malloc(sizeof(glGetProgramBinary_PACKED)); \
    packed_data->index = glGetProgramBinary_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLsizei)bufSize; \
    packed_data->args.a3 = (GLsizei *)length; \
    packed_data->args.a4 = (GLenum *)binaryFormat; \
    packed_data->args.a5 = (GLvoid *)binary; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetProgramEnvParameterIivNV(target, index, params) ({ \
    glGetProgramEnvParameterIivNV_PACKED *packed_data = malloc(sizeof(glGetProgramEnvParameterIivNV_PACKED)); \
    packed_data->index = glGetProgramEnvParameterIivNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetProgramEnvParameterIuivNV(target, index, params) ({ \
    glGetProgramEnvParameterIuivNV_PACKED *packed_data = malloc(sizeof(glGetProgramEnvParameterIuivNV_PACKED)); \
    packed_data->index = glGetProgramEnvParameterIuivNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLuint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetProgramEnvParameterdvARB(target, index, params) ({ \
    glGetProgramEnvParameterdvARB_PACKED *packed_data = malloc(sizeof(glGetProgramEnvParameterdvARB_PACKED)); \
    packed_data->index = glGetProgramEnvParameterdvARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLdouble *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetProgramEnvParameterfvARB(target, index, params) ({ \
    glGetProgramEnvParameterfvARB_PACKED *packed_data = malloc(sizeof(glGetProgramEnvParameterfvARB_PACKED)); \
    packed_data->index = glGetProgramEnvParameterfvARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetProgramInfoLog(program, bufSize, length, infoLog) ({ \
    glGetProgramInfoLog_PACKED *packed_data = malloc(sizeof(glGetProgramInfoLog_PACKED)); \
    packed_data->index = glGetProgramInfoLog_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLsizei)bufSize; \
    packed_data->args.a3 = (GLsizei *)length; \
    packed_data->args.a4 = (GLchar *)infoLog; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetProgramInterfaceiv(program, programInterface, pname, params) ({ \
    glGetProgramInterfaceiv_PACKED *packed_data = malloc(sizeof(glGetProgramInterfaceiv_PACKED)); \
    packed_data->index = glGetProgramInterfaceiv_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLenum)programInterface; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetProgramLocalParameterIivNV(target, index, params) ({ \
    glGetProgramLocalParameterIivNV_PACKED *packed_data = malloc(sizeof(glGetProgramLocalParameterIivNV_PACKED)); \
    packed_data->index = glGetProgramLocalParameterIivNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetProgramLocalParameterIuivNV(target, index, params) ({ \
    glGetProgramLocalParameterIuivNV_PACKED *packed_data = malloc(sizeof(glGetProgramLocalParameterIuivNV_PACKED)); \
    packed_data->index = glGetProgramLocalParameterIuivNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLuint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetProgramLocalParameterdvARB(target, index, params) ({ \
    glGetProgramLocalParameterdvARB_PACKED *packed_data = malloc(sizeof(glGetProgramLocalParameterdvARB_PACKED)); \
    packed_data->index = glGetProgramLocalParameterdvARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLdouble *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetProgramLocalParameterfvARB(target, index, params) ({ \
    glGetProgramLocalParameterfvARB_PACKED *packed_data = malloc(sizeof(glGetProgramLocalParameterfvARB_PACKED)); \
    packed_data->index = glGetProgramLocalParameterfvARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetProgramNamedParameterdvNV(id, len, name, params) ({ \
    glGetProgramNamedParameterdvNV_PACKED *packed_data = malloc(sizeof(glGetProgramNamedParameterdvNV_PACKED)); \
    packed_data->index = glGetProgramNamedParameterdvNV_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    packed_data->args.a2 = (GLsizei)len; \
    packed_data->args.a3 = (GLubyte *)name; \
    packed_data->args.a4 = (GLdouble *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetProgramNamedParameterfvNV(id, len, name, params) ({ \
    glGetProgramNamedParameterfvNV_PACKED *packed_data = malloc(sizeof(glGetProgramNamedParameterfvNV_PACKED)); \
    packed_data->index = glGetProgramNamedParameterfvNV_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    packed_data->args.a2 = (GLsizei)len; \
    packed_data->args.a3 = (GLubyte *)name; \
    packed_data->args.a4 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetProgramParameterdvNV(target, index, pname, params) ({ \
    glGetProgramParameterdvNV_PACKED *packed_data = malloc(sizeof(glGetProgramParameterdvNV_PACKED)); \
    packed_data->index = glGetProgramParameterdvNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLdouble *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetProgramParameterfvNV(target, index, pname, params) ({ \
    glGetProgramParameterfvNV_PACKED *packed_data = malloc(sizeof(glGetProgramParameterfvNV_PACKED)); \
    packed_data->index = glGetProgramParameterfvNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog) ({ \
    glGetProgramPipelineInfoLog_PACKED *packed_data = malloc(sizeof(glGetProgramPipelineInfoLog_PACKED)); \
    packed_data->index = glGetProgramPipelineInfoLog_INDEX; \
    packed_data->args.a1 = (GLuint)pipeline; \
    packed_data->args.a2 = (GLsizei)bufSize; \
    packed_data->args.a3 = (GLsizei *)length; \
    packed_data->args.a4 = (GLchar *)infoLog; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetProgramPipelineiv(pipeline, pname, params) ({ \
    glGetProgramPipelineiv_PACKED *packed_data = malloc(sizeof(glGetProgramPipelineiv_PACKED)); \
    packed_data->index = glGetProgramPipelineiv_INDEX; \
    packed_data->args.a1 = (GLuint)pipeline; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetProgramResourceIndex(program, programInterface, name) ({ \
    glGetProgramResourceIndex_PACKED *packed_data = malloc(sizeof(glGetProgramResourceIndex_PACKED)); \
    packed_data->index = glGetProgramResourceIndex_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLenum)programInterface; \
    packed_data->args.a3 = (GLchar *)name; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetProgramResourceLocation(program, programInterface, name) ({ \
    glGetProgramResourceLocation_PACKED *packed_data = malloc(sizeof(glGetProgramResourceLocation_PACKED)); \
    packed_data->index = glGetProgramResourceLocation_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLenum)programInterface; \
    packed_data->args.a3 = (GLchar *)name; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetProgramResourceLocationIndex(program, programInterface, name) ({ \
    glGetProgramResourceLocationIndex_PACKED *packed_data = malloc(sizeof(glGetProgramResourceLocationIndex_PACKED)); \
    packed_data->index = glGetProgramResourceLocationIndex_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLenum)programInterface; \
    packed_data->args.a3 = (GLchar *)name; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetProgramResourceName(program, programInterface, index, bufSize, length, name) ({ \
    glGetProgramResourceName_PACKED *packed_data = malloc(sizeof(glGetProgramResourceName_PACKED)); \
    packed_data->index = glGetProgramResourceName_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLenum)programInterface; \
    packed_data->args.a3 = (GLuint)index; \
    packed_data->args.a4 = (GLsizei)bufSize; \
    packed_data->args.a5 = (GLsizei *)length; \
    packed_data->args.a6 = (GLchar *)name; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetProgramResourceiv(program, programInterface, index, propCount, props, bufSize, length, params) ({ \
    glGetProgramResourceiv_PACKED *packed_data = malloc(sizeof(glGetProgramResourceiv_PACKED)); \
    packed_data->index = glGetProgramResourceiv_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLenum)programInterface; \
    packed_data->args.a3 = (GLuint)index; \
    packed_data->args.a4 = (GLsizei)propCount; \
    packed_data->args.a5 = (GLenum *)props; \
    packed_data->args.a6 = (GLsizei)bufSize; \
    packed_data->args.a7 = (GLsizei *)length; \
    packed_data->args.a8 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetProgramStageiv(program, shadertype, pname, values) ({ \
    glGetProgramStageiv_PACKED *packed_data = malloc(sizeof(glGetProgramStageiv_PACKED)); \
    packed_data->index = glGetProgramStageiv_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLenum)shadertype; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLint *)values; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetProgramStringARB(target, pname, string) ({ \
    glGetProgramStringARB_PACKED *packed_data = malloc(sizeof(glGetProgramStringARB_PACKED)); \
    packed_data->index = glGetProgramStringARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLvoid *)string; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetProgramStringNV(id, pname, program) ({ \
    glGetProgramStringNV_PACKED *packed_data = malloc(sizeof(glGetProgramStringNV_PACKED)); \
    packed_data->index = glGetProgramStringNV_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLubyte *)program; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetProgramSubroutineParameteruivNV(target, index, param) ({ \
    glGetProgramSubroutineParameteruivNV_PACKED *packed_data = malloc(sizeof(glGetProgramSubroutineParameteruivNV_PACKED)); \
    packed_data->index = glGetProgramSubroutineParameteruivNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLuint *)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetProgramiv(program, pname, params) ({ \
    glGetProgramiv_PACKED *packed_data = malloc(sizeof(glGetProgramiv_PACKED)); \
    packed_data->index = glGetProgramiv_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetProgramivARB(target, pname, params) ({ \
    glGetProgramivARB_PACKED *packed_data = malloc(sizeof(glGetProgramivARB_PACKED)); \
    packed_data->index = glGetProgramivARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetProgramivNV(id, pname, params) ({ \
    glGetProgramivNV_PACKED *packed_data = malloc(sizeof(glGetProgramivNV_PACKED)); \
    packed_data->index = glGetProgramivNV_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetQueryIndexediv(target, index, pname, params) ({ \
    glGetQueryIndexediv_PACKED *packed_data = malloc(sizeof(glGetQueryIndexediv_PACKED)); \
    packed_data->index = glGetQueryIndexediv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetQueryObjecti64v(id, pname, params) ({ \
    glGetQueryObjecti64v_PACKED *packed_data = malloc(sizeof(glGetQueryObjecti64v_PACKED)); \
    packed_data->index = glGetQueryObjecti64v_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint64 *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetQueryObjecti64vEXT(id, pname, params) ({ \
    glGetQueryObjecti64vEXT_PACKED *packed_data = malloc(sizeof(glGetQueryObjecti64vEXT_PACKED)); \
    packed_data->index = glGetQueryObjecti64vEXT_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint64EXT *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetQueryObjectiv(id, pname, params) ({ \
    glGetQueryObjectiv_PACKED *packed_data = malloc(sizeof(glGetQueryObjectiv_PACKED)); \
    packed_data->index = glGetQueryObjectiv_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetQueryObjectivARB(id, pname, params) ({ \
    glGetQueryObjectivARB_PACKED *packed_data = malloc(sizeof(glGetQueryObjectivARB_PACKED)); \
    packed_data->index = glGetQueryObjectivARB_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetQueryObjectui64v(id, pname, params) ({ \
    glGetQueryObjectui64v_PACKED *packed_data = malloc(sizeof(glGetQueryObjectui64v_PACKED)); \
    packed_data->index = glGetQueryObjectui64v_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLuint64 *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetQueryObjectui64vEXT(id, pname, params) ({ \
    glGetQueryObjectui64vEXT_PACKED *packed_data = malloc(sizeof(glGetQueryObjectui64vEXT_PACKED)); \
    packed_data->index = glGetQueryObjectui64vEXT_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLuint64EXT *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetQueryObjectuiv(id, pname, params) ({ \
    glGetQueryObjectuiv_PACKED *packed_data = malloc(sizeof(glGetQueryObjectuiv_PACKED)); \
    packed_data->index = glGetQueryObjectuiv_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLuint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetQueryObjectuivARB(id, pname, params) ({ \
    glGetQueryObjectuivARB_PACKED *packed_data = malloc(sizeof(glGetQueryObjectuivARB_PACKED)); \
    packed_data->index = glGetQueryObjectuivARB_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLuint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetQueryiv(target, pname, params) ({ \
    glGetQueryiv_PACKED *packed_data = malloc(sizeof(glGetQueryiv_PACKED)); \
    packed_data->index = glGetQueryiv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetQueryivARB(target, pname, params) ({ \
    glGetQueryivARB_PACKED *packed_data = malloc(sizeof(glGetQueryivARB_PACKED)); \
    packed_data->index = glGetQueryivARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetRenderbufferParameteriv(target, pname, params) ({ \
    glGetRenderbufferParameteriv_PACKED *packed_data = malloc(sizeof(glGetRenderbufferParameteriv_PACKED)); \
    packed_data->index = glGetRenderbufferParameteriv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetRenderbufferParameterivEXT(target, pname, params) ({ \
    glGetRenderbufferParameterivEXT_PACKED *packed_data = malloc(sizeof(glGetRenderbufferParameterivEXT_PACKED)); \
    packed_data->index = glGetRenderbufferParameterivEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetSamplerParameterIiv(sampler, pname, params) ({ \
    glGetSamplerParameterIiv_PACKED *packed_data = malloc(sizeof(glGetSamplerParameterIiv_PACKED)); \
    packed_data->index = glGetSamplerParameterIiv_INDEX; \
    packed_data->args.a1 = (GLuint)sampler; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetSamplerParameterIuiv(sampler, pname, params) ({ \
    glGetSamplerParameterIuiv_PACKED *packed_data = malloc(sizeof(glGetSamplerParameterIuiv_PACKED)); \
    packed_data->index = glGetSamplerParameterIuiv_INDEX; \
    packed_data->args.a1 = (GLuint)sampler; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLuint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetSamplerParameterfv(sampler, pname, params) ({ \
    glGetSamplerParameterfv_PACKED *packed_data = malloc(sizeof(glGetSamplerParameterfv_PACKED)); \
    packed_data->index = glGetSamplerParameterfv_INDEX; \
    packed_data->args.a1 = (GLuint)sampler; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetSamplerParameteriv(sampler, pname, params) ({ \
    glGetSamplerParameteriv_PACKED *packed_data = malloc(sizeof(glGetSamplerParameteriv_PACKED)); \
    packed_data->index = glGetSamplerParameteriv_INDEX; \
    packed_data->args.a1 = (GLuint)sampler; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetSeparableFilter(target, format, type, row, column, span) ({ \
    glGetSeparableFilter_PACKED *packed_data = malloc(sizeof(glGetSeparableFilter_PACKED)); \
    packed_data->index = glGetSeparableFilter_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)format; \
    packed_data->args.a3 = (GLenum)type; \
    packed_data->args.a4 = (GLvoid *)row; \
    packed_data->args.a5 = (GLvoid *)column; \
    packed_data->args.a6 = (GLvoid *)span; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetSeparableFilterEXT(target, format, type, row, column, span) ({ \
    glGetSeparableFilterEXT_PACKED *packed_data = malloc(sizeof(glGetSeparableFilterEXT_PACKED)); \
    packed_data->index = glGetSeparableFilterEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)format; \
    packed_data->args.a3 = (GLenum)type; \
    packed_data->args.a4 = (GLvoid *)row; \
    packed_data->args.a5 = (GLvoid *)column; \
    packed_data->args.a6 = (GLvoid *)span; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetShaderInfoLog(shader, bufSize, length, infoLog) ({ \
    glGetShaderInfoLog_PACKED *packed_data = malloc(sizeof(glGetShaderInfoLog_PACKED)); \
    packed_data->index = glGetShaderInfoLog_INDEX; \
    packed_data->args.a1 = (GLuint)shader; \
    packed_data->args.a2 = (GLsizei)bufSize; \
    packed_data->args.a3 = (GLsizei *)length; \
    packed_data->args.a4 = (GLchar *)infoLog; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision) ({ \
    glGetShaderPrecisionFormat_PACKED *packed_data = malloc(sizeof(glGetShaderPrecisionFormat_PACKED)); \
    packed_data->index = glGetShaderPrecisionFormat_INDEX; \
    packed_data->args.a1 = (GLenum)shadertype; \
    packed_data->args.a2 = (GLenum)precisiontype; \
    packed_data->args.a3 = (GLint *)range; \
    packed_data->args.a4 = (GLint *)precision; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetShaderSource(shader, bufSize, length, source) ({ \
    glGetShaderSource_PACKED *packed_data = malloc(sizeof(glGetShaderSource_PACKED)); \
    packed_data->index = glGetShaderSource_INDEX; \
    packed_data->args.a1 = (GLuint)shader; \
    packed_data->args.a2 = (GLsizei)bufSize; \
    packed_data->args.a3 = (GLsizei *)length; \
    packed_data->args.a4 = (GLchar *)source; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetShaderSourceARB(obj, maxLength, length, source) ({ \
    glGetShaderSourceARB_PACKED *packed_data = malloc(sizeof(glGetShaderSourceARB_PACKED)); \
    packed_data->index = glGetShaderSourceARB_INDEX; \
    packed_data->args.a1 = (GLhandleARB)obj; \
    packed_data->args.a2 = (GLsizei)maxLength; \
    packed_data->args.a3 = (GLsizei *)length; \
    packed_data->args.a4 = (GLcharARB *)source; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetShaderiv(shader, pname, params) ({ \
    glGetShaderiv_PACKED *packed_data = malloc(sizeof(glGetShaderiv_PACKED)); \
    packed_data->index = glGetShaderiv_INDEX; \
    packed_data->args.a1 = (GLuint)shader; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetSharpenTexFuncSGIS(target, points) ({ \
    glGetSharpenTexFuncSGIS_PACKED *packed_data = malloc(sizeof(glGetSharpenTexFuncSGIS_PACKED)); \
    packed_data->index = glGetSharpenTexFuncSGIS_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLfloat *)points; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetString(name) ({ \
    glGetString_PACKED *packed_data = malloc(sizeof(glGetString_PACKED)); \
    packed_data->index = glGetString_INDEX; \
    packed_data->args.a1 = (GLenum)name; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetStringi(name, index) ({ \
    glGetStringi_PACKED *packed_data = malloc(sizeof(glGetStringi_PACKED)); \
    packed_data->index = glGetStringi_INDEX; \
    packed_data->args.a1 = (GLenum)name; \
    packed_data->args.a2 = (GLuint)index; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetSubroutineIndex(program, shadertype, name) ({ \
    glGetSubroutineIndex_PACKED *packed_data = malloc(sizeof(glGetSubroutineIndex_PACKED)); \
    packed_data->index = glGetSubroutineIndex_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLenum)shadertype; \
    packed_data->args.a3 = (GLchar *)name; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetSubroutineUniformLocation(program, shadertype, name) ({ \
    glGetSubroutineUniformLocation_PACKED *packed_data = malloc(sizeof(glGetSubroutineUniformLocation_PACKED)); \
    packed_data->index = glGetSubroutineUniformLocation_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLenum)shadertype; \
    packed_data->args.a3 = (GLchar *)name; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetSynciv(sync, pname, bufSize, length, values) ({ \
    glGetSynciv_PACKED *packed_data = malloc(sizeof(glGetSynciv_PACKED)); \
    packed_data->index = glGetSynciv_INDEX; \
    packed_data->args.a1 = (GLsync)sync; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLsizei)bufSize; \
    packed_data->args.a4 = (GLsizei *)length; \
    packed_data->args.a5 = (GLint *)values; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetTexBumpParameterfvATI(pname, param) ({ \
    glGetTexBumpParameterfvATI_PACKED *packed_data = malloc(sizeof(glGetTexBumpParameterfvATI_PACKED)); \
    packed_data->index = glGetTexBumpParameterfvATI_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLfloat *)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetTexBumpParameterivATI(pname, param) ({ \
    glGetTexBumpParameterivATI_PACKED *packed_data = malloc(sizeof(glGetTexBumpParameterivATI_PACKED)); \
    packed_data->index = glGetTexBumpParameterivATI_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLint *)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetTexEnvfv(target, pname, params) ({ \
    glGetTexEnvfv_PACKED *packed_data = malloc(sizeof(glGetTexEnvfv_PACKED)); \
    packed_data->index = glGetTexEnvfv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetTexEnviv(target, pname, params) ({ \
    glGetTexEnviv_PACKED *packed_data = malloc(sizeof(glGetTexEnviv_PACKED)); \
    packed_data->index = glGetTexEnviv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetTexEnvxv(target, pname, params) ({ \
    glGetTexEnvxv_PACKED *packed_data = malloc(sizeof(glGetTexEnvxv_PACKED)); \
    packed_data->index = glGetTexEnvxv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfixed *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetTexEnvxvOES(target, pname, params) ({ \
    glGetTexEnvxvOES_PACKED *packed_data = malloc(sizeof(glGetTexEnvxvOES_PACKED)); \
    packed_data->index = glGetTexEnvxvOES_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfixed *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetTexFilterFuncSGIS(target, filter, weights) ({ \
    glGetTexFilterFuncSGIS_PACKED *packed_data = malloc(sizeof(glGetTexFilterFuncSGIS_PACKED)); \
    packed_data->index = glGetTexFilterFuncSGIS_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)filter; \
    packed_data->args.a3 = (GLfloat *)weights; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetTexGendv(coord, pname, params) ({ \
    glGetTexGendv_PACKED *packed_data = malloc(sizeof(glGetTexGendv_PACKED)); \
    packed_data->index = glGetTexGendv_INDEX; \
    packed_data->args.a1 = (GLenum)coord; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLdouble *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetTexGenfv(coord, pname, params) ({ \
    glGetTexGenfv_PACKED *packed_data = malloc(sizeof(glGetTexGenfv_PACKED)); \
    packed_data->index = glGetTexGenfv_INDEX; \
    packed_data->args.a1 = (GLenum)coord; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetTexGeniv(coord, pname, params) ({ \
    glGetTexGeniv_PACKED *packed_data = malloc(sizeof(glGetTexGeniv_PACKED)); \
    packed_data->index = glGetTexGeniv_INDEX; \
    packed_data->args.a1 = (GLenum)coord; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetTexGenxvOES(coord, pname, params) ({ \
    glGetTexGenxvOES_PACKED *packed_data = malloc(sizeof(glGetTexGenxvOES_PACKED)); \
    packed_data->index = glGetTexGenxvOES_INDEX; \
    packed_data->args.a1 = (GLenum)coord; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfixed *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetTexImage(target, level, format, type, pixels) ({ \
    glGetTexImage_PACKED *packed_data = malloc(sizeof(glGetTexImage_PACKED)); \
    packed_data->index = glGetTexImage_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint)level; \
    packed_data->args.a3 = (GLenum)format; \
    packed_data->args.a4 = (GLenum)type; \
    packed_data->args.a5 = (GLvoid *)pixels; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetTexLevelParameterfv(target, level, pname, params) ({ \
    glGetTexLevelParameterfv_PACKED *packed_data = malloc(sizeof(glGetTexLevelParameterfv_PACKED)); \
    packed_data->index = glGetTexLevelParameterfv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint)level; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetTexLevelParameteriv(target, level, pname, params) ({ \
    glGetTexLevelParameteriv_PACKED *packed_data = malloc(sizeof(glGetTexLevelParameteriv_PACKED)); \
    packed_data->index = glGetTexLevelParameteriv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint)level; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetTexLevelParameterxvOES(target, level, pname, params) ({ \
    glGetTexLevelParameterxvOES_PACKED *packed_data = malloc(sizeof(glGetTexLevelParameterxvOES_PACKED)); \
    packed_data->index = glGetTexLevelParameterxvOES_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint)level; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLfixed *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetTexParameterIiv(target, pname, params) ({ \
    glGetTexParameterIiv_PACKED *packed_data = malloc(sizeof(glGetTexParameterIiv_PACKED)); \
    packed_data->index = glGetTexParameterIiv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetTexParameterIivEXT(target, pname, params) ({ \
    glGetTexParameterIivEXT_PACKED *packed_data = malloc(sizeof(glGetTexParameterIivEXT_PACKED)); \
    packed_data->index = glGetTexParameterIivEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetTexParameterIuiv(target, pname, params) ({ \
    glGetTexParameterIuiv_PACKED *packed_data = malloc(sizeof(glGetTexParameterIuiv_PACKED)); \
    packed_data->index = glGetTexParameterIuiv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLuint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetTexParameterIuivEXT(target, pname, params) ({ \
    glGetTexParameterIuivEXT_PACKED *packed_data = malloc(sizeof(glGetTexParameterIuivEXT_PACKED)); \
    packed_data->index = glGetTexParameterIuivEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLuint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetTexParameterPointervAPPLE(target, pname, params) ({ \
    glGetTexParameterPointervAPPLE_PACKED *packed_data = malloc(sizeof(glGetTexParameterPointervAPPLE_PACKED)); \
    packed_data->index = glGetTexParameterPointervAPPLE_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLvoid *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetTexParameterfv(target, pname, params) ({ \
    glGetTexParameterfv_PACKED *packed_data = malloc(sizeof(glGetTexParameterfv_PACKED)); \
    packed_data->index = glGetTexParameterfv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetTexParameteriv(target, pname, params) ({ \
    glGetTexParameteriv_PACKED *packed_data = malloc(sizeof(glGetTexParameteriv_PACKED)); \
    packed_data->index = glGetTexParameteriv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetTexParameterxv(target, pname, params) ({ \
    glGetTexParameterxv_PACKED *packed_data = malloc(sizeof(glGetTexParameterxv_PACKED)); \
    packed_data->index = glGetTexParameterxv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfixed *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetTexParameterxvOES(target, pname, params) ({ \
    glGetTexParameterxvOES_PACKED *packed_data = malloc(sizeof(glGetTexParameterxvOES_PACKED)); \
    packed_data->index = glGetTexParameterxvOES_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfixed *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetTextureHandleNV(texture) ({ \
    glGetTextureHandleNV_PACKED *packed_data = malloc(sizeof(glGetTextureHandleNV_PACKED)); \
    packed_data->index = glGetTextureHandleNV_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetTextureImageEXT(texture, target, level, format, type, pixels) ({ \
    glGetTextureImageEXT_PACKED *packed_data = malloc(sizeof(glGetTextureImageEXT_PACKED)); \
    packed_data->index = glGetTextureImageEXT_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLint)level; \
    packed_data->args.a4 = (GLenum)format; \
    packed_data->args.a5 = (GLenum)type; \
    packed_data->args.a6 = (GLvoid *)pixels; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetTextureLevelParameterfvEXT(texture, target, level, pname, params) ({ \
    glGetTextureLevelParameterfvEXT_PACKED *packed_data = malloc(sizeof(glGetTextureLevelParameterfvEXT_PACKED)); \
    packed_data->index = glGetTextureLevelParameterfvEXT_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLint)level; \
    packed_data->args.a4 = (GLenum)pname; \
    packed_data->args.a5 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetTextureLevelParameterivEXT(texture, target, level, pname, params) ({ \
    glGetTextureLevelParameterivEXT_PACKED *packed_data = malloc(sizeof(glGetTextureLevelParameterivEXT_PACKED)); \
    packed_data->index = glGetTextureLevelParameterivEXT_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLint)level; \
    packed_data->args.a4 = (GLenum)pname; \
    packed_data->args.a5 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetTextureParameterIivEXT(texture, target, pname, params) ({ \
    glGetTextureParameterIivEXT_PACKED *packed_data = malloc(sizeof(glGetTextureParameterIivEXT_PACKED)); \
    packed_data->index = glGetTextureParameterIivEXT_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetTextureParameterIuivEXT(texture, target, pname, params) ({ \
    glGetTextureParameterIuivEXT_PACKED *packed_data = malloc(sizeof(glGetTextureParameterIuivEXT_PACKED)); \
    packed_data->index = glGetTextureParameterIuivEXT_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLuint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetTextureParameterfvEXT(texture, target, pname, params) ({ \
    glGetTextureParameterfvEXT_PACKED *packed_data = malloc(sizeof(glGetTextureParameterfvEXT_PACKED)); \
    packed_data->index = glGetTextureParameterfvEXT_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetTextureParameterivEXT(texture, target, pname, params) ({ \
    glGetTextureParameterivEXT_PACKED *packed_data = malloc(sizeof(glGetTextureParameterivEXT_PACKED)); \
    packed_data->index = glGetTextureParameterivEXT_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetTextureSamplerHandleNV(texture, sampler) ({ \
    glGetTextureSamplerHandleNV_PACKED *packed_data = malloc(sizeof(glGetTextureSamplerHandleNV_PACKED)); \
    packed_data->index = glGetTextureSamplerHandleNV_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    packed_data->args.a2 = (GLuint)sampler; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetTrackMatrixivNV(target, address, pname, params) ({ \
    glGetTrackMatrixivNV_PACKED *packed_data = malloc(sizeof(glGetTrackMatrixivNV_PACKED)); \
    packed_data->index = glGetTrackMatrixivNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)address; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name) ({ \
    glGetTransformFeedbackVarying_PACKED *packed_data = malloc(sizeof(glGetTransformFeedbackVarying_PACKED)); \
    packed_data->index = glGetTransformFeedbackVarying_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLsizei)bufSize; \
    packed_data->args.a4 = (GLsizei *)length; \
    packed_data->args.a5 = (GLsizei *)size; \
    packed_data->args.a6 = (GLenum *)type; \
    packed_data->args.a7 = (GLchar *)name; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetTransformFeedbackVaryingEXT(program, index, bufSize, length, size, type, name) ({ \
    glGetTransformFeedbackVaryingEXT_PACKED *packed_data = malloc(sizeof(glGetTransformFeedbackVaryingEXT_PACKED)); \
    packed_data->index = glGetTransformFeedbackVaryingEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLsizei)bufSize; \
    packed_data->args.a4 = (GLsizei *)length; \
    packed_data->args.a5 = (GLsizei *)size; \
    packed_data->args.a6 = (GLenum *)type; \
    packed_data->args.a7 = (GLchar *)name; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetTransformFeedbackVaryingNV(program, index, location) ({ \
    glGetTransformFeedbackVaryingNV_PACKED *packed_data = malloc(sizeof(glGetTransformFeedbackVaryingNV_PACKED)); \
    packed_data->index = glGetTransformFeedbackVaryingNV_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLint *)location; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetUniformBlockIndex(program, uniformBlockName) ({ \
    glGetUniformBlockIndex_PACKED *packed_data = malloc(sizeof(glGetUniformBlockIndex_PACKED)); \
    packed_data->index = glGetUniformBlockIndex_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLchar *)uniformBlockName; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetUniformBufferSizeEXT(program, location) ({ \
    glGetUniformBufferSizeEXT_PACKED *packed_data = malloc(sizeof(glGetUniformBufferSizeEXT_PACKED)); \
    packed_data->index = glGetUniformBufferSizeEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices) ({ \
    glGetUniformIndices_PACKED *packed_data = malloc(sizeof(glGetUniformIndices_PACKED)); \
    packed_data->index = glGetUniformIndices_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLsizei)uniformCount; \
    packed_data->args.a3 = (GLchar*const *)uniformNames; \
    packed_data->args.a4 = (GLuint *)uniformIndices; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetUniformLocation(program, name) ({ \
    glGetUniformLocation_PACKED *packed_data = malloc(sizeof(glGetUniformLocation_PACKED)); \
    packed_data->index = glGetUniformLocation_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLchar *)name; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetUniformLocationARB(programObj, name) ({ \
    glGetUniformLocationARB_PACKED *packed_data = malloc(sizeof(glGetUniformLocationARB_PACKED)); \
    packed_data->index = glGetUniformLocationARB_INDEX; \
    packed_data->args.a1 = (GLhandleARB)programObj; \
    packed_data->args.a2 = (GLcharARB *)name; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetUniformOffsetEXT(program, location) ({ \
    glGetUniformOffsetEXT_PACKED *packed_data = malloc(sizeof(glGetUniformOffsetEXT_PACKED)); \
    packed_data->index = glGetUniformOffsetEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetUniformSubroutineuiv(shadertype, location, params) ({ \
    glGetUniformSubroutineuiv_PACKED *packed_data = malloc(sizeof(glGetUniformSubroutineuiv_PACKED)); \
    packed_data->index = glGetUniformSubroutineuiv_INDEX; \
    packed_data->args.a1 = (GLenum)shadertype; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLuint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetUniformdv(program, location, params) ({ \
    glGetUniformdv_PACKED *packed_data = malloc(sizeof(glGetUniformdv_PACKED)); \
    packed_data->index = glGetUniformdv_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLdouble *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetUniformfv(program, location, params) ({ \
    glGetUniformfv_PACKED *packed_data = malloc(sizeof(glGetUniformfv_PACKED)); \
    packed_data->index = glGetUniformfv_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetUniformfvARB(programObj, location, params) ({ \
    glGetUniformfvARB_PACKED *packed_data = malloc(sizeof(glGetUniformfvARB_PACKED)); \
    packed_data->index = glGetUniformfvARB_INDEX; \
    packed_data->args.a1 = (GLhandleARB)programObj; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetUniformi64vNV(program, location, params) ({ \
    glGetUniformi64vNV_PACKED *packed_data = malloc(sizeof(glGetUniformi64vNV_PACKED)); \
    packed_data->index = glGetUniformi64vNV_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLint64EXT *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetUniformiv(program, location, params) ({ \
    glGetUniformiv_PACKED *packed_data = malloc(sizeof(glGetUniformiv_PACKED)); \
    packed_data->index = glGetUniformiv_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetUniformivARB(programObj, location, params) ({ \
    glGetUniformivARB_PACKED *packed_data = malloc(sizeof(glGetUniformivARB_PACKED)); \
    packed_data->index = glGetUniformivARB_INDEX; \
    packed_data->args.a1 = (GLhandleARB)programObj; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetUniformui64vNV(program, location, params) ({ \
    glGetUniformui64vNV_PACKED *packed_data = malloc(sizeof(glGetUniformui64vNV_PACKED)); \
    packed_data->index = glGetUniformui64vNV_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLuint64EXT *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetUniformuiv(program, location, params) ({ \
    glGetUniformuiv_PACKED *packed_data = malloc(sizeof(glGetUniformuiv_PACKED)); \
    packed_data->index = glGetUniformuiv_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLuint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetUniformuivEXT(program, location, params) ({ \
    glGetUniformuivEXT_PACKED *packed_data = malloc(sizeof(glGetUniformuivEXT_PACKED)); \
    packed_data->index = glGetUniformuivEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLuint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetVariantArrayObjectfvATI(id, pname, params) ({ \
    glGetVariantArrayObjectfvATI_PACKED *packed_data = malloc(sizeof(glGetVariantArrayObjectfvATI_PACKED)); \
    packed_data->index = glGetVariantArrayObjectfvATI_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetVariantArrayObjectivATI(id, pname, params) ({ \
    glGetVariantArrayObjectivATI_PACKED *packed_data = malloc(sizeof(glGetVariantArrayObjectivATI_PACKED)); \
    packed_data->index = glGetVariantArrayObjectivATI_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetVariantBooleanvEXT(id, value, data) ({ \
    glGetVariantBooleanvEXT_PACKED *packed_data = malloc(sizeof(glGetVariantBooleanvEXT_PACKED)); \
    packed_data->index = glGetVariantBooleanvEXT_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    packed_data->args.a2 = (GLenum)value; \
    packed_data->args.a3 = (GLboolean *)data; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetVariantFloatvEXT(id, value, data) ({ \
    glGetVariantFloatvEXT_PACKED *packed_data = malloc(sizeof(glGetVariantFloatvEXT_PACKED)); \
    packed_data->index = glGetVariantFloatvEXT_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    packed_data->args.a2 = (GLenum)value; \
    packed_data->args.a3 = (GLfloat *)data; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetVariantIntegervEXT(id, value, data) ({ \
    glGetVariantIntegervEXT_PACKED *packed_data = malloc(sizeof(glGetVariantIntegervEXT_PACKED)); \
    packed_data->index = glGetVariantIntegervEXT_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    packed_data->args.a2 = (GLenum)value; \
    packed_data->args.a3 = (GLint *)data; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetVariantPointervEXT(id, value, data) ({ \
    glGetVariantPointervEXT_PACKED *packed_data = malloc(sizeof(glGetVariantPointervEXT_PACKED)); \
    packed_data->index = glGetVariantPointervEXT_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    packed_data->args.a2 = (GLenum)value; \
    packed_data->args.a3 = (GLvoid *)data; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetVaryingLocationNV(program, name) ({ \
    glGetVaryingLocationNV_PACKED *packed_data = malloc(sizeof(glGetVaryingLocationNV_PACKED)); \
    packed_data->index = glGetVaryingLocationNV_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLchar *)name; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetVertexArrayIntegeri_vEXT(vaobj, index, pname, param) ({ \
    glGetVertexArrayIntegeri_vEXT_PACKED *packed_data = malloc(sizeof(glGetVertexArrayIntegeri_vEXT_PACKED)); \
    packed_data->index = glGetVertexArrayIntegeri_vEXT_INDEX; \
    packed_data->args.a1 = (GLuint)vaobj; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLint *)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetVertexArrayIntegervEXT(vaobj, pname, param) ({ \
    glGetVertexArrayIntegervEXT_PACKED *packed_data = malloc(sizeof(glGetVertexArrayIntegervEXT_PACKED)); \
    packed_data->index = glGetVertexArrayIntegervEXT_INDEX; \
    packed_data->args.a1 = (GLuint)vaobj; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetVertexArrayPointeri_vEXT(vaobj, index, pname, param) ({ \
    glGetVertexArrayPointeri_vEXT_PACKED *packed_data = malloc(sizeof(glGetVertexArrayPointeri_vEXT_PACKED)); \
    packed_data->index = glGetVertexArrayPointeri_vEXT_INDEX; \
    packed_data->args.a1 = (GLuint)vaobj; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLvoid *)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetVertexArrayPointervEXT(vaobj, pname, param) ({ \
    glGetVertexArrayPointervEXT_PACKED *packed_data = malloc(sizeof(glGetVertexArrayPointervEXT_PACKED)); \
    packed_data->index = glGetVertexArrayPointervEXT_INDEX; \
    packed_data->args.a1 = (GLuint)vaobj; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLvoid *)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetVertexAttribArrayObjectfvATI(index, pname, params) ({ \
    glGetVertexAttribArrayObjectfvATI_PACKED *packed_data = malloc(sizeof(glGetVertexAttribArrayObjectfvATI_PACKED)); \
    packed_data->index = glGetVertexAttribArrayObjectfvATI_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetVertexAttribArrayObjectivATI(index, pname, params) ({ \
    glGetVertexAttribArrayObjectivATI_PACKED *packed_data = malloc(sizeof(glGetVertexAttribArrayObjectivATI_PACKED)); \
    packed_data->index = glGetVertexAttribArrayObjectivATI_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetVertexAttribIiv(index, pname, params) ({ \
    glGetVertexAttribIiv_PACKED *packed_data = malloc(sizeof(glGetVertexAttribIiv_PACKED)); \
    packed_data->index = glGetVertexAttribIiv_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetVertexAttribIivEXT(index, pname, params) ({ \
    glGetVertexAttribIivEXT_PACKED *packed_data = malloc(sizeof(glGetVertexAttribIivEXT_PACKED)); \
    packed_data->index = glGetVertexAttribIivEXT_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetVertexAttribIuiv(index, pname, params) ({ \
    glGetVertexAttribIuiv_PACKED *packed_data = malloc(sizeof(glGetVertexAttribIuiv_PACKED)); \
    packed_data->index = glGetVertexAttribIuiv_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLuint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetVertexAttribIuivEXT(index, pname, params) ({ \
    glGetVertexAttribIuivEXT_PACKED *packed_data = malloc(sizeof(glGetVertexAttribIuivEXT_PACKED)); \
    packed_data->index = glGetVertexAttribIuivEXT_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLuint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetVertexAttribLdv(index, pname, params) ({ \
    glGetVertexAttribLdv_PACKED *packed_data = malloc(sizeof(glGetVertexAttribLdv_PACKED)); \
    packed_data->index = glGetVertexAttribLdv_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLdouble *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetVertexAttribLdvEXT(index, pname, params) ({ \
    glGetVertexAttribLdvEXT_PACKED *packed_data = malloc(sizeof(glGetVertexAttribLdvEXT_PACKED)); \
    packed_data->index = glGetVertexAttribLdvEXT_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLdouble *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetVertexAttribLi64vNV(index, pname, params) ({ \
    glGetVertexAttribLi64vNV_PACKED *packed_data = malloc(sizeof(glGetVertexAttribLi64vNV_PACKED)); \
    packed_data->index = glGetVertexAttribLi64vNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint64EXT *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetVertexAttribLui64vNV(index, pname, params) ({ \
    glGetVertexAttribLui64vNV_PACKED *packed_data = malloc(sizeof(glGetVertexAttribLui64vNV_PACKED)); \
    packed_data->index = glGetVertexAttribLui64vNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLuint64EXT *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetVertexAttribPointerv(index, pname, pointer) ({ \
    glGetVertexAttribPointerv_PACKED *packed_data = malloc(sizeof(glGetVertexAttribPointerv_PACKED)); \
    packed_data->index = glGetVertexAttribPointerv_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLvoid *)pointer; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetVertexAttribPointervARB(index, pname, pointer) ({ \
    glGetVertexAttribPointervARB_PACKED *packed_data = malloc(sizeof(glGetVertexAttribPointervARB_PACKED)); \
    packed_data->index = glGetVertexAttribPointervARB_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLvoid *)pointer; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetVertexAttribPointervNV(index, pname, pointer) ({ \
    glGetVertexAttribPointervNV_PACKED *packed_data = malloc(sizeof(glGetVertexAttribPointervNV_PACKED)); \
    packed_data->index = glGetVertexAttribPointervNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLvoid *)pointer; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetVertexAttribdv(index, pname, params) ({ \
    glGetVertexAttribdv_PACKED *packed_data = malloc(sizeof(glGetVertexAttribdv_PACKED)); \
    packed_data->index = glGetVertexAttribdv_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLdouble *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetVertexAttribdvARB(index, pname, params) ({ \
    glGetVertexAttribdvARB_PACKED *packed_data = malloc(sizeof(glGetVertexAttribdvARB_PACKED)); \
    packed_data->index = glGetVertexAttribdvARB_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLdouble *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetVertexAttribdvNV(index, pname, params) ({ \
    glGetVertexAttribdvNV_PACKED *packed_data = malloc(sizeof(glGetVertexAttribdvNV_PACKED)); \
    packed_data->index = glGetVertexAttribdvNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLdouble *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetVertexAttribfv(index, pname, params) ({ \
    glGetVertexAttribfv_PACKED *packed_data = malloc(sizeof(glGetVertexAttribfv_PACKED)); \
    packed_data->index = glGetVertexAttribfv_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetVertexAttribfvARB(index, pname, params) ({ \
    glGetVertexAttribfvARB_PACKED *packed_data = malloc(sizeof(glGetVertexAttribfvARB_PACKED)); \
    packed_data->index = glGetVertexAttribfvARB_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetVertexAttribfvNV(index, pname, params) ({ \
    glGetVertexAttribfvNV_PACKED *packed_data = malloc(sizeof(glGetVertexAttribfvNV_PACKED)); \
    packed_data->index = glGetVertexAttribfvNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetVertexAttribiv(index, pname, params) ({ \
    glGetVertexAttribiv_PACKED *packed_data = malloc(sizeof(glGetVertexAttribiv_PACKED)); \
    packed_data->index = glGetVertexAttribiv_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetVertexAttribivARB(index, pname, params) ({ \
    glGetVertexAttribivARB_PACKED *packed_data = malloc(sizeof(glGetVertexAttribivARB_PACKED)); \
    packed_data->index = glGetVertexAttribivARB_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetVertexAttribivNV(index, pname, params) ({ \
    glGetVertexAttribivNV_PACKED *packed_data = malloc(sizeof(glGetVertexAttribivNV_PACKED)); \
    packed_data->index = glGetVertexAttribivNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetVideoCaptureStreamdvNV(video_capture_slot, stream, pname, params) ({ \
    glGetVideoCaptureStreamdvNV_PACKED *packed_data = malloc(sizeof(glGetVideoCaptureStreamdvNV_PACKED)); \
    packed_data->index = glGetVideoCaptureStreamdvNV_INDEX; \
    packed_data->args.a1 = (GLuint)video_capture_slot; \
    packed_data->args.a2 = (GLuint)stream; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLdouble *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetVideoCaptureStreamfvNV(video_capture_slot, stream, pname, params) ({ \
    glGetVideoCaptureStreamfvNV_PACKED *packed_data = malloc(sizeof(glGetVideoCaptureStreamfvNV_PACKED)); \
    packed_data->index = glGetVideoCaptureStreamfvNV_INDEX; \
    packed_data->args.a1 = (GLuint)video_capture_slot; \
    packed_data->args.a2 = (GLuint)stream; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetVideoCaptureStreamivNV(video_capture_slot, stream, pname, params) ({ \
    glGetVideoCaptureStreamivNV_PACKED *packed_data = malloc(sizeof(glGetVideoCaptureStreamivNV_PACKED)); \
    packed_data->index = glGetVideoCaptureStreamivNV_INDEX; \
    packed_data->args.a1 = (GLuint)video_capture_slot; \
    packed_data->args.a2 = (GLuint)stream; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetVideoCaptureivNV(video_capture_slot, pname, params) ({ \
    glGetVideoCaptureivNV_PACKED *packed_data = malloc(sizeof(glGetVideoCaptureivNV_PACKED)); \
    packed_data->index = glGetVideoCaptureivNV_INDEX; \
    packed_data->args.a1 = (GLuint)video_capture_slot; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetVideoi64vNV(video_slot, pname, params) ({ \
    glGetVideoi64vNV_PACKED *packed_data = malloc(sizeof(glGetVideoi64vNV_PACKED)); \
    packed_data->index = glGetVideoi64vNV_INDEX; \
    packed_data->args.a1 = (GLuint)video_slot; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint64EXT *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetVideoivNV(video_slot, pname, params) ({ \
    glGetVideoivNV_PACKED *packed_data = malloc(sizeof(glGetVideoivNV_PACKED)); \
    packed_data->index = glGetVideoivNV_INDEX; \
    packed_data->args.a1 = (GLuint)video_slot; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetVideoui64vNV(video_slot, pname, params) ({ \
    glGetVideoui64vNV_PACKED *packed_data = malloc(sizeof(glGetVideoui64vNV_PACKED)); \
    packed_data->index = glGetVideoui64vNV_INDEX; \
    packed_data->args.a1 = (GLuint)video_slot; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLuint64EXT *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetVideouivNV(video_slot, pname, params) ({ \
    glGetVideouivNV_PACKED *packed_data = malloc(sizeof(glGetVideouivNV_PACKED)); \
    packed_data->index = glGetVideouivNV_INDEX; \
    packed_data->args.a1 = (GLuint)video_slot; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLuint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetnColorTableARB(target, format, type, bufSize, table) ({ \
    glGetnColorTableARB_PACKED *packed_data = malloc(sizeof(glGetnColorTableARB_PACKED)); \
    packed_data->index = glGetnColorTableARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)format; \
    packed_data->args.a3 = (GLenum)type; \
    packed_data->args.a4 = (GLsizei)bufSize; \
    packed_data->args.a5 = (GLvoid *)table; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetnCompressedTexImageARB(target, lod, bufSize, img) ({ \
    glGetnCompressedTexImageARB_PACKED *packed_data = malloc(sizeof(glGetnCompressedTexImageARB_PACKED)); \
    packed_data->index = glGetnCompressedTexImageARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint)lod; \
    packed_data->args.a3 = (GLsizei)bufSize; \
    packed_data->args.a4 = (GLvoid *)img; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetnConvolutionFilterARB(target, format, type, bufSize, image) ({ \
    glGetnConvolutionFilterARB_PACKED *packed_data = malloc(sizeof(glGetnConvolutionFilterARB_PACKED)); \
    packed_data->index = glGetnConvolutionFilterARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)format; \
    packed_data->args.a3 = (GLenum)type; \
    packed_data->args.a4 = (GLsizei)bufSize; \
    packed_data->args.a5 = (GLvoid *)image; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetnHistogramARB(target, reset, format, type, bufSize, values) ({ \
    glGetnHistogramARB_PACKED *packed_data = malloc(sizeof(glGetnHistogramARB_PACKED)); \
    packed_data->index = glGetnHistogramARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLboolean)reset; \
    packed_data->args.a3 = (GLenum)format; \
    packed_data->args.a4 = (GLenum)type; \
    packed_data->args.a5 = (GLsizei)bufSize; \
    packed_data->args.a6 = (GLvoid *)values; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetnMapdvARB(target, query, bufSize, v) ({ \
    glGetnMapdvARB_PACKED *packed_data = malloc(sizeof(glGetnMapdvARB_PACKED)); \
    packed_data->index = glGetnMapdvARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)query; \
    packed_data->args.a3 = (GLsizei)bufSize; \
    packed_data->args.a4 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetnMapfvARB(target, query, bufSize, v) ({ \
    glGetnMapfvARB_PACKED *packed_data = malloc(sizeof(glGetnMapfvARB_PACKED)); \
    packed_data->index = glGetnMapfvARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)query; \
    packed_data->args.a3 = (GLsizei)bufSize; \
    packed_data->args.a4 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetnMapivARB(target, query, bufSize, v) ({ \
    glGetnMapivARB_PACKED *packed_data = malloc(sizeof(glGetnMapivARB_PACKED)); \
    packed_data->index = glGetnMapivARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)query; \
    packed_data->args.a3 = (GLsizei)bufSize; \
    packed_data->args.a4 = (GLint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetnMinmaxARB(target, reset, format, type, bufSize, values) ({ \
    glGetnMinmaxARB_PACKED *packed_data = malloc(sizeof(glGetnMinmaxARB_PACKED)); \
    packed_data->index = glGetnMinmaxARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLboolean)reset; \
    packed_data->args.a3 = (GLenum)format; \
    packed_data->args.a4 = (GLenum)type; \
    packed_data->args.a5 = (GLsizei)bufSize; \
    packed_data->args.a6 = (GLvoid *)values; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetnPixelMapfvARB(map, bufSize, values) ({ \
    glGetnPixelMapfvARB_PACKED *packed_data = malloc(sizeof(glGetnPixelMapfvARB_PACKED)); \
    packed_data->index = glGetnPixelMapfvARB_INDEX; \
    packed_data->args.a1 = (GLenum)map; \
    packed_data->args.a2 = (GLsizei)bufSize; \
    packed_data->args.a3 = (GLfloat *)values; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetnPixelMapuivARB(map, bufSize, values) ({ \
    glGetnPixelMapuivARB_PACKED *packed_data = malloc(sizeof(glGetnPixelMapuivARB_PACKED)); \
    packed_data->index = glGetnPixelMapuivARB_INDEX; \
    packed_data->args.a1 = (GLenum)map; \
    packed_data->args.a2 = (GLsizei)bufSize; \
    packed_data->args.a3 = (GLuint *)values; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetnPixelMapusvARB(map, bufSize, values) ({ \
    glGetnPixelMapusvARB_PACKED *packed_data = malloc(sizeof(glGetnPixelMapusvARB_PACKED)); \
    packed_data->index = glGetnPixelMapusvARB_INDEX; \
    packed_data->args.a1 = (GLenum)map; \
    packed_data->args.a2 = (GLsizei)bufSize; \
    packed_data->args.a3 = (GLushort *)values; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetnPolygonStippleARB(bufSize, pattern) ({ \
    glGetnPolygonStippleARB_PACKED *packed_data = malloc(sizeof(glGetnPolygonStippleARB_PACKED)); \
    packed_data->index = glGetnPolygonStippleARB_INDEX; \
    packed_data->args.a1 = (GLsizei)bufSize; \
    packed_data->args.a2 = (GLubyte *)pattern; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetnSeparableFilterARB(target, format, type, rowBufSize, row, columnBufSize, column, span) ({ \
    glGetnSeparableFilterARB_PACKED *packed_data = malloc(sizeof(glGetnSeparableFilterARB_PACKED)); \
    packed_data->index = glGetnSeparableFilterARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)format; \
    packed_data->args.a3 = (GLenum)type; \
    packed_data->args.a4 = (GLsizei)rowBufSize; \
    packed_data->args.a5 = (GLvoid *)row; \
    packed_data->args.a6 = (GLsizei)columnBufSize; \
    packed_data->args.a7 = (GLvoid *)column; \
    packed_data->args.a8 = (GLvoid *)span; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetnTexImageARB(target, level, format, type, bufSize, img) ({ \
    glGetnTexImageARB_PACKED *packed_data = malloc(sizeof(glGetnTexImageARB_PACKED)); \
    packed_data->index = glGetnTexImageARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint)level; \
    packed_data->args.a3 = (GLenum)format; \
    packed_data->args.a4 = (GLenum)type; \
    packed_data->args.a5 = (GLsizei)bufSize; \
    packed_data->args.a6 = (GLvoid *)img; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetnUniformdvARB(program, location, bufSize, params) ({ \
    glGetnUniformdvARB_PACKED *packed_data = malloc(sizeof(glGetnUniformdvARB_PACKED)); \
    packed_data->index = glGetnUniformdvARB_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)bufSize; \
    packed_data->args.a4 = (GLdouble *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetnUniformfvARB(program, location, bufSize, params) ({ \
    glGetnUniformfvARB_PACKED *packed_data = malloc(sizeof(glGetnUniformfvARB_PACKED)); \
    packed_data->index = glGetnUniformfvARB_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)bufSize; \
    packed_data->args.a4 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetnUniformivARB(program, location, bufSize, params) ({ \
    glGetnUniformivARB_PACKED *packed_data = malloc(sizeof(glGetnUniformivARB_PACKED)); \
    packed_data->index = glGetnUniformivARB_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)bufSize; \
    packed_data->args.a4 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGetnUniformuivARB(program, location, bufSize, params) ({ \
    glGetnUniformuivARB_PACKED *packed_data = malloc(sizeof(glGetnUniformuivARB_PACKED)); \
    packed_data->index = glGetnUniformuivARB_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)bufSize; \
    packed_data->args.a4 = (GLuint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glGlobalAlphaFactorbSUN(factor) ({ \
    glGlobalAlphaFactorbSUN_PACKED *packed_data = malloc(sizeof(glGlobalAlphaFactorbSUN_PACKED)); \
    packed_data->index = glGlobalAlphaFactorbSUN_INDEX; \
    packed_data->args.a1 = (GLbyte)factor; \
    (packed_call_t *)packed_data; \
})
#define pack_glGlobalAlphaFactordSUN(factor) ({ \
    glGlobalAlphaFactordSUN_PACKED *packed_data = malloc(sizeof(glGlobalAlphaFactordSUN_PACKED)); \
    packed_data->index = glGlobalAlphaFactordSUN_INDEX; \
    packed_data->args.a1 = (GLdouble)factor; \
    (packed_call_t *)packed_data; \
})
#define pack_glGlobalAlphaFactorfSUN(factor) ({ \
    glGlobalAlphaFactorfSUN_PACKED *packed_data = malloc(sizeof(glGlobalAlphaFactorfSUN_PACKED)); \
    packed_data->index = glGlobalAlphaFactorfSUN_INDEX; \
    packed_data->args.a1 = (GLfloat)factor; \
    (packed_call_t *)packed_data; \
})
#define pack_glGlobalAlphaFactoriSUN(factor) ({ \
    glGlobalAlphaFactoriSUN_PACKED *packed_data = malloc(sizeof(glGlobalAlphaFactoriSUN_PACKED)); \
    packed_data->index = glGlobalAlphaFactoriSUN_INDEX; \
    packed_data->args.a1 = (GLint)factor; \
    (packed_call_t *)packed_data; \
})
#define pack_glGlobalAlphaFactorsSUN(factor) ({ \
    glGlobalAlphaFactorsSUN_PACKED *packed_data = malloc(sizeof(glGlobalAlphaFactorsSUN_PACKED)); \
    packed_data->index = glGlobalAlphaFactorsSUN_INDEX; \
    packed_data->args.a1 = (GLshort)factor; \
    (packed_call_t *)packed_data; \
})
#define pack_glGlobalAlphaFactorubSUN(factor) ({ \
    glGlobalAlphaFactorubSUN_PACKED *packed_data = malloc(sizeof(glGlobalAlphaFactorubSUN_PACKED)); \
    packed_data->index = glGlobalAlphaFactorubSUN_INDEX; \
    packed_data->args.a1 = (GLubyte)factor; \
    (packed_call_t *)packed_data; \
})
#define pack_glGlobalAlphaFactoruiSUN(factor) ({ \
    glGlobalAlphaFactoruiSUN_PACKED *packed_data = malloc(sizeof(glGlobalAlphaFactoruiSUN_PACKED)); \
    packed_data->index = glGlobalAlphaFactoruiSUN_INDEX; \
    packed_data->args.a1 = (GLuint)factor; \
    (packed_call_t *)packed_data; \
})
#define pack_glGlobalAlphaFactorusSUN(factor) ({ \
    glGlobalAlphaFactorusSUN_PACKED *packed_data = malloc(sizeof(glGlobalAlphaFactorusSUN_PACKED)); \
    packed_data->index = glGlobalAlphaFactorusSUN_INDEX; \
    packed_data->args.a1 = (GLushort)factor; \
    (packed_call_t *)packed_data; \
})
#define pack_glHint(target, mode) ({ \
    glHint_PACKED *packed_data = malloc(sizeof(glHint_PACKED)); \
    packed_data->index = glHint_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)mode; \
    (packed_call_t *)packed_data; \
})
#define pack_glHintPGI(target, mode) ({ \
    glHintPGI_PACKED *packed_data = malloc(sizeof(glHintPGI_PACKED)); \
    packed_data->index = glHintPGI_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint)mode; \
    (packed_call_t *)packed_data; \
})
#define pack_glHistogram(target, width, internalformat, sink) ({ \
    glHistogram_PACKED *packed_data = malloc(sizeof(glHistogram_PACKED)); \
    packed_data->index = glHistogram_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLsizei)width; \
    packed_data->args.a3 = (GLenum)internalformat; \
    packed_data->args.a4 = (GLboolean)sink; \
    (packed_call_t *)packed_data; \
})
#define pack_glHistogramEXT(target, width, internalformat, sink) ({ \
    glHistogramEXT_PACKED *packed_data = malloc(sizeof(glHistogramEXT_PACKED)); \
    packed_data->index = glHistogramEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLsizei)width; \
    packed_data->args.a3 = (GLenum)internalformat; \
    packed_data->args.a4 = (GLboolean)sink; \
    (packed_call_t *)packed_data; \
})
#define pack_glIglooInterfaceSGIX(pname, params) ({ \
    glIglooInterfaceSGIX_PACKED *packed_data = malloc(sizeof(glIglooInterfaceSGIX_PACKED)); \
    packed_data->index = glIglooInterfaceSGIX_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLvoid *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glImageTransformParameterfHP(target, pname, param) ({ \
    glImageTransformParameterfHP_PACKED *packed_data = malloc(sizeof(glImageTransformParameterfHP_PACKED)); \
    packed_data->index = glImageTransformParameterfHP_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glImageTransformParameterfvHP(target, pname, params) ({ \
    glImageTransformParameterfvHP_PACKED *packed_data = malloc(sizeof(glImageTransformParameterfvHP_PACKED)); \
    packed_data->index = glImageTransformParameterfvHP_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glImageTransformParameteriHP(target, pname, param) ({ \
    glImageTransformParameteriHP_PACKED *packed_data = malloc(sizeof(glImageTransformParameteriHP_PACKED)); \
    packed_data->index = glImageTransformParameteriHP_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glImageTransformParameterivHP(target, pname, params) ({ \
    glImageTransformParameterivHP_PACKED *packed_data = malloc(sizeof(glImageTransformParameterivHP_PACKED)); \
    packed_data->index = glImageTransformParameterivHP_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glImportSyncEXT(external_sync_type, external_sync, flags) ({ \
    glImportSyncEXT_PACKED *packed_data = malloc(sizeof(glImportSyncEXT_PACKED)); \
    packed_data->index = glImportSyncEXT_INDEX; \
    packed_data->args.a1 = (GLenum)external_sync_type; \
    packed_data->args.a2 = (GLintptr)external_sync; \
    packed_data->args.a3 = (GLbitfield)flags; \
    (packed_call_t *)packed_data; \
})
#define pack_glIndexFormatNV(type, stride) ({ \
    glIndexFormatNV_PACKED *packed_data = malloc(sizeof(glIndexFormatNV_PACKED)); \
    packed_data->index = glIndexFormatNV_INDEX; \
    packed_data->args.a1 = (GLenum)type; \
    packed_data->args.a2 = (GLsizei)stride; \
    (packed_call_t *)packed_data; \
})
#define pack_glIndexFuncEXT(func, ref) ({ \
    glIndexFuncEXT_PACKED *packed_data = malloc(sizeof(glIndexFuncEXT_PACKED)); \
    packed_data->index = glIndexFuncEXT_INDEX; \
    packed_data->args.a1 = (GLenum)func; \
    packed_data->args.a2 = (GLclampf)ref; \
    (packed_call_t *)packed_data; \
})
#define pack_glIndexMask(mask) ({ \
    glIndexMask_PACKED *packed_data = malloc(sizeof(glIndexMask_PACKED)); \
    packed_data->index = glIndexMask_INDEX; \
    packed_data->args.a1 = (GLuint)mask; \
    (packed_call_t *)packed_data; \
})
#define pack_glIndexMaterialEXT(face, mode) ({ \
    glIndexMaterialEXT_PACKED *packed_data = malloc(sizeof(glIndexMaterialEXT_PACKED)); \
    packed_data->index = glIndexMaterialEXT_INDEX; \
    packed_data->args.a1 = (GLenum)face; \
    packed_data->args.a2 = (GLenum)mode; \
    (packed_call_t *)packed_data; \
})
#define pack_glIndexPointer(type, stride, pointer) ({ \
    glIndexPointer_PACKED *packed_data = malloc(sizeof(glIndexPointer_PACKED)); \
    packed_data->index = glIndexPointer_INDEX; \
    packed_data->args.a1 = (GLenum)type; \
    packed_data->args.a2 = (GLsizei)stride; \
    packed_data->args.a3 = (GLvoid *)pointer; \
    (packed_call_t *)packed_data; \
})
#define pack_glIndexPointerEXT(type, stride, count, pointer) ({ \
    glIndexPointerEXT_PACKED *packed_data = malloc(sizeof(glIndexPointerEXT_PACKED)); \
    packed_data->index = glIndexPointerEXT_INDEX; \
    packed_data->args.a1 = (GLenum)type; \
    packed_data->args.a2 = (GLsizei)stride; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLvoid *)pointer; \
    (packed_call_t *)packed_data; \
})
#define pack_glIndexPointerListIBM(type, stride, pointer, ptrstride) ({ \
    glIndexPointerListIBM_PACKED *packed_data = malloc(sizeof(glIndexPointerListIBM_PACKED)); \
    packed_data->index = glIndexPointerListIBM_INDEX; \
    packed_data->args.a1 = (GLenum)type; \
    packed_data->args.a2 = (GLint)stride; \
    packed_data->args.a3 = (GLvoid *)pointer; \
    packed_data->args.a4 = (GLint)ptrstride; \
    (packed_call_t *)packed_data; \
})
#define pack_glIndexd(c) ({ \
    glIndexd_PACKED *packed_data = malloc(sizeof(glIndexd_PACKED)); \
    packed_data->index = glIndexd_INDEX; \
    packed_data->args.a1 = (GLdouble)c; \
    (packed_call_t *)packed_data; \
})
#define pack_glIndexdv(c) ({ \
    glIndexdv_PACKED *packed_data = malloc(sizeof(glIndexdv_PACKED)); \
    packed_data->index = glIndexdv_INDEX; \
    packed_data->args.a1 = (GLdouble *)c; \
    (packed_call_t *)packed_data; \
})
#define pack_glIndexf(c) ({ \
    glIndexf_PACKED *packed_data = malloc(sizeof(glIndexf_PACKED)); \
    packed_data->index = glIndexf_INDEX; \
    packed_data->args.a1 = (GLfloat)c; \
    (packed_call_t *)packed_data; \
})
#define pack_glIndexfv(c) ({ \
    glIndexfv_PACKED *packed_data = malloc(sizeof(glIndexfv_PACKED)); \
    packed_data->index = glIndexfv_INDEX; \
    packed_data->args.a1 = (GLfloat *)c; \
    (packed_call_t *)packed_data; \
})
#define pack_glIndexi(c) ({ \
    glIndexi_PACKED *packed_data = malloc(sizeof(glIndexi_PACKED)); \
    packed_data->index = glIndexi_INDEX; \
    packed_data->args.a1 = (GLint)c; \
    (packed_call_t *)packed_data; \
})
#define pack_glIndexiv(c) ({ \
    glIndexiv_PACKED *packed_data = malloc(sizeof(glIndexiv_PACKED)); \
    packed_data->index = glIndexiv_INDEX; \
    packed_data->args.a1 = (GLint *)c; \
    (packed_call_t *)packed_data; \
})
#define pack_glIndexs(c) ({ \
    glIndexs_PACKED *packed_data = malloc(sizeof(glIndexs_PACKED)); \
    packed_data->index = glIndexs_INDEX; \
    packed_data->args.a1 = (GLshort)c; \
    (packed_call_t *)packed_data; \
})
#define pack_glIndexsv(c) ({ \
    glIndexsv_PACKED *packed_data = malloc(sizeof(glIndexsv_PACKED)); \
    packed_data->index = glIndexsv_INDEX; \
    packed_data->args.a1 = (GLshort *)c; \
    (packed_call_t *)packed_data; \
})
#define pack_glIndexub(c) ({ \
    glIndexub_PACKED *packed_data = malloc(sizeof(glIndexub_PACKED)); \
    packed_data->index = glIndexub_INDEX; \
    packed_data->args.a1 = (GLubyte)c; \
    (packed_call_t *)packed_data; \
})
#define pack_glIndexubv(c) ({ \
    glIndexubv_PACKED *packed_data = malloc(sizeof(glIndexubv_PACKED)); \
    packed_data->index = glIndexubv_INDEX; \
    packed_data->args.a1 = (GLubyte *)c; \
    (packed_call_t *)packed_data; \
})
#define pack_glIndexxOES(component) ({ \
    glIndexxOES_PACKED *packed_data = malloc(sizeof(glIndexxOES_PACKED)); \
    packed_data->index = glIndexxOES_INDEX; \
    packed_data->args.a1 = (GLfixed)component; \
    (packed_call_t *)packed_data; \
})
#define pack_glIndexxvOES(component) ({ \
    glIndexxvOES_PACKED *packed_data = malloc(sizeof(glIndexxvOES_PACKED)); \
    packed_data->index = glIndexxvOES_INDEX; \
    packed_data->args.a1 = (GLfixed *)component; \
    (packed_call_t *)packed_data; \
})
#define pack_glInitNames() ({ \
    glInitNames_PACKED *packed_data = malloc(sizeof(glInitNames_PACKED)); \
    packed_data->index = glInitNames_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glInsertComponentEXT(res, src, num) ({ \
    glInsertComponentEXT_PACKED *packed_data = malloc(sizeof(glInsertComponentEXT_PACKED)); \
    packed_data->index = glInsertComponentEXT_INDEX; \
    packed_data->args.a1 = (GLuint)res; \
    packed_data->args.a2 = (GLuint)src; \
    packed_data->args.a3 = (GLuint)num; \
    (packed_call_t *)packed_data; \
})
#define pack_glInstrumentsBufferSGIX(size, buffer) ({ \
    glInstrumentsBufferSGIX_PACKED *packed_data = malloc(sizeof(glInstrumentsBufferSGIX_PACKED)); \
    packed_data->index = glInstrumentsBufferSGIX_INDEX; \
    packed_data->args.a1 = (GLsizei)size; \
    packed_data->args.a2 = (GLint *)buffer; \
    (packed_call_t *)packed_data; \
})
#define pack_glInterleavedArrays(format, stride, pointer) ({ \
    glInterleavedArrays_PACKED *packed_data = malloc(sizeof(glInterleavedArrays_PACKED)); \
    packed_data->index = glInterleavedArrays_INDEX; \
    packed_data->args.a1 = (GLenum)format; \
    packed_data->args.a2 = (GLsizei)stride; \
    packed_data->args.a3 = (GLvoid *)pointer; \
    (packed_call_t *)packed_data; \
})
#define pack_glInterpolatePathsNV(resultPath, pathA, pathB, weight) ({ \
    glInterpolatePathsNV_PACKED *packed_data = malloc(sizeof(glInterpolatePathsNV_PACKED)); \
    packed_data->index = glInterpolatePathsNV_INDEX; \
    packed_data->args.a1 = (GLuint)resultPath; \
    packed_data->args.a2 = (GLuint)pathA; \
    packed_data->args.a3 = (GLuint)pathB; \
    packed_data->args.a4 = (GLfloat)weight; \
    (packed_call_t *)packed_data; \
})
#define pack_glInvalidateBufferData(buffer) ({ \
    glInvalidateBufferData_PACKED *packed_data = malloc(sizeof(glInvalidateBufferData_PACKED)); \
    packed_data->index = glInvalidateBufferData_INDEX; \
    packed_data->args.a1 = (GLuint)buffer; \
    (packed_call_t *)packed_data; \
})
#define pack_glInvalidateBufferSubData(buffer, offset, length) ({ \
    glInvalidateBufferSubData_PACKED *packed_data = malloc(sizeof(glInvalidateBufferSubData_PACKED)); \
    packed_data->index = glInvalidateBufferSubData_INDEX; \
    packed_data->args.a1 = (GLuint)buffer; \
    packed_data->args.a2 = (GLintptr)offset; \
    packed_data->args.a3 = (GLsizeiptr)length; \
    (packed_call_t *)packed_data; \
})
#define pack_glInvalidateFramebuffer(target, numAttachments, attachments) ({ \
    glInvalidateFramebuffer_PACKED *packed_data = malloc(sizeof(glInvalidateFramebuffer_PACKED)); \
    packed_data->index = glInvalidateFramebuffer_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLsizei)numAttachments; \
    packed_data->args.a3 = (GLenum *)attachments; \
    (packed_call_t *)packed_data; \
})
#define pack_glInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height) ({ \
    glInvalidateSubFramebuffer_PACKED *packed_data = malloc(sizeof(glInvalidateSubFramebuffer_PACKED)); \
    packed_data->index = glInvalidateSubFramebuffer_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLsizei)numAttachments; \
    packed_data->args.a3 = (GLenum *)attachments; \
    packed_data->args.a4 = (GLint)x; \
    packed_data->args.a5 = (GLint)y; \
    packed_data->args.a6 = (GLsizei)width; \
    packed_data->args.a7 = (GLsizei)height; \
    (packed_call_t *)packed_data; \
})
#define pack_glInvalidateTexImage(texture, level) ({ \
    glInvalidateTexImage_PACKED *packed_data = malloc(sizeof(glInvalidateTexImage_PACKED)); \
    packed_data->index = glInvalidateTexImage_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    packed_data->args.a2 = (GLint)level; \
    (packed_call_t *)packed_data; \
})
#define pack_glInvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth) ({ \
    glInvalidateTexSubImage_PACKED *packed_data = malloc(sizeof(glInvalidateTexSubImage_PACKED)); \
    packed_data->index = glInvalidateTexSubImage_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    packed_data->args.a2 = (GLint)level; \
    packed_data->args.a3 = (GLint)xoffset; \
    packed_data->args.a4 = (GLint)yoffset; \
    packed_data->args.a5 = (GLint)zoffset; \
    packed_data->args.a6 = (GLsizei)width; \
    packed_data->args.a7 = (GLsizei)height; \
    packed_data->args.a8 = (GLsizei)depth; \
    (packed_call_t *)packed_data; \
})
#define pack_glIsAsyncMarkerSGIX(marker) ({ \
    glIsAsyncMarkerSGIX_PACKED *packed_data = malloc(sizeof(glIsAsyncMarkerSGIX_PACKED)); \
    packed_data->index = glIsAsyncMarkerSGIX_INDEX; \
    packed_data->args.a1 = (GLuint)marker; \
    (packed_call_t *)packed_data; \
})
#define pack_glIsBuffer(buffer) ({ \
    glIsBuffer_PACKED *packed_data = malloc(sizeof(glIsBuffer_PACKED)); \
    packed_data->index = glIsBuffer_INDEX; \
    packed_data->args.a1 = (GLuint)buffer; \
    (packed_call_t *)packed_data; \
})
#define pack_glIsBufferARB(buffer) ({ \
    glIsBufferARB_PACKED *packed_data = malloc(sizeof(glIsBufferARB_PACKED)); \
    packed_data->index = glIsBufferARB_INDEX; \
    packed_data->args.a1 = (GLuint)buffer; \
    (packed_call_t *)packed_data; \
})
#define pack_glIsBufferResidentNV(target) ({ \
    glIsBufferResidentNV_PACKED *packed_data = malloc(sizeof(glIsBufferResidentNV_PACKED)); \
    packed_data->index = glIsBufferResidentNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    (packed_call_t *)packed_data; \
})
#define pack_glIsEnabled(cap) ({ \
    glIsEnabled_PACKED *packed_data = malloc(sizeof(glIsEnabled_PACKED)); \
    packed_data->index = glIsEnabled_INDEX; \
    packed_data->args.a1 = (GLenum)cap; \
    (packed_call_t *)packed_data; \
})
#define pack_glIsEnabledIndexedEXT(target, index) ({ \
    glIsEnabledIndexedEXT_PACKED *packed_data = malloc(sizeof(glIsEnabledIndexedEXT_PACKED)); \
    packed_data->index = glIsEnabledIndexedEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    (packed_call_t *)packed_data; \
})
#define pack_glIsEnabledi(target, index) ({ \
    glIsEnabledi_PACKED *packed_data = malloc(sizeof(glIsEnabledi_PACKED)); \
    packed_data->index = glIsEnabledi_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    (packed_call_t *)packed_data; \
})
#define pack_glIsFenceAPPLE(fence) ({ \
    glIsFenceAPPLE_PACKED *packed_data = malloc(sizeof(glIsFenceAPPLE_PACKED)); \
    packed_data->index = glIsFenceAPPLE_INDEX; \
    packed_data->args.a1 = (GLuint)fence; \
    (packed_call_t *)packed_data; \
})
#define pack_glIsFenceNV(fence) ({ \
    glIsFenceNV_PACKED *packed_data = malloc(sizeof(glIsFenceNV_PACKED)); \
    packed_data->index = glIsFenceNV_INDEX; \
    packed_data->args.a1 = (GLuint)fence; \
    (packed_call_t *)packed_data; \
})
#define pack_glIsFramebuffer(framebuffer) ({ \
    glIsFramebuffer_PACKED *packed_data = malloc(sizeof(glIsFramebuffer_PACKED)); \
    packed_data->index = glIsFramebuffer_INDEX; \
    packed_data->args.a1 = (GLuint)framebuffer; \
    (packed_call_t *)packed_data; \
})
#define pack_glIsFramebufferEXT(framebuffer) ({ \
    glIsFramebufferEXT_PACKED *packed_data = malloc(sizeof(glIsFramebufferEXT_PACKED)); \
    packed_data->index = glIsFramebufferEXT_INDEX; \
    packed_data->args.a1 = (GLuint)framebuffer; \
    (packed_call_t *)packed_data; \
})
#define pack_glIsImageHandleResidentNV(handle) ({ \
    glIsImageHandleResidentNV_PACKED *packed_data = malloc(sizeof(glIsImageHandleResidentNV_PACKED)); \
    packed_data->index = glIsImageHandleResidentNV_INDEX; \
    packed_data->args.a1 = (GLuint64)handle; \
    (packed_call_t *)packed_data; \
})
#define pack_glIsList(list) ({ \
    glIsList_PACKED *packed_data = malloc(sizeof(glIsList_PACKED)); \
    packed_data->index = glIsList_INDEX; \
    packed_data->args.a1 = (GLuint)list; \
    (packed_call_t *)packed_data; \
})
#define pack_glIsNameAMD(identifier, name) ({ \
    glIsNameAMD_PACKED *packed_data = malloc(sizeof(glIsNameAMD_PACKED)); \
    packed_data->index = glIsNameAMD_INDEX; \
    packed_data->args.a1 = (GLenum)identifier; \
    packed_data->args.a2 = (GLuint)name; \
    (packed_call_t *)packed_data; \
})
#define pack_glIsNamedBufferResidentNV(buffer) ({ \
    glIsNamedBufferResidentNV_PACKED *packed_data = malloc(sizeof(glIsNamedBufferResidentNV_PACKED)); \
    packed_data->index = glIsNamedBufferResidentNV_INDEX; \
    packed_data->args.a1 = (GLuint)buffer; \
    (packed_call_t *)packed_data; \
})
#define pack_glIsNamedStringARB(namelen, name) ({ \
    glIsNamedStringARB_PACKED *packed_data = malloc(sizeof(glIsNamedStringARB_PACKED)); \
    packed_data->index = glIsNamedStringARB_INDEX; \
    packed_data->args.a1 = (GLint)namelen; \
    packed_data->args.a2 = (GLchar *)name; \
    (packed_call_t *)packed_data; \
})
#define pack_glIsObjectBufferATI(buffer) ({ \
    glIsObjectBufferATI_PACKED *packed_data = malloc(sizeof(glIsObjectBufferATI_PACKED)); \
    packed_data->index = glIsObjectBufferATI_INDEX; \
    packed_data->args.a1 = (GLuint)buffer; \
    (packed_call_t *)packed_data; \
})
#define pack_glIsOcclusionQueryNV(id) ({ \
    glIsOcclusionQueryNV_PACKED *packed_data = malloc(sizeof(glIsOcclusionQueryNV_PACKED)); \
    packed_data->index = glIsOcclusionQueryNV_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    (packed_call_t *)packed_data; \
})
#define pack_glIsPathNV(path) ({ \
    glIsPathNV_PACKED *packed_data = malloc(sizeof(glIsPathNV_PACKED)); \
    packed_data->index = glIsPathNV_INDEX; \
    packed_data->args.a1 = (GLuint)path; \
    (packed_call_t *)packed_data; \
})
#define pack_glIsPointInFillPathNV(path, mask, x, y) ({ \
    glIsPointInFillPathNV_PACKED *packed_data = malloc(sizeof(glIsPointInFillPathNV_PACKED)); \
    packed_data->index = glIsPointInFillPathNV_INDEX; \
    packed_data->args.a1 = (GLuint)path; \
    packed_data->args.a2 = (GLuint)mask; \
    packed_data->args.a3 = (GLfloat)x; \
    packed_data->args.a4 = (GLfloat)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glIsPointInStrokePathNV(path, x, y) ({ \
    glIsPointInStrokePathNV_PACKED *packed_data = malloc(sizeof(glIsPointInStrokePathNV_PACKED)); \
    packed_data->index = glIsPointInStrokePathNV_INDEX; \
    packed_data->args.a1 = (GLuint)path; \
    packed_data->args.a2 = (GLfloat)x; \
    packed_data->args.a3 = (GLfloat)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glIsProgram(program) ({ \
    glIsProgram_PACKED *packed_data = malloc(sizeof(glIsProgram_PACKED)); \
    packed_data->index = glIsProgram_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    (packed_call_t *)packed_data; \
})
#define pack_glIsProgramARB(program) ({ \
    glIsProgramARB_PACKED *packed_data = malloc(sizeof(glIsProgramARB_PACKED)); \
    packed_data->index = glIsProgramARB_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    (packed_call_t *)packed_data; \
})
#define pack_glIsProgramNV(id) ({ \
    glIsProgramNV_PACKED *packed_data = malloc(sizeof(glIsProgramNV_PACKED)); \
    packed_data->index = glIsProgramNV_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    (packed_call_t *)packed_data; \
})
#define pack_glIsProgramPipeline(pipeline) ({ \
    glIsProgramPipeline_PACKED *packed_data = malloc(sizeof(glIsProgramPipeline_PACKED)); \
    packed_data->index = glIsProgramPipeline_INDEX; \
    packed_data->args.a1 = (GLuint)pipeline; \
    (packed_call_t *)packed_data; \
})
#define pack_glIsQuery(id) ({ \
    glIsQuery_PACKED *packed_data = malloc(sizeof(glIsQuery_PACKED)); \
    packed_data->index = glIsQuery_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    (packed_call_t *)packed_data; \
})
#define pack_glIsQueryARB(id) ({ \
    glIsQueryARB_PACKED *packed_data = malloc(sizeof(glIsQueryARB_PACKED)); \
    packed_data->index = glIsQueryARB_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    (packed_call_t *)packed_data; \
})
#define pack_glIsRenderbuffer(renderbuffer) ({ \
    glIsRenderbuffer_PACKED *packed_data = malloc(sizeof(glIsRenderbuffer_PACKED)); \
    packed_data->index = glIsRenderbuffer_INDEX; \
    packed_data->args.a1 = (GLuint)renderbuffer; \
    (packed_call_t *)packed_data; \
})
#define pack_glIsRenderbufferEXT(renderbuffer) ({ \
    glIsRenderbufferEXT_PACKED *packed_data = malloc(sizeof(glIsRenderbufferEXT_PACKED)); \
    packed_data->index = glIsRenderbufferEXT_INDEX; \
    packed_data->args.a1 = (GLuint)renderbuffer; \
    (packed_call_t *)packed_data; \
})
#define pack_glIsSampler(sampler) ({ \
    glIsSampler_PACKED *packed_data = malloc(sizeof(glIsSampler_PACKED)); \
    packed_data->index = glIsSampler_INDEX; \
    packed_data->args.a1 = (GLuint)sampler; \
    (packed_call_t *)packed_data; \
})
#define pack_glIsShader(shader) ({ \
    glIsShader_PACKED *packed_data = malloc(sizeof(glIsShader_PACKED)); \
    packed_data->index = glIsShader_INDEX; \
    packed_data->args.a1 = (GLuint)shader; \
    (packed_call_t *)packed_data; \
})
#define pack_glIsSync(sync) ({ \
    glIsSync_PACKED *packed_data = malloc(sizeof(glIsSync_PACKED)); \
    packed_data->index = glIsSync_INDEX; \
    packed_data->args.a1 = (GLsync)sync; \
    (packed_call_t *)packed_data; \
})
#define pack_glIsTexture(texture) ({ \
    glIsTexture_PACKED *packed_data = malloc(sizeof(glIsTexture_PACKED)); \
    packed_data->index = glIsTexture_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    (packed_call_t *)packed_data; \
})
#define pack_glIsTextureEXT(texture) ({ \
    glIsTextureEXT_PACKED *packed_data = malloc(sizeof(glIsTextureEXT_PACKED)); \
    packed_data->index = glIsTextureEXT_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    (packed_call_t *)packed_data; \
})
#define pack_glIsTextureHandleResidentNV(handle) ({ \
    glIsTextureHandleResidentNV_PACKED *packed_data = malloc(sizeof(glIsTextureHandleResidentNV_PACKED)); \
    packed_data->index = glIsTextureHandleResidentNV_INDEX; \
    packed_data->args.a1 = (GLuint64)handle; \
    (packed_call_t *)packed_data; \
})
#define pack_glIsTransformFeedback(id) ({ \
    glIsTransformFeedback_PACKED *packed_data = malloc(sizeof(glIsTransformFeedback_PACKED)); \
    packed_data->index = glIsTransformFeedback_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    (packed_call_t *)packed_data; \
})
#define pack_glIsTransformFeedbackNV(id) ({ \
    glIsTransformFeedbackNV_PACKED *packed_data = malloc(sizeof(glIsTransformFeedbackNV_PACKED)); \
    packed_data->index = glIsTransformFeedbackNV_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    (packed_call_t *)packed_data; \
})
#define pack_glIsVariantEnabledEXT(id, cap) ({ \
    glIsVariantEnabledEXT_PACKED *packed_data = malloc(sizeof(glIsVariantEnabledEXT_PACKED)); \
    packed_data->index = glIsVariantEnabledEXT_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    packed_data->args.a2 = (GLenum)cap; \
    (packed_call_t *)packed_data; \
})
#define pack_glIsVertexArray(array) ({ \
    glIsVertexArray_PACKED *packed_data = malloc(sizeof(glIsVertexArray_PACKED)); \
    packed_data->index = glIsVertexArray_INDEX; \
    packed_data->args.a1 = (GLuint)array; \
    (packed_call_t *)packed_data; \
})
#define pack_glIsVertexArrayAPPLE(array) ({ \
    glIsVertexArrayAPPLE_PACKED *packed_data = malloc(sizeof(glIsVertexArrayAPPLE_PACKED)); \
    packed_data->index = glIsVertexArrayAPPLE_INDEX; \
    packed_data->args.a1 = (GLuint)array; \
    (packed_call_t *)packed_data; \
})
#define pack_glIsVertexAttribEnabledAPPLE(index, pname) ({ \
    glIsVertexAttribEnabledAPPLE_PACKED *packed_data = malloc(sizeof(glIsVertexAttribEnabledAPPLE_PACKED)); \
    packed_data->index = glIsVertexAttribEnabledAPPLE_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLenum)pname; \
    (packed_call_t *)packed_data; \
})
#define pack_glLightEnviSGIX(pname, param) ({ \
    glLightEnviSGIX_PACKED *packed_data = malloc(sizeof(glLightEnviSGIX_PACKED)); \
    packed_data->index = glLightEnviSGIX_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLint)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glLightModelf(pname, param) ({ \
    glLightModelf_PACKED *packed_data = malloc(sizeof(glLightModelf_PACKED)); \
    packed_data->index = glLightModelf_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLfloat)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glLightModelfv(pname, params) ({ \
    glLightModelfv_PACKED *packed_data = malloc(sizeof(glLightModelfv_PACKED)); \
    packed_data->index = glLightModelfv_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glLightModeli(pname, param) ({ \
    glLightModeli_PACKED *packed_data = malloc(sizeof(glLightModeli_PACKED)); \
    packed_data->index = glLightModeli_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLint)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glLightModeliv(pname, params) ({ \
    glLightModeliv_PACKED *packed_data = malloc(sizeof(glLightModeliv_PACKED)); \
    packed_data->index = glLightModeliv_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glLightModelx(pname, param) ({ \
    glLightModelx_PACKED *packed_data = malloc(sizeof(glLightModelx_PACKED)); \
    packed_data->index = glLightModelx_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLfixed)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glLightModelxOES(pname, param) ({ \
    glLightModelxOES_PACKED *packed_data = malloc(sizeof(glLightModelxOES_PACKED)); \
    packed_data->index = glLightModelxOES_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLfixed)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glLightModelxv(pname, params) ({ \
    glLightModelxv_PACKED *packed_data = malloc(sizeof(glLightModelxv_PACKED)); \
    packed_data->index = glLightModelxv_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLfixed *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glLightModelxvOES(pname, param) ({ \
    glLightModelxvOES_PACKED *packed_data = malloc(sizeof(glLightModelxvOES_PACKED)); \
    packed_data->index = glLightModelxvOES_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLfixed *)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glLightf(light, pname, param) ({ \
    glLightf_PACKED *packed_data = malloc(sizeof(glLightf_PACKED)); \
    packed_data->index = glLightf_INDEX; \
    packed_data->args.a1 = (GLenum)light; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glLightfv(light, pname, params) ({ \
    glLightfv_PACKED *packed_data = malloc(sizeof(glLightfv_PACKED)); \
    packed_data->index = glLightfv_INDEX; \
    packed_data->args.a1 = (GLenum)light; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glLighti(light, pname, param) ({ \
    glLighti_PACKED *packed_data = malloc(sizeof(glLighti_PACKED)); \
    packed_data->index = glLighti_INDEX; \
    packed_data->args.a1 = (GLenum)light; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glLightiv(light, pname, params) ({ \
    glLightiv_PACKED *packed_data = malloc(sizeof(glLightiv_PACKED)); \
    packed_data->index = glLightiv_INDEX; \
    packed_data->args.a1 = (GLenum)light; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glLightx(light, pname, param) ({ \
    glLightx_PACKED *packed_data = malloc(sizeof(glLightx_PACKED)); \
    packed_data->index = glLightx_INDEX; \
    packed_data->args.a1 = (GLenum)light; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfixed)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glLightxOES(light, pname, param) ({ \
    glLightxOES_PACKED *packed_data = malloc(sizeof(glLightxOES_PACKED)); \
    packed_data->index = glLightxOES_INDEX; \
    packed_data->args.a1 = (GLenum)light; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfixed)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glLightxv(light, pname, params) ({ \
    glLightxv_PACKED *packed_data = malloc(sizeof(glLightxv_PACKED)); \
    packed_data->index = glLightxv_INDEX; \
    packed_data->args.a1 = (GLenum)light; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfixed *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glLightxvOES(light, pname, params) ({ \
    glLightxvOES_PACKED *packed_data = malloc(sizeof(glLightxvOES_PACKED)); \
    packed_data->index = glLightxvOES_INDEX; \
    packed_data->args.a1 = (GLenum)light; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfixed *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glLineStipple(factor, pattern) ({ \
    glLineStipple_PACKED *packed_data = malloc(sizeof(glLineStipple_PACKED)); \
    packed_data->index = glLineStipple_INDEX; \
    packed_data->args.a1 = (GLint)factor; \
    packed_data->args.a2 = (GLushort)pattern; \
    (packed_call_t *)packed_data; \
})
#define pack_glLineWidth(width) ({ \
    glLineWidth_PACKED *packed_data = malloc(sizeof(glLineWidth_PACKED)); \
    packed_data->index = glLineWidth_INDEX; \
    packed_data->args.a1 = (GLfloat)width; \
    (packed_call_t *)packed_data; \
})
#define pack_glLineWidthx(width) ({ \
    glLineWidthx_PACKED *packed_data = malloc(sizeof(glLineWidthx_PACKED)); \
    packed_data->index = glLineWidthx_INDEX; \
    packed_data->args.a1 = (GLfixed)width; \
    (packed_call_t *)packed_data; \
})
#define pack_glLineWidthxOES(width) ({ \
    glLineWidthxOES_PACKED *packed_data = malloc(sizeof(glLineWidthxOES_PACKED)); \
    packed_data->index = glLineWidthxOES_INDEX; \
    packed_data->args.a1 = (GLfixed)width; \
    (packed_call_t *)packed_data; \
})
#define pack_glLinkProgram(program) ({ \
    glLinkProgram_PACKED *packed_data = malloc(sizeof(glLinkProgram_PACKED)); \
    packed_data->index = glLinkProgram_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    (packed_call_t *)packed_data; \
})
#define pack_glLinkProgramARB(programObj) ({ \
    glLinkProgramARB_PACKED *packed_data = malloc(sizeof(glLinkProgramARB_PACKED)); \
    packed_data->index = glLinkProgramARB_INDEX; \
    packed_data->args.a1 = (GLhandleARB)programObj; \
    (packed_call_t *)packed_data; \
})
#define pack_glListBase(base) ({ \
    glListBase_PACKED *packed_data = malloc(sizeof(glListBase_PACKED)); \
    packed_data->index = glListBase_INDEX; \
    packed_data->args.a1 = (GLuint)base; \
    (packed_call_t *)packed_data; \
})
#define pack_glListParameterfSGIX(list, pname, param) ({ \
    glListParameterfSGIX_PACKED *packed_data = malloc(sizeof(glListParameterfSGIX_PACKED)); \
    packed_data->index = glListParameterfSGIX_INDEX; \
    packed_data->args.a1 = (GLuint)list; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glListParameterfvSGIX(list, pname, params) ({ \
    glListParameterfvSGIX_PACKED *packed_data = malloc(sizeof(glListParameterfvSGIX_PACKED)); \
    packed_data->index = glListParameterfvSGIX_INDEX; \
    packed_data->args.a1 = (GLuint)list; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glListParameteriSGIX(list, pname, param) ({ \
    glListParameteriSGIX_PACKED *packed_data = malloc(sizeof(glListParameteriSGIX_PACKED)); \
    packed_data->index = glListParameteriSGIX_INDEX; \
    packed_data->args.a1 = (GLuint)list; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glListParameterivSGIX(list, pname, params) ({ \
    glListParameterivSGIX_PACKED *packed_data = malloc(sizeof(glListParameterivSGIX_PACKED)); \
    packed_data->index = glListParameterivSGIX_INDEX; \
    packed_data->args.a1 = (GLuint)list; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glLoadIdentity() ({ \
    glLoadIdentity_PACKED *packed_data = malloc(sizeof(glLoadIdentity_PACKED)); \
    packed_data->index = glLoadIdentity_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glLoadIdentityDeformationMapSGIX(mask) ({ \
    glLoadIdentityDeformationMapSGIX_PACKED *packed_data = malloc(sizeof(glLoadIdentityDeformationMapSGIX_PACKED)); \
    packed_data->index = glLoadIdentityDeformationMapSGIX_INDEX; \
    packed_data->args.a1 = (GLbitfield)mask; \
    (packed_call_t *)packed_data; \
})
#define pack_glLoadMatrixd(m) ({ \
    glLoadMatrixd_PACKED *packed_data = malloc(sizeof(glLoadMatrixd_PACKED)); \
    packed_data->index = glLoadMatrixd_INDEX; \
    packed_data->args.a1 = (GLdouble *)m; \
    (packed_call_t *)packed_data; \
})
#define pack_glLoadMatrixf(m) ({ \
    glLoadMatrixf_PACKED *packed_data = malloc(sizeof(glLoadMatrixf_PACKED)); \
    packed_data->index = glLoadMatrixf_INDEX; \
    packed_data->args.a1 = (GLfloat *)m; \
    (packed_call_t *)packed_data; \
})
#define pack_glLoadMatrixx(m) ({ \
    glLoadMatrixx_PACKED *packed_data = malloc(sizeof(glLoadMatrixx_PACKED)); \
    packed_data->index = glLoadMatrixx_INDEX; \
    packed_data->args.a1 = (GLfixed *)m; \
    (packed_call_t *)packed_data; \
})
#define pack_glLoadMatrixxOES(m) ({ \
    glLoadMatrixxOES_PACKED *packed_data = malloc(sizeof(glLoadMatrixxOES_PACKED)); \
    packed_data->index = glLoadMatrixxOES_INDEX; \
    packed_data->args.a1 = (GLfixed *)m; \
    (packed_call_t *)packed_data; \
})
#define pack_glLoadName(name) ({ \
    glLoadName_PACKED *packed_data = malloc(sizeof(glLoadName_PACKED)); \
    packed_data->index = glLoadName_INDEX; \
    packed_data->args.a1 = (GLuint)name; \
    (packed_call_t *)packed_data; \
})
#define pack_glLoadProgramNV(target, id, len, program) ({ \
    glLoadProgramNV_PACKED *packed_data = malloc(sizeof(glLoadProgramNV_PACKED)); \
    packed_data->index = glLoadProgramNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)id; \
    packed_data->args.a3 = (GLsizei)len; \
    packed_data->args.a4 = (GLubyte *)program; \
    (packed_call_t *)packed_data; \
})
#define pack_glLoadTransposeMatrixd(m) ({ \
    glLoadTransposeMatrixd_PACKED *packed_data = malloc(sizeof(glLoadTransposeMatrixd_PACKED)); \
    packed_data->index = glLoadTransposeMatrixd_INDEX; \
    packed_data->args.a1 = (GLdouble *)m; \
    (packed_call_t *)packed_data; \
})
#define pack_glLoadTransposeMatrixdARB(m) ({ \
    glLoadTransposeMatrixdARB_PACKED *packed_data = malloc(sizeof(glLoadTransposeMatrixdARB_PACKED)); \
    packed_data->index = glLoadTransposeMatrixdARB_INDEX; \
    packed_data->args.a1 = (GLdouble *)m; \
    (packed_call_t *)packed_data; \
})
#define pack_glLoadTransposeMatrixf(m) ({ \
    glLoadTransposeMatrixf_PACKED *packed_data = malloc(sizeof(glLoadTransposeMatrixf_PACKED)); \
    packed_data->index = glLoadTransposeMatrixf_INDEX; \
    packed_data->args.a1 = (GLfloat *)m; \
    (packed_call_t *)packed_data; \
})
#define pack_glLoadTransposeMatrixfARB(m) ({ \
    glLoadTransposeMatrixfARB_PACKED *packed_data = malloc(sizeof(glLoadTransposeMatrixfARB_PACKED)); \
    packed_data->index = glLoadTransposeMatrixfARB_INDEX; \
    packed_data->args.a1 = (GLfloat *)m; \
    (packed_call_t *)packed_data; \
})
#define pack_glLoadTransposeMatrixxOES(m) ({ \
    glLoadTransposeMatrixxOES_PACKED *packed_data = malloc(sizeof(glLoadTransposeMatrixxOES_PACKED)); \
    packed_data->index = glLoadTransposeMatrixxOES_INDEX; \
    packed_data->args.a1 = (GLfixed *)m; \
    (packed_call_t *)packed_data; \
})
#define pack_glLockArraysEXT(first, count) ({ \
    glLockArraysEXT_PACKED *packed_data = malloc(sizeof(glLockArraysEXT_PACKED)); \
    packed_data->index = glLockArraysEXT_INDEX; \
    packed_data->args.a1 = (GLint)first; \
    packed_data->args.a2 = (GLsizei)count; \
    (packed_call_t *)packed_data; \
})
#define pack_glLogicOp(opcode) ({ \
    glLogicOp_PACKED *packed_data = malloc(sizeof(glLogicOp_PACKED)); \
    packed_data->index = glLogicOp_INDEX; \
    packed_data->args.a1 = (GLenum)opcode; \
    (packed_call_t *)packed_data; \
})
#define pack_glMakeBufferNonResidentNV(target) ({ \
    glMakeBufferNonResidentNV_PACKED *packed_data = malloc(sizeof(glMakeBufferNonResidentNV_PACKED)); \
    packed_data->index = glMakeBufferNonResidentNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    (packed_call_t *)packed_data; \
})
#define pack_glMakeBufferResidentNV(target, access) ({ \
    glMakeBufferResidentNV_PACKED *packed_data = malloc(sizeof(glMakeBufferResidentNV_PACKED)); \
    packed_data->index = glMakeBufferResidentNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)access; \
    (packed_call_t *)packed_data; \
})
#define pack_glMakeImageHandleNonResidentNV(handle) ({ \
    glMakeImageHandleNonResidentNV_PACKED *packed_data = malloc(sizeof(glMakeImageHandleNonResidentNV_PACKED)); \
    packed_data->index = glMakeImageHandleNonResidentNV_INDEX; \
    packed_data->args.a1 = (GLuint64)handle; \
    (packed_call_t *)packed_data; \
})
#define pack_glMakeImageHandleResidentNV(handle, access) ({ \
    glMakeImageHandleResidentNV_PACKED *packed_data = malloc(sizeof(glMakeImageHandleResidentNV_PACKED)); \
    packed_data->index = glMakeImageHandleResidentNV_INDEX; \
    packed_data->args.a1 = (GLuint64)handle; \
    packed_data->args.a2 = (GLenum)access; \
    (packed_call_t *)packed_data; \
})
#define pack_glMakeNamedBufferNonResidentNV(buffer) ({ \
    glMakeNamedBufferNonResidentNV_PACKED *packed_data = malloc(sizeof(glMakeNamedBufferNonResidentNV_PACKED)); \
    packed_data->index = glMakeNamedBufferNonResidentNV_INDEX; \
    packed_data->args.a1 = (GLuint)buffer; \
    (packed_call_t *)packed_data; \
})
#define pack_glMakeNamedBufferResidentNV(buffer, access) ({ \
    glMakeNamedBufferResidentNV_PACKED *packed_data = malloc(sizeof(glMakeNamedBufferResidentNV_PACKED)); \
    packed_data->index = glMakeNamedBufferResidentNV_INDEX; \
    packed_data->args.a1 = (GLuint)buffer; \
    packed_data->args.a2 = (GLenum)access; \
    (packed_call_t *)packed_data; \
})
#define pack_glMakeTextureHandleNonResidentNV(handle) ({ \
    glMakeTextureHandleNonResidentNV_PACKED *packed_data = malloc(sizeof(glMakeTextureHandleNonResidentNV_PACKED)); \
    packed_data->index = glMakeTextureHandleNonResidentNV_INDEX; \
    packed_data->args.a1 = (GLuint64)handle; \
    (packed_call_t *)packed_data; \
})
#define pack_glMakeTextureHandleResidentNV(handle) ({ \
    glMakeTextureHandleResidentNV_PACKED *packed_data = malloc(sizeof(glMakeTextureHandleResidentNV_PACKED)); \
    packed_data->index = glMakeTextureHandleResidentNV_INDEX; \
    packed_data->args.a1 = (GLuint64)handle; \
    (packed_call_t *)packed_data; \
})
#define pack_glMap1d(target, u1, u2, stride, order, points) ({ \
    glMap1d_PACKED *packed_data = malloc(sizeof(glMap1d_PACKED)); \
    packed_data->index = glMap1d_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLdouble)u1; \
    packed_data->args.a3 = (GLdouble)u2; \
    packed_data->args.a4 = (GLint)stride; \
    packed_data->args.a5 = (GLint)order; \
    packed_data->args.a6 = (GLdouble *)points; \
    (packed_call_t *)packed_data; \
})
#define pack_glMap1f(target, u1, u2, stride, order, points) ({ \
    glMap1f_PACKED *packed_data = malloc(sizeof(glMap1f_PACKED)); \
    packed_data->index = glMap1f_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLfloat)u1; \
    packed_data->args.a3 = (GLfloat)u2; \
    packed_data->args.a4 = (GLint)stride; \
    packed_data->args.a5 = (GLint)order; \
    packed_data->args.a6 = (GLfloat *)points; \
    (packed_call_t *)packed_data; \
})
#define pack_glMap1xOES(target, u1, u2, stride, order, points) ({ \
    glMap1xOES_PACKED *packed_data = malloc(sizeof(glMap1xOES_PACKED)); \
    packed_data->index = glMap1xOES_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLfixed)u1; \
    packed_data->args.a3 = (GLfixed)u2; \
    packed_data->args.a4 = (GLint)stride; \
    packed_data->args.a5 = (GLint)order; \
    packed_data->args.a6 = (GLfixed)points; \
    (packed_call_t *)packed_data; \
})
#define pack_glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) ({ \
    glMap2d_PACKED *packed_data = malloc(sizeof(glMap2d_PACKED)); \
    packed_data->index = glMap2d_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLdouble)u1; \
    packed_data->args.a3 = (GLdouble)u2; \
    packed_data->args.a4 = (GLint)ustride; \
    packed_data->args.a5 = (GLint)uorder; \
    packed_data->args.a6 = (GLdouble)v1; \
    packed_data->args.a7 = (GLdouble)v2; \
    packed_data->args.a8 = (GLint)vstride; \
    packed_data->args.a9 = (GLint)vorder; \
    packed_data->args.a10 = (GLdouble *)points; \
    (packed_call_t *)packed_data; \
})
#define pack_glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) ({ \
    glMap2f_PACKED *packed_data = malloc(sizeof(glMap2f_PACKED)); \
    packed_data->index = glMap2f_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLfloat)u1; \
    packed_data->args.a3 = (GLfloat)u2; \
    packed_data->args.a4 = (GLint)ustride; \
    packed_data->args.a5 = (GLint)uorder; \
    packed_data->args.a6 = (GLfloat)v1; \
    packed_data->args.a7 = (GLfloat)v2; \
    packed_data->args.a8 = (GLint)vstride; \
    packed_data->args.a9 = (GLint)vorder; \
    packed_data->args.a10 = (GLfloat *)points; \
    (packed_call_t *)packed_data; \
})
#define pack_glMap2xOES(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) ({ \
    glMap2xOES_PACKED *packed_data = malloc(sizeof(glMap2xOES_PACKED)); \
    packed_data->index = glMap2xOES_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLfixed)u1; \
    packed_data->args.a3 = (GLfixed)u2; \
    packed_data->args.a4 = (GLint)ustride; \
    packed_data->args.a5 = (GLint)uorder; \
    packed_data->args.a6 = (GLfixed)v1; \
    packed_data->args.a7 = (GLfixed)v2; \
    packed_data->args.a8 = (GLint)vstride; \
    packed_data->args.a9 = (GLint)vorder; \
    packed_data->args.a10 = (GLfixed)points; \
    (packed_call_t *)packed_data; \
})
#define pack_glMapBuffer(target, access) ({ \
    glMapBuffer_PACKED *packed_data = malloc(sizeof(glMapBuffer_PACKED)); \
    packed_data->index = glMapBuffer_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)access; \
    (packed_call_t *)packed_data; \
})
#define pack_glMapBufferARB(target, access) ({ \
    glMapBufferARB_PACKED *packed_data = malloc(sizeof(glMapBufferARB_PACKED)); \
    packed_data->index = glMapBufferARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)access; \
    (packed_call_t *)packed_data; \
})
#define pack_glMapBufferRange(target, offset, length, access) ({ \
    glMapBufferRange_PACKED *packed_data = malloc(sizeof(glMapBufferRange_PACKED)); \
    packed_data->index = glMapBufferRange_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLintptr)offset; \
    packed_data->args.a3 = (GLsizeiptr)length; \
    packed_data->args.a4 = (GLbitfield)access; \
    (packed_call_t *)packed_data; \
})
#define pack_glMapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed, points) ({ \
    glMapControlPointsNV_PACKED *packed_data = malloc(sizeof(glMapControlPointsNV_PACKED)); \
    packed_data->index = glMapControlPointsNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLenum)type; \
    packed_data->args.a4 = (GLsizei)ustride; \
    packed_data->args.a5 = (GLsizei)vstride; \
    packed_data->args.a6 = (GLint)uorder; \
    packed_data->args.a7 = (GLint)vorder; \
    packed_data->args.a8 = (GLboolean)packed; \
    packed_data->args.a9 = (GLvoid *)points; \
    (packed_call_t *)packed_data; \
})
#define pack_glMapGrid1d(un, u1, u2) ({ \
    glMapGrid1d_PACKED *packed_data = malloc(sizeof(glMapGrid1d_PACKED)); \
    packed_data->index = glMapGrid1d_INDEX; \
    packed_data->args.a1 = (GLint)un; \
    packed_data->args.a2 = (GLdouble)u1; \
    packed_data->args.a3 = (GLdouble)u2; \
    (packed_call_t *)packed_data; \
})
#define pack_glMapGrid1f(un, u1, u2) ({ \
    glMapGrid1f_PACKED *packed_data = malloc(sizeof(glMapGrid1f_PACKED)); \
    packed_data->index = glMapGrid1f_INDEX; \
    packed_data->args.a1 = (GLint)un; \
    packed_data->args.a2 = (GLfloat)u1; \
    packed_data->args.a3 = (GLfloat)u2; \
    (packed_call_t *)packed_data; \
})
#define pack_glMapGrid1xOES(n, u1, u2) ({ \
    glMapGrid1xOES_PACKED *packed_data = malloc(sizeof(glMapGrid1xOES_PACKED)); \
    packed_data->index = glMapGrid1xOES_INDEX; \
    packed_data->args.a1 = (GLint)n; \
    packed_data->args.a2 = (GLfixed)u1; \
    packed_data->args.a3 = (GLfixed)u2; \
    (packed_call_t *)packed_data; \
})
#define pack_glMapGrid2d(un, u1, u2, vn, v1, v2) ({ \
    glMapGrid2d_PACKED *packed_data = malloc(sizeof(glMapGrid2d_PACKED)); \
    packed_data->index = glMapGrid2d_INDEX; \
    packed_data->args.a1 = (GLint)un; \
    packed_data->args.a2 = (GLdouble)u1; \
    packed_data->args.a3 = (GLdouble)u2; \
    packed_data->args.a4 = (GLint)vn; \
    packed_data->args.a5 = (GLdouble)v1; \
    packed_data->args.a6 = (GLdouble)v2; \
    (packed_call_t *)packed_data; \
})
#define pack_glMapGrid2f(un, u1, u2, vn, v1, v2) ({ \
    glMapGrid2f_PACKED *packed_data = malloc(sizeof(glMapGrid2f_PACKED)); \
    packed_data->index = glMapGrid2f_INDEX; \
    packed_data->args.a1 = (GLint)un; \
    packed_data->args.a2 = (GLfloat)u1; \
    packed_data->args.a3 = (GLfloat)u2; \
    packed_data->args.a4 = (GLint)vn; \
    packed_data->args.a5 = (GLfloat)v1; \
    packed_data->args.a6 = (GLfloat)v2; \
    (packed_call_t *)packed_data; \
})
#define pack_glMapGrid2xOES(n, u1, u2, v1, v2) ({ \
    glMapGrid2xOES_PACKED *packed_data = malloc(sizeof(glMapGrid2xOES_PACKED)); \
    packed_data->index = glMapGrid2xOES_INDEX; \
    packed_data->args.a1 = (GLint)n; \
    packed_data->args.a2 = (GLfixed)u1; \
    packed_data->args.a3 = (GLfixed)u2; \
    packed_data->args.a4 = (GLfixed)v1; \
    packed_data->args.a5 = (GLfixed)v2; \
    (packed_call_t *)packed_data; \
})
#define pack_glMapNamedBufferEXT(buffer, access) ({ \
    glMapNamedBufferEXT_PACKED *packed_data = malloc(sizeof(glMapNamedBufferEXT_PACKED)); \
    packed_data->index = glMapNamedBufferEXT_INDEX; \
    packed_data->args.a1 = (GLuint)buffer; \
    packed_data->args.a2 = (GLenum)access; \
    (packed_call_t *)packed_data; \
})
#define pack_glMapNamedBufferRangeEXT(buffer, offset, length, access) ({ \
    glMapNamedBufferRangeEXT_PACKED *packed_data = malloc(sizeof(glMapNamedBufferRangeEXT_PACKED)); \
    packed_data->index = glMapNamedBufferRangeEXT_INDEX; \
    packed_data->args.a1 = (GLuint)buffer; \
    packed_data->args.a2 = (GLintptr)offset; \
    packed_data->args.a3 = (GLsizeiptr)length; \
    packed_data->args.a4 = (GLbitfield)access; \
    (packed_call_t *)packed_data; \
})
#define pack_glMapObjectBufferATI(buffer) ({ \
    glMapObjectBufferATI_PACKED *packed_data = malloc(sizeof(glMapObjectBufferATI_PACKED)); \
    packed_data->index = glMapObjectBufferATI_INDEX; \
    packed_data->args.a1 = (GLuint)buffer; \
    (packed_call_t *)packed_data; \
})
#define pack_glMapParameterfvNV(target, pname, params) ({ \
    glMapParameterfvNV_PACKED *packed_data = malloc(sizeof(glMapParameterfvNV_PACKED)); \
    packed_data->index = glMapParameterfvNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glMapParameterivNV(target, pname, params) ({ \
    glMapParameterivNV_PACKED *packed_data = malloc(sizeof(glMapParameterivNV_PACKED)); \
    packed_data->index = glMapParameterivNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glMapTexture2DINTEL(texture, level, access, stride, layout) ({ \
    glMapTexture2DINTEL_PACKED *packed_data = malloc(sizeof(glMapTexture2DINTEL_PACKED)); \
    packed_data->index = glMapTexture2DINTEL_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    packed_data->args.a2 = (GLint)level; \
    packed_data->args.a3 = (GLbitfield)access; \
    packed_data->args.a4 = (GLint *)stride; \
    packed_data->args.a5 = (GLenum *)layout; \
    (packed_call_t *)packed_data; \
})
#define pack_glMapVertexAttrib1dAPPLE(index, size, u1, u2, stride, order, points) ({ \
    glMapVertexAttrib1dAPPLE_PACKED *packed_data = malloc(sizeof(glMapVertexAttrib1dAPPLE_PACKED)); \
    packed_data->index = glMapVertexAttrib1dAPPLE_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLuint)size; \
    packed_data->args.a3 = (GLdouble)u1; \
    packed_data->args.a4 = (GLdouble)u2; \
    packed_data->args.a5 = (GLint)stride; \
    packed_data->args.a6 = (GLint)order; \
    packed_data->args.a7 = (GLdouble *)points; \
    (packed_call_t *)packed_data; \
})
#define pack_glMapVertexAttrib1fAPPLE(index, size, u1, u2, stride, order, points) ({ \
    glMapVertexAttrib1fAPPLE_PACKED *packed_data = malloc(sizeof(glMapVertexAttrib1fAPPLE_PACKED)); \
    packed_data->index = glMapVertexAttrib1fAPPLE_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLuint)size; \
    packed_data->args.a3 = (GLfloat)u1; \
    packed_data->args.a4 = (GLfloat)u2; \
    packed_data->args.a5 = (GLint)stride; \
    packed_data->args.a6 = (GLint)order; \
    packed_data->args.a7 = (GLfloat *)points; \
    (packed_call_t *)packed_data; \
})
#define pack_glMapVertexAttrib2dAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) ({ \
    glMapVertexAttrib2dAPPLE_PACKED *packed_data = malloc(sizeof(glMapVertexAttrib2dAPPLE_PACKED)); \
    packed_data->index = glMapVertexAttrib2dAPPLE_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLuint)size; \
    packed_data->args.a3 = (GLdouble)u1; \
    packed_data->args.a4 = (GLdouble)u2; \
    packed_data->args.a5 = (GLint)ustride; \
    packed_data->args.a6 = (GLint)uorder; \
    packed_data->args.a7 = (GLdouble)v1; \
    packed_data->args.a8 = (GLdouble)v2; \
    packed_data->args.a9 = (GLint)vstride; \
    packed_data->args.a10 = (GLint)vorder; \
    packed_data->args.a11 = (GLdouble *)points; \
    (packed_call_t *)packed_data; \
})
#define pack_glMapVertexAttrib2fAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) ({ \
    glMapVertexAttrib2fAPPLE_PACKED *packed_data = malloc(sizeof(glMapVertexAttrib2fAPPLE_PACKED)); \
    packed_data->index = glMapVertexAttrib2fAPPLE_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLuint)size; \
    packed_data->args.a3 = (GLfloat)u1; \
    packed_data->args.a4 = (GLfloat)u2; \
    packed_data->args.a5 = (GLint)ustride; \
    packed_data->args.a6 = (GLint)uorder; \
    packed_data->args.a7 = (GLfloat)v1; \
    packed_data->args.a8 = (GLfloat)v2; \
    packed_data->args.a9 = (GLint)vstride; \
    packed_data->args.a10 = (GLint)vorder; \
    packed_data->args.a11 = (GLfloat *)points; \
    (packed_call_t *)packed_data; \
})
#define pack_glMaterialf(face, pname, param) ({ \
    glMaterialf_PACKED *packed_data = malloc(sizeof(glMaterialf_PACKED)); \
    packed_data->index = glMaterialf_INDEX; \
    packed_data->args.a1 = (GLenum)face; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glMaterialfv(face, pname, params) ({ \
    glMaterialfv_PACKED *packed_data = malloc(sizeof(glMaterialfv_PACKED)); \
    packed_data->index = glMaterialfv_INDEX; \
    packed_data->args.a1 = (GLenum)face; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glMateriali(face, pname, param) ({ \
    glMateriali_PACKED *packed_data = malloc(sizeof(glMateriali_PACKED)); \
    packed_data->index = glMateriali_INDEX; \
    packed_data->args.a1 = (GLenum)face; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glMaterialiv(face, pname, params) ({ \
    glMaterialiv_PACKED *packed_data = malloc(sizeof(glMaterialiv_PACKED)); \
    packed_data->index = glMaterialiv_INDEX; \
    packed_data->args.a1 = (GLenum)face; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glMaterialx(face, pname, param) ({ \
    glMaterialx_PACKED *packed_data = malloc(sizeof(glMaterialx_PACKED)); \
    packed_data->index = glMaterialx_INDEX; \
    packed_data->args.a1 = (GLenum)face; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfixed)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glMaterialxOES(face, pname, param) ({ \
    glMaterialxOES_PACKED *packed_data = malloc(sizeof(glMaterialxOES_PACKED)); \
    packed_data->index = glMaterialxOES_INDEX; \
    packed_data->args.a1 = (GLenum)face; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfixed)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glMaterialxv(face, pname, params) ({ \
    glMaterialxv_PACKED *packed_data = malloc(sizeof(glMaterialxv_PACKED)); \
    packed_data->index = glMaterialxv_INDEX; \
    packed_data->args.a1 = (GLenum)face; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfixed *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glMaterialxvOES(face, pname, param) ({ \
    glMaterialxvOES_PACKED *packed_data = malloc(sizeof(glMaterialxvOES_PACKED)); \
    packed_data->index = glMaterialxvOES_INDEX; \
    packed_data->args.a1 = (GLenum)face; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfixed *)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glMatrixFrustumEXT(mode, left, right, bottom, top, zNear, zFar) ({ \
    glMatrixFrustumEXT_PACKED *packed_data = malloc(sizeof(glMatrixFrustumEXT_PACKED)); \
    packed_data->index = glMatrixFrustumEXT_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLdouble)left; \
    packed_data->args.a3 = (GLdouble)right; \
    packed_data->args.a4 = (GLdouble)bottom; \
    packed_data->args.a5 = (GLdouble)top; \
    packed_data->args.a6 = (GLdouble)zNear; \
    packed_data->args.a7 = (GLdouble)zFar; \
    (packed_call_t *)packed_data; \
})
#define pack_glMatrixIndexPointerARB(size, type, stride, pointer) ({ \
    glMatrixIndexPointerARB_PACKED *packed_data = malloc(sizeof(glMatrixIndexPointerARB_PACKED)); \
    packed_data->index = glMatrixIndexPointerARB_INDEX; \
    packed_data->args.a1 = (GLint)size; \
    packed_data->args.a2 = (GLenum)type; \
    packed_data->args.a3 = (GLsizei)stride; \
    packed_data->args.a4 = (GLvoid *)pointer; \
    (packed_call_t *)packed_data; \
})
#define pack_glMatrixIndexubvARB(size, indices) ({ \
    glMatrixIndexubvARB_PACKED *packed_data = malloc(sizeof(glMatrixIndexubvARB_PACKED)); \
    packed_data->index = glMatrixIndexubvARB_INDEX; \
    packed_data->args.a1 = (GLint)size; \
    packed_data->args.a2 = (GLubyte *)indices; \
    (packed_call_t *)packed_data; \
})
#define pack_glMatrixIndexuivARB(size, indices) ({ \
    glMatrixIndexuivARB_PACKED *packed_data = malloc(sizeof(glMatrixIndexuivARB_PACKED)); \
    packed_data->index = glMatrixIndexuivARB_INDEX; \
    packed_data->args.a1 = (GLint)size; \
    packed_data->args.a2 = (GLuint *)indices; \
    (packed_call_t *)packed_data; \
})
#define pack_glMatrixIndexusvARB(size, indices) ({ \
    glMatrixIndexusvARB_PACKED *packed_data = malloc(sizeof(glMatrixIndexusvARB_PACKED)); \
    packed_data->index = glMatrixIndexusvARB_INDEX; \
    packed_data->args.a1 = (GLint)size; \
    packed_data->args.a2 = (GLushort *)indices; \
    (packed_call_t *)packed_data; \
})
#define pack_glMatrixLoadIdentityEXT(mode) ({ \
    glMatrixLoadIdentityEXT_PACKED *packed_data = malloc(sizeof(glMatrixLoadIdentityEXT_PACKED)); \
    packed_data->index = glMatrixLoadIdentityEXT_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    (packed_call_t *)packed_data; \
})
#define pack_glMatrixLoadTransposedEXT(mode, m) ({ \
    glMatrixLoadTransposedEXT_PACKED *packed_data = malloc(sizeof(glMatrixLoadTransposedEXT_PACKED)); \
    packed_data->index = glMatrixLoadTransposedEXT_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLdouble *)m; \
    (packed_call_t *)packed_data; \
})
#define pack_glMatrixLoadTransposefEXT(mode, m) ({ \
    glMatrixLoadTransposefEXT_PACKED *packed_data = malloc(sizeof(glMatrixLoadTransposefEXT_PACKED)); \
    packed_data->index = glMatrixLoadTransposefEXT_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLfloat *)m; \
    (packed_call_t *)packed_data; \
})
#define pack_glMatrixLoaddEXT(mode, m) ({ \
    glMatrixLoaddEXT_PACKED *packed_data = malloc(sizeof(glMatrixLoaddEXT_PACKED)); \
    packed_data->index = glMatrixLoaddEXT_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLdouble *)m; \
    (packed_call_t *)packed_data; \
})
#define pack_glMatrixLoadfEXT(mode, m) ({ \
    glMatrixLoadfEXT_PACKED *packed_data = malloc(sizeof(glMatrixLoadfEXT_PACKED)); \
    packed_data->index = glMatrixLoadfEXT_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLfloat *)m; \
    (packed_call_t *)packed_data; \
})
#define pack_glMatrixMode(mode) ({ \
    glMatrixMode_PACKED *packed_data = malloc(sizeof(glMatrixMode_PACKED)); \
    packed_data->index = glMatrixMode_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    (packed_call_t *)packed_data; \
})
#define pack_glMatrixMultTransposedEXT(mode, m) ({ \
    glMatrixMultTransposedEXT_PACKED *packed_data = malloc(sizeof(glMatrixMultTransposedEXT_PACKED)); \
    packed_data->index = glMatrixMultTransposedEXT_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLdouble *)m; \
    (packed_call_t *)packed_data; \
})
#define pack_glMatrixMultTransposefEXT(mode, m) ({ \
    glMatrixMultTransposefEXT_PACKED *packed_data = malloc(sizeof(glMatrixMultTransposefEXT_PACKED)); \
    packed_data->index = glMatrixMultTransposefEXT_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLfloat *)m; \
    (packed_call_t *)packed_data; \
})
#define pack_glMatrixMultdEXT(mode, m) ({ \
    glMatrixMultdEXT_PACKED *packed_data = malloc(sizeof(glMatrixMultdEXT_PACKED)); \
    packed_data->index = glMatrixMultdEXT_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLdouble *)m; \
    (packed_call_t *)packed_data; \
})
#define pack_glMatrixMultfEXT(mode, m) ({ \
    glMatrixMultfEXT_PACKED *packed_data = malloc(sizeof(glMatrixMultfEXT_PACKED)); \
    packed_data->index = glMatrixMultfEXT_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLfloat *)m; \
    (packed_call_t *)packed_data; \
})
#define pack_glMatrixOrthoEXT(mode, left, right, bottom, top, zNear, zFar) ({ \
    glMatrixOrthoEXT_PACKED *packed_data = malloc(sizeof(glMatrixOrthoEXT_PACKED)); \
    packed_data->index = glMatrixOrthoEXT_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLdouble)left; \
    packed_data->args.a3 = (GLdouble)right; \
    packed_data->args.a4 = (GLdouble)bottom; \
    packed_data->args.a5 = (GLdouble)top; \
    packed_data->args.a6 = (GLdouble)zNear; \
    packed_data->args.a7 = (GLdouble)zFar; \
    (packed_call_t *)packed_data; \
})
#define pack_glMatrixPopEXT(mode) ({ \
    glMatrixPopEXT_PACKED *packed_data = malloc(sizeof(glMatrixPopEXT_PACKED)); \
    packed_data->index = glMatrixPopEXT_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    (packed_call_t *)packed_data; \
})
#define pack_glMatrixPushEXT(mode) ({ \
    glMatrixPushEXT_PACKED *packed_data = malloc(sizeof(glMatrixPushEXT_PACKED)); \
    packed_data->index = glMatrixPushEXT_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    (packed_call_t *)packed_data; \
})
#define pack_glMatrixRotatedEXT(mode, angle, x, y, z) ({ \
    glMatrixRotatedEXT_PACKED *packed_data = malloc(sizeof(glMatrixRotatedEXT_PACKED)); \
    packed_data->index = glMatrixRotatedEXT_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLdouble)angle; \
    packed_data->args.a3 = (GLdouble)x; \
    packed_data->args.a4 = (GLdouble)y; \
    packed_data->args.a5 = (GLdouble)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glMatrixRotatefEXT(mode, angle, x, y, z) ({ \
    glMatrixRotatefEXT_PACKED *packed_data = malloc(sizeof(glMatrixRotatefEXT_PACKED)); \
    packed_data->index = glMatrixRotatefEXT_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLfloat)angle; \
    packed_data->args.a3 = (GLfloat)x; \
    packed_data->args.a4 = (GLfloat)y; \
    packed_data->args.a5 = (GLfloat)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glMatrixScaledEXT(mode, x, y, z) ({ \
    glMatrixScaledEXT_PACKED *packed_data = malloc(sizeof(glMatrixScaledEXT_PACKED)); \
    packed_data->index = glMatrixScaledEXT_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLdouble)x; \
    packed_data->args.a3 = (GLdouble)y; \
    packed_data->args.a4 = (GLdouble)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glMatrixScalefEXT(mode, x, y, z) ({ \
    glMatrixScalefEXT_PACKED *packed_data = malloc(sizeof(glMatrixScalefEXT_PACKED)); \
    packed_data->index = glMatrixScalefEXT_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLfloat)x; \
    packed_data->args.a3 = (GLfloat)y; \
    packed_data->args.a4 = (GLfloat)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glMatrixTranslatedEXT(mode, x, y, z) ({ \
    glMatrixTranslatedEXT_PACKED *packed_data = malloc(sizeof(glMatrixTranslatedEXT_PACKED)); \
    packed_data->index = glMatrixTranslatedEXT_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLdouble)x; \
    packed_data->args.a3 = (GLdouble)y; \
    packed_data->args.a4 = (GLdouble)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glMatrixTranslatefEXT(mode, x, y, z) ({ \
    glMatrixTranslatefEXT_PACKED *packed_data = malloc(sizeof(glMatrixTranslatefEXT_PACKED)); \
    packed_data->index = glMatrixTranslatefEXT_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLfloat)x; \
    packed_data->args.a3 = (GLfloat)y; \
    packed_data->args.a4 = (GLfloat)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glMemoryBarrier(barriers) ({ \
    glMemoryBarrier_PACKED *packed_data = malloc(sizeof(glMemoryBarrier_PACKED)); \
    packed_data->index = glMemoryBarrier_INDEX; \
    packed_data->args.a1 = (GLbitfield)barriers; \
    (packed_call_t *)packed_data; \
})
#define pack_glMemoryBarrierEXT(barriers) ({ \
    glMemoryBarrierEXT_PACKED *packed_data = malloc(sizeof(glMemoryBarrierEXT_PACKED)); \
    packed_data->index = glMemoryBarrierEXT_INDEX; \
    packed_data->args.a1 = (GLbitfield)barriers; \
    (packed_call_t *)packed_data; \
})
#define pack_glMinSampleShading(value) ({ \
    glMinSampleShading_PACKED *packed_data = malloc(sizeof(glMinSampleShading_PACKED)); \
    packed_data->index = glMinSampleShading_INDEX; \
    packed_data->args.a1 = (GLfloat)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glMinSampleShadingARB(value) ({ \
    glMinSampleShadingARB_PACKED *packed_data = malloc(sizeof(glMinSampleShadingARB_PACKED)); \
    packed_data->index = glMinSampleShadingARB_INDEX; \
    packed_data->args.a1 = (GLfloat)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glMinmax(target, internalformat, sink) ({ \
    glMinmax_PACKED *packed_data = malloc(sizeof(glMinmax_PACKED)); \
    packed_data->index = glMinmax_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)internalformat; \
    packed_data->args.a3 = (GLboolean)sink; \
    (packed_call_t *)packed_data; \
})
#define pack_glMinmaxEXT(target, internalformat, sink) ({ \
    glMinmaxEXT_PACKED *packed_data = malloc(sizeof(glMinmaxEXT_PACKED)); \
    packed_data->index = glMinmaxEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)internalformat; \
    packed_data->args.a3 = (GLboolean)sink; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultMatrixd(m) ({ \
    glMultMatrixd_PACKED *packed_data = malloc(sizeof(glMultMatrixd_PACKED)); \
    packed_data->index = glMultMatrixd_INDEX; \
    packed_data->args.a1 = (GLdouble *)m; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultMatrixf(m) ({ \
    glMultMatrixf_PACKED *packed_data = malloc(sizeof(glMultMatrixf_PACKED)); \
    packed_data->index = glMultMatrixf_INDEX; \
    packed_data->args.a1 = (GLfloat *)m; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultMatrixx(m) ({ \
    glMultMatrixx_PACKED *packed_data = malloc(sizeof(glMultMatrixx_PACKED)); \
    packed_data->index = glMultMatrixx_INDEX; \
    packed_data->args.a1 = (GLfixed *)m; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultMatrixxOES(m) ({ \
    glMultMatrixxOES_PACKED *packed_data = malloc(sizeof(glMultMatrixxOES_PACKED)); \
    packed_data->index = glMultMatrixxOES_INDEX; \
    packed_data->args.a1 = (GLfixed *)m; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultTransposeMatrixd(m) ({ \
    glMultTransposeMatrixd_PACKED *packed_data = malloc(sizeof(glMultTransposeMatrixd_PACKED)); \
    packed_data->index = glMultTransposeMatrixd_INDEX; \
    packed_data->args.a1 = (GLdouble *)m; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultTransposeMatrixdARB(m) ({ \
    glMultTransposeMatrixdARB_PACKED *packed_data = malloc(sizeof(glMultTransposeMatrixdARB_PACKED)); \
    packed_data->index = glMultTransposeMatrixdARB_INDEX; \
    packed_data->args.a1 = (GLdouble *)m; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultTransposeMatrixf(m) ({ \
    glMultTransposeMatrixf_PACKED *packed_data = malloc(sizeof(glMultTransposeMatrixf_PACKED)); \
    packed_data->index = glMultTransposeMatrixf_INDEX; \
    packed_data->args.a1 = (GLfloat *)m; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultTransposeMatrixfARB(m) ({ \
    glMultTransposeMatrixfARB_PACKED *packed_data = malloc(sizeof(glMultTransposeMatrixfARB_PACKED)); \
    packed_data->index = glMultTransposeMatrixfARB_INDEX; \
    packed_data->args.a1 = (GLfloat *)m; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultTransposeMatrixxOES(m) ({ \
    glMultTransposeMatrixxOES_PACKED *packed_data = malloc(sizeof(glMultTransposeMatrixxOES_PACKED)); \
    packed_data->index = glMultTransposeMatrixxOES_INDEX; \
    packed_data->args.a1 = (GLfixed *)m; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiDrawArrays(mode, first, count, drawcount) ({ \
    glMultiDrawArrays_PACKED *packed_data = malloc(sizeof(glMultiDrawArrays_PACKED)); \
    packed_data->index = glMultiDrawArrays_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLint *)first; \
    packed_data->args.a3 = (GLsizei *)count; \
    packed_data->args.a4 = (GLsizei)drawcount; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiDrawArraysEXT(mode, first, count, primcount) ({ \
    glMultiDrawArraysEXT_PACKED *packed_data = malloc(sizeof(glMultiDrawArraysEXT_PACKED)); \
    packed_data->index = glMultiDrawArraysEXT_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLint *)first; \
    packed_data->args.a3 = (GLsizei *)count; \
    packed_data->args.a4 = (GLsizei)primcount; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiDrawArraysIndirect(mode, indirect, drawcount, stride) ({ \
    glMultiDrawArraysIndirect_PACKED *packed_data = malloc(sizeof(glMultiDrawArraysIndirect_PACKED)); \
    packed_data->index = glMultiDrawArraysIndirect_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (void *)indirect; \
    packed_data->args.a3 = (GLsizei)drawcount; \
    packed_data->args.a4 = (GLsizei)stride; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiDrawArraysIndirectAMD(mode, indirect, primcount, stride) ({ \
    glMultiDrawArraysIndirectAMD_PACKED *packed_data = malloc(sizeof(glMultiDrawArraysIndirectAMD_PACKED)); \
    packed_data->index = glMultiDrawArraysIndirectAMD_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLvoid *)indirect; \
    packed_data->args.a3 = (GLsizei)primcount; \
    packed_data->args.a4 = (GLsizei)stride; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiDrawElementArrayAPPLE(mode, first, count, primcount) ({ \
    glMultiDrawElementArrayAPPLE_PACKED *packed_data = malloc(sizeof(glMultiDrawElementArrayAPPLE_PACKED)); \
    packed_data->index = glMultiDrawElementArrayAPPLE_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLint *)first; \
    packed_data->args.a3 = (GLsizei *)count; \
    packed_data->args.a4 = (GLsizei)primcount; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiDrawElements(mode, count, type, indices, drawcount) ({ \
    glMultiDrawElements_PACKED *packed_data = malloc(sizeof(glMultiDrawElements_PACKED)); \
    packed_data->index = glMultiDrawElements_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLsizei *)count; \
    packed_data->args.a3 = (GLenum)type; \
    packed_data->args.a4 = (GLvoid*const *)indices; \
    packed_data->args.a5 = (GLsizei)drawcount; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiDrawElementsBaseVertex(mode, count, type, indices, drawcount, basevertex) ({ \
    glMultiDrawElementsBaseVertex_PACKED *packed_data = malloc(sizeof(glMultiDrawElementsBaseVertex_PACKED)); \
    packed_data->index = glMultiDrawElementsBaseVertex_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLsizei *)count; \
    packed_data->args.a3 = (GLenum)type; \
    packed_data->args.a4 = (GLvoid*const *)indices; \
    packed_data->args.a5 = (GLsizei)drawcount; \
    packed_data->args.a6 = (GLint *)basevertex; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiDrawElementsEXT(mode, count, type, indices, primcount) ({ \
    glMultiDrawElementsEXT_PACKED *packed_data = malloc(sizeof(glMultiDrawElementsEXT_PACKED)); \
    packed_data->index = glMultiDrawElementsEXT_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLsizei *)count; \
    packed_data->args.a3 = (GLenum)type; \
    packed_data->args.a4 = (GLvoid *)indices; \
    packed_data->args.a5 = (GLsizei)primcount; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiDrawElementsIndirect(mode, type, indirect, drawcount, stride) ({ \
    glMultiDrawElementsIndirect_PACKED *packed_data = malloc(sizeof(glMultiDrawElementsIndirect_PACKED)); \
    packed_data->index = glMultiDrawElementsIndirect_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLenum)type; \
    packed_data->args.a3 = (void *)indirect; \
    packed_data->args.a4 = (GLsizei)drawcount; \
    packed_data->args.a5 = (GLsizei)stride; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiDrawElementsIndirectAMD(mode, type, indirect, primcount, stride) ({ \
    glMultiDrawElementsIndirectAMD_PACKED *packed_data = malloc(sizeof(glMultiDrawElementsIndirectAMD_PACKED)); \
    packed_data->index = glMultiDrawElementsIndirectAMD_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLenum)type; \
    packed_data->args.a3 = (GLvoid *)indirect; \
    packed_data->args.a4 = (GLsizei)primcount; \
    packed_data->args.a5 = (GLsizei)stride; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiDrawRangeElementArrayAPPLE(mode, start, end, first, count, primcount) ({ \
    glMultiDrawRangeElementArrayAPPLE_PACKED *packed_data = malloc(sizeof(glMultiDrawRangeElementArrayAPPLE_PACKED)); \
    packed_data->index = glMultiDrawRangeElementArrayAPPLE_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    packed_data->args.a2 = (GLuint)start; \
    packed_data->args.a3 = (GLuint)end; \
    packed_data->args.a4 = (GLint *)first; \
    packed_data->args.a5 = (GLsizei *)count; \
    packed_data->args.a6 = (GLsizei)primcount; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiModeDrawArraysIBM(mode, first, count, primcount, modestride) ({ \
    glMultiModeDrawArraysIBM_PACKED *packed_data = malloc(sizeof(glMultiModeDrawArraysIBM_PACKED)); \
    packed_data->index = glMultiModeDrawArraysIBM_INDEX; \
    packed_data->args.a1 = (GLenum *)mode; \
    packed_data->args.a2 = (GLint *)first; \
    packed_data->args.a3 = (GLsizei *)count; \
    packed_data->args.a4 = (GLsizei)primcount; \
    packed_data->args.a5 = (GLint)modestride; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiModeDrawElementsIBM(mode, count, type, indices, primcount, modestride) ({ \
    glMultiModeDrawElementsIBM_PACKED *packed_data = malloc(sizeof(glMultiModeDrawElementsIBM_PACKED)); \
    packed_data->index = glMultiModeDrawElementsIBM_INDEX; \
    packed_data->args.a1 = (GLenum *)mode; \
    packed_data->args.a2 = (GLsizei *)count; \
    packed_data->args.a3 = (GLenum)type; \
    packed_data->args.a4 = (GLvoid*const *)indices; \
    packed_data->args.a5 = (GLsizei)primcount; \
    packed_data->args.a6 = (GLint)modestride; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexBufferEXT(texunit, target, internalformat, buffer) ({ \
    glMultiTexBufferEXT_PACKED *packed_data = malloc(sizeof(glMultiTexBufferEXT_PACKED)); \
    packed_data->index = glMultiTexBufferEXT_INDEX; \
    packed_data->args.a1 = (GLenum)texunit; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLenum)internalformat; \
    packed_data->args.a4 = (GLuint)buffer; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord1bOES(texture, s) ({ \
    glMultiTexCoord1bOES_PACKED *packed_data = malloc(sizeof(glMultiTexCoord1bOES_PACKED)); \
    packed_data->index = glMultiTexCoord1bOES_INDEX; \
    packed_data->args.a1 = (GLenum)texture; \
    packed_data->args.a2 = (GLbyte)s; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord1bvOES(texture, coords) ({ \
    glMultiTexCoord1bvOES_PACKED *packed_data = malloc(sizeof(glMultiTexCoord1bvOES_PACKED)); \
    packed_data->index = glMultiTexCoord1bvOES_INDEX; \
    packed_data->args.a1 = (GLenum)texture; \
    packed_data->args.a2 = (GLbyte *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord1d(target, s) ({ \
    glMultiTexCoord1d_PACKED *packed_data = malloc(sizeof(glMultiTexCoord1d_PACKED)); \
    packed_data->index = glMultiTexCoord1d_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLdouble)s; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord1dARB(target, s) ({ \
    glMultiTexCoord1dARB_PACKED *packed_data = malloc(sizeof(glMultiTexCoord1dARB_PACKED)); \
    packed_data->index = glMultiTexCoord1dARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLdouble)s; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord1dv(target, v) ({ \
    glMultiTexCoord1dv_PACKED *packed_data = malloc(sizeof(glMultiTexCoord1dv_PACKED)); \
    packed_data->index = glMultiTexCoord1dv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord1dvARB(target, v) ({ \
    glMultiTexCoord1dvARB_PACKED *packed_data = malloc(sizeof(glMultiTexCoord1dvARB_PACKED)); \
    packed_data->index = glMultiTexCoord1dvARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord1f(target, s) ({ \
    glMultiTexCoord1f_PACKED *packed_data = malloc(sizeof(glMultiTexCoord1f_PACKED)); \
    packed_data->index = glMultiTexCoord1f_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLfloat)s; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord1fARB(target, s) ({ \
    glMultiTexCoord1fARB_PACKED *packed_data = malloc(sizeof(glMultiTexCoord1fARB_PACKED)); \
    packed_data->index = glMultiTexCoord1fARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLfloat)s; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord1fv(target, v) ({ \
    glMultiTexCoord1fv_PACKED *packed_data = malloc(sizeof(glMultiTexCoord1fv_PACKED)); \
    packed_data->index = glMultiTexCoord1fv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord1fvARB(target, v) ({ \
    glMultiTexCoord1fvARB_PACKED *packed_data = malloc(sizeof(glMultiTexCoord1fvARB_PACKED)); \
    packed_data->index = glMultiTexCoord1fvARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord1hNV(target, s) ({ \
    glMultiTexCoord1hNV_PACKED *packed_data = malloc(sizeof(glMultiTexCoord1hNV_PACKED)); \
    packed_data->index = glMultiTexCoord1hNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLhalfNV)s; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord1hvNV(target, v) ({ \
    glMultiTexCoord1hvNV_PACKED *packed_data = malloc(sizeof(glMultiTexCoord1hvNV_PACKED)); \
    packed_data->index = glMultiTexCoord1hvNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLhalfNV *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord1i(target, s) ({ \
    glMultiTexCoord1i_PACKED *packed_data = malloc(sizeof(glMultiTexCoord1i_PACKED)); \
    packed_data->index = glMultiTexCoord1i_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint)s; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord1iARB(target, s) ({ \
    glMultiTexCoord1iARB_PACKED *packed_data = malloc(sizeof(glMultiTexCoord1iARB_PACKED)); \
    packed_data->index = glMultiTexCoord1iARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint)s; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord1iv(target, v) ({ \
    glMultiTexCoord1iv_PACKED *packed_data = malloc(sizeof(glMultiTexCoord1iv_PACKED)); \
    packed_data->index = glMultiTexCoord1iv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord1ivARB(target, v) ({ \
    glMultiTexCoord1ivARB_PACKED *packed_data = malloc(sizeof(glMultiTexCoord1ivARB_PACKED)); \
    packed_data->index = glMultiTexCoord1ivARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord1s(target, s) ({ \
    glMultiTexCoord1s_PACKED *packed_data = malloc(sizeof(glMultiTexCoord1s_PACKED)); \
    packed_data->index = glMultiTexCoord1s_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLshort)s; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord1sARB(target, s) ({ \
    glMultiTexCoord1sARB_PACKED *packed_data = malloc(sizeof(glMultiTexCoord1sARB_PACKED)); \
    packed_data->index = glMultiTexCoord1sARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLshort)s; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord1sv(target, v) ({ \
    glMultiTexCoord1sv_PACKED *packed_data = malloc(sizeof(glMultiTexCoord1sv_PACKED)); \
    packed_data->index = glMultiTexCoord1sv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLshort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord1svARB(target, v) ({ \
    glMultiTexCoord1svARB_PACKED *packed_data = malloc(sizeof(glMultiTexCoord1svARB_PACKED)); \
    packed_data->index = glMultiTexCoord1svARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLshort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord1xOES(texture, s) ({ \
    glMultiTexCoord1xOES_PACKED *packed_data = malloc(sizeof(glMultiTexCoord1xOES_PACKED)); \
    packed_data->index = glMultiTexCoord1xOES_INDEX; \
    packed_data->args.a1 = (GLenum)texture; \
    packed_data->args.a2 = (GLfixed)s; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord1xvOES(texture, coords) ({ \
    glMultiTexCoord1xvOES_PACKED *packed_data = malloc(sizeof(glMultiTexCoord1xvOES_PACKED)); \
    packed_data->index = glMultiTexCoord1xvOES_INDEX; \
    packed_data->args.a1 = (GLenum)texture; \
    packed_data->args.a2 = (GLfixed *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord2bOES(texture, s, t) ({ \
    glMultiTexCoord2bOES_PACKED *packed_data = malloc(sizeof(glMultiTexCoord2bOES_PACKED)); \
    packed_data->index = glMultiTexCoord2bOES_INDEX; \
    packed_data->args.a1 = (GLenum)texture; \
    packed_data->args.a2 = (GLbyte)s; \
    packed_data->args.a3 = (GLbyte)t; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord2bvOES(texture, coords) ({ \
    glMultiTexCoord2bvOES_PACKED *packed_data = malloc(sizeof(glMultiTexCoord2bvOES_PACKED)); \
    packed_data->index = glMultiTexCoord2bvOES_INDEX; \
    packed_data->args.a1 = (GLenum)texture; \
    packed_data->args.a2 = (GLbyte *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord2d(target, s, t) ({ \
    glMultiTexCoord2d_PACKED *packed_data = malloc(sizeof(glMultiTexCoord2d_PACKED)); \
    packed_data->index = glMultiTexCoord2d_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLdouble)s; \
    packed_data->args.a3 = (GLdouble)t; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord2dARB(target, s, t) ({ \
    glMultiTexCoord2dARB_PACKED *packed_data = malloc(sizeof(glMultiTexCoord2dARB_PACKED)); \
    packed_data->index = glMultiTexCoord2dARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLdouble)s; \
    packed_data->args.a3 = (GLdouble)t; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord2dv(target, v) ({ \
    glMultiTexCoord2dv_PACKED *packed_data = malloc(sizeof(glMultiTexCoord2dv_PACKED)); \
    packed_data->index = glMultiTexCoord2dv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord2dvARB(target, v) ({ \
    glMultiTexCoord2dvARB_PACKED *packed_data = malloc(sizeof(glMultiTexCoord2dvARB_PACKED)); \
    packed_data->index = glMultiTexCoord2dvARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord2f(target, s, t) ({ \
    glMultiTexCoord2f_PACKED *packed_data = malloc(sizeof(glMultiTexCoord2f_PACKED)); \
    packed_data->index = glMultiTexCoord2f_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLfloat)s; \
    packed_data->args.a3 = (GLfloat)t; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord2fARB(target, s, t) ({ \
    glMultiTexCoord2fARB_PACKED *packed_data = malloc(sizeof(glMultiTexCoord2fARB_PACKED)); \
    packed_data->index = glMultiTexCoord2fARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLfloat)s; \
    packed_data->args.a3 = (GLfloat)t; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord2fv(target, v) ({ \
    glMultiTexCoord2fv_PACKED *packed_data = malloc(sizeof(glMultiTexCoord2fv_PACKED)); \
    packed_data->index = glMultiTexCoord2fv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord2fvARB(target, v) ({ \
    glMultiTexCoord2fvARB_PACKED *packed_data = malloc(sizeof(glMultiTexCoord2fvARB_PACKED)); \
    packed_data->index = glMultiTexCoord2fvARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord2hNV(target, s, t) ({ \
    glMultiTexCoord2hNV_PACKED *packed_data = malloc(sizeof(glMultiTexCoord2hNV_PACKED)); \
    packed_data->index = glMultiTexCoord2hNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLhalfNV)s; \
    packed_data->args.a3 = (GLhalfNV)t; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord2hvNV(target, v) ({ \
    glMultiTexCoord2hvNV_PACKED *packed_data = malloc(sizeof(glMultiTexCoord2hvNV_PACKED)); \
    packed_data->index = glMultiTexCoord2hvNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLhalfNV *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord2i(target, s, t) ({ \
    glMultiTexCoord2i_PACKED *packed_data = malloc(sizeof(glMultiTexCoord2i_PACKED)); \
    packed_data->index = glMultiTexCoord2i_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint)s; \
    packed_data->args.a3 = (GLint)t; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord2iARB(target, s, t) ({ \
    glMultiTexCoord2iARB_PACKED *packed_data = malloc(sizeof(glMultiTexCoord2iARB_PACKED)); \
    packed_data->index = glMultiTexCoord2iARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint)s; \
    packed_data->args.a3 = (GLint)t; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord2iv(target, v) ({ \
    glMultiTexCoord2iv_PACKED *packed_data = malloc(sizeof(glMultiTexCoord2iv_PACKED)); \
    packed_data->index = glMultiTexCoord2iv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord2ivARB(target, v) ({ \
    glMultiTexCoord2ivARB_PACKED *packed_data = malloc(sizeof(glMultiTexCoord2ivARB_PACKED)); \
    packed_data->index = glMultiTexCoord2ivARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord2s(target, s, t) ({ \
    glMultiTexCoord2s_PACKED *packed_data = malloc(sizeof(glMultiTexCoord2s_PACKED)); \
    packed_data->index = glMultiTexCoord2s_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLshort)s; \
    packed_data->args.a3 = (GLshort)t; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord2sARB(target, s, t) ({ \
    glMultiTexCoord2sARB_PACKED *packed_data = malloc(sizeof(glMultiTexCoord2sARB_PACKED)); \
    packed_data->index = glMultiTexCoord2sARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLshort)s; \
    packed_data->args.a3 = (GLshort)t; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord2sv(target, v) ({ \
    glMultiTexCoord2sv_PACKED *packed_data = malloc(sizeof(glMultiTexCoord2sv_PACKED)); \
    packed_data->index = glMultiTexCoord2sv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLshort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord2svARB(target, v) ({ \
    glMultiTexCoord2svARB_PACKED *packed_data = malloc(sizeof(glMultiTexCoord2svARB_PACKED)); \
    packed_data->index = glMultiTexCoord2svARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLshort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord2xOES(texture, s, t) ({ \
    glMultiTexCoord2xOES_PACKED *packed_data = malloc(sizeof(glMultiTexCoord2xOES_PACKED)); \
    packed_data->index = glMultiTexCoord2xOES_INDEX; \
    packed_data->args.a1 = (GLenum)texture; \
    packed_data->args.a2 = (GLfixed)s; \
    packed_data->args.a3 = (GLfixed)t; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord2xvOES(texture, coords) ({ \
    glMultiTexCoord2xvOES_PACKED *packed_data = malloc(sizeof(glMultiTexCoord2xvOES_PACKED)); \
    packed_data->index = glMultiTexCoord2xvOES_INDEX; \
    packed_data->args.a1 = (GLenum)texture; \
    packed_data->args.a2 = (GLfixed *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord3bOES(texture, s, t, r) ({ \
    glMultiTexCoord3bOES_PACKED *packed_data = malloc(sizeof(glMultiTexCoord3bOES_PACKED)); \
    packed_data->index = glMultiTexCoord3bOES_INDEX; \
    packed_data->args.a1 = (GLenum)texture; \
    packed_data->args.a2 = (GLbyte)s; \
    packed_data->args.a3 = (GLbyte)t; \
    packed_data->args.a4 = (GLbyte)r; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord3bvOES(texture, coords) ({ \
    glMultiTexCoord3bvOES_PACKED *packed_data = malloc(sizeof(glMultiTexCoord3bvOES_PACKED)); \
    packed_data->index = glMultiTexCoord3bvOES_INDEX; \
    packed_data->args.a1 = (GLenum)texture; \
    packed_data->args.a2 = (GLbyte *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord3d(target, s, t, r) ({ \
    glMultiTexCoord3d_PACKED *packed_data = malloc(sizeof(glMultiTexCoord3d_PACKED)); \
    packed_data->index = glMultiTexCoord3d_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLdouble)s; \
    packed_data->args.a3 = (GLdouble)t; \
    packed_data->args.a4 = (GLdouble)r; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord3dARB(target, s, t, r) ({ \
    glMultiTexCoord3dARB_PACKED *packed_data = malloc(sizeof(glMultiTexCoord3dARB_PACKED)); \
    packed_data->index = glMultiTexCoord3dARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLdouble)s; \
    packed_data->args.a3 = (GLdouble)t; \
    packed_data->args.a4 = (GLdouble)r; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord3dv(target, v) ({ \
    glMultiTexCoord3dv_PACKED *packed_data = malloc(sizeof(glMultiTexCoord3dv_PACKED)); \
    packed_data->index = glMultiTexCoord3dv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord3dvARB(target, v) ({ \
    glMultiTexCoord3dvARB_PACKED *packed_data = malloc(sizeof(glMultiTexCoord3dvARB_PACKED)); \
    packed_data->index = glMultiTexCoord3dvARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord3f(target, s, t, r) ({ \
    glMultiTexCoord3f_PACKED *packed_data = malloc(sizeof(glMultiTexCoord3f_PACKED)); \
    packed_data->index = glMultiTexCoord3f_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLfloat)s; \
    packed_data->args.a3 = (GLfloat)t; \
    packed_data->args.a4 = (GLfloat)r; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord3fARB(target, s, t, r) ({ \
    glMultiTexCoord3fARB_PACKED *packed_data = malloc(sizeof(glMultiTexCoord3fARB_PACKED)); \
    packed_data->index = glMultiTexCoord3fARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLfloat)s; \
    packed_data->args.a3 = (GLfloat)t; \
    packed_data->args.a4 = (GLfloat)r; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord3fv(target, v) ({ \
    glMultiTexCoord3fv_PACKED *packed_data = malloc(sizeof(glMultiTexCoord3fv_PACKED)); \
    packed_data->index = glMultiTexCoord3fv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord3fvARB(target, v) ({ \
    glMultiTexCoord3fvARB_PACKED *packed_data = malloc(sizeof(glMultiTexCoord3fvARB_PACKED)); \
    packed_data->index = glMultiTexCoord3fvARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord3hNV(target, s, t, r) ({ \
    glMultiTexCoord3hNV_PACKED *packed_data = malloc(sizeof(glMultiTexCoord3hNV_PACKED)); \
    packed_data->index = glMultiTexCoord3hNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLhalfNV)s; \
    packed_data->args.a3 = (GLhalfNV)t; \
    packed_data->args.a4 = (GLhalfNV)r; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord3hvNV(target, v) ({ \
    glMultiTexCoord3hvNV_PACKED *packed_data = malloc(sizeof(glMultiTexCoord3hvNV_PACKED)); \
    packed_data->index = glMultiTexCoord3hvNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLhalfNV *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord3i(target, s, t, r) ({ \
    glMultiTexCoord3i_PACKED *packed_data = malloc(sizeof(glMultiTexCoord3i_PACKED)); \
    packed_data->index = glMultiTexCoord3i_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint)s; \
    packed_data->args.a3 = (GLint)t; \
    packed_data->args.a4 = (GLint)r; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord3iARB(target, s, t, r) ({ \
    glMultiTexCoord3iARB_PACKED *packed_data = malloc(sizeof(glMultiTexCoord3iARB_PACKED)); \
    packed_data->index = glMultiTexCoord3iARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint)s; \
    packed_data->args.a3 = (GLint)t; \
    packed_data->args.a4 = (GLint)r; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord3iv(target, v) ({ \
    glMultiTexCoord3iv_PACKED *packed_data = malloc(sizeof(glMultiTexCoord3iv_PACKED)); \
    packed_data->index = glMultiTexCoord3iv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord3ivARB(target, v) ({ \
    glMultiTexCoord3ivARB_PACKED *packed_data = malloc(sizeof(glMultiTexCoord3ivARB_PACKED)); \
    packed_data->index = glMultiTexCoord3ivARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord3s(target, s, t, r) ({ \
    glMultiTexCoord3s_PACKED *packed_data = malloc(sizeof(glMultiTexCoord3s_PACKED)); \
    packed_data->index = glMultiTexCoord3s_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLshort)s; \
    packed_data->args.a3 = (GLshort)t; \
    packed_data->args.a4 = (GLshort)r; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord3sARB(target, s, t, r) ({ \
    glMultiTexCoord3sARB_PACKED *packed_data = malloc(sizeof(glMultiTexCoord3sARB_PACKED)); \
    packed_data->index = glMultiTexCoord3sARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLshort)s; \
    packed_data->args.a3 = (GLshort)t; \
    packed_data->args.a4 = (GLshort)r; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord3sv(target, v) ({ \
    glMultiTexCoord3sv_PACKED *packed_data = malloc(sizeof(glMultiTexCoord3sv_PACKED)); \
    packed_data->index = glMultiTexCoord3sv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLshort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord3svARB(target, v) ({ \
    glMultiTexCoord3svARB_PACKED *packed_data = malloc(sizeof(glMultiTexCoord3svARB_PACKED)); \
    packed_data->index = glMultiTexCoord3svARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLshort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord3xOES(texture, s, t, r) ({ \
    glMultiTexCoord3xOES_PACKED *packed_data = malloc(sizeof(glMultiTexCoord3xOES_PACKED)); \
    packed_data->index = glMultiTexCoord3xOES_INDEX; \
    packed_data->args.a1 = (GLenum)texture; \
    packed_data->args.a2 = (GLfixed)s; \
    packed_data->args.a3 = (GLfixed)t; \
    packed_data->args.a4 = (GLfixed)r; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord3xvOES(texture, coords) ({ \
    glMultiTexCoord3xvOES_PACKED *packed_data = malloc(sizeof(glMultiTexCoord3xvOES_PACKED)); \
    packed_data->index = glMultiTexCoord3xvOES_INDEX; \
    packed_data->args.a1 = (GLenum)texture; \
    packed_data->args.a2 = (GLfixed *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord4bOES(texture, s, t, r, q) ({ \
    glMultiTexCoord4bOES_PACKED *packed_data = malloc(sizeof(glMultiTexCoord4bOES_PACKED)); \
    packed_data->index = glMultiTexCoord4bOES_INDEX; \
    packed_data->args.a1 = (GLenum)texture; \
    packed_data->args.a2 = (GLbyte)s; \
    packed_data->args.a3 = (GLbyte)t; \
    packed_data->args.a4 = (GLbyte)r; \
    packed_data->args.a5 = (GLbyte)q; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord4bvOES(texture, coords) ({ \
    glMultiTexCoord4bvOES_PACKED *packed_data = malloc(sizeof(glMultiTexCoord4bvOES_PACKED)); \
    packed_data->index = glMultiTexCoord4bvOES_INDEX; \
    packed_data->args.a1 = (GLenum)texture; \
    packed_data->args.a2 = (GLbyte *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord4d(target, s, t, r, q) ({ \
    glMultiTexCoord4d_PACKED *packed_data = malloc(sizeof(glMultiTexCoord4d_PACKED)); \
    packed_data->index = glMultiTexCoord4d_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLdouble)s; \
    packed_data->args.a3 = (GLdouble)t; \
    packed_data->args.a4 = (GLdouble)r; \
    packed_data->args.a5 = (GLdouble)q; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord4dARB(target, s, t, r, q) ({ \
    glMultiTexCoord4dARB_PACKED *packed_data = malloc(sizeof(glMultiTexCoord4dARB_PACKED)); \
    packed_data->index = glMultiTexCoord4dARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLdouble)s; \
    packed_data->args.a3 = (GLdouble)t; \
    packed_data->args.a4 = (GLdouble)r; \
    packed_data->args.a5 = (GLdouble)q; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord4dv(target, v) ({ \
    glMultiTexCoord4dv_PACKED *packed_data = malloc(sizeof(glMultiTexCoord4dv_PACKED)); \
    packed_data->index = glMultiTexCoord4dv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord4dvARB(target, v) ({ \
    glMultiTexCoord4dvARB_PACKED *packed_data = malloc(sizeof(glMultiTexCoord4dvARB_PACKED)); \
    packed_data->index = glMultiTexCoord4dvARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord4f(target, s, t, r, q) ({ \
    glMultiTexCoord4f_PACKED *packed_data = malloc(sizeof(glMultiTexCoord4f_PACKED)); \
    packed_data->index = glMultiTexCoord4f_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLfloat)s; \
    packed_data->args.a3 = (GLfloat)t; \
    packed_data->args.a4 = (GLfloat)r; \
    packed_data->args.a5 = (GLfloat)q; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord4fARB(target, s, t, r, q) ({ \
    glMultiTexCoord4fARB_PACKED *packed_data = malloc(sizeof(glMultiTexCoord4fARB_PACKED)); \
    packed_data->index = glMultiTexCoord4fARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLfloat)s; \
    packed_data->args.a3 = (GLfloat)t; \
    packed_data->args.a4 = (GLfloat)r; \
    packed_data->args.a5 = (GLfloat)q; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord4fv(target, v) ({ \
    glMultiTexCoord4fv_PACKED *packed_data = malloc(sizeof(glMultiTexCoord4fv_PACKED)); \
    packed_data->index = glMultiTexCoord4fv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord4fvARB(target, v) ({ \
    glMultiTexCoord4fvARB_PACKED *packed_data = malloc(sizeof(glMultiTexCoord4fvARB_PACKED)); \
    packed_data->index = glMultiTexCoord4fvARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord4hNV(target, s, t, r, q) ({ \
    glMultiTexCoord4hNV_PACKED *packed_data = malloc(sizeof(glMultiTexCoord4hNV_PACKED)); \
    packed_data->index = glMultiTexCoord4hNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLhalfNV)s; \
    packed_data->args.a3 = (GLhalfNV)t; \
    packed_data->args.a4 = (GLhalfNV)r; \
    packed_data->args.a5 = (GLhalfNV)q; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord4hvNV(target, v) ({ \
    glMultiTexCoord4hvNV_PACKED *packed_data = malloc(sizeof(glMultiTexCoord4hvNV_PACKED)); \
    packed_data->index = glMultiTexCoord4hvNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLhalfNV *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord4i(target, s, t, r, q) ({ \
    glMultiTexCoord4i_PACKED *packed_data = malloc(sizeof(glMultiTexCoord4i_PACKED)); \
    packed_data->index = glMultiTexCoord4i_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint)s; \
    packed_data->args.a3 = (GLint)t; \
    packed_data->args.a4 = (GLint)r; \
    packed_data->args.a5 = (GLint)q; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord4iARB(target, s, t, r, q) ({ \
    glMultiTexCoord4iARB_PACKED *packed_data = malloc(sizeof(glMultiTexCoord4iARB_PACKED)); \
    packed_data->index = glMultiTexCoord4iARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint)s; \
    packed_data->args.a3 = (GLint)t; \
    packed_data->args.a4 = (GLint)r; \
    packed_data->args.a5 = (GLint)q; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord4iv(target, v) ({ \
    glMultiTexCoord4iv_PACKED *packed_data = malloc(sizeof(glMultiTexCoord4iv_PACKED)); \
    packed_data->index = glMultiTexCoord4iv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord4ivARB(target, v) ({ \
    glMultiTexCoord4ivARB_PACKED *packed_data = malloc(sizeof(glMultiTexCoord4ivARB_PACKED)); \
    packed_data->index = glMultiTexCoord4ivARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord4s(target, s, t, r, q) ({ \
    glMultiTexCoord4s_PACKED *packed_data = malloc(sizeof(glMultiTexCoord4s_PACKED)); \
    packed_data->index = glMultiTexCoord4s_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLshort)s; \
    packed_data->args.a3 = (GLshort)t; \
    packed_data->args.a4 = (GLshort)r; \
    packed_data->args.a5 = (GLshort)q; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord4sARB(target, s, t, r, q) ({ \
    glMultiTexCoord4sARB_PACKED *packed_data = malloc(sizeof(glMultiTexCoord4sARB_PACKED)); \
    packed_data->index = glMultiTexCoord4sARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLshort)s; \
    packed_data->args.a3 = (GLshort)t; \
    packed_data->args.a4 = (GLshort)r; \
    packed_data->args.a5 = (GLshort)q; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord4sv(target, v) ({ \
    glMultiTexCoord4sv_PACKED *packed_data = malloc(sizeof(glMultiTexCoord4sv_PACKED)); \
    packed_data->index = glMultiTexCoord4sv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLshort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord4svARB(target, v) ({ \
    glMultiTexCoord4svARB_PACKED *packed_data = malloc(sizeof(glMultiTexCoord4svARB_PACKED)); \
    packed_data->index = glMultiTexCoord4svARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLshort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord4x(target, s, t, r, q) ({ \
    glMultiTexCoord4x_PACKED *packed_data = malloc(sizeof(glMultiTexCoord4x_PACKED)); \
    packed_data->index = glMultiTexCoord4x_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLfixed)s; \
    packed_data->args.a3 = (GLfixed)t; \
    packed_data->args.a4 = (GLfixed)r; \
    packed_data->args.a5 = (GLfixed)q; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord4xOES(texture, s, t, r, q) ({ \
    glMultiTexCoord4xOES_PACKED *packed_data = malloc(sizeof(glMultiTexCoord4xOES_PACKED)); \
    packed_data->index = glMultiTexCoord4xOES_INDEX; \
    packed_data->args.a1 = (GLenum)texture; \
    packed_data->args.a2 = (GLfixed)s; \
    packed_data->args.a3 = (GLfixed)t; \
    packed_data->args.a4 = (GLfixed)r; \
    packed_data->args.a5 = (GLfixed)q; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoord4xvOES(texture, coords) ({ \
    glMultiTexCoord4xvOES_PACKED *packed_data = malloc(sizeof(glMultiTexCoord4xvOES_PACKED)); \
    packed_data->index = glMultiTexCoord4xvOES_INDEX; \
    packed_data->args.a1 = (GLenum)texture; \
    packed_data->args.a2 = (GLfixed *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoordP1ui(texture, type, coords) ({ \
    glMultiTexCoordP1ui_PACKED *packed_data = malloc(sizeof(glMultiTexCoordP1ui_PACKED)); \
    packed_data->index = glMultiTexCoordP1ui_INDEX; \
    packed_data->args.a1 = (GLenum)texture; \
    packed_data->args.a2 = (GLenum)type; \
    packed_data->args.a3 = (GLuint)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoordP1uiv(texture, type, coords) ({ \
    glMultiTexCoordP1uiv_PACKED *packed_data = malloc(sizeof(glMultiTexCoordP1uiv_PACKED)); \
    packed_data->index = glMultiTexCoordP1uiv_INDEX; \
    packed_data->args.a1 = (GLenum)texture; \
    packed_data->args.a2 = (GLenum)type; \
    packed_data->args.a3 = (GLuint *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoordP2ui(texture, type, coords) ({ \
    glMultiTexCoordP2ui_PACKED *packed_data = malloc(sizeof(glMultiTexCoordP2ui_PACKED)); \
    packed_data->index = glMultiTexCoordP2ui_INDEX; \
    packed_data->args.a1 = (GLenum)texture; \
    packed_data->args.a2 = (GLenum)type; \
    packed_data->args.a3 = (GLuint)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoordP2uiv(texture, type, coords) ({ \
    glMultiTexCoordP2uiv_PACKED *packed_data = malloc(sizeof(glMultiTexCoordP2uiv_PACKED)); \
    packed_data->index = glMultiTexCoordP2uiv_INDEX; \
    packed_data->args.a1 = (GLenum)texture; \
    packed_data->args.a2 = (GLenum)type; \
    packed_data->args.a3 = (GLuint *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoordP3ui(texture, type, coords) ({ \
    glMultiTexCoordP3ui_PACKED *packed_data = malloc(sizeof(glMultiTexCoordP3ui_PACKED)); \
    packed_data->index = glMultiTexCoordP3ui_INDEX; \
    packed_data->args.a1 = (GLenum)texture; \
    packed_data->args.a2 = (GLenum)type; \
    packed_data->args.a3 = (GLuint)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoordP3uiv(texture, type, coords) ({ \
    glMultiTexCoordP3uiv_PACKED *packed_data = malloc(sizeof(glMultiTexCoordP3uiv_PACKED)); \
    packed_data->index = glMultiTexCoordP3uiv_INDEX; \
    packed_data->args.a1 = (GLenum)texture; \
    packed_data->args.a2 = (GLenum)type; \
    packed_data->args.a3 = (GLuint *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoordP4ui(texture, type, coords) ({ \
    glMultiTexCoordP4ui_PACKED *packed_data = malloc(sizeof(glMultiTexCoordP4ui_PACKED)); \
    packed_data->index = glMultiTexCoordP4ui_INDEX; \
    packed_data->args.a1 = (GLenum)texture; \
    packed_data->args.a2 = (GLenum)type; \
    packed_data->args.a3 = (GLuint)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoordP4uiv(texture, type, coords) ({ \
    glMultiTexCoordP4uiv_PACKED *packed_data = malloc(sizeof(glMultiTexCoordP4uiv_PACKED)); \
    packed_data->index = glMultiTexCoordP4uiv_INDEX; \
    packed_data->args.a1 = (GLenum)texture; \
    packed_data->args.a2 = (GLenum)type; \
    packed_data->args.a3 = (GLuint *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexCoordPointerEXT(texunit, size, type, stride, pointer) ({ \
    glMultiTexCoordPointerEXT_PACKED *packed_data = malloc(sizeof(glMultiTexCoordPointerEXT_PACKED)); \
    packed_data->index = glMultiTexCoordPointerEXT_INDEX; \
    packed_data->args.a1 = (GLenum)texunit; \
    packed_data->args.a2 = (GLint)size; \
    packed_data->args.a3 = (GLenum)type; \
    packed_data->args.a4 = (GLsizei)stride; \
    packed_data->args.a5 = (GLvoid *)pointer; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexEnvfEXT(texunit, target, pname, param) ({ \
    glMultiTexEnvfEXT_PACKED *packed_data = malloc(sizeof(glMultiTexEnvfEXT_PACKED)); \
    packed_data->index = glMultiTexEnvfEXT_INDEX; \
    packed_data->args.a1 = (GLenum)texunit; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLfloat)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexEnvfvEXT(texunit, target, pname, params) ({ \
    glMultiTexEnvfvEXT_PACKED *packed_data = malloc(sizeof(glMultiTexEnvfvEXT_PACKED)); \
    packed_data->index = glMultiTexEnvfvEXT_INDEX; \
    packed_data->args.a1 = (GLenum)texunit; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexEnviEXT(texunit, target, pname, param) ({ \
    glMultiTexEnviEXT_PACKED *packed_data = malloc(sizeof(glMultiTexEnviEXT_PACKED)); \
    packed_data->index = glMultiTexEnviEXT_INDEX; \
    packed_data->args.a1 = (GLenum)texunit; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLint)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexEnvivEXT(texunit, target, pname, params) ({ \
    glMultiTexEnvivEXT_PACKED *packed_data = malloc(sizeof(glMultiTexEnvivEXT_PACKED)); \
    packed_data->index = glMultiTexEnvivEXT_INDEX; \
    packed_data->args.a1 = (GLenum)texunit; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexGendEXT(texunit, coord, pname, param) ({ \
    glMultiTexGendEXT_PACKED *packed_data = malloc(sizeof(glMultiTexGendEXT_PACKED)); \
    packed_data->index = glMultiTexGendEXT_INDEX; \
    packed_data->args.a1 = (GLenum)texunit; \
    packed_data->args.a2 = (GLenum)coord; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLdouble)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexGendvEXT(texunit, coord, pname, params) ({ \
    glMultiTexGendvEXT_PACKED *packed_data = malloc(sizeof(glMultiTexGendvEXT_PACKED)); \
    packed_data->index = glMultiTexGendvEXT_INDEX; \
    packed_data->args.a1 = (GLenum)texunit; \
    packed_data->args.a2 = (GLenum)coord; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLdouble *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexGenfEXT(texunit, coord, pname, param) ({ \
    glMultiTexGenfEXT_PACKED *packed_data = malloc(sizeof(glMultiTexGenfEXT_PACKED)); \
    packed_data->index = glMultiTexGenfEXT_INDEX; \
    packed_data->args.a1 = (GLenum)texunit; \
    packed_data->args.a2 = (GLenum)coord; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLfloat)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexGenfvEXT(texunit, coord, pname, params) ({ \
    glMultiTexGenfvEXT_PACKED *packed_data = malloc(sizeof(glMultiTexGenfvEXT_PACKED)); \
    packed_data->index = glMultiTexGenfvEXT_INDEX; \
    packed_data->args.a1 = (GLenum)texunit; \
    packed_data->args.a2 = (GLenum)coord; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexGeniEXT(texunit, coord, pname, param) ({ \
    glMultiTexGeniEXT_PACKED *packed_data = malloc(sizeof(glMultiTexGeniEXT_PACKED)); \
    packed_data->index = glMultiTexGeniEXT_INDEX; \
    packed_data->args.a1 = (GLenum)texunit; \
    packed_data->args.a2 = (GLenum)coord; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLint)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexGenivEXT(texunit, coord, pname, params) ({ \
    glMultiTexGenivEXT_PACKED *packed_data = malloc(sizeof(glMultiTexGenivEXT_PACKED)); \
    packed_data->index = glMultiTexGenivEXT_INDEX; \
    packed_data->args.a1 = (GLenum)texunit; \
    packed_data->args.a2 = (GLenum)coord; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, format, type, pixels) ({ \
    glMultiTexImage1DEXT_PACKED *packed_data = malloc(sizeof(glMultiTexImage1DEXT_PACKED)); \
    packed_data->index = glMultiTexImage1DEXT_INDEX; \
    packed_data->args.a1 = (GLenum)texunit; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLint)level; \
    packed_data->args.a4 = (GLenum)internalformat; \
    packed_data->args.a5 = (GLsizei)width; \
    packed_data->args.a6 = (GLint)border; \
    packed_data->args.a7 = (GLenum)format; \
    packed_data->args.a8 = (GLenum)type; \
    packed_data->args.a9 = (GLvoid *)pixels; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, format, type, pixels) ({ \
    glMultiTexImage2DEXT_PACKED *packed_data = malloc(sizeof(glMultiTexImage2DEXT_PACKED)); \
    packed_data->index = glMultiTexImage2DEXT_INDEX; \
    packed_data->args.a1 = (GLenum)texunit; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLint)level; \
    packed_data->args.a4 = (GLenum)internalformat; \
    packed_data->args.a5 = (GLsizei)width; \
    packed_data->args.a6 = (GLsizei)height; \
    packed_data->args.a7 = (GLint)border; \
    packed_data->args.a8 = (GLenum)format; \
    packed_data->args.a9 = (GLenum)type; \
    packed_data->args.a10 = (GLvoid *)pixels; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels) ({ \
    glMultiTexImage3DEXT_PACKED *packed_data = malloc(sizeof(glMultiTexImage3DEXT_PACKED)); \
    packed_data->index = glMultiTexImage3DEXT_INDEX; \
    packed_data->args.a1 = (GLenum)texunit; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLint)level; \
    packed_data->args.a4 = (GLenum)internalformat; \
    packed_data->args.a5 = (GLsizei)width; \
    packed_data->args.a6 = (GLsizei)height; \
    packed_data->args.a7 = (GLsizei)depth; \
    packed_data->args.a8 = (GLint)border; \
    packed_data->args.a9 = (GLenum)format; \
    packed_data->args.a10 = (GLenum)type; \
    packed_data->args.a11 = (GLvoid *)pixels; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexParameterIivEXT(texunit, target, pname, params) ({ \
    glMultiTexParameterIivEXT_PACKED *packed_data = malloc(sizeof(glMultiTexParameterIivEXT_PACKED)); \
    packed_data->index = glMultiTexParameterIivEXT_INDEX; \
    packed_data->args.a1 = (GLenum)texunit; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexParameterIuivEXT(texunit, target, pname, params) ({ \
    glMultiTexParameterIuivEXT_PACKED *packed_data = malloc(sizeof(glMultiTexParameterIuivEXT_PACKED)); \
    packed_data->index = glMultiTexParameterIuivEXT_INDEX; \
    packed_data->args.a1 = (GLenum)texunit; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLuint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexParameterfEXT(texunit, target, pname, param) ({ \
    glMultiTexParameterfEXT_PACKED *packed_data = malloc(sizeof(glMultiTexParameterfEXT_PACKED)); \
    packed_data->index = glMultiTexParameterfEXT_INDEX; \
    packed_data->args.a1 = (GLenum)texunit; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLfloat)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexParameterfvEXT(texunit, target, pname, params) ({ \
    glMultiTexParameterfvEXT_PACKED *packed_data = malloc(sizeof(glMultiTexParameterfvEXT_PACKED)); \
    packed_data->index = glMultiTexParameterfvEXT_INDEX; \
    packed_data->args.a1 = (GLenum)texunit; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexParameteriEXT(texunit, target, pname, param) ({ \
    glMultiTexParameteriEXT_PACKED *packed_data = malloc(sizeof(glMultiTexParameteriEXT_PACKED)); \
    packed_data->index = glMultiTexParameteriEXT_INDEX; \
    packed_data->args.a1 = (GLenum)texunit; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLint)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexParameterivEXT(texunit, target, pname, params) ({ \
    glMultiTexParameterivEXT_PACKED *packed_data = malloc(sizeof(glMultiTexParameterivEXT_PACKED)); \
    packed_data->index = glMultiTexParameterivEXT_INDEX; \
    packed_data->args.a1 = (GLenum)texunit; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexRenderbufferEXT(texunit, target, renderbuffer) ({ \
    glMultiTexRenderbufferEXT_PACKED *packed_data = malloc(sizeof(glMultiTexRenderbufferEXT_PACKED)); \
    packed_data->index = glMultiTexRenderbufferEXT_INDEX; \
    packed_data->args.a1 = (GLenum)texunit; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLuint)renderbuffer; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, type, pixels) ({ \
    glMultiTexSubImage1DEXT_PACKED *packed_data = malloc(sizeof(glMultiTexSubImage1DEXT_PACKED)); \
    packed_data->index = glMultiTexSubImage1DEXT_INDEX; \
    packed_data->args.a1 = (GLenum)texunit; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLint)level; \
    packed_data->args.a4 = (GLint)xoffset; \
    packed_data->args.a5 = (GLsizei)width; \
    packed_data->args.a6 = (GLenum)format; \
    packed_data->args.a7 = (GLenum)type; \
    packed_data->args.a8 = (GLvoid *)pixels; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels) ({ \
    glMultiTexSubImage2DEXT_PACKED *packed_data = malloc(sizeof(glMultiTexSubImage2DEXT_PACKED)); \
    packed_data->index = glMultiTexSubImage2DEXT_INDEX; \
    packed_data->args.a1 = (GLenum)texunit; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLint)level; \
    packed_data->args.a4 = (GLint)xoffset; \
    packed_data->args.a5 = (GLint)yoffset; \
    packed_data->args.a6 = (GLsizei)width; \
    packed_data->args.a7 = (GLsizei)height; \
    packed_data->args.a8 = (GLenum)format; \
    packed_data->args.a9 = (GLenum)type; \
    packed_data->args.a10 = (GLvoid *)pixels; \
    (packed_call_t *)packed_data; \
})
#define pack_glMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) ({ \
    glMultiTexSubImage3DEXT_PACKED *packed_data = malloc(sizeof(glMultiTexSubImage3DEXT_PACKED)); \
    packed_data->index = glMultiTexSubImage3DEXT_INDEX; \
    packed_data->args.a1 = (GLenum)texunit; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLint)level; \
    packed_data->args.a4 = (GLint)xoffset; \
    packed_data->args.a5 = (GLint)yoffset; \
    packed_data->args.a6 = (GLint)zoffset; \
    packed_data->args.a7 = (GLsizei)width; \
    packed_data->args.a8 = (GLsizei)height; \
    packed_data->args.a9 = (GLsizei)depth; \
    packed_data->args.a10 = (GLenum)format; \
    packed_data->args.a11 = (GLenum)type; \
    packed_data->args.a12 = (GLvoid *)pixels; \
    (packed_call_t *)packed_data; \
})
#define pack_glNamedBufferDataEXT(buffer, size, data, usage) ({ \
    glNamedBufferDataEXT_PACKED *packed_data = malloc(sizeof(glNamedBufferDataEXT_PACKED)); \
    packed_data->index = glNamedBufferDataEXT_INDEX; \
    packed_data->args.a1 = (GLuint)buffer; \
    packed_data->args.a2 = (GLsizeiptr)size; \
    packed_data->args.a3 = (GLvoid *)data; \
    packed_data->args.a4 = (GLenum)usage; \
    (packed_call_t *)packed_data; \
})
#define pack_glNamedBufferSubDataEXT(buffer, offset, size, data) ({ \
    glNamedBufferSubDataEXT_PACKED *packed_data = malloc(sizeof(glNamedBufferSubDataEXT_PACKED)); \
    packed_data->index = glNamedBufferSubDataEXT_INDEX; \
    packed_data->args.a1 = (GLuint)buffer; \
    packed_data->args.a2 = (GLintptr)offset; \
    packed_data->args.a3 = (GLsizeiptr)size; \
    packed_data->args.a4 = (GLvoid *)data; \
    (packed_call_t *)packed_data; \
})
#define pack_glNamedCopyBufferSubDataEXT(readBuffer, writeBuffer, readOffset, writeOffset, size) ({ \
    glNamedCopyBufferSubDataEXT_PACKED *packed_data = malloc(sizeof(glNamedCopyBufferSubDataEXT_PACKED)); \
    packed_data->index = glNamedCopyBufferSubDataEXT_INDEX; \
    packed_data->args.a1 = (GLuint)readBuffer; \
    packed_data->args.a2 = (GLuint)writeBuffer; \
    packed_data->args.a3 = (GLintptr)readOffset; \
    packed_data->args.a4 = (GLintptr)writeOffset; \
    packed_data->args.a5 = (GLsizeiptr)size; \
    (packed_call_t *)packed_data; \
})
#define pack_glNamedFramebufferParameteriEXT(framebuffer, pname, param) ({ \
    glNamedFramebufferParameteriEXT_PACKED *packed_data = malloc(sizeof(glNamedFramebufferParameteriEXT_PACKED)); \
    packed_data->index = glNamedFramebufferParameteriEXT_INDEX; \
    packed_data->args.a1 = (GLuint)framebuffer; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glNamedFramebufferRenderbufferEXT(framebuffer, attachment, renderbuffertarget, renderbuffer) ({ \
    glNamedFramebufferRenderbufferEXT_PACKED *packed_data = malloc(sizeof(glNamedFramebufferRenderbufferEXT_PACKED)); \
    packed_data->index = glNamedFramebufferRenderbufferEXT_INDEX; \
    packed_data->args.a1 = (GLuint)framebuffer; \
    packed_data->args.a2 = (GLenum)attachment; \
    packed_data->args.a3 = (GLenum)renderbuffertarget; \
    packed_data->args.a4 = (GLuint)renderbuffer; \
    (packed_call_t *)packed_data; \
})
#define pack_glNamedFramebufferTexture1DEXT(framebuffer, attachment, textarget, texture, level) ({ \
    glNamedFramebufferTexture1DEXT_PACKED *packed_data = malloc(sizeof(glNamedFramebufferTexture1DEXT_PACKED)); \
    packed_data->index = glNamedFramebufferTexture1DEXT_INDEX; \
    packed_data->args.a1 = (GLuint)framebuffer; \
    packed_data->args.a2 = (GLenum)attachment; \
    packed_data->args.a3 = (GLenum)textarget; \
    packed_data->args.a4 = (GLuint)texture; \
    packed_data->args.a5 = (GLint)level; \
    (packed_call_t *)packed_data; \
})
#define pack_glNamedFramebufferTexture2DEXT(framebuffer, attachment, textarget, texture, level) ({ \
    glNamedFramebufferTexture2DEXT_PACKED *packed_data = malloc(sizeof(glNamedFramebufferTexture2DEXT_PACKED)); \
    packed_data->index = glNamedFramebufferTexture2DEXT_INDEX; \
    packed_data->args.a1 = (GLuint)framebuffer; \
    packed_data->args.a2 = (GLenum)attachment; \
    packed_data->args.a3 = (GLenum)textarget; \
    packed_data->args.a4 = (GLuint)texture; \
    packed_data->args.a5 = (GLint)level; \
    (packed_call_t *)packed_data; \
})
#define pack_glNamedFramebufferTexture3DEXT(framebuffer, attachment, textarget, texture, level, zoffset) ({ \
    glNamedFramebufferTexture3DEXT_PACKED *packed_data = malloc(sizeof(glNamedFramebufferTexture3DEXT_PACKED)); \
    packed_data->index = glNamedFramebufferTexture3DEXT_INDEX; \
    packed_data->args.a1 = (GLuint)framebuffer; \
    packed_data->args.a2 = (GLenum)attachment; \
    packed_data->args.a3 = (GLenum)textarget; \
    packed_data->args.a4 = (GLuint)texture; \
    packed_data->args.a5 = (GLint)level; \
    packed_data->args.a6 = (GLint)zoffset; \
    (packed_call_t *)packed_data; \
})
#define pack_glNamedFramebufferTextureEXT(framebuffer, attachment, texture, level) ({ \
    glNamedFramebufferTextureEXT_PACKED *packed_data = malloc(sizeof(glNamedFramebufferTextureEXT_PACKED)); \
    packed_data->index = glNamedFramebufferTextureEXT_INDEX; \
    packed_data->args.a1 = (GLuint)framebuffer; \
    packed_data->args.a2 = (GLenum)attachment; \
    packed_data->args.a3 = (GLuint)texture; \
    packed_data->args.a4 = (GLint)level; \
    (packed_call_t *)packed_data; \
})
#define pack_glNamedFramebufferTextureFaceEXT(framebuffer, attachment, texture, level, face) ({ \
    glNamedFramebufferTextureFaceEXT_PACKED *packed_data = malloc(sizeof(glNamedFramebufferTextureFaceEXT_PACKED)); \
    packed_data->index = glNamedFramebufferTextureFaceEXT_INDEX; \
    packed_data->args.a1 = (GLuint)framebuffer; \
    packed_data->args.a2 = (GLenum)attachment; \
    packed_data->args.a3 = (GLuint)texture; \
    packed_data->args.a4 = (GLint)level; \
    packed_data->args.a5 = (GLenum)face; \
    (packed_call_t *)packed_data; \
})
#define pack_glNamedFramebufferTextureLayerEXT(framebuffer, attachment, texture, level, layer) ({ \
    glNamedFramebufferTextureLayerEXT_PACKED *packed_data = malloc(sizeof(glNamedFramebufferTextureLayerEXT_PACKED)); \
    packed_data->index = glNamedFramebufferTextureLayerEXT_INDEX; \
    packed_data->args.a1 = (GLuint)framebuffer; \
    packed_data->args.a2 = (GLenum)attachment; \
    packed_data->args.a3 = (GLuint)texture; \
    packed_data->args.a4 = (GLint)level; \
    packed_data->args.a5 = (GLint)layer; \
    (packed_call_t *)packed_data; \
})
#define pack_glNamedProgramLocalParameter4dEXT(program, target, index, x, y, z, w) ({ \
    glNamedProgramLocalParameter4dEXT_PACKED *packed_data = malloc(sizeof(glNamedProgramLocalParameter4dEXT_PACKED)); \
    packed_data->index = glNamedProgramLocalParameter4dEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLuint)index; \
    packed_data->args.a4 = (GLdouble)x; \
    packed_data->args.a5 = (GLdouble)y; \
    packed_data->args.a6 = (GLdouble)z; \
    packed_data->args.a7 = (GLdouble)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glNamedProgramLocalParameter4dvEXT(program, target, index, params) ({ \
    glNamedProgramLocalParameter4dvEXT_PACKED *packed_data = malloc(sizeof(glNamedProgramLocalParameter4dvEXT_PACKED)); \
    packed_data->index = glNamedProgramLocalParameter4dvEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLuint)index; \
    packed_data->args.a4 = (GLdouble *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glNamedProgramLocalParameter4fEXT(program, target, index, x, y, z, w) ({ \
    glNamedProgramLocalParameter4fEXT_PACKED *packed_data = malloc(sizeof(glNamedProgramLocalParameter4fEXT_PACKED)); \
    packed_data->index = glNamedProgramLocalParameter4fEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLuint)index; \
    packed_data->args.a4 = (GLfloat)x; \
    packed_data->args.a5 = (GLfloat)y; \
    packed_data->args.a6 = (GLfloat)z; \
    packed_data->args.a7 = (GLfloat)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glNamedProgramLocalParameter4fvEXT(program, target, index, params) ({ \
    glNamedProgramLocalParameter4fvEXT_PACKED *packed_data = malloc(sizeof(glNamedProgramLocalParameter4fvEXT_PACKED)); \
    packed_data->index = glNamedProgramLocalParameter4fvEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLuint)index; \
    packed_data->args.a4 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glNamedProgramLocalParameterI4iEXT(program, target, index, x, y, z, w) ({ \
    glNamedProgramLocalParameterI4iEXT_PACKED *packed_data = malloc(sizeof(glNamedProgramLocalParameterI4iEXT_PACKED)); \
    packed_data->index = glNamedProgramLocalParameterI4iEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLuint)index; \
    packed_data->args.a4 = (GLint)x; \
    packed_data->args.a5 = (GLint)y; \
    packed_data->args.a6 = (GLint)z; \
    packed_data->args.a7 = (GLint)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glNamedProgramLocalParameterI4ivEXT(program, target, index, params) ({ \
    glNamedProgramLocalParameterI4ivEXT_PACKED *packed_data = malloc(sizeof(glNamedProgramLocalParameterI4ivEXT_PACKED)); \
    packed_data->index = glNamedProgramLocalParameterI4ivEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLuint)index; \
    packed_data->args.a4 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glNamedProgramLocalParameterI4uiEXT(program, target, index, x, y, z, w) ({ \
    glNamedProgramLocalParameterI4uiEXT_PACKED *packed_data = malloc(sizeof(glNamedProgramLocalParameterI4uiEXT_PACKED)); \
    packed_data->index = glNamedProgramLocalParameterI4uiEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLuint)index; \
    packed_data->args.a4 = (GLuint)x; \
    packed_data->args.a5 = (GLuint)y; \
    packed_data->args.a6 = (GLuint)z; \
    packed_data->args.a7 = (GLuint)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glNamedProgramLocalParameterI4uivEXT(program, target, index, params) ({ \
    glNamedProgramLocalParameterI4uivEXT_PACKED *packed_data = malloc(sizeof(glNamedProgramLocalParameterI4uivEXT_PACKED)); \
    packed_data->index = glNamedProgramLocalParameterI4uivEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLuint)index; \
    packed_data->args.a4 = (GLuint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glNamedProgramLocalParameters4fvEXT(program, target, index, count, params) ({ \
    glNamedProgramLocalParameters4fvEXT_PACKED *packed_data = malloc(sizeof(glNamedProgramLocalParameters4fvEXT_PACKED)); \
    packed_data->index = glNamedProgramLocalParameters4fvEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLuint)index; \
    packed_data->args.a4 = (GLsizei)count; \
    packed_data->args.a5 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glNamedProgramLocalParametersI4ivEXT(program, target, index, count, params) ({ \
    glNamedProgramLocalParametersI4ivEXT_PACKED *packed_data = malloc(sizeof(glNamedProgramLocalParametersI4ivEXT_PACKED)); \
    packed_data->index = glNamedProgramLocalParametersI4ivEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLuint)index; \
    packed_data->args.a4 = (GLsizei)count; \
    packed_data->args.a5 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glNamedProgramLocalParametersI4uivEXT(program, target, index, count, params) ({ \
    glNamedProgramLocalParametersI4uivEXT_PACKED *packed_data = malloc(sizeof(glNamedProgramLocalParametersI4uivEXT_PACKED)); \
    packed_data->index = glNamedProgramLocalParametersI4uivEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLuint)index; \
    packed_data->args.a4 = (GLsizei)count; \
    packed_data->args.a5 = (GLuint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glNamedProgramStringEXT(program, target, format, len, string) ({ \
    glNamedProgramStringEXT_PACKED *packed_data = malloc(sizeof(glNamedProgramStringEXT_PACKED)); \
    packed_data->index = glNamedProgramStringEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLenum)format; \
    packed_data->args.a4 = (GLsizei)len; \
    packed_data->args.a5 = (GLvoid *)string; \
    (packed_call_t *)packed_data; \
})
#define pack_glNamedRenderbufferStorageEXT(renderbuffer, internalformat, width, height) ({ \
    glNamedRenderbufferStorageEXT_PACKED *packed_data = malloc(sizeof(glNamedRenderbufferStorageEXT_PACKED)); \
    packed_data->index = glNamedRenderbufferStorageEXT_INDEX; \
    packed_data->args.a1 = (GLuint)renderbuffer; \
    packed_data->args.a2 = (GLenum)internalformat; \
    packed_data->args.a3 = (GLsizei)width; \
    packed_data->args.a4 = (GLsizei)height; \
    (packed_call_t *)packed_data; \
})
#define pack_glNamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer, coverageSamples, colorSamples, internalformat, width, height) ({ \
    glNamedRenderbufferStorageMultisampleCoverageEXT_PACKED *packed_data = malloc(sizeof(glNamedRenderbufferStorageMultisampleCoverageEXT_PACKED)); \
    packed_data->index = glNamedRenderbufferStorageMultisampleCoverageEXT_INDEX; \
    packed_data->args.a1 = (GLuint)renderbuffer; \
    packed_data->args.a2 = (GLsizei)coverageSamples; \
    packed_data->args.a3 = (GLsizei)colorSamples; \
    packed_data->args.a4 = (GLenum)internalformat; \
    packed_data->args.a5 = (GLsizei)width; \
    packed_data->args.a6 = (GLsizei)height; \
    (packed_call_t *)packed_data; \
})
#define pack_glNamedRenderbufferStorageMultisampleEXT(renderbuffer, samples, internalformat, width, height) ({ \
    glNamedRenderbufferStorageMultisampleEXT_PACKED *packed_data = malloc(sizeof(glNamedRenderbufferStorageMultisampleEXT_PACKED)); \
    packed_data->index = glNamedRenderbufferStorageMultisampleEXT_INDEX; \
    packed_data->args.a1 = (GLuint)renderbuffer; \
    packed_data->args.a2 = (GLsizei)samples; \
    packed_data->args.a3 = (GLenum)internalformat; \
    packed_data->args.a4 = (GLsizei)width; \
    packed_data->args.a5 = (GLsizei)height; \
    (packed_call_t *)packed_data; \
})
#define pack_glNamedStringARB(type, namelen, name, stringlen, string) ({ \
    glNamedStringARB_PACKED *packed_data = malloc(sizeof(glNamedStringARB_PACKED)); \
    packed_data->index = glNamedStringARB_INDEX; \
    packed_data->args.a1 = (GLenum)type; \
    packed_data->args.a2 = (GLint)namelen; \
    packed_data->args.a3 = (GLchar *)name; \
    packed_data->args.a4 = (GLint)stringlen; \
    packed_data->args.a5 = (GLchar *)string; \
    (packed_call_t *)packed_data; \
})
#define pack_glNewList(list, mode) ({ \
    glNewList_PACKED *packed_data = malloc(sizeof(glNewList_PACKED)); \
    packed_data->index = glNewList_INDEX; \
    packed_data->args.a1 = (GLuint)list; \
    packed_data->args.a2 = (GLenum)mode; \
    (packed_call_t *)packed_data; \
})
#define pack_glNewObjectBufferATI(size, pointer, usage) ({ \
    glNewObjectBufferATI_PACKED *packed_data = malloc(sizeof(glNewObjectBufferATI_PACKED)); \
    packed_data->index = glNewObjectBufferATI_INDEX; \
    packed_data->args.a1 = (GLsizei)size; \
    packed_data->args.a2 = (GLvoid *)pointer; \
    packed_data->args.a3 = (GLenum)usage; \
    (packed_call_t *)packed_data; \
})
#define pack_glNormal3b(nx, ny, nz) ({ \
    glNormal3b_PACKED *packed_data = malloc(sizeof(glNormal3b_PACKED)); \
    packed_data->index = glNormal3b_INDEX; \
    packed_data->args.a1 = (GLbyte)nx; \
    packed_data->args.a2 = (GLbyte)ny; \
    packed_data->args.a3 = (GLbyte)nz; \
    (packed_call_t *)packed_data; \
})
#define pack_glNormal3bv(v) ({ \
    glNormal3bv_PACKED *packed_data = malloc(sizeof(glNormal3bv_PACKED)); \
    packed_data->index = glNormal3bv_INDEX; \
    packed_data->args.a1 = (GLbyte *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glNormal3d(nx, ny, nz) ({ \
    glNormal3d_PACKED *packed_data = malloc(sizeof(glNormal3d_PACKED)); \
    packed_data->index = glNormal3d_INDEX; \
    packed_data->args.a1 = (GLdouble)nx; \
    packed_data->args.a2 = (GLdouble)ny; \
    packed_data->args.a3 = (GLdouble)nz; \
    (packed_call_t *)packed_data; \
})
#define pack_glNormal3dv(v) ({ \
    glNormal3dv_PACKED *packed_data = malloc(sizeof(glNormal3dv_PACKED)); \
    packed_data->index = glNormal3dv_INDEX; \
    packed_data->args.a1 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glNormal3f(nx, ny, nz) ({ \
    glNormal3f_PACKED *packed_data = malloc(sizeof(glNormal3f_PACKED)); \
    packed_data->index = glNormal3f_INDEX; \
    packed_data->args.a1 = (GLfloat)nx; \
    packed_data->args.a2 = (GLfloat)ny; \
    packed_data->args.a3 = (GLfloat)nz; \
    (packed_call_t *)packed_data; \
})
#define pack_glNormal3fVertex3fSUN(nx, ny, nz, x, y, z) ({ \
    glNormal3fVertex3fSUN_PACKED *packed_data = malloc(sizeof(glNormal3fVertex3fSUN_PACKED)); \
    packed_data->index = glNormal3fVertex3fSUN_INDEX; \
    packed_data->args.a1 = (GLfloat)nx; \
    packed_data->args.a2 = (GLfloat)ny; \
    packed_data->args.a3 = (GLfloat)nz; \
    packed_data->args.a4 = (GLfloat)x; \
    packed_data->args.a5 = (GLfloat)y; \
    packed_data->args.a6 = (GLfloat)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glNormal3fVertex3fvSUN(n, v) ({ \
    glNormal3fVertex3fvSUN_PACKED *packed_data = malloc(sizeof(glNormal3fVertex3fvSUN_PACKED)); \
    packed_data->index = glNormal3fVertex3fvSUN_INDEX; \
    packed_data->args.a1 = (GLfloat *)n; \
    packed_data->args.a2 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glNormal3fv(v) ({ \
    glNormal3fv_PACKED *packed_data = malloc(sizeof(glNormal3fv_PACKED)); \
    packed_data->index = glNormal3fv_INDEX; \
    packed_data->args.a1 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glNormal3hNV(nx, ny, nz) ({ \
    glNormal3hNV_PACKED *packed_data = malloc(sizeof(glNormal3hNV_PACKED)); \
    packed_data->index = glNormal3hNV_INDEX; \
    packed_data->args.a1 = (GLhalfNV)nx; \
    packed_data->args.a2 = (GLhalfNV)ny; \
    packed_data->args.a3 = (GLhalfNV)nz; \
    (packed_call_t *)packed_data; \
})
#define pack_glNormal3hvNV(v) ({ \
    glNormal3hvNV_PACKED *packed_data = malloc(sizeof(glNormal3hvNV_PACKED)); \
    packed_data->index = glNormal3hvNV_INDEX; \
    packed_data->args.a1 = (GLhalfNV *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glNormal3i(nx, ny, nz) ({ \
    glNormal3i_PACKED *packed_data = malloc(sizeof(glNormal3i_PACKED)); \
    packed_data->index = glNormal3i_INDEX; \
    packed_data->args.a1 = (GLint)nx; \
    packed_data->args.a2 = (GLint)ny; \
    packed_data->args.a3 = (GLint)nz; \
    (packed_call_t *)packed_data; \
})
#define pack_glNormal3iv(v) ({ \
    glNormal3iv_PACKED *packed_data = malloc(sizeof(glNormal3iv_PACKED)); \
    packed_data->index = glNormal3iv_INDEX; \
    packed_data->args.a1 = (GLint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glNormal3s(nx, ny, nz) ({ \
    glNormal3s_PACKED *packed_data = malloc(sizeof(glNormal3s_PACKED)); \
    packed_data->index = glNormal3s_INDEX; \
    packed_data->args.a1 = (GLshort)nx; \
    packed_data->args.a2 = (GLshort)ny; \
    packed_data->args.a3 = (GLshort)nz; \
    (packed_call_t *)packed_data; \
})
#define pack_glNormal3sv(v) ({ \
    glNormal3sv_PACKED *packed_data = malloc(sizeof(glNormal3sv_PACKED)); \
    packed_data->index = glNormal3sv_INDEX; \
    packed_data->args.a1 = (GLshort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glNormal3x(nx, ny, nz) ({ \
    glNormal3x_PACKED *packed_data = malloc(sizeof(glNormal3x_PACKED)); \
    packed_data->index = glNormal3x_INDEX; \
    packed_data->args.a1 = (GLfixed)nx; \
    packed_data->args.a2 = (GLfixed)ny; \
    packed_data->args.a3 = (GLfixed)nz; \
    (packed_call_t *)packed_data; \
})
#define pack_glNormal3xOES(nx, ny, nz) ({ \
    glNormal3xOES_PACKED *packed_data = malloc(sizeof(glNormal3xOES_PACKED)); \
    packed_data->index = glNormal3xOES_INDEX; \
    packed_data->args.a1 = (GLfixed)nx; \
    packed_data->args.a2 = (GLfixed)ny; \
    packed_data->args.a3 = (GLfixed)nz; \
    (packed_call_t *)packed_data; \
})
#define pack_glNormal3xvOES(coords) ({ \
    glNormal3xvOES_PACKED *packed_data = malloc(sizeof(glNormal3xvOES_PACKED)); \
    packed_data->index = glNormal3xvOES_INDEX; \
    packed_data->args.a1 = (GLfixed *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glNormalFormatNV(type, stride) ({ \
    glNormalFormatNV_PACKED *packed_data = malloc(sizeof(glNormalFormatNV_PACKED)); \
    packed_data->index = glNormalFormatNV_INDEX; \
    packed_data->args.a1 = (GLenum)type; \
    packed_data->args.a2 = (GLsizei)stride; \
    (packed_call_t *)packed_data; \
})
#define pack_glNormalP3ui(type, coords) ({ \
    glNormalP3ui_PACKED *packed_data = malloc(sizeof(glNormalP3ui_PACKED)); \
    packed_data->index = glNormalP3ui_INDEX; \
    packed_data->args.a1 = (GLenum)type; \
    packed_data->args.a2 = (GLuint)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glNormalP3uiv(type, coords) ({ \
    glNormalP3uiv_PACKED *packed_data = malloc(sizeof(glNormalP3uiv_PACKED)); \
    packed_data->index = glNormalP3uiv_INDEX; \
    packed_data->args.a1 = (GLenum)type; \
    packed_data->args.a2 = (GLuint *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glNormalPointer(type, stride, pointer) ({ \
    glNormalPointer_PACKED *packed_data = malloc(sizeof(glNormalPointer_PACKED)); \
    packed_data->index = glNormalPointer_INDEX; \
    packed_data->args.a1 = (GLenum)type; \
    packed_data->args.a2 = (GLsizei)stride; \
    packed_data->args.a3 = (GLvoid *)pointer; \
    (packed_call_t *)packed_data; \
})
#define pack_glNormalPointerEXT(type, stride, count, pointer) ({ \
    glNormalPointerEXT_PACKED *packed_data = malloc(sizeof(glNormalPointerEXT_PACKED)); \
    packed_data->index = glNormalPointerEXT_INDEX; \
    packed_data->args.a1 = (GLenum)type; \
    packed_data->args.a2 = (GLsizei)stride; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLvoid *)pointer; \
    (packed_call_t *)packed_data; \
})
#define pack_glNormalPointerListIBM(type, stride, pointer, ptrstride) ({ \
    glNormalPointerListIBM_PACKED *packed_data = malloc(sizeof(glNormalPointerListIBM_PACKED)); \
    packed_data->index = glNormalPointerListIBM_INDEX; \
    packed_data->args.a1 = (GLenum)type; \
    packed_data->args.a2 = (GLint)stride; \
    packed_data->args.a3 = (GLvoid *)pointer; \
    packed_data->args.a4 = (GLint)ptrstride; \
    (packed_call_t *)packed_data; \
})
#define pack_glNormalPointervINTEL(type, pointer) ({ \
    glNormalPointervINTEL_PACKED *packed_data = malloc(sizeof(glNormalPointervINTEL_PACKED)); \
    packed_data->index = glNormalPointervINTEL_INDEX; \
    packed_data->args.a1 = (GLenum)type; \
    packed_data->args.a2 = (GLvoid *)pointer; \
    (packed_call_t *)packed_data; \
})
#define pack_glNormalStream3bATI(stream, nx, ny, nz) ({ \
    glNormalStream3bATI_PACKED *packed_data = malloc(sizeof(glNormalStream3bATI_PACKED)); \
    packed_data->index = glNormalStream3bATI_INDEX; \
    packed_data->args.a1 = (GLenum)stream; \
    packed_data->args.a2 = (GLbyte)nx; \
    packed_data->args.a3 = (GLbyte)ny; \
    packed_data->args.a4 = (GLbyte)nz; \
    (packed_call_t *)packed_data; \
})
#define pack_glNormalStream3bvATI(stream, coords) ({ \
    glNormalStream3bvATI_PACKED *packed_data = malloc(sizeof(glNormalStream3bvATI_PACKED)); \
    packed_data->index = glNormalStream3bvATI_INDEX; \
    packed_data->args.a1 = (GLenum)stream; \
    packed_data->args.a2 = (GLbyte *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glNormalStream3dATI(stream, nx, ny, nz) ({ \
    glNormalStream3dATI_PACKED *packed_data = malloc(sizeof(glNormalStream3dATI_PACKED)); \
    packed_data->index = glNormalStream3dATI_INDEX; \
    packed_data->args.a1 = (GLenum)stream; \
    packed_data->args.a2 = (GLdouble)nx; \
    packed_data->args.a3 = (GLdouble)ny; \
    packed_data->args.a4 = (GLdouble)nz; \
    (packed_call_t *)packed_data; \
})
#define pack_glNormalStream3dvATI(stream, coords) ({ \
    glNormalStream3dvATI_PACKED *packed_data = malloc(sizeof(glNormalStream3dvATI_PACKED)); \
    packed_data->index = glNormalStream3dvATI_INDEX; \
    packed_data->args.a1 = (GLenum)stream; \
    packed_data->args.a2 = (GLdouble *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glNormalStream3fATI(stream, nx, ny, nz) ({ \
    glNormalStream3fATI_PACKED *packed_data = malloc(sizeof(glNormalStream3fATI_PACKED)); \
    packed_data->index = glNormalStream3fATI_INDEX; \
    packed_data->args.a1 = (GLenum)stream; \
    packed_data->args.a2 = (GLfloat)nx; \
    packed_data->args.a3 = (GLfloat)ny; \
    packed_data->args.a4 = (GLfloat)nz; \
    (packed_call_t *)packed_data; \
})
#define pack_glNormalStream3fvATI(stream, coords) ({ \
    glNormalStream3fvATI_PACKED *packed_data = malloc(sizeof(glNormalStream3fvATI_PACKED)); \
    packed_data->index = glNormalStream3fvATI_INDEX; \
    packed_data->args.a1 = (GLenum)stream; \
    packed_data->args.a2 = (GLfloat *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glNormalStream3iATI(stream, nx, ny, nz) ({ \
    glNormalStream3iATI_PACKED *packed_data = malloc(sizeof(glNormalStream3iATI_PACKED)); \
    packed_data->index = glNormalStream3iATI_INDEX; \
    packed_data->args.a1 = (GLenum)stream; \
    packed_data->args.a2 = (GLint)nx; \
    packed_data->args.a3 = (GLint)ny; \
    packed_data->args.a4 = (GLint)nz; \
    (packed_call_t *)packed_data; \
})
#define pack_glNormalStream3ivATI(stream, coords) ({ \
    glNormalStream3ivATI_PACKED *packed_data = malloc(sizeof(glNormalStream3ivATI_PACKED)); \
    packed_data->index = glNormalStream3ivATI_INDEX; \
    packed_data->args.a1 = (GLenum)stream; \
    packed_data->args.a2 = (GLint *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glNormalStream3sATI(stream, nx, ny, nz) ({ \
    glNormalStream3sATI_PACKED *packed_data = malloc(sizeof(glNormalStream3sATI_PACKED)); \
    packed_data->index = glNormalStream3sATI_INDEX; \
    packed_data->args.a1 = (GLenum)stream; \
    packed_data->args.a2 = (GLshort)nx; \
    packed_data->args.a3 = (GLshort)ny; \
    packed_data->args.a4 = (GLshort)nz; \
    (packed_call_t *)packed_data; \
})
#define pack_glNormalStream3svATI(stream, coords) ({ \
    glNormalStream3svATI_PACKED *packed_data = malloc(sizeof(glNormalStream3svATI_PACKED)); \
    packed_data->index = glNormalStream3svATI_INDEX; \
    packed_data->args.a1 = (GLenum)stream; \
    packed_data->args.a2 = (GLshort *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glObjectLabel(identifier, name, length, label) ({ \
    glObjectLabel_PACKED *packed_data = malloc(sizeof(glObjectLabel_PACKED)); \
    packed_data->index = glObjectLabel_INDEX; \
    packed_data->args.a1 = (GLenum)identifier; \
    packed_data->args.a2 = (GLuint)name; \
    packed_data->args.a3 = (GLsizei)length; \
    packed_data->args.a4 = (GLchar *)label; \
    (packed_call_t *)packed_data; \
})
#define pack_glObjectPtrLabel(ptr, length, label) ({ \
    glObjectPtrLabel_PACKED *packed_data = malloc(sizeof(glObjectPtrLabel_PACKED)); \
    packed_data->index = glObjectPtrLabel_INDEX; \
    packed_data->args.a1 = (void *)ptr; \
    packed_data->args.a2 = (GLsizei)length; \
    packed_data->args.a3 = (GLchar *)label; \
    (packed_call_t *)packed_data; \
})
#define pack_glObjectPurgeableAPPLE(objectType, name, option) ({ \
    glObjectPurgeableAPPLE_PACKED *packed_data = malloc(sizeof(glObjectPurgeableAPPLE_PACKED)); \
    packed_data->index = glObjectPurgeableAPPLE_INDEX; \
    packed_data->args.a1 = (GLenum)objectType; \
    packed_data->args.a2 = (GLuint)name; \
    packed_data->args.a3 = (GLenum)option; \
    (packed_call_t *)packed_data; \
})
#define pack_glObjectUnpurgeableAPPLE(objectType, name, option) ({ \
    glObjectUnpurgeableAPPLE_PACKED *packed_data = malloc(sizeof(glObjectUnpurgeableAPPLE_PACKED)); \
    packed_data->index = glObjectUnpurgeableAPPLE_INDEX; \
    packed_data->args.a1 = (GLenum)objectType; \
    packed_data->args.a2 = (GLuint)name; \
    packed_data->args.a3 = (GLenum)option; \
    (packed_call_t *)packed_data; \
})
#define pack_glOrtho(left, right, bottom, top, zNear, zFar) ({ \
    glOrtho_PACKED *packed_data = malloc(sizeof(glOrtho_PACKED)); \
    packed_data->index = glOrtho_INDEX; \
    packed_data->args.a1 = (GLdouble)left; \
    packed_data->args.a2 = (GLdouble)right; \
    packed_data->args.a3 = (GLdouble)bottom; \
    packed_data->args.a4 = (GLdouble)top; \
    packed_data->args.a5 = (GLdouble)zNear; \
    packed_data->args.a6 = (GLdouble)zFar; \
    (packed_call_t *)packed_data; \
})
#define pack_glOrthof(left, right, bottom, top, near, far) ({ \
    glOrthof_PACKED *packed_data = malloc(sizeof(glOrthof_PACKED)); \
    packed_data->index = glOrthof_INDEX; \
    packed_data->args.a1 = (GLfloat)left; \
    packed_data->args.a2 = (GLfloat)right; \
    packed_data->args.a3 = (GLfloat)bottom; \
    packed_data->args.a4 = (GLfloat)top; \
    packed_data->args.a5 = (GLfloat)near; \
    packed_data->args.a6 = (GLfloat)far; \
    (packed_call_t *)packed_data; \
})
#define pack_glOrthofOES(l, r, b, t, n, f) ({ \
    glOrthofOES_PACKED *packed_data = malloc(sizeof(glOrthofOES_PACKED)); \
    packed_data->index = glOrthofOES_INDEX; \
    packed_data->args.a1 = (GLfloat)l; \
    packed_data->args.a2 = (GLfloat)r; \
    packed_data->args.a3 = (GLfloat)b; \
    packed_data->args.a4 = (GLfloat)t; \
    packed_data->args.a5 = (GLfloat)n; \
    packed_data->args.a6 = (GLfloat)f; \
    (packed_call_t *)packed_data; \
})
#define pack_glOrthox(left, right, bottom, top, near, far) ({ \
    glOrthox_PACKED *packed_data = malloc(sizeof(glOrthox_PACKED)); \
    packed_data->index = glOrthox_INDEX; \
    packed_data->args.a1 = (GLfixed)left; \
    packed_data->args.a2 = (GLfixed)right; \
    packed_data->args.a3 = (GLfixed)bottom; \
    packed_data->args.a4 = (GLfixed)top; \
    packed_data->args.a5 = (GLfixed)near; \
    packed_data->args.a6 = (GLfixed)far; \
    (packed_call_t *)packed_data; \
})
#define pack_glOrthoxOES(l, r, b, t, n, f) ({ \
    glOrthoxOES_PACKED *packed_data = malloc(sizeof(glOrthoxOES_PACKED)); \
    packed_data->index = glOrthoxOES_INDEX; \
    packed_data->args.a1 = (GLfixed)l; \
    packed_data->args.a2 = (GLfixed)r; \
    packed_data->args.a3 = (GLfixed)b; \
    packed_data->args.a4 = (GLfixed)t; \
    packed_data->args.a5 = (GLfixed)n; \
    packed_data->args.a6 = (GLfixed)f; \
    (packed_call_t *)packed_data; \
})
#define pack_glPNTrianglesfATI(pname, param) ({ \
    glPNTrianglesfATI_PACKED *packed_data = malloc(sizeof(glPNTrianglesfATI_PACKED)); \
    packed_data->index = glPNTrianglesfATI_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLfloat)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glPNTrianglesiATI(pname, param) ({ \
    glPNTrianglesiATI_PACKED *packed_data = malloc(sizeof(glPNTrianglesiATI_PACKED)); \
    packed_data->index = glPNTrianglesiATI_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLint)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glPassTexCoordATI(dst, coord, swizzle) ({ \
    glPassTexCoordATI_PACKED *packed_data = malloc(sizeof(glPassTexCoordATI_PACKED)); \
    packed_data->index = glPassTexCoordATI_INDEX; \
    packed_data->args.a1 = (GLuint)dst; \
    packed_data->args.a2 = (GLuint)coord; \
    packed_data->args.a3 = (GLenum)swizzle; \
    (packed_call_t *)packed_data; \
})
#define pack_glPassThrough(token) ({ \
    glPassThrough_PACKED *packed_data = malloc(sizeof(glPassThrough_PACKED)); \
    packed_data->index = glPassThrough_INDEX; \
    packed_data->args.a1 = (GLfloat)token; \
    (packed_call_t *)packed_data; \
})
#define pack_glPassThroughxOES(token) ({ \
    glPassThroughxOES_PACKED *packed_data = malloc(sizeof(glPassThroughxOES_PACKED)); \
    packed_data->index = glPassThroughxOES_INDEX; \
    packed_data->args.a1 = (GLfixed)token; \
    (packed_call_t *)packed_data; \
})
#define pack_glPatchParameterfv(pname, values) ({ \
    glPatchParameterfv_PACKED *packed_data = malloc(sizeof(glPatchParameterfv_PACKED)); \
    packed_data->index = glPatchParameterfv_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLfloat *)values; \
    (packed_call_t *)packed_data; \
})
#define pack_glPatchParameteri(pname, value) ({ \
    glPatchParameteri_PACKED *packed_data = malloc(sizeof(glPatchParameteri_PACKED)); \
    packed_data->index = glPatchParameteri_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLint)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glPathColorGenNV(color, genMode, colorFormat, coeffs) ({ \
    glPathColorGenNV_PACKED *packed_data = malloc(sizeof(glPathColorGenNV_PACKED)); \
    packed_data->index = glPathColorGenNV_INDEX; \
    packed_data->args.a1 = (GLenum)color; \
    packed_data->args.a2 = (GLenum)genMode; \
    packed_data->args.a3 = (GLenum)colorFormat; \
    packed_data->args.a4 = (GLfloat *)coeffs; \
    (packed_call_t *)packed_data; \
})
#define pack_glPathCommandsNV(path, numCommands, commands, numCoords, coordType, coords) ({ \
    glPathCommandsNV_PACKED *packed_data = malloc(sizeof(glPathCommandsNV_PACKED)); \
    packed_data->index = glPathCommandsNV_INDEX; \
    packed_data->args.a1 = (GLuint)path; \
    packed_data->args.a2 = (GLsizei)numCommands; \
    packed_data->args.a3 = (GLubyte *)commands; \
    packed_data->args.a4 = (GLsizei)numCoords; \
    packed_data->args.a5 = (GLenum)coordType; \
    packed_data->args.a6 = (GLvoid *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glPathCoordsNV(path, numCoords, coordType, coords) ({ \
    glPathCoordsNV_PACKED *packed_data = malloc(sizeof(glPathCoordsNV_PACKED)); \
    packed_data->index = glPathCoordsNV_INDEX; \
    packed_data->args.a1 = (GLuint)path; \
    packed_data->args.a2 = (GLsizei)numCoords; \
    packed_data->args.a3 = (GLenum)coordType; \
    packed_data->args.a4 = (GLvoid *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glPathCoverDepthFuncNV(func) ({ \
    glPathCoverDepthFuncNV_PACKED *packed_data = malloc(sizeof(glPathCoverDepthFuncNV_PACKED)); \
    packed_data->index = glPathCoverDepthFuncNV_INDEX; \
    packed_data->args.a1 = (GLenum)func; \
    (packed_call_t *)packed_data; \
})
#define pack_glPathDashArrayNV(path, dashCount, dashArray) ({ \
    glPathDashArrayNV_PACKED *packed_data = malloc(sizeof(glPathDashArrayNV_PACKED)); \
    packed_data->index = glPathDashArrayNV_INDEX; \
    packed_data->args.a1 = (GLuint)path; \
    packed_data->args.a2 = (GLsizei)dashCount; \
    packed_data->args.a3 = (GLfloat *)dashArray; \
    (packed_call_t *)packed_data; \
})
#define pack_glPathFogGenNV(genMode) ({ \
    glPathFogGenNV_PACKED *packed_data = malloc(sizeof(glPathFogGenNV_PACKED)); \
    packed_data->index = glPathFogGenNV_INDEX; \
    packed_data->args.a1 = (GLenum)genMode; \
    (packed_call_t *)packed_data; \
})
#define pack_glPathGlyphRangeNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale) ({ \
    glPathGlyphRangeNV_PACKED *packed_data = malloc(sizeof(glPathGlyphRangeNV_PACKED)); \
    packed_data->index = glPathGlyphRangeNV_INDEX; \
    packed_data->args.a1 = (GLuint)firstPathName; \
    packed_data->args.a2 = (GLenum)fontTarget; \
    packed_data->args.a3 = (GLvoid *)fontName; \
    packed_data->args.a4 = (GLbitfield)fontStyle; \
    packed_data->args.a5 = (GLuint)firstGlyph; \
    packed_data->args.a6 = (GLsizei)numGlyphs; \
    packed_data->args.a7 = (GLenum)handleMissingGlyphs; \
    packed_data->args.a8 = (GLuint)pathParameterTemplate; \
    packed_data->args.a9 = (GLfloat)emScale; \
    (packed_call_t *)packed_data; \
})
#define pack_glPathGlyphsNV(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale) ({ \
    glPathGlyphsNV_PACKED *packed_data = malloc(sizeof(glPathGlyphsNV_PACKED)); \
    packed_data->index = glPathGlyphsNV_INDEX; \
    packed_data->args.a1 = (GLuint)firstPathName; \
    packed_data->args.a2 = (GLenum)fontTarget; \
    packed_data->args.a3 = (GLvoid *)fontName; \
    packed_data->args.a4 = (GLbitfield)fontStyle; \
    packed_data->args.a5 = (GLsizei)numGlyphs; \
    packed_data->args.a6 = (GLenum)type; \
    packed_data->args.a7 = (GLvoid *)charcodes; \
    packed_data->args.a8 = (GLenum)handleMissingGlyphs; \
    packed_data->args.a9 = (GLuint)pathParameterTemplate; \
    packed_data->args.a10 = (GLfloat)emScale; \
    (packed_call_t *)packed_data; \
})
#define pack_glPathParameterfNV(path, pname, value) ({ \
    glPathParameterfNV_PACKED *packed_data = malloc(sizeof(glPathParameterfNV_PACKED)); \
    packed_data->index = glPathParameterfNV_INDEX; \
    packed_data->args.a1 = (GLuint)path; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glPathParameterfvNV(path, pname, value) ({ \
    glPathParameterfvNV_PACKED *packed_data = malloc(sizeof(glPathParameterfvNV_PACKED)); \
    packed_data->index = glPathParameterfvNV_INDEX; \
    packed_data->args.a1 = (GLuint)path; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glPathParameteriNV(path, pname, value) ({ \
    glPathParameteriNV_PACKED *packed_data = malloc(sizeof(glPathParameteriNV_PACKED)); \
    packed_data->index = glPathParameteriNV_INDEX; \
    packed_data->args.a1 = (GLuint)path; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glPathParameterivNV(path, pname, value) ({ \
    glPathParameterivNV_PACKED *packed_data = malloc(sizeof(glPathParameterivNV_PACKED)); \
    packed_data->index = glPathParameterivNV_INDEX; \
    packed_data->args.a1 = (GLuint)path; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glPathStencilDepthOffsetNV(factor, units) ({ \
    glPathStencilDepthOffsetNV_PACKED *packed_data = malloc(sizeof(glPathStencilDepthOffsetNV_PACKED)); \
    packed_data->index = glPathStencilDepthOffsetNV_INDEX; \
    packed_data->args.a1 = (GLfloat)factor; \
    packed_data->args.a2 = (GLfloat)units; \
    (packed_call_t *)packed_data; \
})
#define pack_glPathStencilFuncNV(func, ref, mask) ({ \
    glPathStencilFuncNV_PACKED *packed_data = malloc(sizeof(glPathStencilFuncNV_PACKED)); \
    packed_data->index = glPathStencilFuncNV_INDEX; \
    packed_data->args.a1 = (GLenum)func; \
    packed_data->args.a2 = (GLint)ref; \
    packed_data->args.a3 = (GLuint)mask; \
    (packed_call_t *)packed_data; \
})
#define pack_glPathStringNV(path, format, length, pathString) ({ \
    glPathStringNV_PACKED *packed_data = malloc(sizeof(glPathStringNV_PACKED)); \
    packed_data->index = glPathStringNV_INDEX; \
    packed_data->args.a1 = (GLuint)path; \
    packed_data->args.a2 = (GLenum)format; \
    packed_data->args.a3 = (GLsizei)length; \
    packed_data->args.a4 = (GLvoid *)pathString; \
    (packed_call_t *)packed_data; \
})
#define pack_glPathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords) ({ \
    glPathSubCommandsNV_PACKED *packed_data = malloc(sizeof(glPathSubCommandsNV_PACKED)); \
    packed_data->index = glPathSubCommandsNV_INDEX; \
    packed_data->args.a1 = (GLuint)path; \
    packed_data->args.a2 = (GLsizei)commandStart; \
    packed_data->args.a3 = (GLsizei)commandsToDelete; \
    packed_data->args.a4 = (GLsizei)numCommands; \
    packed_data->args.a5 = (GLubyte *)commands; \
    packed_data->args.a6 = (GLsizei)numCoords; \
    packed_data->args.a7 = (GLenum)coordType; \
    packed_data->args.a8 = (GLvoid *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glPathSubCoordsNV(path, coordStart, numCoords, coordType, coords) ({ \
    glPathSubCoordsNV_PACKED *packed_data = malloc(sizeof(glPathSubCoordsNV_PACKED)); \
    packed_data->index = glPathSubCoordsNV_INDEX; \
    packed_data->args.a1 = (GLuint)path; \
    packed_data->args.a2 = (GLsizei)coordStart; \
    packed_data->args.a3 = (GLsizei)numCoords; \
    packed_data->args.a4 = (GLenum)coordType; \
    packed_data->args.a5 = (GLvoid *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glPathTexGenNV(texCoordSet, genMode, components, coeffs) ({ \
    glPathTexGenNV_PACKED *packed_data = malloc(sizeof(glPathTexGenNV_PACKED)); \
    packed_data->index = glPathTexGenNV_INDEX; \
    packed_data->args.a1 = (GLenum)texCoordSet; \
    packed_data->args.a2 = (GLenum)genMode; \
    packed_data->args.a3 = (GLint)components; \
    packed_data->args.a4 = (GLfloat *)coeffs; \
    (packed_call_t *)packed_data; \
})
#define pack_glPauseTransformFeedback() ({ \
    glPauseTransformFeedback_PACKED *packed_data = malloc(sizeof(glPauseTransformFeedback_PACKED)); \
    packed_data->index = glPauseTransformFeedback_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glPauseTransformFeedbackNV() ({ \
    glPauseTransformFeedbackNV_PACKED *packed_data = malloc(sizeof(glPauseTransformFeedbackNV_PACKED)); \
    packed_data->index = glPauseTransformFeedbackNV_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glPixelDataRangeNV(target, length, pointer) ({ \
    glPixelDataRangeNV_PACKED *packed_data = malloc(sizeof(glPixelDataRangeNV_PACKED)); \
    packed_data->index = glPixelDataRangeNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLsizei)length; \
    packed_data->args.a3 = (GLvoid *)pointer; \
    (packed_call_t *)packed_data; \
})
#define pack_glPixelMapfv(map, mapsize, values) ({ \
    glPixelMapfv_PACKED *packed_data = malloc(sizeof(glPixelMapfv_PACKED)); \
    packed_data->index = glPixelMapfv_INDEX; \
    packed_data->args.a1 = (GLenum)map; \
    packed_data->args.a2 = (GLsizei)mapsize; \
    packed_data->args.a3 = (GLfloat *)values; \
    (packed_call_t *)packed_data; \
})
#define pack_glPixelMapuiv(map, mapsize, values) ({ \
    glPixelMapuiv_PACKED *packed_data = malloc(sizeof(glPixelMapuiv_PACKED)); \
    packed_data->index = glPixelMapuiv_INDEX; \
    packed_data->args.a1 = (GLenum)map; \
    packed_data->args.a2 = (GLsizei)mapsize; \
    packed_data->args.a3 = (GLuint *)values; \
    (packed_call_t *)packed_data; \
})
#define pack_glPixelMapusv(map, mapsize, values) ({ \
    glPixelMapusv_PACKED *packed_data = malloc(sizeof(glPixelMapusv_PACKED)); \
    packed_data->index = glPixelMapusv_INDEX; \
    packed_data->args.a1 = (GLenum)map; \
    packed_data->args.a2 = (GLsizei)mapsize; \
    packed_data->args.a3 = (GLushort *)values; \
    (packed_call_t *)packed_data; \
})
#define pack_glPixelMapx(map, size, values) ({ \
    glPixelMapx_PACKED *packed_data = malloc(sizeof(glPixelMapx_PACKED)); \
    packed_data->index = glPixelMapx_INDEX; \
    packed_data->args.a1 = (GLenum)map; \
    packed_data->args.a2 = (GLint)size; \
    packed_data->args.a3 = (GLfixed *)values; \
    (packed_call_t *)packed_data; \
})
#define pack_glPixelStoref(pname, param) ({ \
    glPixelStoref_PACKED *packed_data = malloc(sizeof(glPixelStoref_PACKED)); \
    packed_data->index = glPixelStoref_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLfloat)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glPixelStorei(pname, param) ({ \
    glPixelStorei_PACKED *packed_data = malloc(sizeof(glPixelStorei_PACKED)); \
    packed_data->index = glPixelStorei_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLint)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glPixelStorex(pname, param) ({ \
    glPixelStorex_PACKED *packed_data = malloc(sizeof(glPixelStorex_PACKED)); \
    packed_data->index = glPixelStorex_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLfixed)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glPixelTexGenParameterfSGIS(pname, param) ({ \
    glPixelTexGenParameterfSGIS_PACKED *packed_data = malloc(sizeof(glPixelTexGenParameterfSGIS_PACKED)); \
    packed_data->index = glPixelTexGenParameterfSGIS_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLfloat)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glPixelTexGenParameterfvSGIS(pname, params) ({ \
    glPixelTexGenParameterfvSGIS_PACKED *packed_data = malloc(sizeof(glPixelTexGenParameterfvSGIS_PACKED)); \
    packed_data->index = glPixelTexGenParameterfvSGIS_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glPixelTexGenParameteriSGIS(pname, param) ({ \
    glPixelTexGenParameteriSGIS_PACKED *packed_data = malloc(sizeof(glPixelTexGenParameteriSGIS_PACKED)); \
    packed_data->index = glPixelTexGenParameteriSGIS_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLint)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glPixelTexGenParameterivSGIS(pname, params) ({ \
    glPixelTexGenParameterivSGIS_PACKED *packed_data = malloc(sizeof(glPixelTexGenParameterivSGIS_PACKED)); \
    packed_data->index = glPixelTexGenParameterivSGIS_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glPixelTexGenSGIX(mode) ({ \
    glPixelTexGenSGIX_PACKED *packed_data = malloc(sizeof(glPixelTexGenSGIX_PACKED)); \
    packed_data->index = glPixelTexGenSGIX_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    (packed_call_t *)packed_data; \
})
#define pack_glPixelTransferf(pname, param) ({ \
    glPixelTransferf_PACKED *packed_data = malloc(sizeof(glPixelTransferf_PACKED)); \
    packed_data->index = glPixelTransferf_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLfloat)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glPixelTransferi(pname, param) ({ \
    glPixelTransferi_PACKED *packed_data = malloc(sizeof(glPixelTransferi_PACKED)); \
    packed_data->index = glPixelTransferi_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLint)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glPixelTransferxOES(pname, param) ({ \
    glPixelTransferxOES_PACKED *packed_data = malloc(sizeof(glPixelTransferxOES_PACKED)); \
    packed_data->index = glPixelTransferxOES_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLfixed)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glPixelTransformParameterfEXT(target, pname, param) ({ \
    glPixelTransformParameterfEXT_PACKED *packed_data = malloc(sizeof(glPixelTransformParameterfEXT_PACKED)); \
    packed_data->index = glPixelTransformParameterfEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glPixelTransformParameterfvEXT(target, pname, params) ({ \
    glPixelTransformParameterfvEXT_PACKED *packed_data = malloc(sizeof(glPixelTransformParameterfvEXT_PACKED)); \
    packed_data->index = glPixelTransformParameterfvEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glPixelTransformParameteriEXT(target, pname, param) ({ \
    glPixelTransformParameteriEXT_PACKED *packed_data = malloc(sizeof(glPixelTransformParameteriEXT_PACKED)); \
    packed_data->index = glPixelTransformParameteriEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glPixelTransformParameterivEXT(target, pname, params) ({ \
    glPixelTransformParameterivEXT_PACKED *packed_data = malloc(sizeof(glPixelTransformParameterivEXT_PACKED)); \
    packed_data->index = glPixelTransformParameterivEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glPixelZoom(xfactor, yfactor) ({ \
    glPixelZoom_PACKED *packed_data = malloc(sizeof(glPixelZoom_PACKED)); \
    packed_data->index = glPixelZoom_INDEX; \
    packed_data->args.a1 = (GLfloat)xfactor; \
    packed_data->args.a2 = (GLfloat)yfactor; \
    (packed_call_t *)packed_data; \
})
#define pack_glPixelZoomxOES(xfactor, yfactor) ({ \
    glPixelZoomxOES_PACKED *packed_data = malloc(sizeof(glPixelZoomxOES_PACKED)); \
    packed_data->index = glPixelZoomxOES_INDEX; \
    packed_data->args.a1 = (GLfixed)xfactor; \
    packed_data->args.a2 = (GLfixed)yfactor; \
    (packed_call_t *)packed_data; \
})
#define pack_glPointAlongPathNV(path, startSegment, numSegments, distance, x, y, tangentX, tangentY) ({ \
    glPointAlongPathNV_PACKED *packed_data = malloc(sizeof(glPointAlongPathNV_PACKED)); \
    packed_data->index = glPointAlongPathNV_INDEX; \
    packed_data->args.a1 = (GLuint)path; \
    packed_data->args.a2 = (GLsizei)startSegment; \
    packed_data->args.a3 = (GLsizei)numSegments; \
    packed_data->args.a4 = (GLfloat)distance; \
    packed_data->args.a5 = (GLfloat *)x; \
    packed_data->args.a6 = (GLfloat *)y; \
    packed_data->args.a7 = (GLfloat *)tangentX; \
    packed_data->args.a8 = (GLfloat *)tangentY; \
    (packed_call_t *)packed_data; \
})
#define pack_glPointParameterf(pname, param) ({ \
    glPointParameterf_PACKED *packed_data = malloc(sizeof(glPointParameterf_PACKED)); \
    packed_data->index = glPointParameterf_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLfloat)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glPointParameterfARB(pname, param) ({ \
    glPointParameterfARB_PACKED *packed_data = malloc(sizeof(glPointParameterfARB_PACKED)); \
    packed_data->index = glPointParameterfARB_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLfloat)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glPointParameterfEXT(pname, param) ({ \
    glPointParameterfEXT_PACKED *packed_data = malloc(sizeof(glPointParameterfEXT_PACKED)); \
    packed_data->index = glPointParameterfEXT_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLfloat)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glPointParameterfSGIS(pname, param) ({ \
    glPointParameterfSGIS_PACKED *packed_data = malloc(sizeof(glPointParameterfSGIS_PACKED)); \
    packed_data->index = glPointParameterfSGIS_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLfloat)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glPointParameterfv(pname, params) ({ \
    glPointParameterfv_PACKED *packed_data = malloc(sizeof(glPointParameterfv_PACKED)); \
    packed_data->index = glPointParameterfv_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glPointParameterfvARB(pname, params) ({ \
    glPointParameterfvARB_PACKED *packed_data = malloc(sizeof(glPointParameterfvARB_PACKED)); \
    packed_data->index = glPointParameterfvARB_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glPointParameterfvEXT(pname, params) ({ \
    glPointParameterfvEXT_PACKED *packed_data = malloc(sizeof(glPointParameterfvEXT_PACKED)); \
    packed_data->index = glPointParameterfvEXT_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glPointParameterfvSGIS(pname, params) ({ \
    glPointParameterfvSGIS_PACKED *packed_data = malloc(sizeof(glPointParameterfvSGIS_PACKED)); \
    packed_data->index = glPointParameterfvSGIS_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glPointParameteri(pname, param) ({ \
    glPointParameteri_PACKED *packed_data = malloc(sizeof(glPointParameteri_PACKED)); \
    packed_data->index = glPointParameteri_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLint)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glPointParameteriNV(pname, param) ({ \
    glPointParameteriNV_PACKED *packed_data = malloc(sizeof(glPointParameteriNV_PACKED)); \
    packed_data->index = glPointParameteriNV_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLint)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glPointParameteriv(pname, params) ({ \
    glPointParameteriv_PACKED *packed_data = malloc(sizeof(glPointParameteriv_PACKED)); \
    packed_data->index = glPointParameteriv_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glPointParameterivNV(pname, params) ({ \
    glPointParameterivNV_PACKED *packed_data = malloc(sizeof(glPointParameterivNV_PACKED)); \
    packed_data->index = glPointParameterivNV_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glPointParameterx(pname, param) ({ \
    glPointParameterx_PACKED *packed_data = malloc(sizeof(glPointParameterx_PACKED)); \
    packed_data->index = glPointParameterx_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLfixed)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glPointParameterxv(pname, params) ({ \
    glPointParameterxv_PACKED *packed_data = malloc(sizeof(glPointParameterxv_PACKED)); \
    packed_data->index = glPointParameterxv_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLfixed *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glPointParameterxvOES(pname, params) ({ \
    glPointParameterxvOES_PACKED *packed_data = malloc(sizeof(glPointParameterxvOES_PACKED)); \
    packed_data->index = glPointParameterxvOES_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLfixed *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glPointSize(size) ({ \
    glPointSize_PACKED *packed_data = malloc(sizeof(glPointSize_PACKED)); \
    packed_data->index = glPointSize_INDEX; \
    packed_data->args.a1 = (GLfloat)size; \
    (packed_call_t *)packed_data; \
})
#define pack_glPointSizePointerOES(type, stride, pointer) ({ \
    glPointSizePointerOES_PACKED *packed_data = malloc(sizeof(glPointSizePointerOES_PACKED)); \
    packed_data->index = glPointSizePointerOES_INDEX; \
    packed_data->args.a1 = (GLenum)type; \
    packed_data->args.a2 = (GLsizei)stride; \
    packed_data->args.a3 = (GLvoid *)pointer; \
    (packed_call_t *)packed_data; \
})
#define pack_glPointSizex(size) ({ \
    glPointSizex_PACKED *packed_data = malloc(sizeof(glPointSizex_PACKED)); \
    packed_data->index = glPointSizex_INDEX; \
    packed_data->args.a1 = (GLfixed)size; \
    (packed_call_t *)packed_data; \
})
#define pack_glPointSizexOES(size) ({ \
    glPointSizexOES_PACKED *packed_data = malloc(sizeof(glPointSizexOES_PACKED)); \
    packed_data->index = glPointSizexOES_INDEX; \
    packed_data->args.a1 = (GLfixed)size; \
    (packed_call_t *)packed_data; \
})
#define pack_glPollAsyncSGIX(markerp) ({ \
    glPollAsyncSGIX_PACKED *packed_data = malloc(sizeof(glPollAsyncSGIX_PACKED)); \
    packed_data->index = glPollAsyncSGIX_INDEX; \
    packed_data->args.a1 = (GLuint *)markerp; \
    (packed_call_t *)packed_data; \
})
#define pack_glPollInstrumentsSGIX(marker_p) ({ \
    glPollInstrumentsSGIX_PACKED *packed_data = malloc(sizeof(glPollInstrumentsSGIX_PACKED)); \
    packed_data->index = glPollInstrumentsSGIX_INDEX; \
    packed_data->args.a1 = (GLint *)marker_p; \
    (packed_call_t *)packed_data; \
})
#define pack_glPolygonMode(face, mode) ({ \
    glPolygonMode_PACKED *packed_data = malloc(sizeof(glPolygonMode_PACKED)); \
    packed_data->index = glPolygonMode_INDEX; \
    packed_data->args.a1 = (GLenum)face; \
    packed_data->args.a2 = (GLenum)mode; \
    (packed_call_t *)packed_data; \
})
#define pack_glPolygonOffset(factor, units) ({ \
    glPolygonOffset_PACKED *packed_data = malloc(sizeof(glPolygonOffset_PACKED)); \
    packed_data->index = glPolygonOffset_INDEX; \
    packed_data->args.a1 = (GLfloat)factor; \
    packed_data->args.a2 = (GLfloat)units; \
    (packed_call_t *)packed_data; \
})
#define pack_glPolygonOffsetEXT(factor, bias) ({ \
    glPolygonOffsetEXT_PACKED *packed_data = malloc(sizeof(glPolygonOffsetEXT_PACKED)); \
    packed_data->index = glPolygonOffsetEXT_INDEX; \
    packed_data->args.a1 = (GLfloat)factor; \
    packed_data->args.a2 = (GLfloat)bias; \
    (packed_call_t *)packed_data; \
})
#define pack_glPolygonOffsetx(factor, units) ({ \
    glPolygonOffsetx_PACKED *packed_data = malloc(sizeof(glPolygonOffsetx_PACKED)); \
    packed_data->index = glPolygonOffsetx_INDEX; \
    packed_data->args.a1 = (GLfixed)factor; \
    packed_data->args.a2 = (GLfixed)units; \
    (packed_call_t *)packed_data; \
})
#define pack_glPolygonOffsetxOES(factor, units) ({ \
    glPolygonOffsetxOES_PACKED *packed_data = malloc(sizeof(glPolygonOffsetxOES_PACKED)); \
    packed_data->index = glPolygonOffsetxOES_INDEX; \
    packed_data->args.a1 = (GLfixed)factor; \
    packed_data->args.a2 = (GLfixed)units; \
    (packed_call_t *)packed_data; \
})
#define pack_glPolygonStipple(mask) ({ \
    glPolygonStipple_PACKED *packed_data = malloc(sizeof(glPolygonStipple_PACKED)); \
    packed_data->index = glPolygonStipple_INDEX; \
    packed_data->args.a1 = (GLubyte *)mask; \
    (packed_call_t *)packed_data; \
})
#define pack_glPopAttrib() ({ \
    glPopAttrib_PACKED *packed_data = malloc(sizeof(glPopAttrib_PACKED)); \
    packed_data->index = glPopAttrib_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glPopClientAttrib() ({ \
    glPopClientAttrib_PACKED *packed_data = malloc(sizeof(glPopClientAttrib_PACKED)); \
    packed_data->index = glPopClientAttrib_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glPopDebugGroup() ({ \
    glPopDebugGroup_PACKED *packed_data = malloc(sizeof(glPopDebugGroup_PACKED)); \
    packed_data->index = glPopDebugGroup_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glPopMatrix() ({ \
    glPopMatrix_PACKED *packed_data = malloc(sizeof(glPopMatrix_PACKED)); \
    packed_data->index = glPopMatrix_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glPopName() ({ \
    glPopName_PACKED *packed_data = malloc(sizeof(glPopName_PACKED)); \
    packed_data->index = glPopName_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glPresentFrameDualFillNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3) ({ \
    glPresentFrameDualFillNV_PACKED *packed_data = malloc(sizeof(glPresentFrameDualFillNV_PACKED)); \
    packed_data->index = glPresentFrameDualFillNV_INDEX; \
    packed_data->args.a1 = (GLuint)video_slot; \
    packed_data->args.a2 = (GLuint64EXT)minPresentTime; \
    packed_data->args.a3 = (GLuint)beginPresentTimeId; \
    packed_data->args.a4 = (GLuint)presentDurationId; \
    packed_data->args.a5 = (GLenum)type; \
    packed_data->args.a6 = (GLenum)target0; \
    packed_data->args.a7 = (GLuint)fill0; \
    packed_data->args.a8 = (GLenum)target1; \
    packed_data->args.a9 = (GLuint)fill1; \
    packed_data->args.a10 = (GLenum)target2; \
    packed_data->args.a11 = (GLuint)fill2; \
    packed_data->args.a12 = (GLenum)target3; \
    packed_data->args.a13 = (GLuint)fill3; \
    (packed_call_t *)packed_data; \
})
#define pack_glPresentFrameKeyedNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1) ({ \
    glPresentFrameKeyedNV_PACKED *packed_data = malloc(sizeof(glPresentFrameKeyedNV_PACKED)); \
    packed_data->index = glPresentFrameKeyedNV_INDEX; \
    packed_data->args.a1 = (GLuint)video_slot; \
    packed_data->args.a2 = (GLuint64EXT)minPresentTime; \
    packed_data->args.a3 = (GLuint)beginPresentTimeId; \
    packed_data->args.a4 = (GLuint)presentDurationId; \
    packed_data->args.a5 = (GLenum)type; \
    packed_data->args.a6 = (GLenum)target0; \
    packed_data->args.a7 = (GLuint)fill0; \
    packed_data->args.a8 = (GLuint)key0; \
    packed_data->args.a9 = (GLenum)target1; \
    packed_data->args.a10 = (GLuint)fill1; \
    packed_data->args.a11 = (GLuint)key1; \
    (packed_call_t *)packed_data; \
})
#define pack_glPrimitiveRestartIndex(index) ({ \
    glPrimitiveRestartIndex_PACKED *packed_data = malloc(sizeof(glPrimitiveRestartIndex_PACKED)); \
    packed_data->index = glPrimitiveRestartIndex_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    (packed_call_t *)packed_data; \
})
#define pack_glPrimitiveRestartIndexNV(index) ({ \
    glPrimitiveRestartIndexNV_PACKED *packed_data = malloc(sizeof(glPrimitiveRestartIndexNV_PACKED)); \
    packed_data->index = glPrimitiveRestartIndexNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    (packed_call_t *)packed_data; \
})
#define pack_glPrimitiveRestartNV() ({ \
    glPrimitiveRestartNV_PACKED *packed_data = malloc(sizeof(glPrimitiveRestartNV_PACKED)); \
    packed_data->index = glPrimitiveRestartNV_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glPrioritizeTextures(n, textures, priorities) ({ \
    glPrioritizeTextures_PACKED *packed_data = malloc(sizeof(glPrioritizeTextures_PACKED)); \
    packed_data->index = glPrioritizeTextures_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLuint *)textures; \
    packed_data->args.a3 = (GLfloat *)priorities; \
    (packed_call_t *)packed_data; \
})
#define pack_glPrioritizeTexturesEXT(n, textures, priorities) ({ \
    glPrioritizeTexturesEXT_PACKED *packed_data = malloc(sizeof(glPrioritizeTexturesEXT_PACKED)); \
    packed_data->index = glPrioritizeTexturesEXT_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLuint *)textures; \
    packed_data->args.a3 = (GLclampf *)priorities; \
    (packed_call_t *)packed_data; \
})
#define pack_glPrioritizeTexturesxOES(n, textures, priorities) ({ \
    glPrioritizeTexturesxOES_PACKED *packed_data = malloc(sizeof(glPrioritizeTexturesxOES_PACKED)); \
    packed_data->index = glPrioritizeTexturesxOES_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLuint *)textures; \
    packed_data->args.a3 = (GLfixed *)priorities; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramBinary(program, binaryFormat, binary, length) ({ \
    glProgramBinary_PACKED *packed_data = malloc(sizeof(glProgramBinary_PACKED)); \
    packed_data->index = glProgramBinary_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLenum)binaryFormat; \
    packed_data->args.a3 = (GLvoid *)binary; \
    packed_data->args.a4 = (GLsizei)length; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramBufferParametersIivNV(target, bindingIndex, wordIndex, count, params) ({ \
    glProgramBufferParametersIivNV_PACKED *packed_data = malloc(sizeof(glProgramBufferParametersIivNV_PACKED)); \
    packed_data->index = glProgramBufferParametersIivNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)bindingIndex; \
    packed_data->args.a3 = (GLuint)wordIndex; \
    packed_data->args.a4 = (GLsizei)count; \
    packed_data->args.a5 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramBufferParametersIuivNV(target, bindingIndex, wordIndex, count, params) ({ \
    glProgramBufferParametersIuivNV_PACKED *packed_data = malloc(sizeof(glProgramBufferParametersIuivNV_PACKED)); \
    packed_data->index = glProgramBufferParametersIuivNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)bindingIndex; \
    packed_data->args.a3 = (GLuint)wordIndex; \
    packed_data->args.a4 = (GLsizei)count; \
    packed_data->args.a5 = (GLuint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramBufferParametersfvNV(target, bindingIndex, wordIndex, count, params) ({ \
    glProgramBufferParametersfvNV_PACKED *packed_data = malloc(sizeof(glProgramBufferParametersfvNV_PACKED)); \
    packed_data->index = glProgramBufferParametersfvNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)bindingIndex; \
    packed_data->args.a3 = (GLuint)wordIndex; \
    packed_data->args.a4 = (GLsizei)count; \
    packed_data->args.a5 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramEnvParameter4dARB(target, index, x, y, z, w) ({ \
    glProgramEnvParameter4dARB_PACKED *packed_data = malloc(sizeof(glProgramEnvParameter4dARB_PACKED)); \
    packed_data->index = glProgramEnvParameter4dARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLdouble)x; \
    packed_data->args.a4 = (GLdouble)y; \
    packed_data->args.a5 = (GLdouble)z; \
    packed_data->args.a6 = (GLdouble)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramEnvParameter4dvARB(target, index, params) ({ \
    glProgramEnvParameter4dvARB_PACKED *packed_data = malloc(sizeof(glProgramEnvParameter4dvARB_PACKED)); \
    packed_data->index = glProgramEnvParameter4dvARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLdouble *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramEnvParameter4fARB(target, index, x, y, z, w) ({ \
    glProgramEnvParameter4fARB_PACKED *packed_data = malloc(sizeof(glProgramEnvParameter4fARB_PACKED)); \
    packed_data->index = glProgramEnvParameter4fARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLfloat)x; \
    packed_data->args.a4 = (GLfloat)y; \
    packed_data->args.a5 = (GLfloat)z; \
    packed_data->args.a6 = (GLfloat)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramEnvParameter4fvARB(target, index, params) ({ \
    glProgramEnvParameter4fvARB_PACKED *packed_data = malloc(sizeof(glProgramEnvParameter4fvARB_PACKED)); \
    packed_data->index = glProgramEnvParameter4fvARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramEnvParameterI4iNV(target, index, x, y, z, w) ({ \
    glProgramEnvParameterI4iNV_PACKED *packed_data = malloc(sizeof(glProgramEnvParameterI4iNV_PACKED)); \
    packed_data->index = glProgramEnvParameterI4iNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLint)x; \
    packed_data->args.a4 = (GLint)y; \
    packed_data->args.a5 = (GLint)z; \
    packed_data->args.a6 = (GLint)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramEnvParameterI4ivNV(target, index, params) ({ \
    glProgramEnvParameterI4ivNV_PACKED *packed_data = malloc(sizeof(glProgramEnvParameterI4ivNV_PACKED)); \
    packed_data->index = glProgramEnvParameterI4ivNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramEnvParameterI4uiNV(target, index, x, y, z, w) ({ \
    glProgramEnvParameterI4uiNV_PACKED *packed_data = malloc(sizeof(glProgramEnvParameterI4uiNV_PACKED)); \
    packed_data->index = glProgramEnvParameterI4uiNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLuint)x; \
    packed_data->args.a4 = (GLuint)y; \
    packed_data->args.a5 = (GLuint)z; \
    packed_data->args.a6 = (GLuint)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramEnvParameterI4uivNV(target, index, params) ({ \
    glProgramEnvParameterI4uivNV_PACKED *packed_data = malloc(sizeof(glProgramEnvParameterI4uivNV_PACKED)); \
    packed_data->index = glProgramEnvParameterI4uivNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLuint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramEnvParameters4fvEXT(target, index, count, params) ({ \
    glProgramEnvParameters4fvEXT_PACKED *packed_data = malloc(sizeof(glProgramEnvParameters4fvEXT_PACKED)); \
    packed_data->index = glProgramEnvParameters4fvEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramEnvParametersI4ivNV(target, index, count, params) ({ \
    glProgramEnvParametersI4ivNV_PACKED *packed_data = malloc(sizeof(glProgramEnvParametersI4ivNV_PACKED)); \
    packed_data->index = glProgramEnvParametersI4ivNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramEnvParametersI4uivNV(target, index, count, params) ({ \
    glProgramEnvParametersI4uivNV_PACKED *packed_data = malloc(sizeof(glProgramEnvParametersI4uivNV_PACKED)); \
    packed_data->index = glProgramEnvParametersI4uivNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLuint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramLocalParameter4dARB(target, index, x, y, z, w) ({ \
    glProgramLocalParameter4dARB_PACKED *packed_data = malloc(sizeof(glProgramLocalParameter4dARB_PACKED)); \
    packed_data->index = glProgramLocalParameter4dARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLdouble)x; \
    packed_data->args.a4 = (GLdouble)y; \
    packed_data->args.a5 = (GLdouble)z; \
    packed_data->args.a6 = (GLdouble)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramLocalParameter4dvARB(target, index, params) ({ \
    glProgramLocalParameter4dvARB_PACKED *packed_data = malloc(sizeof(glProgramLocalParameter4dvARB_PACKED)); \
    packed_data->index = glProgramLocalParameter4dvARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLdouble *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramLocalParameter4fARB(target, index, x, y, z, w) ({ \
    glProgramLocalParameter4fARB_PACKED *packed_data = malloc(sizeof(glProgramLocalParameter4fARB_PACKED)); \
    packed_data->index = glProgramLocalParameter4fARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLfloat)x; \
    packed_data->args.a4 = (GLfloat)y; \
    packed_data->args.a5 = (GLfloat)z; \
    packed_data->args.a6 = (GLfloat)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramLocalParameter4fvARB(target, index, params) ({ \
    glProgramLocalParameter4fvARB_PACKED *packed_data = malloc(sizeof(glProgramLocalParameter4fvARB_PACKED)); \
    packed_data->index = glProgramLocalParameter4fvARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramLocalParameterI4iNV(target, index, x, y, z, w) ({ \
    glProgramLocalParameterI4iNV_PACKED *packed_data = malloc(sizeof(glProgramLocalParameterI4iNV_PACKED)); \
    packed_data->index = glProgramLocalParameterI4iNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLint)x; \
    packed_data->args.a4 = (GLint)y; \
    packed_data->args.a5 = (GLint)z; \
    packed_data->args.a6 = (GLint)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramLocalParameterI4ivNV(target, index, params) ({ \
    glProgramLocalParameterI4ivNV_PACKED *packed_data = malloc(sizeof(glProgramLocalParameterI4ivNV_PACKED)); \
    packed_data->index = glProgramLocalParameterI4ivNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramLocalParameterI4uiNV(target, index, x, y, z, w) ({ \
    glProgramLocalParameterI4uiNV_PACKED *packed_data = malloc(sizeof(glProgramLocalParameterI4uiNV_PACKED)); \
    packed_data->index = glProgramLocalParameterI4uiNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLuint)x; \
    packed_data->args.a4 = (GLuint)y; \
    packed_data->args.a5 = (GLuint)z; \
    packed_data->args.a6 = (GLuint)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramLocalParameterI4uivNV(target, index, params) ({ \
    glProgramLocalParameterI4uivNV_PACKED *packed_data = malloc(sizeof(glProgramLocalParameterI4uivNV_PACKED)); \
    packed_data->index = glProgramLocalParameterI4uivNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLuint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramLocalParameters4fvEXT(target, index, count, params) ({ \
    glProgramLocalParameters4fvEXT_PACKED *packed_data = malloc(sizeof(glProgramLocalParameters4fvEXT_PACKED)); \
    packed_data->index = glProgramLocalParameters4fvEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramLocalParametersI4ivNV(target, index, count, params) ({ \
    glProgramLocalParametersI4ivNV_PACKED *packed_data = malloc(sizeof(glProgramLocalParametersI4ivNV_PACKED)); \
    packed_data->index = glProgramLocalParametersI4ivNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramLocalParametersI4uivNV(target, index, count, params) ({ \
    glProgramLocalParametersI4uivNV_PACKED *packed_data = malloc(sizeof(glProgramLocalParametersI4uivNV_PACKED)); \
    packed_data->index = glProgramLocalParametersI4uivNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLuint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramNamedParameter4dNV(id, len, name, x, y, z, w) ({ \
    glProgramNamedParameter4dNV_PACKED *packed_data = malloc(sizeof(glProgramNamedParameter4dNV_PACKED)); \
    packed_data->index = glProgramNamedParameter4dNV_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    packed_data->args.a2 = (GLsizei)len; \
    packed_data->args.a3 = (GLubyte *)name; \
    packed_data->args.a4 = (GLdouble)x; \
    packed_data->args.a5 = (GLdouble)y; \
    packed_data->args.a6 = (GLdouble)z; \
    packed_data->args.a7 = (GLdouble)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramNamedParameter4dvNV(id, len, name, v) ({ \
    glProgramNamedParameter4dvNV_PACKED *packed_data = malloc(sizeof(glProgramNamedParameter4dvNV_PACKED)); \
    packed_data->index = glProgramNamedParameter4dvNV_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    packed_data->args.a2 = (GLsizei)len; \
    packed_data->args.a3 = (GLubyte *)name; \
    packed_data->args.a4 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramNamedParameter4fNV(id, len, name, x, y, z, w) ({ \
    glProgramNamedParameter4fNV_PACKED *packed_data = malloc(sizeof(glProgramNamedParameter4fNV_PACKED)); \
    packed_data->index = glProgramNamedParameter4fNV_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    packed_data->args.a2 = (GLsizei)len; \
    packed_data->args.a3 = (GLubyte *)name; \
    packed_data->args.a4 = (GLfloat)x; \
    packed_data->args.a5 = (GLfloat)y; \
    packed_data->args.a6 = (GLfloat)z; \
    packed_data->args.a7 = (GLfloat)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramNamedParameter4fvNV(id, len, name, v) ({ \
    glProgramNamedParameter4fvNV_PACKED *packed_data = malloc(sizeof(glProgramNamedParameter4fvNV_PACKED)); \
    packed_data->index = glProgramNamedParameter4fvNV_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    packed_data->args.a2 = (GLsizei)len; \
    packed_data->args.a3 = (GLubyte *)name; \
    packed_data->args.a4 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramParameter4dNV(target, index, x, y, z, w) ({ \
    glProgramParameter4dNV_PACKED *packed_data = malloc(sizeof(glProgramParameter4dNV_PACKED)); \
    packed_data->index = glProgramParameter4dNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLdouble)x; \
    packed_data->args.a4 = (GLdouble)y; \
    packed_data->args.a5 = (GLdouble)z; \
    packed_data->args.a6 = (GLdouble)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramParameter4dvNV(target, index, v) ({ \
    glProgramParameter4dvNV_PACKED *packed_data = malloc(sizeof(glProgramParameter4dvNV_PACKED)); \
    packed_data->index = glProgramParameter4dvNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramParameter4fNV(target, index, x, y, z, w) ({ \
    glProgramParameter4fNV_PACKED *packed_data = malloc(sizeof(glProgramParameter4fNV_PACKED)); \
    packed_data->index = glProgramParameter4fNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLfloat)x; \
    packed_data->args.a4 = (GLfloat)y; \
    packed_data->args.a5 = (GLfloat)z; \
    packed_data->args.a6 = (GLfloat)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramParameter4fvNV(target, index, v) ({ \
    glProgramParameter4fvNV_PACKED *packed_data = malloc(sizeof(glProgramParameter4fvNV_PACKED)); \
    packed_data->index = glProgramParameter4fvNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramParameteri(program, pname, value) ({ \
    glProgramParameteri_PACKED *packed_data = malloc(sizeof(glProgramParameteri_PACKED)); \
    packed_data->index = glProgramParameteri_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramParameteriARB(program, pname, value) ({ \
    glProgramParameteriARB_PACKED *packed_data = malloc(sizeof(glProgramParameteriARB_PACKED)); \
    packed_data->index = glProgramParameteriARB_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramParameteriEXT(program, pname, value) ({ \
    glProgramParameteriEXT_PACKED *packed_data = malloc(sizeof(glProgramParameteriEXT_PACKED)); \
    packed_data->index = glProgramParameteriEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramParameters4dvNV(target, index, count, v) ({ \
    glProgramParameters4dvNV_PACKED *packed_data = malloc(sizeof(glProgramParameters4dvNV_PACKED)); \
    packed_data->index = glProgramParameters4dvNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramParameters4fvNV(target, index, count, v) ({ \
    glProgramParameters4fvNV_PACKED *packed_data = malloc(sizeof(glProgramParameters4fvNV_PACKED)); \
    packed_data->index = glProgramParameters4fvNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramStringARB(target, format, len, string) ({ \
    glProgramStringARB_PACKED *packed_data = malloc(sizeof(glProgramStringARB_PACKED)); \
    packed_data->index = glProgramStringARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)format; \
    packed_data->args.a3 = (GLsizei)len; \
    packed_data->args.a4 = (GLvoid *)string; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramSubroutineParametersuivNV(target, count, params) ({ \
    glProgramSubroutineParametersuivNV_PACKED *packed_data = malloc(sizeof(glProgramSubroutineParametersuivNV_PACKED)); \
    packed_data->index = glProgramSubroutineParametersuivNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLuint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform1d(program, location, v0) ({ \
    glProgramUniform1d_PACKED *packed_data = malloc(sizeof(glProgramUniform1d_PACKED)); \
    packed_data->index = glProgramUniform1d_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLdouble)v0; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform1dEXT(program, location, x) ({ \
    glProgramUniform1dEXT_PACKED *packed_data = malloc(sizeof(glProgramUniform1dEXT_PACKED)); \
    packed_data->index = glProgramUniform1dEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLdouble)x; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform1dv(program, location, count, value) ({ \
    glProgramUniform1dv_PACKED *packed_data = malloc(sizeof(glProgramUniform1dv_PACKED)); \
    packed_data->index = glProgramUniform1dv_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLdouble *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform1dvEXT(program, location, count, value) ({ \
    glProgramUniform1dvEXT_PACKED *packed_data = malloc(sizeof(glProgramUniform1dvEXT_PACKED)); \
    packed_data->index = glProgramUniform1dvEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLdouble *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform1f(program, location, v0) ({ \
    glProgramUniform1f_PACKED *packed_data = malloc(sizeof(glProgramUniform1f_PACKED)); \
    packed_data->index = glProgramUniform1f_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLfloat)v0; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform1fEXT(program, location, v0) ({ \
    glProgramUniform1fEXT_PACKED *packed_data = malloc(sizeof(glProgramUniform1fEXT_PACKED)); \
    packed_data->index = glProgramUniform1fEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLfloat)v0; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform1fv(program, location, count, value) ({ \
    glProgramUniform1fv_PACKED *packed_data = malloc(sizeof(glProgramUniform1fv_PACKED)); \
    packed_data->index = glProgramUniform1fv_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLfloat *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform1fvEXT(program, location, count, value) ({ \
    glProgramUniform1fvEXT_PACKED *packed_data = malloc(sizeof(glProgramUniform1fvEXT_PACKED)); \
    packed_data->index = glProgramUniform1fvEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLfloat *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform1i(program, location, v0) ({ \
    glProgramUniform1i_PACKED *packed_data = malloc(sizeof(glProgramUniform1i_PACKED)); \
    packed_data->index = glProgramUniform1i_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLint)v0; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform1i64NV(program, location, x) ({ \
    glProgramUniform1i64NV_PACKED *packed_data = malloc(sizeof(glProgramUniform1i64NV_PACKED)); \
    packed_data->index = glProgramUniform1i64NV_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLint64EXT)x; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform1i64vNV(program, location, count, value) ({ \
    glProgramUniform1i64vNV_PACKED *packed_data = malloc(sizeof(glProgramUniform1i64vNV_PACKED)); \
    packed_data->index = glProgramUniform1i64vNV_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLint64EXT *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform1iEXT(program, location, v0) ({ \
    glProgramUniform1iEXT_PACKED *packed_data = malloc(sizeof(glProgramUniform1iEXT_PACKED)); \
    packed_data->index = glProgramUniform1iEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLint)v0; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform1iv(program, location, count, value) ({ \
    glProgramUniform1iv_PACKED *packed_data = malloc(sizeof(glProgramUniform1iv_PACKED)); \
    packed_data->index = glProgramUniform1iv_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLint *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform1ivEXT(program, location, count, value) ({ \
    glProgramUniform1ivEXT_PACKED *packed_data = malloc(sizeof(glProgramUniform1ivEXT_PACKED)); \
    packed_data->index = glProgramUniform1ivEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLint *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform1ui(program, location, v0) ({ \
    glProgramUniform1ui_PACKED *packed_data = malloc(sizeof(glProgramUniform1ui_PACKED)); \
    packed_data->index = glProgramUniform1ui_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLuint)v0; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform1ui64NV(program, location, x) ({ \
    glProgramUniform1ui64NV_PACKED *packed_data = malloc(sizeof(glProgramUniform1ui64NV_PACKED)); \
    packed_data->index = glProgramUniform1ui64NV_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLuint64EXT)x; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform1ui64vNV(program, location, count, value) ({ \
    glProgramUniform1ui64vNV_PACKED *packed_data = malloc(sizeof(glProgramUniform1ui64vNV_PACKED)); \
    packed_data->index = glProgramUniform1ui64vNV_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLuint64EXT *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform1uiEXT(program, location, v0) ({ \
    glProgramUniform1uiEXT_PACKED *packed_data = malloc(sizeof(glProgramUniform1uiEXT_PACKED)); \
    packed_data->index = glProgramUniform1uiEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLuint)v0; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform1uiv(program, location, count, value) ({ \
    glProgramUniform1uiv_PACKED *packed_data = malloc(sizeof(glProgramUniform1uiv_PACKED)); \
    packed_data->index = glProgramUniform1uiv_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLuint *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform1uivEXT(program, location, count, value) ({ \
    glProgramUniform1uivEXT_PACKED *packed_data = malloc(sizeof(glProgramUniform1uivEXT_PACKED)); \
    packed_data->index = glProgramUniform1uivEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLuint *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform2d(program, location, v0, v1) ({ \
    glProgramUniform2d_PACKED *packed_data = malloc(sizeof(glProgramUniform2d_PACKED)); \
    packed_data->index = glProgramUniform2d_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLdouble)v0; \
    packed_data->args.a4 = (GLdouble)v1; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform2dEXT(program, location, x, y) ({ \
    glProgramUniform2dEXT_PACKED *packed_data = malloc(sizeof(glProgramUniform2dEXT_PACKED)); \
    packed_data->index = glProgramUniform2dEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLdouble)x; \
    packed_data->args.a4 = (GLdouble)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform2dv(program, location, count, value) ({ \
    glProgramUniform2dv_PACKED *packed_data = malloc(sizeof(glProgramUniform2dv_PACKED)); \
    packed_data->index = glProgramUniform2dv_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLdouble *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform2dvEXT(program, location, count, value) ({ \
    glProgramUniform2dvEXT_PACKED *packed_data = malloc(sizeof(glProgramUniform2dvEXT_PACKED)); \
    packed_data->index = glProgramUniform2dvEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLdouble *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform2f(program, location, v0, v1) ({ \
    glProgramUniform2f_PACKED *packed_data = malloc(sizeof(glProgramUniform2f_PACKED)); \
    packed_data->index = glProgramUniform2f_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLfloat)v0; \
    packed_data->args.a4 = (GLfloat)v1; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform2fEXT(program, location, v0, v1) ({ \
    glProgramUniform2fEXT_PACKED *packed_data = malloc(sizeof(glProgramUniform2fEXT_PACKED)); \
    packed_data->index = glProgramUniform2fEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLfloat)v0; \
    packed_data->args.a4 = (GLfloat)v1; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform2fv(program, location, count, value) ({ \
    glProgramUniform2fv_PACKED *packed_data = malloc(sizeof(glProgramUniform2fv_PACKED)); \
    packed_data->index = glProgramUniform2fv_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLfloat *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform2fvEXT(program, location, count, value) ({ \
    glProgramUniform2fvEXT_PACKED *packed_data = malloc(sizeof(glProgramUniform2fvEXT_PACKED)); \
    packed_data->index = glProgramUniform2fvEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLfloat *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform2i(program, location, v0, v1) ({ \
    glProgramUniform2i_PACKED *packed_data = malloc(sizeof(glProgramUniform2i_PACKED)); \
    packed_data->index = glProgramUniform2i_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLint)v0; \
    packed_data->args.a4 = (GLint)v1; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform2i64NV(program, location, x, y) ({ \
    glProgramUniform2i64NV_PACKED *packed_data = malloc(sizeof(glProgramUniform2i64NV_PACKED)); \
    packed_data->index = glProgramUniform2i64NV_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLint64EXT)x; \
    packed_data->args.a4 = (GLint64EXT)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform2i64vNV(program, location, count, value) ({ \
    glProgramUniform2i64vNV_PACKED *packed_data = malloc(sizeof(glProgramUniform2i64vNV_PACKED)); \
    packed_data->index = glProgramUniform2i64vNV_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLint64EXT *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform2iEXT(program, location, v0, v1) ({ \
    glProgramUniform2iEXT_PACKED *packed_data = malloc(sizeof(glProgramUniform2iEXT_PACKED)); \
    packed_data->index = glProgramUniform2iEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLint)v0; \
    packed_data->args.a4 = (GLint)v1; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform2iv(program, location, count, value) ({ \
    glProgramUniform2iv_PACKED *packed_data = malloc(sizeof(glProgramUniform2iv_PACKED)); \
    packed_data->index = glProgramUniform2iv_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLint *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform2ivEXT(program, location, count, value) ({ \
    glProgramUniform2ivEXT_PACKED *packed_data = malloc(sizeof(glProgramUniform2ivEXT_PACKED)); \
    packed_data->index = glProgramUniform2ivEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLint *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform2ui(program, location, v0, v1) ({ \
    glProgramUniform2ui_PACKED *packed_data = malloc(sizeof(glProgramUniform2ui_PACKED)); \
    packed_data->index = glProgramUniform2ui_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLuint)v0; \
    packed_data->args.a4 = (GLuint)v1; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform2ui64NV(program, location, x, y) ({ \
    glProgramUniform2ui64NV_PACKED *packed_data = malloc(sizeof(glProgramUniform2ui64NV_PACKED)); \
    packed_data->index = glProgramUniform2ui64NV_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLuint64EXT)x; \
    packed_data->args.a4 = (GLuint64EXT)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform2ui64vNV(program, location, count, value) ({ \
    glProgramUniform2ui64vNV_PACKED *packed_data = malloc(sizeof(glProgramUniform2ui64vNV_PACKED)); \
    packed_data->index = glProgramUniform2ui64vNV_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLuint64EXT *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform2uiEXT(program, location, v0, v1) ({ \
    glProgramUniform2uiEXT_PACKED *packed_data = malloc(sizeof(glProgramUniform2uiEXT_PACKED)); \
    packed_data->index = glProgramUniform2uiEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLuint)v0; \
    packed_data->args.a4 = (GLuint)v1; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform2uiv(program, location, count, value) ({ \
    glProgramUniform2uiv_PACKED *packed_data = malloc(sizeof(glProgramUniform2uiv_PACKED)); \
    packed_data->index = glProgramUniform2uiv_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLuint *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform2uivEXT(program, location, count, value) ({ \
    glProgramUniform2uivEXT_PACKED *packed_data = malloc(sizeof(glProgramUniform2uivEXT_PACKED)); \
    packed_data->index = glProgramUniform2uivEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLuint *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform3d(program, location, v0, v1, v2) ({ \
    glProgramUniform3d_PACKED *packed_data = malloc(sizeof(glProgramUniform3d_PACKED)); \
    packed_data->index = glProgramUniform3d_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLdouble)v0; \
    packed_data->args.a4 = (GLdouble)v1; \
    packed_data->args.a5 = (GLdouble)v2; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform3dEXT(program, location, x, y, z) ({ \
    glProgramUniform3dEXT_PACKED *packed_data = malloc(sizeof(glProgramUniform3dEXT_PACKED)); \
    packed_data->index = glProgramUniform3dEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLdouble)x; \
    packed_data->args.a4 = (GLdouble)y; \
    packed_data->args.a5 = (GLdouble)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform3dv(program, location, count, value) ({ \
    glProgramUniform3dv_PACKED *packed_data = malloc(sizeof(glProgramUniform3dv_PACKED)); \
    packed_data->index = glProgramUniform3dv_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLdouble *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform3dvEXT(program, location, count, value) ({ \
    glProgramUniform3dvEXT_PACKED *packed_data = malloc(sizeof(glProgramUniform3dvEXT_PACKED)); \
    packed_data->index = glProgramUniform3dvEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLdouble *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform3f(program, location, v0, v1, v2) ({ \
    glProgramUniform3f_PACKED *packed_data = malloc(sizeof(glProgramUniform3f_PACKED)); \
    packed_data->index = glProgramUniform3f_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLfloat)v0; \
    packed_data->args.a4 = (GLfloat)v1; \
    packed_data->args.a5 = (GLfloat)v2; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform3fEXT(program, location, v0, v1, v2) ({ \
    glProgramUniform3fEXT_PACKED *packed_data = malloc(sizeof(glProgramUniform3fEXT_PACKED)); \
    packed_data->index = glProgramUniform3fEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLfloat)v0; \
    packed_data->args.a4 = (GLfloat)v1; \
    packed_data->args.a5 = (GLfloat)v2; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform3fv(program, location, count, value) ({ \
    glProgramUniform3fv_PACKED *packed_data = malloc(sizeof(glProgramUniform3fv_PACKED)); \
    packed_data->index = glProgramUniform3fv_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLfloat *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform3fvEXT(program, location, count, value) ({ \
    glProgramUniform3fvEXT_PACKED *packed_data = malloc(sizeof(glProgramUniform3fvEXT_PACKED)); \
    packed_data->index = glProgramUniform3fvEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLfloat *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform3i(program, location, v0, v1, v2) ({ \
    glProgramUniform3i_PACKED *packed_data = malloc(sizeof(glProgramUniform3i_PACKED)); \
    packed_data->index = glProgramUniform3i_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLint)v0; \
    packed_data->args.a4 = (GLint)v1; \
    packed_data->args.a5 = (GLint)v2; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform3i64NV(program, location, x, y, z) ({ \
    glProgramUniform3i64NV_PACKED *packed_data = malloc(sizeof(glProgramUniform3i64NV_PACKED)); \
    packed_data->index = glProgramUniform3i64NV_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLint64EXT)x; \
    packed_data->args.a4 = (GLint64EXT)y; \
    packed_data->args.a5 = (GLint64EXT)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform3i64vNV(program, location, count, value) ({ \
    glProgramUniform3i64vNV_PACKED *packed_data = malloc(sizeof(glProgramUniform3i64vNV_PACKED)); \
    packed_data->index = glProgramUniform3i64vNV_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLint64EXT *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform3iEXT(program, location, v0, v1, v2) ({ \
    glProgramUniform3iEXT_PACKED *packed_data = malloc(sizeof(glProgramUniform3iEXT_PACKED)); \
    packed_data->index = glProgramUniform3iEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLint)v0; \
    packed_data->args.a4 = (GLint)v1; \
    packed_data->args.a5 = (GLint)v2; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform3iv(program, location, count, value) ({ \
    glProgramUniform3iv_PACKED *packed_data = malloc(sizeof(glProgramUniform3iv_PACKED)); \
    packed_data->index = glProgramUniform3iv_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLint *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform3ivEXT(program, location, count, value) ({ \
    glProgramUniform3ivEXT_PACKED *packed_data = malloc(sizeof(glProgramUniform3ivEXT_PACKED)); \
    packed_data->index = glProgramUniform3ivEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLint *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform3ui(program, location, v0, v1, v2) ({ \
    glProgramUniform3ui_PACKED *packed_data = malloc(sizeof(glProgramUniform3ui_PACKED)); \
    packed_data->index = glProgramUniform3ui_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLuint)v0; \
    packed_data->args.a4 = (GLuint)v1; \
    packed_data->args.a5 = (GLuint)v2; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform3ui64NV(program, location, x, y, z) ({ \
    glProgramUniform3ui64NV_PACKED *packed_data = malloc(sizeof(glProgramUniform3ui64NV_PACKED)); \
    packed_data->index = glProgramUniform3ui64NV_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLuint64EXT)x; \
    packed_data->args.a4 = (GLuint64EXT)y; \
    packed_data->args.a5 = (GLuint64EXT)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform3ui64vNV(program, location, count, value) ({ \
    glProgramUniform3ui64vNV_PACKED *packed_data = malloc(sizeof(glProgramUniform3ui64vNV_PACKED)); \
    packed_data->index = glProgramUniform3ui64vNV_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLuint64EXT *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform3uiEXT(program, location, v0, v1, v2) ({ \
    glProgramUniform3uiEXT_PACKED *packed_data = malloc(sizeof(glProgramUniform3uiEXT_PACKED)); \
    packed_data->index = glProgramUniform3uiEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLuint)v0; \
    packed_data->args.a4 = (GLuint)v1; \
    packed_data->args.a5 = (GLuint)v2; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform3uiv(program, location, count, value) ({ \
    glProgramUniform3uiv_PACKED *packed_data = malloc(sizeof(glProgramUniform3uiv_PACKED)); \
    packed_data->index = glProgramUniform3uiv_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLuint *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform3uivEXT(program, location, count, value) ({ \
    glProgramUniform3uivEXT_PACKED *packed_data = malloc(sizeof(glProgramUniform3uivEXT_PACKED)); \
    packed_data->index = glProgramUniform3uivEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLuint *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform4d(program, location, v0, v1, v2, v3) ({ \
    glProgramUniform4d_PACKED *packed_data = malloc(sizeof(glProgramUniform4d_PACKED)); \
    packed_data->index = glProgramUniform4d_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLdouble)v0; \
    packed_data->args.a4 = (GLdouble)v1; \
    packed_data->args.a5 = (GLdouble)v2; \
    packed_data->args.a6 = (GLdouble)v3; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform4dEXT(program, location, x, y, z, w) ({ \
    glProgramUniform4dEXT_PACKED *packed_data = malloc(sizeof(glProgramUniform4dEXT_PACKED)); \
    packed_data->index = glProgramUniform4dEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLdouble)x; \
    packed_data->args.a4 = (GLdouble)y; \
    packed_data->args.a5 = (GLdouble)z; \
    packed_data->args.a6 = (GLdouble)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform4dv(program, location, count, value) ({ \
    glProgramUniform4dv_PACKED *packed_data = malloc(sizeof(glProgramUniform4dv_PACKED)); \
    packed_data->index = glProgramUniform4dv_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLdouble *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform4dvEXT(program, location, count, value) ({ \
    glProgramUniform4dvEXT_PACKED *packed_data = malloc(sizeof(glProgramUniform4dvEXT_PACKED)); \
    packed_data->index = glProgramUniform4dvEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLdouble *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform4f(program, location, v0, v1, v2, v3) ({ \
    glProgramUniform4f_PACKED *packed_data = malloc(sizeof(glProgramUniform4f_PACKED)); \
    packed_data->index = glProgramUniform4f_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLfloat)v0; \
    packed_data->args.a4 = (GLfloat)v1; \
    packed_data->args.a5 = (GLfloat)v2; \
    packed_data->args.a6 = (GLfloat)v3; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform4fEXT(program, location, v0, v1, v2, v3) ({ \
    glProgramUniform4fEXT_PACKED *packed_data = malloc(sizeof(glProgramUniform4fEXT_PACKED)); \
    packed_data->index = glProgramUniform4fEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLfloat)v0; \
    packed_data->args.a4 = (GLfloat)v1; \
    packed_data->args.a5 = (GLfloat)v2; \
    packed_data->args.a6 = (GLfloat)v3; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform4fv(program, location, count, value) ({ \
    glProgramUniform4fv_PACKED *packed_data = malloc(sizeof(glProgramUniform4fv_PACKED)); \
    packed_data->index = glProgramUniform4fv_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLfloat *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform4fvEXT(program, location, count, value) ({ \
    glProgramUniform4fvEXT_PACKED *packed_data = malloc(sizeof(glProgramUniform4fvEXT_PACKED)); \
    packed_data->index = glProgramUniform4fvEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLfloat *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform4i(program, location, v0, v1, v2, v3) ({ \
    glProgramUniform4i_PACKED *packed_data = malloc(sizeof(glProgramUniform4i_PACKED)); \
    packed_data->index = glProgramUniform4i_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLint)v0; \
    packed_data->args.a4 = (GLint)v1; \
    packed_data->args.a5 = (GLint)v2; \
    packed_data->args.a6 = (GLint)v3; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform4i64NV(program, location, x, y, z, w) ({ \
    glProgramUniform4i64NV_PACKED *packed_data = malloc(sizeof(glProgramUniform4i64NV_PACKED)); \
    packed_data->index = glProgramUniform4i64NV_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLint64EXT)x; \
    packed_data->args.a4 = (GLint64EXT)y; \
    packed_data->args.a5 = (GLint64EXT)z; \
    packed_data->args.a6 = (GLint64EXT)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform4i64vNV(program, location, count, value) ({ \
    glProgramUniform4i64vNV_PACKED *packed_data = malloc(sizeof(glProgramUniform4i64vNV_PACKED)); \
    packed_data->index = glProgramUniform4i64vNV_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLint64EXT *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform4iEXT(program, location, v0, v1, v2, v3) ({ \
    glProgramUniform4iEXT_PACKED *packed_data = malloc(sizeof(glProgramUniform4iEXT_PACKED)); \
    packed_data->index = glProgramUniform4iEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLint)v0; \
    packed_data->args.a4 = (GLint)v1; \
    packed_data->args.a5 = (GLint)v2; \
    packed_data->args.a6 = (GLint)v3; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform4iv(program, location, count, value) ({ \
    glProgramUniform4iv_PACKED *packed_data = malloc(sizeof(glProgramUniform4iv_PACKED)); \
    packed_data->index = glProgramUniform4iv_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLint *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform4ivEXT(program, location, count, value) ({ \
    glProgramUniform4ivEXT_PACKED *packed_data = malloc(sizeof(glProgramUniform4ivEXT_PACKED)); \
    packed_data->index = glProgramUniform4ivEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLint *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform4ui(program, location, v0, v1, v2, v3) ({ \
    glProgramUniform4ui_PACKED *packed_data = malloc(sizeof(glProgramUniform4ui_PACKED)); \
    packed_data->index = glProgramUniform4ui_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLuint)v0; \
    packed_data->args.a4 = (GLuint)v1; \
    packed_data->args.a5 = (GLuint)v2; \
    packed_data->args.a6 = (GLuint)v3; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform4ui64NV(program, location, x, y, z, w) ({ \
    glProgramUniform4ui64NV_PACKED *packed_data = malloc(sizeof(glProgramUniform4ui64NV_PACKED)); \
    packed_data->index = glProgramUniform4ui64NV_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLuint64EXT)x; \
    packed_data->args.a4 = (GLuint64EXT)y; \
    packed_data->args.a5 = (GLuint64EXT)z; \
    packed_data->args.a6 = (GLuint64EXT)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform4ui64vNV(program, location, count, value) ({ \
    glProgramUniform4ui64vNV_PACKED *packed_data = malloc(sizeof(glProgramUniform4ui64vNV_PACKED)); \
    packed_data->index = glProgramUniform4ui64vNV_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLuint64EXT *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform4uiEXT(program, location, v0, v1, v2, v3) ({ \
    glProgramUniform4uiEXT_PACKED *packed_data = malloc(sizeof(glProgramUniform4uiEXT_PACKED)); \
    packed_data->index = glProgramUniform4uiEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLuint)v0; \
    packed_data->args.a4 = (GLuint)v1; \
    packed_data->args.a5 = (GLuint)v2; \
    packed_data->args.a6 = (GLuint)v3; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform4uiv(program, location, count, value) ({ \
    glProgramUniform4uiv_PACKED *packed_data = malloc(sizeof(glProgramUniform4uiv_PACKED)); \
    packed_data->index = glProgramUniform4uiv_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLuint *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniform4uivEXT(program, location, count, value) ({ \
    glProgramUniform4uivEXT_PACKED *packed_data = malloc(sizeof(glProgramUniform4uivEXT_PACKED)); \
    packed_data->index = glProgramUniform4uivEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLuint *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniformHandleui64NV(program, location, value) ({ \
    glProgramUniformHandleui64NV_PACKED *packed_data = malloc(sizeof(glProgramUniformHandleui64NV_PACKED)); \
    packed_data->index = glProgramUniformHandleui64NV_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLuint64)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniformHandleui64vNV(program, location, count, values) ({ \
    glProgramUniformHandleui64vNV_PACKED *packed_data = malloc(sizeof(glProgramUniformHandleui64vNV_PACKED)); \
    packed_data->index = glProgramUniformHandleui64vNV_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLuint64 *)values; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniformMatrix2dv(program, location, count, transpose, value) ({ \
    glProgramUniformMatrix2dv_PACKED *packed_data = malloc(sizeof(glProgramUniformMatrix2dv_PACKED)); \
    packed_data->index = glProgramUniformMatrix2dv_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLboolean)transpose; \
    packed_data->args.a5 = (GLdouble *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniformMatrix2dvEXT(program, location, count, transpose, value) ({ \
    glProgramUniformMatrix2dvEXT_PACKED *packed_data = malloc(sizeof(glProgramUniformMatrix2dvEXT_PACKED)); \
    packed_data->index = glProgramUniformMatrix2dvEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLboolean)transpose; \
    packed_data->args.a5 = (GLdouble *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniformMatrix2fv(program, location, count, transpose, value) ({ \
    glProgramUniformMatrix2fv_PACKED *packed_data = malloc(sizeof(glProgramUniformMatrix2fv_PACKED)); \
    packed_data->index = glProgramUniformMatrix2fv_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLboolean)transpose; \
    packed_data->args.a5 = (GLfloat *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniformMatrix2fvEXT(program, location, count, transpose, value) ({ \
    glProgramUniformMatrix2fvEXT_PACKED *packed_data = malloc(sizeof(glProgramUniformMatrix2fvEXT_PACKED)); \
    packed_data->index = glProgramUniformMatrix2fvEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLboolean)transpose; \
    packed_data->args.a5 = (GLfloat *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniformMatrix2x3dv(program, location, count, transpose, value) ({ \
    glProgramUniformMatrix2x3dv_PACKED *packed_data = malloc(sizeof(glProgramUniformMatrix2x3dv_PACKED)); \
    packed_data->index = glProgramUniformMatrix2x3dv_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLboolean)transpose; \
    packed_data->args.a5 = (GLdouble *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniformMatrix2x3dvEXT(program, location, count, transpose, value) ({ \
    glProgramUniformMatrix2x3dvEXT_PACKED *packed_data = malloc(sizeof(glProgramUniformMatrix2x3dvEXT_PACKED)); \
    packed_data->index = glProgramUniformMatrix2x3dvEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLboolean)transpose; \
    packed_data->args.a5 = (GLdouble *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniformMatrix2x3fv(program, location, count, transpose, value) ({ \
    glProgramUniformMatrix2x3fv_PACKED *packed_data = malloc(sizeof(glProgramUniformMatrix2x3fv_PACKED)); \
    packed_data->index = glProgramUniformMatrix2x3fv_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLboolean)transpose; \
    packed_data->args.a5 = (GLfloat *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniformMatrix2x3fvEXT(program, location, count, transpose, value) ({ \
    glProgramUniformMatrix2x3fvEXT_PACKED *packed_data = malloc(sizeof(glProgramUniformMatrix2x3fvEXT_PACKED)); \
    packed_data->index = glProgramUniformMatrix2x3fvEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLboolean)transpose; \
    packed_data->args.a5 = (GLfloat *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniformMatrix2x4dv(program, location, count, transpose, value) ({ \
    glProgramUniformMatrix2x4dv_PACKED *packed_data = malloc(sizeof(glProgramUniformMatrix2x4dv_PACKED)); \
    packed_data->index = glProgramUniformMatrix2x4dv_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLboolean)transpose; \
    packed_data->args.a5 = (GLdouble *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniformMatrix2x4dvEXT(program, location, count, transpose, value) ({ \
    glProgramUniformMatrix2x4dvEXT_PACKED *packed_data = malloc(sizeof(glProgramUniformMatrix2x4dvEXT_PACKED)); \
    packed_data->index = glProgramUniformMatrix2x4dvEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLboolean)transpose; \
    packed_data->args.a5 = (GLdouble *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniformMatrix2x4fv(program, location, count, transpose, value) ({ \
    glProgramUniformMatrix2x4fv_PACKED *packed_data = malloc(sizeof(glProgramUniformMatrix2x4fv_PACKED)); \
    packed_data->index = glProgramUniformMatrix2x4fv_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLboolean)transpose; \
    packed_data->args.a5 = (GLfloat *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniformMatrix2x4fvEXT(program, location, count, transpose, value) ({ \
    glProgramUniformMatrix2x4fvEXT_PACKED *packed_data = malloc(sizeof(glProgramUniformMatrix2x4fvEXT_PACKED)); \
    packed_data->index = glProgramUniformMatrix2x4fvEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLboolean)transpose; \
    packed_data->args.a5 = (GLfloat *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniformMatrix3dv(program, location, count, transpose, value) ({ \
    glProgramUniformMatrix3dv_PACKED *packed_data = malloc(sizeof(glProgramUniformMatrix3dv_PACKED)); \
    packed_data->index = glProgramUniformMatrix3dv_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLboolean)transpose; \
    packed_data->args.a5 = (GLdouble *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniformMatrix3dvEXT(program, location, count, transpose, value) ({ \
    glProgramUniformMatrix3dvEXT_PACKED *packed_data = malloc(sizeof(glProgramUniformMatrix3dvEXT_PACKED)); \
    packed_data->index = glProgramUniformMatrix3dvEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLboolean)transpose; \
    packed_data->args.a5 = (GLdouble *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniformMatrix3fv(program, location, count, transpose, value) ({ \
    glProgramUniformMatrix3fv_PACKED *packed_data = malloc(sizeof(glProgramUniformMatrix3fv_PACKED)); \
    packed_data->index = glProgramUniformMatrix3fv_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLboolean)transpose; \
    packed_data->args.a5 = (GLfloat *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniformMatrix3fvEXT(program, location, count, transpose, value) ({ \
    glProgramUniformMatrix3fvEXT_PACKED *packed_data = malloc(sizeof(glProgramUniformMatrix3fvEXT_PACKED)); \
    packed_data->index = glProgramUniformMatrix3fvEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLboolean)transpose; \
    packed_data->args.a5 = (GLfloat *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniformMatrix3x2dv(program, location, count, transpose, value) ({ \
    glProgramUniformMatrix3x2dv_PACKED *packed_data = malloc(sizeof(glProgramUniformMatrix3x2dv_PACKED)); \
    packed_data->index = glProgramUniformMatrix3x2dv_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLboolean)transpose; \
    packed_data->args.a5 = (GLdouble *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniformMatrix3x2dvEXT(program, location, count, transpose, value) ({ \
    glProgramUniformMatrix3x2dvEXT_PACKED *packed_data = malloc(sizeof(glProgramUniformMatrix3x2dvEXT_PACKED)); \
    packed_data->index = glProgramUniformMatrix3x2dvEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLboolean)transpose; \
    packed_data->args.a5 = (GLdouble *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniformMatrix3x2fv(program, location, count, transpose, value) ({ \
    glProgramUniformMatrix3x2fv_PACKED *packed_data = malloc(sizeof(glProgramUniformMatrix3x2fv_PACKED)); \
    packed_data->index = glProgramUniformMatrix3x2fv_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLboolean)transpose; \
    packed_data->args.a5 = (GLfloat *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniformMatrix3x2fvEXT(program, location, count, transpose, value) ({ \
    glProgramUniformMatrix3x2fvEXT_PACKED *packed_data = malloc(sizeof(glProgramUniformMatrix3x2fvEXT_PACKED)); \
    packed_data->index = glProgramUniformMatrix3x2fvEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLboolean)transpose; \
    packed_data->args.a5 = (GLfloat *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniformMatrix3x4dv(program, location, count, transpose, value) ({ \
    glProgramUniformMatrix3x4dv_PACKED *packed_data = malloc(sizeof(glProgramUniformMatrix3x4dv_PACKED)); \
    packed_data->index = glProgramUniformMatrix3x4dv_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLboolean)transpose; \
    packed_data->args.a5 = (GLdouble *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniformMatrix3x4dvEXT(program, location, count, transpose, value) ({ \
    glProgramUniformMatrix3x4dvEXT_PACKED *packed_data = malloc(sizeof(glProgramUniformMatrix3x4dvEXT_PACKED)); \
    packed_data->index = glProgramUniformMatrix3x4dvEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLboolean)transpose; \
    packed_data->args.a5 = (GLdouble *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniformMatrix3x4fv(program, location, count, transpose, value) ({ \
    glProgramUniformMatrix3x4fv_PACKED *packed_data = malloc(sizeof(glProgramUniformMatrix3x4fv_PACKED)); \
    packed_data->index = glProgramUniformMatrix3x4fv_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLboolean)transpose; \
    packed_data->args.a5 = (GLfloat *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniformMatrix3x4fvEXT(program, location, count, transpose, value) ({ \
    glProgramUniformMatrix3x4fvEXT_PACKED *packed_data = malloc(sizeof(glProgramUniformMatrix3x4fvEXT_PACKED)); \
    packed_data->index = glProgramUniformMatrix3x4fvEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLboolean)transpose; \
    packed_data->args.a5 = (GLfloat *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniformMatrix4dv(program, location, count, transpose, value) ({ \
    glProgramUniformMatrix4dv_PACKED *packed_data = malloc(sizeof(glProgramUniformMatrix4dv_PACKED)); \
    packed_data->index = glProgramUniformMatrix4dv_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLboolean)transpose; \
    packed_data->args.a5 = (GLdouble *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniformMatrix4dvEXT(program, location, count, transpose, value) ({ \
    glProgramUniformMatrix4dvEXT_PACKED *packed_data = malloc(sizeof(glProgramUniformMatrix4dvEXT_PACKED)); \
    packed_data->index = glProgramUniformMatrix4dvEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLboolean)transpose; \
    packed_data->args.a5 = (GLdouble *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniformMatrix4fv(program, location, count, transpose, value) ({ \
    glProgramUniformMatrix4fv_PACKED *packed_data = malloc(sizeof(glProgramUniformMatrix4fv_PACKED)); \
    packed_data->index = glProgramUniformMatrix4fv_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLboolean)transpose; \
    packed_data->args.a5 = (GLfloat *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniformMatrix4fvEXT(program, location, count, transpose, value) ({ \
    glProgramUniformMatrix4fvEXT_PACKED *packed_data = malloc(sizeof(glProgramUniformMatrix4fvEXT_PACKED)); \
    packed_data->index = glProgramUniformMatrix4fvEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLboolean)transpose; \
    packed_data->args.a5 = (GLfloat *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniformMatrix4x2dv(program, location, count, transpose, value) ({ \
    glProgramUniformMatrix4x2dv_PACKED *packed_data = malloc(sizeof(glProgramUniformMatrix4x2dv_PACKED)); \
    packed_data->index = glProgramUniformMatrix4x2dv_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLboolean)transpose; \
    packed_data->args.a5 = (GLdouble *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniformMatrix4x2dvEXT(program, location, count, transpose, value) ({ \
    glProgramUniformMatrix4x2dvEXT_PACKED *packed_data = malloc(sizeof(glProgramUniformMatrix4x2dvEXT_PACKED)); \
    packed_data->index = glProgramUniformMatrix4x2dvEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLboolean)transpose; \
    packed_data->args.a5 = (GLdouble *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniformMatrix4x2fv(program, location, count, transpose, value) ({ \
    glProgramUniformMatrix4x2fv_PACKED *packed_data = malloc(sizeof(glProgramUniformMatrix4x2fv_PACKED)); \
    packed_data->index = glProgramUniformMatrix4x2fv_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLboolean)transpose; \
    packed_data->args.a5 = (GLfloat *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniformMatrix4x2fvEXT(program, location, count, transpose, value) ({ \
    glProgramUniformMatrix4x2fvEXT_PACKED *packed_data = malloc(sizeof(glProgramUniformMatrix4x2fvEXT_PACKED)); \
    packed_data->index = glProgramUniformMatrix4x2fvEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLboolean)transpose; \
    packed_data->args.a5 = (GLfloat *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniformMatrix4x3dv(program, location, count, transpose, value) ({ \
    glProgramUniformMatrix4x3dv_PACKED *packed_data = malloc(sizeof(glProgramUniformMatrix4x3dv_PACKED)); \
    packed_data->index = glProgramUniformMatrix4x3dv_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLboolean)transpose; \
    packed_data->args.a5 = (GLdouble *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniformMatrix4x3dvEXT(program, location, count, transpose, value) ({ \
    glProgramUniformMatrix4x3dvEXT_PACKED *packed_data = malloc(sizeof(glProgramUniformMatrix4x3dvEXT_PACKED)); \
    packed_data->index = glProgramUniformMatrix4x3dvEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLboolean)transpose; \
    packed_data->args.a5 = (GLdouble *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniformMatrix4x3fv(program, location, count, transpose, value) ({ \
    glProgramUniformMatrix4x3fv_PACKED *packed_data = malloc(sizeof(glProgramUniformMatrix4x3fv_PACKED)); \
    packed_data->index = glProgramUniformMatrix4x3fv_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLboolean)transpose; \
    packed_data->args.a5 = (GLfloat *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniformMatrix4x3fvEXT(program, location, count, transpose, value) ({ \
    glProgramUniformMatrix4x3fvEXT_PACKED *packed_data = malloc(sizeof(glProgramUniformMatrix4x3fvEXT_PACKED)); \
    packed_data->index = glProgramUniformMatrix4x3fvEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLboolean)transpose; \
    packed_data->args.a5 = (GLfloat *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniformui64NV(program, location, value) ({ \
    glProgramUniformui64NV_PACKED *packed_data = malloc(sizeof(glProgramUniformui64NV_PACKED)); \
    packed_data->index = glProgramUniformui64NV_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLuint64EXT)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramUniformui64vNV(program, location, count, value) ({ \
    glProgramUniformui64vNV_PACKED *packed_data = malloc(sizeof(glProgramUniformui64vNV_PACKED)); \
    packed_data->index = glProgramUniformui64vNV_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLsizei)count; \
    packed_data->args.a4 = (GLuint64EXT *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glProgramVertexLimitNV(target, limit) ({ \
    glProgramVertexLimitNV_PACKED *packed_data = malloc(sizeof(glProgramVertexLimitNV_PACKED)); \
    packed_data->index = glProgramVertexLimitNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint)limit; \
    (packed_call_t *)packed_data; \
})
#define pack_glProvokingVertex(mode) ({ \
    glProvokingVertex_PACKED *packed_data = malloc(sizeof(glProvokingVertex_PACKED)); \
    packed_data->index = glProvokingVertex_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    (packed_call_t *)packed_data; \
})
#define pack_glProvokingVertexEXT(mode) ({ \
    glProvokingVertexEXT_PACKED *packed_data = malloc(sizeof(glProvokingVertexEXT_PACKED)); \
    packed_data->index = glProvokingVertexEXT_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    (packed_call_t *)packed_data; \
})
#define pack_glPushAttrib(mask) ({ \
    glPushAttrib_PACKED *packed_data = malloc(sizeof(glPushAttrib_PACKED)); \
    packed_data->index = glPushAttrib_INDEX; \
    packed_data->args.a1 = (GLbitfield)mask; \
    (packed_call_t *)packed_data; \
})
#define pack_glPushClientAttrib(mask) ({ \
    glPushClientAttrib_PACKED *packed_data = malloc(sizeof(glPushClientAttrib_PACKED)); \
    packed_data->index = glPushClientAttrib_INDEX; \
    packed_data->args.a1 = (GLbitfield)mask; \
    (packed_call_t *)packed_data; \
})
#define pack_glPushClientAttribDefaultEXT(mask) ({ \
    glPushClientAttribDefaultEXT_PACKED *packed_data = malloc(sizeof(glPushClientAttribDefaultEXT_PACKED)); \
    packed_data->index = glPushClientAttribDefaultEXT_INDEX; \
    packed_data->args.a1 = (GLbitfield)mask; \
    (packed_call_t *)packed_data; \
})
#define pack_glPushDebugGroup(source, id, length, message) ({ \
    glPushDebugGroup_PACKED *packed_data = malloc(sizeof(glPushDebugGroup_PACKED)); \
    packed_data->index = glPushDebugGroup_INDEX; \
    packed_data->args.a1 = (GLenum)source; \
    packed_data->args.a2 = (GLuint)id; \
    packed_data->args.a3 = (GLsizei)length; \
    packed_data->args.a4 = (GLchar *)message; \
    (packed_call_t *)packed_data; \
})
#define pack_glPushMatrix() ({ \
    glPushMatrix_PACKED *packed_data = malloc(sizeof(glPushMatrix_PACKED)); \
    packed_data->index = glPushMatrix_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glPushName(name) ({ \
    glPushName_PACKED *packed_data = malloc(sizeof(glPushName_PACKED)); \
    packed_data->index = glPushName_INDEX; \
    packed_data->args.a1 = (GLuint)name; \
    (packed_call_t *)packed_data; \
})
#define pack_glQueryCounter(id, target) ({ \
    glQueryCounter_PACKED *packed_data = malloc(sizeof(glQueryCounter_PACKED)); \
    packed_data->index = glQueryCounter_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    packed_data->args.a2 = (GLenum)target; \
    (packed_call_t *)packed_data; \
})
#define pack_glQueryMatrixxOES(mantissa, exponent) ({ \
    glQueryMatrixxOES_PACKED *packed_data = malloc(sizeof(glQueryMatrixxOES_PACKED)); \
    packed_data->index = glQueryMatrixxOES_INDEX; \
    packed_data->args.a1 = (GLfixed *)mantissa; \
    packed_data->args.a2 = (GLint *)exponent; \
    (packed_call_t *)packed_data; \
})
#define pack_glRasterPos2d(x, y) ({ \
    glRasterPos2d_PACKED *packed_data = malloc(sizeof(glRasterPos2d_PACKED)); \
    packed_data->index = glRasterPos2d_INDEX; \
    packed_data->args.a1 = (GLdouble)x; \
    packed_data->args.a2 = (GLdouble)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glRasterPos2dv(v) ({ \
    glRasterPos2dv_PACKED *packed_data = malloc(sizeof(glRasterPos2dv_PACKED)); \
    packed_data->index = glRasterPos2dv_INDEX; \
    packed_data->args.a1 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glRasterPos2f(x, y) ({ \
    glRasterPos2f_PACKED *packed_data = malloc(sizeof(glRasterPos2f_PACKED)); \
    packed_data->index = glRasterPos2f_INDEX; \
    packed_data->args.a1 = (GLfloat)x; \
    packed_data->args.a2 = (GLfloat)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glRasterPos2fv(v) ({ \
    glRasterPos2fv_PACKED *packed_data = malloc(sizeof(glRasterPos2fv_PACKED)); \
    packed_data->index = glRasterPos2fv_INDEX; \
    packed_data->args.a1 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glRasterPos2i(x, y) ({ \
    glRasterPos2i_PACKED *packed_data = malloc(sizeof(glRasterPos2i_PACKED)); \
    packed_data->index = glRasterPos2i_INDEX; \
    packed_data->args.a1 = (GLint)x; \
    packed_data->args.a2 = (GLint)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glRasterPos2iv(v) ({ \
    glRasterPos2iv_PACKED *packed_data = malloc(sizeof(glRasterPos2iv_PACKED)); \
    packed_data->index = glRasterPos2iv_INDEX; \
    packed_data->args.a1 = (GLint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glRasterPos2s(x, y) ({ \
    glRasterPos2s_PACKED *packed_data = malloc(sizeof(glRasterPos2s_PACKED)); \
    packed_data->index = glRasterPos2s_INDEX; \
    packed_data->args.a1 = (GLshort)x; \
    packed_data->args.a2 = (GLshort)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glRasterPos2sv(v) ({ \
    glRasterPos2sv_PACKED *packed_data = malloc(sizeof(glRasterPos2sv_PACKED)); \
    packed_data->index = glRasterPos2sv_INDEX; \
    packed_data->args.a1 = (GLshort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glRasterPos2xOES(x, y) ({ \
    glRasterPos2xOES_PACKED *packed_data = malloc(sizeof(glRasterPos2xOES_PACKED)); \
    packed_data->index = glRasterPos2xOES_INDEX; \
    packed_data->args.a1 = (GLfixed)x; \
    packed_data->args.a2 = (GLfixed)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glRasterPos2xvOES(coords) ({ \
    glRasterPos2xvOES_PACKED *packed_data = malloc(sizeof(glRasterPos2xvOES_PACKED)); \
    packed_data->index = glRasterPos2xvOES_INDEX; \
    packed_data->args.a1 = (GLfixed *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glRasterPos3d(x, y, z) ({ \
    glRasterPos3d_PACKED *packed_data = malloc(sizeof(glRasterPos3d_PACKED)); \
    packed_data->index = glRasterPos3d_INDEX; \
    packed_data->args.a1 = (GLdouble)x; \
    packed_data->args.a2 = (GLdouble)y; \
    packed_data->args.a3 = (GLdouble)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glRasterPos3dv(v) ({ \
    glRasterPos3dv_PACKED *packed_data = malloc(sizeof(glRasterPos3dv_PACKED)); \
    packed_data->index = glRasterPos3dv_INDEX; \
    packed_data->args.a1 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glRasterPos3f(x, y, z) ({ \
    glRasterPos3f_PACKED *packed_data = malloc(sizeof(glRasterPos3f_PACKED)); \
    packed_data->index = glRasterPos3f_INDEX; \
    packed_data->args.a1 = (GLfloat)x; \
    packed_data->args.a2 = (GLfloat)y; \
    packed_data->args.a3 = (GLfloat)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glRasterPos3fv(v) ({ \
    glRasterPos3fv_PACKED *packed_data = malloc(sizeof(glRasterPos3fv_PACKED)); \
    packed_data->index = glRasterPos3fv_INDEX; \
    packed_data->args.a1 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glRasterPos3i(x, y, z) ({ \
    glRasterPos3i_PACKED *packed_data = malloc(sizeof(glRasterPos3i_PACKED)); \
    packed_data->index = glRasterPos3i_INDEX; \
    packed_data->args.a1 = (GLint)x; \
    packed_data->args.a2 = (GLint)y; \
    packed_data->args.a3 = (GLint)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glRasterPos3iv(v) ({ \
    glRasterPos3iv_PACKED *packed_data = malloc(sizeof(glRasterPos3iv_PACKED)); \
    packed_data->index = glRasterPos3iv_INDEX; \
    packed_data->args.a1 = (GLint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glRasterPos3s(x, y, z) ({ \
    glRasterPos3s_PACKED *packed_data = malloc(sizeof(glRasterPos3s_PACKED)); \
    packed_data->index = glRasterPos3s_INDEX; \
    packed_data->args.a1 = (GLshort)x; \
    packed_data->args.a2 = (GLshort)y; \
    packed_data->args.a3 = (GLshort)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glRasterPos3sv(v) ({ \
    glRasterPos3sv_PACKED *packed_data = malloc(sizeof(glRasterPos3sv_PACKED)); \
    packed_data->index = glRasterPos3sv_INDEX; \
    packed_data->args.a1 = (GLshort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glRasterPos3xOES(x, y, z) ({ \
    glRasterPos3xOES_PACKED *packed_data = malloc(sizeof(glRasterPos3xOES_PACKED)); \
    packed_data->index = glRasterPos3xOES_INDEX; \
    packed_data->args.a1 = (GLfixed)x; \
    packed_data->args.a2 = (GLfixed)y; \
    packed_data->args.a3 = (GLfixed)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glRasterPos3xvOES(coords) ({ \
    glRasterPos3xvOES_PACKED *packed_data = malloc(sizeof(glRasterPos3xvOES_PACKED)); \
    packed_data->index = glRasterPos3xvOES_INDEX; \
    packed_data->args.a1 = (GLfixed *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glRasterPos4d(x, y, z, w) ({ \
    glRasterPos4d_PACKED *packed_data = malloc(sizeof(glRasterPos4d_PACKED)); \
    packed_data->index = glRasterPos4d_INDEX; \
    packed_data->args.a1 = (GLdouble)x; \
    packed_data->args.a2 = (GLdouble)y; \
    packed_data->args.a3 = (GLdouble)z; \
    packed_data->args.a4 = (GLdouble)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glRasterPos4dv(v) ({ \
    glRasterPos4dv_PACKED *packed_data = malloc(sizeof(glRasterPos4dv_PACKED)); \
    packed_data->index = glRasterPos4dv_INDEX; \
    packed_data->args.a1 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glRasterPos4f(x, y, z, w) ({ \
    glRasterPos4f_PACKED *packed_data = malloc(sizeof(glRasterPos4f_PACKED)); \
    packed_data->index = glRasterPos4f_INDEX; \
    packed_data->args.a1 = (GLfloat)x; \
    packed_data->args.a2 = (GLfloat)y; \
    packed_data->args.a3 = (GLfloat)z; \
    packed_data->args.a4 = (GLfloat)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glRasterPos4fv(v) ({ \
    glRasterPos4fv_PACKED *packed_data = malloc(sizeof(glRasterPos4fv_PACKED)); \
    packed_data->index = glRasterPos4fv_INDEX; \
    packed_data->args.a1 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glRasterPos4i(x, y, z, w) ({ \
    glRasterPos4i_PACKED *packed_data = malloc(sizeof(glRasterPos4i_PACKED)); \
    packed_data->index = glRasterPos4i_INDEX; \
    packed_data->args.a1 = (GLint)x; \
    packed_data->args.a2 = (GLint)y; \
    packed_data->args.a3 = (GLint)z; \
    packed_data->args.a4 = (GLint)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glRasterPos4iv(v) ({ \
    glRasterPos4iv_PACKED *packed_data = malloc(sizeof(glRasterPos4iv_PACKED)); \
    packed_data->index = glRasterPos4iv_INDEX; \
    packed_data->args.a1 = (GLint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glRasterPos4s(x, y, z, w) ({ \
    glRasterPos4s_PACKED *packed_data = malloc(sizeof(glRasterPos4s_PACKED)); \
    packed_data->index = glRasterPos4s_INDEX; \
    packed_data->args.a1 = (GLshort)x; \
    packed_data->args.a2 = (GLshort)y; \
    packed_data->args.a3 = (GLshort)z; \
    packed_data->args.a4 = (GLshort)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glRasterPos4sv(v) ({ \
    glRasterPos4sv_PACKED *packed_data = malloc(sizeof(glRasterPos4sv_PACKED)); \
    packed_data->index = glRasterPos4sv_INDEX; \
    packed_data->args.a1 = (GLshort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glRasterPos4xOES(x, y, z, w) ({ \
    glRasterPos4xOES_PACKED *packed_data = malloc(sizeof(glRasterPos4xOES_PACKED)); \
    packed_data->index = glRasterPos4xOES_INDEX; \
    packed_data->args.a1 = (GLfixed)x; \
    packed_data->args.a2 = (GLfixed)y; \
    packed_data->args.a3 = (GLfixed)z; \
    packed_data->args.a4 = (GLfixed)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glRasterPos4xvOES(coords) ({ \
    glRasterPos4xvOES_PACKED *packed_data = malloc(sizeof(glRasterPos4xvOES_PACKED)); \
    packed_data->index = glRasterPos4xvOES_INDEX; \
    packed_data->args.a1 = (GLfixed *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glReadBuffer(mode) ({ \
    glReadBuffer_PACKED *packed_data = malloc(sizeof(glReadBuffer_PACKED)); \
    packed_data->index = glReadBuffer_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    (packed_call_t *)packed_data; \
})
#define pack_glReadInstrumentsSGIX(marker) ({ \
    glReadInstrumentsSGIX_PACKED *packed_data = malloc(sizeof(glReadInstrumentsSGIX_PACKED)); \
    packed_data->index = glReadInstrumentsSGIX_INDEX; \
    packed_data->args.a1 = (GLint)marker; \
    (packed_call_t *)packed_data; \
})
#define pack_glReadPixels(x, y, width, height, format, type, pixels) ({ \
    glReadPixels_PACKED *packed_data = malloc(sizeof(glReadPixels_PACKED)); \
    packed_data->index = glReadPixels_INDEX; \
    packed_data->args.a1 = (GLint)x; \
    packed_data->args.a2 = (GLint)y; \
    packed_data->args.a3 = (GLsizei)width; \
    packed_data->args.a4 = (GLsizei)height; \
    packed_data->args.a5 = (GLenum)format; \
    packed_data->args.a6 = (GLenum)type; \
    packed_data->args.a7 = (GLvoid *)pixels; \
    (packed_call_t *)packed_data; \
})
#define pack_glReadnPixelsARB(x, y, width, height, format, type, bufSize, data) ({ \
    glReadnPixelsARB_PACKED *packed_data = malloc(sizeof(glReadnPixelsARB_PACKED)); \
    packed_data->index = glReadnPixelsARB_INDEX; \
    packed_data->args.a1 = (GLint)x; \
    packed_data->args.a2 = (GLint)y; \
    packed_data->args.a3 = (GLsizei)width; \
    packed_data->args.a4 = (GLsizei)height; \
    packed_data->args.a5 = (GLenum)format; \
    packed_data->args.a6 = (GLenum)type; \
    packed_data->args.a7 = (GLsizei)bufSize; \
    packed_data->args.a8 = (GLvoid *)data; \
    (packed_call_t *)packed_data; \
})
#define pack_glRectd(x1, y1, x2, y2) ({ \
    glRectd_PACKED *packed_data = malloc(sizeof(glRectd_PACKED)); \
    packed_data->index = glRectd_INDEX; \
    packed_data->args.a1 = (GLdouble)x1; \
    packed_data->args.a2 = (GLdouble)y1; \
    packed_data->args.a3 = (GLdouble)x2; \
    packed_data->args.a4 = (GLdouble)y2; \
    (packed_call_t *)packed_data; \
})
#define pack_glRectdv(v1, v2) ({ \
    glRectdv_PACKED *packed_data = malloc(sizeof(glRectdv_PACKED)); \
    packed_data->index = glRectdv_INDEX; \
    packed_data->args.a1 = (GLdouble *)v1; \
    packed_data->args.a2 = (GLdouble *)v2; \
    (packed_call_t *)packed_data; \
})
#define pack_glRectf(x1, y1, x2, y2) ({ \
    glRectf_PACKED *packed_data = malloc(sizeof(glRectf_PACKED)); \
    packed_data->index = glRectf_INDEX; \
    packed_data->args.a1 = (GLfloat)x1; \
    packed_data->args.a2 = (GLfloat)y1; \
    packed_data->args.a3 = (GLfloat)x2; \
    packed_data->args.a4 = (GLfloat)y2; \
    (packed_call_t *)packed_data; \
})
#define pack_glRectfv(v1, v2) ({ \
    glRectfv_PACKED *packed_data = malloc(sizeof(glRectfv_PACKED)); \
    packed_data->index = glRectfv_INDEX; \
    packed_data->args.a1 = (GLfloat *)v1; \
    packed_data->args.a2 = (GLfloat *)v2; \
    (packed_call_t *)packed_data; \
})
#define pack_glRecti(x1, y1, x2, y2) ({ \
    glRecti_PACKED *packed_data = malloc(sizeof(glRecti_PACKED)); \
    packed_data->index = glRecti_INDEX; \
    packed_data->args.a1 = (GLint)x1; \
    packed_data->args.a2 = (GLint)y1; \
    packed_data->args.a3 = (GLint)x2; \
    packed_data->args.a4 = (GLint)y2; \
    (packed_call_t *)packed_data; \
})
#define pack_glRectiv(v1, v2) ({ \
    glRectiv_PACKED *packed_data = malloc(sizeof(glRectiv_PACKED)); \
    packed_data->index = glRectiv_INDEX; \
    packed_data->args.a1 = (GLint *)v1; \
    packed_data->args.a2 = (GLint *)v2; \
    (packed_call_t *)packed_data; \
})
#define pack_glRects(x1, y1, x2, y2) ({ \
    glRects_PACKED *packed_data = malloc(sizeof(glRects_PACKED)); \
    packed_data->index = glRects_INDEX; \
    packed_data->args.a1 = (GLshort)x1; \
    packed_data->args.a2 = (GLshort)y1; \
    packed_data->args.a3 = (GLshort)x2; \
    packed_data->args.a4 = (GLshort)y2; \
    (packed_call_t *)packed_data; \
})
#define pack_glRectsv(v1, v2) ({ \
    glRectsv_PACKED *packed_data = malloc(sizeof(glRectsv_PACKED)); \
    packed_data->index = glRectsv_INDEX; \
    packed_data->args.a1 = (GLshort *)v1; \
    packed_data->args.a2 = (GLshort *)v2; \
    (packed_call_t *)packed_data; \
})
#define pack_glRectxOES(x1, y1, x2, y2) ({ \
    glRectxOES_PACKED *packed_data = malloc(sizeof(glRectxOES_PACKED)); \
    packed_data->index = glRectxOES_INDEX; \
    packed_data->args.a1 = (GLfixed)x1; \
    packed_data->args.a2 = (GLfixed)y1; \
    packed_data->args.a3 = (GLfixed)x2; \
    packed_data->args.a4 = (GLfixed)y2; \
    (packed_call_t *)packed_data; \
})
#define pack_glRectxvOES(v1, v2) ({ \
    glRectxvOES_PACKED *packed_data = malloc(sizeof(glRectxvOES_PACKED)); \
    packed_data->index = glRectxvOES_INDEX; \
    packed_data->args.a1 = (GLfixed *)v1; \
    packed_data->args.a2 = (GLfixed *)v2; \
    (packed_call_t *)packed_data; \
})
#define pack_glReferencePlaneSGIX(equation) ({ \
    glReferencePlaneSGIX_PACKED *packed_data = malloc(sizeof(glReferencePlaneSGIX_PACKED)); \
    packed_data->index = glReferencePlaneSGIX_INDEX; \
    packed_data->args.a1 = (GLdouble *)equation; \
    (packed_call_t *)packed_data; \
})
#define pack_glReleaseShaderCompiler() ({ \
    glReleaseShaderCompiler_PACKED *packed_data = malloc(sizeof(glReleaseShaderCompiler_PACKED)); \
    packed_data->index = glReleaseShaderCompiler_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glRenderMode(mode) ({ \
    glRenderMode_PACKED *packed_data = malloc(sizeof(glRenderMode_PACKED)); \
    packed_data->index = glRenderMode_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    (packed_call_t *)packed_data; \
})
#define pack_glRenderbufferStorage(target, internalformat, width, height) ({ \
    glRenderbufferStorage_PACKED *packed_data = malloc(sizeof(glRenderbufferStorage_PACKED)); \
    packed_data->index = glRenderbufferStorage_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)internalformat; \
    packed_data->args.a3 = (GLsizei)width; \
    packed_data->args.a4 = (GLsizei)height; \
    (packed_call_t *)packed_data; \
})
#define pack_glRenderbufferStorageEXT(target, internalformat, width, height) ({ \
    glRenderbufferStorageEXT_PACKED *packed_data = malloc(sizeof(glRenderbufferStorageEXT_PACKED)); \
    packed_data->index = glRenderbufferStorageEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)internalformat; \
    packed_data->args.a3 = (GLsizei)width; \
    packed_data->args.a4 = (GLsizei)height; \
    (packed_call_t *)packed_data; \
})
#define pack_glRenderbufferStorageMultisample(target, samples, internalformat, width, height) ({ \
    glRenderbufferStorageMultisample_PACKED *packed_data = malloc(sizeof(glRenderbufferStorageMultisample_PACKED)); \
    packed_data->index = glRenderbufferStorageMultisample_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLsizei)samples; \
    packed_data->args.a3 = (GLenum)internalformat; \
    packed_data->args.a4 = (GLsizei)width; \
    packed_data->args.a5 = (GLsizei)height; \
    (packed_call_t *)packed_data; \
})
#define pack_glRenderbufferStorageMultisampleCoverageNV(target, coverageSamples, colorSamples, internalformat, width, height) ({ \
    glRenderbufferStorageMultisampleCoverageNV_PACKED *packed_data = malloc(sizeof(glRenderbufferStorageMultisampleCoverageNV_PACKED)); \
    packed_data->index = glRenderbufferStorageMultisampleCoverageNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLsizei)coverageSamples; \
    packed_data->args.a3 = (GLsizei)colorSamples; \
    packed_data->args.a4 = (GLenum)internalformat; \
    packed_data->args.a5 = (GLsizei)width; \
    packed_data->args.a6 = (GLsizei)height; \
    (packed_call_t *)packed_data; \
})
#define pack_glRenderbufferStorageMultisampleEXT(target, samples, internalformat, width, height) ({ \
    glRenderbufferStorageMultisampleEXT_PACKED *packed_data = malloc(sizeof(glRenderbufferStorageMultisampleEXT_PACKED)); \
    packed_data->index = glRenderbufferStorageMultisampleEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLsizei)samples; \
    packed_data->args.a3 = (GLenum)internalformat; \
    packed_data->args.a4 = (GLsizei)width; \
    packed_data->args.a5 = (GLsizei)height; \
    (packed_call_t *)packed_data; \
})
#define pack_glReplacementCodePointerSUN(type, stride, pointer) ({ \
    glReplacementCodePointerSUN_PACKED *packed_data = malloc(sizeof(glReplacementCodePointerSUN_PACKED)); \
    packed_data->index = glReplacementCodePointerSUN_INDEX; \
    packed_data->args.a1 = (GLenum)type; \
    packed_data->args.a2 = (GLsizei)stride; \
    packed_data->args.a3 = (GLvoid *)pointer; \
    (packed_call_t *)packed_data; \
})
#define pack_glReplacementCodeubSUN(code) ({ \
    glReplacementCodeubSUN_PACKED *packed_data = malloc(sizeof(glReplacementCodeubSUN_PACKED)); \
    packed_data->index = glReplacementCodeubSUN_INDEX; \
    packed_data->args.a1 = (GLubyte)code; \
    (packed_call_t *)packed_data; \
})
#define pack_glReplacementCodeubvSUN(code) ({ \
    glReplacementCodeubvSUN_PACKED *packed_data = malloc(sizeof(glReplacementCodeubvSUN_PACKED)); \
    packed_data->index = glReplacementCodeubvSUN_INDEX; \
    packed_data->args.a1 = (GLubyte *)code; \
    (packed_call_t *)packed_data; \
})
#define pack_glReplacementCodeuiColor3fVertex3fSUN(rc, r, g, b, x, y, z) ({ \
    glReplacementCodeuiColor3fVertex3fSUN_PACKED *packed_data = malloc(sizeof(glReplacementCodeuiColor3fVertex3fSUN_PACKED)); \
    packed_data->index = glReplacementCodeuiColor3fVertex3fSUN_INDEX; \
    packed_data->args.a1 = (GLuint)rc; \
    packed_data->args.a2 = (GLfloat)r; \
    packed_data->args.a3 = (GLfloat)g; \
    packed_data->args.a4 = (GLfloat)b; \
    packed_data->args.a5 = (GLfloat)x; \
    packed_data->args.a6 = (GLfloat)y; \
    packed_data->args.a7 = (GLfloat)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glReplacementCodeuiColor3fVertex3fvSUN(rc, c, v) ({ \
    glReplacementCodeuiColor3fVertex3fvSUN_PACKED *packed_data = malloc(sizeof(glReplacementCodeuiColor3fVertex3fvSUN_PACKED)); \
    packed_data->index = glReplacementCodeuiColor3fVertex3fvSUN_INDEX; \
    packed_data->args.a1 = (GLuint *)rc; \
    packed_data->args.a2 = (GLfloat *)c; \
    packed_data->args.a3 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glReplacementCodeuiColor4fNormal3fVertex3fSUN(rc, r, g, b, a, nx, ny, nz, x, y, z) ({ \
    glReplacementCodeuiColor4fNormal3fVertex3fSUN_PACKED *packed_data = malloc(sizeof(glReplacementCodeuiColor4fNormal3fVertex3fSUN_PACKED)); \
    packed_data->index = glReplacementCodeuiColor4fNormal3fVertex3fSUN_INDEX; \
    packed_data->args.a1 = (GLuint)rc; \
    packed_data->args.a2 = (GLfloat)r; \
    packed_data->args.a3 = (GLfloat)g; \
    packed_data->args.a4 = (GLfloat)b; \
    packed_data->args.a5 = (GLfloat)a; \
    packed_data->args.a6 = (GLfloat)nx; \
    packed_data->args.a7 = (GLfloat)ny; \
    packed_data->args.a8 = (GLfloat)nz; \
    packed_data->args.a9 = (GLfloat)x; \
    packed_data->args.a10 = (GLfloat)y; \
    packed_data->args.a11 = (GLfloat)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, n, v) ({ \
    glReplacementCodeuiColor4fNormal3fVertex3fvSUN_PACKED *packed_data = malloc(sizeof(glReplacementCodeuiColor4fNormal3fVertex3fvSUN_PACKED)); \
    packed_data->index = glReplacementCodeuiColor4fNormal3fVertex3fvSUN_INDEX; \
    packed_data->args.a1 = (GLuint *)rc; \
    packed_data->args.a2 = (GLfloat *)c; \
    packed_data->args.a3 = (GLfloat *)n; \
    packed_data->args.a4 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glReplacementCodeuiColor4ubVertex3fSUN(rc, r, g, b, a, x, y, z) ({ \
    glReplacementCodeuiColor4ubVertex3fSUN_PACKED *packed_data = malloc(sizeof(glReplacementCodeuiColor4ubVertex3fSUN_PACKED)); \
    packed_data->index = glReplacementCodeuiColor4ubVertex3fSUN_INDEX; \
    packed_data->args.a1 = (GLuint)rc; \
    packed_data->args.a2 = (GLubyte)r; \
    packed_data->args.a3 = (GLubyte)g; \
    packed_data->args.a4 = (GLubyte)b; \
    packed_data->args.a5 = (GLubyte)a; \
    packed_data->args.a6 = (GLfloat)x; \
    packed_data->args.a7 = (GLfloat)y; \
    packed_data->args.a8 = (GLfloat)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glReplacementCodeuiColor4ubVertex3fvSUN(rc, c, v) ({ \
    glReplacementCodeuiColor4ubVertex3fvSUN_PACKED *packed_data = malloc(sizeof(glReplacementCodeuiColor4ubVertex3fvSUN_PACKED)); \
    packed_data->index = glReplacementCodeuiColor4ubVertex3fvSUN_INDEX; \
    packed_data->args.a1 = (GLuint *)rc; \
    packed_data->args.a2 = (GLubyte *)c; \
    packed_data->args.a3 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glReplacementCodeuiNormal3fVertex3fSUN(rc, nx, ny, nz, x, y, z) ({ \
    glReplacementCodeuiNormal3fVertex3fSUN_PACKED *packed_data = malloc(sizeof(glReplacementCodeuiNormal3fVertex3fSUN_PACKED)); \
    packed_data->index = glReplacementCodeuiNormal3fVertex3fSUN_INDEX; \
    packed_data->args.a1 = (GLuint)rc; \
    packed_data->args.a2 = (GLfloat)nx; \
    packed_data->args.a3 = (GLfloat)ny; \
    packed_data->args.a4 = (GLfloat)nz; \
    packed_data->args.a5 = (GLfloat)x; \
    packed_data->args.a6 = (GLfloat)y; \
    packed_data->args.a7 = (GLfloat)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glReplacementCodeuiNormal3fVertex3fvSUN(rc, n, v) ({ \
    glReplacementCodeuiNormal3fVertex3fvSUN_PACKED *packed_data = malloc(sizeof(glReplacementCodeuiNormal3fVertex3fvSUN_PACKED)); \
    packed_data->index = glReplacementCodeuiNormal3fVertex3fvSUN_INDEX; \
    packed_data->args.a1 = (GLuint *)rc; \
    packed_data->args.a2 = (GLfloat *)n; \
    packed_data->args.a3 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glReplacementCodeuiSUN(code) ({ \
    glReplacementCodeuiSUN_PACKED *packed_data = malloc(sizeof(glReplacementCodeuiSUN_PACKED)); \
    packed_data->index = glReplacementCodeuiSUN_INDEX; \
    packed_data->args.a1 = (GLuint)code; \
    (packed_call_t *)packed_data; \
})
#define pack_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z) ({ \
    glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_PACKED *packed_data = malloc(sizeof(glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_PACKED)); \
    packed_data->index = glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_INDEX; \
    packed_data->args.a1 = (GLuint)rc; \
    packed_data->args.a2 = (GLfloat)s; \
    packed_data->args.a3 = (GLfloat)t; \
    packed_data->args.a4 = (GLfloat)r; \
    packed_data->args.a5 = (GLfloat)g; \
    packed_data->args.a6 = (GLfloat)b; \
    packed_data->args.a7 = (GLfloat)a; \
    packed_data->args.a8 = (GLfloat)nx; \
    packed_data->args.a9 = (GLfloat)ny; \
    packed_data->args.a10 = (GLfloat)nz; \
    packed_data->args.a11 = (GLfloat)x; \
    packed_data->args.a12 = (GLfloat)y; \
    packed_data->args.a13 = (GLfloat)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, n, v) ({ \
    glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_PACKED *packed_data = malloc(sizeof(glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_PACKED)); \
    packed_data->index = glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_INDEX; \
    packed_data->args.a1 = (GLuint *)rc; \
    packed_data->args.a2 = (GLfloat *)tc; \
    packed_data->args.a3 = (GLfloat *)c; \
    packed_data->args.a4 = (GLfloat *)n; \
    packed_data->args.a5 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(rc, s, t, nx, ny, nz, x, y, z) ({ \
    glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_PACKED *packed_data = malloc(sizeof(glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_PACKED)); \
    packed_data->index = glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_INDEX; \
    packed_data->args.a1 = (GLuint)rc; \
    packed_data->args.a2 = (GLfloat)s; \
    packed_data->args.a3 = (GLfloat)t; \
    packed_data->args.a4 = (GLfloat)nx; \
    packed_data->args.a5 = (GLfloat)ny; \
    packed_data->args.a6 = (GLfloat)nz; \
    packed_data->args.a7 = (GLfloat)x; \
    packed_data->args.a8 = (GLfloat)y; \
    packed_data->args.a9 = (GLfloat)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, n, v) ({ \
    glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_PACKED *packed_data = malloc(sizeof(glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_PACKED)); \
    packed_data->index = glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_INDEX; \
    packed_data->args.a1 = (GLuint *)rc; \
    packed_data->args.a2 = (GLfloat *)tc; \
    packed_data->args.a3 = (GLfloat *)n; \
    packed_data->args.a4 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glReplacementCodeuiTexCoord2fVertex3fSUN(rc, s, t, x, y, z) ({ \
    glReplacementCodeuiTexCoord2fVertex3fSUN_PACKED *packed_data = malloc(sizeof(glReplacementCodeuiTexCoord2fVertex3fSUN_PACKED)); \
    packed_data->index = glReplacementCodeuiTexCoord2fVertex3fSUN_INDEX; \
    packed_data->args.a1 = (GLuint)rc; \
    packed_data->args.a2 = (GLfloat)s; \
    packed_data->args.a3 = (GLfloat)t; \
    packed_data->args.a4 = (GLfloat)x; \
    packed_data->args.a5 = (GLfloat)y; \
    packed_data->args.a6 = (GLfloat)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, tc, v) ({ \
    glReplacementCodeuiTexCoord2fVertex3fvSUN_PACKED *packed_data = malloc(sizeof(glReplacementCodeuiTexCoord2fVertex3fvSUN_PACKED)); \
    packed_data->index = glReplacementCodeuiTexCoord2fVertex3fvSUN_INDEX; \
    packed_data->args.a1 = (GLuint *)rc; \
    packed_data->args.a2 = (GLfloat *)tc; \
    packed_data->args.a3 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glReplacementCodeuiVertex3fSUN(rc, x, y, z) ({ \
    glReplacementCodeuiVertex3fSUN_PACKED *packed_data = malloc(sizeof(glReplacementCodeuiVertex3fSUN_PACKED)); \
    packed_data->index = glReplacementCodeuiVertex3fSUN_INDEX; \
    packed_data->args.a1 = (GLuint)rc; \
    packed_data->args.a2 = (GLfloat)x; \
    packed_data->args.a3 = (GLfloat)y; \
    packed_data->args.a4 = (GLfloat)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glReplacementCodeuiVertex3fvSUN(rc, v) ({ \
    glReplacementCodeuiVertex3fvSUN_PACKED *packed_data = malloc(sizeof(glReplacementCodeuiVertex3fvSUN_PACKED)); \
    packed_data->index = glReplacementCodeuiVertex3fvSUN_INDEX; \
    packed_data->args.a1 = (GLuint *)rc; \
    packed_data->args.a2 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glReplacementCodeuivSUN(code) ({ \
    glReplacementCodeuivSUN_PACKED *packed_data = malloc(sizeof(glReplacementCodeuivSUN_PACKED)); \
    packed_data->index = glReplacementCodeuivSUN_INDEX; \
    packed_data->args.a1 = (GLuint *)code; \
    (packed_call_t *)packed_data; \
})
#define pack_glReplacementCodeusSUN(code) ({ \
    glReplacementCodeusSUN_PACKED *packed_data = malloc(sizeof(glReplacementCodeusSUN_PACKED)); \
    packed_data->index = glReplacementCodeusSUN_INDEX; \
    packed_data->args.a1 = (GLushort)code; \
    (packed_call_t *)packed_data; \
})
#define pack_glReplacementCodeusvSUN(code) ({ \
    glReplacementCodeusvSUN_PACKED *packed_data = malloc(sizeof(glReplacementCodeusvSUN_PACKED)); \
    packed_data->index = glReplacementCodeusvSUN_INDEX; \
    packed_data->args.a1 = (GLushort *)code; \
    (packed_call_t *)packed_data; \
})
#define pack_glRequestResidentProgramsNV(n, programs) ({ \
    glRequestResidentProgramsNV_PACKED *packed_data = malloc(sizeof(glRequestResidentProgramsNV_PACKED)); \
    packed_data->index = glRequestResidentProgramsNV_INDEX; \
    packed_data->args.a1 = (GLsizei)n; \
    packed_data->args.a2 = (GLuint *)programs; \
    (packed_call_t *)packed_data; \
})
#define pack_glResetHistogram(target) ({ \
    glResetHistogram_PACKED *packed_data = malloc(sizeof(glResetHistogram_PACKED)); \
    packed_data->index = glResetHistogram_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    (packed_call_t *)packed_data; \
})
#define pack_glResetHistogramEXT(target) ({ \
    glResetHistogramEXT_PACKED *packed_data = malloc(sizeof(glResetHistogramEXT_PACKED)); \
    packed_data->index = glResetHistogramEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    (packed_call_t *)packed_data; \
})
#define pack_glResetMinmax(target) ({ \
    glResetMinmax_PACKED *packed_data = malloc(sizeof(glResetMinmax_PACKED)); \
    packed_data->index = glResetMinmax_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    (packed_call_t *)packed_data; \
})
#define pack_glResetMinmaxEXT(target) ({ \
    glResetMinmaxEXT_PACKED *packed_data = malloc(sizeof(glResetMinmaxEXT_PACKED)); \
    packed_data->index = glResetMinmaxEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    (packed_call_t *)packed_data; \
})
#define pack_glResizeBuffersMESA() ({ \
    glResizeBuffersMESA_PACKED *packed_data = malloc(sizeof(glResizeBuffersMESA_PACKED)); \
    packed_data->index = glResizeBuffersMESA_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glResumeTransformFeedback() ({ \
    glResumeTransformFeedback_PACKED *packed_data = malloc(sizeof(glResumeTransformFeedback_PACKED)); \
    packed_data->index = glResumeTransformFeedback_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glResumeTransformFeedbackNV() ({ \
    glResumeTransformFeedbackNV_PACKED *packed_data = malloc(sizeof(glResumeTransformFeedbackNV_PACKED)); \
    packed_data->index = glResumeTransformFeedbackNV_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glRotated(angle, x, y, z) ({ \
    glRotated_PACKED *packed_data = malloc(sizeof(glRotated_PACKED)); \
    packed_data->index = glRotated_INDEX; \
    packed_data->args.a1 = (GLdouble)angle; \
    packed_data->args.a2 = (GLdouble)x; \
    packed_data->args.a3 = (GLdouble)y; \
    packed_data->args.a4 = (GLdouble)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glRotatef(angle, x, y, z) ({ \
    glRotatef_PACKED *packed_data = malloc(sizeof(glRotatef_PACKED)); \
    packed_data->index = glRotatef_INDEX; \
    packed_data->args.a1 = (GLfloat)angle; \
    packed_data->args.a2 = (GLfloat)x; \
    packed_data->args.a3 = (GLfloat)y; \
    packed_data->args.a4 = (GLfloat)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glRotatex(angle, x, y, z) ({ \
    glRotatex_PACKED *packed_data = malloc(sizeof(glRotatex_PACKED)); \
    packed_data->index = glRotatex_INDEX; \
    packed_data->args.a1 = (GLfixed)angle; \
    packed_data->args.a2 = (GLfixed)x; \
    packed_data->args.a3 = (GLfixed)y; \
    packed_data->args.a4 = (GLfixed)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glRotatexOES(angle, x, y, z) ({ \
    glRotatexOES_PACKED *packed_data = malloc(sizeof(glRotatexOES_PACKED)); \
    packed_data->index = glRotatexOES_INDEX; \
    packed_data->args.a1 = (GLfixed)angle; \
    packed_data->args.a2 = (GLfixed)x; \
    packed_data->args.a3 = (GLfixed)y; \
    packed_data->args.a4 = (GLfixed)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glSampleCoverage(value, invert) ({ \
    glSampleCoverage_PACKED *packed_data = malloc(sizeof(glSampleCoverage_PACKED)); \
    packed_data->index = glSampleCoverage_INDEX; \
    packed_data->args.a1 = (GLclampf)value; \
    packed_data->args.a2 = (GLboolean)invert; \
    (packed_call_t *)packed_data; \
})
#define pack_glSampleCoverageARB(value, invert) ({ \
    glSampleCoverageARB_PACKED *packed_data = malloc(sizeof(glSampleCoverageARB_PACKED)); \
    packed_data->index = glSampleCoverageARB_INDEX; \
    packed_data->args.a1 = (GLfloat)value; \
    packed_data->args.a2 = (GLboolean)invert; \
    (packed_call_t *)packed_data; \
})
#define pack_glSampleCoverageOES(value, invert) ({ \
    glSampleCoverageOES_PACKED *packed_data = malloc(sizeof(glSampleCoverageOES_PACKED)); \
    packed_data->index = glSampleCoverageOES_INDEX; \
    packed_data->args.a1 = (GLfixed)value; \
    packed_data->args.a2 = (GLboolean)invert; \
    (packed_call_t *)packed_data; \
})
#define pack_glSampleCoveragex(value, invert) ({ \
    glSampleCoveragex_PACKED *packed_data = malloc(sizeof(glSampleCoveragex_PACKED)); \
    packed_data->index = glSampleCoveragex_INDEX; \
    packed_data->args.a1 = (GLclampx)value; \
    packed_data->args.a2 = (GLboolean)invert; \
    (packed_call_t *)packed_data; \
})
#define pack_glSampleMapATI(dst, interp, swizzle) ({ \
    glSampleMapATI_PACKED *packed_data = malloc(sizeof(glSampleMapATI_PACKED)); \
    packed_data->index = glSampleMapATI_INDEX; \
    packed_data->args.a1 = (GLuint)dst; \
    packed_data->args.a2 = (GLuint)interp; \
    packed_data->args.a3 = (GLenum)swizzle; \
    (packed_call_t *)packed_data; \
})
#define pack_glSampleMaskEXT(value, invert) ({ \
    glSampleMaskEXT_PACKED *packed_data = malloc(sizeof(glSampleMaskEXT_PACKED)); \
    packed_data->index = glSampleMaskEXT_INDEX; \
    packed_data->args.a1 = (GLclampf)value; \
    packed_data->args.a2 = (GLboolean)invert; \
    (packed_call_t *)packed_data; \
})
#define pack_glSampleMaskIndexedNV(index, mask) ({ \
    glSampleMaskIndexedNV_PACKED *packed_data = malloc(sizeof(glSampleMaskIndexedNV_PACKED)); \
    packed_data->index = glSampleMaskIndexedNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLbitfield)mask; \
    (packed_call_t *)packed_data; \
})
#define pack_glSampleMaskSGIS(value, invert) ({ \
    glSampleMaskSGIS_PACKED *packed_data = malloc(sizeof(glSampleMaskSGIS_PACKED)); \
    packed_data->index = glSampleMaskSGIS_INDEX; \
    packed_data->args.a1 = (GLclampf)value; \
    packed_data->args.a2 = (GLboolean)invert; \
    (packed_call_t *)packed_data; \
})
#define pack_glSampleMaski(index, mask) ({ \
    glSampleMaski_PACKED *packed_data = malloc(sizeof(glSampleMaski_PACKED)); \
    packed_data->index = glSampleMaski_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLbitfield)mask; \
    (packed_call_t *)packed_data; \
})
#define pack_glSamplePatternEXT(pattern) ({ \
    glSamplePatternEXT_PACKED *packed_data = malloc(sizeof(glSamplePatternEXT_PACKED)); \
    packed_data->index = glSamplePatternEXT_INDEX; \
    packed_data->args.a1 = (GLenum)pattern; \
    (packed_call_t *)packed_data; \
})
#define pack_glSamplePatternSGIS(pattern) ({ \
    glSamplePatternSGIS_PACKED *packed_data = malloc(sizeof(glSamplePatternSGIS_PACKED)); \
    packed_data->index = glSamplePatternSGIS_INDEX; \
    packed_data->args.a1 = (GLenum)pattern; \
    (packed_call_t *)packed_data; \
})
#define pack_glSamplerParameterIiv(sampler, pname, param) ({ \
    glSamplerParameterIiv_PACKED *packed_data = malloc(sizeof(glSamplerParameterIiv_PACKED)); \
    packed_data->index = glSamplerParameterIiv_INDEX; \
    packed_data->args.a1 = (GLuint)sampler; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glSamplerParameterIuiv(sampler, pname, param) ({ \
    glSamplerParameterIuiv_PACKED *packed_data = malloc(sizeof(glSamplerParameterIuiv_PACKED)); \
    packed_data->index = glSamplerParameterIuiv_INDEX; \
    packed_data->args.a1 = (GLuint)sampler; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLuint *)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glSamplerParameterf(sampler, pname, param) ({ \
    glSamplerParameterf_PACKED *packed_data = malloc(sizeof(glSamplerParameterf_PACKED)); \
    packed_data->index = glSamplerParameterf_INDEX; \
    packed_data->args.a1 = (GLuint)sampler; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glSamplerParameterfv(sampler, pname, param) ({ \
    glSamplerParameterfv_PACKED *packed_data = malloc(sizeof(glSamplerParameterfv_PACKED)); \
    packed_data->index = glSamplerParameterfv_INDEX; \
    packed_data->args.a1 = (GLuint)sampler; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat *)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glSamplerParameteri(sampler, pname, param) ({ \
    glSamplerParameteri_PACKED *packed_data = malloc(sizeof(glSamplerParameteri_PACKED)); \
    packed_data->index = glSamplerParameteri_INDEX; \
    packed_data->args.a1 = (GLuint)sampler; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glSamplerParameteriv(sampler, pname, param) ({ \
    glSamplerParameteriv_PACKED *packed_data = malloc(sizeof(glSamplerParameteriv_PACKED)); \
    packed_data->index = glSamplerParameteriv_INDEX; \
    packed_data->args.a1 = (GLuint)sampler; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glScaled(x, y, z) ({ \
    glScaled_PACKED *packed_data = malloc(sizeof(glScaled_PACKED)); \
    packed_data->index = glScaled_INDEX; \
    packed_data->args.a1 = (GLdouble)x; \
    packed_data->args.a2 = (GLdouble)y; \
    packed_data->args.a3 = (GLdouble)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glScalef(x, y, z) ({ \
    glScalef_PACKED *packed_data = malloc(sizeof(glScalef_PACKED)); \
    packed_data->index = glScalef_INDEX; \
    packed_data->args.a1 = (GLfloat)x; \
    packed_data->args.a2 = (GLfloat)y; \
    packed_data->args.a3 = (GLfloat)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glScalex(x, y, z) ({ \
    glScalex_PACKED *packed_data = malloc(sizeof(glScalex_PACKED)); \
    packed_data->index = glScalex_INDEX; \
    packed_data->args.a1 = (GLfixed)x; \
    packed_data->args.a2 = (GLfixed)y; \
    packed_data->args.a3 = (GLfixed)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glScalexOES(x, y, z) ({ \
    glScalexOES_PACKED *packed_data = malloc(sizeof(glScalexOES_PACKED)); \
    packed_data->index = glScalexOES_INDEX; \
    packed_data->args.a1 = (GLfixed)x; \
    packed_data->args.a2 = (GLfixed)y; \
    packed_data->args.a3 = (GLfixed)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glScissor(x, y, width, height) ({ \
    glScissor_PACKED *packed_data = malloc(sizeof(glScissor_PACKED)); \
    packed_data->index = glScissor_INDEX; \
    packed_data->args.a1 = (GLint)x; \
    packed_data->args.a2 = (GLint)y; \
    packed_data->args.a3 = (GLsizei)width; \
    packed_data->args.a4 = (GLsizei)height; \
    (packed_call_t *)packed_data; \
})
#define pack_glScissorArrayv(first, count, v) ({ \
    glScissorArrayv_PACKED *packed_data = malloc(sizeof(glScissorArrayv_PACKED)); \
    packed_data->index = glScissorArrayv_INDEX; \
    packed_data->args.a1 = (GLuint)first; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glScissorIndexed(index, left, bottom, width, height) ({ \
    glScissorIndexed_PACKED *packed_data = malloc(sizeof(glScissorIndexed_PACKED)); \
    packed_data->index = glScissorIndexed_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLint)left; \
    packed_data->args.a3 = (GLint)bottom; \
    packed_data->args.a4 = (GLsizei)width; \
    packed_data->args.a5 = (GLsizei)height; \
    (packed_call_t *)packed_data; \
})
#define pack_glScissorIndexedv(index, v) ({ \
    glScissorIndexedv_PACKED *packed_data = malloc(sizeof(glScissorIndexedv_PACKED)); \
    packed_data->index = glScissorIndexedv_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glSecondaryColor3b(red, green, blue) ({ \
    glSecondaryColor3b_PACKED *packed_data = malloc(sizeof(glSecondaryColor3b_PACKED)); \
    packed_data->index = glSecondaryColor3b_INDEX; \
    packed_data->args.a1 = (GLbyte)red; \
    packed_data->args.a2 = (GLbyte)green; \
    packed_data->args.a3 = (GLbyte)blue; \
    (packed_call_t *)packed_data; \
})
#define pack_glSecondaryColor3bEXT(red, green, blue) ({ \
    glSecondaryColor3bEXT_PACKED *packed_data = malloc(sizeof(glSecondaryColor3bEXT_PACKED)); \
    packed_data->index = glSecondaryColor3bEXT_INDEX; \
    packed_data->args.a1 = (GLbyte)red; \
    packed_data->args.a2 = (GLbyte)green; \
    packed_data->args.a3 = (GLbyte)blue; \
    (packed_call_t *)packed_data; \
})
#define pack_glSecondaryColor3bv(v) ({ \
    glSecondaryColor3bv_PACKED *packed_data = malloc(sizeof(glSecondaryColor3bv_PACKED)); \
    packed_data->index = glSecondaryColor3bv_INDEX; \
    packed_data->args.a1 = (GLbyte *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glSecondaryColor3bvEXT(v) ({ \
    glSecondaryColor3bvEXT_PACKED *packed_data = malloc(sizeof(glSecondaryColor3bvEXT_PACKED)); \
    packed_data->index = glSecondaryColor3bvEXT_INDEX; \
    packed_data->args.a1 = (GLbyte *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glSecondaryColor3d(red, green, blue) ({ \
    glSecondaryColor3d_PACKED *packed_data = malloc(sizeof(glSecondaryColor3d_PACKED)); \
    packed_data->index = glSecondaryColor3d_INDEX; \
    packed_data->args.a1 = (GLdouble)red; \
    packed_data->args.a2 = (GLdouble)green; \
    packed_data->args.a3 = (GLdouble)blue; \
    (packed_call_t *)packed_data; \
})
#define pack_glSecondaryColor3dEXT(red, green, blue) ({ \
    glSecondaryColor3dEXT_PACKED *packed_data = malloc(sizeof(glSecondaryColor3dEXT_PACKED)); \
    packed_data->index = glSecondaryColor3dEXT_INDEX; \
    packed_data->args.a1 = (GLdouble)red; \
    packed_data->args.a2 = (GLdouble)green; \
    packed_data->args.a3 = (GLdouble)blue; \
    (packed_call_t *)packed_data; \
})
#define pack_glSecondaryColor3dv(v) ({ \
    glSecondaryColor3dv_PACKED *packed_data = malloc(sizeof(glSecondaryColor3dv_PACKED)); \
    packed_data->index = glSecondaryColor3dv_INDEX; \
    packed_data->args.a1 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glSecondaryColor3dvEXT(v) ({ \
    glSecondaryColor3dvEXT_PACKED *packed_data = malloc(sizeof(glSecondaryColor3dvEXT_PACKED)); \
    packed_data->index = glSecondaryColor3dvEXT_INDEX; \
    packed_data->args.a1 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glSecondaryColor3f(red, green, blue) ({ \
    glSecondaryColor3f_PACKED *packed_data = malloc(sizeof(glSecondaryColor3f_PACKED)); \
    packed_data->index = glSecondaryColor3f_INDEX; \
    packed_data->args.a1 = (GLfloat)red; \
    packed_data->args.a2 = (GLfloat)green; \
    packed_data->args.a3 = (GLfloat)blue; \
    (packed_call_t *)packed_data; \
})
#define pack_glSecondaryColor3fEXT(red, green, blue) ({ \
    glSecondaryColor3fEXT_PACKED *packed_data = malloc(sizeof(glSecondaryColor3fEXT_PACKED)); \
    packed_data->index = glSecondaryColor3fEXT_INDEX; \
    packed_data->args.a1 = (GLfloat)red; \
    packed_data->args.a2 = (GLfloat)green; \
    packed_data->args.a3 = (GLfloat)blue; \
    (packed_call_t *)packed_data; \
})
#define pack_glSecondaryColor3fv(v) ({ \
    glSecondaryColor3fv_PACKED *packed_data = malloc(sizeof(glSecondaryColor3fv_PACKED)); \
    packed_data->index = glSecondaryColor3fv_INDEX; \
    packed_data->args.a1 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glSecondaryColor3fvEXT(v) ({ \
    glSecondaryColor3fvEXT_PACKED *packed_data = malloc(sizeof(glSecondaryColor3fvEXT_PACKED)); \
    packed_data->index = glSecondaryColor3fvEXT_INDEX; \
    packed_data->args.a1 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glSecondaryColor3hNV(red, green, blue) ({ \
    glSecondaryColor3hNV_PACKED *packed_data = malloc(sizeof(glSecondaryColor3hNV_PACKED)); \
    packed_data->index = glSecondaryColor3hNV_INDEX; \
    packed_data->args.a1 = (GLhalfNV)red; \
    packed_data->args.a2 = (GLhalfNV)green; \
    packed_data->args.a3 = (GLhalfNV)blue; \
    (packed_call_t *)packed_data; \
})
#define pack_glSecondaryColor3hvNV(v) ({ \
    glSecondaryColor3hvNV_PACKED *packed_data = malloc(sizeof(glSecondaryColor3hvNV_PACKED)); \
    packed_data->index = glSecondaryColor3hvNV_INDEX; \
    packed_data->args.a1 = (GLhalfNV *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glSecondaryColor3i(red, green, blue) ({ \
    glSecondaryColor3i_PACKED *packed_data = malloc(sizeof(glSecondaryColor3i_PACKED)); \
    packed_data->index = glSecondaryColor3i_INDEX; \
    packed_data->args.a1 = (GLint)red; \
    packed_data->args.a2 = (GLint)green; \
    packed_data->args.a3 = (GLint)blue; \
    (packed_call_t *)packed_data; \
})
#define pack_glSecondaryColor3iEXT(red, green, blue) ({ \
    glSecondaryColor3iEXT_PACKED *packed_data = malloc(sizeof(glSecondaryColor3iEXT_PACKED)); \
    packed_data->index = glSecondaryColor3iEXT_INDEX; \
    packed_data->args.a1 = (GLint)red; \
    packed_data->args.a2 = (GLint)green; \
    packed_data->args.a3 = (GLint)blue; \
    (packed_call_t *)packed_data; \
})
#define pack_glSecondaryColor3iv(v) ({ \
    glSecondaryColor3iv_PACKED *packed_data = malloc(sizeof(glSecondaryColor3iv_PACKED)); \
    packed_data->index = glSecondaryColor3iv_INDEX; \
    packed_data->args.a1 = (GLint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glSecondaryColor3ivEXT(v) ({ \
    glSecondaryColor3ivEXT_PACKED *packed_data = malloc(sizeof(glSecondaryColor3ivEXT_PACKED)); \
    packed_data->index = glSecondaryColor3ivEXT_INDEX; \
    packed_data->args.a1 = (GLint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glSecondaryColor3s(red, green, blue) ({ \
    glSecondaryColor3s_PACKED *packed_data = malloc(sizeof(glSecondaryColor3s_PACKED)); \
    packed_data->index = glSecondaryColor3s_INDEX; \
    packed_data->args.a1 = (GLshort)red; \
    packed_data->args.a2 = (GLshort)green; \
    packed_data->args.a3 = (GLshort)blue; \
    (packed_call_t *)packed_data; \
})
#define pack_glSecondaryColor3sEXT(red, green, blue) ({ \
    glSecondaryColor3sEXT_PACKED *packed_data = malloc(sizeof(glSecondaryColor3sEXT_PACKED)); \
    packed_data->index = glSecondaryColor3sEXT_INDEX; \
    packed_data->args.a1 = (GLshort)red; \
    packed_data->args.a2 = (GLshort)green; \
    packed_data->args.a3 = (GLshort)blue; \
    (packed_call_t *)packed_data; \
})
#define pack_glSecondaryColor3sv(v) ({ \
    glSecondaryColor3sv_PACKED *packed_data = malloc(sizeof(glSecondaryColor3sv_PACKED)); \
    packed_data->index = glSecondaryColor3sv_INDEX; \
    packed_data->args.a1 = (GLshort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glSecondaryColor3svEXT(v) ({ \
    glSecondaryColor3svEXT_PACKED *packed_data = malloc(sizeof(glSecondaryColor3svEXT_PACKED)); \
    packed_data->index = glSecondaryColor3svEXT_INDEX; \
    packed_data->args.a1 = (GLshort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glSecondaryColor3ub(red, green, blue) ({ \
    glSecondaryColor3ub_PACKED *packed_data = malloc(sizeof(glSecondaryColor3ub_PACKED)); \
    packed_data->index = glSecondaryColor3ub_INDEX; \
    packed_data->args.a1 = (GLubyte)red; \
    packed_data->args.a2 = (GLubyte)green; \
    packed_data->args.a3 = (GLubyte)blue; \
    (packed_call_t *)packed_data; \
})
#define pack_glSecondaryColor3ubEXT(red, green, blue) ({ \
    glSecondaryColor3ubEXT_PACKED *packed_data = malloc(sizeof(glSecondaryColor3ubEXT_PACKED)); \
    packed_data->index = glSecondaryColor3ubEXT_INDEX; \
    packed_data->args.a1 = (GLubyte)red; \
    packed_data->args.a2 = (GLubyte)green; \
    packed_data->args.a3 = (GLubyte)blue; \
    (packed_call_t *)packed_data; \
})
#define pack_glSecondaryColor3ubv(v) ({ \
    glSecondaryColor3ubv_PACKED *packed_data = malloc(sizeof(glSecondaryColor3ubv_PACKED)); \
    packed_data->index = glSecondaryColor3ubv_INDEX; \
    packed_data->args.a1 = (GLubyte *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glSecondaryColor3ubvEXT(v) ({ \
    glSecondaryColor3ubvEXT_PACKED *packed_data = malloc(sizeof(glSecondaryColor3ubvEXT_PACKED)); \
    packed_data->index = glSecondaryColor3ubvEXT_INDEX; \
    packed_data->args.a1 = (GLubyte *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glSecondaryColor3ui(red, green, blue) ({ \
    glSecondaryColor3ui_PACKED *packed_data = malloc(sizeof(glSecondaryColor3ui_PACKED)); \
    packed_data->index = glSecondaryColor3ui_INDEX; \
    packed_data->args.a1 = (GLuint)red; \
    packed_data->args.a2 = (GLuint)green; \
    packed_data->args.a3 = (GLuint)blue; \
    (packed_call_t *)packed_data; \
})
#define pack_glSecondaryColor3uiEXT(red, green, blue) ({ \
    glSecondaryColor3uiEXT_PACKED *packed_data = malloc(sizeof(glSecondaryColor3uiEXT_PACKED)); \
    packed_data->index = glSecondaryColor3uiEXT_INDEX; \
    packed_data->args.a1 = (GLuint)red; \
    packed_data->args.a2 = (GLuint)green; \
    packed_data->args.a3 = (GLuint)blue; \
    (packed_call_t *)packed_data; \
})
#define pack_glSecondaryColor3uiv(v) ({ \
    glSecondaryColor3uiv_PACKED *packed_data = malloc(sizeof(glSecondaryColor3uiv_PACKED)); \
    packed_data->index = glSecondaryColor3uiv_INDEX; \
    packed_data->args.a1 = (GLuint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glSecondaryColor3uivEXT(v) ({ \
    glSecondaryColor3uivEXT_PACKED *packed_data = malloc(sizeof(glSecondaryColor3uivEXT_PACKED)); \
    packed_data->index = glSecondaryColor3uivEXT_INDEX; \
    packed_data->args.a1 = (GLuint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glSecondaryColor3us(red, green, blue) ({ \
    glSecondaryColor3us_PACKED *packed_data = malloc(sizeof(glSecondaryColor3us_PACKED)); \
    packed_data->index = glSecondaryColor3us_INDEX; \
    packed_data->args.a1 = (GLushort)red; \
    packed_data->args.a2 = (GLushort)green; \
    packed_data->args.a3 = (GLushort)blue; \
    (packed_call_t *)packed_data; \
})
#define pack_glSecondaryColor3usEXT(red, green, blue) ({ \
    glSecondaryColor3usEXT_PACKED *packed_data = malloc(sizeof(glSecondaryColor3usEXT_PACKED)); \
    packed_data->index = glSecondaryColor3usEXT_INDEX; \
    packed_data->args.a1 = (GLushort)red; \
    packed_data->args.a2 = (GLushort)green; \
    packed_data->args.a3 = (GLushort)blue; \
    (packed_call_t *)packed_data; \
})
#define pack_glSecondaryColor3usv(v) ({ \
    glSecondaryColor3usv_PACKED *packed_data = malloc(sizeof(glSecondaryColor3usv_PACKED)); \
    packed_data->index = glSecondaryColor3usv_INDEX; \
    packed_data->args.a1 = (GLushort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glSecondaryColor3usvEXT(v) ({ \
    glSecondaryColor3usvEXT_PACKED *packed_data = malloc(sizeof(glSecondaryColor3usvEXT_PACKED)); \
    packed_data->index = glSecondaryColor3usvEXT_INDEX; \
    packed_data->args.a1 = (GLushort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glSecondaryColorFormatNV(size, type, stride) ({ \
    glSecondaryColorFormatNV_PACKED *packed_data = malloc(sizeof(glSecondaryColorFormatNV_PACKED)); \
    packed_data->index = glSecondaryColorFormatNV_INDEX; \
    packed_data->args.a1 = (GLint)size; \
    packed_data->args.a2 = (GLenum)type; \
    packed_data->args.a3 = (GLsizei)stride; \
    (packed_call_t *)packed_data; \
})
#define pack_glSecondaryColorP3ui(type, color) ({ \
    glSecondaryColorP3ui_PACKED *packed_data = malloc(sizeof(glSecondaryColorP3ui_PACKED)); \
    packed_data->index = glSecondaryColorP3ui_INDEX; \
    packed_data->args.a1 = (GLenum)type; \
    packed_data->args.a2 = (GLuint)color; \
    (packed_call_t *)packed_data; \
})
#define pack_glSecondaryColorP3uiv(type, color) ({ \
    glSecondaryColorP3uiv_PACKED *packed_data = malloc(sizeof(glSecondaryColorP3uiv_PACKED)); \
    packed_data->index = glSecondaryColorP3uiv_INDEX; \
    packed_data->args.a1 = (GLenum)type; \
    packed_data->args.a2 = (GLuint *)color; \
    (packed_call_t *)packed_data; \
})
#define pack_glSecondaryColorPointer(size, type, stride, pointer) ({ \
    glSecondaryColorPointer_PACKED *packed_data = malloc(sizeof(glSecondaryColorPointer_PACKED)); \
    packed_data->index = glSecondaryColorPointer_INDEX; \
    packed_data->args.a1 = (GLint)size; \
    packed_data->args.a2 = (GLenum)type; \
    packed_data->args.a3 = (GLsizei)stride; \
    packed_data->args.a4 = (GLvoid *)pointer; \
    (packed_call_t *)packed_data; \
})
#define pack_glSecondaryColorPointerEXT(size, type, stride, pointer) ({ \
    glSecondaryColorPointerEXT_PACKED *packed_data = malloc(sizeof(glSecondaryColorPointerEXT_PACKED)); \
    packed_data->index = glSecondaryColorPointerEXT_INDEX; \
    packed_data->args.a1 = (GLint)size; \
    packed_data->args.a2 = (GLenum)type; \
    packed_data->args.a3 = (GLsizei)stride; \
    packed_data->args.a4 = (GLvoid *)pointer; \
    (packed_call_t *)packed_data; \
})
#define pack_glSecondaryColorPointerListIBM(size, type, stride, pointer, ptrstride) ({ \
    glSecondaryColorPointerListIBM_PACKED *packed_data = malloc(sizeof(glSecondaryColorPointerListIBM_PACKED)); \
    packed_data->index = glSecondaryColorPointerListIBM_INDEX; \
    packed_data->args.a1 = (GLint)size; \
    packed_data->args.a2 = (GLenum)type; \
    packed_data->args.a3 = (GLint)stride; \
    packed_data->args.a4 = (GLvoid *)pointer; \
    packed_data->args.a5 = (GLint)ptrstride; \
    (packed_call_t *)packed_data; \
})
#define pack_glSelectBuffer(size, buffer) ({ \
    glSelectBuffer_PACKED *packed_data = malloc(sizeof(glSelectBuffer_PACKED)); \
    packed_data->index = glSelectBuffer_INDEX; \
    packed_data->args.a1 = (GLsizei)size; \
    packed_data->args.a2 = (GLuint *)buffer; \
    (packed_call_t *)packed_data; \
})
#define pack_glSelectPerfMonitorCountersAMD(monitor, enable, group, numCounters, counterList) ({ \
    glSelectPerfMonitorCountersAMD_PACKED *packed_data = malloc(sizeof(glSelectPerfMonitorCountersAMD_PACKED)); \
    packed_data->index = glSelectPerfMonitorCountersAMD_INDEX; \
    packed_data->args.a1 = (GLuint)monitor; \
    packed_data->args.a2 = (GLboolean)enable; \
    packed_data->args.a3 = (GLuint)group; \
    packed_data->args.a4 = (GLint)numCounters; \
    packed_data->args.a5 = (GLuint *)counterList; \
    (packed_call_t *)packed_data; \
})
#define pack_glSeparableFilter2D(target, internalformat, width, height, format, type, row, column) ({ \
    glSeparableFilter2D_PACKED *packed_data = malloc(sizeof(glSeparableFilter2D_PACKED)); \
    packed_data->index = glSeparableFilter2D_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)internalformat; \
    packed_data->args.a3 = (GLsizei)width; \
    packed_data->args.a4 = (GLsizei)height; \
    packed_data->args.a5 = (GLenum)format; \
    packed_data->args.a6 = (GLenum)type; \
    packed_data->args.a7 = (GLvoid *)row; \
    packed_data->args.a8 = (GLvoid *)column; \
    (packed_call_t *)packed_data; \
})
#define pack_glSeparableFilter2DEXT(target, internalformat, width, height, format, type, row, column) ({ \
    glSeparableFilter2DEXT_PACKED *packed_data = malloc(sizeof(glSeparableFilter2DEXT_PACKED)); \
    packed_data->index = glSeparableFilter2DEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)internalformat; \
    packed_data->args.a3 = (GLsizei)width; \
    packed_data->args.a4 = (GLsizei)height; \
    packed_data->args.a5 = (GLenum)format; \
    packed_data->args.a6 = (GLenum)type; \
    packed_data->args.a7 = (GLvoid *)row; \
    packed_data->args.a8 = (GLvoid *)column; \
    (packed_call_t *)packed_data; \
})
#define pack_glSetFenceAPPLE(fence) ({ \
    glSetFenceAPPLE_PACKED *packed_data = malloc(sizeof(glSetFenceAPPLE_PACKED)); \
    packed_data->index = glSetFenceAPPLE_INDEX; \
    packed_data->args.a1 = (GLuint)fence; \
    (packed_call_t *)packed_data; \
})
#define pack_glSetFenceNV(fence, condition) ({ \
    glSetFenceNV_PACKED *packed_data = malloc(sizeof(glSetFenceNV_PACKED)); \
    packed_data->index = glSetFenceNV_INDEX; \
    packed_data->args.a1 = (GLuint)fence; \
    packed_data->args.a2 = (GLenum)condition; \
    (packed_call_t *)packed_data; \
})
#define pack_glSetFragmentShaderConstantATI(dst, value) ({ \
    glSetFragmentShaderConstantATI_PACKED *packed_data = malloc(sizeof(glSetFragmentShaderConstantATI_PACKED)); \
    packed_data->index = glSetFragmentShaderConstantATI_INDEX; \
    packed_data->args.a1 = (GLuint)dst; \
    packed_data->args.a2 = (GLfloat *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glSetInvariantEXT(id, type, addr) ({ \
    glSetInvariantEXT_PACKED *packed_data = malloc(sizeof(glSetInvariantEXT_PACKED)); \
    packed_data->index = glSetInvariantEXT_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    packed_data->args.a2 = (GLenum)type; \
    packed_data->args.a3 = (GLvoid *)addr; \
    (packed_call_t *)packed_data; \
})
#define pack_glSetLocalConstantEXT(id, type, addr) ({ \
    glSetLocalConstantEXT_PACKED *packed_data = malloc(sizeof(glSetLocalConstantEXT_PACKED)); \
    packed_data->index = glSetLocalConstantEXT_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    packed_data->args.a2 = (GLenum)type; \
    packed_data->args.a3 = (GLvoid *)addr; \
    (packed_call_t *)packed_data; \
})
#define pack_glSetMultisamplefvAMD(pname, index, val) ({ \
    glSetMultisamplefvAMD_PACKED *packed_data = malloc(sizeof(glSetMultisamplefvAMD_PACKED)); \
    packed_data->index = glSetMultisamplefvAMD_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLuint)index; \
    packed_data->args.a3 = (GLfloat *)val; \
    (packed_call_t *)packed_data; \
})
#define pack_glShadeModel(mode) ({ \
    glShadeModel_PACKED *packed_data = malloc(sizeof(glShadeModel_PACKED)); \
    packed_data->index = glShadeModel_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    (packed_call_t *)packed_data; \
})
#define pack_glShaderBinary(count, shaders, binaryformat, binary, length) ({ \
    glShaderBinary_PACKED *packed_data = malloc(sizeof(glShaderBinary_PACKED)); \
    packed_data->index = glShaderBinary_INDEX; \
    packed_data->args.a1 = (GLsizei)count; \
    packed_data->args.a2 = (GLuint *)shaders; \
    packed_data->args.a3 = (GLenum)binaryformat; \
    packed_data->args.a4 = (GLvoid *)binary; \
    packed_data->args.a5 = (GLsizei)length; \
    (packed_call_t *)packed_data; \
})
#define pack_glShaderOp1EXT(op, res, arg1) ({ \
    glShaderOp1EXT_PACKED *packed_data = malloc(sizeof(glShaderOp1EXT_PACKED)); \
    packed_data->index = glShaderOp1EXT_INDEX; \
    packed_data->args.a1 = (GLenum)op; \
    packed_data->args.a2 = (GLuint)res; \
    packed_data->args.a3 = (GLuint)arg1; \
    (packed_call_t *)packed_data; \
})
#define pack_glShaderOp2EXT(op, res, arg1, arg2) ({ \
    glShaderOp2EXT_PACKED *packed_data = malloc(sizeof(glShaderOp2EXT_PACKED)); \
    packed_data->index = glShaderOp2EXT_INDEX; \
    packed_data->args.a1 = (GLenum)op; \
    packed_data->args.a2 = (GLuint)res; \
    packed_data->args.a3 = (GLuint)arg1; \
    packed_data->args.a4 = (GLuint)arg2; \
    (packed_call_t *)packed_data; \
})
#define pack_glShaderOp3EXT(op, res, arg1, arg2, arg3) ({ \
    glShaderOp3EXT_PACKED *packed_data = malloc(sizeof(glShaderOp3EXT_PACKED)); \
    packed_data->index = glShaderOp3EXT_INDEX; \
    packed_data->args.a1 = (GLenum)op; \
    packed_data->args.a2 = (GLuint)res; \
    packed_data->args.a3 = (GLuint)arg1; \
    packed_data->args.a4 = (GLuint)arg2; \
    packed_data->args.a5 = (GLuint)arg3; \
    (packed_call_t *)packed_data; \
})
#define pack_glShaderSource(shader, count, string, length) ({ \
    glShaderSource_PACKED *packed_data = malloc(sizeof(glShaderSource_PACKED)); \
    packed_data->index = glShaderSource_INDEX; \
    packed_data->args.a1 = (GLuint)shader; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLchar*const *)string; \
    packed_data->args.a4 = (GLint *)length; \
    (packed_call_t *)packed_data; \
})
#define pack_glShaderSourceARB(shaderObj, count, string, length) ({ \
    glShaderSourceARB_PACKED *packed_data = malloc(sizeof(glShaderSourceARB_PACKED)); \
    packed_data->index = glShaderSourceARB_INDEX; \
    packed_data->args.a1 = (GLhandleARB)shaderObj; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLcharARB *)string; \
    packed_data->args.a4 = (GLint *)length; \
    (packed_call_t *)packed_data; \
})
#define pack_glShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding) ({ \
    glShaderStorageBlockBinding_PACKED *packed_data = malloc(sizeof(glShaderStorageBlockBinding_PACKED)); \
    packed_data->index = glShaderStorageBlockBinding_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLuint)storageBlockIndex; \
    packed_data->args.a3 = (GLuint)storageBlockBinding; \
    (packed_call_t *)packed_data; \
})
#define pack_glSharpenTexFuncSGIS(target, n, points) ({ \
    glSharpenTexFuncSGIS_PACKED *packed_data = malloc(sizeof(glSharpenTexFuncSGIS_PACKED)); \
    packed_data->index = glSharpenTexFuncSGIS_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLsizei)n; \
    packed_data->args.a3 = (GLfloat *)points; \
    (packed_call_t *)packed_data; \
})
#define pack_glSpriteParameterfSGIX(pname, param) ({ \
    glSpriteParameterfSGIX_PACKED *packed_data = malloc(sizeof(glSpriteParameterfSGIX_PACKED)); \
    packed_data->index = glSpriteParameterfSGIX_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLfloat)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glSpriteParameterfvSGIX(pname, params) ({ \
    glSpriteParameterfvSGIX_PACKED *packed_data = malloc(sizeof(glSpriteParameterfvSGIX_PACKED)); \
    packed_data->index = glSpriteParameterfvSGIX_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glSpriteParameteriSGIX(pname, param) ({ \
    glSpriteParameteriSGIX_PACKED *packed_data = malloc(sizeof(glSpriteParameteriSGIX_PACKED)); \
    packed_data->index = glSpriteParameteriSGIX_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLint)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glSpriteParameterivSGIX(pname, params) ({ \
    glSpriteParameterivSGIX_PACKED *packed_data = malloc(sizeof(glSpriteParameterivSGIX_PACKED)); \
    packed_data->index = glSpriteParameterivSGIX_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glStartInstrumentsSGIX() ({ \
    glStartInstrumentsSGIX_PACKED *packed_data = malloc(sizeof(glStartInstrumentsSGIX_PACKED)); \
    packed_data->index = glStartInstrumentsSGIX_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glStencilClearTagEXT(stencilTagBits, stencilClearTag) ({ \
    glStencilClearTagEXT_PACKED *packed_data = malloc(sizeof(glStencilClearTagEXT_PACKED)); \
    packed_data->index = glStencilClearTagEXT_INDEX; \
    packed_data->args.a1 = (GLsizei)stencilTagBits; \
    packed_data->args.a2 = (GLuint)stencilClearTag; \
    (packed_call_t *)packed_data; \
})
#define pack_glStencilFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues) ({ \
    glStencilFillPathInstancedNV_PACKED *packed_data = malloc(sizeof(glStencilFillPathInstancedNV_PACKED)); \
    packed_data->index = glStencilFillPathInstancedNV_INDEX; \
    packed_data->args.a1 = (GLsizei)numPaths; \
    packed_data->args.a2 = (GLenum)pathNameType; \
    packed_data->args.a3 = (GLvoid *)paths; \
    packed_data->args.a4 = (GLuint)pathBase; \
    packed_data->args.a5 = (GLenum)fillMode; \
    packed_data->args.a6 = (GLuint)mask; \
    packed_data->args.a7 = (GLenum)transformType; \
    packed_data->args.a8 = (GLfloat *)transformValues; \
    (packed_call_t *)packed_data; \
})
#define pack_glStencilFillPathNV(path, fillMode, mask) ({ \
    glStencilFillPathNV_PACKED *packed_data = malloc(sizeof(glStencilFillPathNV_PACKED)); \
    packed_data->index = glStencilFillPathNV_INDEX; \
    packed_data->args.a1 = (GLuint)path; \
    packed_data->args.a2 = (GLenum)fillMode; \
    packed_data->args.a3 = (GLuint)mask; \
    (packed_call_t *)packed_data; \
})
#define pack_glStencilFunc(func, ref, mask) ({ \
    glStencilFunc_PACKED *packed_data = malloc(sizeof(glStencilFunc_PACKED)); \
    packed_data->index = glStencilFunc_INDEX; \
    packed_data->args.a1 = (GLenum)func; \
    packed_data->args.a2 = (GLint)ref; \
    packed_data->args.a3 = (GLuint)mask; \
    (packed_call_t *)packed_data; \
})
#define pack_glStencilFuncSeparate(face, func, ref, mask) ({ \
    glStencilFuncSeparate_PACKED *packed_data = malloc(sizeof(glStencilFuncSeparate_PACKED)); \
    packed_data->index = glStencilFuncSeparate_INDEX; \
    packed_data->args.a1 = (GLenum)face; \
    packed_data->args.a2 = (GLenum)func; \
    packed_data->args.a3 = (GLint)ref; \
    packed_data->args.a4 = (GLuint)mask; \
    (packed_call_t *)packed_data; \
})
#define pack_glStencilFuncSeparateATI(frontfunc, backfunc, ref, mask) ({ \
    glStencilFuncSeparateATI_PACKED *packed_data = malloc(sizeof(glStencilFuncSeparateATI_PACKED)); \
    packed_data->index = glStencilFuncSeparateATI_INDEX; \
    packed_data->args.a1 = (GLenum)frontfunc; \
    packed_data->args.a2 = (GLenum)backfunc; \
    packed_data->args.a3 = (GLint)ref; \
    packed_data->args.a4 = (GLuint)mask; \
    (packed_call_t *)packed_data; \
})
#define pack_glStencilMask(mask) ({ \
    glStencilMask_PACKED *packed_data = malloc(sizeof(glStencilMask_PACKED)); \
    packed_data->index = glStencilMask_INDEX; \
    packed_data->args.a1 = (GLuint)mask; \
    (packed_call_t *)packed_data; \
})
#define pack_glStencilMaskSeparate(face, mask) ({ \
    glStencilMaskSeparate_PACKED *packed_data = malloc(sizeof(glStencilMaskSeparate_PACKED)); \
    packed_data->index = glStencilMaskSeparate_INDEX; \
    packed_data->args.a1 = (GLenum)face; \
    packed_data->args.a2 = (GLuint)mask; \
    (packed_call_t *)packed_data; \
})
#define pack_glStencilOp(fail, zfail, zpass) ({ \
    glStencilOp_PACKED *packed_data = malloc(sizeof(glStencilOp_PACKED)); \
    packed_data->index = glStencilOp_INDEX; \
    packed_data->args.a1 = (GLenum)fail; \
    packed_data->args.a2 = (GLenum)zfail; \
    packed_data->args.a3 = (GLenum)zpass; \
    (packed_call_t *)packed_data; \
})
#define pack_glStencilOpSeparate(face, sfail, dpfail, dppass) ({ \
    glStencilOpSeparate_PACKED *packed_data = malloc(sizeof(glStencilOpSeparate_PACKED)); \
    packed_data->index = glStencilOpSeparate_INDEX; \
    packed_data->args.a1 = (GLenum)face; \
    packed_data->args.a2 = (GLenum)sfail; \
    packed_data->args.a3 = (GLenum)dpfail; \
    packed_data->args.a4 = (GLenum)dppass; \
    (packed_call_t *)packed_data; \
})
#define pack_glStencilOpSeparateATI(face, sfail, dpfail, dppass) ({ \
    glStencilOpSeparateATI_PACKED *packed_data = malloc(sizeof(glStencilOpSeparateATI_PACKED)); \
    packed_data->index = glStencilOpSeparateATI_INDEX; \
    packed_data->args.a1 = (GLenum)face; \
    packed_data->args.a2 = (GLenum)sfail; \
    packed_data->args.a3 = (GLenum)dpfail; \
    packed_data->args.a4 = (GLenum)dppass; \
    (packed_call_t *)packed_data; \
})
#define pack_glStencilOpValueAMD(face, value) ({ \
    glStencilOpValueAMD_PACKED *packed_data = malloc(sizeof(glStencilOpValueAMD_PACKED)); \
    packed_data->index = glStencilOpValueAMD_INDEX; \
    packed_data->args.a1 = (GLenum)face; \
    packed_data->args.a2 = (GLuint)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glStencilStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues) ({ \
    glStencilStrokePathInstancedNV_PACKED *packed_data = malloc(sizeof(glStencilStrokePathInstancedNV_PACKED)); \
    packed_data->index = glStencilStrokePathInstancedNV_INDEX; \
    packed_data->args.a1 = (GLsizei)numPaths; \
    packed_data->args.a2 = (GLenum)pathNameType; \
    packed_data->args.a3 = (GLvoid *)paths; \
    packed_data->args.a4 = (GLuint)pathBase; \
    packed_data->args.a5 = (GLint)reference; \
    packed_data->args.a6 = (GLuint)mask; \
    packed_data->args.a7 = (GLenum)transformType; \
    packed_data->args.a8 = (GLfloat *)transformValues; \
    (packed_call_t *)packed_data; \
})
#define pack_glStencilStrokePathNV(path, reference, mask) ({ \
    glStencilStrokePathNV_PACKED *packed_data = malloc(sizeof(glStencilStrokePathNV_PACKED)); \
    packed_data->index = glStencilStrokePathNV_INDEX; \
    packed_data->args.a1 = (GLuint)path; \
    packed_data->args.a2 = (GLint)reference; \
    packed_data->args.a3 = (GLuint)mask; \
    (packed_call_t *)packed_data; \
})
#define pack_glStopInstrumentsSGIX(marker) ({ \
    glStopInstrumentsSGIX_PACKED *packed_data = malloc(sizeof(glStopInstrumentsSGIX_PACKED)); \
    packed_data->index = glStopInstrumentsSGIX_INDEX; \
    packed_data->args.a1 = (GLint)marker; \
    (packed_call_t *)packed_data; \
})
#define pack_glStringMarkerGREMEDY(len, string) ({ \
    glStringMarkerGREMEDY_PACKED *packed_data = malloc(sizeof(glStringMarkerGREMEDY_PACKED)); \
    packed_data->index = glStringMarkerGREMEDY_INDEX; \
    packed_data->args.a1 = (GLsizei)len; \
    packed_data->args.a2 = (GLvoid *)string; \
    (packed_call_t *)packed_data; \
})
#define pack_glSwizzleEXT(res, in, outX, outY, outZ, outW) ({ \
    glSwizzleEXT_PACKED *packed_data = malloc(sizeof(glSwizzleEXT_PACKED)); \
    packed_data->index = glSwizzleEXT_INDEX; \
    packed_data->args.a1 = (GLuint)res; \
    packed_data->args.a2 = (GLuint)in; \
    packed_data->args.a3 = (GLenum)outX; \
    packed_data->args.a4 = (GLenum)outY; \
    packed_data->args.a5 = (GLenum)outZ; \
    packed_data->args.a6 = (GLenum)outW; \
    (packed_call_t *)packed_data; \
})
#define pack_glSyncTextureINTEL(texture) ({ \
    glSyncTextureINTEL_PACKED *packed_data = malloc(sizeof(glSyncTextureINTEL_PACKED)); \
    packed_data->index = glSyncTextureINTEL_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    (packed_call_t *)packed_data; \
})
#define pack_glTagSampleBufferSGIX() ({ \
    glTagSampleBufferSGIX_PACKED *packed_data = malloc(sizeof(glTagSampleBufferSGIX_PACKED)); \
    packed_data->index = glTagSampleBufferSGIX_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glTangent3bEXT(tx, ty, tz) ({ \
    glTangent3bEXT_PACKED *packed_data = malloc(sizeof(glTangent3bEXT_PACKED)); \
    packed_data->index = glTangent3bEXT_INDEX; \
    packed_data->args.a1 = (GLbyte)tx; \
    packed_data->args.a2 = (GLbyte)ty; \
    packed_data->args.a3 = (GLbyte)tz; \
    (packed_call_t *)packed_data; \
})
#define pack_glTangent3bvEXT(v) ({ \
    glTangent3bvEXT_PACKED *packed_data = malloc(sizeof(glTangent3bvEXT_PACKED)); \
    packed_data->index = glTangent3bvEXT_INDEX; \
    packed_data->args.a1 = (GLbyte *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glTangent3dEXT(tx, ty, tz) ({ \
    glTangent3dEXT_PACKED *packed_data = malloc(sizeof(glTangent3dEXT_PACKED)); \
    packed_data->index = glTangent3dEXT_INDEX; \
    packed_data->args.a1 = (GLdouble)tx; \
    packed_data->args.a2 = (GLdouble)ty; \
    packed_data->args.a3 = (GLdouble)tz; \
    (packed_call_t *)packed_data; \
})
#define pack_glTangent3dvEXT(v) ({ \
    glTangent3dvEXT_PACKED *packed_data = malloc(sizeof(glTangent3dvEXT_PACKED)); \
    packed_data->index = glTangent3dvEXT_INDEX; \
    packed_data->args.a1 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glTangent3fEXT(tx, ty, tz) ({ \
    glTangent3fEXT_PACKED *packed_data = malloc(sizeof(glTangent3fEXT_PACKED)); \
    packed_data->index = glTangent3fEXT_INDEX; \
    packed_data->args.a1 = (GLfloat)tx; \
    packed_data->args.a2 = (GLfloat)ty; \
    packed_data->args.a3 = (GLfloat)tz; \
    (packed_call_t *)packed_data; \
})
#define pack_glTangent3fvEXT(v) ({ \
    glTangent3fvEXT_PACKED *packed_data = malloc(sizeof(glTangent3fvEXT_PACKED)); \
    packed_data->index = glTangent3fvEXT_INDEX; \
    packed_data->args.a1 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glTangent3iEXT(tx, ty, tz) ({ \
    glTangent3iEXT_PACKED *packed_data = malloc(sizeof(glTangent3iEXT_PACKED)); \
    packed_data->index = glTangent3iEXT_INDEX; \
    packed_data->args.a1 = (GLint)tx; \
    packed_data->args.a2 = (GLint)ty; \
    packed_data->args.a3 = (GLint)tz; \
    (packed_call_t *)packed_data; \
})
#define pack_glTangent3ivEXT(v) ({ \
    glTangent3ivEXT_PACKED *packed_data = malloc(sizeof(glTangent3ivEXT_PACKED)); \
    packed_data->index = glTangent3ivEXT_INDEX; \
    packed_data->args.a1 = (GLint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glTangent3sEXT(tx, ty, tz) ({ \
    glTangent3sEXT_PACKED *packed_data = malloc(sizeof(glTangent3sEXT_PACKED)); \
    packed_data->index = glTangent3sEXT_INDEX; \
    packed_data->args.a1 = (GLshort)tx; \
    packed_data->args.a2 = (GLshort)ty; \
    packed_data->args.a3 = (GLshort)tz; \
    (packed_call_t *)packed_data; \
})
#define pack_glTangent3svEXT(v) ({ \
    glTangent3svEXT_PACKED *packed_data = malloc(sizeof(glTangent3svEXT_PACKED)); \
    packed_data->index = glTangent3svEXT_INDEX; \
    packed_data->args.a1 = (GLshort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glTangentPointerEXT(type, stride, pointer) ({ \
    glTangentPointerEXT_PACKED *packed_data = malloc(sizeof(glTangentPointerEXT_PACKED)); \
    packed_data->index = glTangentPointerEXT_INDEX; \
    packed_data->args.a1 = (GLenum)type; \
    packed_data->args.a2 = (GLsizei)stride; \
    packed_data->args.a3 = (GLvoid *)pointer; \
    (packed_call_t *)packed_data; \
})
#define pack_glTbufferMask3DFX(mask) ({ \
    glTbufferMask3DFX_PACKED *packed_data = malloc(sizeof(glTbufferMask3DFX_PACKED)); \
    packed_data->index = glTbufferMask3DFX_INDEX; \
    packed_data->args.a1 = (GLuint)mask; \
    (packed_call_t *)packed_data; \
})
#define pack_glTessellationFactorAMD(factor) ({ \
    glTessellationFactorAMD_PACKED *packed_data = malloc(sizeof(glTessellationFactorAMD_PACKED)); \
    packed_data->index = glTessellationFactorAMD_INDEX; \
    packed_data->args.a1 = (GLfloat)factor; \
    (packed_call_t *)packed_data; \
})
#define pack_glTessellationModeAMD(mode) ({ \
    glTessellationModeAMD_PACKED *packed_data = malloc(sizeof(glTessellationModeAMD_PACKED)); \
    packed_data->index = glTessellationModeAMD_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    (packed_call_t *)packed_data; \
})
#define pack_glTestFenceAPPLE(fence) ({ \
    glTestFenceAPPLE_PACKED *packed_data = malloc(sizeof(glTestFenceAPPLE_PACKED)); \
    packed_data->index = glTestFenceAPPLE_INDEX; \
    packed_data->args.a1 = (GLuint)fence; \
    (packed_call_t *)packed_data; \
})
#define pack_glTestFenceNV(fence) ({ \
    glTestFenceNV_PACKED *packed_data = malloc(sizeof(glTestFenceNV_PACKED)); \
    packed_data->index = glTestFenceNV_INDEX; \
    packed_data->args.a1 = (GLuint)fence; \
    (packed_call_t *)packed_data; \
})
#define pack_glTestObjectAPPLE(object, name) ({ \
    glTestObjectAPPLE_PACKED *packed_data = malloc(sizeof(glTestObjectAPPLE_PACKED)); \
    packed_data->index = glTestObjectAPPLE_INDEX; \
    packed_data->args.a1 = (GLenum)object; \
    packed_data->args.a2 = (GLuint)name; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexBuffer(target, internalformat, buffer) ({ \
    glTexBuffer_PACKED *packed_data = malloc(sizeof(glTexBuffer_PACKED)); \
    packed_data->index = glTexBuffer_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)internalformat; \
    packed_data->args.a3 = (GLuint)buffer; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexBufferARB(target, internalformat, buffer) ({ \
    glTexBufferARB_PACKED *packed_data = malloc(sizeof(glTexBufferARB_PACKED)); \
    packed_data->index = glTexBufferARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)internalformat; \
    packed_data->args.a3 = (GLuint)buffer; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexBufferEXT(target, internalformat, buffer) ({ \
    glTexBufferEXT_PACKED *packed_data = malloc(sizeof(glTexBufferEXT_PACKED)); \
    packed_data->index = glTexBufferEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)internalformat; \
    packed_data->args.a3 = (GLuint)buffer; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexBufferRange(target, internalformat, buffer, offset, size) ({ \
    glTexBufferRange_PACKED *packed_data = malloc(sizeof(glTexBufferRange_PACKED)); \
    packed_data->index = glTexBufferRange_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)internalformat; \
    packed_data->args.a3 = (GLuint)buffer; \
    packed_data->args.a4 = (GLintptr)offset; \
    packed_data->args.a5 = (GLsizeiptr)size; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexBumpParameterfvATI(pname, param) ({ \
    glTexBumpParameterfvATI_PACKED *packed_data = malloc(sizeof(glTexBumpParameterfvATI_PACKED)); \
    packed_data->index = glTexBumpParameterfvATI_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLfloat *)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexBumpParameterivATI(pname, param) ({ \
    glTexBumpParameterivATI_PACKED *packed_data = malloc(sizeof(glTexBumpParameterivATI_PACKED)); \
    packed_data->index = glTexBumpParameterivATI_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLint *)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord1bOES(s) ({ \
    glTexCoord1bOES_PACKED *packed_data = malloc(sizeof(glTexCoord1bOES_PACKED)); \
    packed_data->index = glTexCoord1bOES_INDEX; \
    packed_data->args.a1 = (GLbyte)s; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord1bvOES(coords) ({ \
    glTexCoord1bvOES_PACKED *packed_data = malloc(sizeof(glTexCoord1bvOES_PACKED)); \
    packed_data->index = glTexCoord1bvOES_INDEX; \
    packed_data->args.a1 = (GLbyte *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord1d(s) ({ \
    glTexCoord1d_PACKED *packed_data = malloc(sizeof(glTexCoord1d_PACKED)); \
    packed_data->index = glTexCoord1d_INDEX; \
    packed_data->args.a1 = (GLdouble)s; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord1dv(v) ({ \
    glTexCoord1dv_PACKED *packed_data = malloc(sizeof(glTexCoord1dv_PACKED)); \
    packed_data->index = glTexCoord1dv_INDEX; \
    packed_data->args.a1 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord1f(s) ({ \
    glTexCoord1f_PACKED *packed_data = malloc(sizeof(glTexCoord1f_PACKED)); \
    packed_data->index = glTexCoord1f_INDEX; \
    packed_data->args.a1 = (GLfloat)s; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord1fv(v) ({ \
    glTexCoord1fv_PACKED *packed_data = malloc(sizeof(glTexCoord1fv_PACKED)); \
    packed_data->index = glTexCoord1fv_INDEX; \
    packed_data->args.a1 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord1hNV(s) ({ \
    glTexCoord1hNV_PACKED *packed_data = malloc(sizeof(glTexCoord1hNV_PACKED)); \
    packed_data->index = glTexCoord1hNV_INDEX; \
    packed_data->args.a1 = (GLhalfNV)s; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord1hvNV(v) ({ \
    glTexCoord1hvNV_PACKED *packed_data = malloc(sizeof(glTexCoord1hvNV_PACKED)); \
    packed_data->index = glTexCoord1hvNV_INDEX; \
    packed_data->args.a1 = (GLhalfNV *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord1i(s) ({ \
    glTexCoord1i_PACKED *packed_data = malloc(sizeof(glTexCoord1i_PACKED)); \
    packed_data->index = glTexCoord1i_INDEX; \
    packed_data->args.a1 = (GLint)s; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord1iv(v) ({ \
    glTexCoord1iv_PACKED *packed_data = malloc(sizeof(glTexCoord1iv_PACKED)); \
    packed_data->index = glTexCoord1iv_INDEX; \
    packed_data->args.a1 = (GLint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord1s(s) ({ \
    glTexCoord1s_PACKED *packed_data = malloc(sizeof(glTexCoord1s_PACKED)); \
    packed_data->index = glTexCoord1s_INDEX; \
    packed_data->args.a1 = (GLshort)s; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord1sv(v) ({ \
    glTexCoord1sv_PACKED *packed_data = malloc(sizeof(glTexCoord1sv_PACKED)); \
    packed_data->index = glTexCoord1sv_INDEX; \
    packed_data->args.a1 = (GLshort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord1xOES(s) ({ \
    glTexCoord1xOES_PACKED *packed_data = malloc(sizeof(glTexCoord1xOES_PACKED)); \
    packed_data->index = glTexCoord1xOES_INDEX; \
    packed_data->args.a1 = (GLfixed)s; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord1xvOES(coords) ({ \
    glTexCoord1xvOES_PACKED *packed_data = malloc(sizeof(glTexCoord1xvOES_PACKED)); \
    packed_data->index = glTexCoord1xvOES_INDEX; \
    packed_data->args.a1 = (GLfixed *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord2bOES(s, t) ({ \
    glTexCoord2bOES_PACKED *packed_data = malloc(sizeof(glTexCoord2bOES_PACKED)); \
    packed_data->index = glTexCoord2bOES_INDEX; \
    packed_data->args.a1 = (GLbyte)s; \
    packed_data->args.a2 = (GLbyte)t; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord2bvOES(coords) ({ \
    glTexCoord2bvOES_PACKED *packed_data = malloc(sizeof(glTexCoord2bvOES_PACKED)); \
    packed_data->index = glTexCoord2bvOES_INDEX; \
    packed_data->args.a1 = (GLbyte *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord2d(s, t) ({ \
    glTexCoord2d_PACKED *packed_data = malloc(sizeof(glTexCoord2d_PACKED)); \
    packed_data->index = glTexCoord2d_INDEX; \
    packed_data->args.a1 = (GLdouble)s; \
    packed_data->args.a2 = (GLdouble)t; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord2dv(v) ({ \
    glTexCoord2dv_PACKED *packed_data = malloc(sizeof(glTexCoord2dv_PACKED)); \
    packed_data->index = glTexCoord2dv_INDEX; \
    packed_data->args.a1 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord2f(s, t) ({ \
    glTexCoord2f_PACKED *packed_data = malloc(sizeof(glTexCoord2f_PACKED)); \
    packed_data->index = glTexCoord2f_INDEX; \
    packed_data->args.a1 = (GLfloat)s; \
    packed_data->args.a2 = (GLfloat)t; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord2fColor3fVertex3fSUN(s, t, r, g, b, x, y, z) ({ \
    glTexCoord2fColor3fVertex3fSUN_PACKED *packed_data = malloc(sizeof(glTexCoord2fColor3fVertex3fSUN_PACKED)); \
    packed_data->index = glTexCoord2fColor3fVertex3fSUN_INDEX; \
    packed_data->args.a1 = (GLfloat)s; \
    packed_data->args.a2 = (GLfloat)t; \
    packed_data->args.a3 = (GLfloat)r; \
    packed_data->args.a4 = (GLfloat)g; \
    packed_data->args.a5 = (GLfloat)b; \
    packed_data->args.a6 = (GLfloat)x; \
    packed_data->args.a7 = (GLfloat)y; \
    packed_data->args.a8 = (GLfloat)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord2fColor3fVertex3fvSUN(tc, c, v) ({ \
    glTexCoord2fColor3fVertex3fvSUN_PACKED *packed_data = malloc(sizeof(glTexCoord2fColor3fVertex3fvSUN_PACKED)); \
    packed_data->index = glTexCoord2fColor3fVertex3fvSUN_INDEX; \
    packed_data->args.a1 = (GLfloat *)tc; \
    packed_data->args.a2 = (GLfloat *)c; \
    packed_data->args.a3 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord2fColor4fNormal3fVertex3fSUN(s, t, r, g, b, a, nx, ny, nz, x, y, z) ({ \
    glTexCoord2fColor4fNormal3fVertex3fSUN_PACKED *packed_data = malloc(sizeof(glTexCoord2fColor4fNormal3fVertex3fSUN_PACKED)); \
    packed_data->index = glTexCoord2fColor4fNormal3fVertex3fSUN_INDEX; \
    packed_data->args.a1 = (GLfloat)s; \
    packed_data->args.a2 = (GLfloat)t; \
    packed_data->args.a3 = (GLfloat)r; \
    packed_data->args.a4 = (GLfloat)g; \
    packed_data->args.a5 = (GLfloat)b; \
    packed_data->args.a6 = (GLfloat)a; \
    packed_data->args.a7 = (GLfloat)nx; \
    packed_data->args.a8 = (GLfloat)ny; \
    packed_data->args.a9 = (GLfloat)nz; \
    packed_data->args.a10 = (GLfloat)x; \
    packed_data->args.a11 = (GLfloat)y; \
    packed_data->args.a12 = (GLfloat)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, n, v) ({ \
    glTexCoord2fColor4fNormal3fVertex3fvSUN_PACKED *packed_data = malloc(sizeof(glTexCoord2fColor4fNormal3fVertex3fvSUN_PACKED)); \
    packed_data->index = glTexCoord2fColor4fNormal3fVertex3fvSUN_INDEX; \
    packed_data->args.a1 = (GLfloat *)tc; \
    packed_data->args.a2 = (GLfloat *)c; \
    packed_data->args.a3 = (GLfloat *)n; \
    packed_data->args.a4 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord2fColor4ubVertex3fSUN(s, t, r, g, b, a, x, y, z) ({ \
    glTexCoord2fColor4ubVertex3fSUN_PACKED *packed_data = malloc(sizeof(glTexCoord2fColor4ubVertex3fSUN_PACKED)); \
    packed_data->index = glTexCoord2fColor4ubVertex3fSUN_INDEX; \
    packed_data->args.a1 = (GLfloat)s; \
    packed_data->args.a2 = (GLfloat)t; \
    packed_data->args.a3 = (GLubyte)r; \
    packed_data->args.a4 = (GLubyte)g; \
    packed_data->args.a5 = (GLubyte)b; \
    packed_data->args.a6 = (GLubyte)a; \
    packed_data->args.a7 = (GLfloat)x; \
    packed_data->args.a8 = (GLfloat)y; \
    packed_data->args.a9 = (GLfloat)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord2fColor4ubVertex3fvSUN(tc, c, v) ({ \
    glTexCoord2fColor4ubVertex3fvSUN_PACKED *packed_data = malloc(sizeof(glTexCoord2fColor4ubVertex3fvSUN_PACKED)); \
    packed_data->index = glTexCoord2fColor4ubVertex3fvSUN_INDEX; \
    packed_data->args.a1 = (GLfloat *)tc; \
    packed_data->args.a2 = (GLubyte *)c; \
    packed_data->args.a3 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord2fNormal3fVertex3fSUN(s, t, nx, ny, nz, x, y, z) ({ \
    glTexCoord2fNormal3fVertex3fSUN_PACKED *packed_data = malloc(sizeof(glTexCoord2fNormal3fVertex3fSUN_PACKED)); \
    packed_data->index = glTexCoord2fNormal3fVertex3fSUN_INDEX; \
    packed_data->args.a1 = (GLfloat)s; \
    packed_data->args.a2 = (GLfloat)t; \
    packed_data->args.a3 = (GLfloat)nx; \
    packed_data->args.a4 = (GLfloat)ny; \
    packed_data->args.a5 = (GLfloat)nz; \
    packed_data->args.a6 = (GLfloat)x; \
    packed_data->args.a7 = (GLfloat)y; \
    packed_data->args.a8 = (GLfloat)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord2fNormal3fVertex3fvSUN(tc, n, v) ({ \
    glTexCoord2fNormal3fVertex3fvSUN_PACKED *packed_data = malloc(sizeof(glTexCoord2fNormal3fVertex3fvSUN_PACKED)); \
    packed_data->index = glTexCoord2fNormal3fVertex3fvSUN_INDEX; \
    packed_data->args.a1 = (GLfloat *)tc; \
    packed_data->args.a2 = (GLfloat *)n; \
    packed_data->args.a3 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord2fVertex3fSUN(s, t, x, y, z) ({ \
    glTexCoord2fVertex3fSUN_PACKED *packed_data = malloc(sizeof(glTexCoord2fVertex3fSUN_PACKED)); \
    packed_data->index = glTexCoord2fVertex3fSUN_INDEX; \
    packed_data->args.a1 = (GLfloat)s; \
    packed_data->args.a2 = (GLfloat)t; \
    packed_data->args.a3 = (GLfloat)x; \
    packed_data->args.a4 = (GLfloat)y; \
    packed_data->args.a5 = (GLfloat)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord2fVertex3fvSUN(tc, v) ({ \
    glTexCoord2fVertex3fvSUN_PACKED *packed_data = malloc(sizeof(glTexCoord2fVertex3fvSUN_PACKED)); \
    packed_data->index = glTexCoord2fVertex3fvSUN_INDEX; \
    packed_data->args.a1 = (GLfloat *)tc; \
    packed_data->args.a2 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord2fv(v) ({ \
    glTexCoord2fv_PACKED *packed_data = malloc(sizeof(glTexCoord2fv_PACKED)); \
    packed_data->index = glTexCoord2fv_INDEX; \
    packed_data->args.a1 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord2hNV(s, t) ({ \
    glTexCoord2hNV_PACKED *packed_data = malloc(sizeof(glTexCoord2hNV_PACKED)); \
    packed_data->index = glTexCoord2hNV_INDEX; \
    packed_data->args.a1 = (GLhalfNV)s; \
    packed_data->args.a2 = (GLhalfNV)t; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord2hvNV(v) ({ \
    glTexCoord2hvNV_PACKED *packed_data = malloc(sizeof(glTexCoord2hvNV_PACKED)); \
    packed_data->index = glTexCoord2hvNV_INDEX; \
    packed_data->args.a1 = (GLhalfNV *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord2i(s, t) ({ \
    glTexCoord2i_PACKED *packed_data = malloc(sizeof(glTexCoord2i_PACKED)); \
    packed_data->index = glTexCoord2i_INDEX; \
    packed_data->args.a1 = (GLint)s; \
    packed_data->args.a2 = (GLint)t; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord2iv(v) ({ \
    glTexCoord2iv_PACKED *packed_data = malloc(sizeof(glTexCoord2iv_PACKED)); \
    packed_data->index = glTexCoord2iv_INDEX; \
    packed_data->args.a1 = (GLint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord2s(s, t) ({ \
    glTexCoord2s_PACKED *packed_data = malloc(sizeof(glTexCoord2s_PACKED)); \
    packed_data->index = glTexCoord2s_INDEX; \
    packed_data->args.a1 = (GLshort)s; \
    packed_data->args.a2 = (GLshort)t; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord2sv(v) ({ \
    glTexCoord2sv_PACKED *packed_data = malloc(sizeof(glTexCoord2sv_PACKED)); \
    packed_data->index = glTexCoord2sv_INDEX; \
    packed_data->args.a1 = (GLshort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord2xOES(s, t) ({ \
    glTexCoord2xOES_PACKED *packed_data = malloc(sizeof(glTexCoord2xOES_PACKED)); \
    packed_data->index = glTexCoord2xOES_INDEX; \
    packed_data->args.a1 = (GLfixed)s; \
    packed_data->args.a2 = (GLfixed)t; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord2xvOES(coords) ({ \
    glTexCoord2xvOES_PACKED *packed_data = malloc(sizeof(glTexCoord2xvOES_PACKED)); \
    packed_data->index = glTexCoord2xvOES_INDEX; \
    packed_data->args.a1 = (GLfixed *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord3bOES(s, t, r) ({ \
    glTexCoord3bOES_PACKED *packed_data = malloc(sizeof(glTexCoord3bOES_PACKED)); \
    packed_data->index = glTexCoord3bOES_INDEX; \
    packed_data->args.a1 = (GLbyte)s; \
    packed_data->args.a2 = (GLbyte)t; \
    packed_data->args.a3 = (GLbyte)r; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord3bvOES(coords) ({ \
    glTexCoord3bvOES_PACKED *packed_data = malloc(sizeof(glTexCoord3bvOES_PACKED)); \
    packed_data->index = glTexCoord3bvOES_INDEX; \
    packed_data->args.a1 = (GLbyte *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord3d(s, t, r) ({ \
    glTexCoord3d_PACKED *packed_data = malloc(sizeof(glTexCoord3d_PACKED)); \
    packed_data->index = glTexCoord3d_INDEX; \
    packed_data->args.a1 = (GLdouble)s; \
    packed_data->args.a2 = (GLdouble)t; \
    packed_data->args.a3 = (GLdouble)r; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord3dv(v) ({ \
    glTexCoord3dv_PACKED *packed_data = malloc(sizeof(glTexCoord3dv_PACKED)); \
    packed_data->index = glTexCoord3dv_INDEX; \
    packed_data->args.a1 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord3f(s, t, r) ({ \
    glTexCoord3f_PACKED *packed_data = malloc(sizeof(glTexCoord3f_PACKED)); \
    packed_data->index = glTexCoord3f_INDEX; \
    packed_data->args.a1 = (GLfloat)s; \
    packed_data->args.a2 = (GLfloat)t; \
    packed_data->args.a3 = (GLfloat)r; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord3fv(v) ({ \
    glTexCoord3fv_PACKED *packed_data = malloc(sizeof(glTexCoord3fv_PACKED)); \
    packed_data->index = glTexCoord3fv_INDEX; \
    packed_data->args.a1 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord3hNV(s, t, r) ({ \
    glTexCoord3hNV_PACKED *packed_data = malloc(sizeof(glTexCoord3hNV_PACKED)); \
    packed_data->index = glTexCoord3hNV_INDEX; \
    packed_data->args.a1 = (GLhalfNV)s; \
    packed_data->args.a2 = (GLhalfNV)t; \
    packed_data->args.a3 = (GLhalfNV)r; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord3hvNV(v) ({ \
    glTexCoord3hvNV_PACKED *packed_data = malloc(sizeof(glTexCoord3hvNV_PACKED)); \
    packed_data->index = glTexCoord3hvNV_INDEX; \
    packed_data->args.a1 = (GLhalfNV *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord3i(s, t, r) ({ \
    glTexCoord3i_PACKED *packed_data = malloc(sizeof(glTexCoord3i_PACKED)); \
    packed_data->index = glTexCoord3i_INDEX; \
    packed_data->args.a1 = (GLint)s; \
    packed_data->args.a2 = (GLint)t; \
    packed_data->args.a3 = (GLint)r; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord3iv(v) ({ \
    glTexCoord3iv_PACKED *packed_data = malloc(sizeof(glTexCoord3iv_PACKED)); \
    packed_data->index = glTexCoord3iv_INDEX; \
    packed_data->args.a1 = (GLint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord3s(s, t, r) ({ \
    glTexCoord3s_PACKED *packed_data = malloc(sizeof(glTexCoord3s_PACKED)); \
    packed_data->index = glTexCoord3s_INDEX; \
    packed_data->args.a1 = (GLshort)s; \
    packed_data->args.a2 = (GLshort)t; \
    packed_data->args.a3 = (GLshort)r; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord3sv(v) ({ \
    glTexCoord3sv_PACKED *packed_data = malloc(sizeof(glTexCoord3sv_PACKED)); \
    packed_data->index = glTexCoord3sv_INDEX; \
    packed_data->args.a1 = (GLshort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord3xOES(s, t, r) ({ \
    glTexCoord3xOES_PACKED *packed_data = malloc(sizeof(glTexCoord3xOES_PACKED)); \
    packed_data->index = glTexCoord3xOES_INDEX; \
    packed_data->args.a1 = (GLfixed)s; \
    packed_data->args.a2 = (GLfixed)t; \
    packed_data->args.a3 = (GLfixed)r; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord3xvOES(coords) ({ \
    glTexCoord3xvOES_PACKED *packed_data = malloc(sizeof(glTexCoord3xvOES_PACKED)); \
    packed_data->index = glTexCoord3xvOES_INDEX; \
    packed_data->args.a1 = (GLfixed *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord4bOES(s, t, r, q) ({ \
    glTexCoord4bOES_PACKED *packed_data = malloc(sizeof(glTexCoord4bOES_PACKED)); \
    packed_data->index = glTexCoord4bOES_INDEX; \
    packed_data->args.a1 = (GLbyte)s; \
    packed_data->args.a2 = (GLbyte)t; \
    packed_data->args.a3 = (GLbyte)r; \
    packed_data->args.a4 = (GLbyte)q; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord4bvOES(coords) ({ \
    glTexCoord4bvOES_PACKED *packed_data = malloc(sizeof(glTexCoord4bvOES_PACKED)); \
    packed_data->index = glTexCoord4bvOES_INDEX; \
    packed_data->args.a1 = (GLbyte *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord4d(s, t, r, q) ({ \
    glTexCoord4d_PACKED *packed_data = malloc(sizeof(glTexCoord4d_PACKED)); \
    packed_data->index = glTexCoord4d_INDEX; \
    packed_data->args.a1 = (GLdouble)s; \
    packed_data->args.a2 = (GLdouble)t; \
    packed_data->args.a3 = (GLdouble)r; \
    packed_data->args.a4 = (GLdouble)q; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord4dv(v) ({ \
    glTexCoord4dv_PACKED *packed_data = malloc(sizeof(glTexCoord4dv_PACKED)); \
    packed_data->index = glTexCoord4dv_INDEX; \
    packed_data->args.a1 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord4f(s, t, r, q) ({ \
    glTexCoord4f_PACKED *packed_data = malloc(sizeof(glTexCoord4f_PACKED)); \
    packed_data->index = glTexCoord4f_INDEX; \
    packed_data->args.a1 = (GLfloat)s; \
    packed_data->args.a2 = (GLfloat)t; \
    packed_data->args.a3 = (GLfloat)r; \
    packed_data->args.a4 = (GLfloat)q; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord4fColor4fNormal3fVertex4fSUN(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w) ({ \
    glTexCoord4fColor4fNormal3fVertex4fSUN_PACKED *packed_data = malloc(sizeof(glTexCoord4fColor4fNormal3fVertex4fSUN_PACKED)); \
    packed_data->index = glTexCoord4fColor4fNormal3fVertex4fSUN_INDEX; \
    packed_data->args.a1 = (GLfloat)s; \
    packed_data->args.a2 = (GLfloat)t; \
    packed_data->args.a3 = (GLfloat)p; \
    packed_data->args.a4 = (GLfloat)q; \
    packed_data->args.a5 = (GLfloat)r; \
    packed_data->args.a6 = (GLfloat)g; \
    packed_data->args.a7 = (GLfloat)b; \
    packed_data->args.a8 = (GLfloat)a; \
    packed_data->args.a9 = (GLfloat)nx; \
    packed_data->args.a10 = (GLfloat)ny; \
    packed_data->args.a11 = (GLfloat)nz; \
    packed_data->args.a12 = (GLfloat)x; \
    packed_data->args.a13 = (GLfloat)y; \
    packed_data->args.a14 = (GLfloat)z; \
    packed_data->args.a15 = (GLfloat)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, n, v) ({ \
    glTexCoord4fColor4fNormal3fVertex4fvSUN_PACKED *packed_data = malloc(sizeof(glTexCoord4fColor4fNormal3fVertex4fvSUN_PACKED)); \
    packed_data->index = glTexCoord4fColor4fNormal3fVertex4fvSUN_INDEX; \
    packed_data->args.a1 = (GLfloat *)tc; \
    packed_data->args.a2 = (GLfloat *)c; \
    packed_data->args.a3 = (GLfloat *)n; \
    packed_data->args.a4 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord4fVertex4fSUN(s, t, p, q, x, y, z, w) ({ \
    glTexCoord4fVertex4fSUN_PACKED *packed_data = malloc(sizeof(glTexCoord4fVertex4fSUN_PACKED)); \
    packed_data->index = glTexCoord4fVertex4fSUN_INDEX; \
    packed_data->args.a1 = (GLfloat)s; \
    packed_data->args.a2 = (GLfloat)t; \
    packed_data->args.a3 = (GLfloat)p; \
    packed_data->args.a4 = (GLfloat)q; \
    packed_data->args.a5 = (GLfloat)x; \
    packed_data->args.a6 = (GLfloat)y; \
    packed_data->args.a7 = (GLfloat)z; \
    packed_data->args.a8 = (GLfloat)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord4fVertex4fvSUN(tc, v) ({ \
    glTexCoord4fVertex4fvSUN_PACKED *packed_data = malloc(sizeof(glTexCoord4fVertex4fvSUN_PACKED)); \
    packed_data->index = glTexCoord4fVertex4fvSUN_INDEX; \
    packed_data->args.a1 = (GLfloat *)tc; \
    packed_data->args.a2 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord4fv(v) ({ \
    glTexCoord4fv_PACKED *packed_data = malloc(sizeof(glTexCoord4fv_PACKED)); \
    packed_data->index = glTexCoord4fv_INDEX; \
    packed_data->args.a1 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord4hNV(s, t, r, q) ({ \
    glTexCoord4hNV_PACKED *packed_data = malloc(sizeof(glTexCoord4hNV_PACKED)); \
    packed_data->index = glTexCoord4hNV_INDEX; \
    packed_data->args.a1 = (GLhalfNV)s; \
    packed_data->args.a2 = (GLhalfNV)t; \
    packed_data->args.a3 = (GLhalfNV)r; \
    packed_data->args.a4 = (GLhalfNV)q; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord4hvNV(v) ({ \
    glTexCoord4hvNV_PACKED *packed_data = malloc(sizeof(glTexCoord4hvNV_PACKED)); \
    packed_data->index = glTexCoord4hvNV_INDEX; \
    packed_data->args.a1 = (GLhalfNV *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord4i(s, t, r, q) ({ \
    glTexCoord4i_PACKED *packed_data = malloc(sizeof(glTexCoord4i_PACKED)); \
    packed_data->index = glTexCoord4i_INDEX; \
    packed_data->args.a1 = (GLint)s; \
    packed_data->args.a2 = (GLint)t; \
    packed_data->args.a3 = (GLint)r; \
    packed_data->args.a4 = (GLint)q; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord4iv(v) ({ \
    glTexCoord4iv_PACKED *packed_data = malloc(sizeof(glTexCoord4iv_PACKED)); \
    packed_data->index = glTexCoord4iv_INDEX; \
    packed_data->args.a1 = (GLint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord4s(s, t, r, q) ({ \
    glTexCoord4s_PACKED *packed_data = malloc(sizeof(glTexCoord4s_PACKED)); \
    packed_data->index = glTexCoord4s_INDEX; \
    packed_data->args.a1 = (GLshort)s; \
    packed_data->args.a2 = (GLshort)t; \
    packed_data->args.a3 = (GLshort)r; \
    packed_data->args.a4 = (GLshort)q; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord4sv(v) ({ \
    glTexCoord4sv_PACKED *packed_data = malloc(sizeof(glTexCoord4sv_PACKED)); \
    packed_data->index = glTexCoord4sv_INDEX; \
    packed_data->args.a1 = (GLshort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord4xOES(s, t, r, q) ({ \
    glTexCoord4xOES_PACKED *packed_data = malloc(sizeof(glTexCoord4xOES_PACKED)); \
    packed_data->index = glTexCoord4xOES_INDEX; \
    packed_data->args.a1 = (GLfixed)s; \
    packed_data->args.a2 = (GLfixed)t; \
    packed_data->args.a3 = (GLfixed)r; \
    packed_data->args.a4 = (GLfixed)q; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoord4xvOES(coords) ({ \
    glTexCoord4xvOES_PACKED *packed_data = malloc(sizeof(glTexCoord4xvOES_PACKED)); \
    packed_data->index = glTexCoord4xvOES_INDEX; \
    packed_data->args.a1 = (GLfixed *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoordFormatNV(size, type, stride) ({ \
    glTexCoordFormatNV_PACKED *packed_data = malloc(sizeof(glTexCoordFormatNV_PACKED)); \
    packed_data->index = glTexCoordFormatNV_INDEX; \
    packed_data->args.a1 = (GLint)size; \
    packed_data->args.a2 = (GLenum)type; \
    packed_data->args.a3 = (GLsizei)stride; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoordP1ui(type, coords) ({ \
    glTexCoordP1ui_PACKED *packed_data = malloc(sizeof(glTexCoordP1ui_PACKED)); \
    packed_data->index = glTexCoordP1ui_INDEX; \
    packed_data->args.a1 = (GLenum)type; \
    packed_data->args.a2 = (GLuint)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoordP1uiv(type, coords) ({ \
    glTexCoordP1uiv_PACKED *packed_data = malloc(sizeof(glTexCoordP1uiv_PACKED)); \
    packed_data->index = glTexCoordP1uiv_INDEX; \
    packed_data->args.a1 = (GLenum)type; \
    packed_data->args.a2 = (GLuint *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoordP2ui(type, coords) ({ \
    glTexCoordP2ui_PACKED *packed_data = malloc(sizeof(glTexCoordP2ui_PACKED)); \
    packed_data->index = glTexCoordP2ui_INDEX; \
    packed_data->args.a1 = (GLenum)type; \
    packed_data->args.a2 = (GLuint)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoordP2uiv(type, coords) ({ \
    glTexCoordP2uiv_PACKED *packed_data = malloc(sizeof(glTexCoordP2uiv_PACKED)); \
    packed_data->index = glTexCoordP2uiv_INDEX; \
    packed_data->args.a1 = (GLenum)type; \
    packed_data->args.a2 = (GLuint *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoordP3ui(type, coords) ({ \
    glTexCoordP3ui_PACKED *packed_data = malloc(sizeof(glTexCoordP3ui_PACKED)); \
    packed_data->index = glTexCoordP3ui_INDEX; \
    packed_data->args.a1 = (GLenum)type; \
    packed_data->args.a2 = (GLuint)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoordP3uiv(type, coords) ({ \
    glTexCoordP3uiv_PACKED *packed_data = malloc(sizeof(glTexCoordP3uiv_PACKED)); \
    packed_data->index = glTexCoordP3uiv_INDEX; \
    packed_data->args.a1 = (GLenum)type; \
    packed_data->args.a2 = (GLuint *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoordP4ui(type, coords) ({ \
    glTexCoordP4ui_PACKED *packed_data = malloc(sizeof(glTexCoordP4ui_PACKED)); \
    packed_data->index = glTexCoordP4ui_INDEX; \
    packed_data->args.a1 = (GLenum)type; \
    packed_data->args.a2 = (GLuint)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoordP4uiv(type, coords) ({ \
    glTexCoordP4uiv_PACKED *packed_data = malloc(sizeof(glTexCoordP4uiv_PACKED)); \
    packed_data->index = glTexCoordP4uiv_INDEX; \
    packed_data->args.a1 = (GLenum)type; \
    packed_data->args.a2 = (GLuint *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoordPointer(size, type, stride, pointer) ({ \
    glTexCoordPointer_PACKED *packed_data = malloc(sizeof(glTexCoordPointer_PACKED)); \
    packed_data->index = glTexCoordPointer_INDEX; \
    packed_data->args.a1 = (GLint)size; \
    packed_data->args.a2 = (GLenum)type; \
    packed_data->args.a3 = (GLsizei)stride; \
    packed_data->args.a4 = (GLvoid *)pointer; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoordPointerEXT(size, type, stride, count, pointer) ({ \
    glTexCoordPointerEXT_PACKED *packed_data = malloc(sizeof(glTexCoordPointerEXT_PACKED)); \
    packed_data->index = glTexCoordPointerEXT_INDEX; \
    packed_data->args.a1 = (GLint)size; \
    packed_data->args.a2 = (GLenum)type; \
    packed_data->args.a3 = (GLsizei)stride; \
    packed_data->args.a4 = (GLsizei)count; \
    packed_data->args.a5 = (GLvoid *)pointer; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoordPointerListIBM(size, type, stride, pointer, ptrstride) ({ \
    glTexCoordPointerListIBM_PACKED *packed_data = malloc(sizeof(glTexCoordPointerListIBM_PACKED)); \
    packed_data->index = glTexCoordPointerListIBM_INDEX; \
    packed_data->args.a1 = (GLint)size; \
    packed_data->args.a2 = (GLenum)type; \
    packed_data->args.a3 = (GLint)stride; \
    packed_data->args.a4 = (GLvoid *)pointer; \
    packed_data->args.a5 = (GLint)ptrstride; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexCoordPointervINTEL(size, type, pointer) ({ \
    glTexCoordPointervINTEL_PACKED *packed_data = malloc(sizeof(glTexCoordPointervINTEL_PACKED)); \
    packed_data->index = glTexCoordPointervINTEL_INDEX; \
    packed_data->args.a1 = (GLint)size; \
    packed_data->args.a2 = (GLenum)type; \
    packed_data->args.a3 = (GLvoid *)pointer; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexEnvf(target, pname, param) ({ \
    glTexEnvf_PACKED *packed_data = malloc(sizeof(glTexEnvf_PACKED)); \
    packed_data->index = glTexEnvf_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexEnvfv(target, pname, params) ({ \
    glTexEnvfv_PACKED *packed_data = malloc(sizeof(glTexEnvfv_PACKED)); \
    packed_data->index = glTexEnvfv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexEnvi(target, pname, param) ({ \
    glTexEnvi_PACKED *packed_data = malloc(sizeof(glTexEnvi_PACKED)); \
    packed_data->index = glTexEnvi_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexEnviv(target, pname, params) ({ \
    glTexEnviv_PACKED *packed_data = malloc(sizeof(glTexEnviv_PACKED)); \
    packed_data->index = glTexEnviv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexEnvx(target, pname, param) ({ \
    glTexEnvx_PACKED *packed_data = malloc(sizeof(glTexEnvx_PACKED)); \
    packed_data->index = glTexEnvx_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfixed)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexEnvxOES(target, pname, param) ({ \
    glTexEnvxOES_PACKED *packed_data = malloc(sizeof(glTexEnvxOES_PACKED)); \
    packed_data->index = glTexEnvxOES_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfixed)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexEnvxv(target, pname, params) ({ \
    glTexEnvxv_PACKED *packed_data = malloc(sizeof(glTexEnvxv_PACKED)); \
    packed_data->index = glTexEnvxv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfixed *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexEnvxvOES(target, pname, params) ({ \
    glTexEnvxvOES_PACKED *packed_data = malloc(sizeof(glTexEnvxvOES_PACKED)); \
    packed_data->index = glTexEnvxvOES_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfixed *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexFilterFuncSGIS(target, filter, n, weights) ({ \
    glTexFilterFuncSGIS_PACKED *packed_data = malloc(sizeof(glTexFilterFuncSGIS_PACKED)); \
    packed_data->index = glTexFilterFuncSGIS_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)filter; \
    packed_data->args.a3 = (GLsizei)n; \
    packed_data->args.a4 = (GLfloat *)weights; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexGend(coord, pname, param) ({ \
    glTexGend_PACKED *packed_data = malloc(sizeof(glTexGend_PACKED)); \
    packed_data->index = glTexGend_INDEX; \
    packed_data->args.a1 = (GLenum)coord; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLdouble)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexGendv(coord, pname, params) ({ \
    glTexGendv_PACKED *packed_data = malloc(sizeof(glTexGendv_PACKED)); \
    packed_data->index = glTexGendv_INDEX; \
    packed_data->args.a1 = (GLenum)coord; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLdouble *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexGenf(coord, pname, param) ({ \
    glTexGenf_PACKED *packed_data = malloc(sizeof(glTexGenf_PACKED)); \
    packed_data->index = glTexGenf_INDEX; \
    packed_data->args.a1 = (GLenum)coord; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexGenfv(coord, pname, params) ({ \
    glTexGenfv_PACKED *packed_data = malloc(sizeof(glTexGenfv_PACKED)); \
    packed_data->index = glTexGenfv_INDEX; \
    packed_data->args.a1 = (GLenum)coord; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexGeni(coord, pname, param) ({ \
    glTexGeni_PACKED *packed_data = malloc(sizeof(glTexGeni_PACKED)); \
    packed_data->index = glTexGeni_INDEX; \
    packed_data->args.a1 = (GLenum)coord; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexGeniv(coord, pname, params) ({ \
    glTexGeniv_PACKED *packed_data = malloc(sizeof(glTexGeniv_PACKED)); \
    packed_data->index = glTexGeniv_INDEX; \
    packed_data->args.a1 = (GLenum)coord; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexGenxOES(coord, pname, param) ({ \
    glTexGenxOES_PACKED *packed_data = malloc(sizeof(glTexGenxOES_PACKED)); \
    packed_data->index = glTexGenxOES_INDEX; \
    packed_data->args.a1 = (GLenum)coord; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfixed)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexGenxvOES(coord, pname, params) ({ \
    glTexGenxvOES_PACKED *packed_data = malloc(sizeof(glTexGenxvOES_PACKED)); \
    packed_data->index = glTexGenxvOES_INDEX; \
    packed_data->args.a1 = (GLenum)coord; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfixed *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexImage1D(target, level, internalformat, width, border, format, type, pixels) ({ \
    glTexImage1D_PACKED *packed_data = malloc(sizeof(glTexImage1D_PACKED)); \
    packed_data->index = glTexImage1D_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint)level; \
    packed_data->args.a3 = (GLint)internalformat; \
    packed_data->args.a4 = (GLsizei)width; \
    packed_data->args.a5 = (GLint)border; \
    packed_data->args.a6 = (GLenum)format; \
    packed_data->args.a7 = (GLenum)type; \
    packed_data->args.a8 = (GLvoid *)pixels; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels) ({ \
    glTexImage2D_PACKED *packed_data = malloc(sizeof(glTexImage2D_PACKED)); \
    packed_data->index = glTexImage2D_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint)level; \
    packed_data->args.a3 = (GLint)internalformat; \
    packed_data->args.a4 = (GLsizei)width; \
    packed_data->args.a5 = (GLsizei)height; \
    packed_data->args.a6 = (GLint)border; \
    packed_data->args.a7 = (GLenum)format; \
    packed_data->args.a8 = (GLenum)type; \
    packed_data->args.a9 = (GLvoid *)pixels; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations) ({ \
    glTexImage2DMultisample_PACKED *packed_data = malloc(sizeof(glTexImage2DMultisample_PACKED)); \
    packed_data->index = glTexImage2DMultisample_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLsizei)samples; \
    packed_data->args.a3 = (GLint)internalformat; \
    packed_data->args.a4 = (GLsizei)width; \
    packed_data->args.a5 = (GLsizei)height; \
    packed_data->args.a6 = (GLboolean)fixedsamplelocations; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexImage2DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations) ({ \
    glTexImage2DMultisampleCoverageNV_PACKED *packed_data = malloc(sizeof(glTexImage2DMultisampleCoverageNV_PACKED)); \
    packed_data->index = glTexImage2DMultisampleCoverageNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLsizei)coverageSamples; \
    packed_data->args.a3 = (GLsizei)colorSamples; \
    packed_data->args.a4 = (GLint)internalFormat; \
    packed_data->args.a5 = (GLsizei)width; \
    packed_data->args.a6 = (GLsizei)height; \
    packed_data->args.a7 = (GLboolean)fixedSampleLocations; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels) ({ \
    glTexImage3D_PACKED *packed_data = malloc(sizeof(glTexImage3D_PACKED)); \
    packed_data->index = glTexImage3D_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint)level; \
    packed_data->args.a3 = (GLint)internalformat; \
    packed_data->args.a4 = (GLsizei)width; \
    packed_data->args.a5 = (GLsizei)height; \
    packed_data->args.a6 = (GLsizei)depth; \
    packed_data->args.a7 = (GLint)border; \
    packed_data->args.a8 = (GLenum)format; \
    packed_data->args.a9 = (GLenum)type; \
    packed_data->args.a10 = (GLvoid *)pixels; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type, pixels) ({ \
    glTexImage3DEXT_PACKED *packed_data = malloc(sizeof(glTexImage3DEXT_PACKED)); \
    packed_data->index = glTexImage3DEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint)level; \
    packed_data->args.a3 = (GLenum)internalformat; \
    packed_data->args.a4 = (GLsizei)width; \
    packed_data->args.a5 = (GLsizei)height; \
    packed_data->args.a6 = (GLsizei)depth; \
    packed_data->args.a7 = (GLint)border; \
    packed_data->args.a8 = (GLenum)format; \
    packed_data->args.a9 = (GLenum)type; \
    packed_data->args.a10 = (GLvoid *)pixels; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations) ({ \
    glTexImage3DMultisample_PACKED *packed_data = malloc(sizeof(glTexImage3DMultisample_PACKED)); \
    packed_data->index = glTexImage3DMultisample_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLsizei)samples; \
    packed_data->args.a3 = (GLint)internalformat; \
    packed_data->args.a4 = (GLsizei)width; \
    packed_data->args.a5 = (GLsizei)height; \
    packed_data->args.a6 = (GLsizei)depth; \
    packed_data->args.a7 = (GLboolean)fixedsamplelocations; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexImage3DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations) ({ \
    glTexImage3DMultisampleCoverageNV_PACKED *packed_data = malloc(sizeof(glTexImage3DMultisampleCoverageNV_PACKED)); \
    packed_data->index = glTexImage3DMultisampleCoverageNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLsizei)coverageSamples; \
    packed_data->args.a3 = (GLsizei)colorSamples; \
    packed_data->args.a4 = (GLint)internalFormat; \
    packed_data->args.a5 = (GLsizei)width; \
    packed_data->args.a6 = (GLsizei)height; \
    packed_data->args.a7 = (GLsizei)depth; \
    packed_data->args.a8 = (GLboolean)fixedSampleLocations; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexImage4DSGIS(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels) ({ \
    glTexImage4DSGIS_PACKED *packed_data = malloc(sizeof(glTexImage4DSGIS_PACKED)); \
    packed_data->index = glTexImage4DSGIS_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint)level; \
    packed_data->args.a3 = (GLenum)internalformat; \
    packed_data->args.a4 = (GLsizei)width; \
    packed_data->args.a5 = (GLsizei)height; \
    packed_data->args.a6 = (GLsizei)depth; \
    packed_data->args.a7 = (GLsizei)size4d; \
    packed_data->args.a8 = (GLint)border; \
    packed_data->args.a9 = (GLenum)format; \
    packed_data->args.a10 = (GLenum)type; \
    packed_data->args.a11 = (GLvoid *)pixels; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexParameterIiv(target, pname, params) ({ \
    glTexParameterIiv_PACKED *packed_data = malloc(sizeof(glTexParameterIiv_PACKED)); \
    packed_data->index = glTexParameterIiv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexParameterIivEXT(target, pname, params) ({ \
    glTexParameterIivEXT_PACKED *packed_data = malloc(sizeof(glTexParameterIivEXT_PACKED)); \
    packed_data->index = glTexParameterIivEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexParameterIuiv(target, pname, params) ({ \
    glTexParameterIuiv_PACKED *packed_data = malloc(sizeof(glTexParameterIuiv_PACKED)); \
    packed_data->index = glTexParameterIuiv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLuint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexParameterIuivEXT(target, pname, params) ({ \
    glTexParameterIuivEXT_PACKED *packed_data = malloc(sizeof(glTexParameterIuivEXT_PACKED)); \
    packed_data->index = glTexParameterIuivEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLuint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexParameterf(target, pname, param) ({ \
    glTexParameterf_PACKED *packed_data = malloc(sizeof(glTexParameterf_PACKED)); \
    packed_data->index = glTexParameterf_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexParameterfv(target, pname, params) ({ \
    glTexParameterfv_PACKED *packed_data = malloc(sizeof(glTexParameterfv_PACKED)); \
    packed_data->index = glTexParameterfv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexParameteri(target, pname, param) ({ \
    glTexParameteri_PACKED *packed_data = malloc(sizeof(glTexParameteri_PACKED)); \
    packed_data->index = glTexParameteri_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexParameteriv(target, pname, params) ({ \
    glTexParameteriv_PACKED *packed_data = malloc(sizeof(glTexParameteriv_PACKED)); \
    packed_data->index = glTexParameteriv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexParameterx(target, pname, param) ({ \
    glTexParameterx_PACKED *packed_data = malloc(sizeof(glTexParameterx_PACKED)); \
    packed_data->index = glTexParameterx_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfixed)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexParameterxOES(target, pname, param) ({ \
    glTexParameterxOES_PACKED *packed_data = malloc(sizeof(glTexParameterxOES_PACKED)); \
    packed_data->index = glTexParameterxOES_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfixed)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexParameterxv(target, pname, params) ({ \
    glTexParameterxv_PACKED *packed_data = malloc(sizeof(glTexParameterxv_PACKED)); \
    packed_data->index = glTexParameterxv_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfixed *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexParameterxvOES(target, pname, params) ({ \
    glTexParameterxvOES_PACKED *packed_data = malloc(sizeof(glTexParameterxvOES_PACKED)); \
    packed_data->index = glTexParameterxvOES_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLfixed *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexRenderbufferNV(target, renderbuffer) ({ \
    glTexRenderbufferNV_PACKED *packed_data = malloc(sizeof(glTexRenderbufferNV_PACKED)); \
    packed_data->index = glTexRenderbufferNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)renderbuffer; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexStorage1D(target, levels, internalformat, width) ({ \
    glTexStorage1D_PACKED *packed_data = malloc(sizeof(glTexStorage1D_PACKED)); \
    packed_data->index = glTexStorage1D_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLsizei)levels; \
    packed_data->args.a3 = (GLenum)internalformat; \
    packed_data->args.a4 = (GLsizei)width; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexStorage2D(target, levels, internalformat, width, height) ({ \
    glTexStorage2D_PACKED *packed_data = malloc(sizeof(glTexStorage2D_PACKED)); \
    packed_data->index = glTexStorage2D_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLsizei)levels; \
    packed_data->args.a3 = (GLenum)internalformat; \
    packed_data->args.a4 = (GLsizei)width; \
    packed_data->args.a5 = (GLsizei)height; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations) ({ \
    glTexStorage2DMultisample_PACKED *packed_data = malloc(sizeof(glTexStorage2DMultisample_PACKED)); \
    packed_data->index = glTexStorage2DMultisample_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLsizei)samples; \
    packed_data->args.a3 = (GLenum)internalformat; \
    packed_data->args.a4 = (GLsizei)width; \
    packed_data->args.a5 = (GLsizei)height; \
    packed_data->args.a6 = (GLboolean)fixedsamplelocations; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexStorage3D(target, levels, internalformat, width, height, depth) ({ \
    glTexStorage3D_PACKED *packed_data = malloc(sizeof(glTexStorage3D_PACKED)); \
    packed_data->index = glTexStorage3D_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLsizei)levels; \
    packed_data->args.a3 = (GLenum)internalformat; \
    packed_data->args.a4 = (GLsizei)width; \
    packed_data->args.a5 = (GLsizei)height; \
    packed_data->args.a6 = (GLsizei)depth; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations) ({ \
    glTexStorage3DMultisample_PACKED *packed_data = malloc(sizeof(glTexStorage3DMultisample_PACKED)); \
    packed_data->index = glTexStorage3DMultisample_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLsizei)samples; \
    packed_data->args.a3 = (GLenum)internalformat; \
    packed_data->args.a4 = (GLsizei)width; \
    packed_data->args.a5 = (GLsizei)height; \
    packed_data->args.a6 = (GLsizei)depth; \
    packed_data->args.a7 = (GLboolean)fixedsamplelocations; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexStorageSparseAMD(target, internalFormat, width, height, depth, layers, flags) ({ \
    glTexStorageSparseAMD_PACKED *packed_data = malloc(sizeof(glTexStorageSparseAMD_PACKED)); \
    packed_data->index = glTexStorageSparseAMD_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLenum)internalFormat; \
    packed_data->args.a3 = (GLsizei)width; \
    packed_data->args.a4 = (GLsizei)height; \
    packed_data->args.a5 = (GLsizei)depth; \
    packed_data->args.a6 = (GLsizei)layers; \
    packed_data->args.a7 = (GLbitfield)flags; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexSubImage1D(target, level, xoffset, width, format, type, pixels) ({ \
    glTexSubImage1D_PACKED *packed_data = malloc(sizeof(glTexSubImage1D_PACKED)); \
    packed_data->index = glTexSubImage1D_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint)level; \
    packed_data->args.a3 = (GLint)xoffset; \
    packed_data->args.a4 = (GLsizei)width; \
    packed_data->args.a5 = (GLenum)format; \
    packed_data->args.a6 = (GLenum)type; \
    packed_data->args.a7 = (GLvoid *)pixels; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexSubImage1DEXT(target, level, xoffset, width, format, type, pixels) ({ \
    glTexSubImage1DEXT_PACKED *packed_data = malloc(sizeof(glTexSubImage1DEXT_PACKED)); \
    packed_data->index = glTexSubImage1DEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint)level; \
    packed_data->args.a3 = (GLint)xoffset; \
    packed_data->args.a4 = (GLsizei)width; \
    packed_data->args.a5 = (GLenum)format; \
    packed_data->args.a6 = (GLenum)type; \
    packed_data->args.a7 = (GLvoid *)pixels; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) ({ \
    glTexSubImage2D_PACKED *packed_data = malloc(sizeof(glTexSubImage2D_PACKED)); \
    packed_data->index = glTexSubImage2D_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint)level; \
    packed_data->args.a3 = (GLint)xoffset; \
    packed_data->args.a4 = (GLint)yoffset; \
    packed_data->args.a5 = (GLsizei)width; \
    packed_data->args.a6 = (GLsizei)height; \
    packed_data->args.a7 = (GLenum)format; \
    packed_data->args.a8 = (GLenum)type; \
    packed_data->args.a9 = (GLvoid *)pixels; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels) ({ \
    glTexSubImage2DEXT_PACKED *packed_data = malloc(sizeof(glTexSubImage2DEXT_PACKED)); \
    packed_data->index = glTexSubImage2DEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint)level; \
    packed_data->args.a3 = (GLint)xoffset; \
    packed_data->args.a4 = (GLint)yoffset; \
    packed_data->args.a5 = (GLsizei)width; \
    packed_data->args.a6 = (GLsizei)height; \
    packed_data->args.a7 = (GLenum)format; \
    packed_data->args.a8 = (GLenum)type; \
    packed_data->args.a9 = (GLvoid *)pixels; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) ({ \
    glTexSubImage3D_PACKED *packed_data = malloc(sizeof(glTexSubImage3D_PACKED)); \
    packed_data->index = glTexSubImage3D_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint)level; \
    packed_data->args.a3 = (GLint)xoffset; \
    packed_data->args.a4 = (GLint)yoffset; \
    packed_data->args.a5 = (GLint)zoffset; \
    packed_data->args.a6 = (GLsizei)width; \
    packed_data->args.a7 = (GLsizei)height; \
    packed_data->args.a8 = (GLsizei)depth; \
    packed_data->args.a9 = (GLenum)format; \
    packed_data->args.a10 = (GLenum)type; \
    packed_data->args.a11 = (GLvoid *)pixels; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) ({ \
    glTexSubImage3DEXT_PACKED *packed_data = malloc(sizeof(glTexSubImage3DEXT_PACKED)); \
    packed_data->index = glTexSubImage3DEXT_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint)level; \
    packed_data->args.a3 = (GLint)xoffset; \
    packed_data->args.a4 = (GLint)yoffset; \
    packed_data->args.a5 = (GLint)zoffset; \
    packed_data->args.a6 = (GLsizei)width; \
    packed_data->args.a7 = (GLsizei)height; \
    packed_data->args.a8 = (GLsizei)depth; \
    packed_data->args.a9 = (GLenum)format; \
    packed_data->args.a10 = (GLenum)type; \
    packed_data->args.a11 = (GLvoid *)pixels; \
    (packed_call_t *)packed_data; \
})
#define pack_glTexSubImage4DSGIS(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels) ({ \
    glTexSubImage4DSGIS_PACKED *packed_data = malloc(sizeof(glTexSubImage4DSGIS_PACKED)); \
    packed_data->index = glTexSubImage4DSGIS_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLint)level; \
    packed_data->args.a3 = (GLint)xoffset; \
    packed_data->args.a4 = (GLint)yoffset; \
    packed_data->args.a5 = (GLint)zoffset; \
    packed_data->args.a6 = (GLint)woffset; \
    packed_data->args.a7 = (GLsizei)width; \
    packed_data->args.a8 = (GLsizei)height; \
    packed_data->args.a9 = (GLsizei)depth; \
    packed_data->args.a10 = (GLsizei)size4d; \
    packed_data->args.a11 = (GLenum)format; \
    packed_data->args.a12 = (GLenum)type; \
    packed_data->args.a13 = (GLvoid *)pixels; \
    (packed_call_t *)packed_data; \
})
#define pack_glTextureBarrierNV() ({ \
    glTextureBarrierNV_PACKED *packed_data = malloc(sizeof(glTextureBarrierNV_PACKED)); \
    packed_data->index = glTextureBarrierNV_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glTextureBufferEXT(texture, target, internalformat, buffer) ({ \
    glTextureBufferEXT_PACKED *packed_data = malloc(sizeof(glTextureBufferEXT_PACKED)); \
    packed_data->index = glTextureBufferEXT_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLenum)internalformat; \
    packed_data->args.a4 = (GLuint)buffer; \
    (packed_call_t *)packed_data; \
})
#define pack_glTextureBufferRangeEXT(texture, target, internalformat, buffer, offset, size) ({ \
    glTextureBufferRangeEXT_PACKED *packed_data = malloc(sizeof(glTextureBufferRangeEXT_PACKED)); \
    packed_data->index = glTextureBufferRangeEXT_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLenum)internalformat; \
    packed_data->args.a4 = (GLuint)buffer; \
    packed_data->args.a5 = (GLintptr)offset; \
    packed_data->args.a6 = (GLsizeiptr)size; \
    (packed_call_t *)packed_data; \
})
#define pack_glTextureColorMaskSGIS(red, green, blue, alpha) ({ \
    glTextureColorMaskSGIS_PACKED *packed_data = malloc(sizeof(glTextureColorMaskSGIS_PACKED)); \
    packed_data->index = glTextureColorMaskSGIS_INDEX; \
    packed_data->args.a1 = (GLboolean)red; \
    packed_data->args.a2 = (GLboolean)green; \
    packed_data->args.a3 = (GLboolean)blue; \
    packed_data->args.a4 = (GLboolean)alpha; \
    (packed_call_t *)packed_data; \
})
#define pack_glTextureImage1DEXT(texture, target, level, internalformat, width, border, format, type, pixels) ({ \
    glTextureImage1DEXT_PACKED *packed_data = malloc(sizeof(glTextureImage1DEXT_PACKED)); \
    packed_data->index = glTextureImage1DEXT_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLint)level; \
    packed_data->args.a4 = (GLenum)internalformat; \
    packed_data->args.a5 = (GLsizei)width; \
    packed_data->args.a6 = (GLint)border; \
    packed_data->args.a7 = (GLenum)format; \
    packed_data->args.a8 = (GLenum)type; \
    packed_data->args.a9 = (GLvoid *)pixels; \
    (packed_call_t *)packed_data; \
})
#define pack_glTextureImage2DEXT(texture, target, level, internalformat, width, height, border, format, type, pixels) ({ \
    glTextureImage2DEXT_PACKED *packed_data = malloc(sizeof(glTextureImage2DEXT_PACKED)); \
    packed_data->index = glTextureImage2DEXT_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLint)level; \
    packed_data->args.a4 = (GLenum)internalformat; \
    packed_data->args.a5 = (GLsizei)width; \
    packed_data->args.a6 = (GLsizei)height; \
    packed_data->args.a7 = (GLint)border; \
    packed_data->args.a8 = (GLenum)format; \
    packed_data->args.a9 = (GLenum)type; \
    packed_data->args.a10 = (GLvoid *)pixels; \
    (packed_call_t *)packed_data; \
})
#define pack_glTextureImage2DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations) ({ \
    glTextureImage2DMultisampleCoverageNV_PACKED *packed_data = malloc(sizeof(glTextureImage2DMultisampleCoverageNV_PACKED)); \
    packed_data->index = glTextureImage2DMultisampleCoverageNV_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLsizei)coverageSamples; \
    packed_data->args.a4 = (GLsizei)colorSamples; \
    packed_data->args.a5 = (GLint)internalFormat; \
    packed_data->args.a6 = (GLsizei)width; \
    packed_data->args.a7 = (GLsizei)height; \
    packed_data->args.a8 = (GLboolean)fixedSampleLocations; \
    (packed_call_t *)packed_data; \
})
#define pack_glTextureImage2DMultisampleNV(texture, target, samples, internalFormat, width, height, fixedSampleLocations) ({ \
    glTextureImage2DMultisampleNV_PACKED *packed_data = malloc(sizeof(glTextureImage2DMultisampleNV_PACKED)); \
    packed_data->index = glTextureImage2DMultisampleNV_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLsizei)samples; \
    packed_data->args.a4 = (GLint)internalFormat; \
    packed_data->args.a5 = (GLsizei)width; \
    packed_data->args.a6 = (GLsizei)height; \
    packed_data->args.a7 = (GLboolean)fixedSampleLocations; \
    (packed_call_t *)packed_data; \
})
#define pack_glTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, format, type, pixels) ({ \
    glTextureImage3DEXT_PACKED *packed_data = malloc(sizeof(glTextureImage3DEXT_PACKED)); \
    packed_data->index = glTextureImage3DEXT_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLint)level; \
    packed_data->args.a4 = (GLenum)internalformat; \
    packed_data->args.a5 = (GLsizei)width; \
    packed_data->args.a6 = (GLsizei)height; \
    packed_data->args.a7 = (GLsizei)depth; \
    packed_data->args.a8 = (GLint)border; \
    packed_data->args.a9 = (GLenum)format; \
    packed_data->args.a10 = (GLenum)type; \
    packed_data->args.a11 = (GLvoid *)pixels; \
    (packed_call_t *)packed_data; \
})
#define pack_glTextureImage3DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations) ({ \
    glTextureImage3DMultisampleCoverageNV_PACKED *packed_data = malloc(sizeof(glTextureImage3DMultisampleCoverageNV_PACKED)); \
    packed_data->index = glTextureImage3DMultisampleCoverageNV_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLsizei)coverageSamples; \
    packed_data->args.a4 = (GLsizei)colorSamples; \
    packed_data->args.a5 = (GLint)internalFormat; \
    packed_data->args.a6 = (GLsizei)width; \
    packed_data->args.a7 = (GLsizei)height; \
    packed_data->args.a8 = (GLsizei)depth; \
    packed_data->args.a9 = (GLboolean)fixedSampleLocations; \
    (packed_call_t *)packed_data; \
})
#define pack_glTextureImage3DMultisampleNV(texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations) ({ \
    glTextureImage3DMultisampleNV_PACKED *packed_data = malloc(sizeof(glTextureImage3DMultisampleNV_PACKED)); \
    packed_data->index = glTextureImage3DMultisampleNV_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLsizei)samples; \
    packed_data->args.a4 = (GLint)internalFormat; \
    packed_data->args.a5 = (GLsizei)width; \
    packed_data->args.a6 = (GLsizei)height; \
    packed_data->args.a7 = (GLsizei)depth; \
    packed_data->args.a8 = (GLboolean)fixedSampleLocations; \
    (packed_call_t *)packed_data; \
})
#define pack_glTextureLightEXT(pname) ({ \
    glTextureLightEXT_PACKED *packed_data = malloc(sizeof(glTextureLightEXT_PACKED)); \
    packed_data->index = glTextureLightEXT_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    (packed_call_t *)packed_data; \
})
#define pack_glTextureMaterialEXT(face, mode) ({ \
    glTextureMaterialEXT_PACKED *packed_data = malloc(sizeof(glTextureMaterialEXT_PACKED)); \
    packed_data->index = glTextureMaterialEXT_INDEX; \
    packed_data->args.a1 = (GLenum)face; \
    packed_data->args.a2 = (GLenum)mode; \
    (packed_call_t *)packed_data; \
})
#define pack_glTextureNormalEXT(mode) ({ \
    glTextureNormalEXT_PACKED *packed_data = malloc(sizeof(glTextureNormalEXT_PACKED)); \
    packed_data->index = glTextureNormalEXT_INDEX; \
    packed_data->args.a1 = (GLenum)mode; \
    (packed_call_t *)packed_data; \
})
#define pack_glTextureParameterIivEXT(texture, target, pname, params) ({ \
    glTextureParameterIivEXT_PACKED *packed_data = malloc(sizeof(glTextureParameterIivEXT_PACKED)); \
    packed_data->index = glTextureParameterIivEXT_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glTextureParameterIuivEXT(texture, target, pname, params) ({ \
    glTextureParameterIuivEXT_PACKED *packed_data = malloc(sizeof(glTextureParameterIuivEXT_PACKED)); \
    packed_data->index = glTextureParameterIuivEXT_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLuint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glTextureParameterfEXT(texture, target, pname, param) ({ \
    glTextureParameterfEXT_PACKED *packed_data = malloc(sizeof(glTextureParameterfEXT_PACKED)); \
    packed_data->index = glTextureParameterfEXT_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLfloat)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glTextureParameterfvEXT(texture, target, pname, params) ({ \
    glTextureParameterfvEXT_PACKED *packed_data = malloc(sizeof(glTextureParameterfvEXT_PACKED)); \
    packed_data->index = glTextureParameterfvEXT_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glTextureParameteriEXT(texture, target, pname, param) ({ \
    glTextureParameteriEXT_PACKED *packed_data = malloc(sizeof(glTextureParameteriEXT_PACKED)); \
    packed_data->index = glTextureParameteriEXT_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLint)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glTextureParameterivEXT(texture, target, pname, params) ({ \
    glTextureParameterivEXT_PACKED *packed_data = malloc(sizeof(glTextureParameterivEXT_PACKED)); \
    packed_data->index = glTextureParameterivEXT_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glTextureRangeAPPLE(target, length, pointer) ({ \
    glTextureRangeAPPLE_PACKED *packed_data = malloc(sizeof(glTextureRangeAPPLE_PACKED)); \
    packed_data->index = glTextureRangeAPPLE_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLsizei)length; \
    packed_data->args.a3 = (GLvoid *)pointer; \
    (packed_call_t *)packed_data; \
})
#define pack_glTextureRenderbufferEXT(texture, target, renderbuffer) ({ \
    glTextureRenderbufferEXT_PACKED *packed_data = malloc(sizeof(glTextureRenderbufferEXT_PACKED)); \
    packed_data->index = glTextureRenderbufferEXT_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLuint)renderbuffer; \
    (packed_call_t *)packed_data; \
})
#define pack_glTextureStorage1DEXT(texture, target, levels, internalformat, width) ({ \
    glTextureStorage1DEXT_PACKED *packed_data = malloc(sizeof(glTextureStorage1DEXT_PACKED)); \
    packed_data->index = glTextureStorage1DEXT_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLsizei)levels; \
    packed_data->args.a4 = (GLenum)internalformat; \
    packed_data->args.a5 = (GLsizei)width; \
    (packed_call_t *)packed_data; \
})
#define pack_glTextureStorage2DEXT(texture, target, levels, internalformat, width, height) ({ \
    glTextureStorage2DEXT_PACKED *packed_data = malloc(sizeof(glTextureStorage2DEXT_PACKED)); \
    packed_data->index = glTextureStorage2DEXT_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLsizei)levels; \
    packed_data->args.a4 = (GLenum)internalformat; \
    packed_data->args.a5 = (GLsizei)width; \
    packed_data->args.a6 = (GLsizei)height; \
    (packed_call_t *)packed_data; \
})
#define pack_glTextureStorage2DMultisampleEXT(texture, target, samples, internalformat, width, height, fixedsamplelocations) ({ \
    glTextureStorage2DMultisampleEXT_PACKED *packed_data = malloc(sizeof(glTextureStorage2DMultisampleEXT_PACKED)); \
    packed_data->index = glTextureStorage2DMultisampleEXT_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLsizei)samples; \
    packed_data->args.a4 = (GLenum)internalformat; \
    packed_data->args.a5 = (GLsizei)width; \
    packed_data->args.a6 = (GLsizei)height; \
    packed_data->args.a7 = (GLboolean)fixedsamplelocations; \
    (packed_call_t *)packed_data; \
})
#define pack_glTextureStorage3DEXT(texture, target, levels, internalformat, width, height, depth) ({ \
    glTextureStorage3DEXT_PACKED *packed_data = malloc(sizeof(glTextureStorage3DEXT_PACKED)); \
    packed_data->index = glTextureStorage3DEXT_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLsizei)levels; \
    packed_data->args.a4 = (GLenum)internalformat; \
    packed_data->args.a5 = (GLsizei)width; \
    packed_data->args.a6 = (GLsizei)height; \
    packed_data->args.a7 = (GLsizei)depth; \
    (packed_call_t *)packed_data; \
})
#define pack_glTextureStorage3DMultisampleEXT(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations) ({ \
    glTextureStorage3DMultisampleEXT_PACKED *packed_data = malloc(sizeof(glTextureStorage3DMultisampleEXT_PACKED)); \
    packed_data->index = glTextureStorage3DMultisampleEXT_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLsizei)samples; \
    packed_data->args.a4 = (GLenum)internalformat; \
    packed_data->args.a5 = (GLsizei)width; \
    packed_data->args.a6 = (GLsizei)height; \
    packed_data->args.a7 = (GLsizei)depth; \
    packed_data->args.a8 = (GLboolean)fixedsamplelocations; \
    (packed_call_t *)packed_data; \
})
#define pack_glTextureStorageSparseAMD(texture, target, internalFormat, width, height, depth, layers, flags) ({ \
    glTextureStorageSparseAMD_PACKED *packed_data = malloc(sizeof(glTextureStorageSparseAMD_PACKED)); \
    packed_data->index = glTextureStorageSparseAMD_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLenum)internalFormat; \
    packed_data->args.a4 = (GLsizei)width; \
    packed_data->args.a5 = (GLsizei)height; \
    packed_data->args.a6 = (GLsizei)depth; \
    packed_data->args.a7 = (GLsizei)layers; \
    packed_data->args.a8 = (GLbitfield)flags; \
    (packed_call_t *)packed_data; \
})
#define pack_glTextureSubImage1DEXT(texture, target, level, xoffset, width, format, type, pixels) ({ \
    glTextureSubImage1DEXT_PACKED *packed_data = malloc(sizeof(glTextureSubImage1DEXT_PACKED)); \
    packed_data->index = glTextureSubImage1DEXT_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLint)level; \
    packed_data->args.a4 = (GLint)xoffset; \
    packed_data->args.a5 = (GLsizei)width; \
    packed_data->args.a6 = (GLenum)format; \
    packed_data->args.a7 = (GLenum)type; \
    packed_data->args.a8 = (GLvoid *)pixels; \
    (packed_call_t *)packed_data; \
})
#define pack_glTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, type, pixels) ({ \
    glTextureSubImage2DEXT_PACKED *packed_data = malloc(sizeof(glTextureSubImage2DEXT_PACKED)); \
    packed_data->index = glTextureSubImage2DEXT_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLint)level; \
    packed_data->args.a4 = (GLint)xoffset; \
    packed_data->args.a5 = (GLint)yoffset; \
    packed_data->args.a6 = (GLsizei)width; \
    packed_data->args.a7 = (GLsizei)height; \
    packed_data->args.a8 = (GLenum)format; \
    packed_data->args.a9 = (GLenum)type; \
    packed_data->args.a10 = (GLvoid *)pixels; \
    (packed_call_t *)packed_data; \
})
#define pack_glTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) ({ \
    glTextureSubImage3DEXT_PACKED *packed_data = malloc(sizeof(glTextureSubImage3DEXT_PACKED)); \
    packed_data->index = glTextureSubImage3DEXT_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLint)level; \
    packed_data->args.a4 = (GLint)xoffset; \
    packed_data->args.a5 = (GLint)yoffset; \
    packed_data->args.a6 = (GLint)zoffset; \
    packed_data->args.a7 = (GLsizei)width; \
    packed_data->args.a8 = (GLsizei)height; \
    packed_data->args.a9 = (GLsizei)depth; \
    packed_data->args.a10 = (GLenum)format; \
    packed_data->args.a11 = (GLenum)type; \
    packed_data->args.a12 = (GLvoid *)pixels; \
    (packed_call_t *)packed_data; \
})
#define pack_glTextureView(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers) ({ \
    glTextureView_PACKED *packed_data = malloc(sizeof(glTextureView_PACKED)); \
    packed_data->index = glTextureView_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLuint)origtexture; \
    packed_data->args.a4 = (GLenum)internalformat; \
    packed_data->args.a5 = (GLuint)minlevel; \
    packed_data->args.a6 = (GLuint)numlevels; \
    packed_data->args.a7 = (GLuint)minlayer; \
    packed_data->args.a8 = (GLuint)numlayers; \
    (packed_call_t *)packed_data; \
})
#define pack_glTrackMatrixNV(target, address, matrix, transform) ({ \
    glTrackMatrixNV_PACKED *packed_data = malloc(sizeof(glTrackMatrixNV_PACKED)); \
    packed_data->index = glTrackMatrixNV_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    packed_data->args.a2 = (GLuint)address; \
    packed_data->args.a3 = (GLenum)matrix; \
    packed_data->args.a4 = (GLenum)transform; \
    (packed_call_t *)packed_data; \
})
#define pack_glTransformFeedbackAttribsNV(count, attribs, bufferMode) ({ \
    glTransformFeedbackAttribsNV_PACKED *packed_data = malloc(sizeof(glTransformFeedbackAttribsNV_PACKED)); \
    packed_data->index = glTransformFeedbackAttribsNV_INDEX; \
    packed_data->args.a1 = (GLsizei)count; \
    packed_data->args.a2 = (GLint *)attribs; \
    packed_data->args.a3 = (GLenum)bufferMode; \
    (packed_call_t *)packed_data; \
})
#define pack_glTransformFeedbackStreamAttribsNV(count, attribs, nbuffers, bufstreams, bufferMode) ({ \
    glTransformFeedbackStreamAttribsNV_PACKED *packed_data = malloc(sizeof(glTransformFeedbackStreamAttribsNV_PACKED)); \
    packed_data->index = glTransformFeedbackStreamAttribsNV_INDEX; \
    packed_data->args.a1 = (GLsizei)count; \
    packed_data->args.a2 = (GLint *)attribs; \
    packed_data->args.a3 = (GLsizei)nbuffers; \
    packed_data->args.a4 = (GLint *)bufstreams; \
    packed_data->args.a5 = (GLenum)bufferMode; \
    (packed_call_t *)packed_data; \
})
#define pack_glTransformFeedbackVaryings(program, count, varyings, bufferMode) ({ \
    glTransformFeedbackVaryings_PACKED *packed_data = malloc(sizeof(glTransformFeedbackVaryings_PACKED)); \
    packed_data->index = glTransformFeedbackVaryings_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLchar*const *)varyings; \
    packed_data->args.a4 = (GLenum)bufferMode; \
    (packed_call_t *)packed_data; \
})
#define pack_glTransformFeedbackVaryingsEXT(program, count, varyings, bufferMode) ({ \
    glTransformFeedbackVaryingsEXT_PACKED *packed_data = malloc(sizeof(glTransformFeedbackVaryingsEXT_PACKED)); \
    packed_data->index = glTransformFeedbackVaryingsEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLchar *)varyings; \
    packed_data->args.a4 = (GLenum)bufferMode; \
    (packed_call_t *)packed_data; \
})
#define pack_glTransformFeedbackVaryingsNV(program, count, locations, bufferMode) ({ \
    glTransformFeedbackVaryingsNV_PACKED *packed_data = malloc(sizeof(glTransformFeedbackVaryingsNV_PACKED)); \
    packed_data->index = glTransformFeedbackVaryingsNV_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLint *)locations; \
    packed_data->args.a4 = (GLenum)bufferMode; \
    (packed_call_t *)packed_data; \
})
#define pack_glTransformPathNV(resultPath, srcPath, transformType, transformValues) ({ \
    glTransformPathNV_PACKED *packed_data = malloc(sizeof(glTransformPathNV_PACKED)); \
    packed_data->index = glTransformPathNV_INDEX; \
    packed_data->args.a1 = (GLuint)resultPath; \
    packed_data->args.a2 = (GLuint)srcPath; \
    packed_data->args.a3 = (GLenum)transformType; \
    packed_data->args.a4 = (GLfloat *)transformValues; \
    (packed_call_t *)packed_data; \
})
#define pack_glTranslated(x, y, z) ({ \
    glTranslated_PACKED *packed_data = malloc(sizeof(glTranslated_PACKED)); \
    packed_data->index = glTranslated_INDEX; \
    packed_data->args.a1 = (GLdouble)x; \
    packed_data->args.a2 = (GLdouble)y; \
    packed_data->args.a3 = (GLdouble)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glTranslatef(x, y, z) ({ \
    glTranslatef_PACKED *packed_data = malloc(sizeof(glTranslatef_PACKED)); \
    packed_data->index = glTranslatef_INDEX; \
    packed_data->args.a1 = (GLfloat)x; \
    packed_data->args.a2 = (GLfloat)y; \
    packed_data->args.a3 = (GLfloat)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glTranslatex(x, y, z) ({ \
    glTranslatex_PACKED *packed_data = malloc(sizeof(glTranslatex_PACKED)); \
    packed_data->index = glTranslatex_INDEX; \
    packed_data->args.a1 = (GLfixed)x; \
    packed_data->args.a2 = (GLfixed)y; \
    packed_data->args.a3 = (GLfixed)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glTranslatexOES(x, y, z) ({ \
    glTranslatexOES_PACKED *packed_data = malloc(sizeof(glTranslatexOES_PACKED)); \
    packed_data->index = glTranslatexOES_INDEX; \
    packed_data->args.a1 = (GLfixed)x; \
    packed_data->args.a2 = (GLfixed)y; \
    packed_data->args.a3 = (GLfixed)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform1d(location, x) ({ \
    glUniform1d_PACKED *packed_data = malloc(sizeof(glUniform1d_PACKED)); \
    packed_data->index = glUniform1d_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLdouble)x; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform1dv(location, count, value) ({ \
    glUniform1dv_PACKED *packed_data = malloc(sizeof(glUniform1dv_PACKED)); \
    packed_data->index = glUniform1dv_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLdouble *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform1f(location, v0) ({ \
    glUniform1f_PACKED *packed_data = malloc(sizeof(glUniform1f_PACKED)); \
    packed_data->index = glUniform1f_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLfloat)v0; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform1fARB(location, v0) ({ \
    glUniform1fARB_PACKED *packed_data = malloc(sizeof(glUniform1fARB_PACKED)); \
    packed_data->index = glUniform1fARB_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLfloat)v0; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform1fv(location, count, value) ({ \
    glUniform1fv_PACKED *packed_data = malloc(sizeof(glUniform1fv_PACKED)); \
    packed_data->index = glUniform1fv_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLfloat *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform1fvARB(location, count, value) ({ \
    glUniform1fvARB_PACKED *packed_data = malloc(sizeof(glUniform1fvARB_PACKED)); \
    packed_data->index = glUniform1fvARB_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLfloat *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform1i(location, v0) ({ \
    glUniform1i_PACKED *packed_data = malloc(sizeof(glUniform1i_PACKED)); \
    packed_data->index = glUniform1i_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLint)v0; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform1i64NV(location, x) ({ \
    glUniform1i64NV_PACKED *packed_data = malloc(sizeof(glUniform1i64NV_PACKED)); \
    packed_data->index = glUniform1i64NV_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLint64EXT)x; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform1i64vNV(location, count, value) ({ \
    glUniform1i64vNV_PACKED *packed_data = malloc(sizeof(glUniform1i64vNV_PACKED)); \
    packed_data->index = glUniform1i64vNV_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLint64EXT *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform1iARB(location, v0) ({ \
    glUniform1iARB_PACKED *packed_data = malloc(sizeof(glUniform1iARB_PACKED)); \
    packed_data->index = glUniform1iARB_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLint)v0; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform1iv(location, count, value) ({ \
    glUniform1iv_PACKED *packed_data = malloc(sizeof(glUniform1iv_PACKED)); \
    packed_data->index = glUniform1iv_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLint *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform1ivARB(location, count, value) ({ \
    glUniform1ivARB_PACKED *packed_data = malloc(sizeof(glUniform1ivARB_PACKED)); \
    packed_data->index = glUniform1ivARB_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLint *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform1ui(location, v0) ({ \
    glUniform1ui_PACKED *packed_data = malloc(sizeof(glUniform1ui_PACKED)); \
    packed_data->index = glUniform1ui_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLuint)v0; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform1ui64NV(location, x) ({ \
    glUniform1ui64NV_PACKED *packed_data = malloc(sizeof(glUniform1ui64NV_PACKED)); \
    packed_data->index = glUniform1ui64NV_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLuint64EXT)x; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform1ui64vNV(location, count, value) ({ \
    glUniform1ui64vNV_PACKED *packed_data = malloc(sizeof(glUniform1ui64vNV_PACKED)); \
    packed_data->index = glUniform1ui64vNV_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLuint64EXT *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform1uiEXT(location, v0) ({ \
    glUniform1uiEXT_PACKED *packed_data = malloc(sizeof(glUniform1uiEXT_PACKED)); \
    packed_data->index = glUniform1uiEXT_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLuint)v0; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform1uiv(location, count, value) ({ \
    glUniform1uiv_PACKED *packed_data = malloc(sizeof(glUniform1uiv_PACKED)); \
    packed_data->index = glUniform1uiv_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLuint *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform1uivEXT(location, count, value) ({ \
    glUniform1uivEXT_PACKED *packed_data = malloc(sizeof(glUniform1uivEXT_PACKED)); \
    packed_data->index = glUniform1uivEXT_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLuint *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform2d(location, x, y) ({ \
    glUniform2d_PACKED *packed_data = malloc(sizeof(glUniform2d_PACKED)); \
    packed_data->index = glUniform2d_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLdouble)x; \
    packed_data->args.a3 = (GLdouble)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform2dv(location, count, value) ({ \
    glUniform2dv_PACKED *packed_data = malloc(sizeof(glUniform2dv_PACKED)); \
    packed_data->index = glUniform2dv_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLdouble *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform2f(location, v0, v1) ({ \
    glUniform2f_PACKED *packed_data = malloc(sizeof(glUniform2f_PACKED)); \
    packed_data->index = glUniform2f_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLfloat)v0; \
    packed_data->args.a3 = (GLfloat)v1; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform2fARB(location, v0, v1) ({ \
    glUniform2fARB_PACKED *packed_data = malloc(sizeof(glUniform2fARB_PACKED)); \
    packed_data->index = glUniform2fARB_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLfloat)v0; \
    packed_data->args.a3 = (GLfloat)v1; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform2fv(location, count, value) ({ \
    glUniform2fv_PACKED *packed_data = malloc(sizeof(glUniform2fv_PACKED)); \
    packed_data->index = glUniform2fv_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLfloat *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform2fvARB(location, count, value) ({ \
    glUniform2fvARB_PACKED *packed_data = malloc(sizeof(glUniform2fvARB_PACKED)); \
    packed_data->index = glUniform2fvARB_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLfloat *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform2i(location, v0, v1) ({ \
    glUniform2i_PACKED *packed_data = malloc(sizeof(glUniform2i_PACKED)); \
    packed_data->index = glUniform2i_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLint)v0; \
    packed_data->args.a3 = (GLint)v1; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform2i64NV(location, x, y) ({ \
    glUniform2i64NV_PACKED *packed_data = malloc(sizeof(glUniform2i64NV_PACKED)); \
    packed_data->index = glUniform2i64NV_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLint64EXT)x; \
    packed_data->args.a3 = (GLint64EXT)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform2i64vNV(location, count, value) ({ \
    glUniform2i64vNV_PACKED *packed_data = malloc(sizeof(glUniform2i64vNV_PACKED)); \
    packed_data->index = glUniform2i64vNV_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLint64EXT *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform2iARB(location, v0, v1) ({ \
    glUniform2iARB_PACKED *packed_data = malloc(sizeof(glUniform2iARB_PACKED)); \
    packed_data->index = glUniform2iARB_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLint)v0; \
    packed_data->args.a3 = (GLint)v1; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform2iv(location, count, value) ({ \
    glUniform2iv_PACKED *packed_data = malloc(sizeof(glUniform2iv_PACKED)); \
    packed_data->index = glUniform2iv_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLint *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform2ivARB(location, count, value) ({ \
    glUniform2ivARB_PACKED *packed_data = malloc(sizeof(glUniform2ivARB_PACKED)); \
    packed_data->index = glUniform2ivARB_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLint *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform2ui(location, v0, v1) ({ \
    glUniform2ui_PACKED *packed_data = malloc(sizeof(glUniform2ui_PACKED)); \
    packed_data->index = glUniform2ui_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLuint)v0; \
    packed_data->args.a3 = (GLuint)v1; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform2ui64NV(location, x, y) ({ \
    glUniform2ui64NV_PACKED *packed_data = malloc(sizeof(glUniform2ui64NV_PACKED)); \
    packed_data->index = glUniform2ui64NV_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLuint64EXT)x; \
    packed_data->args.a3 = (GLuint64EXT)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform2ui64vNV(location, count, value) ({ \
    glUniform2ui64vNV_PACKED *packed_data = malloc(sizeof(glUniform2ui64vNV_PACKED)); \
    packed_data->index = glUniform2ui64vNV_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLuint64EXT *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform2uiEXT(location, v0, v1) ({ \
    glUniform2uiEXT_PACKED *packed_data = malloc(sizeof(glUniform2uiEXT_PACKED)); \
    packed_data->index = glUniform2uiEXT_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLuint)v0; \
    packed_data->args.a3 = (GLuint)v1; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform2uiv(location, count, value) ({ \
    glUniform2uiv_PACKED *packed_data = malloc(sizeof(glUniform2uiv_PACKED)); \
    packed_data->index = glUniform2uiv_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLuint *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform2uivEXT(location, count, value) ({ \
    glUniform2uivEXT_PACKED *packed_data = malloc(sizeof(glUniform2uivEXT_PACKED)); \
    packed_data->index = glUniform2uivEXT_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLuint *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform3d(location, x, y, z) ({ \
    glUniform3d_PACKED *packed_data = malloc(sizeof(glUniform3d_PACKED)); \
    packed_data->index = glUniform3d_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLdouble)x; \
    packed_data->args.a3 = (GLdouble)y; \
    packed_data->args.a4 = (GLdouble)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform3dv(location, count, value) ({ \
    glUniform3dv_PACKED *packed_data = malloc(sizeof(glUniform3dv_PACKED)); \
    packed_data->index = glUniform3dv_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLdouble *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform3f(location, v0, v1, v2) ({ \
    glUniform3f_PACKED *packed_data = malloc(sizeof(glUniform3f_PACKED)); \
    packed_data->index = glUniform3f_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLfloat)v0; \
    packed_data->args.a3 = (GLfloat)v1; \
    packed_data->args.a4 = (GLfloat)v2; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform3fARB(location, v0, v1, v2) ({ \
    glUniform3fARB_PACKED *packed_data = malloc(sizeof(glUniform3fARB_PACKED)); \
    packed_data->index = glUniform3fARB_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLfloat)v0; \
    packed_data->args.a3 = (GLfloat)v1; \
    packed_data->args.a4 = (GLfloat)v2; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform3fv(location, count, value) ({ \
    glUniform3fv_PACKED *packed_data = malloc(sizeof(glUniform3fv_PACKED)); \
    packed_data->index = glUniform3fv_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLfloat *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform3fvARB(location, count, value) ({ \
    glUniform3fvARB_PACKED *packed_data = malloc(sizeof(glUniform3fvARB_PACKED)); \
    packed_data->index = glUniform3fvARB_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLfloat *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform3i(location, v0, v1, v2) ({ \
    glUniform3i_PACKED *packed_data = malloc(sizeof(glUniform3i_PACKED)); \
    packed_data->index = glUniform3i_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLint)v0; \
    packed_data->args.a3 = (GLint)v1; \
    packed_data->args.a4 = (GLint)v2; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform3i64NV(location, x, y, z) ({ \
    glUniform3i64NV_PACKED *packed_data = malloc(sizeof(glUniform3i64NV_PACKED)); \
    packed_data->index = glUniform3i64NV_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLint64EXT)x; \
    packed_data->args.a3 = (GLint64EXT)y; \
    packed_data->args.a4 = (GLint64EXT)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform3i64vNV(location, count, value) ({ \
    glUniform3i64vNV_PACKED *packed_data = malloc(sizeof(glUniform3i64vNV_PACKED)); \
    packed_data->index = glUniform3i64vNV_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLint64EXT *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform3iARB(location, v0, v1, v2) ({ \
    glUniform3iARB_PACKED *packed_data = malloc(sizeof(glUniform3iARB_PACKED)); \
    packed_data->index = glUniform3iARB_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLint)v0; \
    packed_data->args.a3 = (GLint)v1; \
    packed_data->args.a4 = (GLint)v2; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform3iv(location, count, value) ({ \
    glUniform3iv_PACKED *packed_data = malloc(sizeof(glUniform3iv_PACKED)); \
    packed_data->index = glUniform3iv_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLint *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform3ivARB(location, count, value) ({ \
    glUniform3ivARB_PACKED *packed_data = malloc(sizeof(glUniform3ivARB_PACKED)); \
    packed_data->index = glUniform3ivARB_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLint *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform3ui(location, v0, v1, v2) ({ \
    glUniform3ui_PACKED *packed_data = malloc(sizeof(glUniform3ui_PACKED)); \
    packed_data->index = glUniform3ui_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLuint)v0; \
    packed_data->args.a3 = (GLuint)v1; \
    packed_data->args.a4 = (GLuint)v2; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform3ui64NV(location, x, y, z) ({ \
    glUniform3ui64NV_PACKED *packed_data = malloc(sizeof(glUniform3ui64NV_PACKED)); \
    packed_data->index = glUniform3ui64NV_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLuint64EXT)x; \
    packed_data->args.a3 = (GLuint64EXT)y; \
    packed_data->args.a4 = (GLuint64EXT)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform3ui64vNV(location, count, value) ({ \
    glUniform3ui64vNV_PACKED *packed_data = malloc(sizeof(glUniform3ui64vNV_PACKED)); \
    packed_data->index = glUniform3ui64vNV_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLuint64EXT *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform3uiEXT(location, v0, v1, v2) ({ \
    glUniform3uiEXT_PACKED *packed_data = malloc(sizeof(glUniform3uiEXT_PACKED)); \
    packed_data->index = glUniform3uiEXT_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLuint)v0; \
    packed_data->args.a3 = (GLuint)v1; \
    packed_data->args.a4 = (GLuint)v2; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform3uiv(location, count, value) ({ \
    glUniform3uiv_PACKED *packed_data = malloc(sizeof(glUniform3uiv_PACKED)); \
    packed_data->index = glUniform3uiv_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLuint *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform3uivEXT(location, count, value) ({ \
    glUniform3uivEXT_PACKED *packed_data = malloc(sizeof(glUniform3uivEXT_PACKED)); \
    packed_data->index = glUniform3uivEXT_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLuint *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform4d(location, x, y, z, w) ({ \
    glUniform4d_PACKED *packed_data = malloc(sizeof(glUniform4d_PACKED)); \
    packed_data->index = glUniform4d_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLdouble)x; \
    packed_data->args.a3 = (GLdouble)y; \
    packed_data->args.a4 = (GLdouble)z; \
    packed_data->args.a5 = (GLdouble)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform4dv(location, count, value) ({ \
    glUniform4dv_PACKED *packed_data = malloc(sizeof(glUniform4dv_PACKED)); \
    packed_data->index = glUniform4dv_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLdouble *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform4f(location, v0, v1, v2, v3) ({ \
    glUniform4f_PACKED *packed_data = malloc(sizeof(glUniform4f_PACKED)); \
    packed_data->index = glUniform4f_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLfloat)v0; \
    packed_data->args.a3 = (GLfloat)v1; \
    packed_data->args.a4 = (GLfloat)v2; \
    packed_data->args.a5 = (GLfloat)v3; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform4fARB(location, v0, v1, v2, v3) ({ \
    glUniform4fARB_PACKED *packed_data = malloc(sizeof(glUniform4fARB_PACKED)); \
    packed_data->index = glUniform4fARB_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLfloat)v0; \
    packed_data->args.a3 = (GLfloat)v1; \
    packed_data->args.a4 = (GLfloat)v2; \
    packed_data->args.a5 = (GLfloat)v3; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform4fv(location, count, value) ({ \
    glUniform4fv_PACKED *packed_data = malloc(sizeof(glUniform4fv_PACKED)); \
    packed_data->index = glUniform4fv_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLfloat *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform4fvARB(location, count, value) ({ \
    glUniform4fvARB_PACKED *packed_data = malloc(sizeof(glUniform4fvARB_PACKED)); \
    packed_data->index = glUniform4fvARB_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLfloat *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform4i(location, v0, v1, v2, v3) ({ \
    glUniform4i_PACKED *packed_data = malloc(sizeof(glUniform4i_PACKED)); \
    packed_data->index = glUniform4i_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLint)v0; \
    packed_data->args.a3 = (GLint)v1; \
    packed_data->args.a4 = (GLint)v2; \
    packed_data->args.a5 = (GLint)v3; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform4i64NV(location, x, y, z, w) ({ \
    glUniform4i64NV_PACKED *packed_data = malloc(sizeof(glUniform4i64NV_PACKED)); \
    packed_data->index = glUniform4i64NV_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLint64EXT)x; \
    packed_data->args.a3 = (GLint64EXT)y; \
    packed_data->args.a4 = (GLint64EXT)z; \
    packed_data->args.a5 = (GLint64EXT)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform4i64vNV(location, count, value) ({ \
    glUniform4i64vNV_PACKED *packed_data = malloc(sizeof(glUniform4i64vNV_PACKED)); \
    packed_data->index = glUniform4i64vNV_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLint64EXT *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform4iARB(location, v0, v1, v2, v3) ({ \
    glUniform4iARB_PACKED *packed_data = malloc(sizeof(glUniform4iARB_PACKED)); \
    packed_data->index = glUniform4iARB_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLint)v0; \
    packed_data->args.a3 = (GLint)v1; \
    packed_data->args.a4 = (GLint)v2; \
    packed_data->args.a5 = (GLint)v3; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform4iv(location, count, value) ({ \
    glUniform4iv_PACKED *packed_data = malloc(sizeof(glUniform4iv_PACKED)); \
    packed_data->index = glUniform4iv_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLint *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform4ivARB(location, count, value) ({ \
    glUniform4ivARB_PACKED *packed_data = malloc(sizeof(glUniform4ivARB_PACKED)); \
    packed_data->index = glUniform4ivARB_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLint *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform4ui(location, v0, v1, v2, v3) ({ \
    glUniform4ui_PACKED *packed_data = malloc(sizeof(glUniform4ui_PACKED)); \
    packed_data->index = glUniform4ui_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLuint)v0; \
    packed_data->args.a3 = (GLuint)v1; \
    packed_data->args.a4 = (GLuint)v2; \
    packed_data->args.a5 = (GLuint)v3; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform4ui64NV(location, x, y, z, w) ({ \
    glUniform4ui64NV_PACKED *packed_data = malloc(sizeof(glUniform4ui64NV_PACKED)); \
    packed_data->index = glUniform4ui64NV_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLuint64EXT)x; \
    packed_data->args.a3 = (GLuint64EXT)y; \
    packed_data->args.a4 = (GLuint64EXT)z; \
    packed_data->args.a5 = (GLuint64EXT)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform4ui64vNV(location, count, value) ({ \
    glUniform4ui64vNV_PACKED *packed_data = malloc(sizeof(glUniform4ui64vNV_PACKED)); \
    packed_data->index = glUniform4ui64vNV_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLuint64EXT *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform4uiEXT(location, v0, v1, v2, v3) ({ \
    glUniform4uiEXT_PACKED *packed_data = malloc(sizeof(glUniform4uiEXT_PACKED)); \
    packed_data->index = glUniform4uiEXT_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLuint)v0; \
    packed_data->args.a3 = (GLuint)v1; \
    packed_data->args.a4 = (GLuint)v2; \
    packed_data->args.a5 = (GLuint)v3; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform4uiv(location, count, value) ({ \
    glUniform4uiv_PACKED *packed_data = malloc(sizeof(glUniform4uiv_PACKED)); \
    packed_data->index = glUniform4uiv_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLuint *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniform4uivEXT(location, count, value) ({ \
    glUniform4uivEXT_PACKED *packed_data = malloc(sizeof(glUniform4uivEXT_PACKED)); \
    packed_data->index = glUniform4uivEXT_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLuint *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding) ({ \
    glUniformBlockBinding_PACKED *packed_data = malloc(sizeof(glUniformBlockBinding_PACKED)); \
    packed_data->index = glUniformBlockBinding_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLuint)uniformBlockIndex; \
    packed_data->args.a3 = (GLuint)uniformBlockBinding; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniformBufferEXT(program, location, buffer) ({ \
    glUniformBufferEXT_PACKED *packed_data = malloc(sizeof(glUniformBufferEXT_PACKED)); \
    packed_data->index = glUniformBufferEXT_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    packed_data->args.a2 = (GLint)location; \
    packed_data->args.a3 = (GLuint)buffer; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniformHandleui64NV(location, value) ({ \
    glUniformHandleui64NV_PACKED *packed_data = malloc(sizeof(glUniformHandleui64NV_PACKED)); \
    packed_data->index = glUniformHandleui64NV_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLuint64)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniformHandleui64vNV(location, count, value) ({ \
    glUniformHandleui64vNV_PACKED *packed_data = malloc(sizeof(glUniformHandleui64vNV_PACKED)); \
    packed_data->index = glUniformHandleui64vNV_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLuint64 *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniformMatrix2dv(location, count, transpose, value) ({ \
    glUniformMatrix2dv_PACKED *packed_data = malloc(sizeof(glUniformMatrix2dv_PACKED)); \
    packed_data->index = glUniformMatrix2dv_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLboolean)transpose; \
    packed_data->args.a4 = (GLdouble *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniformMatrix2fv(location, count, transpose, value) ({ \
    glUniformMatrix2fv_PACKED *packed_data = malloc(sizeof(glUniformMatrix2fv_PACKED)); \
    packed_data->index = glUniformMatrix2fv_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLboolean)transpose; \
    packed_data->args.a4 = (GLfloat *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniformMatrix2fvARB(location, count, transpose, value) ({ \
    glUniformMatrix2fvARB_PACKED *packed_data = malloc(sizeof(glUniformMatrix2fvARB_PACKED)); \
    packed_data->index = glUniformMatrix2fvARB_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLboolean)transpose; \
    packed_data->args.a4 = (GLfloat *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniformMatrix2x3dv(location, count, transpose, value) ({ \
    glUniformMatrix2x3dv_PACKED *packed_data = malloc(sizeof(glUniformMatrix2x3dv_PACKED)); \
    packed_data->index = glUniformMatrix2x3dv_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLboolean)transpose; \
    packed_data->args.a4 = (GLdouble *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniformMatrix2x3fv(location, count, transpose, value) ({ \
    glUniformMatrix2x3fv_PACKED *packed_data = malloc(sizeof(glUniformMatrix2x3fv_PACKED)); \
    packed_data->index = glUniformMatrix2x3fv_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLboolean)transpose; \
    packed_data->args.a4 = (GLfloat *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniformMatrix2x4dv(location, count, transpose, value) ({ \
    glUniformMatrix2x4dv_PACKED *packed_data = malloc(sizeof(glUniformMatrix2x4dv_PACKED)); \
    packed_data->index = glUniformMatrix2x4dv_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLboolean)transpose; \
    packed_data->args.a4 = (GLdouble *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniformMatrix2x4fv(location, count, transpose, value) ({ \
    glUniformMatrix2x4fv_PACKED *packed_data = malloc(sizeof(glUniformMatrix2x4fv_PACKED)); \
    packed_data->index = glUniformMatrix2x4fv_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLboolean)transpose; \
    packed_data->args.a4 = (GLfloat *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniformMatrix3dv(location, count, transpose, value) ({ \
    glUniformMatrix3dv_PACKED *packed_data = malloc(sizeof(glUniformMatrix3dv_PACKED)); \
    packed_data->index = glUniformMatrix3dv_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLboolean)transpose; \
    packed_data->args.a4 = (GLdouble *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniformMatrix3fv(location, count, transpose, value) ({ \
    glUniformMatrix3fv_PACKED *packed_data = malloc(sizeof(glUniformMatrix3fv_PACKED)); \
    packed_data->index = glUniformMatrix3fv_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLboolean)transpose; \
    packed_data->args.a4 = (GLfloat *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniformMatrix3fvARB(location, count, transpose, value) ({ \
    glUniformMatrix3fvARB_PACKED *packed_data = malloc(sizeof(glUniformMatrix3fvARB_PACKED)); \
    packed_data->index = glUniformMatrix3fvARB_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLboolean)transpose; \
    packed_data->args.a4 = (GLfloat *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniformMatrix3x2dv(location, count, transpose, value) ({ \
    glUniformMatrix3x2dv_PACKED *packed_data = malloc(sizeof(glUniformMatrix3x2dv_PACKED)); \
    packed_data->index = glUniformMatrix3x2dv_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLboolean)transpose; \
    packed_data->args.a4 = (GLdouble *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniformMatrix3x2fv(location, count, transpose, value) ({ \
    glUniformMatrix3x2fv_PACKED *packed_data = malloc(sizeof(glUniformMatrix3x2fv_PACKED)); \
    packed_data->index = glUniformMatrix3x2fv_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLboolean)transpose; \
    packed_data->args.a4 = (GLfloat *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniformMatrix3x4dv(location, count, transpose, value) ({ \
    glUniformMatrix3x4dv_PACKED *packed_data = malloc(sizeof(glUniformMatrix3x4dv_PACKED)); \
    packed_data->index = glUniformMatrix3x4dv_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLboolean)transpose; \
    packed_data->args.a4 = (GLdouble *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniformMatrix3x4fv(location, count, transpose, value) ({ \
    glUniformMatrix3x4fv_PACKED *packed_data = malloc(sizeof(glUniformMatrix3x4fv_PACKED)); \
    packed_data->index = glUniformMatrix3x4fv_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLboolean)transpose; \
    packed_data->args.a4 = (GLfloat *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniformMatrix4dv(location, count, transpose, value) ({ \
    glUniformMatrix4dv_PACKED *packed_data = malloc(sizeof(glUniformMatrix4dv_PACKED)); \
    packed_data->index = glUniformMatrix4dv_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLboolean)transpose; \
    packed_data->args.a4 = (GLdouble *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniformMatrix4fv(location, count, transpose, value) ({ \
    glUniformMatrix4fv_PACKED *packed_data = malloc(sizeof(glUniformMatrix4fv_PACKED)); \
    packed_data->index = glUniformMatrix4fv_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLboolean)transpose; \
    packed_data->args.a4 = (GLfloat *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniformMatrix4fvARB(location, count, transpose, value) ({ \
    glUniformMatrix4fvARB_PACKED *packed_data = malloc(sizeof(glUniformMatrix4fvARB_PACKED)); \
    packed_data->index = glUniformMatrix4fvARB_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLboolean)transpose; \
    packed_data->args.a4 = (GLfloat *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniformMatrix4x2dv(location, count, transpose, value) ({ \
    glUniformMatrix4x2dv_PACKED *packed_data = malloc(sizeof(glUniformMatrix4x2dv_PACKED)); \
    packed_data->index = glUniformMatrix4x2dv_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLboolean)transpose; \
    packed_data->args.a4 = (GLdouble *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniformMatrix4x2fv(location, count, transpose, value) ({ \
    glUniformMatrix4x2fv_PACKED *packed_data = malloc(sizeof(glUniformMatrix4x2fv_PACKED)); \
    packed_data->index = glUniformMatrix4x2fv_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLboolean)transpose; \
    packed_data->args.a4 = (GLfloat *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniformMatrix4x3dv(location, count, transpose, value) ({ \
    glUniformMatrix4x3dv_PACKED *packed_data = malloc(sizeof(glUniformMatrix4x3dv_PACKED)); \
    packed_data->index = glUniformMatrix4x3dv_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLboolean)transpose; \
    packed_data->args.a4 = (GLdouble *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniformMatrix4x3fv(location, count, transpose, value) ({ \
    glUniformMatrix4x3fv_PACKED *packed_data = malloc(sizeof(glUniformMatrix4x3fv_PACKED)); \
    packed_data->index = glUniformMatrix4x3fv_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLboolean)transpose; \
    packed_data->args.a4 = (GLfloat *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniformSubroutinesuiv(shadertype, count, indices) ({ \
    glUniformSubroutinesuiv_PACKED *packed_data = malloc(sizeof(glUniformSubroutinesuiv_PACKED)); \
    packed_data->index = glUniformSubroutinesuiv_INDEX; \
    packed_data->args.a1 = (GLenum)shadertype; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLuint *)indices; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniformui64NV(location, value) ({ \
    glUniformui64NV_PACKED *packed_data = malloc(sizeof(glUniformui64NV_PACKED)); \
    packed_data->index = glUniformui64NV_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLuint64EXT)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUniformui64vNV(location, count, value) ({ \
    glUniformui64vNV_PACKED *packed_data = malloc(sizeof(glUniformui64vNV_PACKED)); \
    packed_data->index = glUniformui64vNV_INDEX; \
    packed_data->args.a1 = (GLint)location; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLuint64EXT *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glUnlockArraysEXT() ({ \
    glUnlockArraysEXT_PACKED *packed_data = malloc(sizeof(glUnlockArraysEXT_PACKED)); \
    packed_data->index = glUnlockArraysEXT_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glUnmapBuffer(target) ({ \
    glUnmapBuffer_PACKED *packed_data = malloc(sizeof(glUnmapBuffer_PACKED)); \
    packed_data->index = glUnmapBuffer_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    (packed_call_t *)packed_data; \
})
#define pack_glUnmapBufferARB(target) ({ \
    glUnmapBufferARB_PACKED *packed_data = malloc(sizeof(glUnmapBufferARB_PACKED)); \
    packed_data->index = glUnmapBufferARB_INDEX; \
    packed_data->args.a1 = (GLenum)target; \
    (packed_call_t *)packed_data; \
})
#define pack_glUnmapNamedBufferEXT(buffer) ({ \
    glUnmapNamedBufferEXT_PACKED *packed_data = malloc(sizeof(glUnmapNamedBufferEXT_PACKED)); \
    packed_data->index = glUnmapNamedBufferEXT_INDEX; \
    packed_data->args.a1 = (GLuint)buffer; \
    (packed_call_t *)packed_data; \
})
#define pack_glUnmapObjectBufferATI(buffer) ({ \
    glUnmapObjectBufferATI_PACKED *packed_data = malloc(sizeof(glUnmapObjectBufferATI_PACKED)); \
    packed_data->index = glUnmapObjectBufferATI_INDEX; \
    packed_data->args.a1 = (GLuint)buffer; \
    (packed_call_t *)packed_data; \
})
#define pack_glUnmapTexture2DINTEL(texture, level) ({ \
    glUnmapTexture2DINTEL_PACKED *packed_data = malloc(sizeof(glUnmapTexture2DINTEL_PACKED)); \
    packed_data->index = glUnmapTexture2DINTEL_INDEX; \
    packed_data->args.a1 = (GLuint)texture; \
    packed_data->args.a2 = (GLint)level; \
    (packed_call_t *)packed_data; \
})
#define pack_glUpdateObjectBufferATI(buffer, offset, size, pointer, preserve) ({ \
    glUpdateObjectBufferATI_PACKED *packed_data = malloc(sizeof(glUpdateObjectBufferATI_PACKED)); \
    packed_data->index = glUpdateObjectBufferATI_INDEX; \
    packed_data->args.a1 = (GLuint)buffer; \
    packed_data->args.a2 = (GLuint)offset; \
    packed_data->args.a3 = (GLsizei)size; \
    packed_data->args.a4 = (GLvoid *)pointer; \
    packed_data->args.a5 = (GLenum)preserve; \
    (packed_call_t *)packed_data; \
})
#define pack_glUseProgram(program) ({ \
    glUseProgram_PACKED *packed_data = malloc(sizeof(glUseProgram_PACKED)); \
    packed_data->index = glUseProgram_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    (packed_call_t *)packed_data; \
})
#define pack_glUseProgramObjectARB(programObj) ({ \
    glUseProgramObjectARB_PACKED *packed_data = malloc(sizeof(glUseProgramObjectARB_PACKED)); \
    packed_data->index = glUseProgramObjectARB_INDEX; \
    packed_data->args.a1 = (GLhandleARB)programObj; \
    (packed_call_t *)packed_data; \
})
#define pack_glUseProgramStages(pipeline, stages, program) ({ \
    glUseProgramStages_PACKED *packed_data = malloc(sizeof(glUseProgramStages_PACKED)); \
    packed_data->index = glUseProgramStages_INDEX; \
    packed_data->args.a1 = (GLuint)pipeline; \
    packed_data->args.a2 = (GLbitfield)stages; \
    packed_data->args.a3 = (GLuint)program; \
    (packed_call_t *)packed_data; \
})
#define pack_glUseShaderProgramEXT(type, program) ({ \
    glUseShaderProgramEXT_PACKED *packed_data = malloc(sizeof(glUseShaderProgramEXT_PACKED)); \
    packed_data->index = glUseShaderProgramEXT_INDEX; \
    packed_data->args.a1 = (GLenum)type; \
    packed_data->args.a2 = (GLuint)program; \
    (packed_call_t *)packed_data; \
})
#define pack_glVDPAUFiniNV() ({ \
    glVDPAUFiniNV_PACKED *packed_data = malloc(sizeof(glVDPAUFiniNV_PACKED)); \
    packed_data->index = glVDPAUFiniNV_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glVDPAUGetSurfaceivNV(surface, pname, bufSize, length, values) ({ \
    glVDPAUGetSurfaceivNV_PACKED *packed_data = malloc(sizeof(glVDPAUGetSurfaceivNV_PACKED)); \
    packed_data->index = glVDPAUGetSurfaceivNV_INDEX; \
    packed_data->args.a1 = (GLvdpauSurfaceNV)surface; \
    packed_data->args.a2 = (GLenum)pname; \
    packed_data->args.a3 = (GLsizei)bufSize; \
    packed_data->args.a4 = (GLsizei *)length; \
    packed_data->args.a5 = (GLint *)values; \
    (packed_call_t *)packed_data; \
})
#define pack_glVDPAUInitNV(vdpDevice, getProcAddress) ({ \
    glVDPAUInitNV_PACKED *packed_data = malloc(sizeof(glVDPAUInitNV_PACKED)); \
    packed_data->index = glVDPAUInitNV_INDEX; \
    packed_data->args.a1 = (GLvoid *)vdpDevice; \
    packed_data->args.a2 = (GLvoid *)getProcAddress; \
    (packed_call_t *)packed_data; \
})
#define pack_glVDPAUIsSurfaceNV(surface) ({ \
    glVDPAUIsSurfaceNV_PACKED *packed_data = malloc(sizeof(glVDPAUIsSurfaceNV_PACKED)); \
    packed_data->index = glVDPAUIsSurfaceNV_INDEX; \
    packed_data->args.a1 = (GLvdpauSurfaceNV)surface; \
    (packed_call_t *)packed_data; \
})
#define pack_glVDPAUMapSurfacesNV(numSurfaces, surfaces) ({ \
    glVDPAUMapSurfacesNV_PACKED *packed_data = malloc(sizeof(glVDPAUMapSurfacesNV_PACKED)); \
    packed_data->index = glVDPAUMapSurfacesNV_INDEX; \
    packed_data->args.a1 = (GLsizei)numSurfaces; \
    packed_data->args.a2 = (GLvdpauSurfaceNV *)surfaces; \
    (packed_call_t *)packed_data; \
})
#define pack_glVDPAURegisterOutputSurfaceNV(vdpSurface, target, numTextureNames, textureNames) ({ \
    glVDPAURegisterOutputSurfaceNV_PACKED *packed_data = malloc(sizeof(glVDPAURegisterOutputSurfaceNV_PACKED)); \
    packed_data->index = glVDPAURegisterOutputSurfaceNV_INDEX; \
    packed_data->args.a1 = (GLvoid *)vdpSurface; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLsizei)numTextureNames; \
    packed_data->args.a4 = (GLuint *)textureNames; \
    (packed_call_t *)packed_data; \
})
#define pack_glVDPAURegisterVideoSurfaceNV(vdpSurface, target, numTextureNames, textureNames) ({ \
    glVDPAURegisterVideoSurfaceNV_PACKED *packed_data = malloc(sizeof(glVDPAURegisterVideoSurfaceNV_PACKED)); \
    packed_data->index = glVDPAURegisterVideoSurfaceNV_INDEX; \
    packed_data->args.a1 = (GLvoid *)vdpSurface; \
    packed_data->args.a2 = (GLenum)target; \
    packed_data->args.a3 = (GLsizei)numTextureNames; \
    packed_data->args.a4 = (GLuint *)textureNames; \
    (packed_call_t *)packed_data; \
})
#define pack_glVDPAUSurfaceAccessNV(surface, access) ({ \
    glVDPAUSurfaceAccessNV_PACKED *packed_data = malloc(sizeof(glVDPAUSurfaceAccessNV_PACKED)); \
    packed_data->index = glVDPAUSurfaceAccessNV_INDEX; \
    packed_data->args.a1 = (GLvdpauSurfaceNV)surface; \
    packed_data->args.a2 = (GLenum)access; \
    (packed_call_t *)packed_data; \
})
#define pack_glVDPAUUnmapSurfacesNV(numSurface, surfaces) ({ \
    glVDPAUUnmapSurfacesNV_PACKED *packed_data = malloc(sizeof(glVDPAUUnmapSurfacesNV_PACKED)); \
    packed_data->index = glVDPAUUnmapSurfacesNV_INDEX; \
    packed_data->args.a1 = (GLsizei)numSurface; \
    packed_data->args.a2 = (GLvdpauSurfaceNV *)surfaces; \
    (packed_call_t *)packed_data; \
})
#define pack_glVDPAUUnregisterSurfaceNV(surface) ({ \
    glVDPAUUnregisterSurfaceNV_PACKED *packed_data = malloc(sizeof(glVDPAUUnregisterSurfaceNV_PACKED)); \
    packed_data->index = glVDPAUUnregisterSurfaceNV_INDEX; \
    packed_data->args.a1 = (GLvdpauSurfaceNV)surface; \
    (packed_call_t *)packed_data; \
})
#define pack_glValidateProgram(program) ({ \
    glValidateProgram_PACKED *packed_data = malloc(sizeof(glValidateProgram_PACKED)); \
    packed_data->index = glValidateProgram_INDEX; \
    packed_data->args.a1 = (GLuint)program; \
    (packed_call_t *)packed_data; \
})
#define pack_glValidateProgramARB(programObj) ({ \
    glValidateProgramARB_PACKED *packed_data = malloc(sizeof(glValidateProgramARB_PACKED)); \
    packed_data->index = glValidateProgramARB_INDEX; \
    packed_data->args.a1 = (GLhandleARB)programObj; \
    (packed_call_t *)packed_data; \
})
#define pack_glValidateProgramPipeline(pipeline) ({ \
    glValidateProgramPipeline_PACKED *packed_data = malloc(sizeof(glValidateProgramPipeline_PACKED)); \
    packed_data->index = glValidateProgramPipeline_INDEX; \
    packed_data->args.a1 = (GLuint)pipeline; \
    (packed_call_t *)packed_data; \
})
#define pack_glVariantArrayObjectATI(id, type, stride, buffer, offset) ({ \
    glVariantArrayObjectATI_PACKED *packed_data = malloc(sizeof(glVariantArrayObjectATI_PACKED)); \
    packed_data->index = glVariantArrayObjectATI_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    packed_data->args.a2 = (GLenum)type; \
    packed_data->args.a3 = (GLsizei)stride; \
    packed_data->args.a4 = (GLuint)buffer; \
    packed_data->args.a5 = (GLuint)offset; \
    (packed_call_t *)packed_data; \
})
#define pack_glVariantPointerEXT(id, type, stride, addr) ({ \
    glVariantPointerEXT_PACKED *packed_data = malloc(sizeof(glVariantPointerEXT_PACKED)); \
    packed_data->index = glVariantPointerEXT_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    packed_data->args.a2 = (GLenum)type; \
    packed_data->args.a3 = (GLuint)stride; \
    packed_data->args.a4 = (GLvoid *)addr; \
    (packed_call_t *)packed_data; \
})
#define pack_glVariantbvEXT(id, addr) ({ \
    glVariantbvEXT_PACKED *packed_data = malloc(sizeof(glVariantbvEXT_PACKED)); \
    packed_data->index = glVariantbvEXT_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    packed_data->args.a2 = (GLbyte *)addr; \
    (packed_call_t *)packed_data; \
})
#define pack_glVariantdvEXT(id, addr) ({ \
    glVariantdvEXT_PACKED *packed_data = malloc(sizeof(glVariantdvEXT_PACKED)); \
    packed_data->index = glVariantdvEXT_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    packed_data->args.a2 = (GLdouble *)addr; \
    (packed_call_t *)packed_data; \
})
#define pack_glVariantfvEXT(id, addr) ({ \
    glVariantfvEXT_PACKED *packed_data = malloc(sizeof(glVariantfvEXT_PACKED)); \
    packed_data->index = glVariantfvEXT_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    packed_data->args.a2 = (GLfloat *)addr; \
    (packed_call_t *)packed_data; \
})
#define pack_glVariantivEXT(id, addr) ({ \
    glVariantivEXT_PACKED *packed_data = malloc(sizeof(glVariantivEXT_PACKED)); \
    packed_data->index = glVariantivEXT_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    packed_data->args.a2 = (GLint *)addr; \
    (packed_call_t *)packed_data; \
})
#define pack_glVariantsvEXT(id, addr) ({ \
    glVariantsvEXT_PACKED *packed_data = malloc(sizeof(glVariantsvEXT_PACKED)); \
    packed_data->index = glVariantsvEXT_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    packed_data->args.a2 = (GLshort *)addr; \
    (packed_call_t *)packed_data; \
})
#define pack_glVariantubvEXT(id, addr) ({ \
    glVariantubvEXT_PACKED *packed_data = malloc(sizeof(glVariantubvEXT_PACKED)); \
    packed_data->index = glVariantubvEXT_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    packed_data->args.a2 = (GLubyte *)addr; \
    (packed_call_t *)packed_data; \
})
#define pack_glVariantuivEXT(id, addr) ({ \
    glVariantuivEXT_PACKED *packed_data = malloc(sizeof(glVariantuivEXT_PACKED)); \
    packed_data->index = glVariantuivEXT_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    packed_data->args.a2 = (GLuint *)addr; \
    (packed_call_t *)packed_data; \
})
#define pack_glVariantusvEXT(id, addr) ({ \
    glVariantusvEXT_PACKED *packed_data = malloc(sizeof(glVariantusvEXT_PACKED)); \
    packed_data->index = glVariantusvEXT_INDEX; \
    packed_data->args.a1 = (GLuint)id; \
    packed_data->args.a2 = (GLushort *)addr; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertex2bOES(x) ({ \
    glVertex2bOES_PACKED *packed_data = malloc(sizeof(glVertex2bOES_PACKED)); \
    packed_data->index = glVertex2bOES_INDEX; \
    packed_data->args.a1 = (GLbyte)x; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertex2bvOES(coords) ({ \
    glVertex2bvOES_PACKED *packed_data = malloc(sizeof(glVertex2bvOES_PACKED)); \
    packed_data->index = glVertex2bvOES_INDEX; \
    packed_data->args.a1 = (GLbyte *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertex2d(x, y) ({ \
    glVertex2d_PACKED *packed_data = malloc(sizeof(glVertex2d_PACKED)); \
    packed_data->index = glVertex2d_INDEX; \
    packed_data->args.a1 = (GLdouble)x; \
    packed_data->args.a2 = (GLdouble)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertex2dv(v) ({ \
    glVertex2dv_PACKED *packed_data = malloc(sizeof(glVertex2dv_PACKED)); \
    packed_data->index = glVertex2dv_INDEX; \
    packed_data->args.a1 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertex2f(x, y) ({ \
    glVertex2f_PACKED *packed_data = malloc(sizeof(glVertex2f_PACKED)); \
    packed_data->index = glVertex2f_INDEX; \
    packed_data->args.a1 = (GLfloat)x; \
    packed_data->args.a2 = (GLfloat)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertex2fv(v) ({ \
    glVertex2fv_PACKED *packed_data = malloc(sizeof(glVertex2fv_PACKED)); \
    packed_data->index = glVertex2fv_INDEX; \
    packed_data->args.a1 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertex2hNV(x, y) ({ \
    glVertex2hNV_PACKED *packed_data = malloc(sizeof(glVertex2hNV_PACKED)); \
    packed_data->index = glVertex2hNV_INDEX; \
    packed_data->args.a1 = (GLhalfNV)x; \
    packed_data->args.a2 = (GLhalfNV)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertex2hvNV(v) ({ \
    glVertex2hvNV_PACKED *packed_data = malloc(sizeof(glVertex2hvNV_PACKED)); \
    packed_data->index = glVertex2hvNV_INDEX; \
    packed_data->args.a1 = (GLhalfNV *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertex2i(x, y) ({ \
    glVertex2i_PACKED *packed_data = malloc(sizeof(glVertex2i_PACKED)); \
    packed_data->index = glVertex2i_INDEX; \
    packed_data->args.a1 = (GLint)x; \
    packed_data->args.a2 = (GLint)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertex2iv(v) ({ \
    glVertex2iv_PACKED *packed_data = malloc(sizeof(glVertex2iv_PACKED)); \
    packed_data->index = glVertex2iv_INDEX; \
    packed_data->args.a1 = (GLint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertex2s(x, y) ({ \
    glVertex2s_PACKED *packed_data = malloc(sizeof(glVertex2s_PACKED)); \
    packed_data->index = glVertex2s_INDEX; \
    packed_data->args.a1 = (GLshort)x; \
    packed_data->args.a2 = (GLshort)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertex2sv(v) ({ \
    glVertex2sv_PACKED *packed_data = malloc(sizeof(glVertex2sv_PACKED)); \
    packed_data->index = glVertex2sv_INDEX; \
    packed_data->args.a1 = (GLshort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertex2xOES(x) ({ \
    glVertex2xOES_PACKED *packed_data = malloc(sizeof(glVertex2xOES_PACKED)); \
    packed_data->index = glVertex2xOES_INDEX; \
    packed_data->args.a1 = (GLfixed)x; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertex2xvOES(coords) ({ \
    glVertex2xvOES_PACKED *packed_data = malloc(sizeof(glVertex2xvOES_PACKED)); \
    packed_data->index = glVertex2xvOES_INDEX; \
    packed_data->args.a1 = (GLfixed *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertex3bOES(x, y) ({ \
    glVertex3bOES_PACKED *packed_data = malloc(sizeof(glVertex3bOES_PACKED)); \
    packed_data->index = glVertex3bOES_INDEX; \
    packed_data->args.a1 = (GLbyte)x; \
    packed_data->args.a2 = (GLbyte)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertex3bvOES(coords) ({ \
    glVertex3bvOES_PACKED *packed_data = malloc(sizeof(glVertex3bvOES_PACKED)); \
    packed_data->index = glVertex3bvOES_INDEX; \
    packed_data->args.a1 = (GLbyte *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertex3d(x, y, z) ({ \
    glVertex3d_PACKED *packed_data = malloc(sizeof(glVertex3d_PACKED)); \
    packed_data->index = glVertex3d_INDEX; \
    packed_data->args.a1 = (GLdouble)x; \
    packed_data->args.a2 = (GLdouble)y; \
    packed_data->args.a3 = (GLdouble)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertex3dv(v) ({ \
    glVertex3dv_PACKED *packed_data = malloc(sizeof(glVertex3dv_PACKED)); \
    packed_data->index = glVertex3dv_INDEX; \
    packed_data->args.a1 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertex3f(x, y, z) ({ \
    glVertex3f_PACKED *packed_data = malloc(sizeof(glVertex3f_PACKED)); \
    packed_data->index = glVertex3f_INDEX; \
    packed_data->args.a1 = (GLfloat)x; \
    packed_data->args.a2 = (GLfloat)y; \
    packed_data->args.a3 = (GLfloat)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertex3fv(v) ({ \
    glVertex3fv_PACKED *packed_data = malloc(sizeof(glVertex3fv_PACKED)); \
    packed_data->index = glVertex3fv_INDEX; \
    packed_data->args.a1 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertex3hNV(x, y, z) ({ \
    glVertex3hNV_PACKED *packed_data = malloc(sizeof(glVertex3hNV_PACKED)); \
    packed_data->index = glVertex3hNV_INDEX; \
    packed_data->args.a1 = (GLhalfNV)x; \
    packed_data->args.a2 = (GLhalfNV)y; \
    packed_data->args.a3 = (GLhalfNV)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertex3hvNV(v) ({ \
    glVertex3hvNV_PACKED *packed_data = malloc(sizeof(glVertex3hvNV_PACKED)); \
    packed_data->index = glVertex3hvNV_INDEX; \
    packed_data->args.a1 = (GLhalfNV *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertex3i(x, y, z) ({ \
    glVertex3i_PACKED *packed_data = malloc(sizeof(glVertex3i_PACKED)); \
    packed_data->index = glVertex3i_INDEX; \
    packed_data->args.a1 = (GLint)x; \
    packed_data->args.a2 = (GLint)y; \
    packed_data->args.a3 = (GLint)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertex3iv(v) ({ \
    glVertex3iv_PACKED *packed_data = malloc(sizeof(glVertex3iv_PACKED)); \
    packed_data->index = glVertex3iv_INDEX; \
    packed_data->args.a1 = (GLint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertex3s(x, y, z) ({ \
    glVertex3s_PACKED *packed_data = malloc(sizeof(glVertex3s_PACKED)); \
    packed_data->index = glVertex3s_INDEX; \
    packed_data->args.a1 = (GLshort)x; \
    packed_data->args.a2 = (GLshort)y; \
    packed_data->args.a3 = (GLshort)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertex3sv(v) ({ \
    glVertex3sv_PACKED *packed_data = malloc(sizeof(glVertex3sv_PACKED)); \
    packed_data->index = glVertex3sv_INDEX; \
    packed_data->args.a1 = (GLshort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertex3xOES(x, y) ({ \
    glVertex3xOES_PACKED *packed_data = malloc(sizeof(glVertex3xOES_PACKED)); \
    packed_data->index = glVertex3xOES_INDEX; \
    packed_data->args.a1 = (GLfixed)x; \
    packed_data->args.a2 = (GLfixed)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertex3xvOES(coords) ({ \
    glVertex3xvOES_PACKED *packed_data = malloc(sizeof(glVertex3xvOES_PACKED)); \
    packed_data->index = glVertex3xvOES_INDEX; \
    packed_data->args.a1 = (GLfixed *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertex4bOES(x, y, z) ({ \
    glVertex4bOES_PACKED *packed_data = malloc(sizeof(glVertex4bOES_PACKED)); \
    packed_data->index = glVertex4bOES_INDEX; \
    packed_data->args.a1 = (GLbyte)x; \
    packed_data->args.a2 = (GLbyte)y; \
    packed_data->args.a3 = (GLbyte)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertex4bvOES(coords) ({ \
    glVertex4bvOES_PACKED *packed_data = malloc(sizeof(glVertex4bvOES_PACKED)); \
    packed_data->index = glVertex4bvOES_INDEX; \
    packed_data->args.a1 = (GLbyte *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertex4d(x, y, z, w) ({ \
    glVertex4d_PACKED *packed_data = malloc(sizeof(glVertex4d_PACKED)); \
    packed_data->index = glVertex4d_INDEX; \
    packed_data->args.a1 = (GLdouble)x; \
    packed_data->args.a2 = (GLdouble)y; \
    packed_data->args.a3 = (GLdouble)z; \
    packed_data->args.a4 = (GLdouble)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertex4dv(v) ({ \
    glVertex4dv_PACKED *packed_data = malloc(sizeof(glVertex4dv_PACKED)); \
    packed_data->index = glVertex4dv_INDEX; \
    packed_data->args.a1 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertex4f(x, y, z, w) ({ \
    glVertex4f_PACKED *packed_data = malloc(sizeof(glVertex4f_PACKED)); \
    packed_data->index = glVertex4f_INDEX; \
    packed_data->args.a1 = (GLfloat)x; \
    packed_data->args.a2 = (GLfloat)y; \
    packed_data->args.a3 = (GLfloat)z; \
    packed_data->args.a4 = (GLfloat)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertex4fv(v) ({ \
    glVertex4fv_PACKED *packed_data = malloc(sizeof(glVertex4fv_PACKED)); \
    packed_data->index = glVertex4fv_INDEX; \
    packed_data->args.a1 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertex4hNV(x, y, z, w) ({ \
    glVertex4hNV_PACKED *packed_data = malloc(sizeof(glVertex4hNV_PACKED)); \
    packed_data->index = glVertex4hNV_INDEX; \
    packed_data->args.a1 = (GLhalfNV)x; \
    packed_data->args.a2 = (GLhalfNV)y; \
    packed_data->args.a3 = (GLhalfNV)z; \
    packed_data->args.a4 = (GLhalfNV)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertex4hvNV(v) ({ \
    glVertex4hvNV_PACKED *packed_data = malloc(sizeof(glVertex4hvNV_PACKED)); \
    packed_data->index = glVertex4hvNV_INDEX; \
    packed_data->args.a1 = (GLhalfNV *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertex4i(x, y, z, w) ({ \
    glVertex4i_PACKED *packed_data = malloc(sizeof(glVertex4i_PACKED)); \
    packed_data->index = glVertex4i_INDEX; \
    packed_data->args.a1 = (GLint)x; \
    packed_data->args.a2 = (GLint)y; \
    packed_data->args.a3 = (GLint)z; \
    packed_data->args.a4 = (GLint)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertex4iv(v) ({ \
    glVertex4iv_PACKED *packed_data = malloc(sizeof(glVertex4iv_PACKED)); \
    packed_data->index = glVertex4iv_INDEX; \
    packed_data->args.a1 = (GLint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertex4s(x, y, z, w) ({ \
    glVertex4s_PACKED *packed_data = malloc(sizeof(glVertex4s_PACKED)); \
    packed_data->index = glVertex4s_INDEX; \
    packed_data->args.a1 = (GLshort)x; \
    packed_data->args.a2 = (GLshort)y; \
    packed_data->args.a3 = (GLshort)z; \
    packed_data->args.a4 = (GLshort)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertex4sv(v) ({ \
    glVertex4sv_PACKED *packed_data = malloc(sizeof(glVertex4sv_PACKED)); \
    packed_data->index = glVertex4sv_INDEX; \
    packed_data->args.a1 = (GLshort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertex4xOES(x, y, z) ({ \
    glVertex4xOES_PACKED *packed_data = malloc(sizeof(glVertex4xOES_PACKED)); \
    packed_data->index = glVertex4xOES_INDEX; \
    packed_data->args.a1 = (GLfixed)x; \
    packed_data->args.a2 = (GLfixed)y; \
    packed_data->args.a3 = (GLfixed)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertex4xvOES(coords) ({ \
    glVertex4xvOES_PACKED *packed_data = malloc(sizeof(glVertex4xvOES_PACKED)); \
    packed_data->index = glVertex4xvOES_INDEX; \
    packed_data->args.a1 = (GLfixed *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexArrayBindVertexBufferEXT(vaobj, bindingindex, buffer, offset, stride) ({ \
    glVertexArrayBindVertexBufferEXT_PACKED *packed_data = malloc(sizeof(glVertexArrayBindVertexBufferEXT_PACKED)); \
    packed_data->index = glVertexArrayBindVertexBufferEXT_INDEX; \
    packed_data->args.a1 = (GLuint)vaobj; \
    packed_data->args.a2 = (GLuint)bindingindex; \
    packed_data->args.a3 = (GLuint)buffer; \
    packed_data->args.a4 = (GLintptr)offset; \
    packed_data->args.a5 = (GLsizei)stride; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexArrayColorOffsetEXT(vaobj, buffer, size, type, stride, offset) ({ \
    glVertexArrayColorOffsetEXT_PACKED *packed_data = malloc(sizeof(glVertexArrayColorOffsetEXT_PACKED)); \
    packed_data->index = glVertexArrayColorOffsetEXT_INDEX; \
    packed_data->args.a1 = (GLuint)vaobj; \
    packed_data->args.a2 = (GLuint)buffer; \
    packed_data->args.a3 = (GLint)size; \
    packed_data->args.a4 = (GLenum)type; \
    packed_data->args.a5 = (GLsizei)stride; \
    packed_data->args.a6 = (GLintptr)offset; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexArrayEdgeFlagOffsetEXT(vaobj, buffer, stride, offset) ({ \
    glVertexArrayEdgeFlagOffsetEXT_PACKED *packed_data = malloc(sizeof(glVertexArrayEdgeFlagOffsetEXT_PACKED)); \
    packed_data->index = glVertexArrayEdgeFlagOffsetEXT_INDEX; \
    packed_data->args.a1 = (GLuint)vaobj; \
    packed_data->args.a2 = (GLuint)buffer; \
    packed_data->args.a3 = (GLsizei)stride; \
    packed_data->args.a4 = (GLintptr)offset; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexArrayFogCoordOffsetEXT(vaobj, buffer, type, stride, offset) ({ \
    glVertexArrayFogCoordOffsetEXT_PACKED *packed_data = malloc(sizeof(glVertexArrayFogCoordOffsetEXT_PACKED)); \
    packed_data->index = glVertexArrayFogCoordOffsetEXT_INDEX; \
    packed_data->args.a1 = (GLuint)vaobj; \
    packed_data->args.a2 = (GLuint)buffer; \
    packed_data->args.a3 = (GLenum)type; \
    packed_data->args.a4 = (GLsizei)stride; \
    packed_data->args.a5 = (GLintptr)offset; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexArrayIndexOffsetEXT(vaobj, buffer, type, stride, offset) ({ \
    glVertexArrayIndexOffsetEXT_PACKED *packed_data = malloc(sizeof(glVertexArrayIndexOffsetEXT_PACKED)); \
    packed_data->index = glVertexArrayIndexOffsetEXT_INDEX; \
    packed_data->args.a1 = (GLuint)vaobj; \
    packed_data->args.a2 = (GLuint)buffer; \
    packed_data->args.a3 = (GLenum)type; \
    packed_data->args.a4 = (GLsizei)stride; \
    packed_data->args.a5 = (GLintptr)offset; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexArrayMultiTexCoordOffsetEXT(vaobj, buffer, texunit, size, type, stride, offset) ({ \
    glVertexArrayMultiTexCoordOffsetEXT_PACKED *packed_data = malloc(sizeof(glVertexArrayMultiTexCoordOffsetEXT_PACKED)); \
    packed_data->index = glVertexArrayMultiTexCoordOffsetEXT_INDEX; \
    packed_data->args.a1 = (GLuint)vaobj; \
    packed_data->args.a2 = (GLuint)buffer; \
    packed_data->args.a3 = (GLenum)texunit; \
    packed_data->args.a4 = (GLint)size; \
    packed_data->args.a5 = (GLenum)type; \
    packed_data->args.a6 = (GLsizei)stride; \
    packed_data->args.a7 = (GLintptr)offset; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexArrayNormalOffsetEXT(vaobj, buffer, type, stride, offset) ({ \
    glVertexArrayNormalOffsetEXT_PACKED *packed_data = malloc(sizeof(glVertexArrayNormalOffsetEXT_PACKED)); \
    packed_data->index = glVertexArrayNormalOffsetEXT_INDEX; \
    packed_data->args.a1 = (GLuint)vaobj; \
    packed_data->args.a2 = (GLuint)buffer; \
    packed_data->args.a3 = (GLenum)type; \
    packed_data->args.a4 = (GLsizei)stride; \
    packed_data->args.a5 = (GLintptr)offset; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexArrayParameteriAPPLE(pname, param) ({ \
    glVertexArrayParameteriAPPLE_PACKED *packed_data = malloc(sizeof(glVertexArrayParameteriAPPLE_PACKED)); \
    packed_data->index = glVertexArrayParameteriAPPLE_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLint)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexArrayRangeAPPLE(length, pointer) ({ \
    glVertexArrayRangeAPPLE_PACKED *packed_data = malloc(sizeof(glVertexArrayRangeAPPLE_PACKED)); \
    packed_data->index = glVertexArrayRangeAPPLE_INDEX; \
    packed_data->args.a1 = (GLsizei)length; \
    packed_data->args.a2 = (GLvoid *)pointer; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexArrayRangeNV(length, pointer) ({ \
    glVertexArrayRangeNV_PACKED *packed_data = malloc(sizeof(glVertexArrayRangeNV_PACKED)); \
    packed_data->index = glVertexArrayRangeNV_INDEX; \
    packed_data->args.a1 = (GLsizei)length; \
    packed_data->args.a2 = (GLvoid *)pointer; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexArraySecondaryColorOffsetEXT(vaobj, buffer, size, type, stride, offset) ({ \
    glVertexArraySecondaryColorOffsetEXT_PACKED *packed_data = malloc(sizeof(glVertexArraySecondaryColorOffsetEXT_PACKED)); \
    packed_data->index = glVertexArraySecondaryColorOffsetEXT_INDEX; \
    packed_data->args.a1 = (GLuint)vaobj; \
    packed_data->args.a2 = (GLuint)buffer; \
    packed_data->args.a3 = (GLint)size; \
    packed_data->args.a4 = (GLenum)type; \
    packed_data->args.a5 = (GLsizei)stride; \
    packed_data->args.a6 = (GLintptr)offset; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexArrayTexCoordOffsetEXT(vaobj, buffer, size, type, stride, offset) ({ \
    glVertexArrayTexCoordOffsetEXT_PACKED *packed_data = malloc(sizeof(glVertexArrayTexCoordOffsetEXT_PACKED)); \
    packed_data->index = glVertexArrayTexCoordOffsetEXT_INDEX; \
    packed_data->args.a1 = (GLuint)vaobj; \
    packed_data->args.a2 = (GLuint)buffer; \
    packed_data->args.a3 = (GLint)size; \
    packed_data->args.a4 = (GLenum)type; \
    packed_data->args.a5 = (GLsizei)stride; \
    packed_data->args.a6 = (GLintptr)offset; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexArrayVertexAttribBindingEXT(vaobj, attribindex, bindingindex) ({ \
    glVertexArrayVertexAttribBindingEXT_PACKED *packed_data = malloc(sizeof(glVertexArrayVertexAttribBindingEXT_PACKED)); \
    packed_data->index = glVertexArrayVertexAttribBindingEXT_INDEX; \
    packed_data->args.a1 = (GLuint)vaobj; \
    packed_data->args.a2 = (GLuint)attribindex; \
    packed_data->args.a3 = (GLuint)bindingindex; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexArrayVertexAttribFormatEXT(vaobj, attribindex, size, type, normalized, relativeoffset) ({ \
    glVertexArrayVertexAttribFormatEXT_PACKED *packed_data = malloc(sizeof(glVertexArrayVertexAttribFormatEXT_PACKED)); \
    packed_data->index = glVertexArrayVertexAttribFormatEXT_INDEX; \
    packed_data->args.a1 = (GLuint)vaobj; \
    packed_data->args.a2 = (GLuint)attribindex; \
    packed_data->args.a3 = (GLint)size; \
    packed_data->args.a4 = (GLenum)type; \
    packed_data->args.a5 = (GLboolean)normalized; \
    packed_data->args.a6 = (GLuint)relativeoffset; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexArrayVertexAttribIFormatEXT(vaobj, attribindex, size, type, relativeoffset) ({ \
    glVertexArrayVertexAttribIFormatEXT_PACKED *packed_data = malloc(sizeof(glVertexArrayVertexAttribIFormatEXT_PACKED)); \
    packed_data->index = glVertexArrayVertexAttribIFormatEXT_INDEX; \
    packed_data->args.a1 = (GLuint)vaobj; \
    packed_data->args.a2 = (GLuint)attribindex; \
    packed_data->args.a3 = (GLint)size; \
    packed_data->args.a4 = (GLenum)type; \
    packed_data->args.a5 = (GLuint)relativeoffset; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexArrayVertexAttribIOffsetEXT(vaobj, buffer, index, size, type, stride, offset) ({ \
    glVertexArrayVertexAttribIOffsetEXT_PACKED *packed_data = malloc(sizeof(glVertexArrayVertexAttribIOffsetEXT_PACKED)); \
    packed_data->index = glVertexArrayVertexAttribIOffsetEXT_INDEX; \
    packed_data->args.a1 = (GLuint)vaobj; \
    packed_data->args.a2 = (GLuint)buffer; \
    packed_data->args.a3 = (GLuint)index; \
    packed_data->args.a4 = (GLint)size; \
    packed_data->args.a5 = (GLenum)type; \
    packed_data->args.a6 = (GLsizei)stride; \
    packed_data->args.a7 = (GLintptr)offset; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexArrayVertexAttribLFormatEXT(vaobj, attribindex, size, type, relativeoffset) ({ \
    glVertexArrayVertexAttribLFormatEXT_PACKED *packed_data = malloc(sizeof(glVertexArrayVertexAttribLFormatEXT_PACKED)); \
    packed_data->index = glVertexArrayVertexAttribLFormatEXT_INDEX; \
    packed_data->args.a1 = (GLuint)vaobj; \
    packed_data->args.a2 = (GLuint)attribindex; \
    packed_data->args.a3 = (GLint)size; \
    packed_data->args.a4 = (GLenum)type; \
    packed_data->args.a5 = (GLuint)relativeoffset; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexArrayVertexAttribLOffsetEXT(vaobj, buffer, index, size, type, stride, offset) ({ \
    glVertexArrayVertexAttribLOffsetEXT_PACKED *packed_data = malloc(sizeof(glVertexArrayVertexAttribLOffsetEXT_PACKED)); \
    packed_data->index = glVertexArrayVertexAttribLOffsetEXT_INDEX; \
    packed_data->args.a1 = (GLuint)vaobj; \
    packed_data->args.a2 = (GLuint)buffer; \
    packed_data->args.a3 = (GLuint)index; \
    packed_data->args.a4 = (GLint)size; \
    packed_data->args.a5 = (GLenum)type; \
    packed_data->args.a6 = (GLsizei)stride; \
    packed_data->args.a7 = (GLintptr)offset; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexArrayVertexAttribOffsetEXT(vaobj, buffer, index, size, type, normalized, stride, offset) ({ \
    glVertexArrayVertexAttribOffsetEXT_PACKED *packed_data = malloc(sizeof(glVertexArrayVertexAttribOffsetEXT_PACKED)); \
    packed_data->index = glVertexArrayVertexAttribOffsetEXT_INDEX; \
    packed_data->args.a1 = (GLuint)vaobj; \
    packed_data->args.a2 = (GLuint)buffer; \
    packed_data->args.a3 = (GLuint)index; \
    packed_data->args.a4 = (GLint)size; \
    packed_data->args.a5 = (GLenum)type; \
    packed_data->args.a6 = (GLboolean)normalized; \
    packed_data->args.a7 = (GLsizei)stride; \
    packed_data->args.a8 = (GLintptr)offset; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexArrayVertexBindingDivisorEXT(vaobj, bindingindex, divisor) ({ \
    glVertexArrayVertexBindingDivisorEXT_PACKED *packed_data = malloc(sizeof(glVertexArrayVertexBindingDivisorEXT_PACKED)); \
    packed_data->index = glVertexArrayVertexBindingDivisorEXT_INDEX; \
    packed_data->args.a1 = (GLuint)vaobj; \
    packed_data->args.a2 = (GLuint)bindingindex; \
    packed_data->args.a3 = (GLuint)divisor; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexArrayVertexOffsetEXT(vaobj, buffer, size, type, stride, offset) ({ \
    glVertexArrayVertexOffsetEXT_PACKED *packed_data = malloc(sizeof(glVertexArrayVertexOffsetEXT_PACKED)); \
    packed_data->index = glVertexArrayVertexOffsetEXT_INDEX; \
    packed_data->args.a1 = (GLuint)vaobj; \
    packed_data->args.a2 = (GLuint)buffer; \
    packed_data->args.a3 = (GLint)size; \
    packed_data->args.a4 = (GLenum)type; \
    packed_data->args.a5 = (GLsizei)stride; \
    packed_data->args.a6 = (GLintptr)offset; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib1d(index, x) ({ \
    glVertexAttrib1d_PACKED *packed_data = malloc(sizeof(glVertexAttrib1d_PACKED)); \
    packed_data->index = glVertexAttrib1d_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLdouble)x; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib1dARB(index, x) ({ \
    glVertexAttrib1dARB_PACKED *packed_data = malloc(sizeof(glVertexAttrib1dARB_PACKED)); \
    packed_data->index = glVertexAttrib1dARB_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLdouble)x; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib1dNV(index, x) ({ \
    glVertexAttrib1dNV_PACKED *packed_data = malloc(sizeof(glVertexAttrib1dNV_PACKED)); \
    packed_data->index = glVertexAttrib1dNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLdouble)x; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib1dv(index, v) ({ \
    glVertexAttrib1dv_PACKED *packed_data = malloc(sizeof(glVertexAttrib1dv_PACKED)); \
    packed_data->index = glVertexAttrib1dv_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib1dvARB(index, v) ({ \
    glVertexAttrib1dvARB_PACKED *packed_data = malloc(sizeof(glVertexAttrib1dvARB_PACKED)); \
    packed_data->index = glVertexAttrib1dvARB_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib1dvNV(index, v) ({ \
    glVertexAttrib1dvNV_PACKED *packed_data = malloc(sizeof(glVertexAttrib1dvNV_PACKED)); \
    packed_data->index = glVertexAttrib1dvNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib1f(index, x) ({ \
    glVertexAttrib1f_PACKED *packed_data = malloc(sizeof(glVertexAttrib1f_PACKED)); \
    packed_data->index = glVertexAttrib1f_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLfloat)x; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib1fARB(index, x) ({ \
    glVertexAttrib1fARB_PACKED *packed_data = malloc(sizeof(glVertexAttrib1fARB_PACKED)); \
    packed_data->index = glVertexAttrib1fARB_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLfloat)x; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib1fNV(index, x) ({ \
    glVertexAttrib1fNV_PACKED *packed_data = malloc(sizeof(glVertexAttrib1fNV_PACKED)); \
    packed_data->index = glVertexAttrib1fNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLfloat)x; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib1fv(index, v) ({ \
    glVertexAttrib1fv_PACKED *packed_data = malloc(sizeof(glVertexAttrib1fv_PACKED)); \
    packed_data->index = glVertexAttrib1fv_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib1fvARB(index, v) ({ \
    glVertexAttrib1fvARB_PACKED *packed_data = malloc(sizeof(glVertexAttrib1fvARB_PACKED)); \
    packed_data->index = glVertexAttrib1fvARB_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib1fvNV(index, v) ({ \
    glVertexAttrib1fvNV_PACKED *packed_data = malloc(sizeof(glVertexAttrib1fvNV_PACKED)); \
    packed_data->index = glVertexAttrib1fvNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib1hNV(index, x) ({ \
    glVertexAttrib1hNV_PACKED *packed_data = malloc(sizeof(glVertexAttrib1hNV_PACKED)); \
    packed_data->index = glVertexAttrib1hNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLhalfNV)x; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib1hvNV(index, v) ({ \
    glVertexAttrib1hvNV_PACKED *packed_data = malloc(sizeof(glVertexAttrib1hvNV_PACKED)); \
    packed_data->index = glVertexAttrib1hvNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLhalfNV *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib1s(index, x) ({ \
    glVertexAttrib1s_PACKED *packed_data = malloc(sizeof(glVertexAttrib1s_PACKED)); \
    packed_data->index = glVertexAttrib1s_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLshort)x; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib1sARB(index, x) ({ \
    glVertexAttrib1sARB_PACKED *packed_data = malloc(sizeof(glVertexAttrib1sARB_PACKED)); \
    packed_data->index = glVertexAttrib1sARB_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLshort)x; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib1sNV(index, x) ({ \
    glVertexAttrib1sNV_PACKED *packed_data = malloc(sizeof(glVertexAttrib1sNV_PACKED)); \
    packed_data->index = glVertexAttrib1sNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLshort)x; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib1sv(index, v) ({ \
    glVertexAttrib1sv_PACKED *packed_data = malloc(sizeof(glVertexAttrib1sv_PACKED)); \
    packed_data->index = glVertexAttrib1sv_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLshort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib1svARB(index, v) ({ \
    glVertexAttrib1svARB_PACKED *packed_data = malloc(sizeof(glVertexAttrib1svARB_PACKED)); \
    packed_data->index = glVertexAttrib1svARB_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLshort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib1svNV(index, v) ({ \
    glVertexAttrib1svNV_PACKED *packed_data = malloc(sizeof(glVertexAttrib1svNV_PACKED)); \
    packed_data->index = glVertexAttrib1svNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLshort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib2d(index, x, y) ({ \
    glVertexAttrib2d_PACKED *packed_data = malloc(sizeof(glVertexAttrib2d_PACKED)); \
    packed_data->index = glVertexAttrib2d_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLdouble)x; \
    packed_data->args.a3 = (GLdouble)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib2dARB(index, x, y) ({ \
    glVertexAttrib2dARB_PACKED *packed_data = malloc(sizeof(glVertexAttrib2dARB_PACKED)); \
    packed_data->index = glVertexAttrib2dARB_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLdouble)x; \
    packed_data->args.a3 = (GLdouble)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib2dNV(index, x, y) ({ \
    glVertexAttrib2dNV_PACKED *packed_data = malloc(sizeof(glVertexAttrib2dNV_PACKED)); \
    packed_data->index = glVertexAttrib2dNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLdouble)x; \
    packed_data->args.a3 = (GLdouble)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib2dv(index, v) ({ \
    glVertexAttrib2dv_PACKED *packed_data = malloc(sizeof(glVertexAttrib2dv_PACKED)); \
    packed_data->index = glVertexAttrib2dv_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib2dvARB(index, v) ({ \
    glVertexAttrib2dvARB_PACKED *packed_data = malloc(sizeof(glVertexAttrib2dvARB_PACKED)); \
    packed_data->index = glVertexAttrib2dvARB_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib2dvNV(index, v) ({ \
    glVertexAttrib2dvNV_PACKED *packed_data = malloc(sizeof(glVertexAttrib2dvNV_PACKED)); \
    packed_data->index = glVertexAttrib2dvNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib2f(index, x, y) ({ \
    glVertexAttrib2f_PACKED *packed_data = malloc(sizeof(glVertexAttrib2f_PACKED)); \
    packed_data->index = glVertexAttrib2f_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLfloat)x; \
    packed_data->args.a3 = (GLfloat)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib2fARB(index, x, y) ({ \
    glVertexAttrib2fARB_PACKED *packed_data = malloc(sizeof(glVertexAttrib2fARB_PACKED)); \
    packed_data->index = glVertexAttrib2fARB_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLfloat)x; \
    packed_data->args.a3 = (GLfloat)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib2fNV(index, x, y) ({ \
    glVertexAttrib2fNV_PACKED *packed_data = malloc(sizeof(glVertexAttrib2fNV_PACKED)); \
    packed_data->index = glVertexAttrib2fNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLfloat)x; \
    packed_data->args.a3 = (GLfloat)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib2fv(index, v) ({ \
    glVertexAttrib2fv_PACKED *packed_data = malloc(sizeof(glVertexAttrib2fv_PACKED)); \
    packed_data->index = glVertexAttrib2fv_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib2fvARB(index, v) ({ \
    glVertexAttrib2fvARB_PACKED *packed_data = malloc(sizeof(glVertexAttrib2fvARB_PACKED)); \
    packed_data->index = glVertexAttrib2fvARB_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib2fvNV(index, v) ({ \
    glVertexAttrib2fvNV_PACKED *packed_data = malloc(sizeof(glVertexAttrib2fvNV_PACKED)); \
    packed_data->index = glVertexAttrib2fvNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib2hNV(index, x, y) ({ \
    glVertexAttrib2hNV_PACKED *packed_data = malloc(sizeof(glVertexAttrib2hNV_PACKED)); \
    packed_data->index = glVertexAttrib2hNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLhalfNV)x; \
    packed_data->args.a3 = (GLhalfNV)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib2hvNV(index, v) ({ \
    glVertexAttrib2hvNV_PACKED *packed_data = malloc(sizeof(glVertexAttrib2hvNV_PACKED)); \
    packed_data->index = glVertexAttrib2hvNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLhalfNV *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib2s(index, x, y) ({ \
    glVertexAttrib2s_PACKED *packed_data = malloc(sizeof(glVertexAttrib2s_PACKED)); \
    packed_data->index = glVertexAttrib2s_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLshort)x; \
    packed_data->args.a3 = (GLshort)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib2sARB(index, x, y) ({ \
    glVertexAttrib2sARB_PACKED *packed_data = malloc(sizeof(glVertexAttrib2sARB_PACKED)); \
    packed_data->index = glVertexAttrib2sARB_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLshort)x; \
    packed_data->args.a3 = (GLshort)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib2sNV(index, x, y) ({ \
    glVertexAttrib2sNV_PACKED *packed_data = malloc(sizeof(glVertexAttrib2sNV_PACKED)); \
    packed_data->index = glVertexAttrib2sNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLshort)x; \
    packed_data->args.a3 = (GLshort)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib2sv(index, v) ({ \
    glVertexAttrib2sv_PACKED *packed_data = malloc(sizeof(glVertexAttrib2sv_PACKED)); \
    packed_data->index = glVertexAttrib2sv_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLshort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib2svARB(index, v) ({ \
    glVertexAttrib2svARB_PACKED *packed_data = malloc(sizeof(glVertexAttrib2svARB_PACKED)); \
    packed_data->index = glVertexAttrib2svARB_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLshort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib2svNV(index, v) ({ \
    glVertexAttrib2svNV_PACKED *packed_data = malloc(sizeof(glVertexAttrib2svNV_PACKED)); \
    packed_data->index = glVertexAttrib2svNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLshort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib3d(index, x, y, z) ({ \
    glVertexAttrib3d_PACKED *packed_data = malloc(sizeof(glVertexAttrib3d_PACKED)); \
    packed_data->index = glVertexAttrib3d_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLdouble)x; \
    packed_data->args.a3 = (GLdouble)y; \
    packed_data->args.a4 = (GLdouble)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib3dARB(index, x, y, z) ({ \
    glVertexAttrib3dARB_PACKED *packed_data = malloc(sizeof(glVertexAttrib3dARB_PACKED)); \
    packed_data->index = glVertexAttrib3dARB_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLdouble)x; \
    packed_data->args.a3 = (GLdouble)y; \
    packed_data->args.a4 = (GLdouble)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib3dNV(index, x, y, z) ({ \
    glVertexAttrib3dNV_PACKED *packed_data = malloc(sizeof(glVertexAttrib3dNV_PACKED)); \
    packed_data->index = glVertexAttrib3dNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLdouble)x; \
    packed_data->args.a3 = (GLdouble)y; \
    packed_data->args.a4 = (GLdouble)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib3dv(index, v) ({ \
    glVertexAttrib3dv_PACKED *packed_data = malloc(sizeof(glVertexAttrib3dv_PACKED)); \
    packed_data->index = glVertexAttrib3dv_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib3dvARB(index, v) ({ \
    glVertexAttrib3dvARB_PACKED *packed_data = malloc(sizeof(glVertexAttrib3dvARB_PACKED)); \
    packed_data->index = glVertexAttrib3dvARB_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib3dvNV(index, v) ({ \
    glVertexAttrib3dvNV_PACKED *packed_data = malloc(sizeof(glVertexAttrib3dvNV_PACKED)); \
    packed_data->index = glVertexAttrib3dvNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib3f(index, x, y, z) ({ \
    glVertexAttrib3f_PACKED *packed_data = malloc(sizeof(glVertexAttrib3f_PACKED)); \
    packed_data->index = glVertexAttrib3f_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLfloat)x; \
    packed_data->args.a3 = (GLfloat)y; \
    packed_data->args.a4 = (GLfloat)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib3fARB(index, x, y, z) ({ \
    glVertexAttrib3fARB_PACKED *packed_data = malloc(sizeof(glVertexAttrib3fARB_PACKED)); \
    packed_data->index = glVertexAttrib3fARB_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLfloat)x; \
    packed_data->args.a3 = (GLfloat)y; \
    packed_data->args.a4 = (GLfloat)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib3fNV(index, x, y, z) ({ \
    glVertexAttrib3fNV_PACKED *packed_data = malloc(sizeof(glVertexAttrib3fNV_PACKED)); \
    packed_data->index = glVertexAttrib3fNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLfloat)x; \
    packed_data->args.a3 = (GLfloat)y; \
    packed_data->args.a4 = (GLfloat)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib3fv(index, v) ({ \
    glVertexAttrib3fv_PACKED *packed_data = malloc(sizeof(glVertexAttrib3fv_PACKED)); \
    packed_data->index = glVertexAttrib3fv_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib3fvARB(index, v) ({ \
    glVertexAttrib3fvARB_PACKED *packed_data = malloc(sizeof(glVertexAttrib3fvARB_PACKED)); \
    packed_data->index = glVertexAttrib3fvARB_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib3fvNV(index, v) ({ \
    glVertexAttrib3fvNV_PACKED *packed_data = malloc(sizeof(glVertexAttrib3fvNV_PACKED)); \
    packed_data->index = glVertexAttrib3fvNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib3hNV(index, x, y, z) ({ \
    glVertexAttrib3hNV_PACKED *packed_data = malloc(sizeof(glVertexAttrib3hNV_PACKED)); \
    packed_data->index = glVertexAttrib3hNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLhalfNV)x; \
    packed_data->args.a3 = (GLhalfNV)y; \
    packed_data->args.a4 = (GLhalfNV)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib3hvNV(index, v) ({ \
    glVertexAttrib3hvNV_PACKED *packed_data = malloc(sizeof(glVertexAttrib3hvNV_PACKED)); \
    packed_data->index = glVertexAttrib3hvNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLhalfNV *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib3s(index, x, y, z) ({ \
    glVertexAttrib3s_PACKED *packed_data = malloc(sizeof(glVertexAttrib3s_PACKED)); \
    packed_data->index = glVertexAttrib3s_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLshort)x; \
    packed_data->args.a3 = (GLshort)y; \
    packed_data->args.a4 = (GLshort)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib3sARB(index, x, y, z) ({ \
    glVertexAttrib3sARB_PACKED *packed_data = malloc(sizeof(glVertexAttrib3sARB_PACKED)); \
    packed_data->index = glVertexAttrib3sARB_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLshort)x; \
    packed_data->args.a3 = (GLshort)y; \
    packed_data->args.a4 = (GLshort)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib3sNV(index, x, y, z) ({ \
    glVertexAttrib3sNV_PACKED *packed_data = malloc(sizeof(glVertexAttrib3sNV_PACKED)); \
    packed_data->index = glVertexAttrib3sNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLshort)x; \
    packed_data->args.a3 = (GLshort)y; \
    packed_data->args.a4 = (GLshort)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib3sv(index, v) ({ \
    glVertexAttrib3sv_PACKED *packed_data = malloc(sizeof(glVertexAttrib3sv_PACKED)); \
    packed_data->index = glVertexAttrib3sv_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLshort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib3svARB(index, v) ({ \
    glVertexAttrib3svARB_PACKED *packed_data = malloc(sizeof(glVertexAttrib3svARB_PACKED)); \
    packed_data->index = glVertexAttrib3svARB_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLshort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib3svNV(index, v) ({ \
    glVertexAttrib3svNV_PACKED *packed_data = malloc(sizeof(glVertexAttrib3svNV_PACKED)); \
    packed_data->index = glVertexAttrib3svNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLshort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib4Nbv(index, v) ({ \
    glVertexAttrib4Nbv_PACKED *packed_data = malloc(sizeof(glVertexAttrib4Nbv_PACKED)); \
    packed_data->index = glVertexAttrib4Nbv_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLbyte *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib4NbvARB(index, v) ({ \
    glVertexAttrib4NbvARB_PACKED *packed_data = malloc(sizeof(glVertexAttrib4NbvARB_PACKED)); \
    packed_data->index = glVertexAttrib4NbvARB_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLbyte *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib4Niv(index, v) ({ \
    glVertexAttrib4Niv_PACKED *packed_data = malloc(sizeof(glVertexAttrib4Niv_PACKED)); \
    packed_data->index = glVertexAttrib4Niv_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib4NivARB(index, v) ({ \
    glVertexAttrib4NivARB_PACKED *packed_data = malloc(sizeof(glVertexAttrib4NivARB_PACKED)); \
    packed_data->index = glVertexAttrib4NivARB_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib4Nsv(index, v) ({ \
    glVertexAttrib4Nsv_PACKED *packed_data = malloc(sizeof(glVertexAttrib4Nsv_PACKED)); \
    packed_data->index = glVertexAttrib4Nsv_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLshort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib4NsvARB(index, v) ({ \
    glVertexAttrib4NsvARB_PACKED *packed_data = malloc(sizeof(glVertexAttrib4NsvARB_PACKED)); \
    packed_data->index = glVertexAttrib4NsvARB_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLshort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib4Nub(index, x, y, z, w) ({ \
    glVertexAttrib4Nub_PACKED *packed_data = malloc(sizeof(glVertexAttrib4Nub_PACKED)); \
    packed_data->index = glVertexAttrib4Nub_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLubyte)x; \
    packed_data->args.a3 = (GLubyte)y; \
    packed_data->args.a4 = (GLubyte)z; \
    packed_data->args.a5 = (GLubyte)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib4NubARB(index, x, y, z, w) ({ \
    glVertexAttrib4NubARB_PACKED *packed_data = malloc(sizeof(glVertexAttrib4NubARB_PACKED)); \
    packed_data->index = glVertexAttrib4NubARB_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLubyte)x; \
    packed_data->args.a3 = (GLubyte)y; \
    packed_data->args.a4 = (GLubyte)z; \
    packed_data->args.a5 = (GLubyte)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib4Nubv(index, v) ({ \
    glVertexAttrib4Nubv_PACKED *packed_data = malloc(sizeof(glVertexAttrib4Nubv_PACKED)); \
    packed_data->index = glVertexAttrib4Nubv_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLubyte *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib4NubvARB(index, v) ({ \
    glVertexAttrib4NubvARB_PACKED *packed_data = malloc(sizeof(glVertexAttrib4NubvARB_PACKED)); \
    packed_data->index = glVertexAttrib4NubvARB_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLubyte *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib4Nuiv(index, v) ({ \
    glVertexAttrib4Nuiv_PACKED *packed_data = malloc(sizeof(glVertexAttrib4Nuiv_PACKED)); \
    packed_data->index = glVertexAttrib4Nuiv_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLuint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib4NuivARB(index, v) ({ \
    glVertexAttrib4NuivARB_PACKED *packed_data = malloc(sizeof(glVertexAttrib4NuivARB_PACKED)); \
    packed_data->index = glVertexAttrib4NuivARB_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLuint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib4Nusv(index, v) ({ \
    glVertexAttrib4Nusv_PACKED *packed_data = malloc(sizeof(glVertexAttrib4Nusv_PACKED)); \
    packed_data->index = glVertexAttrib4Nusv_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLushort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib4NusvARB(index, v) ({ \
    glVertexAttrib4NusvARB_PACKED *packed_data = malloc(sizeof(glVertexAttrib4NusvARB_PACKED)); \
    packed_data->index = glVertexAttrib4NusvARB_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLushort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib4bv(index, v) ({ \
    glVertexAttrib4bv_PACKED *packed_data = malloc(sizeof(glVertexAttrib4bv_PACKED)); \
    packed_data->index = glVertexAttrib4bv_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLbyte *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib4bvARB(index, v) ({ \
    glVertexAttrib4bvARB_PACKED *packed_data = malloc(sizeof(glVertexAttrib4bvARB_PACKED)); \
    packed_data->index = glVertexAttrib4bvARB_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLbyte *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib4d(index, x, y, z, w) ({ \
    glVertexAttrib4d_PACKED *packed_data = malloc(sizeof(glVertexAttrib4d_PACKED)); \
    packed_data->index = glVertexAttrib4d_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLdouble)x; \
    packed_data->args.a3 = (GLdouble)y; \
    packed_data->args.a4 = (GLdouble)z; \
    packed_data->args.a5 = (GLdouble)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib4dARB(index, x, y, z, w) ({ \
    glVertexAttrib4dARB_PACKED *packed_data = malloc(sizeof(glVertexAttrib4dARB_PACKED)); \
    packed_data->index = glVertexAttrib4dARB_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLdouble)x; \
    packed_data->args.a3 = (GLdouble)y; \
    packed_data->args.a4 = (GLdouble)z; \
    packed_data->args.a5 = (GLdouble)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib4dNV(index, x, y, z, w) ({ \
    glVertexAttrib4dNV_PACKED *packed_data = malloc(sizeof(glVertexAttrib4dNV_PACKED)); \
    packed_data->index = glVertexAttrib4dNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLdouble)x; \
    packed_data->args.a3 = (GLdouble)y; \
    packed_data->args.a4 = (GLdouble)z; \
    packed_data->args.a5 = (GLdouble)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib4dv(index, v) ({ \
    glVertexAttrib4dv_PACKED *packed_data = malloc(sizeof(glVertexAttrib4dv_PACKED)); \
    packed_data->index = glVertexAttrib4dv_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib4dvARB(index, v) ({ \
    glVertexAttrib4dvARB_PACKED *packed_data = malloc(sizeof(glVertexAttrib4dvARB_PACKED)); \
    packed_data->index = glVertexAttrib4dvARB_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib4dvNV(index, v) ({ \
    glVertexAttrib4dvNV_PACKED *packed_data = malloc(sizeof(glVertexAttrib4dvNV_PACKED)); \
    packed_data->index = glVertexAttrib4dvNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib4f(index, x, y, z, w) ({ \
    glVertexAttrib4f_PACKED *packed_data = malloc(sizeof(glVertexAttrib4f_PACKED)); \
    packed_data->index = glVertexAttrib4f_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLfloat)x; \
    packed_data->args.a3 = (GLfloat)y; \
    packed_data->args.a4 = (GLfloat)z; \
    packed_data->args.a5 = (GLfloat)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib4fARB(index, x, y, z, w) ({ \
    glVertexAttrib4fARB_PACKED *packed_data = malloc(sizeof(glVertexAttrib4fARB_PACKED)); \
    packed_data->index = glVertexAttrib4fARB_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLfloat)x; \
    packed_data->args.a3 = (GLfloat)y; \
    packed_data->args.a4 = (GLfloat)z; \
    packed_data->args.a5 = (GLfloat)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib4fNV(index, x, y, z, w) ({ \
    glVertexAttrib4fNV_PACKED *packed_data = malloc(sizeof(glVertexAttrib4fNV_PACKED)); \
    packed_data->index = glVertexAttrib4fNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLfloat)x; \
    packed_data->args.a3 = (GLfloat)y; \
    packed_data->args.a4 = (GLfloat)z; \
    packed_data->args.a5 = (GLfloat)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib4fv(index, v) ({ \
    glVertexAttrib4fv_PACKED *packed_data = malloc(sizeof(glVertexAttrib4fv_PACKED)); \
    packed_data->index = glVertexAttrib4fv_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib4fvARB(index, v) ({ \
    glVertexAttrib4fvARB_PACKED *packed_data = malloc(sizeof(glVertexAttrib4fvARB_PACKED)); \
    packed_data->index = glVertexAttrib4fvARB_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib4fvNV(index, v) ({ \
    glVertexAttrib4fvNV_PACKED *packed_data = malloc(sizeof(glVertexAttrib4fvNV_PACKED)); \
    packed_data->index = glVertexAttrib4fvNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib4hNV(index, x, y, z, w) ({ \
    glVertexAttrib4hNV_PACKED *packed_data = malloc(sizeof(glVertexAttrib4hNV_PACKED)); \
    packed_data->index = glVertexAttrib4hNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLhalfNV)x; \
    packed_data->args.a3 = (GLhalfNV)y; \
    packed_data->args.a4 = (GLhalfNV)z; \
    packed_data->args.a5 = (GLhalfNV)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib4hvNV(index, v) ({ \
    glVertexAttrib4hvNV_PACKED *packed_data = malloc(sizeof(glVertexAttrib4hvNV_PACKED)); \
    packed_data->index = glVertexAttrib4hvNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLhalfNV *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib4iv(index, v) ({ \
    glVertexAttrib4iv_PACKED *packed_data = malloc(sizeof(glVertexAttrib4iv_PACKED)); \
    packed_data->index = glVertexAttrib4iv_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib4ivARB(index, v) ({ \
    glVertexAttrib4ivARB_PACKED *packed_data = malloc(sizeof(glVertexAttrib4ivARB_PACKED)); \
    packed_data->index = glVertexAttrib4ivARB_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib4s(index, x, y, z, w) ({ \
    glVertexAttrib4s_PACKED *packed_data = malloc(sizeof(glVertexAttrib4s_PACKED)); \
    packed_data->index = glVertexAttrib4s_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLshort)x; \
    packed_data->args.a3 = (GLshort)y; \
    packed_data->args.a4 = (GLshort)z; \
    packed_data->args.a5 = (GLshort)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib4sARB(index, x, y, z, w) ({ \
    glVertexAttrib4sARB_PACKED *packed_data = malloc(sizeof(glVertexAttrib4sARB_PACKED)); \
    packed_data->index = glVertexAttrib4sARB_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLshort)x; \
    packed_data->args.a3 = (GLshort)y; \
    packed_data->args.a4 = (GLshort)z; \
    packed_data->args.a5 = (GLshort)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib4sNV(index, x, y, z, w) ({ \
    glVertexAttrib4sNV_PACKED *packed_data = malloc(sizeof(glVertexAttrib4sNV_PACKED)); \
    packed_data->index = glVertexAttrib4sNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLshort)x; \
    packed_data->args.a3 = (GLshort)y; \
    packed_data->args.a4 = (GLshort)z; \
    packed_data->args.a5 = (GLshort)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib4sv(index, v) ({ \
    glVertexAttrib4sv_PACKED *packed_data = malloc(sizeof(glVertexAttrib4sv_PACKED)); \
    packed_data->index = glVertexAttrib4sv_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLshort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib4svARB(index, v) ({ \
    glVertexAttrib4svARB_PACKED *packed_data = malloc(sizeof(glVertexAttrib4svARB_PACKED)); \
    packed_data->index = glVertexAttrib4svARB_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLshort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib4svNV(index, v) ({ \
    glVertexAttrib4svNV_PACKED *packed_data = malloc(sizeof(glVertexAttrib4svNV_PACKED)); \
    packed_data->index = glVertexAttrib4svNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLshort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib4ubNV(index, x, y, z, w) ({ \
    glVertexAttrib4ubNV_PACKED *packed_data = malloc(sizeof(glVertexAttrib4ubNV_PACKED)); \
    packed_data->index = glVertexAttrib4ubNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLubyte)x; \
    packed_data->args.a3 = (GLubyte)y; \
    packed_data->args.a4 = (GLubyte)z; \
    packed_data->args.a5 = (GLubyte)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib4ubv(index, v) ({ \
    glVertexAttrib4ubv_PACKED *packed_data = malloc(sizeof(glVertexAttrib4ubv_PACKED)); \
    packed_data->index = glVertexAttrib4ubv_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLubyte *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib4ubvARB(index, v) ({ \
    glVertexAttrib4ubvARB_PACKED *packed_data = malloc(sizeof(glVertexAttrib4ubvARB_PACKED)); \
    packed_data->index = glVertexAttrib4ubvARB_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLubyte *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib4ubvNV(index, v) ({ \
    glVertexAttrib4ubvNV_PACKED *packed_data = malloc(sizeof(glVertexAttrib4ubvNV_PACKED)); \
    packed_data->index = glVertexAttrib4ubvNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLubyte *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib4uiv(index, v) ({ \
    glVertexAttrib4uiv_PACKED *packed_data = malloc(sizeof(glVertexAttrib4uiv_PACKED)); \
    packed_data->index = glVertexAttrib4uiv_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLuint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib4uivARB(index, v) ({ \
    glVertexAttrib4uivARB_PACKED *packed_data = malloc(sizeof(glVertexAttrib4uivARB_PACKED)); \
    packed_data->index = glVertexAttrib4uivARB_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLuint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib4usv(index, v) ({ \
    glVertexAttrib4usv_PACKED *packed_data = malloc(sizeof(glVertexAttrib4usv_PACKED)); \
    packed_data->index = glVertexAttrib4usv_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLushort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttrib4usvARB(index, v) ({ \
    glVertexAttrib4usvARB_PACKED *packed_data = malloc(sizeof(glVertexAttrib4usvARB_PACKED)); \
    packed_data->index = glVertexAttrib4usvARB_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLushort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribArrayObjectATI(index, size, type, normalized, stride, buffer, offset) ({ \
    glVertexAttribArrayObjectATI_PACKED *packed_data = malloc(sizeof(glVertexAttribArrayObjectATI_PACKED)); \
    packed_data->index = glVertexAttribArrayObjectATI_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLint)size; \
    packed_data->args.a3 = (GLenum)type; \
    packed_data->args.a4 = (GLboolean)normalized; \
    packed_data->args.a5 = (GLsizei)stride; \
    packed_data->args.a6 = (GLuint)buffer; \
    packed_data->args.a7 = (GLuint)offset; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribBinding(attribindex, bindingindex) ({ \
    glVertexAttribBinding_PACKED *packed_data = malloc(sizeof(glVertexAttribBinding_PACKED)); \
    packed_data->index = glVertexAttribBinding_INDEX; \
    packed_data->args.a1 = (GLuint)attribindex; \
    packed_data->args.a2 = (GLuint)bindingindex; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribDivisor(index, divisor) ({ \
    glVertexAttribDivisor_PACKED *packed_data = malloc(sizeof(glVertexAttribDivisor_PACKED)); \
    packed_data->index = glVertexAttribDivisor_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLuint)divisor; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribDivisorARB(index, divisor) ({ \
    glVertexAttribDivisorARB_PACKED *packed_data = malloc(sizeof(glVertexAttribDivisorARB_PACKED)); \
    packed_data->index = glVertexAttribDivisorARB_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLuint)divisor; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribFormat(attribindex, size, type, normalized, relativeoffset) ({ \
    glVertexAttribFormat_PACKED *packed_data = malloc(sizeof(glVertexAttribFormat_PACKED)); \
    packed_data->index = glVertexAttribFormat_INDEX; \
    packed_data->args.a1 = (GLuint)attribindex; \
    packed_data->args.a2 = (GLint)size; \
    packed_data->args.a3 = (GLenum)type; \
    packed_data->args.a4 = (GLboolean)normalized; \
    packed_data->args.a5 = (GLuint)relativeoffset; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribFormatNV(index, size, type, normalized, stride) ({ \
    glVertexAttribFormatNV_PACKED *packed_data = malloc(sizeof(glVertexAttribFormatNV_PACKED)); \
    packed_data->index = glVertexAttribFormatNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLint)size; \
    packed_data->args.a3 = (GLenum)type; \
    packed_data->args.a4 = (GLboolean)normalized; \
    packed_data->args.a5 = (GLsizei)stride; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribI1i(index, x) ({ \
    glVertexAttribI1i_PACKED *packed_data = malloc(sizeof(glVertexAttribI1i_PACKED)); \
    packed_data->index = glVertexAttribI1i_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLint)x; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribI1iEXT(index, x) ({ \
    glVertexAttribI1iEXT_PACKED *packed_data = malloc(sizeof(glVertexAttribI1iEXT_PACKED)); \
    packed_data->index = glVertexAttribI1iEXT_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLint)x; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribI1iv(index, v) ({ \
    glVertexAttribI1iv_PACKED *packed_data = malloc(sizeof(glVertexAttribI1iv_PACKED)); \
    packed_data->index = glVertexAttribI1iv_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribI1ivEXT(index, v) ({ \
    glVertexAttribI1ivEXT_PACKED *packed_data = malloc(sizeof(glVertexAttribI1ivEXT_PACKED)); \
    packed_data->index = glVertexAttribI1ivEXT_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribI1ui(index, x) ({ \
    glVertexAttribI1ui_PACKED *packed_data = malloc(sizeof(glVertexAttribI1ui_PACKED)); \
    packed_data->index = glVertexAttribI1ui_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLuint)x; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribI1uiEXT(index, x) ({ \
    glVertexAttribI1uiEXT_PACKED *packed_data = malloc(sizeof(glVertexAttribI1uiEXT_PACKED)); \
    packed_data->index = glVertexAttribI1uiEXT_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLuint)x; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribI1uiv(index, v) ({ \
    glVertexAttribI1uiv_PACKED *packed_data = malloc(sizeof(glVertexAttribI1uiv_PACKED)); \
    packed_data->index = glVertexAttribI1uiv_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLuint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribI1uivEXT(index, v) ({ \
    glVertexAttribI1uivEXT_PACKED *packed_data = malloc(sizeof(glVertexAttribI1uivEXT_PACKED)); \
    packed_data->index = glVertexAttribI1uivEXT_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLuint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribI2i(index, x, y) ({ \
    glVertexAttribI2i_PACKED *packed_data = malloc(sizeof(glVertexAttribI2i_PACKED)); \
    packed_data->index = glVertexAttribI2i_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLint)x; \
    packed_data->args.a3 = (GLint)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribI2iEXT(index, x, y) ({ \
    glVertexAttribI2iEXT_PACKED *packed_data = malloc(sizeof(glVertexAttribI2iEXT_PACKED)); \
    packed_data->index = glVertexAttribI2iEXT_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLint)x; \
    packed_data->args.a3 = (GLint)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribI2iv(index, v) ({ \
    glVertexAttribI2iv_PACKED *packed_data = malloc(sizeof(glVertexAttribI2iv_PACKED)); \
    packed_data->index = glVertexAttribI2iv_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribI2ivEXT(index, v) ({ \
    glVertexAttribI2ivEXT_PACKED *packed_data = malloc(sizeof(glVertexAttribI2ivEXT_PACKED)); \
    packed_data->index = glVertexAttribI2ivEXT_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribI2ui(index, x, y) ({ \
    glVertexAttribI2ui_PACKED *packed_data = malloc(sizeof(glVertexAttribI2ui_PACKED)); \
    packed_data->index = glVertexAttribI2ui_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLuint)x; \
    packed_data->args.a3 = (GLuint)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribI2uiEXT(index, x, y) ({ \
    glVertexAttribI2uiEXT_PACKED *packed_data = malloc(sizeof(glVertexAttribI2uiEXT_PACKED)); \
    packed_data->index = glVertexAttribI2uiEXT_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLuint)x; \
    packed_data->args.a3 = (GLuint)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribI2uiv(index, v) ({ \
    glVertexAttribI2uiv_PACKED *packed_data = malloc(sizeof(glVertexAttribI2uiv_PACKED)); \
    packed_data->index = glVertexAttribI2uiv_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLuint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribI2uivEXT(index, v) ({ \
    glVertexAttribI2uivEXT_PACKED *packed_data = malloc(sizeof(glVertexAttribI2uivEXT_PACKED)); \
    packed_data->index = glVertexAttribI2uivEXT_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLuint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribI3i(index, x, y, z) ({ \
    glVertexAttribI3i_PACKED *packed_data = malloc(sizeof(glVertexAttribI3i_PACKED)); \
    packed_data->index = glVertexAttribI3i_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLint)x; \
    packed_data->args.a3 = (GLint)y; \
    packed_data->args.a4 = (GLint)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribI3iEXT(index, x, y, z) ({ \
    glVertexAttribI3iEXT_PACKED *packed_data = malloc(sizeof(glVertexAttribI3iEXT_PACKED)); \
    packed_data->index = glVertexAttribI3iEXT_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLint)x; \
    packed_data->args.a3 = (GLint)y; \
    packed_data->args.a4 = (GLint)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribI3iv(index, v) ({ \
    glVertexAttribI3iv_PACKED *packed_data = malloc(sizeof(glVertexAttribI3iv_PACKED)); \
    packed_data->index = glVertexAttribI3iv_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribI3ivEXT(index, v) ({ \
    glVertexAttribI3ivEXT_PACKED *packed_data = malloc(sizeof(glVertexAttribI3ivEXT_PACKED)); \
    packed_data->index = glVertexAttribI3ivEXT_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribI3ui(index, x, y, z) ({ \
    glVertexAttribI3ui_PACKED *packed_data = malloc(sizeof(glVertexAttribI3ui_PACKED)); \
    packed_data->index = glVertexAttribI3ui_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLuint)x; \
    packed_data->args.a3 = (GLuint)y; \
    packed_data->args.a4 = (GLuint)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribI3uiEXT(index, x, y, z) ({ \
    glVertexAttribI3uiEXT_PACKED *packed_data = malloc(sizeof(glVertexAttribI3uiEXT_PACKED)); \
    packed_data->index = glVertexAttribI3uiEXT_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLuint)x; \
    packed_data->args.a3 = (GLuint)y; \
    packed_data->args.a4 = (GLuint)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribI3uiv(index, v) ({ \
    glVertexAttribI3uiv_PACKED *packed_data = malloc(sizeof(glVertexAttribI3uiv_PACKED)); \
    packed_data->index = glVertexAttribI3uiv_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLuint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribI3uivEXT(index, v) ({ \
    glVertexAttribI3uivEXT_PACKED *packed_data = malloc(sizeof(glVertexAttribI3uivEXT_PACKED)); \
    packed_data->index = glVertexAttribI3uivEXT_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLuint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribI4bv(index, v) ({ \
    glVertexAttribI4bv_PACKED *packed_data = malloc(sizeof(glVertexAttribI4bv_PACKED)); \
    packed_data->index = glVertexAttribI4bv_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLbyte *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribI4bvEXT(index, v) ({ \
    glVertexAttribI4bvEXT_PACKED *packed_data = malloc(sizeof(glVertexAttribI4bvEXT_PACKED)); \
    packed_data->index = glVertexAttribI4bvEXT_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLbyte *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribI4i(index, x, y, z, w) ({ \
    glVertexAttribI4i_PACKED *packed_data = malloc(sizeof(glVertexAttribI4i_PACKED)); \
    packed_data->index = glVertexAttribI4i_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLint)x; \
    packed_data->args.a3 = (GLint)y; \
    packed_data->args.a4 = (GLint)z; \
    packed_data->args.a5 = (GLint)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribI4iEXT(index, x, y, z, w) ({ \
    glVertexAttribI4iEXT_PACKED *packed_data = malloc(sizeof(glVertexAttribI4iEXT_PACKED)); \
    packed_data->index = glVertexAttribI4iEXT_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLint)x; \
    packed_data->args.a3 = (GLint)y; \
    packed_data->args.a4 = (GLint)z; \
    packed_data->args.a5 = (GLint)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribI4iv(index, v) ({ \
    glVertexAttribI4iv_PACKED *packed_data = malloc(sizeof(glVertexAttribI4iv_PACKED)); \
    packed_data->index = glVertexAttribI4iv_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribI4ivEXT(index, v) ({ \
    glVertexAttribI4ivEXT_PACKED *packed_data = malloc(sizeof(glVertexAttribI4ivEXT_PACKED)); \
    packed_data->index = glVertexAttribI4ivEXT_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribI4sv(index, v) ({ \
    glVertexAttribI4sv_PACKED *packed_data = malloc(sizeof(glVertexAttribI4sv_PACKED)); \
    packed_data->index = glVertexAttribI4sv_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLshort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribI4svEXT(index, v) ({ \
    glVertexAttribI4svEXT_PACKED *packed_data = malloc(sizeof(glVertexAttribI4svEXT_PACKED)); \
    packed_data->index = glVertexAttribI4svEXT_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLshort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribI4ubv(index, v) ({ \
    glVertexAttribI4ubv_PACKED *packed_data = malloc(sizeof(glVertexAttribI4ubv_PACKED)); \
    packed_data->index = glVertexAttribI4ubv_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLubyte *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribI4ubvEXT(index, v) ({ \
    glVertexAttribI4ubvEXT_PACKED *packed_data = malloc(sizeof(glVertexAttribI4ubvEXT_PACKED)); \
    packed_data->index = glVertexAttribI4ubvEXT_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLubyte *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribI4ui(index, x, y, z, w) ({ \
    glVertexAttribI4ui_PACKED *packed_data = malloc(sizeof(glVertexAttribI4ui_PACKED)); \
    packed_data->index = glVertexAttribI4ui_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLuint)x; \
    packed_data->args.a3 = (GLuint)y; \
    packed_data->args.a4 = (GLuint)z; \
    packed_data->args.a5 = (GLuint)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribI4uiEXT(index, x, y, z, w) ({ \
    glVertexAttribI4uiEXT_PACKED *packed_data = malloc(sizeof(glVertexAttribI4uiEXT_PACKED)); \
    packed_data->index = glVertexAttribI4uiEXT_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLuint)x; \
    packed_data->args.a3 = (GLuint)y; \
    packed_data->args.a4 = (GLuint)z; \
    packed_data->args.a5 = (GLuint)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribI4uiv(index, v) ({ \
    glVertexAttribI4uiv_PACKED *packed_data = malloc(sizeof(glVertexAttribI4uiv_PACKED)); \
    packed_data->index = glVertexAttribI4uiv_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLuint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribI4uivEXT(index, v) ({ \
    glVertexAttribI4uivEXT_PACKED *packed_data = malloc(sizeof(glVertexAttribI4uivEXT_PACKED)); \
    packed_data->index = glVertexAttribI4uivEXT_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLuint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribI4usv(index, v) ({ \
    glVertexAttribI4usv_PACKED *packed_data = malloc(sizeof(glVertexAttribI4usv_PACKED)); \
    packed_data->index = glVertexAttribI4usv_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLushort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribI4usvEXT(index, v) ({ \
    glVertexAttribI4usvEXT_PACKED *packed_data = malloc(sizeof(glVertexAttribI4usvEXT_PACKED)); \
    packed_data->index = glVertexAttribI4usvEXT_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLushort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribIFormat(attribindex, size, type, relativeoffset) ({ \
    glVertexAttribIFormat_PACKED *packed_data = malloc(sizeof(glVertexAttribIFormat_PACKED)); \
    packed_data->index = glVertexAttribIFormat_INDEX; \
    packed_data->args.a1 = (GLuint)attribindex; \
    packed_data->args.a2 = (GLint)size; \
    packed_data->args.a3 = (GLenum)type; \
    packed_data->args.a4 = (GLuint)relativeoffset; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribIFormatNV(index, size, type, stride) ({ \
    glVertexAttribIFormatNV_PACKED *packed_data = malloc(sizeof(glVertexAttribIFormatNV_PACKED)); \
    packed_data->index = glVertexAttribIFormatNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLint)size; \
    packed_data->args.a3 = (GLenum)type; \
    packed_data->args.a4 = (GLsizei)stride; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribIPointer(index, size, type, stride, pointer) ({ \
    glVertexAttribIPointer_PACKED *packed_data = malloc(sizeof(glVertexAttribIPointer_PACKED)); \
    packed_data->index = glVertexAttribIPointer_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLint)size; \
    packed_data->args.a3 = (GLenum)type; \
    packed_data->args.a4 = (GLsizei)stride; \
    packed_data->args.a5 = (GLvoid *)pointer; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribIPointerEXT(index, size, type, stride, pointer) ({ \
    glVertexAttribIPointerEXT_PACKED *packed_data = malloc(sizeof(glVertexAttribIPointerEXT_PACKED)); \
    packed_data->index = glVertexAttribIPointerEXT_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLint)size; \
    packed_data->args.a3 = (GLenum)type; \
    packed_data->args.a4 = (GLsizei)stride; \
    packed_data->args.a5 = (GLvoid *)pointer; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribL1d(index, x) ({ \
    glVertexAttribL1d_PACKED *packed_data = malloc(sizeof(glVertexAttribL1d_PACKED)); \
    packed_data->index = glVertexAttribL1d_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLdouble)x; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribL1dEXT(index, x) ({ \
    glVertexAttribL1dEXT_PACKED *packed_data = malloc(sizeof(glVertexAttribL1dEXT_PACKED)); \
    packed_data->index = glVertexAttribL1dEXT_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLdouble)x; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribL1dv(index, v) ({ \
    glVertexAttribL1dv_PACKED *packed_data = malloc(sizeof(glVertexAttribL1dv_PACKED)); \
    packed_data->index = glVertexAttribL1dv_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribL1dvEXT(index, v) ({ \
    glVertexAttribL1dvEXT_PACKED *packed_data = malloc(sizeof(glVertexAttribL1dvEXT_PACKED)); \
    packed_data->index = glVertexAttribL1dvEXT_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribL1i64NV(index, x) ({ \
    glVertexAttribL1i64NV_PACKED *packed_data = malloc(sizeof(glVertexAttribL1i64NV_PACKED)); \
    packed_data->index = glVertexAttribL1i64NV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLint64EXT)x; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribL1i64vNV(index, v) ({ \
    glVertexAttribL1i64vNV_PACKED *packed_data = malloc(sizeof(glVertexAttribL1i64vNV_PACKED)); \
    packed_data->index = glVertexAttribL1i64vNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLint64EXT *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribL1ui64NV(index, x) ({ \
    glVertexAttribL1ui64NV_PACKED *packed_data = malloc(sizeof(glVertexAttribL1ui64NV_PACKED)); \
    packed_data->index = glVertexAttribL1ui64NV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLuint64EXT)x; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribL1ui64vNV(index, v) ({ \
    glVertexAttribL1ui64vNV_PACKED *packed_data = malloc(sizeof(glVertexAttribL1ui64vNV_PACKED)); \
    packed_data->index = glVertexAttribL1ui64vNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLuint64EXT *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribL2d(index, x, y) ({ \
    glVertexAttribL2d_PACKED *packed_data = malloc(sizeof(glVertexAttribL2d_PACKED)); \
    packed_data->index = glVertexAttribL2d_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLdouble)x; \
    packed_data->args.a3 = (GLdouble)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribL2dEXT(index, x, y) ({ \
    glVertexAttribL2dEXT_PACKED *packed_data = malloc(sizeof(glVertexAttribL2dEXT_PACKED)); \
    packed_data->index = glVertexAttribL2dEXT_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLdouble)x; \
    packed_data->args.a3 = (GLdouble)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribL2dv(index, v) ({ \
    glVertexAttribL2dv_PACKED *packed_data = malloc(sizeof(glVertexAttribL2dv_PACKED)); \
    packed_data->index = glVertexAttribL2dv_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribL2dvEXT(index, v) ({ \
    glVertexAttribL2dvEXT_PACKED *packed_data = malloc(sizeof(glVertexAttribL2dvEXT_PACKED)); \
    packed_data->index = glVertexAttribL2dvEXT_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribL2i64NV(index, x, y) ({ \
    glVertexAttribL2i64NV_PACKED *packed_data = malloc(sizeof(glVertexAttribL2i64NV_PACKED)); \
    packed_data->index = glVertexAttribL2i64NV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLint64EXT)x; \
    packed_data->args.a3 = (GLint64EXT)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribL2i64vNV(index, v) ({ \
    glVertexAttribL2i64vNV_PACKED *packed_data = malloc(sizeof(glVertexAttribL2i64vNV_PACKED)); \
    packed_data->index = glVertexAttribL2i64vNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLint64EXT *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribL2ui64NV(index, x, y) ({ \
    glVertexAttribL2ui64NV_PACKED *packed_data = malloc(sizeof(glVertexAttribL2ui64NV_PACKED)); \
    packed_data->index = glVertexAttribL2ui64NV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLuint64EXT)x; \
    packed_data->args.a3 = (GLuint64EXT)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribL2ui64vNV(index, v) ({ \
    glVertexAttribL2ui64vNV_PACKED *packed_data = malloc(sizeof(glVertexAttribL2ui64vNV_PACKED)); \
    packed_data->index = glVertexAttribL2ui64vNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLuint64EXT *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribL3d(index, x, y, z) ({ \
    glVertexAttribL3d_PACKED *packed_data = malloc(sizeof(glVertexAttribL3d_PACKED)); \
    packed_data->index = glVertexAttribL3d_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLdouble)x; \
    packed_data->args.a3 = (GLdouble)y; \
    packed_data->args.a4 = (GLdouble)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribL3dEXT(index, x, y, z) ({ \
    glVertexAttribL3dEXT_PACKED *packed_data = malloc(sizeof(glVertexAttribL3dEXT_PACKED)); \
    packed_data->index = glVertexAttribL3dEXT_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLdouble)x; \
    packed_data->args.a3 = (GLdouble)y; \
    packed_data->args.a4 = (GLdouble)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribL3dv(index, v) ({ \
    glVertexAttribL3dv_PACKED *packed_data = malloc(sizeof(glVertexAttribL3dv_PACKED)); \
    packed_data->index = glVertexAttribL3dv_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribL3dvEXT(index, v) ({ \
    glVertexAttribL3dvEXT_PACKED *packed_data = malloc(sizeof(glVertexAttribL3dvEXT_PACKED)); \
    packed_data->index = glVertexAttribL3dvEXT_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribL3i64NV(index, x, y, z) ({ \
    glVertexAttribL3i64NV_PACKED *packed_data = malloc(sizeof(glVertexAttribL3i64NV_PACKED)); \
    packed_data->index = glVertexAttribL3i64NV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLint64EXT)x; \
    packed_data->args.a3 = (GLint64EXT)y; \
    packed_data->args.a4 = (GLint64EXT)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribL3i64vNV(index, v) ({ \
    glVertexAttribL3i64vNV_PACKED *packed_data = malloc(sizeof(glVertexAttribL3i64vNV_PACKED)); \
    packed_data->index = glVertexAttribL3i64vNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLint64EXT *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribL3ui64NV(index, x, y, z) ({ \
    glVertexAttribL3ui64NV_PACKED *packed_data = malloc(sizeof(glVertexAttribL3ui64NV_PACKED)); \
    packed_data->index = glVertexAttribL3ui64NV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLuint64EXT)x; \
    packed_data->args.a3 = (GLuint64EXT)y; \
    packed_data->args.a4 = (GLuint64EXT)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribL3ui64vNV(index, v) ({ \
    glVertexAttribL3ui64vNV_PACKED *packed_data = malloc(sizeof(glVertexAttribL3ui64vNV_PACKED)); \
    packed_data->index = glVertexAttribL3ui64vNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLuint64EXT *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribL4d(index, x, y, z, w) ({ \
    glVertexAttribL4d_PACKED *packed_data = malloc(sizeof(glVertexAttribL4d_PACKED)); \
    packed_data->index = glVertexAttribL4d_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLdouble)x; \
    packed_data->args.a3 = (GLdouble)y; \
    packed_data->args.a4 = (GLdouble)z; \
    packed_data->args.a5 = (GLdouble)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribL4dEXT(index, x, y, z, w) ({ \
    glVertexAttribL4dEXT_PACKED *packed_data = malloc(sizeof(glVertexAttribL4dEXT_PACKED)); \
    packed_data->index = glVertexAttribL4dEXT_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLdouble)x; \
    packed_data->args.a3 = (GLdouble)y; \
    packed_data->args.a4 = (GLdouble)z; \
    packed_data->args.a5 = (GLdouble)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribL4dv(index, v) ({ \
    glVertexAttribL4dv_PACKED *packed_data = malloc(sizeof(glVertexAttribL4dv_PACKED)); \
    packed_data->index = glVertexAttribL4dv_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribL4dvEXT(index, v) ({ \
    glVertexAttribL4dvEXT_PACKED *packed_data = malloc(sizeof(glVertexAttribL4dvEXT_PACKED)); \
    packed_data->index = glVertexAttribL4dvEXT_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribL4i64NV(index, x, y, z, w) ({ \
    glVertexAttribL4i64NV_PACKED *packed_data = malloc(sizeof(glVertexAttribL4i64NV_PACKED)); \
    packed_data->index = glVertexAttribL4i64NV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLint64EXT)x; \
    packed_data->args.a3 = (GLint64EXT)y; \
    packed_data->args.a4 = (GLint64EXT)z; \
    packed_data->args.a5 = (GLint64EXT)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribL4i64vNV(index, v) ({ \
    glVertexAttribL4i64vNV_PACKED *packed_data = malloc(sizeof(glVertexAttribL4i64vNV_PACKED)); \
    packed_data->index = glVertexAttribL4i64vNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLint64EXT *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribL4ui64NV(index, x, y, z, w) ({ \
    glVertexAttribL4ui64NV_PACKED *packed_data = malloc(sizeof(glVertexAttribL4ui64NV_PACKED)); \
    packed_data->index = glVertexAttribL4ui64NV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLuint64EXT)x; \
    packed_data->args.a3 = (GLuint64EXT)y; \
    packed_data->args.a4 = (GLuint64EXT)z; \
    packed_data->args.a5 = (GLuint64EXT)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribL4ui64vNV(index, v) ({ \
    glVertexAttribL4ui64vNV_PACKED *packed_data = malloc(sizeof(glVertexAttribL4ui64vNV_PACKED)); \
    packed_data->index = glVertexAttribL4ui64vNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLuint64EXT *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribLFormat(attribindex, size, type, relativeoffset) ({ \
    glVertexAttribLFormat_PACKED *packed_data = malloc(sizeof(glVertexAttribLFormat_PACKED)); \
    packed_data->index = glVertexAttribLFormat_INDEX; \
    packed_data->args.a1 = (GLuint)attribindex; \
    packed_data->args.a2 = (GLint)size; \
    packed_data->args.a3 = (GLenum)type; \
    packed_data->args.a4 = (GLuint)relativeoffset; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribLFormatNV(index, size, type, stride) ({ \
    glVertexAttribLFormatNV_PACKED *packed_data = malloc(sizeof(glVertexAttribLFormatNV_PACKED)); \
    packed_data->index = glVertexAttribLFormatNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLint)size; \
    packed_data->args.a3 = (GLenum)type; \
    packed_data->args.a4 = (GLsizei)stride; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribLPointer(index, size, type, stride, pointer) ({ \
    glVertexAttribLPointer_PACKED *packed_data = malloc(sizeof(glVertexAttribLPointer_PACKED)); \
    packed_data->index = glVertexAttribLPointer_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLint)size; \
    packed_data->args.a3 = (GLenum)type; \
    packed_data->args.a4 = (GLsizei)stride; \
    packed_data->args.a5 = (GLvoid *)pointer; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribLPointerEXT(index, size, type, stride, pointer) ({ \
    glVertexAttribLPointerEXT_PACKED *packed_data = malloc(sizeof(glVertexAttribLPointerEXT_PACKED)); \
    packed_data->index = glVertexAttribLPointerEXT_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLint)size; \
    packed_data->args.a3 = (GLenum)type; \
    packed_data->args.a4 = (GLsizei)stride; \
    packed_data->args.a5 = (GLvoid *)pointer; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribP1ui(index, type, normalized, value) ({ \
    glVertexAttribP1ui_PACKED *packed_data = malloc(sizeof(glVertexAttribP1ui_PACKED)); \
    packed_data->index = glVertexAttribP1ui_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLenum)type; \
    packed_data->args.a3 = (GLboolean)normalized; \
    packed_data->args.a4 = (GLuint)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribP1uiv(index, type, normalized, value) ({ \
    glVertexAttribP1uiv_PACKED *packed_data = malloc(sizeof(glVertexAttribP1uiv_PACKED)); \
    packed_data->index = glVertexAttribP1uiv_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLenum)type; \
    packed_data->args.a3 = (GLboolean)normalized; \
    packed_data->args.a4 = (GLuint *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribP2ui(index, type, normalized, value) ({ \
    glVertexAttribP2ui_PACKED *packed_data = malloc(sizeof(glVertexAttribP2ui_PACKED)); \
    packed_data->index = glVertexAttribP2ui_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLenum)type; \
    packed_data->args.a3 = (GLboolean)normalized; \
    packed_data->args.a4 = (GLuint)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribP2uiv(index, type, normalized, value) ({ \
    glVertexAttribP2uiv_PACKED *packed_data = malloc(sizeof(glVertexAttribP2uiv_PACKED)); \
    packed_data->index = glVertexAttribP2uiv_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLenum)type; \
    packed_data->args.a3 = (GLboolean)normalized; \
    packed_data->args.a4 = (GLuint *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribP3ui(index, type, normalized, value) ({ \
    glVertexAttribP3ui_PACKED *packed_data = malloc(sizeof(glVertexAttribP3ui_PACKED)); \
    packed_data->index = glVertexAttribP3ui_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLenum)type; \
    packed_data->args.a3 = (GLboolean)normalized; \
    packed_data->args.a4 = (GLuint)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribP3uiv(index, type, normalized, value) ({ \
    glVertexAttribP3uiv_PACKED *packed_data = malloc(sizeof(glVertexAttribP3uiv_PACKED)); \
    packed_data->index = glVertexAttribP3uiv_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLenum)type; \
    packed_data->args.a3 = (GLboolean)normalized; \
    packed_data->args.a4 = (GLuint *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribP4ui(index, type, normalized, value) ({ \
    glVertexAttribP4ui_PACKED *packed_data = malloc(sizeof(glVertexAttribP4ui_PACKED)); \
    packed_data->index = glVertexAttribP4ui_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLenum)type; \
    packed_data->args.a3 = (GLboolean)normalized; \
    packed_data->args.a4 = (GLuint)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribP4uiv(index, type, normalized, value) ({ \
    glVertexAttribP4uiv_PACKED *packed_data = malloc(sizeof(glVertexAttribP4uiv_PACKED)); \
    packed_data->index = glVertexAttribP4uiv_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLenum)type; \
    packed_data->args.a3 = (GLboolean)normalized; \
    packed_data->args.a4 = (GLuint *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribPointer(index, size, type, normalized, stride, pointer) ({ \
    glVertexAttribPointer_PACKED *packed_data = malloc(sizeof(glVertexAttribPointer_PACKED)); \
    packed_data->index = glVertexAttribPointer_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLint)size; \
    packed_data->args.a3 = (GLenum)type; \
    packed_data->args.a4 = (GLboolean)normalized; \
    packed_data->args.a5 = (GLsizei)stride; \
    packed_data->args.a6 = (GLvoid *)pointer; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribPointerARB(index, size, type, normalized, stride, pointer) ({ \
    glVertexAttribPointerARB_PACKED *packed_data = malloc(sizeof(glVertexAttribPointerARB_PACKED)); \
    packed_data->index = glVertexAttribPointerARB_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLint)size; \
    packed_data->args.a3 = (GLenum)type; \
    packed_data->args.a4 = (GLboolean)normalized; \
    packed_data->args.a5 = (GLsizei)stride; \
    packed_data->args.a6 = (GLvoid *)pointer; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribPointerNV(index, fsize, type, stride, pointer) ({ \
    glVertexAttribPointerNV_PACKED *packed_data = malloc(sizeof(glVertexAttribPointerNV_PACKED)); \
    packed_data->index = glVertexAttribPointerNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLint)fsize; \
    packed_data->args.a3 = (GLenum)type; \
    packed_data->args.a4 = (GLsizei)stride; \
    packed_data->args.a5 = (GLvoid *)pointer; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribs1dvNV(index, count, v) ({ \
    glVertexAttribs1dvNV_PACKED *packed_data = malloc(sizeof(glVertexAttribs1dvNV_PACKED)); \
    packed_data->index = glVertexAttribs1dvNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribs1fvNV(index, count, v) ({ \
    glVertexAttribs1fvNV_PACKED *packed_data = malloc(sizeof(glVertexAttribs1fvNV_PACKED)); \
    packed_data->index = glVertexAttribs1fvNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribs1hvNV(index, n, v) ({ \
    glVertexAttribs1hvNV_PACKED *packed_data = malloc(sizeof(glVertexAttribs1hvNV_PACKED)); \
    packed_data->index = glVertexAttribs1hvNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLsizei)n; \
    packed_data->args.a3 = (GLhalfNV *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribs1svNV(index, count, v) ({ \
    glVertexAttribs1svNV_PACKED *packed_data = malloc(sizeof(glVertexAttribs1svNV_PACKED)); \
    packed_data->index = glVertexAttribs1svNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLshort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribs2dvNV(index, count, v) ({ \
    glVertexAttribs2dvNV_PACKED *packed_data = malloc(sizeof(glVertexAttribs2dvNV_PACKED)); \
    packed_data->index = glVertexAttribs2dvNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribs2fvNV(index, count, v) ({ \
    glVertexAttribs2fvNV_PACKED *packed_data = malloc(sizeof(glVertexAttribs2fvNV_PACKED)); \
    packed_data->index = glVertexAttribs2fvNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribs2hvNV(index, n, v) ({ \
    glVertexAttribs2hvNV_PACKED *packed_data = malloc(sizeof(glVertexAttribs2hvNV_PACKED)); \
    packed_data->index = glVertexAttribs2hvNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLsizei)n; \
    packed_data->args.a3 = (GLhalfNV *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribs2svNV(index, count, v) ({ \
    glVertexAttribs2svNV_PACKED *packed_data = malloc(sizeof(glVertexAttribs2svNV_PACKED)); \
    packed_data->index = glVertexAttribs2svNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLshort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribs3dvNV(index, count, v) ({ \
    glVertexAttribs3dvNV_PACKED *packed_data = malloc(sizeof(glVertexAttribs3dvNV_PACKED)); \
    packed_data->index = glVertexAttribs3dvNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribs3fvNV(index, count, v) ({ \
    glVertexAttribs3fvNV_PACKED *packed_data = malloc(sizeof(glVertexAttribs3fvNV_PACKED)); \
    packed_data->index = glVertexAttribs3fvNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribs3hvNV(index, n, v) ({ \
    glVertexAttribs3hvNV_PACKED *packed_data = malloc(sizeof(glVertexAttribs3hvNV_PACKED)); \
    packed_data->index = glVertexAttribs3hvNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLsizei)n; \
    packed_data->args.a3 = (GLhalfNV *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribs3svNV(index, count, v) ({ \
    glVertexAttribs3svNV_PACKED *packed_data = malloc(sizeof(glVertexAttribs3svNV_PACKED)); \
    packed_data->index = glVertexAttribs3svNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLshort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribs4dvNV(index, count, v) ({ \
    glVertexAttribs4dvNV_PACKED *packed_data = malloc(sizeof(glVertexAttribs4dvNV_PACKED)); \
    packed_data->index = glVertexAttribs4dvNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribs4fvNV(index, count, v) ({ \
    glVertexAttribs4fvNV_PACKED *packed_data = malloc(sizeof(glVertexAttribs4fvNV_PACKED)); \
    packed_data->index = glVertexAttribs4fvNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribs4hvNV(index, n, v) ({ \
    glVertexAttribs4hvNV_PACKED *packed_data = malloc(sizeof(glVertexAttribs4hvNV_PACKED)); \
    packed_data->index = glVertexAttribs4hvNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLsizei)n; \
    packed_data->args.a3 = (GLhalfNV *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribs4svNV(index, count, v) ({ \
    glVertexAttribs4svNV_PACKED *packed_data = malloc(sizeof(glVertexAttribs4svNV_PACKED)); \
    packed_data->index = glVertexAttribs4svNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLshort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexAttribs4ubvNV(index, count, v) ({ \
    glVertexAttribs4ubvNV_PACKED *packed_data = malloc(sizeof(glVertexAttribs4ubvNV_PACKED)); \
    packed_data->index = glVertexAttribs4ubvNV_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLubyte *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexBindingDivisor(bindingindex, divisor) ({ \
    glVertexBindingDivisor_PACKED *packed_data = malloc(sizeof(glVertexBindingDivisor_PACKED)); \
    packed_data->index = glVertexBindingDivisor_INDEX; \
    packed_data->args.a1 = (GLuint)bindingindex; \
    packed_data->args.a2 = (GLuint)divisor; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexBlendARB(count) ({ \
    glVertexBlendARB_PACKED *packed_data = malloc(sizeof(glVertexBlendARB_PACKED)); \
    packed_data->index = glVertexBlendARB_INDEX; \
    packed_data->args.a1 = (GLint)count; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexBlendEnvfATI(pname, param) ({ \
    glVertexBlendEnvfATI_PACKED *packed_data = malloc(sizeof(glVertexBlendEnvfATI_PACKED)); \
    packed_data->index = glVertexBlendEnvfATI_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLfloat)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexBlendEnviATI(pname, param) ({ \
    glVertexBlendEnviATI_PACKED *packed_data = malloc(sizeof(glVertexBlendEnviATI_PACKED)); \
    packed_data->index = glVertexBlendEnviATI_INDEX; \
    packed_data->args.a1 = (GLenum)pname; \
    packed_data->args.a2 = (GLint)param; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexFormatNV(size, type, stride) ({ \
    glVertexFormatNV_PACKED *packed_data = malloc(sizeof(glVertexFormatNV_PACKED)); \
    packed_data->index = glVertexFormatNV_INDEX; \
    packed_data->args.a1 = (GLint)size; \
    packed_data->args.a2 = (GLenum)type; \
    packed_data->args.a3 = (GLsizei)stride; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexP2ui(type, value) ({ \
    glVertexP2ui_PACKED *packed_data = malloc(sizeof(glVertexP2ui_PACKED)); \
    packed_data->index = glVertexP2ui_INDEX; \
    packed_data->args.a1 = (GLenum)type; \
    packed_data->args.a2 = (GLuint)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexP2uiv(type, value) ({ \
    glVertexP2uiv_PACKED *packed_data = malloc(sizeof(glVertexP2uiv_PACKED)); \
    packed_data->index = glVertexP2uiv_INDEX; \
    packed_data->args.a1 = (GLenum)type; \
    packed_data->args.a2 = (GLuint *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexP3ui(type, value) ({ \
    glVertexP3ui_PACKED *packed_data = malloc(sizeof(glVertexP3ui_PACKED)); \
    packed_data->index = glVertexP3ui_INDEX; \
    packed_data->args.a1 = (GLenum)type; \
    packed_data->args.a2 = (GLuint)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexP3uiv(type, value) ({ \
    glVertexP3uiv_PACKED *packed_data = malloc(sizeof(glVertexP3uiv_PACKED)); \
    packed_data->index = glVertexP3uiv_INDEX; \
    packed_data->args.a1 = (GLenum)type; \
    packed_data->args.a2 = (GLuint *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexP4ui(type, value) ({ \
    glVertexP4ui_PACKED *packed_data = malloc(sizeof(glVertexP4ui_PACKED)); \
    packed_data->index = glVertexP4ui_INDEX; \
    packed_data->args.a1 = (GLenum)type; \
    packed_data->args.a2 = (GLuint)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexP4uiv(type, value) ({ \
    glVertexP4uiv_PACKED *packed_data = malloc(sizeof(glVertexP4uiv_PACKED)); \
    packed_data->index = glVertexP4uiv_INDEX; \
    packed_data->args.a1 = (GLenum)type; \
    packed_data->args.a2 = (GLuint *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexPointer(size, type, stride, pointer) ({ \
    glVertexPointer_PACKED *packed_data = malloc(sizeof(glVertexPointer_PACKED)); \
    packed_data->index = glVertexPointer_INDEX; \
    packed_data->args.a1 = (GLint)size; \
    packed_data->args.a2 = (GLenum)type; \
    packed_data->args.a3 = (GLsizei)stride; \
    packed_data->args.a4 = (GLvoid *)pointer; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexPointerEXT(size, type, stride, count, pointer) ({ \
    glVertexPointerEXT_PACKED *packed_data = malloc(sizeof(glVertexPointerEXT_PACKED)); \
    packed_data->index = glVertexPointerEXT_INDEX; \
    packed_data->args.a1 = (GLint)size; \
    packed_data->args.a2 = (GLenum)type; \
    packed_data->args.a3 = (GLsizei)stride; \
    packed_data->args.a4 = (GLsizei)count; \
    packed_data->args.a5 = (GLvoid *)pointer; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexPointerListIBM(size, type, stride, pointer, ptrstride) ({ \
    glVertexPointerListIBM_PACKED *packed_data = malloc(sizeof(glVertexPointerListIBM_PACKED)); \
    packed_data->index = glVertexPointerListIBM_INDEX; \
    packed_data->args.a1 = (GLint)size; \
    packed_data->args.a2 = (GLenum)type; \
    packed_data->args.a3 = (GLint)stride; \
    packed_data->args.a4 = (GLvoid *)pointer; \
    packed_data->args.a5 = (GLint)ptrstride; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexPointervINTEL(size, type, pointer) ({ \
    glVertexPointervINTEL_PACKED *packed_data = malloc(sizeof(glVertexPointervINTEL_PACKED)); \
    packed_data->index = glVertexPointervINTEL_INDEX; \
    packed_data->args.a1 = (GLint)size; \
    packed_data->args.a2 = (GLenum)type; \
    packed_data->args.a3 = (GLvoid *)pointer; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexStream1dATI(stream, x) ({ \
    glVertexStream1dATI_PACKED *packed_data = malloc(sizeof(glVertexStream1dATI_PACKED)); \
    packed_data->index = glVertexStream1dATI_INDEX; \
    packed_data->args.a1 = (GLenum)stream; \
    packed_data->args.a2 = (GLdouble)x; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexStream1dvATI(stream, coords) ({ \
    glVertexStream1dvATI_PACKED *packed_data = malloc(sizeof(glVertexStream1dvATI_PACKED)); \
    packed_data->index = glVertexStream1dvATI_INDEX; \
    packed_data->args.a1 = (GLenum)stream; \
    packed_data->args.a2 = (GLdouble *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexStream1fATI(stream, x) ({ \
    glVertexStream1fATI_PACKED *packed_data = malloc(sizeof(glVertexStream1fATI_PACKED)); \
    packed_data->index = glVertexStream1fATI_INDEX; \
    packed_data->args.a1 = (GLenum)stream; \
    packed_data->args.a2 = (GLfloat)x; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexStream1fvATI(stream, coords) ({ \
    glVertexStream1fvATI_PACKED *packed_data = malloc(sizeof(glVertexStream1fvATI_PACKED)); \
    packed_data->index = glVertexStream1fvATI_INDEX; \
    packed_data->args.a1 = (GLenum)stream; \
    packed_data->args.a2 = (GLfloat *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexStream1iATI(stream, x) ({ \
    glVertexStream1iATI_PACKED *packed_data = malloc(sizeof(glVertexStream1iATI_PACKED)); \
    packed_data->index = glVertexStream1iATI_INDEX; \
    packed_data->args.a1 = (GLenum)stream; \
    packed_data->args.a2 = (GLint)x; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexStream1ivATI(stream, coords) ({ \
    glVertexStream1ivATI_PACKED *packed_data = malloc(sizeof(glVertexStream1ivATI_PACKED)); \
    packed_data->index = glVertexStream1ivATI_INDEX; \
    packed_data->args.a1 = (GLenum)stream; \
    packed_data->args.a2 = (GLint *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexStream1sATI(stream, x) ({ \
    glVertexStream1sATI_PACKED *packed_data = malloc(sizeof(glVertexStream1sATI_PACKED)); \
    packed_data->index = glVertexStream1sATI_INDEX; \
    packed_data->args.a1 = (GLenum)stream; \
    packed_data->args.a2 = (GLshort)x; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexStream1svATI(stream, coords) ({ \
    glVertexStream1svATI_PACKED *packed_data = malloc(sizeof(glVertexStream1svATI_PACKED)); \
    packed_data->index = glVertexStream1svATI_INDEX; \
    packed_data->args.a1 = (GLenum)stream; \
    packed_data->args.a2 = (GLshort *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexStream2dATI(stream, x, y) ({ \
    glVertexStream2dATI_PACKED *packed_data = malloc(sizeof(glVertexStream2dATI_PACKED)); \
    packed_data->index = glVertexStream2dATI_INDEX; \
    packed_data->args.a1 = (GLenum)stream; \
    packed_data->args.a2 = (GLdouble)x; \
    packed_data->args.a3 = (GLdouble)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexStream2dvATI(stream, coords) ({ \
    glVertexStream2dvATI_PACKED *packed_data = malloc(sizeof(glVertexStream2dvATI_PACKED)); \
    packed_data->index = glVertexStream2dvATI_INDEX; \
    packed_data->args.a1 = (GLenum)stream; \
    packed_data->args.a2 = (GLdouble *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexStream2fATI(stream, x, y) ({ \
    glVertexStream2fATI_PACKED *packed_data = malloc(sizeof(glVertexStream2fATI_PACKED)); \
    packed_data->index = glVertexStream2fATI_INDEX; \
    packed_data->args.a1 = (GLenum)stream; \
    packed_data->args.a2 = (GLfloat)x; \
    packed_data->args.a3 = (GLfloat)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexStream2fvATI(stream, coords) ({ \
    glVertexStream2fvATI_PACKED *packed_data = malloc(sizeof(glVertexStream2fvATI_PACKED)); \
    packed_data->index = glVertexStream2fvATI_INDEX; \
    packed_data->args.a1 = (GLenum)stream; \
    packed_data->args.a2 = (GLfloat *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexStream2iATI(stream, x, y) ({ \
    glVertexStream2iATI_PACKED *packed_data = malloc(sizeof(glVertexStream2iATI_PACKED)); \
    packed_data->index = glVertexStream2iATI_INDEX; \
    packed_data->args.a1 = (GLenum)stream; \
    packed_data->args.a2 = (GLint)x; \
    packed_data->args.a3 = (GLint)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexStream2ivATI(stream, coords) ({ \
    glVertexStream2ivATI_PACKED *packed_data = malloc(sizeof(glVertexStream2ivATI_PACKED)); \
    packed_data->index = glVertexStream2ivATI_INDEX; \
    packed_data->args.a1 = (GLenum)stream; \
    packed_data->args.a2 = (GLint *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexStream2sATI(stream, x, y) ({ \
    glVertexStream2sATI_PACKED *packed_data = malloc(sizeof(glVertexStream2sATI_PACKED)); \
    packed_data->index = glVertexStream2sATI_INDEX; \
    packed_data->args.a1 = (GLenum)stream; \
    packed_data->args.a2 = (GLshort)x; \
    packed_data->args.a3 = (GLshort)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexStream2svATI(stream, coords) ({ \
    glVertexStream2svATI_PACKED *packed_data = malloc(sizeof(glVertexStream2svATI_PACKED)); \
    packed_data->index = glVertexStream2svATI_INDEX; \
    packed_data->args.a1 = (GLenum)stream; \
    packed_data->args.a2 = (GLshort *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexStream3dATI(stream, x, y, z) ({ \
    glVertexStream3dATI_PACKED *packed_data = malloc(sizeof(glVertexStream3dATI_PACKED)); \
    packed_data->index = glVertexStream3dATI_INDEX; \
    packed_data->args.a1 = (GLenum)stream; \
    packed_data->args.a2 = (GLdouble)x; \
    packed_data->args.a3 = (GLdouble)y; \
    packed_data->args.a4 = (GLdouble)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexStream3dvATI(stream, coords) ({ \
    glVertexStream3dvATI_PACKED *packed_data = malloc(sizeof(glVertexStream3dvATI_PACKED)); \
    packed_data->index = glVertexStream3dvATI_INDEX; \
    packed_data->args.a1 = (GLenum)stream; \
    packed_data->args.a2 = (GLdouble *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexStream3fATI(stream, x, y, z) ({ \
    glVertexStream3fATI_PACKED *packed_data = malloc(sizeof(glVertexStream3fATI_PACKED)); \
    packed_data->index = glVertexStream3fATI_INDEX; \
    packed_data->args.a1 = (GLenum)stream; \
    packed_data->args.a2 = (GLfloat)x; \
    packed_data->args.a3 = (GLfloat)y; \
    packed_data->args.a4 = (GLfloat)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexStream3fvATI(stream, coords) ({ \
    glVertexStream3fvATI_PACKED *packed_data = malloc(sizeof(glVertexStream3fvATI_PACKED)); \
    packed_data->index = glVertexStream3fvATI_INDEX; \
    packed_data->args.a1 = (GLenum)stream; \
    packed_data->args.a2 = (GLfloat *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexStream3iATI(stream, x, y, z) ({ \
    glVertexStream3iATI_PACKED *packed_data = malloc(sizeof(glVertexStream3iATI_PACKED)); \
    packed_data->index = glVertexStream3iATI_INDEX; \
    packed_data->args.a1 = (GLenum)stream; \
    packed_data->args.a2 = (GLint)x; \
    packed_data->args.a3 = (GLint)y; \
    packed_data->args.a4 = (GLint)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexStream3ivATI(stream, coords) ({ \
    glVertexStream3ivATI_PACKED *packed_data = malloc(sizeof(glVertexStream3ivATI_PACKED)); \
    packed_data->index = glVertexStream3ivATI_INDEX; \
    packed_data->args.a1 = (GLenum)stream; \
    packed_data->args.a2 = (GLint *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexStream3sATI(stream, x, y, z) ({ \
    glVertexStream3sATI_PACKED *packed_data = malloc(sizeof(glVertexStream3sATI_PACKED)); \
    packed_data->index = glVertexStream3sATI_INDEX; \
    packed_data->args.a1 = (GLenum)stream; \
    packed_data->args.a2 = (GLshort)x; \
    packed_data->args.a3 = (GLshort)y; \
    packed_data->args.a4 = (GLshort)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexStream3svATI(stream, coords) ({ \
    glVertexStream3svATI_PACKED *packed_data = malloc(sizeof(glVertexStream3svATI_PACKED)); \
    packed_data->index = glVertexStream3svATI_INDEX; \
    packed_data->args.a1 = (GLenum)stream; \
    packed_data->args.a2 = (GLshort *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexStream4dATI(stream, x, y, z, w) ({ \
    glVertexStream4dATI_PACKED *packed_data = malloc(sizeof(glVertexStream4dATI_PACKED)); \
    packed_data->index = glVertexStream4dATI_INDEX; \
    packed_data->args.a1 = (GLenum)stream; \
    packed_data->args.a2 = (GLdouble)x; \
    packed_data->args.a3 = (GLdouble)y; \
    packed_data->args.a4 = (GLdouble)z; \
    packed_data->args.a5 = (GLdouble)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexStream4dvATI(stream, coords) ({ \
    glVertexStream4dvATI_PACKED *packed_data = malloc(sizeof(glVertexStream4dvATI_PACKED)); \
    packed_data->index = glVertexStream4dvATI_INDEX; \
    packed_data->args.a1 = (GLenum)stream; \
    packed_data->args.a2 = (GLdouble *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexStream4fATI(stream, x, y, z, w) ({ \
    glVertexStream4fATI_PACKED *packed_data = malloc(sizeof(glVertexStream4fATI_PACKED)); \
    packed_data->index = glVertexStream4fATI_INDEX; \
    packed_data->args.a1 = (GLenum)stream; \
    packed_data->args.a2 = (GLfloat)x; \
    packed_data->args.a3 = (GLfloat)y; \
    packed_data->args.a4 = (GLfloat)z; \
    packed_data->args.a5 = (GLfloat)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexStream4fvATI(stream, coords) ({ \
    glVertexStream4fvATI_PACKED *packed_data = malloc(sizeof(glVertexStream4fvATI_PACKED)); \
    packed_data->index = glVertexStream4fvATI_INDEX; \
    packed_data->args.a1 = (GLenum)stream; \
    packed_data->args.a2 = (GLfloat *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexStream4iATI(stream, x, y, z, w) ({ \
    glVertexStream4iATI_PACKED *packed_data = malloc(sizeof(glVertexStream4iATI_PACKED)); \
    packed_data->index = glVertexStream4iATI_INDEX; \
    packed_data->args.a1 = (GLenum)stream; \
    packed_data->args.a2 = (GLint)x; \
    packed_data->args.a3 = (GLint)y; \
    packed_data->args.a4 = (GLint)z; \
    packed_data->args.a5 = (GLint)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexStream4ivATI(stream, coords) ({ \
    glVertexStream4ivATI_PACKED *packed_data = malloc(sizeof(glVertexStream4ivATI_PACKED)); \
    packed_data->index = glVertexStream4ivATI_INDEX; \
    packed_data->args.a1 = (GLenum)stream; \
    packed_data->args.a2 = (GLint *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexStream4sATI(stream, x, y, z, w) ({ \
    glVertexStream4sATI_PACKED *packed_data = malloc(sizeof(glVertexStream4sATI_PACKED)); \
    packed_data->index = glVertexStream4sATI_INDEX; \
    packed_data->args.a1 = (GLenum)stream; \
    packed_data->args.a2 = (GLshort)x; \
    packed_data->args.a3 = (GLshort)y; \
    packed_data->args.a4 = (GLshort)z; \
    packed_data->args.a5 = (GLshort)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexStream4svATI(stream, coords) ({ \
    glVertexStream4svATI_PACKED *packed_data = malloc(sizeof(glVertexStream4svATI_PACKED)); \
    packed_data->index = glVertexStream4svATI_INDEX; \
    packed_data->args.a1 = (GLenum)stream; \
    packed_data->args.a2 = (GLshort *)coords; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexWeightPointerEXT(size, type, stride, pointer) ({ \
    glVertexWeightPointerEXT_PACKED *packed_data = malloc(sizeof(glVertexWeightPointerEXT_PACKED)); \
    packed_data->index = glVertexWeightPointerEXT_INDEX; \
    packed_data->args.a1 = (GLint)size; \
    packed_data->args.a2 = (GLenum)type; \
    packed_data->args.a3 = (GLsizei)stride; \
    packed_data->args.a4 = (GLvoid *)pointer; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexWeightfEXT(weight) ({ \
    glVertexWeightfEXT_PACKED *packed_data = malloc(sizeof(glVertexWeightfEXT_PACKED)); \
    packed_data->index = glVertexWeightfEXT_INDEX; \
    packed_data->args.a1 = (GLfloat)weight; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexWeightfvEXT(weight) ({ \
    glVertexWeightfvEXT_PACKED *packed_data = malloc(sizeof(glVertexWeightfvEXT_PACKED)); \
    packed_data->index = glVertexWeightfvEXT_INDEX; \
    packed_data->args.a1 = (GLfloat *)weight; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexWeighthNV(weight) ({ \
    glVertexWeighthNV_PACKED *packed_data = malloc(sizeof(glVertexWeighthNV_PACKED)); \
    packed_data->index = glVertexWeighthNV_INDEX; \
    packed_data->args.a1 = (GLhalfNV)weight; \
    (packed_call_t *)packed_data; \
})
#define pack_glVertexWeighthvNV(weight) ({ \
    glVertexWeighthvNV_PACKED *packed_data = malloc(sizeof(glVertexWeighthvNV_PACKED)); \
    packed_data->index = glVertexWeighthvNV_INDEX; \
    packed_data->args.a1 = (GLhalfNV *)weight; \
    (packed_call_t *)packed_data; \
})
#define pack_glVideoCaptureNV(video_capture_slot, sequence_num, capture_time) ({ \
    glVideoCaptureNV_PACKED *packed_data = malloc(sizeof(glVideoCaptureNV_PACKED)); \
    packed_data->index = glVideoCaptureNV_INDEX; \
    packed_data->args.a1 = (GLuint)video_capture_slot; \
    packed_data->args.a2 = (GLuint *)sequence_num; \
    packed_data->args.a3 = (GLuint64EXT *)capture_time; \
    (packed_call_t *)packed_data; \
})
#define pack_glVideoCaptureStreamParameterdvNV(video_capture_slot, stream, pname, params) ({ \
    glVideoCaptureStreamParameterdvNV_PACKED *packed_data = malloc(sizeof(glVideoCaptureStreamParameterdvNV_PACKED)); \
    packed_data->index = glVideoCaptureStreamParameterdvNV_INDEX; \
    packed_data->args.a1 = (GLuint)video_capture_slot; \
    packed_data->args.a2 = (GLuint)stream; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLdouble *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glVideoCaptureStreamParameterfvNV(video_capture_slot, stream, pname, params) ({ \
    glVideoCaptureStreamParameterfvNV_PACKED *packed_data = malloc(sizeof(glVideoCaptureStreamParameterfvNV_PACKED)); \
    packed_data->index = glVideoCaptureStreamParameterfvNV_INDEX; \
    packed_data->args.a1 = (GLuint)video_capture_slot; \
    packed_data->args.a2 = (GLuint)stream; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLfloat *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glVideoCaptureStreamParameterivNV(video_capture_slot, stream, pname, params) ({ \
    glVideoCaptureStreamParameterivNV_PACKED *packed_data = malloc(sizeof(glVideoCaptureStreamParameterivNV_PACKED)); \
    packed_data->index = glVideoCaptureStreamParameterivNV_INDEX; \
    packed_data->args.a1 = (GLuint)video_capture_slot; \
    packed_data->args.a2 = (GLuint)stream; \
    packed_data->args.a3 = (GLenum)pname; \
    packed_data->args.a4 = (GLint *)params; \
    (packed_call_t *)packed_data; \
})
#define pack_glViewport(x, y, width, height) ({ \
    glViewport_PACKED *packed_data = malloc(sizeof(glViewport_PACKED)); \
    packed_data->index = glViewport_INDEX; \
    packed_data->args.a1 = (GLint)x; \
    packed_data->args.a2 = (GLint)y; \
    packed_data->args.a3 = (GLsizei)width; \
    packed_data->args.a4 = (GLsizei)height; \
    (packed_call_t *)packed_data; \
})
#define pack_glViewportArrayv(first, count, v) ({ \
    glViewportArrayv_PACKED *packed_data = malloc(sizeof(glViewportArrayv_PACKED)); \
    packed_data->index = glViewportArrayv_INDEX; \
    packed_data->args.a1 = (GLuint)first; \
    packed_data->args.a2 = (GLsizei)count; \
    packed_data->args.a3 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glViewportIndexedf(index, x, y, w, h) ({ \
    glViewportIndexedf_PACKED *packed_data = malloc(sizeof(glViewportIndexedf_PACKED)); \
    packed_data->index = glViewportIndexedf_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLfloat)x; \
    packed_data->args.a3 = (GLfloat)y; \
    packed_data->args.a4 = (GLfloat)w; \
    packed_data->args.a5 = (GLfloat)h; \
    (packed_call_t *)packed_data; \
})
#define pack_glViewportIndexedfv(index, v) ({ \
    glViewportIndexedfv_PACKED *packed_data = malloc(sizeof(glViewportIndexedfv_PACKED)); \
    packed_data->index = glViewportIndexedfv_INDEX; \
    packed_data->args.a1 = (GLuint)index; \
    packed_data->args.a2 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glWaitSync(sync, flags, timeout) ({ \
    glWaitSync_PACKED *packed_data = malloc(sizeof(glWaitSync_PACKED)); \
    packed_data->index = glWaitSync_INDEX; \
    packed_data->args.a1 = (GLsync)sync; \
    packed_data->args.a2 = (GLbitfield)flags; \
    packed_data->args.a3 = (GLuint64)timeout; \
    (packed_call_t *)packed_data; \
})
#define pack_glWeightPathsNV(resultPath, numPaths, paths, weights) ({ \
    glWeightPathsNV_PACKED *packed_data = malloc(sizeof(glWeightPathsNV_PACKED)); \
    packed_data->index = glWeightPathsNV_INDEX; \
    packed_data->args.a1 = (GLuint)resultPath; \
    packed_data->args.a2 = (GLsizei)numPaths; \
    packed_data->args.a3 = (GLuint *)paths; \
    packed_data->args.a4 = (GLfloat *)weights; \
    (packed_call_t *)packed_data; \
})
#define pack_glWeightPointerARB(size, type, stride, pointer) ({ \
    glWeightPointerARB_PACKED *packed_data = malloc(sizeof(glWeightPointerARB_PACKED)); \
    packed_data->index = glWeightPointerARB_INDEX; \
    packed_data->args.a1 = (GLint)size; \
    packed_data->args.a2 = (GLenum)type; \
    packed_data->args.a3 = (GLsizei)stride; \
    packed_data->args.a4 = (GLvoid *)pointer; \
    (packed_call_t *)packed_data; \
})
#define pack_glWeightbvARB(size, weights) ({ \
    glWeightbvARB_PACKED *packed_data = malloc(sizeof(glWeightbvARB_PACKED)); \
    packed_data->index = glWeightbvARB_INDEX; \
    packed_data->args.a1 = (GLint)size; \
    packed_data->args.a2 = (GLbyte *)weights; \
    (packed_call_t *)packed_data; \
})
#define pack_glWeightdvARB(size, weights) ({ \
    glWeightdvARB_PACKED *packed_data = malloc(sizeof(glWeightdvARB_PACKED)); \
    packed_data->index = glWeightdvARB_INDEX; \
    packed_data->args.a1 = (GLint)size; \
    packed_data->args.a2 = (GLdouble *)weights; \
    (packed_call_t *)packed_data; \
})
#define pack_glWeightfvARB(size, weights) ({ \
    glWeightfvARB_PACKED *packed_data = malloc(sizeof(glWeightfvARB_PACKED)); \
    packed_data->index = glWeightfvARB_INDEX; \
    packed_data->args.a1 = (GLint)size; \
    packed_data->args.a2 = (GLfloat *)weights; \
    (packed_call_t *)packed_data; \
})
#define pack_glWeightivARB(size, weights) ({ \
    glWeightivARB_PACKED *packed_data = malloc(sizeof(glWeightivARB_PACKED)); \
    packed_data->index = glWeightivARB_INDEX; \
    packed_data->args.a1 = (GLint)size; \
    packed_data->args.a2 = (GLint *)weights; \
    (packed_call_t *)packed_data; \
})
#define pack_glWeightsvARB(size, weights) ({ \
    glWeightsvARB_PACKED *packed_data = malloc(sizeof(glWeightsvARB_PACKED)); \
    packed_data->index = glWeightsvARB_INDEX; \
    packed_data->args.a1 = (GLint)size; \
    packed_data->args.a2 = (GLshort *)weights; \
    (packed_call_t *)packed_data; \
})
#define pack_glWeightubvARB(size, weights) ({ \
    glWeightubvARB_PACKED *packed_data = malloc(sizeof(glWeightubvARB_PACKED)); \
    packed_data->index = glWeightubvARB_INDEX; \
    packed_data->args.a1 = (GLint)size; \
    packed_data->args.a2 = (GLubyte *)weights; \
    (packed_call_t *)packed_data; \
})
#define pack_glWeightuivARB(size, weights) ({ \
    glWeightuivARB_PACKED *packed_data = malloc(sizeof(glWeightuivARB_PACKED)); \
    packed_data->index = glWeightuivARB_INDEX; \
    packed_data->args.a1 = (GLint)size; \
    packed_data->args.a2 = (GLuint *)weights; \
    (packed_call_t *)packed_data; \
})
#define pack_glWeightusvARB(size, weights) ({ \
    glWeightusvARB_PACKED *packed_data = malloc(sizeof(glWeightusvARB_PACKED)); \
    packed_data->index = glWeightusvARB_INDEX; \
    packed_data->args.a1 = (GLint)size; \
    packed_data->args.a2 = (GLushort *)weights; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos2d(x, y) ({ \
    glWindowPos2d_PACKED *packed_data = malloc(sizeof(glWindowPos2d_PACKED)); \
    packed_data->index = glWindowPos2d_INDEX; \
    packed_data->args.a1 = (GLdouble)x; \
    packed_data->args.a2 = (GLdouble)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos2dARB(x, y) ({ \
    glWindowPos2dARB_PACKED *packed_data = malloc(sizeof(glWindowPos2dARB_PACKED)); \
    packed_data->index = glWindowPos2dARB_INDEX; \
    packed_data->args.a1 = (GLdouble)x; \
    packed_data->args.a2 = (GLdouble)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos2dMESA(x, y) ({ \
    glWindowPos2dMESA_PACKED *packed_data = malloc(sizeof(glWindowPos2dMESA_PACKED)); \
    packed_data->index = glWindowPos2dMESA_INDEX; \
    packed_data->args.a1 = (GLdouble)x; \
    packed_data->args.a2 = (GLdouble)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos2dv(v) ({ \
    glWindowPos2dv_PACKED *packed_data = malloc(sizeof(glWindowPos2dv_PACKED)); \
    packed_data->index = glWindowPos2dv_INDEX; \
    packed_data->args.a1 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos2dvARB(v) ({ \
    glWindowPos2dvARB_PACKED *packed_data = malloc(sizeof(glWindowPos2dvARB_PACKED)); \
    packed_data->index = glWindowPos2dvARB_INDEX; \
    packed_data->args.a1 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos2dvMESA(v) ({ \
    glWindowPos2dvMESA_PACKED *packed_data = malloc(sizeof(glWindowPos2dvMESA_PACKED)); \
    packed_data->index = glWindowPos2dvMESA_INDEX; \
    packed_data->args.a1 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos2f(x, y) ({ \
    glWindowPos2f_PACKED *packed_data = malloc(sizeof(glWindowPos2f_PACKED)); \
    packed_data->index = glWindowPos2f_INDEX; \
    packed_data->args.a1 = (GLfloat)x; \
    packed_data->args.a2 = (GLfloat)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos2fARB(x, y) ({ \
    glWindowPos2fARB_PACKED *packed_data = malloc(sizeof(glWindowPos2fARB_PACKED)); \
    packed_data->index = glWindowPos2fARB_INDEX; \
    packed_data->args.a1 = (GLfloat)x; \
    packed_data->args.a2 = (GLfloat)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos2fMESA(x, y) ({ \
    glWindowPos2fMESA_PACKED *packed_data = malloc(sizeof(glWindowPos2fMESA_PACKED)); \
    packed_data->index = glWindowPos2fMESA_INDEX; \
    packed_data->args.a1 = (GLfloat)x; \
    packed_data->args.a2 = (GLfloat)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos2fv(v) ({ \
    glWindowPos2fv_PACKED *packed_data = malloc(sizeof(glWindowPos2fv_PACKED)); \
    packed_data->index = glWindowPos2fv_INDEX; \
    packed_data->args.a1 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos2fvARB(v) ({ \
    glWindowPos2fvARB_PACKED *packed_data = malloc(sizeof(glWindowPos2fvARB_PACKED)); \
    packed_data->index = glWindowPos2fvARB_INDEX; \
    packed_data->args.a1 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos2fvMESA(v) ({ \
    glWindowPos2fvMESA_PACKED *packed_data = malloc(sizeof(glWindowPos2fvMESA_PACKED)); \
    packed_data->index = glWindowPos2fvMESA_INDEX; \
    packed_data->args.a1 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos2i(x, y) ({ \
    glWindowPos2i_PACKED *packed_data = malloc(sizeof(glWindowPos2i_PACKED)); \
    packed_data->index = glWindowPos2i_INDEX; \
    packed_data->args.a1 = (GLint)x; \
    packed_data->args.a2 = (GLint)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos2iARB(x, y) ({ \
    glWindowPos2iARB_PACKED *packed_data = malloc(sizeof(glWindowPos2iARB_PACKED)); \
    packed_data->index = glWindowPos2iARB_INDEX; \
    packed_data->args.a1 = (GLint)x; \
    packed_data->args.a2 = (GLint)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos2iMESA(x, y) ({ \
    glWindowPos2iMESA_PACKED *packed_data = malloc(sizeof(glWindowPos2iMESA_PACKED)); \
    packed_data->index = glWindowPos2iMESA_INDEX; \
    packed_data->args.a1 = (GLint)x; \
    packed_data->args.a2 = (GLint)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos2iv(v) ({ \
    glWindowPos2iv_PACKED *packed_data = malloc(sizeof(glWindowPos2iv_PACKED)); \
    packed_data->index = glWindowPos2iv_INDEX; \
    packed_data->args.a1 = (GLint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos2ivARB(v) ({ \
    glWindowPos2ivARB_PACKED *packed_data = malloc(sizeof(glWindowPos2ivARB_PACKED)); \
    packed_data->index = glWindowPos2ivARB_INDEX; \
    packed_data->args.a1 = (GLint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos2ivMESA(v) ({ \
    glWindowPos2ivMESA_PACKED *packed_data = malloc(sizeof(glWindowPos2ivMESA_PACKED)); \
    packed_data->index = glWindowPos2ivMESA_INDEX; \
    packed_data->args.a1 = (GLint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos2s(x, y) ({ \
    glWindowPos2s_PACKED *packed_data = malloc(sizeof(glWindowPos2s_PACKED)); \
    packed_data->index = glWindowPos2s_INDEX; \
    packed_data->args.a1 = (GLshort)x; \
    packed_data->args.a2 = (GLshort)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos2sARB(x, y) ({ \
    glWindowPos2sARB_PACKED *packed_data = malloc(sizeof(glWindowPos2sARB_PACKED)); \
    packed_data->index = glWindowPos2sARB_INDEX; \
    packed_data->args.a1 = (GLshort)x; \
    packed_data->args.a2 = (GLshort)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos2sMESA(x, y) ({ \
    glWindowPos2sMESA_PACKED *packed_data = malloc(sizeof(glWindowPos2sMESA_PACKED)); \
    packed_data->index = glWindowPos2sMESA_INDEX; \
    packed_data->args.a1 = (GLshort)x; \
    packed_data->args.a2 = (GLshort)y; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos2sv(v) ({ \
    glWindowPos2sv_PACKED *packed_data = malloc(sizeof(glWindowPos2sv_PACKED)); \
    packed_data->index = glWindowPos2sv_INDEX; \
    packed_data->args.a1 = (GLshort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos2svARB(v) ({ \
    glWindowPos2svARB_PACKED *packed_data = malloc(sizeof(glWindowPos2svARB_PACKED)); \
    packed_data->index = glWindowPos2svARB_INDEX; \
    packed_data->args.a1 = (GLshort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos2svMESA(v) ({ \
    glWindowPos2svMESA_PACKED *packed_data = malloc(sizeof(glWindowPos2svMESA_PACKED)); \
    packed_data->index = glWindowPos2svMESA_INDEX; \
    packed_data->args.a1 = (GLshort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos3d(x, y, z) ({ \
    glWindowPos3d_PACKED *packed_data = malloc(sizeof(glWindowPos3d_PACKED)); \
    packed_data->index = glWindowPos3d_INDEX; \
    packed_data->args.a1 = (GLdouble)x; \
    packed_data->args.a2 = (GLdouble)y; \
    packed_data->args.a3 = (GLdouble)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos3dARB(x, y, z) ({ \
    glWindowPos3dARB_PACKED *packed_data = malloc(sizeof(glWindowPos3dARB_PACKED)); \
    packed_data->index = glWindowPos3dARB_INDEX; \
    packed_data->args.a1 = (GLdouble)x; \
    packed_data->args.a2 = (GLdouble)y; \
    packed_data->args.a3 = (GLdouble)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos3dMESA(x, y, z) ({ \
    glWindowPos3dMESA_PACKED *packed_data = malloc(sizeof(glWindowPos3dMESA_PACKED)); \
    packed_data->index = glWindowPos3dMESA_INDEX; \
    packed_data->args.a1 = (GLdouble)x; \
    packed_data->args.a2 = (GLdouble)y; \
    packed_data->args.a3 = (GLdouble)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos3dv(v) ({ \
    glWindowPos3dv_PACKED *packed_data = malloc(sizeof(glWindowPos3dv_PACKED)); \
    packed_data->index = glWindowPos3dv_INDEX; \
    packed_data->args.a1 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos3dvARB(v) ({ \
    glWindowPos3dvARB_PACKED *packed_data = malloc(sizeof(glWindowPos3dvARB_PACKED)); \
    packed_data->index = glWindowPos3dvARB_INDEX; \
    packed_data->args.a1 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos3dvMESA(v) ({ \
    glWindowPos3dvMESA_PACKED *packed_data = malloc(sizeof(glWindowPos3dvMESA_PACKED)); \
    packed_data->index = glWindowPos3dvMESA_INDEX; \
    packed_data->args.a1 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos3f(x, y, z) ({ \
    glWindowPos3f_PACKED *packed_data = malloc(sizeof(glWindowPos3f_PACKED)); \
    packed_data->index = glWindowPos3f_INDEX; \
    packed_data->args.a1 = (GLfloat)x; \
    packed_data->args.a2 = (GLfloat)y; \
    packed_data->args.a3 = (GLfloat)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos3fARB(x, y, z) ({ \
    glWindowPos3fARB_PACKED *packed_data = malloc(sizeof(glWindowPos3fARB_PACKED)); \
    packed_data->index = glWindowPos3fARB_INDEX; \
    packed_data->args.a1 = (GLfloat)x; \
    packed_data->args.a2 = (GLfloat)y; \
    packed_data->args.a3 = (GLfloat)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos3fMESA(x, y, z) ({ \
    glWindowPos3fMESA_PACKED *packed_data = malloc(sizeof(glWindowPos3fMESA_PACKED)); \
    packed_data->index = glWindowPos3fMESA_INDEX; \
    packed_data->args.a1 = (GLfloat)x; \
    packed_data->args.a2 = (GLfloat)y; \
    packed_data->args.a3 = (GLfloat)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos3fv(v) ({ \
    glWindowPos3fv_PACKED *packed_data = malloc(sizeof(glWindowPos3fv_PACKED)); \
    packed_data->index = glWindowPos3fv_INDEX; \
    packed_data->args.a1 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos3fvARB(v) ({ \
    glWindowPos3fvARB_PACKED *packed_data = malloc(sizeof(glWindowPos3fvARB_PACKED)); \
    packed_data->index = glWindowPos3fvARB_INDEX; \
    packed_data->args.a1 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos3fvMESA(v) ({ \
    glWindowPos3fvMESA_PACKED *packed_data = malloc(sizeof(glWindowPos3fvMESA_PACKED)); \
    packed_data->index = glWindowPos3fvMESA_INDEX; \
    packed_data->args.a1 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos3i(x, y, z) ({ \
    glWindowPos3i_PACKED *packed_data = malloc(sizeof(glWindowPos3i_PACKED)); \
    packed_data->index = glWindowPos3i_INDEX; \
    packed_data->args.a1 = (GLint)x; \
    packed_data->args.a2 = (GLint)y; \
    packed_data->args.a3 = (GLint)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos3iARB(x, y, z) ({ \
    glWindowPos3iARB_PACKED *packed_data = malloc(sizeof(glWindowPos3iARB_PACKED)); \
    packed_data->index = glWindowPos3iARB_INDEX; \
    packed_data->args.a1 = (GLint)x; \
    packed_data->args.a2 = (GLint)y; \
    packed_data->args.a3 = (GLint)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos3iMESA(x, y, z) ({ \
    glWindowPos3iMESA_PACKED *packed_data = malloc(sizeof(glWindowPos3iMESA_PACKED)); \
    packed_data->index = glWindowPos3iMESA_INDEX; \
    packed_data->args.a1 = (GLint)x; \
    packed_data->args.a2 = (GLint)y; \
    packed_data->args.a3 = (GLint)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos3iv(v) ({ \
    glWindowPos3iv_PACKED *packed_data = malloc(sizeof(glWindowPos3iv_PACKED)); \
    packed_data->index = glWindowPos3iv_INDEX; \
    packed_data->args.a1 = (GLint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos3ivARB(v) ({ \
    glWindowPos3ivARB_PACKED *packed_data = malloc(sizeof(glWindowPos3ivARB_PACKED)); \
    packed_data->index = glWindowPos3ivARB_INDEX; \
    packed_data->args.a1 = (GLint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos3ivMESA(v) ({ \
    glWindowPos3ivMESA_PACKED *packed_data = malloc(sizeof(glWindowPos3ivMESA_PACKED)); \
    packed_data->index = glWindowPos3ivMESA_INDEX; \
    packed_data->args.a1 = (GLint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos3s(x, y, z) ({ \
    glWindowPos3s_PACKED *packed_data = malloc(sizeof(glWindowPos3s_PACKED)); \
    packed_data->index = glWindowPos3s_INDEX; \
    packed_data->args.a1 = (GLshort)x; \
    packed_data->args.a2 = (GLshort)y; \
    packed_data->args.a3 = (GLshort)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos3sARB(x, y, z) ({ \
    glWindowPos3sARB_PACKED *packed_data = malloc(sizeof(glWindowPos3sARB_PACKED)); \
    packed_data->index = glWindowPos3sARB_INDEX; \
    packed_data->args.a1 = (GLshort)x; \
    packed_data->args.a2 = (GLshort)y; \
    packed_data->args.a3 = (GLshort)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos3sMESA(x, y, z) ({ \
    glWindowPos3sMESA_PACKED *packed_data = malloc(sizeof(glWindowPos3sMESA_PACKED)); \
    packed_data->index = glWindowPos3sMESA_INDEX; \
    packed_data->args.a1 = (GLshort)x; \
    packed_data->args.a2 = (GLshort)y; \
    packed_data->args.a3 = (GLshort)z; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos3sv(v) ({ \
    glWindowPos3sv_PACKED *packed_data = malloc(sizeof(glWindowPos3sv_PACKED)); \
    packed_data->index = glWindowPos3sv_INDEX; \
    packed_data->args.a1 = (GLshort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos3svARB(v) ({ \
    glWindowPos3svARB_PACKED *packed_data = malloc(sizeof(glWindowPos3svARB_PACKED)); \
    packed_data->index = glWindowPos3svARB_INDEX; \
    packed_data->args.a1 = (GLshort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos3svMESA(v) ({ \
    glWindowPos3svMESA_PACKED *packed_data = malloc(sizeof(glWindowPos3svMESA_PACKED)); \
    packed_data->index = glWindowPos3svMESA_INDEX; \
    packed_data->args.a1 = (GLshort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos4dMESA(x, y, z, w) ({ \
    glWindowPos4dMESA_PACKED *packed_data = malloc(sizeof(glWindowPos4dMESA_PACKED)); \
    packed_data->index = glWindowPos4dMESA_INDEX; \
    packed_data->args.a1 = (GLdouble)x; \
    packed_data->args.a2 = (GLdouble)y; \
    packed_data->args.a3 = (GLdouble)z; \
    packed_data->args.a4 = (GLdouble)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos4dvMESA(v) ({ \
    glWindowPos4dvMESA_PACKED *packed_data = malloc(sizeof(glWindowPos4dvMESA_PACKED)); \
    packed_data->index = glWindowPos4dvMESA_INDEX; \
    packed_data->args.a1 = (GLdouble *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos4fMESA(x, y, z, w) ({ \
    glWindowPos4fMESA_PACKED *packed_data = malloc(sizeof(glWindowPos4fMESA_PACKED)); \
    packed_data->index = glWindowPos4fMESA_INDEX; \
    packed_data->args.a1 = (GLfloat)x; \
    packed_data->args.a2 = (GLfloat)y; \
    packed_data->args.a3 = (GLfloat)z; \
    packed_data->args.a4 = (GLfloat)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos4fvMESA(v) ({ \
    glWindowPos4fvMESA_PACKED *packed_data = malloc(sizeof(glWindowPos4fvMESA_PACKED)); \
    packed_data->index = glWindowPos4fvMESA_INDEX; \
    packed_data->args.a1 = (GLfloat *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos4iMESA(x, y, z, w) ({ \
    glWindowPos4iMESA_PACKED *packed_data = malloc(sizeof(glWindowPos4iMESA_PACKED)); \
    packed_data->index = glWindowPos4iMESA_INDEX; \
    packed_data->args.a1 = (GLint)x; \
    packed_data->args.a2 = (GLint)y; \
    packed_data->args.a3 = (GLint)z; \
    packed_data->args.a4 = (GLint)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos4ivMESA(v) ({ \
    glWindowPos4ivMESA_PACKED *packed_data = malloc(sizeof(glWindowPos4ivMESA_PACKED)); \
    packed_data->index = glWindowPos4ivMESA_INDEX; \
    packed_data->args.a1 = (GLint *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos4sMESA(x, y, z, w) ({ \
    glWindowPos4sMESA_PACKED *packed_data = malloc(sizeof(glWindowPos4sMESA_PACKED)); \
    packed_data->index = glWindowPos4sMESA_INDEX; \
    packed_data->args.a1 = (GLshort)x; \
    packed_data->args.a2 = (GLshort)y; \
    packed_data->args.a3 = (GLshort)z; \
    packed_data->args.a4 = (GLshort)w; \
    (packed_call_t *)packed_data; \
})
#define pack_glWindowPos4svMESA(v) ({ \
    glWindowPos4svMESA_PACKED *packed_data = malloc(sizeof(glWindowPos4svMESA_PACKED)); \
    packed_data->index = glWindowPos4svMESA_INDEX; \
    packed_data->args.a1 = (GLshort *)v; \
    (packed_call_t *)packed_data; \
})
#define pack_glWriteMaskEXT(res, in, outX, outY, outZ, outW) ({ \
    glWriteMaskEXT_PACKED *packed_data = malloc(sizeof(glWriteMaskEXT_PACKED)); \
    packed_data->index = glWriteMaskEXT_INDEX; \
    packed_data->args.a1 = (GLuint)res; \
    packed_data->args.a2 = (GLuint)in; \
    packed_data->args.a3 = (GLenum)outX; \
    packed_data->args.a4 = (GLenum)outY; \
    packed_data->args.a5 = (GLenum)outZ; \
    packed_data->args.a6 = (GLenum)outW; \
    (packed_call_t *)packed_data; \
})
#define pack_glXAssociateDMPbufferSGIX(dpy, pbuffer, params, dmbuffer) ({ \
    glXAssociateDMPbufferSGIX_PACKED *packed_data = malloc(sizeof(glXAssociateDMPbufferSGIX_PACKED)); \
    packed_data->index = glXAssociateDMPbufferSGIX_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXPbufferSGIX)pbuffer; \
    packed_data->args.a3 = (DMparams *)params; \
    packed_data->args.a4 = (DMbuffer)dmbuffer; \
    (packed_call_t *)packed_data; \
})
#define pack_glXBindChannelToWindowSGIX(display, screen, channel, window) ({ \
    glXBindChannelToWindowSGIX_PACKED *packed_data = malloc(sizeof(glXBindChannelToWindowSGIX_PACKED)); \
    packed_data->index = glXBindChannelToWindowSGIX_INDEX; \
    packed_data->args.a1 = (Display *)display; \
    packed_data->args.a2 = (int)screen; \
    packed_data->args.a3 = (int)channel; \
    packed_data->args.a4 = (Window)window; \
    (packed_call_t *)packed_data; \
})
#define pack_glXBindHyperpipeSGIX(dpy, hpId) ({ \
    glXBindHyperpipeSGIX_PACKED *packed_data = malloc(sizeof(glXBindHyperpipeSGIX_PACKED)); \
    packed_data->index = glXBindHyperpipeSGIX_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (int)hpId; \
    (packed_call_t *)packed_data; \
})
#define pack_glXBindSwapBarrierNV(dpy, group, barrier) ({ \
    glXBindSwapBarrierNV_PACKED *packed_data = malloc(sizeof(glXBindSwapBarrierNV_PACKED)); \
    packed_data->index = glXBindSwapBarrierNV_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLuint)group; \
    packed_data->args.a3 = (GLuint)barrier; \
    (packed_call_t *)packed_data; \
})
#define pack_glXBindSwapBarrierSGIX(dpy, drawable, barrier) ({ \
    glXBindSwapBarrierSGIX_PACKED *packed_data = malloc(sizeof(glXBindSwapBarrierSGIX_PACKED)); \
    packed_data->index = glXBindSwapBarrierSGIX_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXDrawable)drawable; \
    packed_data->args.a3 = (int)barrier; \
    (packed_call_t *)packed_data; \
})
#define pack_glXBindTexImageEXT(dpy, drawable, buffer, attrib_list) ({ \
    glXBindTexImageEXT_PACKED *packed_data = malloc(sizeof(glXBindTexImageEXT_PACKED)); \
    packed_data->index = glXBindTexImageEXT_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXDrawable)drawable; \
    packed_data->args.a3 = (int)buffer; \
    packed_data->args.a4 = (int *)attrib_list; \
    (packed_call_t *)packed_data; \
})
#define pack_glXBindVideoCaptureDeviceNV(dpy, video_capture_slot, device) ({ \
    glXBindVideoCaptureDeviceNV_PACKED *packed_data = malloc(sizeof(glXBindVideoCaptureDeviceNV_PACKED)); \
    packed_data->index = glXBindVideoCaptureDeviceNV_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (unsigned int)video_capture_slot; \
    packed_data->args.a3 = (GLXVideoCaptureDeviceNV)device; \
    (packed_call_t *)packed_data; \
})
#define pack_glXBindVideoDeviceNV(dpy, video_slot, video_device, attrib_list) ({ \
    glXBindVideoDeviceNV_PACKED *packed_data = malloc(sizeof(glXBindVideoDeviceNV_PACKED)); \
    packed_data->index = glXBindVideoDeviceNV_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (unsigned int)video_slot; \
    packed_data->args.a3 = (unsigned int)video_device; \
    packed_data->args.a4 = (int *)attrib_list; \
    (packed_call_t *)packed_data; \
})
#define pack_glXBindVideoImageNV(dpy, VideoDevice, pbuf, iVideoBuffer) ({ \
    glXBindVideoImageNV_PACKED *packed_data = malloc(sizeof(glXBindVideoImageNV_PACKED)); \
    packed_data->index = glXBindVideoImageNV_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXVideoDeviceNV)VideoDevice; \
    packed_data->args.a3 = (GLXPbuffer)pbuf; \
    packed_data->args.a4 = (int)iVideoBuffer; \
    (packed_call_t *)packed_data; \
})
#define pack_glXChangeDrawableAttributes(drawable) ({ \
    glXChangeDrawableAttributes_PACKED *packed_data = malloc(sizeof(glXChangeDrawableAttributes_PACKED)); \
    packed_data->index = glXChangeDrawableAttributes_INDEX; \
    packed_data->args.a1 = (uint32_t)drawable; \
    (packed_call_t *)packed_data; \
})
#define pack_glXChangeDrawableAttributesSGIX(drawable) ({ \
    glXChangeDrawableAttributesSGIX_PACKED *packed_data = malloc(sizeof(glXChangeDrawableAttributesSGIX_PACKED)); \
    packed_data->index = glXChangeDrawableAttributesSGIX_INDEX; \
    packed_data->args.a1 = (uint32_t)drawable; \
    (packed_call_t *)packed_data; \
})
#define pack_glXChannelRectSGIX(display, screen, channel, x, y, w, h) ({ \
    glXChannelRectSGIX_PACKED *packed_data = malloc(sizeof(glXChannelRectSGIX_PACKED)); \
    packed_data->index = glXChannelRectSGIX_INDEX; \
    packed_data->args.a1 = (Display *)display; \
    packed_data->args.a2 = (int)screen; \
    packed_data->args.a3 = (int)channel; \
    packed_data->args.a4 = (int)x; \
    packed_data->args.a5 = (int)y; \
    packed_data->args.a6 = (int)w; \
    packed_data->args.a7 = (int)h; \
    (packed_call_t *)packed_data; \
})
#define pack_glXChannelRectSyncSGIX(display, screen, channel, synctype) ({ \
    glXChannelRectSyncSGIX_PACKED *packed_data = malloc(sizeof(glXChannelRectSyncSGIX_PACKED)); \
    packed_data->index = glXChannelRectSyncSGIX_INDEX; \
    packed_data->args.a1 = (Display *)display; \
    packed_data->args.a2 = (int)screen; \
    packed_data->args.a3 = (int)channel; \
    packed_data->args.a4 = (GLenum)synctype; \
    (packed_call_t *)packed_data; \
})
#define pack_glXChooseFBConfig(dpy, screen, attrib_list, nelements) ({ \
    glXChooseFBConfig_PACKED *packed_data = malloc(sizeof(glXChooseFBConfig_PACKED)); \
    packed_data->index = glXChooseFBConfig_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (int)screen; \
    packed_data->args.a3 = (int *)attrib_list; \
    packed_data->args.a4 = (int *)nelements; \
    (packed_call_t *)packed_data; \
})
#define pack_glXChooseFBConfigSGIX(dpy, screen, attrib_list, nelements) ({ \
    glXChooseFBConfigSGIX_PACKED *packed_data = malloc(sizeof(glXChooseFBConfigSGIX_PACKED)); \
    packed_data->index = glXChooseFBConfigSGIX_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (int)screen; \
    packed_data->args.a3 = (int *)attrib_list; \
    packed_data->args.a4 = (int *)nelements; \
    (packed_call_t *)packed_data; \
})
#define pack_glXChooseVisual(dpy, screen, attribList) ({ \
    glXChooseVisual_PACKED *packed_data = malloc(sizeof(glXChooseVisual_PACKED)); \
    packed_data->index = glXChooseVisual_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (int)screen; \
    packed_data->args.a3 = (int *)attribList; \
    (packed_call_t *)packed_data; \
})
#define pack_glXClientInfo() ({ \
    glXClientInfo_PACKED *packed_data = malloc(sizeof(glXClientInfo_PACKED)); \
    packed_data->index = glXClientInfo_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glXCopyContext(dpy, src, dst, mask) ({ \
    glXCopyContext_PACKED *packed_data = malloc(sizeof(glXCopyContext_PACKED)); \
    packed_data->index = glXCopyContext_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXContext)src; \
    packed_data->args.a3 = (GLXContext)dst; \
    packed_data->args.a4 = (unsigned long)mask; \
    (packed_call_t *)packed_data; \
})
#define pack_glXCopyImageSubDataNV(dpy, srcCtx, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstCtx, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth) ({ \
    glXCopyImageSubDataNV_PACKED *packed_data = malloc(sizeof(glXCopyImageSubDataNV_PACKED)); \
    packed_data->index = glXCopyImageSubDataNV_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXContext)srcCtx; \
    packed_data->args.a3 = (GLuint)srcName; \
    packed_data->args.a4 = (GLenum)srcTarget; \
    packed_data->args.a5 = (GLint)srcLevel; \
    packed_data->args.a6 = (GLint)srcX; \
    packed_data->args.a7 = (GLint)srcY; \
    packed_data->args.a8 = (GLint)srcZ; \
    packed_data->args.a9 = (GLXContext)dstCtx; \
    packed_data->args.a10 = (GLuint)dstName; \
    packed_data->args.a11 = (GLenum)dstTarget; \
    packed_data->args.a12 = (GLint)dstLevel; \
    packed_data->args.a13 = (GLint)dstX; \
    packed_data->args.a14 = (GLint)dstY; \
    packed_data->args.a15 = (GLint)dstZ; \
    packed_data->args.a16 = (GLsizei)width; \
    packed_data->args.a17 = (GLsizei)height; \
    packed_data->args.a18 = (GLsizei)depth; \
    (packed_call_t *)packed_data; \
})
#define pack_glXCopySubBufferMESA(dpy, drawable, x, y, width, height) ({ \
    glXCopySubBufferMESA_PACKED *packed_data = malloc(sizeof(glXCopySubBufferMESA_PACKED)); \
    packed_data->index = glXCopySubBufferMESA_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXDrawable)drawable; \
    packed_data->args.a3 = (int)x; \
    packed_data->args.a4 = (int)y; \
    packed_data->args.a5 = (int)width; \
    packed_data->args.a6 = (int)height; \
    (packed_call_t *)packed_data; \
})
#define pack_glXCreateContext(dpy, vis, shareList, direct) ({ \
    glXCreateContext_PACKED *packed_data = malloc(sizeof(glXCreateContext_PACKED)); \
    packed_data->index = glXCreateContext_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (XVisualInfo *)vis; \
    packed_data->args.a3 = (GLXContext)shareList; \
    packed_data->args.a4 = (Bool)direct; \
    (packed_call_t *)packed_data; \
})
#define pack_glXCreateContextAttribsARB(dpy, config, share_context, direct, attrib_list) ({ \
    glXCreateContextAttribsARB_PACKED *packed_data = malloc(sizeof(glXCreateContextAttribsARB_PACKED)); \
    packed_data->index = glXCreateContextAttribsARB_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXFBConfig)config; \
    packed_data->args.a3 = (GLXContext)share_context; \
    packed_data->args.a4 = (Bool)direct; \
    packed_data->args.a5 = (int *)attrib_list; \
    (packed_call_t *)packed_data; \
})
#define pack_glXCreateContextWithConfigSGIX(dpy, config, render_type, share_list, direct) ({ \
    glXCreateContextWithConfigSGIX_PACKED *packed_data = malloc(sizeof(glXCreateContextWithConfigSGIX_PACKED)); \
    packed_data->index = glXCreateContextWithConfigSGIX_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXFBConfigSGIX)config; \
    packed_data->args.a3 = (int)render_type; \
    packed_data->args.a4 = (GLXContext)share_list; \
    packed_data->args.a5 = (Bool)direct; \
    (packed_call_t *)packed_data; \
})
#define pack_glXCreateGLXPbufferSGIX(dpy, config, width, height, attrib_list) ({ \
    glXCreateGLXPbufferSGIX_PACKED *packed_data = malloc(sizeof(glXCreateGLXPbufferSGIX_PACKED)); \
    packed_data->index = glXCreateGLXPbufferSGIX_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXFBConfigSGIX)config; \
    packed_data->args.a3 = (unsigned int)width; \
    packed_data->args.a4 = (unsigned int)height; \
    packed_data->args.a5 = (int *)attrib_list; \
    (packed_call_t *)packed_data; \
})
#define pack_glXCreateGLXPixmap(dpy, visual, pixmap) ({ \
    glXCreateGLXPixmap_PACKED *packed_data = malloc(sizeof(glXCreateGLXPixmap_PACKED)); \
    packed_data->index = glXCreateGLXPixmap_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (XVisualInfo *)visual; \
    packed_data->args.a3 = (Pixmap)pixmap; \
    (packed_call_t *)packed_data; \
})
#define pack_glXCreateGLXPixmapMESA(dpy, visual, pixmap, cmap) ({ \
    glXCreateGLXPixmapMESA_PACKED *packed_data = malloc(sizeof(glXCreateGLXPixmapMESA_PACKED)); \
    packed_data->index = glXCreateGLXPixmapMESA_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (XVisualInfo *)visual; \
    packed_data->args.a3 = (Pixmap)pixmap; \
    packed_data->args.a4 = (Colormap)cmap; \
    (packed_call_t *)packed_data; \
})
#define pack_glXCreateGLXPixmapWithConfigSGIX(dpy, config, pixmap) ({ \
    glXCreateGLXPixmapWithConfigSGIX_PACKED *packed_data = malloc(sizeof(glXCreateGLXPixmapWithConfigSGIX_PACKED)); \
    packed_data->index = glXCreateGLXPixmapWithConfigSGIX_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXFBConfigSGIX)config; \
    packed_data->args.a3 = (Pixmap)pixmap; \
    (packed_call_t *)packed_data; \
})
#define pack_glXCreateGLXVideoSourceSGIX(display, screen, server, path, nodeClass, drainNode) ({ \
    glXCreateGLXVideoSourceSGIX_PACKED *packed_data = malloc(sizeof(glXCreateGLXVideoSourceSGIX_PACKED)); \
    packed_data->index = glXCreateGLXVideoSourceSGIX_INDEX; \
    packed_data->args.a1 = (Display *)display; \
    packed_data->args.a2 = (int)screen; \
    packed_data->args.a3 = (VLServer)server; \
    packed_data->args.a4 = (VLPath)path; \
    packed_data->args.a5 = (int)nodeClass; \
    packed_data->args.a6 = (VLNode)drainNode; \
    (packed_call_t *)packed_data; \
})
#define pack_glXCreateNewContext(dpy, config, render_type, share_list, direct) ({ \
    glXCreateNewContext_PACKED *packed_data = malloc(sizeof(glXCreateNewContext_PACKED)); \
    packed_data->index = glXCreateNewContext_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXFBConfig)config; \
    packed_data->args.a3 = (int)render_type; \
    packed_data->args.a4 = (GLXContext)share_list; \
    packed_data->args.a5 = (Bool)direct; \
    (packed_call_t *)packed_data; \
})
#define pack_glXCreatePbuffer(dpy, config, attrib_list) ({ \
    glXCreatePbuffer_PACKED *packed_data = malloc(sizeof(glXCreatePbuffer_PACKED)); \
    packed_data->index = glXCreatePbuffer_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXFBConfig)config; \
    packed_data->args.a3 = (int *)attrib_list; \
    (packed_call_t *)packed_data; \
})
#define pack_glXCreatePixmap(dpy, config, pixmap, attrib_list) ({ \
    glXCreatePixmap_PACKED *packed_data = malloc(sizeof(glXCreatePixmap_PACKED)); \
    packed_data->index = glXCreatePixmap_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXFBConfig)config; \
    packed_data->args.a3 = (Pixmap)pixmap; \
    packed_data->args.a4 = (int *)attrib_list; \
    (packed_call_t *)packed_data; \
})
#define pack_glXCreateWindow(dpy, config, win, attrib_list) ({ \
    glXCreateWindow_PACKED *packed_data = malloc(sizeof(glXCreateWindow_PACKED)); \
    packed_data->index = glXCreateWindow_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXFBConfig)config; \
    packed_data->args.a3 = (Window)win; \
    packed_data->args.a4 = (int *)attrib_list; \
    (packed_call_t *)packed_data; \
})
#define pack_glXCushionSGI(dpy, window, cushion) ({ \
    glXCushionSGI_PACKED *packed_data = malloc(sizeof(glXCushionSGI_PACKED)); \
    packed_data->index = glXCushionSGI_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (Window)window; \
    packed_data->args.a3 = (float)cushion; \
    (packed_call_t *)packed_data; \
})
#define pack_glXDestroyContext(dpy, ctx) ({ \
    glXDestroyContext_PACKED *packed_data = malloc(sizeof(glXDestroyContext_PACKED)); \
    packed_data->index = glXDestroyContext_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXContext)ctx; \
    (packed_call_t *)packed_data; \
})
#define pack_glXDestroyGLXPbufferSGIX(dpy, pbuf) ({ \
    glXDestroyGLXPbufferSGIX_PACKED *packed_data = malloc(sizeof(glXDestroyGLXPbufferSGIX_PACKED)); \
    packed_data->index = glXDestroyGLXPbufferSGIX_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXPbufferSGIX)pbuf; \
    (packed_call_t *)packed_data; \
})
#define pack_glXDestroyGLXPixmap(dpy, pixmap) ({ \
    glXDestroyGLXPixmap_PACKED *packed_data = malloc(sizeof(glXDestroyGLXPixmap_PACKED)); \
    packed_data->index = glXDestroyGLXPixmap_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXPixmap)pixmap; \
    (packed_call_t *)packed_data; \
})
#define pack_glXDestroyGLXVideoSourceSGIX(dpy, glxvideosource) ({ \
    glXDestroyGLXVideoSourceSGIX_PACKED *packed_data = malloc(sizeof(glXDestroyGLXVideoSourceSGIX_PACKED)); \
    packed_data->index = glXDestroyGLXVideoSourceSGIX_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXVideoSourceSGIX)glxvideosource; \
    (packed_call_t *)packed_data; \
})
#define pack_glXDestroyHyperpipeConfigSGIX(dpy, hpId) ({ \
    glXDestroyHyperpipeConfigSGIX_PACKED *packed_data = malloc(sizeof(glXDestroyHyperpipeConfigSGIX_PACKED)); \
    packed_data->index = glXDestroyHyperpipeConfigSGIX_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (int)hpId; \
    (packed_call_t *)packed_data; \
})
#define pack_glXDestroyPbuffer(dpy, pbuf) ({ \
    glXDestroyPbuffer_PACKED *packed_data = malloc(sizeof(glXDestroyPbuffer_PACKED)); \
    packed_data->index = glXDestroyPbuffer_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXPbuffer)pbuf; \
    (packed_call_t *)packed_data; \
})
#define pack_glXDestroyPixmap(dpy, pixmap) ({ \
    glXDestroyPixmap_PACKED *packed_data = malloc(sizeof(glXDestroyPixmap_PACKED)); \
    packed_data->index = glXDestroyPixmap_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXPixmap)pixmap; \
    (packed_call_t *)packed_data; \
})
#define pack_glXDestroyWindow(dpy, win) ({ \
    glXDestroyWindow_PACKED *packed_data = malloc(sizeof(glXDestroyWindow_PACKED)); \
    packed_data->index = glXDestroyWindow_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXWindow)win; \
    (packed_call_t *)packed_data; \
})
#define pack_glXEnumerateVideoCaptureDevicesNV(dpy, screen, nelements) ({ \
    glXEnumerateVideoCaptureDevicesNV_PACKED *packed_data = malloc(sizeof(glXEnumerateVideoCaptureDevicesNV_PACKED)); \
    packed_data->index = glXEnumerateVideoCaptureDevicesNV_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (int)screen; \
    packed_data->args.a3 = (int *)nelements; \
    (packed_call_t *)packed_data; \
})
#define pack_glXEnumerateVideoDevicesNV(dpy, screen, nelements) ({ \
    glXEnumerateVideoDevicesNV_PACKED *packed_data = malloc(sizeof(glXEnumerateVideoDevicesNV_PACKED)); \
    packed_data->index = glXEnumerateVideoDevicesNV_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (int)screen; \
    packed_data->args.a3 = (int *)nelements; \
    (packed_call_t *)packed_data; \
})
#define pack_glXFreeContextEXT(dpy, context) ({ \
    glXFreeContextEXT_PACKED *packed_data = malloc(sizeof(glXFreeContextEXT_PACKED)); \
    packed_data->index = glXFreeContextEXT_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXContext)context; \
    (packed_call_t *)packed_data; \
})
#define pack_glXGetAGPOffsetMESA(pointer) ({ \
    glXGetAGPOffsetMESA_PACKED *packed_data = malloc(sizeof(glXGetAGPOffsetMESA_PACKED)); \
    packed_data->index = glXGetAGPOffsetMESA_INDEX; \
    packed_data->args.a1 = (void *)pointer; \
    (packed_call_t *)packed_data; \
})
#define pack_glXGetClientString(display, name) ({ \
    glXGetClientString_PACKED *packed_data = malloc(sizeof(glXGetClientString_PACKED)); \
    packed_data->index = glXGetClientString_INDEX; \
    packed_data->args.a1 = (Display *)display; \
    packed_data->args.a2 = (int)name; \
    (packed_call_t *)packed_data; \
})
#define pack_glXGetConfig(display, visual, attribute, value) ({ \
    glXGetConfig_PACKED *packed_data = malloc(sizeof(glXGetConfig_PACKED)); \
    packed_data->index = glXGetConfig_INDEX; \
    packed_data->args.a1 = (Display *)display; \
    packed_data->args.a2 = (XVisualInfo *)visual; \
    packed_data->args.a3 = (int)attribute; \
    packed_data->args.a4 = (int *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glXGetContextIDEXT(context) ({ \
    glXGetContextIDEXT_PACKED *packed_data = malloc(sizeof(glXGetContextIDEXT_PACKED)); \
    packed_data->index = glXGetContextIDEXT_INDEX; \
    packed_data->args.a1 = (GLXContext)context; \
    (packed_call_t *)packed_data; \
})
#define pack_glXGetCurrentContext() ({ \
    glXGetCurrentContext_PACKED *packed_data = malloc(sizeof(glXGetCurrentContext_PACKED)); \
    packed_data->index = glXGetCurrentContext_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glXGetCurrentDisplay() ({ \
    glXGetCurrentDisplay_PACKED *packed_data = malloc(sizeof(glXGetCurrentDisplay_PACKED)); \
    packed_data->index = glXGetCurrentDisplay_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glXGetCurrentDisplayEXT() ({ \
    glXGetCurrentDisplayEXT_PACKED *packed_data = malloc(sizeof(glXGetCurrentDisplayEXT_PACKED)); \
    packed_data->index = glXGetCurrentDisplayEXT_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glXGetCurrentDrawable() ({ \
    glXGetCurrentDrawable_PACKED *packed_data = malloc(sizeof(glXGetCurrentDrawable_PACKED)); \
    packed_data->index = glXGetCurrentDrawable_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glXGetCurrentReadDrawable() ({ \
    glXGetCurrentReadDrawable_PACKED *packed_data = malloc(sizeof(glXGetCurrentReadDrawable_PACKED)); \
    packed_data->index = glXGetCurrentReadDrawable_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glXGetCurrentReadDrawableSGI() ({ \
    glXGetCurrentReadDrawableSGI_PACKED *packed_data = malloc(sizeof(glXGetCurrentReadDrawableSGI_PACKED)); \
    packed_data->index = glXGetCurrentReadDrawableSGI_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glXGetDrawableAttributes(drawable) ({ \
    glXGetDrawableAttributes_PACKED *packed_data = malloc(sizeof(glXGetDrawableAttributes_PACKED)); \
    packed_data->index = glXGetDrawableAttributes_INDEX; \
    packed_data->args.a1 = (uint32_t)drawable; \
    (packed_call_t *)packed_data; \
})
#define pack_glXGetDrawableAttributesSGIX(drawable) ({ \
    glXGetDrawableAttributesSGIX_PACKED *packed_data = malloc(sizeof(glXGetDrawableAttributesSGIX_PACKED)); \
    packed_data->index = glXGetDrawableAttributesSGIX_INDEX; \
    packed_data->args.a1 = (uint32_t)drawable; \
    (packed_call_t *)packed_data; \
})
#define pack_glXGetFBConfigAttrib(dpy, config, attribute, value) ({ \
    glXGetFBConfigAttrib_PACKED *packed_data = malloc(sizeof(glXGetFBConfigAttrib_PACKED)); \
    packed_data->index = glXGetFBConfigAttrib_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXFBConfig)config; \
    packed_data->args.a3 = (int)attribute; \
    packed_data->args.a4 = (int *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glXGetFBConfigAttribSGIX(dpy, config, attribute, value) ({ \
    glXGetFBConfigAttribSGIX_PACKED *packed_data = malloc(sizeof(glXGetFBConfigAttribSGIX_PACKED)); \
    packed_data->index = glXGetFBConfigAttribSGIX_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXFBConfigSGIX)config; \
    packed_data->args.a3 = (int)attribute; \
    packed_data->args.a4 = (int *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glXGetFBConfigFromVisualSGIX(dpy, vis) ({ \
    glXGetFBConfigFromVisualSGIX_PACKED *packed_data = malloc(sizeof(glXGetFBConfigFromVisualSGIX_PACKED)); \
    packed_data->index = glXGetFBConfigFromVisualSGIX_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (XVisualInfo *)vis; \
    (packed_call_t *)packed_data; \
})
#define pack_glXGetFBConfigs(dpy, screen, nelements) ({ \
    glXGetFBConfigs_PACKED *packed_data = malloc(sizeof(glXGetFBConfigs_PACKED)); \
    packed_data->index = glXGetFBConfigs_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (int)screen; \
    packed_data->args.a3 = (int *)nelements; \
    (packed_call_t *)packed_data; \
})
#define pack_glXGetFBConfigsSGIX() ({ \
    glXGetFBConfigsSGIX_PACKED *packed_data = malloc(sizeof(glXGetFBConfigsSGIX_PACKED)); \
    packed_data->index = glXGetFBConfigsSGIX_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glXGetMscRateOML(dpy, drawable, numerator, denominator) ({ \
    glXGetMscRateOML_PACKED *packed_data = malloc(sizeof(glXGetMscRateOML_PACKED)); \
    packed_data->index = glXGetMscRateOML_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXDrawable)drawable; \
    packed_data->args.a3 = (int32_t *)numerator; \
    packed_data->args.a4 = (int32_t *)denominator; \
    (packed_call_t *)packed_data; \
})
#define pack_glXGetProcAddress(procName) ({ \
    glXGetProcAddress_PACKED *packed_data = malloc(sizeof(glXGetProcAddress_PACKED)); \
    packed_data->index = glXGetProcAddress_INDEX; \
    packed_data->args.a1 = (GLubyte *)procName; \
    (packed_call_t *)packed_data; \
})
#define pack_glXGetProcAddressARB(procName) ({ \
    glXGetProcAddressARB_PACKED *packed_data = malloc(sizeof(glXGetProcAddressARB_PACKED)); \
    packed_data->index = glXGetProcAddressARB_INDEX; \
    packed_data->args.a1 = (GLubyte *)procName; \
    (packed_call_t *)packed_data; \
})
#define pack_glXGetSelectedEvent(dpy, draw, event_mask) ({ \
    glXGetSelectedEvent_PACKED *packed_data = malloc(sizeof(glXGetSelectedEvent_PACKED)); \
    packed_data->index = glXGetSelectedEvent_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXDrawable)draw; \
    packed_data->args.a3 = (unsigned long *)event_mask; \
    (packed_call_t *)packed_data; \
})
#define pack_glXGetSelectedEventSGIX(dpy, drawable, mask) ({ \
    glXGetSelectedEventSGIX_PACKED *packed_data = malloc(sizeof(glXGetSelectedEventSGIX_PACKED)); \
    packed_data->index = glXGetSelectedEventSGIX_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXDrawable)drawable; \
    packed_data->args.a3 = (unsigned long *)mask; \
    (packed_call_t *)packed_data; \
})
#define pack_glXGetSyncValuesOML(dpy, drawable, ust, msc, sbc) ({ \
    glXGetSyncValuesOML_PACKED *packed_data = malloc(sizeof(glXGetSyncValuesOML_PACKED)); \
    packed_data->index = glXGetSyncValuesOML_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXDrawable)drawable; \
    packed_data->args.a3 = (int64_t *)ust; \
    packed_data->args.a4 = (int64_t *)msc; \
    packed_data->args.a5 = (int64_t *)sbc; \
    (packed_call_t *)packed_data; \
})
#define pack_glXGetTransparentIndexSUN(dpy, overlay, underlay, pTransparentIndex) ({ \
    glXGetTransparentIndexSUN_PACKED *packed_data = malloc(sizeof(glXGetTransparentIndexSUN_PACKED)); \
    packed_data->index = glXGetTransparentIndexSUN_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (Window)overlay; \
    packed_data->args.a3 = (Window)underlay; \
    packed_data->args.a4 = (long *)pTransparentIndex; \
    (packed_call_t *)packed_data; \
})
#define pack_glXGetVideoDeviceNV(dpy, screen, numVideoDevices, pVideoDevice) ({ \
    glXGetVideoDeviceNV_PACKED *packed_data = malloc(sizeof(glXGetVideoDeviceNV_PACKED)); \
    packed_data->index = glXGetVideoDeviceNV_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (int)screen; \
    packed_data->args.a3 = (int)numVideoDevices; \
    packed_data->args.a4 = (GLXVideoDeviceNV *)pVideoDevice; \
    (packed_call_t *)packed_data; \
})
#define pack_glXGetVideoInfoNV(dpy, screen, VideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo) ({ \
    glXGetVideoInfoNV_PACKED *packed_data = malloc(sizeof(glXGetVideoInfoNV_PACKED)); \
    packed_data->index = glXGetVideoInfoNV_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (int)screen; \
    packed_data->args.a3 = (GLXVideoDeviceNV)VideoDevice; \
    packed_data->args.a4 = (unsigned long *)pulCounterOutputPbuffer; \
    packed_data->args.a5 = (unsigned long *)pulCounterOutputVideo; \
    (packed_call_t *)packed_data; \
})
#define pack_glXGetVideoSyncSGI(count) ({ \
    glXGetVideoSyncSGI_PACKED *packed_data = malloc(sizeof(glXGetVideoSyncSGI_PACKED)); \
    packed_data->index = glXGetVideoSyncSGI_INDEX; \
    packed_data->args.a1 = (unsigned int *)count; \
    (packed_call_t *)packed_data; \
})
#define pack_glXGetVisualConfigs() ({ \
    glXGetVisualConfigs_PACKED *packed_data = malloc(sizeof(glXGetVisualConfigs_PACKED)); \
    packed_data->index = glXGetVisualConfigs_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glXGetVisualFromFBConfig(dpy, config) ({ \
    glXGetVisualFromFBConfig_PACKED *packed_data = malloc(sizeof(glXGetVisualFromFBConfig_PACKED)); \
    packed_data->index = glXGetVisualFromFBConfig_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXFBConfig)config; \
    (packed_call_t *)packed_data; \
})
#define pack_glXGetVisualFromFBConfigSGIX(dpy, config) ({ \
    glXGetVisualFromFBConfigSGIX_PACKED *packed_data = malloc(sizeof(glXGetVisualFromFBConfigSGIX_PACKED)); \
    packed_data->index = glXGetVisualFromFBConfigSGIX_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXFBConfigSGIX)config; \
    (packed_call_t *)packed_data; \
})
#define pack_glXHyperpipeAttribSGIX(dpy, timeSlice, attrib, size, attribList) ({ \
    glXHyperpipeAttribSGIX_PACKED *packed_data = malloc(sizeof(glXHyperpipeAttribSGIX_PACKED)); \
    packed_data->index = glXHyperpipeAttribSGIX_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (int)timeSlice; \
    packed_data->args.a3 = (int)attrib; \
    packed_data->args.a4 = (int)size; \
    packed_data->args.a5 = (void *)attribList; \
    (packed_call_t *)packed_data; \
})
#define pack_glXHyperpipeConfigSGIX(dpy, networkId, npipes, cfg, hpId) ({ \
    glXHyperpipeConfigSGIX_PACKED *packed_data = malloc(sizeof(glXHyperpipeConfigSGIX_PACKED)); \
    packed_data->index = glXHyperpipeConfigSGIX_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (int)networkId; \
    packed_data->args.a3 = (int)npipes; \
    packed_data->args.a4 = (GLXHyperpipeConfigSGIX *)cfg; \
    packed_data->args.a5 = (int *)hpId; \
    (packed_call_t *)packed_data; \
})
#define pack_glXImportContextEXT(dpy, contextID) ({ \
    glXImportContextEXT_PACKED *packed_data = malloc(sizeof(glXImportContextEXT_PACKED)); \
    packed_data->index = glXImportContextEXT_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXContextID)contextID; \
    (packed_call_t *)packed_data; \
})
#define pack_glXIsDirect(dpy, ctx) ({ \
    glXIsDirect_PACKED *packed_data = malloc(sizeof(glXIsDirect_PACKED)); \
    packed_data->index = glXIsDirect_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXContext)ctx; \
    (packed_call_t *)packed_data; \
})
#define pack_glXJoinSwapGroupNV(dpy, drawable, group) ({ \
    glXJoinSwapGroupNV_PACKED *packed_data = malloc(sizeof(glXJoinSwapGroupNV_PACKED)); \
    packed_data->index = glXJoinSwapGroupNV_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXDrawable)drawable; \
    packed_data->args.a3 = (GLuint)group; \
    (packed_call_t *)packed_data; \
})
#define pack_glXJoinSwapGroupSGIX(dpy, drawable, member) ({ \
    glXJoinSwapGroupSGIX_PACKED *packed_data = malloc(sizeof(glXJoinSwapGroupSGIX_PACKED)); \
    packed_data->index = glXJoinSwapGroupSGIX_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXDrawable)drawable; \
    packed_data->args.a3 = (GLXDrawable)member; \
    (packed_call_t *)packed_data; \
})
#define pack_glXLockVideoCaptureDeviceNV(dpy, device) ({ \
    glXLockVideoCaptureDeviceNV_PACKED *packed_data = malloc(sizeof(glXLockVideoCaptureDeviceNV_PACKED)); \
    packed_data->index = glXLockVideoCaptureDeviceNV_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXVideoCaptureDeviceNV)device; \
    (packed_call_t *)packed_data; \
})
#define pack_glXMakeContextCurrent(dpy, draw, read, ctx) ({ \
    glXMakeContextCurrent_PACKED *packed_data = malloc(sizeof(glXMakeContextCurrent_PACKED)); \
    packed_data->index = glXMakeContextCurrent_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXDrawable)draw; \
    packed_data->args.a3 = (GLXDrawable)read; \
    packed_data->args.a4 = (GLXContext)ctx; \
    (packed_call_t *)packed_data; \
})
#define pack_glXMakeCurrent(dpy, drawable, ctx) ({ \
    glXMakeCurrent_PACKED *packed_data = malloc(sizeof(glXMakeCurrent_PACKED)); \
    packed_data->index = glXMakeCurrent_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXDrawable)drawable; \
    packed_data->args.a3 = (GLXContext)ctx; \
    (packed_call_t *)packed_data; \
})
#define pack_glXMakeCurrentReadSGI(dpy, draw, read, ctx) ({ \
    glXMakeCurrentReadSGI_PACKED *packed_data = malloc(sizeof(glXMakeCurrentReadSGI_PACKED)); \
    packed_data->index = glXMakeCurrentReadSGI_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXDrawable)draw; \
    packed_data->args.a3 = (GLXDrawable)read; \
    packed_data->args.a4 = (GLXContext)ctx; \
    (packed_call_t *)packed_data; \
})
#define pack_glXQueryChannelDeltasSGIX(display, screen, channel, x, y, w, h) ({ \
    glXQueryChannelDeltasSGIX_PACKED *packed_data = malloc(sizeof(glXQueryChannelDeltasSGIX_PACKED)); \
    packed_data->index = glXQueryChannelDeltasSGIX_INDEX; \
    packed_data->args.a1 = (Display *)display; \
    packed_data->args.a2 = (int)screen; \
    packed_data->args.a3 = (int)channel; \
    packed_data->args.a4 = (int *)x; \
    packed_data->args.a5 = (int *)y; \
    packed_data->args.a6 = (int *)w; \
    packed_data->args.a7 = (int *)h; \
    (packed_call_t *)packed_data; \
})
#define pack_glXQueryChannelRectSGIX(display, screen, channel, dx, dy, dw, dh) ({ \
    glXQueryChannelRectSGIX_PACKED *packed_data = malloc(sizeof(glXQueryChannelRectSGIX_PACKED)); \
    packed_data->index = glXQueryChannelRectSGIX_INDEX; \
    packed_data->args.a1 = (Display *)display; \
    packed_data->args.a2 = (int)screen; \
    packed_data->args.a3 = (int)channel; \
    packed_data->args.a4 = (int *)dx; \
    packed_data->args.a5 = (int *)dy; \
    packed_data->args.a6 = (int *)dw; \
    packed_data->args.a7 = (int *)dh; \
    (packed_call_t *)packed_data; \
})
#define pack_glXQueryContext(dpy, ctx, attribute, value) ({ \
    glXQueryContext_PACKED *packed_data = malloc(sizeof(glXQueryContext_PACKED)); \
    packed_data->index = glXQueryContext_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXContext)ctx; \
    packed_data->args.a3 = (int)attribute; \
    packed_data->args.a4 = (int *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glXQueryContextInfoEXT(dpy, context, attribute, value) ({ \
    glXQueryContextInfoEXT_PACKED *packed_data = malloc(sizeof(glXQueryContextInfoEXT_PACKED)); \
    packed_data->index = glXQueryContextInfoEXT_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXContext)context; \
    packed_data->args.a3 = (int)attribute; \
    packed_data->args.a4 = (int *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glXQueryDrawable(dpy, draw, attribute, value) ({ \
    glXQueryDrawable_PACKED *packed_data = malloc(sizeof(glXQueryDrawable_PACKED)); \
    packed_data->index = glXQueryDrawable_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXDrawable)draw; \
    packed_data->args.a3 = (int)attribute; \
    packed_data->args.a4 = (unsigned int *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glXQueryExtension(display, errorBase, eventBase) ({ \
    glXQueryExtension_PACKED *packed_data = malloc(sizeof(glXQueryExtension_PACKED)); \
    packed_data->index = glXQueryExtension_INDEX; \
    packed_data->args.a1 = (Display *)display; \
    packed_data->args.a2 = (int *)errorBase; \
    packed_data->args.a3 = (int *)eventBase; \
    (packed_call_t *)packed_data; \
})
#define pack_glXQueryExtensionsString(dpy, screen) ({ \
    glXQueryExtensionsString_PACKED *packed_data = malloc(sizeof(glXQueryExtensionsString_PACKED)); \
    packed_data->index = glXQueryExtensionsString_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (int)screen; \
    (packed_call_t *)packed_data; \
})
#define pack_glXQueryFrameCountNV(dpy, screen, count) ({ \
    glXQueryFrameCountNV_PACKED *packed_data = malloc(sizeof(glXQueryFrameCountNV_PACKED)); \
    packed_data->index = glXQueryFrameCountNV_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (int)screen; \
    packed_data->args.a3 = (GLuint *)count; \
    (packed_call_t *)packed_data; \
})
#define pack_glXQueryGLXPbufferSGIX(dpy, pbuf, attribute, value) ({ \
    glXQueryGLXPbufferSGIX_PACKED *packed_data = malloc(sizeof(glXQueryGLXPbufferSGIX_PACKED)); \
    packed_data->index = glXQueryGLXPbufferSGIX_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXPbufferSGIX)pbuf; \
    packed_data->args.a3 = (int)attribute; \
    packed_data->args.a4 = (unsigned int *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glXQueryHyperpipeAttribSGIX(dpy, timeSlice, attrib, size, returnAttribList) ({ \
    glXQueryHyperpipeAttribSGIX_PACKED *packed_data = malloc(sizeof(glXQueryHyperpipeAttribSGIX_PACKED)); \
    packed_data->index = glXQueryHyperpipeAttribSGIX_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (int)timeSlice; \
    packed_data->args.a3 = (int)attrib; \
    packed_data->args.a4 = (int)size; \
    packed_data->args.a5 = (void *)returnAttribList; \
    (packed_call_t *)packed_data; \
})
#define pack_glXQueryHyperpipeBestAttribSGIX(dpy, timeSlice, attrib, size, attribList, returnAttribList) ({ \
    glXQueryHyperpipeBestAttribSGIX_PACKED *packed_data = malloc(sizeof(glXQueryHyperpipeBestAttribSGIX_PACKED)); \
    packed_data->index = glXQueryHyperpipeBestAttribSGIX_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (int)timeSlice; \
    packed_data->args.a3 = (int)attrib; \
    packed_data->args.a4 = (int)size; \
    packed_data->args.a5 = (void *)attribList; \
    packed_data->args.a6 = (void *)returnAttribList; \
    (packed_call_t *)packed_data; \
})
#define pack_glXQueryHyperpipeConfigSGIX(dpy, hpId, npipes) ({ \
    glXQueryHyperpipeConfigSGIX_PACKED *packed_data = malloc(sizeof(glXQueryHyperpipeConfigSGIX_PACKED)); \
    packed_data->index = glXQueryHyperpipeConfigSGIX_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (int)hpId; \
    packed_data->args.a3 = (int *)npipes; \
    (packed_call_t *)packed_data; \
})
#define pack_glXQueryHyperpipeNetworkSGIX(dpy, npipes) ({ \
    glXQueryHyperpipeNetworkSGIX_PACKED *packed_data = malloc(sizeof(glXQueryHyperpipeNetworkSGIX_PACKED)); \
    packed_data->index = glXQueryHyperpipeNetworkSGIX_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (int *)npipes; \
    (packed_call_t *)packed_data; \
})
#define pack_glXQueryMaxSwapBarriersSGIX(dpy, screen, max) ({ \
    glXQueryMaxSwapBarriersSGIX_PACKED *packed_data = malloc(sizeof(glXQueryMaxSwapBarriersSGIX_PACKED)); \
    packed_data->index = glXQueryMaxSwapBarriersSGIX_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (int)screen; \
    packed_data->args.a3 = (int *)max; \
    (packed_call_t *)packed_data; \
})
#define pack_glXQueryMaxSwapGroupsNV(dpy, screen, maxGroups, maxBarriers) ({ \
    glXQueryMaxSwapGroupsNV_PACKED *packed_data = malloc(sizeof(glXQueryMaxSwapGroupsNV_PACKED)); \
    packed_data->index = glXQueryMaxSwapGroupsNV_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (int)screen; \
    packed_data->args.a3 = (GLuint *)maxGroups; \
    packed_data->args.a4 = (GLuint *)maxBarriers; \
    (packed_call_t *)packed_data; \
})
#define pack_glXQueryServerString(dpy, screen, name) ({ \
    glXQueryServerString_PACKED *packed_data = malloc(sizeof(glXQueryServerString_PACKED)); \
    packed_data->index = glXQueryServerString_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (int)screen; \
    packed_data->args.a3 = (int)name; \
    (packed_call_t *)packed_data; \
})
#define pack_glXQuerySwapGroupNV(dpy, drawable, group, barrier) ({ \
    glXQuerySwapGroupNV_PACKED *packed_data = malloc(sizeof(glXQuerySwapGroupNV_PACKED)); \
    packed_data->index = glXQuerySwapGroupNV_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXDrawable)drawable; \
    packed_data->args.a3 = (GLuint *)group; \
    packed_data->args.a4 = (GLuint *)barrier; \
    (packed_call_t *)packed_data; \
})
#define pack_glXQueryVersion(dpy, maj, min) ({ \
    glXQueryVersion_PACKED *packed_data = malloc(sizeof(glXQueryVersion_PACKED)); \
    packed_data->index = glXQueryVersion_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (int *)maj; \
    packed_data->args.a3 = (int *)min; \
    (packed_call_t *)packed_data; \
})
#define pack_glXQueryVideoCaptureDeviceNV(dpy, device, attribute, value) ({ \
    glXQueryVideoCaptureDeviceNV_PACKED *packed_data = malloc(sizeof(glXQueryVideoCaptureDeviceNV_PACKED)); \
    packed_data->index = glXQueryVideoCaptureDeviceNV_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXVideoCaptureDeviceNV)device; \
    packed_data->args.a3 = (int)attribute; \
    packed_data->args.a4 = (int *)value; \
    (packed_call_t *)packed_data; \
})
#define pack_glXReleaseBuffersMESA(dpy, drawable) ({ \
    glXReleaseBuffersMESA_PACKED *packed_data = malloc(sizeof(glXReleaseBuffersMESA_PACKED)); \
    packed_data->index = glXReleaseBuffersMESA_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXDrawable)drawable; \
    (packed_call_t *)packed_data; \
})
#define pack_glXReleaseTexImageEXT(dpy, drawable, buffer) ({ \
    glXReleaseTexImageEXT_PACKED *packed_data = malloc(sizeof(glXReleaseTexImageEXT_PACKED)); \
    packed_data->index = glXReleaseTexImageEXT_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXDrawable)drawable; \
    packed_data->args.a3 = (int)buffer; \
    (packed_call_t *)packed_data; \
})
#define pack_glXReleaseVideoCaptureDeviceNV(dpy, device) ({ \
    glXReleaseVideoCaptureDeviceNV_PACKED *packed_data = malloc(sizeof(glXReleaseVideoCaptureDeviceNV_PACKED)); \
    packed_data->index = glXReleaseVideoCaptureDeviceNV_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXVideoCaptureDeviceNV)device; \
    (packed_call_t *)packed_data; \
})
#define pack_glXReleaseVideoDeviceNV(dpy, screen, VideoDevice) ({ \
    glXReleaseVideoDeviceNV_PACKED *packed_data = malloc(sizeof(glXReleaseVideoDeviceNV_PACKED)); \
    packed_data->index = glXReleaseVideoDeviceNV_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (int)screen; \
    packed_data->args.a3 = (GLXVideoDeviceNV)VideoDevice; \
    (packed_call_t *)packed_data; \
})
#define pack_glXReleaseVideoImageNV(dpy, pbuf) ({ \
    glXReleaseVideoImageNV_PACKED *packed_data = malloc(sizeof(glXReleaseVideoImageNV_PACKED)); \
    packed_data->index = glXReleaseVideoImageNV_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXPbuffer)pbuf; \
    (packed_call_t *)packed_data; \
})
#define pack_glXRender() ({ \
    glXRender_PACKED *packed_data = malloc(sizeof(glXRender_PACKED)); \
    packed_data->index = glXRender_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glXRenderLarge() ({ \
    glXRenderLarge_PACKED *packed_data = malloc(sizeof(glXRenderLarge_PACKED)); \
    packed_data->index = glXRenderLarge_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glXResetFrameCountNV(dpy, screen) ({ \
    glXResetFrameCountNV_PACKED *packed_data = malloc(sizeof(glXResetFrameCountNV_PACKED)); \
    packed_data->index = glXResetFrameCountNV_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (int)screen; \
    (packed_call_t *)packed_data; \
})
#define pack_glXSelectEvent(dpy, draw, event_mask) ({ \
    glXSelectEvent_PACKED *packed_data = malloc(sizeof(glXSelectEvent_PACKED)); \
    packed_data->index = glXSelectEvent_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXDrawable)draw; \
    packed_data->args.a3 = (unsigned long)event_mask; \
    (packed_call_t *)packed_data; \
})
#define pack_glXSelectEventSGIX(dpy, drawable, mask) ({ \
    glXSelectEventSGIX_PACKED *packed_data = malloc(sizeof(glXSelectEventSGIX_PACKED)); \
    packed_data->index = glXSelectEventSGIX_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXDrawable)drawable; \
    packed_data->args.a3 = (unsigned long)mask; \
    (packed_call_t *)packed_data; \
})
#define pack_glXSendPbufferToVideoNV(dpy, pbuf, iBufferType, pulCounterPbuffer, bBlock) ({ \
    glXSendPbufferToVideoNV_PACKED *packed_data = malloc(sizeof(glXSendPbufferToVideoNV_PACKED)); \
    packed_data->index = glXSendPbufferToVideoNV_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXPbuffer)pbuf; \
    packed_data->args.a3 = (int)iBufferType; \
    packed_data->args.a4 = (unsigned long *)pulCounterPbuffer; \
    packed_data->args.a5 = (GLboolean)bBlock; \
    (packed_call_t *)packed_data; \
})
#define pack_glXSet3DfxModeMESA(mode) ({ \
    glXSet3DfxModeMESA_PACKED *packed_data = malloc(sizeof(glXSet3DfxModeMESA_PACKED)); \
    packed_data->index = glXSet3DfxModeMESA_INDEX; \
    packed_data->args.a1 = (int)mode; \
    (packed_call_t *)packed_data; \
})
#define pack_glXSwapBuffers(dpy, drawable) ({ \
    glXSwapBuffers_PACKED *packed_data = malloc(sizeof(glXSwapBuffers_PACKED)); \
    packed_data->index = glXSwapBuffers_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXDrawable)drawable; \
    (packed_call_t *)packed_data; \
})
#define pack_glXSwapBuffersMscOML(dpy, drawable, target_msc, divisor, remainder) ({ \
    glXSwapBuffersMscOML_PACKED *packed_data = malloc(sizeof(glXSwapBuffersMscOML_PACKED)); \
    packed_data->index = glXSwapBuffersMscOML_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXDrawable)drawable; \
    packed_data->args.a3 = (int64_t)target_msc; \
    packed_data->args.a4 = (int64_t)divisor; \
    packed_data->args.a5 = (int64_t)remainder; \
    (packed_call_t *)packed_data; \
})
#define pack_glXSwapIntervalEXT(dpy, drawable, interval) ({ \
    glXSwapIntervalEXT_PACKED *packed_data = malloc(sizeof(glXSwapIntervalEXT_PACKED)); \
    packed_data->index = glXSwapIntervalEXT_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXDrawable)drawable; \
    packed_data->args.a3 = (int)interval; \
    (packed_call_t *)packed_data; \
})
#define pack_glXSwapIntervalMESA(interval) ({ \
    glXSwapIntervalMESA_PACKED *packed_data = malloc(sizeof(glXSwapIntervalMESA_PACKED)); \
    packed_data->index = glXSwapIntervalMESA_INDEX; \
    packed_data->args.a1 = (unsigned int)interval; \
    (packed_call_t *)packed_data; \
})
#define pack_glXSwapIntervalSGI(interval) ({ \
    glXSwapIntervalSGI_PACKED *packed_data = malloc(sizeof(glXSwapIntervalSGI_PACKED)); \
    packed_data->index = glXSwapIntervalSGI_INDEX; \
    packed_data->args.a1 = (int)interval; \
    (packed_call_t *)packed_data; \
})
#define pack_glXUseXFont(font, first, count, listBase) ({ \
    glXUseXFont_PACKED *packed_data = malloc(sizeof(glXUseXFont_PACKED)); \
    packed_data->index = glXUseXFont_INDEX; \
    packed_data->args.a1 = (Font)font; \
    packed_data->args.a2 = (int)first; \
    packed_data->args.a3 = (int)count; \
    packed_data->args.a4 = (int)listBase; \
    (packed_call_t *)packed_data; \
})
#define pack_glXVendorPrivate() ({ \
    glXVendorPrivate_PACKED *packed_data = malloc(sizeof(glXVendorPrivate_PACKED)); \
    packed_data->index = glXVendorPrivate_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glXVendorPrivateWithReply() ({ \
    glXVendorPrivateWithReply_PACKED *packed_data = malloc(sizeof(glXVendorPrivateWithReply_PACKED)); \
    packed_data->index = glXVendorPrivateWithReply_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glXWaitForMscOML(dpy, drawable, target_msc, divisor, remainder, ust, msc, sbc) ({ \
    glXWaitForMscOML_PACKED *packed_data = malloc(sizeof(glXWaitForMscOML_PACKED)); \
    packed_data->index = glXWaitForMscOML_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXDrawable)drawable; \
    packed_data->args.a3 = (int64_t)target_msc; \
    packed_data->args.a4 = (int64_t)divisor; \
    packed_data->args.a5 = (int64_t)remainder; \
    packed_data->args.a6 = (int64_t *)ust; \
    packed_data->args.a7 = (int64_t *)msc; \
    packed_data->args.a8 = (int64_t *)sbc; \
    (packed_call_t *)packed_data; \
})
#define pack_glXWaitForSbcOML(dpy, drawable, target_sbc, ust, msc, sbc) ({ \
    glXWaitForSbcOML_PACKED *packed_data = malloc(sizeof(glXWaitForSbcOML_PACKED)); \
    packed_data->index = glXWaitForSbcOML_INDEX; \
    packed_data->args.a1 = (Display *)dpy; \
    packed_data->args.a2 = (GLXDrawable)drawable; \
    packed_data->args.a3 = (int64_t)target_sbc; \
    packed_data->args.a4 = (int64_t *)ust; \
    packed_data->args.a5 = (int64_t *)msc; \
    packed_data->args.a6 = (int64_t *)sbc; \
    (packed_call_t *)packed_data; \
})
#define pack_glXWaitGL() ({ \
    glXWaitGL_PACKED *packed_data = malloc(sizeof(glXWaitGL_PACKED)); \
    packed_data->index = glXWaitGL_INDEX; \
    (packed_call_t *)packed_data; \
})
#define pack_glXWaitVideoSyncSGI(divisor, remainder, count) ({ \
    glXWaitVideoSyncSGI_PACKED *packed_data = malloc(sizeof(glXWaitVideoSyncSGI_PACKED)); \
    packed_data->index = glXWaitVideoSyncSGI_INDEX; \
    packed_data->args.a1 = (int)divisor; \
    packed_data->args.a2 = (int)remainder; \
    packed_data->args.a3 = (unsigned int *)count; \
    (packed_call_t *)packed_data; \
})
#define pack_glXWaitX() ({ \
    glXWaitX_PACKED *packed_data = malloc(sizeof(glXWaitX_PACKED)); \
    packed_data->index = glXWaitX_INDEX; \
    (packed_call_t *)packed_data; \
})
#endif
#endif
