{% extends "base/header.j2" %}
{% block content %}

enum FORMAT {
{% for f in formats %}
    FORMAT_{{ f.types }},
{% endfor %}
};

{% for f in formats %}
typedef {{ f.return }} (*FUNC_{{ f.types }})({{ f.args|args }});
{% if f.args %}
typedef struct {
    {% for arg in f.args %}
    {{ arg.type|unconst }} a{{ loop.index }}{% if arg.type == 'GLdouble' %} __attribute__ ((aligned(8))){% endif %};
    {% endfor %}
} ARGS_{{ f.types }};
{% endif %}
typedef struct {
    int index;
    {% if f.args %}
    ARGS_{{ f.types }} args;
    {% endif %}
} PACKED_{{ f.types }};
{% endfor %}

extern const int INDEX_RET_SIZE[];
extern const int INDEX_PACKED_SIZE[];
extern const char *INDEX_NAME[];
extern void glPushCall(void *data);
void glIndexedCall(const packed_call_t *packed, void *ret_v);
void glIndexedPrint(const packed_call_t *packed);

{% for func in functions %}
#define {{ func.name }}_INDEX {{ loop.index }}
#define {{ func.name }}_RETURN {{ func.return }}
#define {{ func.name }}_ARG_NAMES {{ func.args|args(0) }}
#define {{ func.name }}_ARG_EXPAND {{ func.args|args }}
#define {{ func.name }}_PACKED PACKED_{{ func.types }}
#define {{ func.name }}_FORMAT FORMAT_{{ func.types }}
{% if func.void %}
#define {{ func.name }}_VOID_ONLY_WRAP(...) { __VA_ARGS__ }
#define {{ func.name }}_NOT_VOID_WRAP(...) {}
{% else %}
#define {{ func.name }}_VOID_ONLY_WRAP(...) {}
#define {{ func.name }}_NOT_VOID_WRAP(...) { __VA_ARGS__ }
{% endif %}
{% endfor %}

{% for func in functions %}
{{ func.return }} {{ func.name }}({{ func.name }}_ARG_EXPAND);
typedef {{ func.return }} (*{{ func.name }}_PTR)({{ func.name }}_ARG_EXPAND);
{% endfor %}

{% endblock %}
